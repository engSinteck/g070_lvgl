
G070_LVGL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef68  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003870  0800f020  0800f020  0001f020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012890  08012890  00030064  2**0
                  CONTENTS
  4 .ARM          00000000  08012890  08012890  00030064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012890  08012890  00030064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012890  08012890  00022890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012894  08012894  00022894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08012898  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000720c  20000064  080128fc  00030064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007270  080128fc  00037270  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006a821  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000b97f  00000000  00000000  0009a8ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002468  00000000  00000000  000a6230  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00005288  00000000  00000000  000a8698  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020a00  00000000  00000000  000ad920  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00033326  00000000  00000000  000ce320  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a5f20  00000000  00000000  00101646  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a7566  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ca4  00000000  00000000  001a75e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000330f9  00000000  00000000  001ae288  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000064 	.word	0x20000064
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800f008 	.word	0x0800f008

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000068 	.word	0x20000068
 80000fc:	0800f008 	.word	0x0800f008

08000100 <strcmp>:
 8000100:	7802      	ldrb	r2, [r0, #0]
 8000102:	780b      	ldrb	r3, [r1, #0]
 8000104:	2a00      	cmp	r2, #0
 8000106:	d003      	beq.n	8000110 <strcmp+0x10>
 8000108:	3001      	adds	r0, #1
 800010a:	3101      	adds	r1, #1
 800010c:	429a      	cmp	r2, r3
 800010e:	d0f7      	beq.n	8000100 <strcmp>
 8000110:	1ad0      	subs	r0, r2, r3
 8000112:	4770      	bx	lr

08000114 <strlen>:
 8000114:	2300      	movs	r3, #0
 8000116:	5cc2      	ldrb	r2, [r0, r3]
 8000118:	3301      	adds	r3, #1
 800011a:	2a00      	cmp	r2, #0
 800011c:	d1fb      	bne.n	8000116 <strlen+0x2>
 800011e:	1e58      	subs	r0, r3, #1
 8000120:	4770      	bx	lr
	...

08000124 <__gnu_thumb1_case_sqi>:
 8000124:	b402      	push	{r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0049      	lsls	r1, r1, #1
 800012c:	5609      	ldrsb	r1, [r1, r0]
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	448e      	add	lr, r1
 8000132:	bc02      	pop	{r1}
 8000134:	4770      	bx	lr
 8000136:	46c0      	nop			; (mov r8, r8)

08000138 <__gnu_thumb1_case_uqi>:
 8000138:	b402      	push	{r1}
 800013a:	4671      	mov	r1, lr
 800013c:	0849      	lsrs	r1, r1, #1
 800013e:	0049      	lsls	r1, r1, #1
 8000140:	5c09      	ldrb	r1, [r1, r0]
 8000142:	0049      	lsls	r1, r1, #1
 8000144:	448e      	add	lr, r1
 8000146:	bc02      	pop	{r1}
 8000148:	4770      	bx	lr
 800014a:	46c0      	nop			; (mov r8, r8)

0800014c <__gnu_thumb1_case_shi>:
 800014c:	b403      	push	{r0, r1}
 800014e:	4671      	mov	r1, lr
 8000150:	0849      	lsrs	r1, r1, #1
 8000152:	0040      	lsls	r0, r0, #1
 8000154:	0049      	lsls	r1, r1, #1
 8000156:	5e09      	ldrsh	r1, [r1, r0]
 8000158:	0049      	lsls	r1, r1, #1
 800015a:	448e      	add	lr, r1
 800015c:	bc03      	pop	{r0, r1}
 800015e:	4770      	bx	lr

08000160 <__gnu_thumb1_case_uhi>:
 8000160:	b403      	push	{r0, r1}
 8000162:	4671      	mov	r1, lr
 8000164:	0849      	lsrs	r1, r1, #1
 8000166:	0040      	lsls	r0, r0, #1
 8000168:	0049      	lsls	r1, r1, #1
 800016a:	5a09      	ldrh	r1, [r1, r0]
 800016c:	0049      	lsls	r1, r1, #1
 800016e:	448e      	add	lr, r1
 8000170:	bc03      	pop	{r0, r1}
 8000172:	4770      	bx	lr

08000174 <__udivsi3>:
 8000174:	2200      	movs	r2, #0
 8000176:	0843      	lsrs	r3, r0, #1
 8000178:	428b      	cmp	r3, r1
 800017a:	d374      	bcc.n	8000266 <__udivsi3+0xf2>
 800017c:	0903      	lsrs	r3, r0, #4
 800017e:	428b      	cmp	r3, r1
 8000180:	d35f      	bcc.n	8000242 <__udivsi3+0xce>
 8000182:	0a03      	lsrs	r3, r0, #8
 8000184:	428b      	cmp	r3, r1
 8000186:	d344      	bcc.n	8000212 <__udivsi3+0x9e>
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d328      	bcc.n	80001e0 <__udivsi3+0x6c>
 800018e:	0c03      	lsrs	r3, r0, #16
 8000190:	428b      	cmp	r3, r1
 8000192:	d30d      	bcc.n	80001b0 <__udivsi3+0x3c>
 8000194:	22ff      	movs	r2, #255	; 0xff
 8000196:	0209      	lsls	r1, r1, #8
 8000198:	ba12      	rev	r2, r2
 800019a:	0c03      	lsrs	r3, r0, #16
 800019c:	428b      	cmp	r3, r1
 800019e:	d302      	bcc.n	80001a6 <__udivsi3+0x32>
 80001a0:	1212      	asrs	r2, r2, #8
 80001a2:	0209      	lsls	r1, r1, #8
 80001a4:	d065      	beq.n	8000272 <__udivsi3+0xfe>
 80001a6:	0b03      	lsrs	r3, r0, #12
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d319      	bcc.n	80001e0 <__udivsi3+0x6c>
 80001ac:	e000      	b.n	80001b0 <__udivsi3+0x3c>
 80001ae:	0a09      	lsrs	r1, r1, #8
 80001b0:	0bc3      	lsrs	r3, r0, #15
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x46>
 80001b6:	03cb      	lsls	r3, r1, #15
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0b83      	lsrs	r3, r0, #14
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x52>
 80001c2:	038b      	lsls	r3, r1, #14
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0b43      	lsrs	r3, r0, #13
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x5e>
 80001ce:	034b      	lsls	r3, r1, #13
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0b03      	lsrs	r3, r0, #12
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x6a>
 80001da:	030b      	lsls	r3, r1, #12
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0ac3      	lsrs	r3, r0, #11
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x76>
 80001e6:	02cb      	lsls	r3, r1, #11
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0a83      	lsrs	r3, r0, #10
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x82>
 80001f2:	028b      	lsls	r3, r1, #10
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0a43      	lsrs	r3, r0, #9
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x8e>
 80001fe:	024b      	lsls	r3, r1, #9
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0a03      	lsrs	r3, r0, #8
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x9a>
 800020a:	020b      	lsls	r3, r1, #8
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	d2cd      	bcs.n	80001ae <__udivsi3+0x3a>
 8000212:	09c3      	lsrs	r3, r0, #7
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xa8>
 8000218:	01cb      	lsls	r3, r1, #7
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0983      	lsrs	r3, r0, #6
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xb4>
 8000224:	018b      	lsls	r3, r1, #6
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0943      	lsrs	r3, r0, #5
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xc0>
 8000230:	014b      	lsls	r3, r1, #5
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xcc>
 800023c:	010b      	lsls	r3, r1, #4
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	08c3      	lsrs	r3, r0, #3
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xd8>
 8000248:	00cb      	lsls	r3, r1, #3
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0883      	lsrs	r3, r0, #2
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xe4>
 8000254:	008b      	lsls	r3, r1, #2
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0843      	lsrs	r3, r0, #1
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xf0>
 8000260:	004b      	lsls	r3, r1, #1
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	1a41      	subs	r1, r0, r1
 8000268:	d200      	bcs.n	800026c <__udivsi3+0xf8>
 800026a:	4601      	mov	r1, r0
 800026c:	4152      	adcs	r2, r2
 800026e:	4610      	mov	r0, r2
 8000270:	4770      	bx	lr
 8000272:	e7ff      	b.n	8000274 <__udivsi3+0x100>
 8000274:	b501      	push	{r0, lr}
 8000276:	2000      	movs	r0, #0
 8000278:	f000 f8f0 	bl	800045c <__aeabi_idiv0>
 800027c:	bd02      	pop	{r1, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_uidivmod>:
 8000280:	2900      	cmp	r1, #0
 8000282:	d0f7      	beq.n	8000274 <__udivsi3+0x100>
 8000284:	e776      	b.n	8000174 <__udivsi3>
 8000286:	4770      	bx	lr

08000288 <__divsi3>:
 8000288:	4603      	mov	r3, r0
 800028a:	430b      	orrs	r3, r1
 800028c:	d47f      	bmi.n	800038e <__divsi3+0x106>
 800028e:	2200      	movs	r2, #0
 8000290:	0843      	lsrs	r3, r0, #1
 8000292:	428b      	cmp	r3, r1
 8000294:	d374      	bcc.n	8000380 <__divsi3+0xf8>
 8000296:	0903      	lsrs	r3, r0, #4
 8000298:	428b      	cmp	r3, r1
 800029a:	d35f      	bcc.n	800035c <__divsi3+0xd4>
 800029c:	0a03      	lsrs	r3, r0, #8
 800029e:	428b      	cmp	r3, r1
 80002a0:	d344      	bcc.n	800032c <__divsi3+0xa4>
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d328      	bcc.n	80002fa <__divsi3+0x72>
 80002a8:	0c03      	lsrs	r3, r0, #16
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d30d      	bcc.n	80002ca <__divsi3+0x42>
 80002ae:	22ff      	movs	r2, #255	; 0xff
 80002b0:	0209      	lsls	r1, r1, #8
 80002b2:	ba12      	rev	r2, r2
 80002b4:	0c03      	lsrs	r3, r0, #16
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d302      	bcc.n	80002c0 <__divsi3+0x38>
 80002ba:	1212      	asrs	r2, r2, #8
 80002bc:	0209      	lsls	r1, r1, #8
 80002be:	d065      	beq.n	800038c <__divsi3+0x104>
 80002c0:	0b03      	lsrs	r3, r0, #12
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d319      	bcc.n	80002fa <__divsi3+0x72>
 80002c6:	e000      	b.n	80002ca <__divsi3+0x42>
 80002c8:	0a09      	lsrs	r1, r1, #8
 80002ca:	0bc3      	lsrs	r3, r0, #15
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x4c>
 80002d0:	03cb      	lsls	r3, r1, #15
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0b83      	lsrs	r3, r0, #14
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x58>
 80002dc:	038b      	lsls	r3, r1, #14
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0b43      	lsrs	r3, r0, #13
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x64>
 80002e8:	034b      	lsls	r3, r1, #13
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0b03      	lsrs	r3, r0, #12
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x70>
 80002f4:	030b      	lsls	r3, r1, #12
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0ac3      	lsrs	r3, r0, #11
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x7c>
 8000300:	02cb      	lsls	r3, r1, #11
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0a83      	lsrs	r3, r0, #10
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x88>
 800030c:	028b      	lsls	r3, r1, #10
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0a43      	lsrs	r3, r0, #9
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x94>
 8000318:	024b      	lsls	r3, r1, #9
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0a03      	lsrs	r3, r0, #8
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0xa0>
 8000324:	020b      	lsls	r3, r1, #8
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	d2cd      	bcs.n	80002c8 <__divsi3+0x40>
 800032c:	09c3      	lsrs	r3, r0, #7
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xae>
 8000332:	01cb      	lsls	r3, r1, #7
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0983      	lsrs	r3, r0, #6
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xba>
 800033e:	018b      	lsls	r3, r1, #6
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0943      	lsrs	r3, r0, #5
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xc6>
 800034a:	014b      	lsls	r3, r1, #5
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xd2>
 8000356:	010b      	lsls	r3, r1, #4
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	08c3      	lsrs	r3, r0, #3
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xde>
 8000362:	00cb      	lsls	r3, r1, #3
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0883      	lsrs	r3, r0, #2
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xea>
 800036e:	008b      	lsls	r3, r1, #2
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0843      	lsrs	r3, r0, #1
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xf6>
 800037a:	004b      	lsls	r3, r1, #1
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	1a41      	subs	r1, r0, r1
 8000382:	d200      	bcs.n	8000386 <__divsi3+0xfe>
 8000384:	4601      	mov	r1, r0
 8000386:	4152      	adcs	r2, r2
 8000388:	4610      	mov	r0, r2
 800038a:	4770      	bx	lr
 800038c:	e05d      	b.n	800044a <__divsi3+0x1c2>
 800038e:	0fca      	lsrs	r2, r1, #31
 8000390:	d000      	beq.n	8000394 <__divsi3+0x10c>
 8000392:	4249      	negs	r1, r1
 8000394:	1003      	asrs	r3, r0, #32
 8000396:	d300      	bcc.n	800039a <__divsi3+0x112>
 8000398:	4240      	negs	r0, r0
 800039a:	4053      	eors	r3, r2
 800039c:	2200      	movs	r2, #0
 800039e:	469c      	mov	ip, r3
 80003a0:	0903      	lsrs	r3, r0, #4
 80003a2:	428b      	cmp	r3, r1
 80003a4:	d32d      	bcc.n	8000402 <__divsi3+0x17a>
 80003a6:	0a03      	lsrs	r3, r0, #8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d312      	bcc.n	80003d2 <__divsi3+0x14a>
 80003ac:	22fc      	movs	r2, #252	; 0xfc
 80003ae:	0189      	lsls	r1, r1, #6
 80003b0:	ba12      	rev	r2, r2
 80003b2:	0a03      	lsrs	r3, r0, #8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d30c      	bcc.n	80003d2 <__divsi3+0x14a>
 80003b8:	0189      	lsls	r1, r1, #6
 80003ba:	1192      	asrs	r2, r2, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d308      	bcc.n	80003d2 <__divsi3+0x14a>
 80003c0:	0189      	lsls	r1, r1, #6
 80003c2:	1192      	asrs	r2, r2, #6
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d304      	bcc.n	80003d2 <__divsi3+0x14a>
 80003c8:	0189      	lsls	r1, r1, #6
 80003ca:	d03a      	beq.n	8000442 <__divsi3+0x1ba>
 80003cc:	1192      	asrs	r2, r2, #6
 80003ce:	e000      	b.n	80003d2 <__divsi3+0x14a>
 80003d0:	0989      	lsrs	r1, r1, #6
 80003d2:	09c3      	lsrs	r3, r0, #7
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x154>
 80003d8:	01cb      	lsls	r3, r1, #7
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	0983      	lsrs	r3, r0, #6
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x160>
 80003e4:	018b      	lsls	r3, r1, #6
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0943      	lsrs	r3, r0, #5
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x16c>
 80003f0:	014b      	lsls	r3, r1, #5
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	0903      	lsrs	r3, r0, #4
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x178>
 80003fc:	010b      	lsls	r3, r1, #4
 80003fe:	1ac0      	subs	r0, r0, r3
 8000400:	4152      	adcs	r2, r2
 8000402:	08c3      	lsrs	r3, r0, #3
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x184>
 8000408:	00cb      	lsls	r3, r1, #3
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0883      	lsrs	r3, r0, #2
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x190>
 8000414:	008b      	lsls	r3, r1, #2
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	d2d9      	bcs.n	80003d0 <__divsi3+0x148>
 800041c:	0843      	lsrs	r3, r0, #1
 800041e:	428b      	cmp	r3, r1
 8000420:	d301      	bcc.n	8000426 <__divsi3+0x19e>
 8000422:	004b      	lsls	r3, r1, #1
 8000424:	1ac0      	subs	r0, r0, r3
 8000426:	4152      	adcs	r2, r2
 8000428:	1a41      	subs	r1, r0, r1
 800042a:	d200      	bcs.n	800042e <__divsi3+0x1a6>
 800042c:	4601      	mov	r1, r0
 800042e:	4663      	mov	r3, ip
 8000430:	4152      	adcs	r2, r2
 8000432:	105b      	asrs	r3, r3, #1
 8000434:	4610      	mov	r0, r2
 8000436:	d301      	bcc.n	800043c <__divsi3+0x1b4>
 8000438:	4240      	negs	r0, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d500      	bpl.n	8000440 <__divsi3+0x1b8>
 800043e:	4249      	negs	r1, r1
 8000440:	4770      	bx	lr
 8000442:	4663      	mov	r3, ip
 8000444:	105b      	asrs	r3, r3, #1
 8000446:	d300      	bcc.n	800044a <__divsi3+0x1c2>
 8000448:	4240      	negs	r0, r0
 800044a:	b501      	push	{r0, lr}
 800044c:	2000      	movs	r0, #0
 800044e:	f000 f805 	bl	800045c <__aeabi_idiv0>
 8000452:	bd02      	pop	{r1, pc}

08000454 <__aeabi_idivmod>:
 8000454:	2900      	cmp	r1, #0
 8000456:	d0f8      	beq.n	800044a <__divsi3+0x1c2>
 8000458:	e716      	b.n	8000288 <__divsi3>
 800045a:	4770      	bx	lr

0800045c <__aeabi_idiv0>:
 800045c:	4770      	bx	lr
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000462:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000464:	2214      	movs	r2, #20
 8000466:	2100      	movs	r1, #0
 8000468:	a805      	add	r0, sp, #20
 800046a:	f00e fdbd 	bl	800efe8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800046e:	2004      	movs	r0, #4
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000470:	2520      	movs	r5, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000472:	2401      	movs	r4, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000474:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000476:	4b1e      	ldr	r3, [pc, #120]	; (80004f0 <MX_GPIO_Init+0x90>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000478:	27a0      	movs	r7, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800047a:	6b59      	ldr	r1, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800047c:	05ff      	lsls	r7, r7, #23
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800047e:	4301      	orrs	r1, r0
 8000480:	6359      	str	r1, [r3, #52]	; 0x34
 8000482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000484:	0029      	movs	r1, r5
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000486:	4002      	ands	r2, r0
 8000488:	9201      	str	r2, [sp, #4]
 800048a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800048c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800048e:	0038      	movs	r0, r7
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000490:	432a      	orrs	r2, r5
 8000492:	635a      	str	r2, [r3, #52]	; 0x34
 8000494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000496:	402a      	ands	r2, r5
 8000498:	9202      	str	r2, [sp, #8]
 800049a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800049e:	4322      	orrs	r2, r4
 80004a0:	635a      	str	r2, [r3, #52]	; 0x34
 80004a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004a4:	4022      	ands	r2, r4
 80004a6:	9203      	str	r2, [sp, #12]
 80004a8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004ac:	4332      	orrs	r2, r6
 80004ae:	635a      	str	r2, [r3, #52]	; 0x34
 80004b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80004b2:	0022      	movs	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b4:	4033      	ands	r3, r6
 80004b6:	9304      	str	r3, [sp, #16]
 80004b8:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80004ba:	f000 ff4b 	bl	8001354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_RST_Pin|TFT_DC_Pin|TFT_CS_Pin|GPIO_PIN_10, GPIO_PIN_SET);
 80004be:	0022      	movs	r2, r4
 80004c0:	490c      	ldr	r1, [pc, #48]	; (80004f4 <MX_GPIO_Init+0x94>)
 80004c2:	480d      	ldr	r0, [pc, #52]	; (80004f8 <MX_GPIO_Init+0x98>)
 80004c4:	f000 ff46 	bl	8001354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80004c8:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ca:	2500      	movs	r5, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80004cc:	a905      	add	r1, sp, #20
 80004ce:	0038      	movs	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d4:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80004d6:	f000 fe8f 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PB10 */
  GPIO_InitStruct.Pin = TFT_RST_Pin|TFT_DC_Pin|TFT_CS_Pin|GPIO_PIN_10;
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <MX_GPIO_Init+0x94>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004dc:	a905      	add	r1, sp, #20
 80004de:	4806      	ldr	r0, [pc, #24]	; (80004f8 <MX_GPIO_Init+0x98>)
  GPIO_InitStruct.Pin = TFT_RST_Pin|TFT_DC_Pin|TFT_CS_Pin|GPIO_PIN_10;
 80004e0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e6:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e8:	f000 fe86 	bl	80011f8 <HAL_GPIO_Init>

}
 80004ec:	b00b      	add	sp, #44	; 0x2c
 80004ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f0:	40021000 	.word	0x40021000
 80004f4:	00000407 	.word	0x00000407
 80004f8:	50000400 	.word	0x50000400

080004fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80004fc:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004fe:	4b13      	ldr	r3, [pc, #76]	; (800054c <MX_I2C1_Init+0x50>)
 8000500:	4c13      	ldr	r4, [pc, #76]	; (8000550 <MX_I2C1_Init+0x54>)
  hi2c1.Init.Timing = 0x10707DBC;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000502:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 8000504:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000506:	4b13      	ldr	r3, [pc, #76]	; (8000554 <MX_I2C1_Init+0x58>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000508:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x10707DBC;
 800050a:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800050c:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800050e:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 8000510:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000512:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000514:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000516:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000518:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800051a:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800051c:	f000 ff20 	bl	8001360 <HAL_I2C_Init>
 8000520:	2800      	cmp	r0, #0
 8000522:	d001      	beq.n	8000528 <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 8000524:	f000 f94c 	bl	80007c0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000528:	2100      	movs	r1, #0
 800052a:	0020      	movs	r0, r4
 800052c:	f000 ff6e 	bl	800140c <HAL_I2CEx_ConfigAnalogFilter>
 8000530:	2800      	cmp	r0, #0
 8000532:	d001      	beq.n	8000538 <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
 8000534:	f000 f944 	bl	80007c0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000538:	2100      	movs	r1, #0
 800053a:	0020      	movs	r0, r4
 800053c:	f000 ff8c 	bl	8001458 <HAL_I2CEx_ConfigDigitalFilter>
 8000540:	2800      	cmp	r0, #0
 8000542:	d001      	beq.n	8000548 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000544:	f000 f93c 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000548:	bd10      	pop	{r4, pc}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	40005400 	.word	0x40005400
 8000550:	20006edc 	.word	0x20006edc
 8000554:	10707dbc 	.word	0x10707dbc

08000558 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000558:	b510      	push	{r4, lr}
 800055a:	0004      	movs	r4, r0
 800055c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055e:	2214      	movs	r2, #20
 8000560:	2100      	movs	r1, #0
 8000562:	a803      	add	r0, sp, #12
 8000564:	f00e fd40 	bl	800efe8 <memset>
  if(i2cHandle->Instance==I2C1)
 8000568:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <HAL_I2C_MspInit+0x58>)
 800056a:	6822      	ldr	r2, [r4, #0]
 800056c:	429a      	cmp	r2, r3
 800056e:	d11d      	bne.n	80005ac <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000570:	2102      	movs	r1, #2
 8000572:	4c10      	ldr	r4, [pc, #64]	; (80005b4 <HAL_I2C_MspInit+0x5c>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000574:	4810      	ldr	r0, [pc, #64]	; (80005b8 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000576:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000578:	430a      	orrs	r2, r1
 800057a:	6362      	str	r2, [r4, #52]	; 0x34
 800057c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800057e:	400b      	ands	r3, r1
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000584:	23c0      	movs	r3, #192	; 0xc0
 8000586:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000588:	3bae      	subs	r3, #174	; 0xae
 800058a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800058c:	3b11      	subs	r3, #17
 800058e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000590:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000592:	3305      	adds	r3, #5
 8000594:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000596:	f000 fe2f 	bl	80011f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800059a:	2180      	movs	r1, #128	; 0x80
 800059c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800059e:	0389      	lsls	r1, r1, #14
 80005a0:	430a      	orrs	r2, r1
 80005a2:	63e2      	str	r2, [r4, #60]	; 0x3c
 80005a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80005a6:	400b      	ands	r3, r1
 80005a8:	9302      	str	r3, [sp, #8]
 80005aa:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80005ac:	b008      	add	sp, #32
 80005ae:	bd10      	pop	{r4, pc}
 80005b0:	40005400 	.word	0x40005400
 80005b4:	40021000 	.word	0x40021000
 80005b8:	50000400 	.word	0x50000400

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005be:	2610      	movs	r6, #16
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	2580      	movs	r5, #128	; 0x80
{
 80005c2:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c4:	2234      	movs	r2, #52	; 0x34
 80005c6:	2100      	movs	r1, #0
 80005c8:	a80b      	add	r0, sp, #44	; 0x2c
 80005ca:	f00e fd0d 	bl	800efe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ce:	0032      	movs	r2, r6
 80005d0:	2100      	movs	r1, #0
 80005d2:	4668      	mov	r0, sp
 80005d4:	f00e fd08 	bl	800efe8 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	00ad      	lsls	r5, r5, #2
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005da:	221c      	movs	r2, #28
 80005dc:	2100      	movs	r1, #0
 80005de:	a804      	add	r0, sp, #16
 80005e0:	f00e fd02 	bl	800efe8 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	0028      	movs	r0, r5
 80005e6:	f000 ff5b 	bl	80014a0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80005ea:	2309      	movs	r3, #9
 80005ec:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005ee:	23a0      	movs	r3, #160	; 0xa0
 80005f0:	02db      	lsls	r3, r3, #11
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005f4:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005f6:	2301      	movs	r3, #1
 80005f8:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fa:	191b      	adds	r3, r3, r4
 80005fc:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000602:	2380      	movs	r3, #128	; 0x80
 8000604:	029b      	lsls	r3, r3, #10
 8000606:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000608:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060a:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800060c:	059b      	lsls	r3, r3, #22
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000610:	9615      	str	r6, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000612:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f000 ff6e 	bl	80014f4 <HAL_RCC_OscConfig>
 8000618:	2800      	cmp	r0, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x64>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800061c:	b672      	cpsid	i
 800061e:	e7fe      	b.n	800061e <SystemClock_Config+0x62>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000622:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000624:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000626:	0021      	movs	r1, r4
 8000628:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062a:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062c:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800062e:	f001 f9c7 	bl	80019c0 <HAL_RCC_ClockConfig>
 8000632:	2800      	cmp	r0, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x7e>
 8000636:	b672      	cpsid	i
 8000638:	e7fe      	b.n	8000638 <SystemClock_Config+0x7c>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 800063a:	4b07      	ldr	r3, [pc, #28]	; (8000658 <SystemClock_Config+0x9c>)
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800063c:	9006      	str	r0, [sp, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800063e:	9007      	str	r0, [sp, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000640:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8000642:	9304      	str	r3, [sp, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000644:	950a      	str	r5, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000646:	f001 fa97 	bl	8001b78 <HAL_RCCEx_PeriphCLKConfig>
 800064a:	2800      	cmp	r0, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x96>
 800064e:	b672      	cpsid	i
 8000650:	e7fe      	b.n	8000650 <SystemClock_Config+0x94>
  {
    Error_Handler();
  }
}
 8000652:	b018      	add	sp, #96	; 0x60
 8000654:	bd70      	pop	{r4, r5, r6, pc}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	00020022 	.word	0x00020022

0800065c <lv_ex_label_1>:

/* USER CODE BEGIN 4 */
void lv_ex_label_1(void)
{
 800065c:	b513      	push	{r0, r1, r4, lr}
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
    return lv_disp_get_scr_act(lv_disp_get_default());
 800065e:	f00b f835 	bl	800b6cc <lv_disp_get_default>
 8000662:	f002 fe4b 	bl	80032fc <lv_disp_get_scr_act>
    lv_obj_t * label1 = lv_label_create(lv_scr_act(), NULL);
 8000666:	2100      	movs	r1, #0
 8000668:	f00e fbc0 	bl	800edec <lv_label_create>
 800066c:	0004      	movs	r4, r0
    lv_label_set_long_mode(label1, LV_LABEL_LONG_BREAK);     /*Break the long lines*/
 800066e:	2101      	movs	r1, #1
 8000670:	f00e fb7c 	bl	800ed6c <lv_label_set_long_mode>
    lv_label_set_recolor(label1, true);                      /*Enable re-coloring by commands in the text*/
 8000674:	0020      	movs	r0, r4
 8000676:	2101      	movs	r1, #1
 8000678:	f00e fba2 	bl	800edc0 <lv_label_set_recolor>
    lv_label_set_align(label1, LV_LABEL_ALIGN_CENTER);       /*Center aligned lines*/
 800067c:	0020      	movs	r0, r4
 800067e:	2101      	movs	r1, #1
 8000680:	f00d ff53 	bl	800e52a <lv_label_set_align>
    lv_label_set_text(label1, "#0000ff Re-color# #ff00ff words# #ff0000 of a# label "
 8000684:	0020      	movs	r0, r4
 8000686:	4916      	ldr	r1, [pc, #88]	; (80006e0 <lv_ex_label_1+0x84>)
 8000688:	f00e fb1a 	bl	800ecc0 <lv_label_set_text>
                              "and  wrap long text automatically.");
    lv_obj_set_width(label1, 150);
 800068c:	0020      	movs	r0, r4
 800068e:	2196      	movs	r1, #150	; 0x96
 8000690:	f003 fc9c 	bl	8003fcc <lv_obj_set_width>
    lv_obj_align(label1, NULL, LV_ALIGN_CENTER, 0, -30);
 8000694:	231e      	movs	r3, #30
 8000696:	425b      	negs	r3, r3
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2300      	movs	r3, #0
 800069c:	0020      	movs	r0, r4
 800069e:	001a      	movs	r2, r3
 80006a0:	0019      	movs	r1, r3
 80006a2:	f003 fa59 	bl	8003b58 <lv_obj_align>
 80006a6:	f00b f811 	bl	800b6cc <lv_disp_get_default>
 80006aa:	f002 fe27 	bl	80032fc <lv_disp_get_scr_act>

    lv_obj_t * label2 = lv_label_create(lv_scr_act(), NULL);
 80006ae:	2100      	movs	r1, #0
 80006b0:	f00e fb9c 	bl	800edec <lv_label_create>
 80006b4:	0004      	movs	r4, r0
    lv_label_set_long_mode(label2, LV_LABEL_LONG_SROLL_CIRC);     /*Circular scroll*/
 80006b6:	2104      	movs	r1, #4
 80006b8:	f00e fb58 	bl	800ed6c <lv_label_set_long_mode>
    lv_obj_set_width(label2, 150);
 80006bc:	0020      	movs	r0, r4
 80006be:	2196      	movs	r1, #150	; 0x96
 80006c0:	f003 fc84 	bl	8003fcc <lv_obj_set_width>
    lv_label_set_text(label2, "It is a circularly scrolling text. ");
 80006c4:	0020      	movs	r0, r4
 80006c6:	4907      	ldr	r1, [pc, #28]	; (80006e4 <lv_ex_label_1+0x88>)
 80006c8:	f00e fafa 	bl	800ecc0 <lv_label_set_text>
    lv_obj_align(label2, NULL, LV_ALIGN_CENTER, 0, 30);
 80006cc:	231e      	movs	r3, #30
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	2300      	movs	r3, #0
 80006d2:	0020      	movs	r0, r4
 80006d4:	001a      	movs	r2, r3
 80006d6:	0019      	movs	r1, r3
 80006d8:	f003 fa3e 	bl	8003b58 <lv_obj_align>
}
 80006dc:	bd13      	pop	{r0, r1, r4, pc}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	0800f02c 	.word	0x0800f02c
 80006e4:	0800f084 	.word	0x0800f084

080006e8 <main>:
{
 80006e8:	b510      	push	{r4, lr}
 80006ea:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 80006ec:	f000 fd0a 	bl	8001104 <HAL_Init>
  SystemClock_Config();
 80006f0:	f7ff ff64 	bl	80005bc <SystemClock_Config>
  MX_GPIO_Init();
 80006f4:	f7ff feb4 	bl	8000460 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006f8:	f000 fa38 	bl	8000b6c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80006fc:	f7ff fefe 	bl	80004fc <MX_I2C1_Init>
  MX_RTC_Init();
 8000700:	f000 f860 	bl	80007c4 <MX_RTC_Init>
  MX_SPI1_Init();
 8000704:	f000 f8ba 	bl	800087c <MX_SPI1_Init>
  MX_TIM1_Init();
 8000708:	f000 f9b4 	bl	8000a74 <MX_TIM1_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800070c:	4c1d      	ldr	r4, [pc, #116]	; (8000784 <main+0x9c>)
 800070e:	2100      	movs	r1, #0
 8000710:	0020      	movs	r0, r4
 8000712:	f002 fadb 	bl	8002ccc <HAL_TIM_PWM_Start>
   __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 2048);	// PWM_CH1 = 2048 PWM_BRILHO_TFT
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	6823      	ldr	r3, [r4, #0]
 800071a:	0112      	lsls	r2, r2, #4
 800071c:	635a      	str	r2, [r3, #52]	; 0x34
   ST7735_Init();
 800071e:	f000 fb1b 	bl	8000d58 <ST7735_Init>
   ST7735_AddrSet(0, 0, LV_HOR_RES_MAX-1, LV_VER_RES_MAX-1);
 8000722:	2100      	movs	r1, #0
 8000724:	237f      	movs	r3, #127	; 0x7f
 8000726:	0008      	movs	r0, r1
 8000728:	229f      	movs	r2, #159	; 0x9f
 800072a:	f000 fba1 	bl	8000e70 <ST7735_AddrSet>
   ST7735_Clear(0x0000);
 800072e:	2000      	movs	r0, #0
 8000730:	f000 fbd4 	bl	8000edc <ST7735_Clear>
   ST7735_Orientation(scr_CCW);
 8000734:	2002      	movs	r0, #2
 8000736:	f000 fadd 	bl	8000cf4 <ST7735_Orientation>
   ST7735_PutStr5x7(40, 10, "Hello world!", RGB565(255,255,255));
 800073a:	22ff      	movs	r2, #255	; 0xff
 800073c:	0011      	movs	r1, r2
 800073e:	0010      	movs	r0, r2
 8000740:	f000 fad0 	bl	8000ce4 <RGB565>
 8000744:	4a10      	ldr	r2, [pc, #64]	; (8000788 <main+0xa0>)
 8000746:	0003      	movs	r3, r0
 8000748:	210a      	movs	r1, #10
 800074a:	2028      	movs	r0, #40	; 0x28
 800074c:	f000 fcb2 	bl	80010b4 <ST7735_PutStr5x7>
   lv_disp_buf_init(&disp_buf, buf, NULL, LV_HOR_RES_MAX * 10);    //Initialize the display buffer
 8000750:	23c8      	movs	r3, #200	; 0xc8
 8000752:	4c0e      	ldr	r4, [pc, #56]	; (800078c <main+0xa4>)
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	2200      	movs	r2, #0
 8000758:	490d      	ldr	r1, [pc, #52]	; (8000790 <main+0xa8>)
 800075a:	0020      	movs	r0, r4
 800075c:	f00a ffa8 	bl	800b6b0 <lv_disp_buf_init>
   lv_init();
 8000760:	f003 f82a 	bl	80037b8 <lv_init>
   lv_disp_drv_init(&disp_drv);          //Basic initialization
 8000764:	a801      	add	r0, sp, #4
 8000766:	f00a ff81 	bl	800b66c <lv_disp_drv_init>
   disp_drv.hor_res = LV_HOR_RES_MAX;	//Set the horizontal resolution
 800076a:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <main+0xac>)
   lv_disp_drv_register(&disp_drv);      //Finally register the driver
 800076c:	a801      	add	r0, sp, #4
   disp_drv.hor_res = LV_HOR_RES_MAX;	//Set the horizontal resolution
 800076e:	9301      	str	r3, [sp, #4]
   disp_drv.flush_cb = ST7735_Flush;	//Set your driver function
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <main+0xb0>)
   disp_drv.buffer = &disp_buf;          //Assign the buffer to teh display
 8000772:	9402      	str	r4, [sp, #8]
   disp_drv.flush_cb = ST7735_Flush;	//Set your driver function
 8000774:	9304      	str	r3, [sp, #16]
   lv_disp_drv_register(&disp_drv);      //Finally register the driver
 8000776:	f00b f83f 	bl	800b7f8 <lv_disp_drv_register>
   lv_ex_label_1();
 800077a:	f7ff ff6f 	bl	800065c <lv_ex_label_1>
	  lv_task_handler();
 800077e:	f00c f839 	bl	800c7f4 <lv_task_handler>
 8000782:	e7fc      	b.n	800077e <main+0x96>
 8000784:	20007004 	.word	0x20007004
 8000788:	0800f0a8 	.word	0x0800f0a8
 800078c:	20005d00 	.word	0x20005d00
 8000790:	20000080 	.word	0x20000080
 8000794:	008000a0 	.word	0x008000a0
 8000798:	08000f49 	.word	0x08000f49

0800079c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800079c:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800079e:	6803      	ldr	r3, [r0, #0]
 80007a0:	4c06      	ldr	r4, [pc, #24]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x20>)
{
 80007a2:	0005      	movs	r5, r0
  if (htim->Instance == TIM6) {
 80007a4:	42a3      	cmp	r3, r4
 80007a6:	d101      	bne.n	80007ac <HAL_TIM_PeriodElapsedCallback+0x10>
    HAL_IncTick();
 80007a8:	f000 fcc0 	bl	800112c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM6) {
 80007ac:	682b      	ldr	r3, [r5, #0]
 80007ae:	42a3      	cmp	r3, r4
 80007b0:	d102      	bne.n	80007b8 <HAL_TIM_PeriodElapsedCallback+0x1c>
	  lv_tick_inc(1);
 80007b2:	2001      	movs	r0, #1
 80007b4:	f00b f89c 	bl	800b8f0 <lv_tick_inc>
  }
  /* USER CODE END Callback 1 */
}
 80007b8:	bd70      	pop	{r4, r5, r6, pc}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	40001000 	.word	0x40001000

080007c0 <Error_Handler>:
 80007c0:	b672      	cpsid	i
 80007c2:	e7fe      	b.n	80007c2 <Error_Handler+0x2>

080007c4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80007c4:	b570      	push	{r4, r5, r6, lr}
 80007c6:	b086      	sub	sp, #24

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007c8:	ae01      	add	r6, sp, #4
 80007ca:	2214      	movs	r2, #20
 80007cc:	2100      	movs	r1, #0
 80007ce:	0030      	movs	r0, r6
 80007d0:	f00e fc0a 	bl	800efe8 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007d4:	4d19      	ldr	r5, [pc, #100]	; (800083c <MX_RTC_Init+0x78>)
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_RTC_Init+0x7c>)
  RTC_DateTypeDef sDate = {0};
 80007d8:	2400      	movs	r4, #0
  hrtc.Instance = RTC;
 80007da:	602b      	str	r3, [r5, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 80007dc:	237f      	movs	r3, #127	; 0x7f
 80007de:	60eb      	str	r3, [r5, #12]
  hrtc.Init.SynchPrediv = 255;
 80007e0:	3380      	adds	r3, #128	; 0x80
 80007e2:	612b      	str	r3, [r5, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007e4:	2380      	movs	r3, #128	; 0x80
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007e6:	0028      	movs	r0, r5
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007e8:	05db      	lsls	r3, r3, #23
  RTC_DateTypeDef sDate = {0};
 80007ea:	9400      	str	r4, [sp, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007ec:	60ac      	str	r4, [r5, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007ee:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80007f0:	61ac      	str	r4, [r5, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007f2:	61ec      	str	r4, [r5, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007f4:	622b      	str	r3, [r5, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80007f6:	626c      	str	r4, [r5, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007f8:	f001 fad0 	bl	8001d9c <HAL_RTC_Init>
 80007fc:	42a0      	cmp	r0, r4
 80007fe:	d001      	beq.n	8000804 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8000800:	f7ff ffde 	bl	80007c0 <Error_Handler>
  sTime.Minutes = 0x0;
  sTime.Seconds = 0x0;
  sTime.SubSeconds = 0x0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000804:	2201      	movs	r2, #1
 8000806:	0031      	movs	r1, r6
 8000808:	0028      	movs	r0, r5
  sTime.Hours = 0x0;
 800080a:	8034      	strh	r4, [r6, #0]
  sTime.Minutes = 0x0;
 800080c:	70b4      	strb	r4, [r6, #2]
  sTime.SubSeconds = 0x0;
 800080e:	6074      	str	r4, [r6, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000810:	60f4      	str	r4, [r6, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000812:	6134      	str	r4, [r6, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000814:	f001 fb1e 	bl	8001e54 <HAL_RTC_SetTime>
 8000818:	2800      	cmp	r0, #0
 800081a:	d001      	beq.n	8000820 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 800081c:	f7ff ffd0 	bl	80007c0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <MX_RTC_Init+0x80>)
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 0x1;
  sDate.Year = 0x0;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000822:	2201      	movs	r2, #1
 8000824:	4669      	mov	r1, sp
 8000826:	0028      	movs	r0, r5
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000828:	9300      	str	r3, [sp, #0]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800082a:	f001 fb7d 	bl	8001f28 <HAL_RTC_SetDate>
 800082e:	2800      	cmp	r0, #0
 8000830:	d001      	beq.n	8000836 <MX_RTC_Init+0x72>
  {
    Error_Handler();
 8000832:	f7ff ffc5 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000836:	b006      	add	sp, #24
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	20006f28 	.word	0x20006f28
 8000840:	40002800 	.word	0x40002800
 8000844:	00010101 	.word	0x00010101

08000848 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <HAL_RTC_MspInit+0x2c>)
 800084a:	6802      	ldr	r2, [r0, #0]
{
 800084c:	b082      	sub	sp, #8
  if(rtcHandle->Instance==RTC)
 800084e:	429a      	cmp	r2, r3
 8000850:	d10e      	bne.n	8000870 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000852:	2280      	movs	r2, #128	; 0x80
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <HAL_RTC_MspInit+0x30>)
 8000856:	0212      	lsls	r2, r2, #8
 8000858:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800085a:	430a      	orrs	r2, r1
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800085c:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_RTC_ENABLE();
 800085e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000860:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000862:	00c9      	lsls	r1, r1, #3
 8000864:	430a      	orrs	r2, r1
 8000866:	63da      	str	r2, [r3, #60]	; 0x3c
 8000868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800086a:	400b      	ands	r3, r1
 800086c:	9301      	str	r3, [sp, #4]
 800086e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000870:	b002      	add	sp, #8
 8000872:	4770      	bx	lr
 8000874:	40002800 	.word	0x40002800
 8000878:	40021000 	.word	0x40021000

0800087c <MX_SPI1_Init>:

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800087c:	22e0      	movs	r2, #224	; 0xe0
  hspi1.Instance = SPI1;
 800087e:	4810      	ldr	r0, [pc, #64]	; (80008c0 <MX_SPI1_Init+0x44>)
 8000880:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <MX_SPI1_Init+0x48>)
{
 8000882:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 8000884:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000886:	2382      	movs	r3, #130	; 0x82
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000888:	00d2      	lsls	r2, r2, #3
 800088a:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800088c:	2280      	movs	r2, #128	; 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	6043      	str	r3, [r0, #4]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8000892:	2107      	movs	r1, #7
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000894:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000896:	0092      	lsls	r2, r2, #2
 8000898:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800089a:	3af9      	subs	r2, #249	; 0xf9
 800089c:	3aff      	subs	r2, #255	; 0xff
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800089e:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a0:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a2:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008a4:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a6:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008a8:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008aa:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008ac:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ae:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008b0:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008b2:	f001 fc43 	bl	800213c <HAL_SPI_Init>
 80008b6:	2800      	cmp	r0, #0
 80008b8:	d001      	beq.n	80008be <MX_SPI1_Init+0x42>
  {
    Error_Handler();
 80008ba:	f7ff ff81 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008be:	bd10      	pop	{r4, pc}
 80008c0:	20006f54 	.word	0x20006f54
 80008c4:	40013000 	.word	0x40013000

080008c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008c8:	b510      	push	{r4, lr}
 80008ca:	0004      	movs	r4, r0
 80008cc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	2214      	movs	r2, #20
 80008d0:	2100      	movs	r1, #0
 80008d2:	a803      	add	r0, sp, #12
 80008d4:	f00e fb88 	bl	800efe8 <memset>
  if(spiHandle->Instance==SPI1)
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <HAL_SPI_MspInit+0x50>)
 80008da:	6822      	ldr	r2, [r4, #0]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d118      	bne.n	8000912 <HAL_SPI_MspInit+0x4a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008e0:	2080      	movs	r0, #128	; 0x80
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <HAL_SPI_MspInit+0x54>)
 80008e4:	0140      	lsls	r0, r0, #5
 80008e6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80008e8:	4301      	orrs	r1, r0
 80008ea:	6419      	str	r1, [r3, #64]	; 0x40
 80008ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008ee:	4002      	ands	r2, r0
 80008f0:	9201      	str	r2, [sp, #4]
 80008f2:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f4:	2202      	movs	r2, #2
 80008f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f8:	4809      	ldr	r0, [pc, #36]	; (8000920 <HAL_SPI_MspInit+0x58>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	4311      	orrs	r1, r2
 80008fc:	6359      	str	r1, [r3, #52]	; 0x34
 80008fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000900:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	4013      	ands	r3, r2
 8000904:	9302      	str	r3, [sp, #8]
 8000906:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000908:	2338      	movs	r3, #56	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800090c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090e:	f000 fc73 	bl	80011f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000912:	b008      	add	sp, #32
 8000914:	bd10      	pop	{r4, pc}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	40013000 	.word	0x40013000
 800091c:	40021000 	.word	0x40021000
 8000920:	50000400 	.word	0x50000400

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	2001      	movs	r0, #1
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <HAL_MspInit+0x30>)
 800092a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800092c:	4301      	orrs	r1, r0
 800092e:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8000930:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8000934:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	4002      	ands	r2, r0
 8000938:	9200      	str	r2, [sp, #0]
 800093a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093c:	6bda      	ldr	r2, [r3, #60]	; 0x3c

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800093e:	30bf      	adds	r0, #191	; 0xbf
  __HAL_RCC_PWR_CLK_ENABLE();
 8000940:	430a      	orrs	r2, r1
 8000942:	63da      	str	r2, [r3, #60]	; 0x3c
 8000944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000946:	00c0      	lsls	r0, r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8000948:	400b      	ands	r3, r1
 800094a:	9301      	str	r3, [sp, #4]
 800094c:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800094e:	f000 fc11 	bl	8001174 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bd07      	pop	{r0, r1, r2, pc}
 8000954:	40021000 	.word	0x40021000

08000958 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b510      	push	{r4, lr}
 800095a:	0001      	movs	r1, r0
 800095c:	b086      	sub	sp, #24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 800095e:	2200      	movs	r2, #0
 8000960:	2011      	movs	r0, #17
 8000962:	f000 fc13 	bl	800118c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000966:	2011      	movs	r0, #17
 8000968:	f000 fc3a 	bl	80011e0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800096c:	2010      	movs	r0, #16
 800096e:	4a13      	ldr	r2, [pc, #76]	; (80009bc <HAL_InitTick+0x64>)
 8000970:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000972:	4301      	orrs	r1, r0
 8000974:	63d1      	str	r1, [r2, #60]	; 0x3c
 8000976:	6bd3      	ldr	r3, [r2, #60]	; 0x3c

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000978:	4669      	mov	r1, sp
  __HAL_RCC_TIM6_CLK_ENABLE();
 800097a:	4003      	ands	r3, r0
 800097c:	9301      	str	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800097e:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000980:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000982:	f001 f8df 	bl	8001b44 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000986:	f001 f8c9 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800098a:	4c0d      	ldr	r4, [pc, #52]	; (80009c0 <HAL_InitTick+0x68>)
 800098c:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <HAL_InitTick+0x6c>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800098e:	490e      	ldr	r1, [pc, #56]	; (80009c8 <HAL_InitTick+0x70>)
  htim6.Instance = TIM6;
 8000990:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <HAL_InitTick+0x74>)
 8000994:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000996:	f7ff fbed 	bl	8000174 <__udivsi3>
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 800099a:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800099c:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 800099e:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80009a0:	0020      	movs	r0, r4
  htim6.Init.ClockDivision = 0;
 80009a2:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a4:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80009a6:	f001 ff67 	bl	8002878 <HAL_TIM_Base_Init>
 80009aa:	0003      	movs	r3, r0
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
 80009ac:	2001      	movs	r0, #1
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d102      	bne.n	80009b8 <HAL_InitTick+0x60>
    return HAL_TIM_Base_Start_IT(&htim6);
 80009b2:	0020      	movs	r0, r4
 80009b4:	f001 fe2c 	bl	8002610 <HAL_TIM_Base_Start_IT>
}
 80009b8:	b006      	add	sp, #24
 80009ba:	bd10      	pop	{r4, pc}
 80009bc:	40021000 	.word	0x40021000
 80009c0:	20006fb8 	.word	0x20006fb8
 80009c4:	40001000 	.word	0x40001000
 80009c8:	000f4240 	.word	0x000f4240
 80009cc:	000003e7 	.word	0x000003e7

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	e7fe      	b.n	80009d0 <NMI_Handler>

080009d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d2:	e7fe      	b.n	80009d2 <HardFault_Handler>

080009d4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009d4:	4770      	bx	lr

080009d6 <PendSV_Handler>:
 80009d6:	4770      	bx	lr

080009d8 <SysTick_Handler>:
 80009d8:	4770      	bx	lr
	...

080009dc <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80009dc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009de:	4802      	ldr	r0, [pc, #8]	; (80009e8 <TIM6_IRQHandler+0xc>)
 80009e0:	f001 fe4e 	bl	8002680 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80009e4:	bd10      	pop	{r4, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	20006fb8 	.word	0x20006fb8

080009ec <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009ec:	2280      	movs	r2, #128	; 0x80
 80009ee:	4b02      	ldr	r3, [pc, #8]	; (80009f8 <SystemInit+0xc>)
 80009f0:	0512      	lsls	r2, r2, #20
 80009f2:	609a      	str	r2, [r3, #8]
#endif
}
 80009f4:	4770      	bx	lr
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <HAL_TIM_Base_MspInit+0x24>)
 80009fe:	6802      	ldr	r2, [r0, #0]
{
 8000a00:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM1)
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d109      	bne.n	8000a1a <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a06:	2080      	movs	r0, #128	; 0x80
 8000a08:	4a06      	ldr	r2, [pc, #24]	; (8000a24 <HAL_TIM_Base_MspInit+0x28>)
 8000a0a:	0100      	lsls	r0, r0, #4
 8000a0c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000a0e:	4301      	orrs	r1, r0
 8000a10:	6411      	str	r1, [r2, #64]	; 0x40
 8000a12:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000a14:	4003      	ands	r3, r0
 8000a16:	9301      	str	r3, [sp, #4]
 8000a18:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000a1a:	b002      	add	sp, #8
 8000a1c:	4770      	bx	lr
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	40012c00 	.word	0x40012c00
 8000a24:	40021000 	.word	0x40021000

08000a28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a28:	b510      	push	{r4, lr}
 8000a2a:	0004      	movs	r4, r0
 8000a2c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	2214      	movs	r2, #20
 8000a30:	2100      	movs	r1, #0
 8000a32:	a801      	add	r0, sp, #4
 8000a34:	f00e fad8 	bl	800efe8 <memset>
  if(timHandle->Instance==TIM1)
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <HAL_TIM_MspPostInit+0x44>)
 8000a3a:	6822      	ldr	r2, [r4, #0]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d113      	bne.n	8000a68 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a40:	2001      	movs	r0, #1
 8000a42:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <HAL_TIM_MspPostInit+0x48>)
 8000a44:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000a46:	4301      	orrs	r1, r0
 8000a48:	6351      	str	r1, [r2, #52]	; 0x34
 8000a4a:	6b53      	ldr	r3, [r2, #52]	; 0x34
    GPIO_InitStruct.Pin = TFT_LED_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(TFT_LED_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	4003      	ands	r3, r0
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = TFT_LED_Pin;
 8000a54:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(TFT_LED_GPIO_Port, &GPIO_InitStruct);
 8000a56:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = TFT_LED_Pin;
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(TFT_LED_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	3bfe      	subs	r3, #254	; 0xfe
 8000a60:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000a62:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(TFT_LED_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f000 fbc8 	bl	80011f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a68:	b006      	add	sp, #24
 8000a6a:	bd10      	pop	{r4, pc}
 8000a6c:	40012c00 	.word	0x40012c00
 8000a70:	40021000 	.word	0x40021000

08000a74 <MX_TIM1_Init>:
{
 8000a74:	b530      	push	{r4, r5, lr}
 8000a76:	b09d      	sub	sp, #116	; 0x74
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a78:	2210      	movs	r2, #16
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	a804      	add	r0, sp, #16
 8000a7e:	f00e fab3 	bl	800efe8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a82:	220c      	movs	r2, #12
 8000a84:	2100      	movs	r1, #0
 8000a86:	a801      	add	r0, sp, #4
 8000a88:	f00e faae 	bl	800efe8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a8c:	221c      	movs	r2, #28
 8000a8e:	2100      	movs	r1, #0
 8000a90:	a808      	add	r0, sp, #32
 8000a92:	f00e faa9 	bl	800efe8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a96:	2234      	movs	r2, #52	; 0x34
 8000a98:	2100      	movs	r1, #0
 8000a9a:	a80f      	add	r0, sp, #60	; 0x3c
 8000a9c:	f00e faa4 	bl	800efe8 <memset>
  htim1.Instance = TIM1;
 8000aa0:	4d2f      	ldr	r5, [pc, #188]	; (8000b60 <MX_TIM1_Init+0xec>)
 8000aa2:	4b30      	ldr	r3, [pc, #192]	; (8000b64 <MX_TIM1_Init+0xf0>)
  htim1.Init.Period = 65535;
 8000aa4:	4a30      	ldr	r2, [pc, #192]	; (8000b68 <MX_TIM1_Init+0xf4>)
  htim1.Instance = TIM1;
 8000aa6:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 0;
 8000aa8:	2300      	movs	r3, #0
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000aaa:	0028      	movs	r0, r5
  htim1.Init.Prescaler = 0;
 8000aac:	606b      	str	r3, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aae:	60ab      	str	r3, [r5, #8]
  htim1.Init.Period = 65535;
 8000ab0:	60ea      	str	r2, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab2:	612b      	str	r3, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ab4:	616b      	str	r3, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab6:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ab8:	f001 fede 	bl	8002878 <HAL_TIM_Base_Init>
 8000abc:	2800      	cmp	r0, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM1_Init+0x50>
    Error_Handler();
 8000ac0:	f7ff fe7e 	bl	80007c0 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac4:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ac6:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac8:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aca:	0028      	movs	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000acc:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ace:	f001 fff7 	bl	8002ac0 <HAL_TIM_ConfigClockSource>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM1_Init+0x66>
    Error_Handler();
 8000ad6:	f7ff fe73 	bl	80007c0 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ada:	0028      	movs	r0, r5
 8000adc:	f001 fef6 	bl	80028cc <HAL_TIM_PWM_Init>
 8000ae0:	2800      	cmp	r0, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM1_Init+0x74>
    Error_Handler();
 8000ae4:	f7ff fe6c 	bl	80007c0 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae8:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aea:	a901      	add	r1, sp, #4
 8000aec:	0028      	movs	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aee:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000af0:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af2:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000af4:	f002 f8ee 	bl	8002cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000af8:	2800      	cmp	r0, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM1_Init+0x8c>
    Error_Handler();
 8000afc:	f7ff fe60 	bl	80007c0 <Error_Handler>
  sConfigOC.Pulse = 0;
 8000b00:	2400      	movs	r4, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b02:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b04:	0022      	movs	r2, r4
 8000b06:	a908      	add	r1, sp, #32
 8000b08:	0028      	movs	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b0a:	9308      	str	r3, [sp, #32]
  sConfigOC.Pulse = 0;
 8000b0c:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b0e:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b10:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b12:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b14:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b16:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b18:	f001 ff42 	bl	80029a0 <HAL_TIM_PWM_ConfigChannel>
 8000b1c:	42a0      	cmp	r0, r4
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM1_Init+0xb0>
    Error_Handler();
 8000b20:	f7ff fe4e 	bl	80007c0 <Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b24:	2380      	movs	r3, #128	; 0x80
 8000b26:	019b      	lsls	r3, r3, #6
 8000b28:	9314      	str	r3, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b2a:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b2c:	a90f      	add	r1, sp, #60	; 0x3c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b2e:	049b      	lsls	r3, r3, #18
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b30:	0028      	movs	r0, r5
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b32:	940f      	str	r4, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b34:	9410      	str	r4, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b36:	9411      	str	r4, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b38:	9412      	str	r4, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b3a:	9413      	str	r4, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b3c:	9415      	str	r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b3e:	9416      	str	r4, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b40:	9417      	str	r4, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b42:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b44:	9419      	str	r4, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b46:	941a      	str	r4, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b48:	941b      	str	r4, [sp, #108]	; 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b4a:	f002 f8fb 	bl	8002d44 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b4e:	2800      	cmp	r0, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM1_Init+0xe2>
    Error_Handler();
 8000b52:	f7ff fe35 	bl	80007c0 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8000b56:	0028      	movs	r0, r5
 8000b58:	f7ff ff66 	bl	8000a28 <HAL_TIM_MspPostInit>
}
 8000b5c:	b01d      	add	sp, #116	; 0x74
 8000b5e:	bd30      	pop	{r4, r5, pc}
 8000b60:	20007004 	.word	0x20007004
 8000b64:	40012c00 	.word	0x40012c00
 8000b68:	0000ffff 	.word	0x0000ffff

08000b6c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b6c:	b510      	push	{r4, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b6e:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <MX_USART2_UART_Init+0x68>)
 8000b70:	4c19      	ldr	r4, [pc, #100]	; (8000bd8 <MX_USART2_UART_Init+0x6c>)
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b72:	220c      	movs	r2, #12
  huart2.Instance = USART2;
 8000b74:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 115200;
 8000b76:	23e1      	movs	r3, #225	; 0xe1
 8000b78:	025b      	lsls	r3, r3, #9
 8000b7a:	6063      	str	r3, [r4, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	055b      	lsls	r3, r3, #21
 8000b80:	60a3      	str	r3, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b82:	2300      	movs	r3, #0
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b84:	0020      	movs	r0, r4
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b86:	60e3      	str	r3, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b88:	6123      	str	r3, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b8a:	6162      	str	r2, [r4, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8c:	61a3      	str	r3, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b8e:	61e3      	str	r3, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b90:	6223      	str	r3, [r4, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b92:	6263      	str	r3, [r4, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b94:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b96:	f002 fae7 	bl	8003168 <HAL_UART_Init>
 8000b9a:	2800      	cmp	r0, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_USART2_UART_Init+0x36>
  {
    Error_Handler();
 8000b9e:	f7ff fe0f 	bl	80007c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	0020      	movs	r0, r4
 8000ba6:	f002 fb63 	bl	8003270 <HAL_UARTEx_SetTxFifoThreshold>
 8000baa:	2800      	cmp	r0, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bae:	f7ff fe07 	bl	80007c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	0020      	movs	r0, r4
 8000bb6:	f002 fb7d 	bl	80032b4 <HAL_UARTEx_SetRxFifoThreshold>
 8000bba:	2800      	cmp	r0, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8000bbe:	f7ff fdff 	bl	80007c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000bc2:	0020      	movs	r0, r4
 8000bc4:	f002 fb36 	bl	8003234 <HAL_UARTEx_DisableFifoMode>
 8000bc8:	2800      	cmp	r0, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_USART2_UART_Init+0x64>
  {
    Error_Handler();
 8000bcc:	f7ff fdf8 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bd0:	bd10      	pop	{r4, pc}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	40004400 	.word	0x40004400
 8000bd8:	20007050 	.word	0x20007050

08000bdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bdc:	b510      	push	{r4, lr}
 8000bde:	0004      	movs	r4, r0
 8000be0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	2214      	movs	r2, #20
 8000be4:	2100      	movs	r1, #0
 8000be6:	a803      	add	r0, sp, #12
 8000be8:	f00e f9fe 	bl	800efe8 <memset>
  if(uartHandle->Instance==USART2)
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <HAL_UART_MspInit+0x58>)
 8000bee:	6822      	ldr	r2, [r4, #0]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d11c      	bne.n	8000c2e <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bf4:	2080      	movs	r0, #128	; 0x80
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <HAL_UART_MspInit+0x5c>)
 8000bf8:	0280      	lsls	r0, r0, #10
 8000bfa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000bfc:	4301      	orrs	r1, r0
 8000bfe:	63d9      	str	r1, [r3, #60]	; 0x3c
 8000c00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c02:	4002      	ands	r2, r0
 8000c04:	9201      	str	r2, [sp, #4]
 8000c06:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c08:	2201      	movs	r2, #1
 8000c0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4311      	orrs	r1, r2
 8000c10:	6359      	str	r1, [r3, #52]	; 0x34
 8000c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	4013      	ands	r3, r2
 8000c18:	9302      	str	r3, [sp, #8]
 8000c1a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c1c:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c20:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	3b0a      	subs	r3, #10
 8000c24:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c26:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c28:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f000 fae5 	bl	80011f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c2e:	b008      	add	sp, #32
 8000c30:	bd10      	pop	{r4, pc}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	40004400 	.word	0x40004400
 8000c38:	40021000 	.word	0x40021000

08000c3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c3c:	480d      	ldr	r0, [pc, #52]	; (8000c74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c3e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c40:	f7ff fed4 	bl	80009ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c44:	480c      	ldr	r0, [pc, #48]	; (8000c78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c46:	490d      	ldr	r1, [pc, #52]	; (8000c7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c48:	4a0d      	ldr	r2, [pc, #52]	; (8000c80 <LoopForever+0xe>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c4c:	e002      	b.n	8000c54 <LoopCopyDataInit>

08000c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c52:	3304      	adds	r3, #4

08000c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c58:	d3f9      	bcc.n	8000c4e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c5c:	4c0a      	ldr	r4, [pc, #40]	; (8000c88 <LoopForever+0x16>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c60:	e001      	b.n	8000c66 <LoopFillZerobss>

08000c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c64:	3204      	adds	r2, #4

08000c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c68:	d3fb      	bcc.n	8000c62 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c6a:	f00e f981 	bl	800ef70 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c6e:	f7ff fd3b 	bl	80006e8 <main>

08000c72 <LoopForever>:

LoopForever:
  b LoopForever
 8000c72:	e7fe      	b.n	8000c72 <LoopForever>
  ldr   r0, =_estack
 8000c74:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c7c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000c80:	08012898 	.word	0x08012898
  ldr r2, =_sbss
 8000c84:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000c88:	20007270 	.word	0x20007270

08000c8c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c8c:	e7fe      	b.n	8000c8c <ADC1_IRQHandler>
	...

08000c90 <ST7735_write>:

uint16_t scr_width;
uint16_t scr_height;

void ST7735_write(uint8_t data)
{
 8000c90:	b507      	push	{r0, r1, r2, lr}
 8000c92:	466b      	mov	r3, sp
 8000c94:	1dd9      	adds	r1, r3, #7
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&data, 1, HAL_MAX_DELAY);
 8000c96:	2301      	movs	r3, #1
{
 8000c98:	7008      	strb	r0, [r1, #0]
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&data, 1, HAL_MAX_DELAY);
 8000c9a:	425b      	negs	r3, r3
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <ST7735_write+0x18>)
 8000ca0:	f001 fac4 	bl	800222c <HAL_SPI_Transmit>
}
 8000ca4:	bd07      	pop	{r0, r1, r2, pc}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	20006f54 	.word	0x20006f54

08000cac <ST7735_cmd>:
	tmp[0] = color >> 8;
	tmp[1] = color;
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&tmp[0], 2, HAL_MAX_DELAY);
}

void ST7735_cmd(uint8_t cmd) {
 8000cac:	b510      	push	{r4, lr}
 8000cae:	0004      	movs	r4, r0
	A0_L();
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2102      	movs	r1, #2
 8000cb4:	4803      	ldr	r0, [pc, #12]	; (8000cc4 <ST7735_cmd+0x18>)
 8000cb6:	f000 fb4d 	bl	8001354 <HAL_GPIO_WritePin>
	ST7735_write(cmd);
 8000cba:	0020      	movs	r0, r4
 8000cbc:	f7ff ffe8 	bl	8000c90 <ST7735_write>
}
 8000cc0:	bd10      	pop	{r4, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	50000400 	.word	0x50000400

08000cc8 <ST7735_data>:

void ST7735_data(uint8_t data) {
 8000cc8:	b510      	push	{r4, lr}
 8000cca:	0004      	movs	r4, r0
	A0_H();
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2102      	movs	r1, #2
 8000cd0:	4803      	ldr	r0, [pc, #12]	; (8000ce0 <ST7735_data+0x18>)
 8000cd2:	f000 fb3f 	bl	8001354 <HAL_GPIO_WritePin>
	ST7735_write(data);
 8000cd6:	0020      	movs	r0, r4
 8000cd8:	f7ff ffda 	bl	8000c90 <ST7735_write>
}
 8000cdc:	bd10      	pop	{r4, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	50000400 	.word	0x50000400

08000ce4 <RGB565>:

uint16_t RGB565(uint8_t R,uint8_t G,uint8_t B) {
	return ((R >> 3) << 11) | ((G >> 2) << 5) | (B >> 3);
 8000ce4:	0889      	lsrs	r1, r1, #2
 8000ce6:	0149      	lsls	r1, r1, #5
 8000ce8:	08d2      	lsrs	r2, r2, #3
 8000cea:	08c0      	lsrs	r0, r0, #3
 8000cec:	430a      	orrs	r2, r1
 8000cee:	02c0      	lsls	r0, r0, #11
 8000cf0:	4310      	orrs	r0, r2
}
 8000cf2:	4770      	bx	lr

08000cf4 <ST7735_Orientation>:

	ST7735_Orientation(scr_CCW);
	//ST7735_Orientation(scr_CW);
}

void ST7735_Orientation(ScrOrientation_TypeDef orientation) {
 8000cf4:	b510      	push	{r4, lr}
	CS_L();
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2104      	movs	r1, #4
void ST7735_Orientation(ScrOrientation_TypeDef orientation) {
 8000cfa:	0004      	movs	r4, r0
	CS_L();
 8000cfc:	4813      	ldr	r0, [pc, #76]	; (8000d4c <ST7735_Orientation+0x58>)
 8000cfe:	f000 fb29 	bl	8001354 <HAL_GPIO_WritePin>
	ST7735_cmd(0x36); // Memory data access control:
 8000d02:	2036      	movs	r0, #54	; 0x36
 8000d04:	f7ff ffd2 	bl	8000cac <ST7735_cmd>
 8000d08:	4a11      	ldr	r2, [pc, #68]	; (8000d50 <ST7735_Orientation+0x5c>)
 8000d0a:	20a0      	movs	r0, #160	; 0xa0
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <ST7735_Orientation+0x60>)
	switch(orientation) {
 8000d0e:	2c02      	cmp	r4, #2
 8000d10:	d00e      	beq.n	8000d30 <ST7735_Orientation+0x3c>
 8000d12:	2180      	movs	r1, #128	; 0x80
 8000d14:	2c03      	cmp	r4, #3
 8000d16:	d010      	beq.n	8000d3a <ST7735_Orientation+0x46>
 8000d18:	2c01      	cmp	r4, #1
 8000d1a:	d112      	bne.n	8000d42 <ST7735_Orientation+0x4e>
	case scr_CW:
		scr_width  = TFT_H;
 8000d1c:	8010      	strh	r0, [r2, #0]
		scr_height = TFT_W;
 8000d1e:	8019      	strh	r1, [r3, #0]
		ST7735_data(0xc0); // X-Mirror,Y-Mirror: Bottom to top; Right to left; RGB
		break;
	default:
		scr_width  = TFT_W;
		scr_height = TFT_H;
		ST7735_data(0x00); // Normal: Top to Bottom; Left to Right; RGB
 8000d20:	f7ff ffd2 	bl	8000cc8 <ST7735_data>
		break;
	}
	CS_H();
 8000d24:	2201      	movs	r2, #1
 8000d26:	2104      	movs	r1, #4
 8000d28:	4808      	ldr	r0, [pc, #32]	; (8000d4c <ST7735_Orientation+0x58>)
 8000d2a:	f000 fb13 	bl	8001354 <HAL_GPIO_WritePin>
}
 8000d2e:	bd10      	pop	{r4, pc}
		scr_width  = TFT_H;
 8000d30:	8010      	strh	r0, [r2, #0]
		scr_height = TFT_W;
 8000d32:	2280      	movs	r2, #128	; 0x80
		ST7735_data(0x60); // X-Y Exchange,X-Mirror
 8000d34:	2060      	movs	r0, #96	; 0x60
		scr_height = TFT_W;
 8000d36:	801a      	strh	r2, [r3, #0]
 8000d38:	e7f2      	b.n	8000d20 <ST7735_Orientation+0x2c>
		scr_height = TFT_H;
 8000d3a:	8018      	strh	r0, [r3, #0]
		scr_width  = TFT_W;
 8000d3c:	8011      	strh	r1, [r2, #0]
		ST7735_data(0xc0); // X-Mirror,Y-Mirror: Bottom to top; Right to left; RGB
 8000d3e:	20c0      	movs	r0, #192	; 0xc0
 8000d40:	e7ee      	b.n	8000d20 <ST7735_Orientation+0x2c>
		scr_height = TFT_H;
 8000d42:	8018      	strh	r0, [r3, #0]
		scr_width  = TFT_W;
 8000d44:	8011      	strh	r1, [r2, #0]
		ST7735_data(0x00); // Normal: Top to Bottom; Left to Right; RGB
 8000d46:	2000      	movs	r0, #0
 8000d48:	e7ea      	b.n	8000d20 <ST7735_Orientation+0x2c>
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	50000400 	.word	0x50000400
 8000d50:	200070e0 	.word	0x200070e0
 8000d54:	200070e2 	.word	0x200070e2

08000d58 <ST7735_Init>:
void ST7735_Init(void) {
 8000d58:	b510      	push	{r4, lr}
	CS_H();
 8000d5a:	4c44      	ldr	r4, [pc, #272]	; (8000e6c <ST7735_Init+0x114>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	0020      	movs	r0, r4
 8000d60:	2104      	movs	r1, #4
 8000d62:	f000 faf7 	bl	8001354 <HAL_GPIO_WritePin>
	RST_H();
 8000d66:	2201      	movs	r2, #1
 8000d68:	0020      	movs	r0, r4
 8000d6a:	0011      	movs	r1, r2
 8000d6c:	f000 faf2 	bl	8001354 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000d70:	2005      	movs	r0, #5
 8000d72:	f000 f9ed 	bl	8001150 <HAL_Delay>
	RST_L();
 8000d76:	2200      	movs	r2, #0
 8000d78:	2101      	movs	r1, #1
 8000d7a:	0020      	movs	r0, r4
 8000d7c:	f000 faea 	bl	8001354 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000d80:	2005      	movs	r0, #5
 8000d82:	f000 f9e5 	bl	8001150 <HAL_Delay>
	RST_H();
 8000d86:	2201      	movs	r2, #1
 8000d88:	0020      	movs	r0, r4
 8000d8a:	0011      	movs	r1, r2
 8000d8c:	f000 fae2 	bl	8001354 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000d90:	2005      	movs	r0, #5
 8000d92:	f000 f9dd 	bl	8001150 <HAL_Delay>
	CS_L();
 8000d96:	2200      	movs	r2, #0
 8000d98:	2104      	movs	r1, #4
 8000d9a:	0020      	movs	r0, r4
 8000d9c:	f000 fada 	bl	8001354 <HAL_GPIO_WritePin>
	ST7735_cmd(0x11); 	// Sleep out & booster on
 8000da0:	2011      	movs	r0, #17
 8000da2:	f7ff ff83 	bl	8000cac <ST7735_cmd>
	HAL_Delay(25); 		// Datasheet says what display wakes about 120ms (may be much faster actually)
 8000da6:	2019      	movs	r0, #25
 8000da8:	f000 f9d2 	bl	8001150 <HAL_Delay>
	ST7735_cmd(0xb1);   // In normal mode (full colors):
 8000dac:	20b1      	movs	r0, #177	; 0xb1
 8000dae:	f7ff ff7d 	bl	8000cac <ST7735_cmd>
	A0_H();
 8000db2:	2201      	movs	r2, #1
 8000db4:	2102      	movs	r1, #2
 8000db6:	0020      	movs	r0, r4
 8000db8:	f000 facc 	bl	8001354 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNA set 1-line period: RTNA2, RTNA0
 8000dbc:	2005      	movs	r0, #5
 8000dbe:	f7ff ff67 	bl	8000c90 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPA5,FPA4,FPA3,FPA2
 8000dc2:	203c      	movs	r0, #60	; 0x3c
 8000dc4:	f7ff ff64 	bl	8000c90 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPA5,BPA4,BPA3,BPA2
 8000dc8:	203c      	movs	r0, #60	; 0x3c
 8000dca:	f7ff ff61 	bl	8000c90 <ST7735_write>
	ST7735_cmd(0xb2);   // In idle mode (8-colors):
 8000dce:	20b2      	movs	r0, #178	; 0xb2
 8000dd0:	f7ff ff6c 	bl	8000cac <ST7735_cmd>
	A0_H();
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2102      	movs	r1, #2
 8000dd8:	0020      	movs	r0, r4
 8000dda:	f000 fabb 	bl	8001354 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNB set 1-line period: RTNAB, RTNB0
 8000dde:	2005      	movs	r0, #5
 8000de0:	f7ff ff56 	bl	8000c90 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPB5,FPB4,FPB3,FPB2
 8000de4:	203c      	movs	r0, #60	; 0x3c
 8000de6:	f7ff ff53 	bl	8000c90 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPB5,BPB4,BPB3,BPB2
 8000dea:	203c      	movs	r0, #60	; 0x3c
 8000dec:	f7ff ff50 	bl	8000c90 <ST7735_write>
	ST7735_cmd(0xb3);   // In partial mode + full colors:
 8000df0:	20b3      	movs	r0, #179	; 0xb3
 8000df2:	f7ff ff5b 	bl	8000cac <ST7735_cmd>
	A0_H();
 8000df6:	2201      	movs	r2, #1
 8000df8:	2102      	movs	r1, #2
 8000dfa:	0020      	movs	r0, r4
 8000dfc:	f000 faaa 	bl	8001354 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNC set 1-line period: RTNC2, RTNC0
 8000e00:	2005      	movs	r0, #5
 8000e02:	f7ff ff45 	bl	8000c90 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPC5,FPC4,FPC3,FPC2
 8000e06:	203c      	movs	r0, #60	; 0x3c
 8000e08:	f7ff ff42 	bl	8000c90 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPC5,BPC4,BPC3,BPC2
 8000e0c:	203c      	movs	r0, #60	; 0x3c
 8000e0e:	f7ff ff3f 	bl	8000c90 <ST7735_write>
	ST7735_write(0x05); //   RTND set 1-line period: RTND2, RTND0
 8000e12:	2005      	movs	r0, #5
 8000e14:	f7ff ff3c 	bl	8000c90 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPD5,FPD4,FPD3,FPD2
 8000e18:	203c      	movs	r0, #60	; 0x3c
 8000e1a:	f7ff ff39 	bl	8000c90 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPD5,BPD4,BPD3,BPD2
 8000e1e:	203c      	movs	r0, #60	; 0x3c
 8000e20:	f7ff ff36 	bl	8000c90 <ST7735_write>
	ST7735_cmd(0xB4);   // Display dot inversion control:
 8000e24:	20b4      	movs	r0, #180	; 0xb4
 8000e26:	f7ff ff41 	bl	8000cac <ST7735_cmd>
	ST7735_data(0x03);  //   NLB,NLC
 8000e2a:	2003      	movs	r0, #3
 8000e2c:	f7ff ff4c 	bl	8000cc8 <ST7735_data>
	ST7735_cmd(0x3a);   // Interface pixel format
 8000e30:	203a      	movs	r0, #58	; 0x3a
 8000e32:	f7ff ff3b 	bl	8000cac <ST7735_cmd>
	ST7735_data(0x05);  // 16-bit/pixel RGB 5-6-5 (65k colors)
 8000e36:	2005      	movs	r0, #5
 8000e38:	f7ff ff46 	bl	8000cc8 <ST7735_data>
	ST7735_cmd(0x20);   // Display inversion off
 8000e3c:	2020      	movs	r0, #32
 8000e3e:	f7ff ff35 	bl	8000cac <ST7735_cmd>
	ST7735_cmd(0x13);   // Partial mode off
 8000e42:	2013      	movs	r0, #19
 8000e44:	f7ff ff32 	bl	8000cac <ST7735_cmd>
	ST7735_cmd(0x26);   // Gamma curve set:
 8000e48:	2026      	movs	r0, #38	; 0x26
 8000e4a:	f7ff ff2f 	bl	8000cac <ST7735_cmd>
	ST7735_data(0x01);  //   Gamma curve 1 (G2.2) or (G1.0)
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f7ff ff3a 	bl	8000cc8 <ST7735_data>
	ST7735_cmd(0x29);   // Display on
 8000e54:	2029      	movs	r0, #41	; 0x29
 8000e56:	f7ff ff29 	bl	8000cac <ST7735_cmd>
	CS_H();
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	2104      	movs	r1, #4
 8000e5e:	0020      	movs	r0, r4
 8000e60:	f000 fa78 	bl	8001354 <HAL_GPIO_WritePin>
	ST7735_Orientation(scr_CCW);
 8000e64:	2002      	movs	r0, #2
 8000e66:	f7ff ff45 	bl	8000cf4 <ST7735_Orientation>
}
 8000e6a:	bd10      	pop	{r4, pc}
 8000e6c:	50000400 	.word	0x50000400

08000e70 <ST7735_AddrSet>:

void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE) {
 8000e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000e72:	0006      	movs	r6, r0
 8000e74:	0015      	movs	r5, r2
 8000e76:	000c      	movs	r4, r1
	ST7735_cmd(0x2a); // Column address set
	A0_H();
 8000e78:	4f17      	ldr	r7, [pc, #92]	; (8000ed8 <ST7735_AddrSet+0x68>)
	ST7735_cmd(0x2a); // Column address set
 8000e7a:	202a      	movs	r0, #42	; 0x2a
void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE) {
 8000e7c:	9301      	str	r3, [sp, #4]
	ST7735_cmd(0x2a); // Column address set
 8000e7e:	f7ff ff15 	bl	8000cac <ST7735_cmd>
	A0_H();
 8000e82:	2201      	movs	r2, #1
 8000e84:	2102      	movs	r1, #2
 8000e86:	0038      	movs	r0, r7
 8000e88:	f000 fa64 	bl	8001354 <HAL_GPIO_WritePin>
	ST7735_write(XS >> 8);
 8000e8c:	0a30      	lsrs	r0, r6, #8
 8000e8e:	f7ff feff 	bl	8000c90 <ST7735_write>
	ST7735_write(XS);
 8000e92:	b2f0      	uxtb	r0, r6
 8000e94:	f7ff fefc 	bl	8000c90 <ST7735_write>
	ST7735_write(XE >> 8);
 8000e98:	0a28      	lsrs	r0, r5, #8
 8000e9a:	f7ff fef9 	bl	8000c90 <ST7735_write>
	ST7735_write(XE);
 8000e9e:	b2e8      	uxtb	r0, r5
 8000ea0:	f7ff fef6 	bl	8000c90 <ST7735_write>

	ST7735_cmd(0x2b); // Row address set
 8000ea4:	202b      	movs	r0, #43	; 0x2b
 8000ea6:	f7ff ff01 	bl	8000cac <ST7735_cmd>
	A0_H();
 8000eaa:	2201      	movs	r2, #1
 8000eac:	2102      	movs	r1, #2
 8000eae:	0038      	movs	r0, r7
 8000eb0:	f000 fa50 	bl	8001354 <HAL_GPIO_WritePin>
	ST7735_write(YS >> 8);
 8000eb4:	0a20      	lsrs	r0, r4, #8
 8000eb6:	f7ff feeb 	bl	8000c90 <ST7735_write>
	ST7735_write(YS);
 8000eba:	b2e0      	uxtb	r0, r4
 8000ebc:	f7ff fee8 	bl	8000c90 <ST7735_write>
	ST7735_write(YE >> 8);
 8000ec0:	9b01      	ldr	r3, [sp, #4]
 8000ec2:	0a18      	lsrs	r0, r3, #8
 8000ec4:	f7ff fee4 	bl	8000c90 <ST7735_write>
	ST7735_write(YE);
 8000ec8:	466b      	mov	r3, sp
 8000eca:	7918      	ldrb	r0, [r3, #4]
 8000ecc:	f7ff fee0 	bl	8000c90 <ST7735_write>

	ST7735_cmd(0x2c); // Memory write
 8000ed0:	202c      	movs	r0, #44	; 0x2c
 8000ed2:	f7ff feeb 	bl	8000cac <ST7735_cmd>
}
 8000ed6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8000ed8:	50000400 	.word	0x50000400

08000edc <ST7735_Clear>:

void ST7735_Clear(uint16_t color) {
 8000edc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t i;
	uint8_t  CH,CL;

	CH = color >> 8;
 8000ede:	0a03      	lsrs	r3, r0, #8
	CL = (uint8_t)color;

	CS_L();
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2104      	movs	r1, #4
	CL = (uint8_t)color;
 8000ee4:	b2c5      	uxtb	r5, r0
	CS_L();
 8000ee6:	4815      	ldr	r0, [pc, #84]	; (8000f3c <ST7735_Clear+0x60>)
	CH = color >> 8;
 8000ee8:	9301      	str	r3, [sp, #4]
	CS_L();
 8000eea:	f000 fa33 	bl	8001354 <HAL_GPIO_WritePin>
	ST7735_AddrSet(0, 0, scr_width - 1, scr_height - 1);
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4e13      	ldr	r6, [pc, #76]	; (8000f40 <ST7735_Clear+0x64>)
 8000ef2:	4f14      	ldr	r7, [pc, #80]	; (8000f44 <ST7735_Clear+0x68>)
 8000ef4:	8833      	ldrh	r3, [r6, #0]
 8000ef6:	883a      	ldrh	r2, [r7, #0]
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	3a01      	subs	r2, #1
 8000efc:	0008      	movs	r0, r1
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	b292      	uxth	r2, r2
 8000f02:	f7ff ffb5 	bl	8000e70 <ST7735_AddrSet>
	A0_H();
 8000f06:	2201      	movs	r2, #1
 8000f08:	2102      	movs	r1, #2
 8000f0a:	480c      	ldr	r0, [pc, #48]	; (8000f3c <ST7735_Clear+0x60>)
 8000f0c:	f000 fa22 	bl	8001354 <HAL_GPIO_WritePin>
	for (i = 0; i < scr_width * scr_height; i++) {
 8000f10:	2400      	movs	r4, #0
 8000f12:	883a      	ldrh	r2, [r7, #0]
 8000f14:	8833      	ldrh	r3, [r6, #0]
 8000f16:	4353      	muls	r3, r2
 8000f18:	429c      	cmp	r4, r3
 8000f1a:	db05      	blt.n	8000f28 <ST7735_Clear+0x4c>
		ST7735_write(CH);
		ST7735_write(CL);
	}
	CS_H();
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2104      	movs	r1, #4
 8000f20:	4806      	ldr	r0, [pc, #24]	; (8000f3c <ST7735_Clear+0x60>)
 8000f22:	f000 fa17 	bl	8001354 <HAL_GPIO_WritePin>
}
 8000f26:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		ST7735_write(CH);
 8000f28:	9801      	ldr	r0, [sp, #4]
 8000f2a:	f7ff feb1 	bl	8000c90 <ST7735_write>
	for (i = 0; i < scr_width * scr_height; i++) {
 8000f2e:	3401      	adds	r4, #1
		ST7735_write(CL);
 8000f30:	0028      	movs	r0, r5
 8000f32:	f7ff fead 	bl	8000c90 <ST7735_write>
	for (i = 0; i < scr_width * scr_height; i++) {
 8000f36:	b2a4      	uxth	r4, r4
 8000f38:	e7eb      	b.n	8000f12 <ST7735_Clear+0x36>
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	50000400 	.word	0x50000400
 8000f40:	200070e2 	.word	0x200070e2
 8000f44:	200070e0 	.word	0x200070e0

08000f48 <ST7735_Flush>:

void ST7735_Flush(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p)
{
 8000f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f4a:	000e      	movs	r6, r1
	uint16_t size;

    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	5ecc      	ldrsh	r4, [r1, r3]
{
 8000f50:	0017      	movs	r7, r2
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8000f52:	2200      	movs	r2, #0
 8000f54:	5e8b      	ldrsh	r3, [r1, r2]
{
 8000f56:	0005      	movs	r5, r0
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8000f58:	1ae4      	subs	r4, r4, r3
 8000f5a:	2306      	movs	r3, #6
 8000f5c:	5eca      	ldrsh	r2, [r1, r3]
 8000f5e:	2102      	movs	r1, #2
 8000f60:	5e73      	ldrsh	r3, [r6, r1]
 8000f62:	3401      	adds	r4, #1
 8000f64:	1ad2      	subs	r2, r2, r3
 8000f66:	3201      	adds	r2, #1

	CS_L();
 8000f68:	2104      	movs	r1, #4
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8000f6a:	4354      	muls	r4, r2
	CS_L();
 8000f6c:	4829      	ldr	r0, [pc, #164]	; (8001014 <ST7735_Flush+0xcc>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f000 f9f0 	bl	8001354 <HAL_GPIO_WritePin>
    ST7735_cmd(0x2a); // Column address set
 8000f74:	202a      	movs	r0, #42	; 0x2a
 8000f76:	f7ff fe99 	bl	8000cac <ST7735_cmd>
	A0_H();
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2102      	movs	r1, #2
 8000f7e:	4825      	ldr	r0, [pc, #148]	; (8001014 <ST7735_Flush+0xcc>)
 8000f80:	f000 f9e8 	bl	8001354 <HAL_GPIO_WritePin>
	ST7735_write(area->x1 >> 8);
 8000f84:	7870      	ldrb	r0, [r6, #1]
 8000f86:	f7ff fe83 	bl	8000c90 <ST7735_write>
	ST7735_write(area->x1);
 8000f8a:	7830      	ldrb	r0, [r6, #0]
 8000f8c:	f7ff fe80 	bl	8000c90 <ST7735_write>
	ST7735_write(area->x2 >> 8);
 8000f90:	7970      	ldrb	r0, [r6, #5]
 8000f92:	f7ff fe7d 	bl	8000c90 <ST7735_write>
	ST7735_write(area->x2);
 8000f96:	7930      	ldrb	r0, [r6, #4]
 8000f98:	f7ff fe7a 	bl	8000c90 <ST7735_write>

	ST7735_cmd(0x2b); // Row address set
 8000f9c:	202b      	movs	r0, #43	; 0x2b
 8000f9e:	f7ff fe85 	bl	8000cac <ST7735_cmd>
	A0_H();
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2102      	movs	r1, #2
 8000fa6:	481b      	ldr	r0, [pc, #108]	; (8001014 <ST7735_Flush+0xcc>)
 8000fa8:	f000 f9d4 	bl	8001354 <HAL_GPIO_WritePin>
	ST7735_write(area->y1 >> 8);
 8000fac:	78f0      	ldrb	r0, [r6, #3]
 8000fae:	f7ff fe6f 	bl	8000c90 <ST7735_write>
	ST7735_write(area->y1);
 8000fb2:	78b0      	ldrb	r0, [r6, #2]
 8000fb4:	f7ff fe6c 	bl	8000c90 <ST7735_write>
	ST7735_write(area->y2 >> 8);
 8000fb8:	79f0      	ldrb	r0, [r6, #7]
 8000fba:	f7ff fe69 	bl	8000c90 <ST7735_write>
	ST7735_write(area->y2);
 8000fbe:	79b0      	ldrb	r0, [r6, #6]
 8000fc0:	f7ff fe66 	bl	8000c90 <ST7735_write>

	ST7735_cmd(0x2c); // Memory write
 8000fc4:	202c      	movs	r0, #44	; 0x2c
 8000fc6:	f7ff fe71 	bl	8000cac <ST7735_cmd>
	A0_H();
 8000fca:	2102      	movs	r1, #2
 8000fcc:	2201      	movs	r2, #1
 8000fce:	4811      	ldr	r0, [pc, #68]	; (8001014 <ST7735_Flush+0xcc>)
 8000fd0:	f000 f9c0 	bl	8001354 <HAL_GPIO_WritePin>


	//
	for(uint16_t p = 0; p <= size-1; p++) {
 8000fd4:	2300      	movs	r3, #0
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8000fd6:	b2a4      	uxth	r4, r4
 8000fd8:	490f      	ldr	r1, [pc, #60]	; (8001018 <ST7735_Flush+0xd0>)
 8000fda:	0066      	lsls	r6, r4, #1
	for(uint16_t p = 0; p <= size-1; p++) {
 8000fdc:	429e      	cmp	r6, r3
 8000fde:	d111      	bne.n	8001004 <ST7735_Flush+0xbc>
		buf_tft[p*2] = color_p->full >> 8;
		buf_tft[(p*2)+1] = color_p->full;
		color_p++;
	}
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&buf_tft[0], ((size-1)*2), HAL_MAX_DELAY);
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	; (800101c <ST7735_Flush+0xd4>)
 8000fe2:	480f      	ldr	r0, [pc, #60]	; (8001020 <ST7735_Flush+0xd8>)
 8000fe4:	18e4      	adds	r4, r4, r3
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	0064      	lsls	r4, r4, #1
 8000fea:	425b      	negs	r3, r3
 8000fec:	b2a2      	uxth	r2, r4
 8000fee:	f001 f91d 	bl	800222c <HAL_SPI_Transmit>
		color_p++;
		teste++;
	}
	//
*/
	CS_H();
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2104      	movs	r1, #4
 8000ff6:	4807      	ldr	r0, [pc, #28]	; (8001014 <ST7735_Flush+0xcc>)
 8000ff8:	f000 f9ac 	bl	8001354 <HAL_GPIO_WritePin>

	lv_disp_flush_ready(disp_drv);                  /* Tell you are ready with the flushing*/
 8000ffc:	0028      	movs	r0, r5
 8000ffe:	f00a fbc9 	bl	800b794 <lv_disp_flush_ready>
}
 8001002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		buf_tft[p*2] = color_p->full >> 8;
 8001004:	5afa      	ldrh	r2, [r7, r3]
 8001006:	18c8      	adds	r0, r1, r3
 8001008:	0a12      	lsrs	r2, r2, #8
 800100a:	7002      	strb	r2, [r0, #0]
		buf_tft[(p*2)+1] = color_p->full;
 800100c:	5afa      	ldrh	r2, [r7, r3]
 800100e:	3302      	adds	r3, #2
 8001010:	7042      	strb	r2, [r0, #1]
 8001012:	e7e3      	b.n	8000fdc <ST7735_Flush+0x94>
 8001014:	50000400 	.word	0x50000400
 8001018:	20000d00 	.word	0x20000d00
 800101c:	00007fff 	.word	0x00007fff
 8001020:	20006f54 	.word	0x20006f54

08001024 <ST7735_PutChar5x7>:
		ST7735_write(CL);
	}
	CS_H();
}

void ST7735_PutChar5x7(uint16_t X, uint16_t Y, uint8_t chr, uint16_t color) {
 8001024:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t i,j;
	uint8_t buffer[5];
    uint8_t CH = color >> 8;
    uint8_t CL = (uint8_t)color;

	memcpy(buffer,&Font5x7[(chr - 32) * 5],5);
 8001026:	3a20      	subs	r2, #32
void ST7735_PutChar5x7(uint16_t X, uint16_t Y, uint8_t chr, uint16_t color) {
 8001028:	b085      	sub	sp, #20
 800102a:	000d      	movs	r5, r1
    uint8_t CH = color >> 8;
 800102c:	0a19      	lsrs	r1, r3, #8
 800102e:	9101      	str	r1, [sp, #4]
	memcpy(buffer,&Font5x7[(chr - 32) * 5],5);
 8001030:	0011      	movs	r1, r2
 8001032:	2205      	movs	r2, #5
void ST7735_PutChar5x7(uint16_t X, uint16_t Y, uint8_t chr, uint16_t color) {
 8001034:	0004      	movs	r4, r0
	memcpy(buffer,&Font5x7[(chr - 32) * 5],5);
 8001036:	4351      	muls	r1, r2
    uint8_t CL = (uint8_t)color;
 8001038:	b2df      	uxtb	r7, r3
	memcpy(buffer,&Font5x7[(chr - 32) * 5],5);
 800103a:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <ST7735_PutChar5x7+0x88>)
 800103c:	a802      	add	r0, sp, #8
 800103e:	18c9      	adds	r1, r1, r3
 8001040:	f00d ffc9 	bl	800efd6 <memcpy>

	CS_L();
 8001044:	2200      	movs	r2, #0
 8001046:	2104      	movs	r1, #4
 8001048:	4819      	ldr	r0, [pc, #100]	; (80010b0 <ST7735_PutChar5x7+0x8c>)
 800104a:	f000 f983 	bl	8001354 <HAL_GPIO_WritePin>
	ST7735_AddrSet(X,Y,X + 4,Y + 6);
 800104e:	1dab      	adds	r3, r5, #6
 8001050:	1d22      	adds	r2, r4, #4
 8001052:	b29b      	uxth	r3, r3
 8001054:	b292      	uxth	r2, r2
 8001056:	0029      	movs	r1, r5
 8001058:	0020      	movs	r0, r4
 800105a:	f7ff ff09 	bl	8000e70 <ST7735_AddrSet>
	A0_H();
 800105e:	2201      	movs	r2, #1
 8001060:	2102      	movs	r1, #2
 8001062:	4813      	ldr	r0, [pc, #76]	; (80010b0 <ST7735_PutChar5x7+0x8c>)
 8001064:	f000 f976 	bl	8001354 <HAL_GPIO_WritePin>
 8001068:	2600      	movs	r6, #0
 800106a:	2301      	movs	r3, #1
 800106c:	40b3      	lsls	r3, r6
	for (j = 0; j < 7; j++) {
        for (i = 0; i < 5; i++) {
    		if ((buffer[i] >> j) & 0x01) {
 800106e:	2500      	movs	r5, #0
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	ab02      	add	r3, sp, #8
 8001074:	5d5c      	ldrb	r4, [r3, r5]
 8001076:	9b00      	ldr	r3, [sp, #0]
 8001078:	401c      	ands	r4, r3
 800107a:	d012      	beq.n	80010a2 <ST7735_PutChar5x7+0x7e>
    			ST7735_write(CH);
 800107c:	9801      	ldr	r0, [sp, #4]
 800107e:	f7ff fe07 	bl	8000c90 <ST7735_write>
    			ST7735_write(CL);
 8001082:	0038      	movs	r0, r7
 8001084:	3501      	adds	r5, #1
    		} else {
    			ST7735_write(0x00);
    			ST7735_write(0x00);
 8001086:	f7ff fe03 	bl	8000c90 <ST7735_write>
        for (i = 0; i < 5; i++) {
 800108a:	2d05      	cmp	r5, #5
 800108c:	d1f1      	bne.n	8001072 <ST7735_PutChar5x7+0x4e>
 800108e:	3601      	adds	r6, #1
	for (j = 0; j < 7; j++) {
 8001090:	2e07      	cmp	r6, #7
 8001092:	d1ea      	bne.n	800106a <ST7735_PutChar5x7+0x46>
    		}
    	}
    }
	CS_H();
 8001094:	2201      	movs	r2, #1
 8001096:	2104      	movs	r1, #4
 8001098:	4805      	ldr	r0, [pc, #20]	; (80010b0 <ST7735_PutChar5x7+0x8c>)
 800109a:	f000 f95b 	bl	8001354 <HAL_GPIO_WritePin>
}
 800109e:	b005      	add	sp, #20
 80010a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    			ST7735_write(0x00);
 80010a2:	0020      	movs	r0, r4
 80010a4:	f7ff fdf4 	bl	8000c90 <ST7735_write>
    			ST7735_write(0x00);
 80010a8:	0020      	movs	r0, r4
 80010aa:	e7eb      	b.n	8001084 <ST7735_PutChar5x7+0x60>
 80010ac:	0800f118 	.word	0x0800f118
 80010b0:	50000400 	.word	0x50000400

080010b4 <ST7735_PutStr5x7>:

void ST7735_PutStr5x7(uint8_t X, uint8_t Y, char *str, uint16_t color) {
 80010b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010b6:	0004      	movs	r4, r0
 80010b8:	000d      	movs	r5, r1
 80010ba:	0016      	movs	r6, r2
 80010bc:	001f      	movs	r7, r3
    while (*str) {
 80010be:	7832      	ldrb	r2, [r6, #0]
 80010c0:	2a00      	cmp	r2, #0
 80010c2:	d100      	bne.n	80010c6 <ST7735_PutStr5x7+0x12>
        ST7735_PutChar5x7(X, Y, *str++, color);
        if (X < scr_width - 6) { X += 6; } else if (Y < scr_height - 8) { X = 0; Y += 8; } else { X = 0; Y = 0; }
    };
}
 80010c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ST7735_PutChar5x7(X, Y, *str++, color);
 80010c6:	003b      	movs	r3, r7
 80010c8:	b2a9      	uxth	r1, r5
 80010ca:	b2a0      	uxth	r0, r4
 80010cc:	f7ff ffaa 	bl	8001024 <ST7735_PutChar5x7>
        if (X < scr_width - 6) { X += 6; } else if (Y < scr_height - 8) { X = 0; Y += 8; } else { X = 0; Y = 0; }
 80010d0:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <ST7735_PutStr5x7+0x48>)
        ST7735_PutChar5x7(X, Y, *str++, color);
 80010d2:	3601      	adds	r6, #1
        if (X < scr_width - 6) { X += 6; } else if (Y < scr_height - 8) { X = 0; Y += 8; } else { X = 0; Y = 0; }
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	3b06      	subs	r3, #6
 80010d8:	429c      	cmp	r4, r3
 80010da:	da02      	bge.n	80010e2 <ST7735_PutStr5x7+0x2e>
 80010dc:	3406      	adds	r4, #6
 80010de:	b2e4      	uxtb	r4, r4
 80010e0:	e7ed      	b.n	80010be <ST7735_PutStr5x7+0xa>
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <ST7735_PutStr5x7+0x4c>)
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	3b08      	subs	r3, #8
 80010e8:	429d      	cmp	r5, r3
 80010ea:	da03      	bge.n	80010f4 <ST7735_PutStr5x7+0x40>
 80010ec:	3508      	adds	r5, #8
 80010ee:	b2ed      	uxtb	r5, r5
 80010f0:	2400      	movs	r4, #0
 80010f2:	e7e4      	b.n	80010be <ST7735_PutStr5x7+0xa>
 80010f4:	2500      	movs	r5, #0
 80010f6:	002c      	movs	r4, r5
 80010f8:	e7e1      	b.n	80010be <ST7735_PutStr5x7+0xa>
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	200070e0 	.word	0x200070e0
 8001100:	200070e2 	.word	0x200070e2

08001104 <HAL_Init>:
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001104:	2380      	movs	r3, #128	; 0x80
 8001106:	4a08      	ldr	r2, [pc, #32]	; (8001128 <HAL_Init+0x24>)
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	6811      	ldr	r1, [r2, #0]
{
 800110c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800110e:	430b      	orrs	r3, r1
 8001110:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001112:	2000      	movs	r0, #0
 8001114:	f7ff fc20 	bl	8000958 <HAL_InitTick>
 8001118:	1e04      	subs	r4, r0, #0
 800111a:	d103      	bne.n	8001124 <HAL_Init+0x20>
    status = HAL_ERROR;
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800111c:	f7ff fc02 	bl	8000924 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 8001120:	0020      	movs	r0, r4
 8001122:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001124:	2401      	movs	r4, #1
 8001126:	e7fb      	b.n	8001120 <HAL_Init+0x1c>
 8001128:	40022000 	.word	0x40022000

0800112c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800112c:	4a03      	ldr	r2, [pc, #12]	; (800113c <HAL_IncTick+0x10>)
 800112e:	4b04      	ldr	r3, [pc, #16]	; (8001140 <HAL_IncTick+0x14>)
 8001130:	6811      	ldr	r1, [r2, #0]
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	185b      	adds	r3, r3, r1
 8001136:	6013      	str	r3, [r2, #0]
}
 8001138:	4770      	bx	lr
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	200070e4 	.word	0x200070e4
 8001140:	20000004 	.word	0x20000004

08001144 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001144:	4b01      	ldr	r3, [pc, #4]	; (800114c <HAL_GetTick+0x8>)
 8001146:	6818      	ldr	r0, [r3, #0]
}
 8001148:	4770      	bx	lr
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	200070e4 	.word	0x200070e4

08001150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001150:	b570      	push	{r4, r5, r6, lr}
 8001152:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001154:	f7ff fff6 	bl	8001144 <HAL_GetTick>
 8001158:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115a:	1c63      	adds	r3, r4, #1
 800115c:	d002      	beq.n	8001164 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800115e:	4b04      	ldr	r3, [pc, #16]	; (8001170 <HAL_Delay+0x20>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001164:	f7ff ffee 	bl	8001144 <HAL_GetTick>
 8001168:	1b40      	subs	r0, r0, r5
 800116a:	42a0      	cmp	r0, r4
 800116c:	d3fa      	bcc.n	8001164 <HAL_Delay+0x14>
  {
  }
}
 800116e:	bd70      	pop	{r4, r5, r6, pc}
 8001170:	20000004 	.word	0x20000004

08001174 <HAL_SYSCFG_StrobeDBattpinsConfig>:
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001174:	4a03      	ldr	r2, [pc, #12]	; (8001184 <HAL_SYSCFG_StrobeDBattpinsConfig+0x10>)
 8001176:	4904      	ldr	r1, [pc, #16]	; (8001188 <HAL_SYSCFG_StrobeDBattpinsConfig+0x14>)
 8001178:	6813      	ldr	r3, [r2, #0]
 800117a:	400b      	ands	r3, r1
 800117c:	4318      	orrs	r0, r3
 800117e:	6010      	str	r0, [r2, #0]
}
 8001180:	4770      	bx	lr
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	40010000 	.word	0x40010000
 8001188:	fffff9ff 	.word	0xfffff9ff

0800118c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118c:	b530      	push	{r4, r5, lr}
 800118e:	25ff      	movs	r5, #255	; 0xff
 8001190:	2403      	movs	r4, #3
 8001192:	002a      	movs	r2, r5
 8001194:	b2c3      	uxtb	r3, r0
 8001196:	401c      	ands	r4, r3
 8001198:	00e4      	lsls	r4, r4, #3
 800119a:	40a2      	lsls	r2, r4
 800119c:	0189      	lsls	r1, r1, #6
 800119e:	4029      	ands	r1, r5
 80011a0:	43d2      	mvns	r2, r2
 80011a2:	40a1      	lsls	r1, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80011a4:	2800      	cmp	r0, #0
 80011a6:	db0a      	blt.n	80011be <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011a8:	24c0      	movs	r4, #192	; 0xc0
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <HAL_NVIC_SetPriority+0x4c>)
 80011ac:	0880      	lsrs	r0, r0, #2
 80011ae:	0080      	lsls	r0, r0, #2
 80011b0:	18c0      	adds	r0, r0, r3
 80011b2:	00a4      	lsls	r4, r4, #2
 80011b4:	5903      	ldr	r3, [r0, r4]
 80011b6:	401a      	ands	r2, r3
 80011b8:	4311      	orrs	r1, r2
 80011ba:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80011bc:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011be:	200f      	movs	r0, #15
 80011c0:	4003      	ands	r3, r0
 80011c2:	3b08      	subs	r3, #8
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <HAL_NVIC_SetPriority+0x50>)
 80011c6:	089b      	lsrs	r3, r3, #2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	181b      	adds	r3, r3, r0
 80011cc:	69d8      	ldr	r0, [r3, #28]
 80011ce:	4002      	ands	r2, r0
 80011d0:	4311      	orrs	r1, r2
 80011d2:	61d9      	str	r1, [r3, #28]
 80011d4:	e7f2      	b.n	80011bc <HAL_NVIC_SetPriority+0x30>
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	e000e100 	.word	0xe000e100
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80011e0:	2800      	cmp	r0, #0
 80011e2:	db05      	blt.n	80011f0 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e4:	231f      	movs	r3, #31
 80011e6:	4018      	ands	r0, r3
 80011e8:	3b1e      	subs	r3, #30
 80011ea:	4083      	lsls	r3, r0
 80011ec:	4a01      	ldr	r2, [pc, #4]	; (80011f4 <HAL_NVIC_EnableIRQ+0x14>)
 80011ee:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80011f0:	4770      	bx	lr
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	e000e100 	.word	0xe000e100

080011f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011fa:	680b      	ldr	r3, [r1, #0]
{
 80011fc:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011fe:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00u;
 8001200:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001202:	9a03      	ldr	r2, [sp, #12]
 8001204:	40da      	lsrs	r2, r3
 8001206:	d101      	bne.n	800120c <HAL_GPIO_Init+0x14>
      }
    }

    position++;
  }
}
 8001208:	b005      	add	sp, #20
 800120a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800120c:	2201      	movs	r2, #1
 800120e:	409a      	lsls	r2, r3
 8001210:	4694      	mov	ip, r2
 8001212:	4664      	mov	r4, ip
 8001214:	9a03      	ldr	r2, [sp, #12]
 8001216:	4022      	ands	r2, r4
 8001218:	9201      	str	r2, [sp, #4]
    if (iocurrent != 0x00u)
 800121a:	d100      	bne.n	800121e <HAL_GPIO_Init+0x26>
 800121c:	e08b      	b.n	8001336 <HAL_GPIO_Init+0x13e>
 800121e:	2503      	movs	r5, #3
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001220:	684a      	ldr	r2, [r1, #4]
 8001222:	005e      	lsls	r6, r3, #1
 8001224:	0017      	movs	r7, r2
 8001226:	9200      	str	r2, [sp, #0]
 8001228:	40b5      	lsls	r5, r6
 800122a:	2210      	movs	r2, #16
 800122c:	4397      	bics	r7, r2
 800122e:	43ea      	mvns	r2, r5
 8001230:	9202      	str	r2, [sp, #8]
 8001232:	1e7a      	subs	r2, r7, #1
 8001234:	2a01      	cmp	r2, #1
 8001236:	d810      	bhi.n	800125a <HAL_GPIO_Init+0x62>
        temp = GPIOx->OSPEEDR;
 8001238:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800123a:	9a02      	ldr	r2, [sp, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800123c:	2501      	movs	r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800123e:	4014      	ands	r4, r2
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001240:	68ca      	ldr	r2, [r1, #12]
 8001242:	40b2      	lsls	r2, r6
 8001244:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 8001246:	6082      	str	r2, [r0, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001248:	4662      	mov	r2, ip
        temp = GPIOx->OTYPER;
 800124a:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800124c:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800124e:	9a00      	ldr	r2, [sp, #0]
 8001250:	0912      	lsrs	r2, r2, #4
 8001252:	402a      	ands	r2, r5
 8001254:	409a      	lsls	r2, r3
 8001256:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001258:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800125a:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800125c:	9a02      	ldr	r2, [sp, #8]
 800125e:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001260:	688a      	ldr	r2, [r1, #8]
 8001262:	40b2      	lsls	r2, r6
 8001264:	4322      	orrs	r2, r4
      GPIOx->PUPDR = temp;
 8001266:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001268:	2f02      	cmp	r7, #2
 800126a:	d10d      	bne.n	8001288 <HAL_GPIO_Init+0x90>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800126c:	2407      	movs	r4, #7
 800126e:	250f      	movs	r5, #15
 8001270:	401c      	ands	r4, r3
 8001272:	00a4      	lsls	r4, r4, #2
 8001274:	40a5      	lsls	r5, r4
        temp = GPIOx->AFR[position >> 3u];
 8001276:	08da      	lsrs	r2, r3, #3
 8001278:	0092      	lsls	r2, r2, #2
 800127a:	1882      	adds	r2, r0, r2
 800127c:	6a17      	ldr	r7, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800127e:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001280:	690d      	ldr	r5, [r1, #16]
 8001282:	40a5      	lsls	r5, r4
 8001284:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 8001286:	6217      	str	r7, [r2, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001288:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 800128a:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800128c:	9d02      	ldr	r5, [sp, #8]
 800128e:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001290:	9a00      	ldr	r2, [sp, #0]
 8001292:	4022      	ands	r2, r4
 8001294:	40b2      	lsls	r2, r6
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001296:	2480      	movs	r4, #128	; 0x80
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001298:	4315      	orrs	r5, r2
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800129a:	9a00      	ldr	r2, [sp, #0]
 800129c:	0564      	lsls	r4, r4, #21
      GPIOx->MODER = temp;
 800129e:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012a0:	4222      	tst	r2, r4
 80012a2:	d048      	beq.n	8001336 <HAL_GPIO_Init+0x13e>
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80012a4:	2503      	movs	r5, #3
 80012a6:	270f      	movs	r7, #15
 80012a8:	401d      	ands	r5, r3
 80012aa:	00ed      	lsls	r5, r5, #3
 80012ac:	40af      	lsls	r7, r5
 80012ae:	4a23      	ldr	r2, [pc, #140]	; (800133c <HAL_GPIO_Init+0x144>)
        temp = EXTI->EXTICR[position >> 2u];
 80012b0:	089c      	lsrs	r4, r3, #2
 80012b2:	00a4      	lsls	r4, r4, #2
 80012b4:	18a4      	adds	r4, r4, r2
 80012b6:	6e26      	ldr	r6, [r4, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80012b8:	2200      	movs	r2, #0
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80012ba:	43be      	bics	r6, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80012bc:	27a0      	movs	r7, #160	; 0xa0
 80012be:	05ff      	lsls	r7, r7, #23
 80012c0:	42b8      	cmp	r0, r7
 80012c2:	d00c      	beq.n	80012de <HAL_GPIO_Init+0xe6>
 80012c4:	4f1e      	ldr	r7, [pc, #120]	; (8001340 <HAL_GPIO_Init+0x148>)
 80012c6:	3201      	adds	r2, #1
 80012c8:	42b8      	cmp	r0, r7
 80012ca:	d008      	beq.n	80012de <HAL_GPIO_Init+0xe6>
 80012cc:	4f1d      	ldr	r7, [pc, #116]	; (8001344 <HAL_GPIO_Init+0x14c>)
 80012ce:	3201      	adds	r2, #1
 80012d0:	42b8      	cmp	r0, r7
 80012d2:	d004      	beq.n	80012de <HAL_GPIO_Init+0xe6>
 80012d4:	4f1c      	ldr	r7, [pc, #112]	; (8001348 <HAL_GPIO_Init+0x150>)
 80012d6:	3203      	adds	r2, #3
 80012d8:	42b8      	cmp	r0, r7
 80012da:	d100      	bne.n	80012de <HAL_GPIO_Init+0xe6>
 80012dc:	3a02      	subs	r2, #2
 80012de:	40aa      	lsls	r2, r5
 80012e0:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2u] = temp;
 80012e2:	6622      	str	r2, [r4, #96]	; 0x60
        temp = EXTI->IMR1;
 80012e4:	4a19      	ldr	r2, [pc, #100]	; (800134c <HAL_GPIO_Init+0x154>)
        temp &= ~(iocurrent);
 80012e6:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR1;
 80012e8:	6fd6      	ldr	r6, [r2, #124]	; 0x7c
          temp |= iocurrent;
 80012ea:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012ec:	9f00      	ldr	r7, [sp, #0]
        temp &= ~(iocurrent);
 80012ee:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80012f0:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012f2:	03ff      	lsls	r7, r7, #15
 80012f4:	d401      	bmi.n	80012fa <HAL_GPIO_Init+0x102>
        temp &= ~(iocurrent);
 80012f6:	0035      	movs	r5, r6
 80012f8:	4025      	ands	r5, r4
        EXTI->IMR1 = temp;
 80012fa:	67d5      	str	r5, [r2, #124]	; 0x7c
        temp = EXTI->EMR1;
 80012fc:	4d14      	ldr	r5, [pc, #80]	; (8001350 <HAL_GPIO_Init+0x158>)
          temp |= iocurrent;
 80012fe:	9e01      	ldr	r6, [sp, #4]
        temp = EXTI->EMR1;
 8001300:	6fea      	ldr	r2, [r5, #124]	; 0x7c
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001302:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8001304:	4316      	orrs	r6, r2
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001306:	03bf      	lsls	r7, r7, #14
 8001308:	d401      	bmi.n	800130e <HAL_GPIO_Init+0x116>
        temp &= ~(iocurrent);
 800130a:	4022      	ands	r2, r4
 800130c:	0016      	movs	r6, r2
        EXTI->EMR1 = temp;
 800130e:	4a0b      	ldr	r2, [pc, #44]	; (800133c <HAL_GPIO_Init+0x144>)
 8001310:	67ee      	str	r6, [r5, #124]	; 0x7c
        temp = EXTI->RTSR1;
 8001312:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8001314:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001316:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8001318:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800131a:	02ff      	lsls	r7, r7, #11
 800131c:	d401      	bmi.n	8001322 <HAL_GPIO_Init+0x12a>
        temp &= ~(iocurrent);
 800131e:	0035      	movs	r5, r6
 8001320:	4025      	ands	r5, r4
        EXTI->RTSR1 = temp;
 8001322:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 8001324:	6855      	ldr	r5, [r2, #4]
          temp |= iocurrent;
 8001326:	9e01      	ldr	r6, [sp, #4]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001328:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 800132a:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800132c:	02bf      	lsls	r7, r7, #10
 800132e:	d401      	bmi.n	8001334 <HAL_GPIO_Init+0x13c>
        temp &= ~(iocurrent);
 8001330:	4025      	ands	r5, r4
 8001332:	002e      	movs	r6, r5
        EXTI->FTSR1 = temp;
 8001334:	6056      	str	r6, [r2, #4]
    position++;
 8001336:	3301      	adds	r3, #1
 8001338:	e763      	b.n	8001202 <HAL_GPIO_Init+0xa>
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	40021800 	.word	0x40021800
 8001340:	50000400 	.word	0x50000400
 8001344:	50000800 	.word	0x50000800
 8001348:	50000c00 	.word	0x50000c00
 800134c:	40021804 	.word	0x40021804
 8001350:	40021808 	.word	0x40021808

08001354 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001354:	2a00      	cmp	r2, #0
 8001356:	d001      	beq.n	800135c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001358:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800135a:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800135c:	6281      	str	r1, [r0, #40]	; 0x28
}
 800135e:	e7fc      	b.n	800135a <HAL_GPIO_WritePin+0x6>

08001360 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001360:	b570      	push	{r4, r5, r6, lr}
 8001362:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 8001364:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8001366:	2c00      	cmp	r4, #0
 8001368:	d03f      	beq.n	80013ea <HAL_I2C_Init+0x8a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800136a:	0025      	movs	r5, r4
 800136c:	3541      	adds	r5, #65	; 0x41
 800136e:	782b      	ldrb	r3, [r5, #0]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d105      	bne.n	8001382 <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001376:	0022      	movs	r2, r4
 8001378:	3240      	adds	r2, #64	; 0x40
 800137a:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800137c:	0020      	movs	r0, r4
 800137e:	f7ff f8eb 	bl	8000558 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001382:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001384:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001386:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8001388:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800138a:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	68a6      	ldr	r6, [r4, #8]
 8001390:	438a      	bics	r2, r1
 8001392:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001394:	6861      	ldr	r1, [r4, #4]
 8001396:	4a1a      	ldr	r2, [pc, #104]	; (8001400 <HAL_I2C_Init+0xa0>)
 8001398:	400a      	ands	r2, r1
 800139a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800139c:	6899      	ldr	r1, [r3, #8]
 800139e:	4a19      	ldr	r2, [pc, #100]	; (8001404 <HAL_I2C_Init+0xa4>)
 80013a0:	4011      	ands	r1, r2
 80013a2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013a4:	2801      	cmp	r0, #1
 80013a6:	d121      	bne.n	80013ec <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013a8:	2180      	movs	r1, #128	; 0x80
 80013aa:	0209      	lsls	r1, r1, #8
 80013ac:	4331      	orrs	r1, r6
 80013ae:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013b0:	6858      	ldr	r0, [r3, #4]
 80013b2:	4915      	ldr	r1, [pc, #84]	; (8001408 <HAL_I2C_Init+0xa8>)
 80013b4:	4301      	orrs	r1, r0
 80013b6:	6059      	str	r1, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013b8:	68d9      	ldr	r1, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013ba:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013bc:	400a      	ands	r2, r1
 80013be:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80013c0:	6961      	ldr	r1, [r4, #20]
 80013c2:	6922      	ldr	r2, [r4, #16]
 80013c4:	430a      	orrs	r2, r1
 80013c6:	69a1      	ldr	r1, [r4, #24]
 80013c8:	0209      	lsls	r1, r1, #8
 80013ca:	430a      	orrs	r2, r1
 80013cc:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013ce:	6a21      	ldr	r1, [r4, #32]
 80013d0:	69e2      	ldr	r2, [r4, #28]
 80013d2:	430a      	orrs	r2, r1
 80013d4:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80013d6:	2201      	movs	r2, #1
 80013d8:	6819      	ldr	r1, [r3, #0]
 80013da:	430a      	orrs	r2, r1
 80013dc:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80013de:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013e0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013e2:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80013e4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013e6:	3442      	adds	r4, #66	; 0x42
 80013e8:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80013ea:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013ec:	2184      	movs	r1, #132	; 0x84
 80013ee:	0209      	lsls	r1, r1, #8
 80013f0:	4331      	orrs	r1, r6
 80013f2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013f4:	2802      	cmp	r0, #2
 80013f6:	d1db      	bne.n	80013b0 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013f8:	2180      	movs	r1, #128	; 0x80
 80013fa:	0109      	lsls	r1, r1, #4
 80013fc:	6059      	str	r1, [r3, #4]
 80013fe:	e7d7      	b.n	80013b0 <HAL_I2C_Init+0x50>
 8001400:	f0ffffff 	.word	0xf0ffffff
 8001404:	ffff7fff 	.word	0xffff7fff
 8001408:	02008000 	.word	0x02008000

0800140c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800140c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800140e:	0004      	movs	r4, r0
 8001410:	3441      	adds	r4, #65	; 0x41
 8001412:	7822      	ldrb	r2, [r4, #0]
{
 8001414:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001416:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001418:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800141a:	2a20      	cmp	r2, #32
 800141c:	d118      	bne.n	8001450 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 800141e:	001d      	movs	r5, r3
 8001420:	3540      	adds	r5, #64	; 0x40
 8001422:	782e      	ldrb	r6, [r5, #0]
 8001424:	2e01      	cmp	r6, #1
 8001426:	d013      	beq.n	8001450 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8001428:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800142a:	3022      	adds	r0, #34	; 0x22
 800142c:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 800142e:	681e      	ldr	r6, [r3, #0]
 8001430:	3823      	subs	r0, #35	; 0x23
 8001432:	4386      	bics	r6, r0
 8001434:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001436:	681e      	ldr	r6, [r3, #0]
 8001438:	4f06      	ldr	r7, [pc, #24]	; (8001454 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 800143a:	403e      	ands	r6, r7
 800143c:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800143e:	681e      	ldr	r6, [r3, #0]
 8001440:	4331      	orrs	r1, r6
 8001442:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001444:	6819      	ldr	r1, [r3, #0]
 8001446:	4308      	orrs	r0, r1
 8001448:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800144a:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800144c:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 800144e:	7028      	strb	r0, [r5, #0]
  }
}
 8001450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	ffffefff 	.word	0xffffefff

08001458 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001458:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800145a:	0005      	movs	r5, r0
 800145c:	3541      	adds	r5, #65	; 0x41
 800145e:	782a      	ldrb	r2, [r5, #0]
{
 8001460:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001462:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001464:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001466:	2a20      	cmp	r2, #32
 8001468:	d117      	bne.n	800149a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 800146a:	001c      	movs	r4, r3
 800146c:	3440      	adds	r4, #64	; 0x40
 800146e:	7826      	ldrb	r6, [r4, #0]
 8001470:	2e01      	cmp	r6, #1
 8001472:	d012      	beq.n	800149a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8001474:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001476:	3022      	adds	r0, #34	; 0x22
 8001478:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 800147a:	681e      	ldr	r6, [r3, #0]
 800147c:	3823      	subs	r0, #35	; 0x23
 800147e:	4386      	bics	r6, r0
 8001480:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8001482:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8001484:	4f05      	ldr	r7, [pc, #20]	; (800149c <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8001486:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8001488:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 800148a:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 800148c:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800148e:	6819      	ldr	r1, [r3, #0]
 8001490:	4308      	orrs	r0, r1
 8001492:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8001494:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001496:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8001498:	7020      	strb	r0, [r4, #0]
  }
}
 800149a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800149c:	fffff0ff 	.word	0xfffff0ff

080014a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014a0:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80014a2:	4c10      	ldr	r4, [pc, #64]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0x44>)
 80014a4:	4910      	ldr	r1, [pc, #64]	; (80014e8 <HAL_PWREx_ControlVoltageScaling+0x48>)
 80014a6:	6823      	ldr	r3, [r4, #0]
{
 80014a8:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80014aa:	400b      	ands	r3, r1
 80014ac:	4303      	orrs	r3, r0
 80014ae:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014b0:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80014b2:	2000      	movs	r0, #0
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d10c      	bne.n	80014d4 <HAL_PWREx_ControlVoltageScaling+0x34>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0x4c>)
 80014bc:	490c      	ldr	r1, [pc, #48]	; (80014f0 <HAL_PWREx_ControlVoltageScaling+0x50>)
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	2306      	movs	r3, #6
 80014c2:	4358      	muls	r0, r3
 80014c4:	f7fe fe56 	bl	8000174 <__udivsi3>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014c8:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80014ca:	1c43      	adds	r3, r0, #1
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014cc:	00d2      	lsls	r2, r2, #3
 80014ce:	6960      	ldr	r0, [r4, #20]
 80014d0:	4010      	ands	r0, r2
 80014d2:	d100      	bne.n	80014d6 <HAL_PWREx_ControlVoltageScaling+0x36>
}
 80014d4:	bd10      	pop	{r4, pc}
      if(wait_loop_index != 0U)
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <HAL_PWREx_ControlVoltageScaling+0x3e>
        wait_loop_index--;
 80014da:	3b01      	subs	r3, #1
 80014dc:	e7f7      	b.n	80014ce <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 80014de:	2003      	movs	r0, #3
 80014e0:	e7f8      	b.n	80014d4 <HAL_PWREx_ControlVoltageScaling+0x34>
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	40007000 	.word	0x40007000
 80014e8:	fffff9ff 	.word	0xfffff9ff
 80014ec:	20000000 	.word	0x20000000
 80014f0:	000f4240 	.word	0x000f4240

080014f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f6:	0004      	movs	r4, r0
 80014f8:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014fa:	2800      	cmp	r0, #0
 80014fc:	d102      	bne.n	8001504 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80014fe:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 8001500:	b005      	add	sp, #20
 8001502:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001504:	6803      	ldr	r3, [r0, #0]
 8001506:	07db      	lsls	r3, r3, #31
 8001508:	d410      	bmi.n	800152c <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800150a:	6823      	ldr	r3, [r4, #0]
 800150c:	079b      	lsls	r3, r3, #30
 800150e:	d45c      	bmi.n	80015ca <HAL_RCC_OscConfig+0xd6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001510:	6823      	ldr	r3, [r4, #0]
 8001512:	071b      	lsls	r3, r3, #28
 8001514:	d500      	bpl.n	8001518 <HAL_RCC_OscConfig+0x24>
 8001516:	e0c2      	b.n	800169e <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001518:	6823      	ldr	r3, [r4, #0]
 800151a:	075b      	lsls	r3, r3, #29
 800151c:	d500      	bpl.n	8001520 <HAL_RCC_OscConfig+0x2c>
 800151e:	e0f4      	b.n	800170a <HAL_RCC_OscConfig+0x216>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001520:	69e2      	ldr	r2, [r4, #28]
 8001522:	2a00      	cmp	r2, #0
 8001524:	d000      	beq.n	8001528 <HAL_RCC_OscConfig+0x34>
 8001526:	e17b      	b.n	8001820 <HAL_RCC_OscConfig+0x32c>
  return HAL_OK;
 8001528:	2000      	movs	r0, #0
 800152a:	e7e9      	b.n	8001500 <HAL_RCC_OscConfig+0xc>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800152c:	2238      	movs	r2, #56	; 0x38
 800152e:	4db0      	ldr	r5, [pc, #704]	; (80017f0 <HAL_RCC_OscConfig+0x2fc>)
 8001530:	68ab      	ldr	r3, [r5, #8]
 8001532:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001534:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001536:	2b10      	cmp	r3, #16
 8001538:	d109      	bne.n	800154e <HAL_RCC_OscConfig+0x5a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800153a:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800153c:	0793      	lsls	r3, r2, #30
 800153e:	d108      	bne.n	8001552 <HAL_RCC_OscConfig+0x5e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001540:	682b      	ldr	r3, [r5, #0]
 8001542:	039b      	lsls	r3, r3, #14
 8001544:	d5e1      	bpl.n	800150a <HAL_RCC_OscConfig+0x16>
 8001546:	6863      	ldr	r3, [r4, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1de      	bne.n	800150a <HAL_RCC_OscConfig+0x16>
 800154c:	e7d7      	b.n	80014fe <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800154e:	2b08      	cmp	r3, #8
 8001550:	d0f6      	beq.n	8001540 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001552:	2280      	movs	r2, #128	; 0x80
 8001554:	6863      	ldr	r3, [r4, #4]
 8001556:	0252      	lsls	r2, r2, #9
 8001558:	4293      	cmp	r3, r2
 800155a:	d111      	bne.n	8001580 <HAL_RCC_OscConfig+0x8c>
 800155c:	682a      	ldr	r2, [r5, #0]
 800155e:	4313      	orrs	r3, r2
 8001560:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001562:	f7ff fdef 	bl	8001144 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001566:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001568:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800156a:	02b6      	lsls	r6, r6, #10
 800156c:	682b      	ldr	r3, [r5, #0]
 800156e:	4233      	tst	r3, r6
 8001570:	d1cb      	bne.n	800150a <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001572:	f7ff fde7 	bl	8001144 <HAL_GetTick>
 8001576:	1bc0      	subs	r0, r0, r7
 8001578:	2864      	cmp	r0, #100	; 0x64
 800157a:	d9f7      	bls.n	800156c <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 800157c:	2003      	movs	r0, #3
 800157e:	e7bf      	b.n	8001500 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001580:	21a0      	movs	r1, #160	; 0xa0
 8001582:	02c9      	lsls	r1, r1, #11
 8001584:	428b      	cmp	r3, r1
 8001586:	d108      	bne.n	800159a <HAL_RCC_OscConfig+0xa6>
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	6829      	ldr	r1, [r5, #0]
 800158c:	02db      	lsls	r3, r3, #11
 800158e:	430b      	orrs	r3, r1
 8001590:	602b      	str	r3, [r5, #0]
 8001592:	682b      	ldr	r3, [r5, #0]
 8001594:	431a      	orrs	r2, r3
 8001596:	602a      	str	r2, [r5, #0]
 8001598:	e7e3      	b.n	8001562 <HAL_RCC_OscConfig+0x6e>
 800159a:	682a      	ldr	r2, [r5, #0]
 800159c:	4995      	ldr	r1, [pc, #596]	; (80017f4 <HAL_RCC_OscConfig+0x300>)
 800159e:	400a      	ands	r2, r1
 80015a0:	602a      	str	r2, [r5, #0]
 80015a2:	682a      	ldr	r2, [r5, #0]
 80015a4:	4994      	ldr	r1, [pc, #592]	; (80017f8 <HAL_RCC_OscConfig+0x304>)
 80015a6:	400a      	ands	r2, r1
 80015a8:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1d9      	bne.n	8001562 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 80015ae:	f7ff fdc9 	bl	8001144 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015b2:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80015b4:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015b6:	02b6      	lsls	r6, r6, #10
 80015b8:	682b      	ldr	r3, [r5, #0]
 80015ba:	4233      	tst	r3, r6
 80015bc:	d0a5      	beq.n	800150a <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015be:	f7ff fdc1 	bl	8001144 <HAL_GetTick>
 80015c2:	1bc0      	subs	r0, r0, r7
 80015c4:	2864      	cmp	r0, #100	; 0x64
 80015c6:	d9f7      	bls.n	80015b8 <HAL_RCC_OscConfig+0xc4>
 80015c8:	e7d8      	b.n	800157c <HAL_RCC_OscConfig+0x88>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ca:	2338      	movs	r3, #56	; 0x38
 80015cc:	4d88      	ldr	r5, [pc, #544]	; (80017f0 <HAL_RCC_OscConfig+0x2fc>)
 80015ce:	68aa      	ldr	r2, [r5, #8]
 80015d0:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015d2:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80015d4:	2b10      	cmp	r3, #16
 80015d6:	d129      	bne.n	800162c <HAL_RCC_OscConfig+0x138>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015d8:	2103      	movs	r1, #3
 80015da:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80015dc:	2a02      	cmp	r2, #2
 80015de:	d127      	bne.n	8001630 <HAL_RCC_OscConfig+0x13c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e0:	682a      	ldr	r2, [r5, #0]
 80015e2:	0552      	lsls	r2, r2, #21
 80015e4:	d503      	bpl.n	80015ee <HAL_RCC_OscConfig+0xfa>
 80015e6:	68e2      	ldr	r2, [r4, #12]
 80015e8:	2a00      	cmp	r2, #0
 80015ea:	d100      	bne.n	80015ee <HAL_RCC_OscConfig+0xfa>
 80015ec:	e787      	b.n	80014fe <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ee:	6869      	ldr	r1, [r5, #4]
 80015f0:	6962      	ldr	r2, [r4, #20]
 80015f2:	4882      	ldr	r0, [pc, #520]	; (80017fc <HAL_RCC_OscConfig+0x308>)
 80015f4:	0212      	lsls	r2, r2, #8
 80015f6:	4001      	ands	r1, r0
 80015f8:	430a      	orrs	r2, r1
 80015fa:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d10d      	bne.n	800161c <HAL_RCC_OscConfig+0x128>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001600:	682b      	ldr	r3, [r5, #0]
 8001602:	4a7f      	ldr	r2, [pc, #508]	; (8001800 <HAL_RCC_OscConfig+0x30c>)
 8001604:	4013      	ands	r3, r2
 8001606:	6922      	ldr	r2, [r4, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800160c:	682b      	ldr	r3, [r5, #0]
 800160e:	4a7d      	ldr	r2, [pc, #500]	; (8001804 <HAL_RCC_OscConfig+0x310>)
 8001610:	049b      	lsls	r3, r3, #18
 8001612:	0f5b      	lsrs	r3, r3, #29
 8001614:	40da      	lsrs	r2, r3
 8001616:	0013      	movs	r3, r2
 8001618:	4a7b      	ldr	r2, [pc, #492]	; (8001808 <HAL_RCC_OscConfig+0x314>)
 800161a:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800161c:	4b7b      	ldr	r3, [pc, #492]	; (800180c <HAL_RCC_OscConfig+0x318>)
 800161e:	6818      	ldr	r0, [r3, #0]
 8001620:	f7ff f99a 	bl	8000958 <HAL_InitTick>
 8001624:	2800      	cmp	r0, #0
 8001626:	d100      	bne.n	800162a <HAL_RCC_OscConfig+0x136>
 8001628:	e772      	b.n	8001510 <HAL_RCC_OscConfig+0x1c>
 800162a:	e768      	b.n	80014fe <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0d7      	beq.n	80015e0 <HAL_RCC_OscConfig+0xec>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001630:	68e3      	ldr	r3, [r4, #12]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d020      	beq.n	8001678 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001636:	682b      	ldr	r3, [r5, #0]
 8001638:	4a71      	ldr	r2, [pc, #452]	; (8001800 <HAL_RCC_OscConfig+0x30c>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800163a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800163c:	4013      	ands	r3, r2
 800163e:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001640:	00f6      	lsls	r6, r6, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001642:	4313      	orrs	r3, r2
 8001644:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8001646:	2380      	movs	r3, #128	; 0x80
 8001648:	682a      	ldr	r2, [r5, #0]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	4313      	orrs	r3, r2
 800164e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001650:	f7ff fd78 	bl	8001144 <HAL_GetTick>
 8001654:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001656:	682b      	ldr	r3, [r5, #0]
 8001658:	4233      	tst	r3, r6
 800165a:	d007      	beq.n	800166c <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165c:	686a      	ldr	r2, [r5, #4]
 800165e:	6963      	ldr	r3, [r4, #20]
 8001660:	4966      	ldr	r1, [pc, #408]	; (80017fc <HAL_RCC_OscConfig+0x308>)
 8001662:	021b      	lsls	r3, r3, #8
 8001664:	400a      	ands	r2, r1
 8001666:	4313      	orrs	r3, r2
 8001668:	606b      	str	r3, [r5, #4]
 800166a:	e751      	b.n	8001510 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800166c:	f7ff fd6a 	bl	8001144 <HAL_GetTick>
 8001670:	1bc0      	subs	r0, r0, r7
 8001672:	2802      	cmp	r0, #2
 8001674:	d9ef      	bls.n	8001656 <HAL_RCC_OscConfig+0x162>
 8001676:	e781      	b.n	800157c <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8001678:	682b      	ldr	r3, [r5, #0]
 800167a:	4a65      	ldr	r2, [pc, #404]	; (8001810 <HAL_RCC_OscConfig+0x31c>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800167c:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 800167e:	4013      	ands	r3, r2
 8001680:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001682:	f7ff fd5f 	bl	8001144 <HAL_GetTick>
 8001686:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001688:	00f6      	lsls	r6, r6, #3
 800168a:	682b      	ldr	r3, [r5, #0]
 800168c:	4233      	tst	r3, r6
 800168e:	d100      	bne.n	8001692 <HAL_RCC_OscConfig+0x19e>
 8001690:	e73e      	b.n	8001510 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001692:	f7ff fd57 	bl	8001144 <HAL_GetTick>
 8001696:	1bc0      	subs	r0, r0, r7
 8001698:	2802      	cmp	r0, #2
 800169a:	d9f6      	bls.n	800168a <HAL_RCC_OscConfig+0x196>
 800169c:	e76e      	b.n	800157c <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800169e:	2138      	movs	r1, #56	; 0x38
 80016a0:	4b53      	ldr	r3, [pc, #332]	; (80017f0 <HAL_RCC_OscConfig+0x2fc>)
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	001d      	movs	r5, r3
 80016a6:	400a      	ands	r2, r1
 80016a8:	2a18      	cmp	r2, #24
 80016aa:	d108      	bne.n	80016be <HAL_RCC_OscConfig+0x1ca>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80016ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ae:	079b      	lsls	r3, r3, #30
 80016b0:	d400      	bmi.n	80016b4 <HAL_RCC_OscConfig+0x1c0>
 80016b2:	e731      	b.n	8001518 <HAL_RCC_OscConfig+0x24>
 80016b4:	69a3      	ldr	r3, [r4, #24]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d000      	beq.n	80016bc <HAL_RCC_OscConfig+0x1c8>
 80016ba:	e72d      	b.n	8001518 <HAL_RCC_OscConfig+0x24>
 80016bc:	e71f      	b.n	80014fe <HAL_RCC_OscConfig+0xa>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016be:	69a2      	ldr	r2, [r4, #24]
 80016c0:	2301      	movs	r3, #1
 80016c2:	2a00      	cmp	r2, #0
 80016c4:	d010      	beq.n	80016e8 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_LSI_ENABLE();
 80016c6:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016c8:	2602      	movs	r6, #2
        __HAL_RCC_LSI_ENABLE();
 80016ca:	4313      	orrs	r3, r2
 80016cc:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 80016ce:	f7ff fd39 	bl	8001144 <HAL_GetTick>
 80016d2:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016d4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80016d6:	4233      	tst	r3, r6
 80016d8:	d000      	beq.n	80016dc <HAL_RCC_OscConfig+0x1e8>
 80016da:	e71d      	b.n	8001518 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016dc:	f7ff fd32 	bl	8001144 <HAL_GetTick>
 80016e0:	1bc0      	subs	r0, r0, r7
 80016e2:	2802      	cmp	r0, #2
 80016e4:	d9f6      	bls.n	80016d4 <HAL_RCC_OscConfig+0x1e0>
 80016e6:	e749      	b.n	800157c <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_LSI_DISABLE();
 80016e8:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016ea:	2602      	movs	r6, #2
        __HAL_RCC_LSI_DISABLE();
 80016ec:	439a      	bics	r2, r3
 80016ee:	662a      	str	r2, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 80016f0:	f7ff fd28 	bl	8001144 <HAL_GetTick>
 80016f4:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016f6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80016f8:	4233      	tst	r3, r6
 80016fa:	d100      	bne.n	80016fe <HAL_RCC_OscConfig+0x20a>
 80016fc:	e70c      	b.n	8001518 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016fe:	f7ff fd21 	bl	8001144 <HAL_GetTick>
 8001702:	1bc0      	subs	r0, r0, r7
 8001704:	2802      	cmp	r0, #2
 8001706:	d9f6      	bls.n	80016f6 <HAL_RCC_OscConfig+0x202>
 8001708:	e738      	b.n	800157c <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800170a:	2138      	movs	r1, #56	; 0x38
 800170c:	4b38      	ldr	r3, [pc, #224]	; (80017f0 <HAL_RCC_OscConfig+0x2fc>)
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	001d      	movs	r5, r3
 8001712:	400a      	ands	r2, r1
 8001714:	2a20      	cmp	r2, #32
 8001716:	d108      	bne.n	800172a <HAL_RCC_OscConfig+0x236>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800171a:	079b      	lsls	r3, r3, #30
 800171c:	d400      	bmi.n	8001720 <HAL_RCC_OscConfig+0x22c>
 800171e:	e6ff      	b.n	8001520 <HAL_RCC_OscConfig+0x2c>
 8001720:	68a3      	ldr	r3, [r4, #8]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d000      	beq.n	8001728 <HAL_RCC_OscConfig+0x234>
 8001726:	e6fb      	b.n	8001520 <HAL_RCC_OscConfig+0x2c>
 8001728:	e6e9      	b.n	80014fe <HAL_RCC_OscConfig+0xa>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800172a:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800172c:	2100      	movs	r1, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800172e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001730:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 8001732:	9100      	str	r1, [sp, #0]
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001734:	4213      	tst	r3, r2
 8001736:	d108      	bne.n	800174a <HAL_RCC_OscConfig+0x256>
        __HAL_RCC_PWR_CLK_ENABLE();
 8001738:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800173a:	4313      	orrs	r3, r2
 800173c:	63eb      	str	r3, [r5, #60]	; 0x3c
 800173e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001740:	4013      	ands	r3, r2
 8001742:	9303      	str	r3, [sp, #12]
 8001744:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 8001746:	2301      	movs	r3, #1
 8001748:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800174a:	2780      	movs	r7, #128	; 0x80
 800174c:	4e31      	ldr	r6, [pc, #196]	; (8001814 <HAL_RCC_OscConfig+0x320>)
 800174e:	007f      	lsls	r7, r7, #1
 8001750:	6833      	ldr	r3, [r6, #0]
 8001752:	423b      	tst	r3, r7
 8001754:	d015      	beq.n	8001782 <HAL_RCC_OscConfig+0x28e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001756:	68a3      	ldr	r3, [r4, #8]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d122      	bne.n	80017a2 <HAL_RCC_OscConfig+0x2ae>
 800175c:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800175e:	4313      	orrs	r3, r2
 8001760:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8001762:	f7ff fcef 	bl	8001144 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001766:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8001768:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800176a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800176c:	423b      	tst	r3, r7
 800176e:	d038      	beq.n	80017e2 <HAL_RCC_OscConfig+0x2ee>
      if (pwrclkchanged == SET)
 8001770:	9b00      	ldr	r3, [sp, #0]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d000      	beq.n	8001778 <HAL_RCC_OscConfig+0x284>
 8001776:	e6d3      	b.n	8001520 <HAL_RCC_OscConfig+0x2c>
        __HAL_RCC_PWR_CLK_DISABLE();
 8001778:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800177a:	4a27      	ldr	r2, [pc, #156]	; (8001818 <HAL_RCC_OscConfig+0x324>)
 800177c:	4013      	ands	r3, r2
 800177e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8001780:	e6ce      	b.n	8001520 <HAL_RCC_OscConfig+0x2c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001782:	6833      	ldr	r3, [r6, #0]
 8001784:	433b      	orrs	r3, r7
 8001786:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001788:	f7ff fcdc 	bl	8001144 <HAL_GetTick>
 800178c:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800178e:	6833      	ldr	r3, [r6, #0]
 8001790:	423b      	tst	r3, r7
 8001792:	d1e0      	bne.n	8001756 <HAL_RCC_OscConfig+0x262>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001794:	f7ff fcd6 	bl	8001144 <HAL_GetTick>
 8001798:	9b01      	ldr	r3, [sp, #4]
 800179a:	1ac0      	subs	r0, r0, r3
 800179c:	2802      	cmp	r0, #2
 800179e:	d9f6      	bls.n	800178e <HAL_RCC_OscConfig+0x29a>
 80017a0:	e6ec      	b.n	800157c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80017a4:	2b05      	cmp	r3, #5
 80017a6:	d105      	bne.n	80017b4 <HAL_RCC_OscConfig+0x2c0>
 80017a8:	3b01      	subs	r3, #1
 80017aa:	4313      	orrs	r3, r2
 80017ac:	65eb      	str	r3, [r5, #92]	; 0x5c
 80017ae:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80017b0:	2301      	movs	r3, #1
 80017b2:	e7d4      	b.n	800175e <HAL_RCC_OscConfig+0x26a>
 80017b4:	2101      	movs	r1, #1
 80017b6:	438a      	bics	r2, r1
 80017b8:	65ea      	str	r2, [r5, #92]	; 0x5c
 80017ba:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80017bc:	3103      	adds	r1, #3
 80017be:	438a      	bics	r2, r1
 80017c0:	65ea      	str	r2, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1cd      	bne.n	8001762 <HAL_RCC_OscConfig+0x26e>
        tickstart = HAL_GetTick();
 80017c6:	f7ff fcbd 	bl	8001144 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017ca:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 80017cc:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017ce:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80017d0:	423b      	tst	r3, r7
 80017d2:	d0cd      	beq.n	8001770 <HAL_RCC_OscConfig+0x27c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d4:	f7ff fcb6 	bl	8001144 <HAL_GetTick>
 80017d8:	4b10      	ldr	r3, [pc, #64]	; (800181c <HAL_RCC_OscConfig+0x328>)
 80017da:	1b80      	subs	r0, r0, r6
 80017dc:	4298      	cmp	r0, r3
 80017de:	d9f6      	bls.n	80017ce <HAL_RCC_OscConfig+0x2da>
 80017e0:	e6cc      	b.n	800157c <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e2:	f7ff fcaf 	bl	8001144 <HAL_GetTick>
 80017e6:	4b0d      	ldr	r3, [pc, #52]	; (800181c <HAL_RCC_OscConfig+0x328>)
 80017e8:	1b80      	subs	r0, r0, r6
 80017ea:	4298      	cmp	r0, r3
 80017ec:	d9bd      	bls.n	800176a <HAL_RCC_OscConfig+0x276>
 80017ee:	e6c5      	b.n	800157c <HAL_RCC_OscConfig+0x88>
 80017f0:	40021000 	.word	0x40021000
 80017f4:	fffeffff 	.word	0xfffeffff
 80017f8:	fffbffff 	.word	0xfffbffff
 80017fc:	ffff80ff 	.word	0xffff80ff
 8001800:	ffffc7ff 	.word	0xffffc7ff
 8001804:	00f42400 	.word	0x00f42400
 8001808:	20000000 	.word	0x20000000
 800180c:	20000008 	.word	0x20000008
 8001810:	fffffeff 	.word	0xfffffeff
 8001814:	40007000 	.word	0x40007000
 8001818:	efffffff 	.word	0xefffffff
 800181c:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001820:	2038      	movs	r0, #56	; 0x38
 8001822:	4b40      	ldr	r3, [pc, #256]	; (8001924 <HAL_RCC_OscConfig+0x430>)
 8001824:	6899      	ldr	r1, [r3, #8]
 8001826:	001d      	movs	r5, r3
 8001828:	4001      	ands	r1, r0
 800182a:	2910      	cmp	r1, #16
 800182c:	d052      	beq.n	80018d4 <HAL_RCC_OscConfig+0x3e0>
        __HAL_RCC_PLL_DISABLE();
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	493d      	ldr	r1, [pc, #244]	; (8001928 <HAL_RCC_OscConfig+0x434>)
 8001832:	400b      	ands	r3, r1
 8001834:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001836:	2a02      	cmp	r2, #2
 8001838:	d135      	bne.n	80018a6 <HAL_RCC_OscConfig+0x3b2>
        tickstart = HAL_GetTick();
 800183a:	f7ff fc83 	bl	8001144 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800183e:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001840:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001842:	04b6      	lsls	r6, r6, #18
 8001844:	682b      	ldr	r3, [r5, #0]
 8001846:	4233      	tst	r3, r6
 8001848:	d127      	bne.n	800189a <HAL_RCC_OscConfig+0x3a6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800184a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800184c:	6a23      	ldr	r3, [r4, #32]
 800184e:	68ea      	ldr	r2, [r5, #12]
 8001850:	430b      	orrs	r3, r1
 8001852:	4936      	ldr	r1, [pc, #216]	; (800192c <HAL_RCC_OscConfig+0x438>)
 8001854:	400a      	ands	r2, r1
 8001856:	4313      	orrs	r3, r2
 8001858:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800185a:	4313      	orrs	r3, r2
 800185c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800185e:	4313      	orrs	r3, r2
 8001860:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001862:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001864:	0212      	lsls	r2, r2, #8
 8001866:	4313      	orrs	r3, r2
 8001868:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	682a      	ldr	r2, [r5, #0]
 800186e:	045b      	lsls	r3, r3, #17
 8001870:	4313      	orrs	r3, r2
 8001872:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	68ea      	ldr	r2, [r5, #12]
 8001878:	055b      	lsls	r3, r3, #21
 800187a:	4313      	orrs	r3, r2
 800187c:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800187e:	f7ff fc61 	bl	8001144 <HAL_GetTick>
 8001882:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001884:	04a4      	lsls	r4, r4, #18
 8001886:	682b      	ldr	r3, [r5, #0]
 8001888:	4223      	tst	r3, r4
 800188a:	d000      	beq.n	800188e <HAL_RCC_OscConfig+0x39a>
 800188c:	e64c      	b.n	8001528 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188e:	f7ff fc59 	bl	8001144 <HAL_GetTick>
 8001892:	1b80      	subs	r0, r0, r6
 8001894:	2802      	cmp	r0, #2
 8001896:	d9f6      	bls.n	8001886 <HAL_RCC_OscConfig+0x392>
 8001898:	e670      	b.n	800157c <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189a:	f7ff fc53 	bl	8001144 <HAL_GetTick>
 800189e:	1bc0      	subs	r0, r0, r7
 80018a0:	2802      	cmp	r0, #2
 80018a2:	d9cf      	bls.n	8001844 <HAL_RCC_OscConfig+0x350>
 80018a4:	e66a      	b.n	800157c <HAL_RCC_OscConfig+0x88>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80018a6:	2203      	movs	r2, #3
 80018a8:	68eb      	ldr	r3, [r5, #12]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018aa:	2480      	movs	r4, #128	; 0x80
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80018ac:	4393      	bics	r3, r2
 80018ae:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80018b0:	68eb      	ldr	r3, [r5, #12]
 80018b2:	4a1f      	ldr	r2, [pc, #124]	; (8001930 <HAL_RCC_OscConfig+0x43c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018b4:	04a4      	lsls	r4, r4, #18
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80018b6:	4013      	ands	r3, r2
 80018b8:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80018ba:	f7ff fc43 	bl	8001144 <HAL_GetTick>
 80018be:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c0:	682b      	ldr	r3, [r5, #0]
 80018c2:	4223      	tst	r3, r4
 80018c4:	d100      	bne.n	80018c8 <HAL_RCC_OscConfig+0x3d4>
 80018c6:	e62f      	b.n	8001528 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c8:	f7ff fc3c 	bl	8001144 <HAL_GetTick>
 80018cc:	1b80      	subs	r0, r0, r6
 80018ce:	2802      	cmp	r0, #2
 80018d0:	d9f6      	bls.n	80018c0 <HAL_RCC_OscConfig+0x3cc>
 80018d2:	e653      	b.n	800157c <HAL_RCC_OscConfig+0x88>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018d4:	2a01      	cmp	r2, #1
 80018d6:	d100      	bne.n	80018da <HAL_RCC_OscConfig+0x3e6>
 80018d8:	e611      	b.n	80014fe <HAL_RCC_OscConfig+0xa>
        temp_pllckcfg = RCC->PLLCFGR;
 80018da:	68d8      	ldr	r0, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018dc:	2303      	movs	r3, #3
 80018de:	6a22      	ldr	r2, [r4, #32]
 80018e0:	4003      	ands	r3, r0
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d000      	beq.n	80018e8 <HAL_RCC_OscConfig+0x3f4>
 80018e6:	e60a      	b.n	80014fe <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018e8:	2370      	movs	r3, #112	; 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018ec:	4003      	ands	r3, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d000      	beq.n	80018f4 <HAL_RCC_OscConfig+0x400>
 80018f2:	e604      	b.n	80014fe <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018f4:	22fe      	movs	r2, #254	; 0xfe
 80018f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80018f8:	01d2      	lsls	r2, r2, #7
 80018fa:	4002      	ands	r2, r0
 80018fc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018fe:	429a      	cmp	r2, r3
 8001900:	d000      	beq.n	8001904 <HAL_RCC_OscConfig+0x410>
 8001902:	e5fc      	b.n	80014fe <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001904:	23f8      	movs	r3, #248	; 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001906:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001908:	039b      	lsls	r3, r3, #14
 800190a:	4003      	ands	r3, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800190c:	4293      	cmp	r3, r2
 800190e:	d000      	beq.n	8001912 <HAL_RCC_OscConfig+0x41e>
 8001910:	e5f5      	b.n	80014fe <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001912:	6b23      	ldr	r3, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001914:	0f40      	lsrs	r0, r0, #29
 8001916:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001918:	1ac0      	subs	r0, r0, r3
 800191a:	1e43      	subs	r3, r0, #1
 800191c:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 800191e:	b2c0      	uxtb	r0, r0
 8001920:	e5ee      	b.n	8001500 <HAL_RCC_OscConfig+0xc>
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	40021000 	.word	0x40021000
 8001928:	feffffff 	.word	0xfeffffff
 800192c:	1fc1808c 	.word	0x1fc1808c
 8001930:	effeffff 	.word	0xeffeffff

08001934 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001934:	2338      	movs	r3, #56	; 0x38
 8001936:	4a1f      	ldr	r2, [pc, #124]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x80>)
{
 8001938:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800193a:	6891      	ldr	r1, [r2, #8]
 800193c:	0014      	movs	r4, r2
 800193e:	4219      	tst	r1, r3
 8001940:	d108      	bne.n	8001954 <HAL_RCC_GetSysClockFreq+0x20>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001942:	2101      	movs	r1, #1
 8001944:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001946:	481c      	ldr	r0, [pc, #112]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x84>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001948:	049b      	lsls	r3, r3, #18
 800194a:	0f5b      	lsrs	r3, r3, #29
 800194c:	4099      	lsls	r1, r3
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
        break;
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
    sysclockfreq = pllvco / pllr;
 800194e:	f7fe fc11 	bl	8000174 <__udivsi3>
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8001952:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001954:	6891      	ldr	r1, [r2, #8]
 8001956:	4019      	ands	r1, r3
 8001958:	2908      	cmp	r1, #8
 800195a:	d025      	beq.n	80019a8 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800195c:	6891      	ldr	r1, [r2, #8]
 800195e:	4019      	ands	r1, r3
 8001960:	2910      	cmp	r1, #16
 8001962:	d115      	bne.n	8001990 <HAL_RCC_GetSysClockFreq+0x5c>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001964:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001966:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001968:	43db      	mvns	r3, r3
 800196a:	227f      	movs	r2, #127	; 0x7f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800196c:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800196e:	0649      	lsls	r1, r1, #25
 8001970:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001972:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001974:	3101      	adds	r1, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001976:	4015      	ands	r5, r2
    switch (pllsource)
 8001978:	079b      	lsls	r3, r3, #30
 800197a:	d107      	bne.n	800198c <HAL_RCC_GetSysClockFreq+0x58>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800197c:	480f      	ldr	r0, [pc, #60]	; (80019bc <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800197e:	f7fe fbf9 	bl	8000174 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001982:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001984:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001986:	0f49      	lsrs	r1, r1, #29
 8001988:	3101      	adds	r1, #1
 800198a:	e7e0      	b.n	800194e <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800198c:	480a      	ldr	r0, [pc, #40]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x84>)
 800198e:	e7f6      	b.n	800197e <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001990:	6891      	ldr	r1, [r2, #8]
 8001992:	4019      	ands	r1, r3
 8001994:	2920      	cmp	r1, #32
 8001996:	d009      	beq.n	80019ac <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001998:	6892      	ldr	r2, [r2, #8]
    sysclockfreq = 0U;
 800199a:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800199c:	4013      	ands	r3, r2
 800199e:	2b18      	cmp	r3, #24
 80019a0:	d1d7      	bne.n	8001952 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSI_VALUE;
 80019a2:	20fa      	movs	r0, #250	; 0xfa
 80019a4:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 80019a6:	e7d4      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = HSE_VALUE;
 80019a8:	4804      	ldr	r0, [pc, #16]	; (80019bc <HAL_RCC_GetSysClockFreq+0x88>)
 80019aa:	e7d2      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSE_VALUE;
 80019ac:	2080      	movs	r0, #128	; 0x80
 80019ae:	0200      	lsls	r0, r0, #8
 80019b0:	e7cf      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x1e>
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	40021000 	.word	0x40021000
 80019b8:	00f42400 	.word	0x00f42400
 80019bc:	007a1200 	.word	0x007a1200

080019c0 <HAL_RCC_ClockConfig>:
{
 80019c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80019c2:	0005      	movs	r5, r0
 80019c4:	000e      	movs	r6, r1
  if (RCC_ClkInitStruct == NULL)
 80019c6:	2800      	cmp	r0, #0
 80019c8:	d101      	bne.n	80019ce <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 80019ca:	2001      	movs	r0, #1
}
 80019cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019ce:	2707      	movs	r7, #7
 80019d0:	4c4a      	ldr	r4, [pc, #296]	; (8001afc <HAL_RCC_ClockConfig+0x13c>)
 80019d2:	6823      	ldr	r3, [r4, #0]
 80019d4:	403b      	ands	r3, r7
 80019d6:	428b      	cmp	r3, r1
 80019d8:	d32a      	bcc.n	8001a30 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019da:	6829      	ldr	r1, [r5, #0]
 80019dc:	078b      	lsls	r3, r1, #30
 80019de:	d43b      	bmi.n	8001a58 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019e0:	07cb      	lsls	r3, r1, #31
 80019e2:	d448      	bmi.n	8001a76 <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019e4:	2707      	movs	r7, #7
 80019e6:	6823      	ldr	r3, [r4, #0]
 80019e8:	403b      	ands	r3, r7
 80019ea:	42b3      	cmp	r3, r6
 80019ec:	d90a      	bls.n	8001a04 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ee:	6823      	ldr	r3, [r4, #0]
 80019f0:	43bb      	bics	r3, r7
 80019f2:	4333      	orrs	r3, r6
 80019f4:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80019f6:	f7ff fba5 	bl	8001144 <HAL_GetTick>
 80019fa:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019fc:	6823      	ldr	r3, [r4, #0]
 80019fe:	403b      	ands	r3, r7
 8001a00:	42b3      	cmp	r3, r6
 8001a02:	d16b      	bne.n	8001adc <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a04:	682b      	ldr	r3, [r5, #0]
 8001a06:	4c3e      	ldr	r4, [pc, #248]	; (8001b00 <HAL_RCC_ClockConfig+0x140>)
 8001a08:	075b      	lsls	r3, r3, #29
 8001a0a:	d46f      	bmi.n	8001aec <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001a0c:	f7ff ff92 	bl	8001934 <HAL_RCC_GetSysClockFreq>
 8001a10:	68a3      	ldr	r3, [r4, #8]
 8001a12:	4a3c      	ldr	r2, [pc, #240]	; (8001b04 <HAL_RCC_ClockConfig+0x144>)
 8001a14:	051b      	lsls	r3, r3, #20
 8001a16:	0f1b      	lsrs	r3, r3, #28
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	589b      	ldr	r3, [r3, r2]
 8001a1c:	221f      	movs	r2, #31
 8001a1e:	4013      	ands	r3, r2
 8001a20:	40d8      	lsrs	r0, r3
 8001a22:	4b39      	ldr	r3, [pc, #228]	; (8001b08 <HAL_RCC_ClockConfig+0x148>)
 8001a24:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8001a26:	4b39      	ldr	r3, [pc, #228]	; (8001b0c <HAL_RCC_ClockConfig+0x14c>)
 8001a28:	6818      	ldr	r0, [r3, #0]
 8001a2a:	f7fe ff95 	bl	8000958 <HAL_InitTick>
 8001a2e:	e7cd      	b.n	80019cc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a30:	6823      	ldr	r3, [r4, #0]
 8001a32:	43bb      	bics	r3, r7
 8001a34:	430b      	orrs	r3, r1
 8001a36:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001a38:	f7ff fb84 	bl	8001144 <HAL_GetTick>
 8001a3c:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a3e:	6823      	ldr	r3, [r4, #0]
 8001a40:	403b      	ands	r3, r7
 8001a42:	42b3      	cmp	r3, r6
 8001a44:	d0c9      	beq.n	80019da <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a46:	f7ff fb7d 	bl	8001144 <HAL_GetTick>
 8001a4a:	9b01      	ldr	r3, [sp, #4]
 8001a4c:	1ac0      	subs	r0, r0, r3
 8001a4e:	4b30      	ldr	r3, [pc, #192]	; (8001b10 <HAL_RCC_ClockConfig+0x150>)
 8001a50:	4298      	cmp	r0, r3
 8001a52:	d9f4      	bls.n	8001a3e <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8001a54:	2003      	movs	r0, #3
 8001a56:	e7b9      	b.n	80019cc <HAL_RCC_ClockConfig+0xc>
 8001a58:	4a29      	ldr	r2, [pc, #164]	; (8001b00 <HAL_RCC_ClockConfig+0x140>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5a:	074b      	lsls	r3, r1, #29
 8001a5c:	d504      	bpl.n	8001a68 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a5e:	23e0      	movs	r3, #224	; 0xe0
 8001a60:	6890      	ldr	r0, [r2, #8]
 8001a62:	01db      	lsls	r3, r3, #7
 8001a64:	4303      	orrs	r3, r0
 8001a66:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a68:	6893      	ldr	r3, [r2, #8]
 8001a6a:	482a      	ldr	r0, [pc, #168]	; (8001b14 <HAL_RCC_ClockConfig+0x154>)
 8001a6c:	4003      	ands	r3, r0
 8001a6e:	68a8      	ldr	r0, [r5, #8]
 8001a70:	4303      	orrs	r3, r0
 8001a72:	6093      	str	r3, [r2, #8]
 8001a74:	e7b4      	b.n	80019e0 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a76:	686a      	ldr	r2, [r5, #4]
 8001a78:	4f21      	ldr	r7, [pc, #132]	; (8001b00 <HAL_RCC_ClockConfig+0x140>)
 8001a7a:	2a01      	cmp	r2, #1
 8001a7c:	d119      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	039b      	lsls	r3, r3, #14
 8001a82:	d5a2      	bpl.n	80019ca <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a84:	2107      	movs	r1, #7
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	438b      	bics	r3, r1
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8001a8e:	f7ff fb59 	bl	8001144 <HAL_GetTick>
 8001a92:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a94:	2338      	movs	r3, #56	; 0x38
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	401a      	ands	r2, r3
 8001a9a:	686b      	ldr	r3, [r5, #4]
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d0a0      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa2:	f7ff fb4f 	bl	8001144 <HAL_GetTick>
 8001aa6:	9b01      	ldr	r3, [sp, #4]
 8001aa8:	1ac0      	subs	r0, r0, r3
 8001aaa:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <HAL_RCC_ClockConfig+0x150>)
 8001aac:	4298      	cmp	r0, r3
 8001aae:	d9f1      	bls.n	8001a94 <HAL_RCC_ClockConfig+0xd4>
 8001ab0:	e7d0      	b.n	8001a54 <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ab2:	2a02      	cmp	r2, #2
 8001ab4:	d103      	bne.n	8001abe <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	019b      	lsls	r3, r3, #6
 8001aba:	d4e3      	bmi.n	8001a84 <HAL_RCC_ClockConfig+0xc4>
 8001abc:	e785      	b.n	80019ca <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001abe:	2a00      	cmp	r2, #0
 8001ac0:	d103      	bne.n	8001aca <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	055b      	lsls	r3, r3, #21
 8001ac6:	d4dd      	bmi.n	8001a84 <HAL_RCC_ClockConfig+0xc4>
 8001ac8:	e77f      	b.n	80019ca <HAL_RCC_ClockConfig+0xa>
 8001aca:	2302      	movs	r3, #2
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001acc:	2a03      	cmp	r2, #3
 8001ace:	d103      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ad0:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ad2:	4219      	tst	r1, r3
 8001ad4:	d1d6      	bne.n	8001a84 <HAL_RCC_ClockConfig+0xc4>
 8001ad6:	e778      	b.n	80019ca <HAL_RCC_ClockConfig+0xa>
 8001ad8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001ada:	e7fa      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001adc:	f7ff fb32 	bl	8001144 <HAL_GetTick>
 8001ae0:	9b01      	ldr	r3, [sp, #4]
 8001ae2:	1ac0      	subs	r0, r0, r3
 8001ae4:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <HAL_RCC_ClockConfig+0x150>)
 8001ae6:	4298      	cmp	r0, r3
 8001ae8:	d988      	bls.n	80019fc <HAL_RCC_ClockConfig+0x3c>
 8001aea:	e7b3      	b.n	8001a54 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001aec:	68a3      	ldr	r3, [r4, #8]
 8001aee:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <HAL_RCC_ClockConfig+0x158>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	68ea      	ldr	r2, [r5, #12]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	60a3      	str	r3, [r4, #8]
 8001af8:	e788      	b.n	8001a0c <HAL_RCC_ClockConfig+0x4c>
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	40022000 	.word	0x40022000
 8001b00:	40021000 	.word	0x40021000
 8001b04:	0800f0b8 	.word	0x0800f0b8
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	20000008 	.word	0x20000008
 8001b10:	00001388 	.word	0x00001388
 8001b14:	fffff0ff 	.word	0xfffff0ff
 8001b18:	ffff8fff 	.word	0xffff8fff

08001b1c <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001b1e:	4a07      	ldr	r2, [pc, #28]	; (8001b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	045b      	lsls	r3, r3, #17
 8001b24:	0f5b      	lsrs	r3, r3, #29
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	589b      	ldr	r3, [r3, r2]
 8001b2a:	221f      	movs	r2, #31
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b30:	6810      	ldr	r0, [r2, #0]
 8001b32:	40d8      	lsrs	r0, r3
}
 8001b34:	4770      	bx	lr
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	0800f0f8 	.word	0x0800f0f8
 8001b40:	20000000 	.word	0x20000000

08001b44 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001b44:	2207      	movs	r2, #7
{
 8001b46:	b530      	push	{r4, r5, lr}

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b48:	25f0      	movs	r5, #240	; 0xf0
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <HAL_RCC_GetClockConfig+0x2c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001b4c:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b4e:	689c      	ldr	r4, [r3, #8]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b50:	012d      	lsls	r5, r5, #4
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b52:	4014      	ands	r4, r2
 8001b54:	6044      	str	r4, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b56:	689c      	ldr	r4, [r3, #8]
 8001b58:	402c      	ands	r4, r5
 8001b5a:	6084      	str	r4, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8001b5c:	24e0      	movs	r4, #224	; 0xe0
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	01e4      	lsls	r4, r4, #7
 8001b62:	4023      	ands	r3, r4
 8001b64:	60c3      	str	r3, [r0, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b66:	4b03      	ldr	r3, [pc, #12]	; (8001b74 <HAL_RCC_GetClockConfig+0x30>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]
}
 8001b6e:	bd30      	pop	{r4, r5, pc}
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40022000 	.word	0x40022000

08001b78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b7a:	0005      	movs	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b7c:	682b      	ldr	r3, [r5, #0]
{
 8001b7e:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b80:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b82:	039b      	lsls	r3, r3, #14
 8001b84:	d548      	bpl.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0xa0>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b86:	2280      	movs	r2, #128	; 0x80
 8001b88:	4c4b      	ldr	r4, [pc, #300]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001b8a:	0552      	lsls	r2, r2, #21
 8001b8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8001b8e:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b90:	4213      	tst	r3, r2
 8001b92:	d108      	bne.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b96:	4313      	orrs	r3, r2
 8001b98:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001b9a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	9303      	str	r3, [sp, #12]
 8001ba0:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ba6:	2780      	movs	r7, #128	; 0x80
 8001ba8:	4e44      	ldr	r6, [pc, #272]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8001baa:	007f      	lsls	r7, r7, #1
 8001bac:	6833      	ldr	r3, [r6, #0]
 8001bae:	433b      	orrs	r3, r7
 8001bb0:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001bb2:	f7ff fac7 	bl	8001144 <HAL_GetTick>
 8001bb6:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001bb8:	6833      	ldr	r3, [r6, #0]
 8001bba:	423b      	tst	r3, r7
 8001bbc:	d01e      	beq.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x84>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001bbe:	23c0      	movs	r3, #192	; 0xc0
 8001bc0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4013      	ands	r3, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001bc6:	d00f      	beq.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8001bc8:	69aa      	ldr	r2, [r5, #24]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d00c      	beq.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x70>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001bce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001bd0:	4b3b      	ldr	r3, [pc, #236]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001bd2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001bd4:	4013      	ands	r3, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 8001bd6:	2280      	movs	r2, #128	; 0x80
 8001bd8:	0252      	lsls	r2, r2, #9
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	65e2      	str	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001bde:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001be0:	4938      	ldr	r1, [pc, #224]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001be2:	400a      	ands	r2, r1
 8001be4:	65e2      	str	r2, [r4, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001be6:	65e3      	str	r3, [r4, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001be8:	07db      	lsls	r3, r3, #31
 8001bea:	d457      	bmi.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x124>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bec:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001bee:	4a34      	ldr	r2, [pc, #208]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001bf0:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	69aa      	ldr	r2, [r5, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	65e3      	str	r3, [r4, #92]	; 0x5c
 8001bfa:	e006      	b.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x92>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bfc:	f7ff faa2 	bl	8001144 <HAL_GetTick>
 8001c00:	9b01      	ldr	r3, [sp, #4]
 8001c02:	1ac0      	subs	r0, r0, r3
 8001c04:	2802      	cmp	r0, #2
 8001c06:	d9d7      	bls.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x40>
        ret = HAL_TIMEOUT;
 8001c08:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c0a:	9b00      	ldr	r3, [sp, #0]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d103      	bne.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c12:	4a2d      	ldr	r2, [pc, #180]	; (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c18:	682a      	ldr	r2, [r5, #0]
 8001c1a:	07d3      	lsls	r3, r2, #31
 8001c1c:	d506      	bpl.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c1e:	2403      	movs	r4, #3
 8001c20:	4925      	ldr	r1, [pc, #148]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001c22:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8001c24:	43a3      	bics	r3, r4
 8001c26:	686c      	ldr	r4, [r5, #4]
 8001c28:	4323      	orrs	r3, r4
 8001c2a:	654b      	str	r3, [r1, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c2c:	0793      	lsls	r3, r2, #30
 8001c2e:	d506      	bpl.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c30:	240c      	movs	r4, #12
 8001c32:	4921      	ldr	r1, [pc, #132]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001c34:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8001c36:	43a3      	bics	r3, r4
 8001c38:	68ac      	ldr	r4, [r5, #8]
 8001c3a:	4323      	orrs	r3, r4
 8001c3c:	654b      	str	r3, [r1, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c3e:	0693      	lsls	r3, r2, #26
 8001c40:	d506      	bpl.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c42:	491d      	ldr	r1, [pc, #116]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001c44:	4c21      	ldr	r4, [pc, #132]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001c46:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8001c48:	4023      	ands	r3, r4
 8001c4a:	68ec      	ldr	r4, [r5, #12]
 8001c4c:	4323      	orrs	r3, r4
 8001c4e:	654b      	str	r3, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c50:	0453      	lsls	r3, r2, #17
 8001c52:	d50f      	bpl.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c54:	4918      	ldr	r1, [pc, #96]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001c56:	696c      	ldr	r4, [r5, #20]
 8001c58:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	089b      	lsrs	r3, r3, #2
 8001c5e:	4323      	orrs	r3, r4
 8001c60:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001c62:	2380      	movs	r3, #128	; 0x80
 8001c64:	05db      	lsls	r3, r3, #23
 8001c66:	429c      	cmp	r4, r3
 8001c68:	d104      	bne.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001c6a:	2380      	movs	r3, #128	; 0x80
 8001c6c:	68cc      	ldr	r4, [r1, #12]
 8001c6e:	025b      	lsls	r3, r3, #9
 8001c70:	4323      	orrs	r3, r4
 8001c72:	60cb      	str	r3, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001c74:	0513      	lsls	r3, r2, #20
 8001c76:	d50f      	bpl.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001c78:	490f      	ldr	r1, [pc, #60]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001c7a:	4c15      	ldr	r4, [pc, #84]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001c7c:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8001c7e:	692a      	ldr	r2, [r5, #16]
 8001c80:	4023      	ands	r3, r4
 8001c82:	4313      	orrs	r3, r2
 8001c84:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	01db      	lsls	r3, r3, #7
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d104      	bne.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001c8e:	2380      	movs	r3, #128	; 0x80
 8001c90:	68ca      	ldr	r2, [r1, #12]
 8001c92:	025b      	lsls	r3, r3, #9
 8001c94:	4313      	orrs	r3, r2
 8001c96:	60cb      	str	r3, [r1, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8001c98:	b005      	add	sp, #20
 8001c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
 8001c9c:	f7ff fa52 	bl	8001144 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ca0:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8001ca2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ca4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001ca6:	423b      	tst	r3, r7
 8001ca8:	d1a0      	bne.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x74>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001caa:	f7ff fa4b 	bl	8001144 <HAL_GetTick>
 8001cae:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001cb0:	1b80      	subs	r0, r0, r6
 8001cb2:	4298      	cmp	r0, r3
 8001cb4:	d9f6      	bls.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8001cb6:	e7a7      	b.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40007000 	.word	0x40007000
 8001cc0:	fffffcff 	.word	0xfffffcff
 8001cc4:	fffeffff 	.word	0xfffeffff
 8001cc8:	efffffff 	.word	0xefffffff
 8001ccc:	ffffcfff 	.word	0xffffcfff
 8001cd0:	ffff3fff 	.word	0xffff3fff
 8001cd4:	00001388 	.word	0x00001388

08001cd8 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8001cd8:	21a0      	movs	r1, #160	; 0xa0
 8001cda:	6802      	ldr	r2, [r0, #0]
{
 8001cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8001cde:	68d3      	ldr	r3, [r2, #12]
{
 8001ce0:	0004      	movs	r4, r0
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8001ce2:	438b      	bics	r3, r1
 8001ce4:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8001ce6:	f7ff fa2d 	bl	8001144 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001cea:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8001cec:	0006      	movs	r6, r0
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8001cee:	2520      	movs	r5, #32
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001cf0:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8001cf2:	6823      	ldr	r3, [r4, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	422b      	tst	r3, r5
 8001cf8:	d001      	beq.n	8001cfe <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8001cfa:	2000      	movs	r0, #0
}
 8001cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001cfe:	f7ff fa21 	bl	8001144 <HAL_GetTick>
 8001d02:	1b80      	subs	r0, r0, r6
 8001d04:	42b8      	cmp	r0, r7
 8001d06:	d9f4      	bls.n	8001cf2 <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8001d08:	2003      	movs	r0, #3
 8001d0a:	e7f7      	b.n	8001cfc <HAL_RTC_WaitForSynchro+0x24>

08001d0c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8001d0e:	2740      	movs	r7, #64	; 0x40
 8001d10:	6803      	ldr	r3, [r0, #0]
{
 8001d12:	0005      	movs	r5, r0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8001d14:	68da      	ldr	r2, [r3, #12]
  HAL_StatusTypeDef status = HAL_OK;  
 8001d16:	2400      	movs	r4, #0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8001d18:	423a      	tst	r2, r7
 8001d1a:	d10c      	bne.n	8001d36 <RTC_EnterInitMode+0x2a>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8001d1c:	2280      	movs	r2, #128	; 0x80
 8001d1e:	68d9      	ldr	r1, [r3, #12]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8001d24:	f7ff fa0e 	bl	8001144 <HAL_GetTick>
 8001d28:	0006      	movs	r6, r0
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8001d2a:	682b      	ldr	r3, [r5, #0]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	423b      	tst	r3, r7
 8001d30:	d101      	bne.n	8001d36 <RTC_EnterInitMode+0x2a>
 8001d32:	2c03      	cmp	r4, #3
 8001d34:	d101      	bne.n	8001d3a <RTC_EnterInitMode+0x2e>
      }
    }
  }

  return status;
}
 8001d36:	0020      	movs	r0, r4
 8001d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8001d3a:	f7ff fa03 	bl	8001144 <HAL_GetTick>
 8001d3e:	23fa      	movs	r3, #250	; 0xfa
 8001d40:	1b80      	subs	r0, r0, r6
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4298      	cmp	r0, r3
 8001d46:	d9f0      	bls.n	8001d2a <RTC_EnterInitMode+0x1e>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001d48:	002b      	movs	r3, r5
 8001d4a:	2403      	movs	r4, #3
 8001d4c:	3329      	adds	r3, #41	; 0x29
 8001d4e:	701c      	strb	r4, [r3, #0]
 8001d50:	e7eb      	b.n	8001d2a <RTC_EnterInitMode+0x1e>
	...

08001d54 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8001d54:	2280      	movs	r2, #128	; 0x80
{
 8001d56:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8001d58:	4c0f      	ldr	r4, [pc, #60]	; (8001d98 <RTC_ExitInitMode+0x44>)
{
 8001d5a:	0005      	movs	r5, r0
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8001d5c:	68e3      	ldr	r3, [r4, #12]
 8001d5e:	4393      	bics	r3, r2
 8001d60:	60e3      	str	r3, [r4, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8001d62:	69a3      	ldr	r3, [r4, #24]
 8001d64:	3a60      	subs	r2, #96	; 0x60
 8001d66:	4213      	tst	r3, r2
 8001d68:	d107      	bne.n	8001d7a <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001d6a:	f7ff ffb5 	bl	8001cd8 <HAL_RTC_WaitForSynchro>
 8001d6e:	2800      	cmp	r0, #0
 8001d70:	d002      	beq.n	8001d78 <RTC_ExitInitMode+0x24>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001d72:	2003      	movs	r0, #3
 8001d74:	3529      	adds	r5, #41	; 0x29
 8001d76:	7028      	strb	r0, [r5, #0]
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 8001d78:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001d7a:	69a3      	ldr	r3, [r4, #24]
 8001d7c:	4393      	bics	r3, r2
 8001d7e:	61a3      	str	r3, [r4, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001d80:	f7ff ffaa 	bl	8001cd8 <HAL_RTC_WaitForSynchro>
 8001d84:	2800      	cmp	r0, #0
 8001d86:	d002      	beq.n	8001d8e <RTC_ExitInitMode+0x3a>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001d88:	2003      	movs	r0, #3
 8001d8a:	3529      	adds	r5, #41	; 0x29
 8001d8c:	7028      	strb	r0, [r5, #0]
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001d8e:	2320      	movs	r3, #32
 8001d90:	69a2      	ldr	r2, [r4, #24]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61a3      	str	r3, [r4, #24]
 8001d96:	e7ef      	b.n	8001d78 <RTC_ExitInitMode+0x24>
 8001d98:	40002800 	.word	0x40002800

08001d9c <HAL_RTC_Init>:
{
 8001d9c:	b570      	push	{r4, r5, r6, lr}
 8001d9e:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 8001da0:	2001      	movs	r0, #1
  if(hrtc != NULL)
 8001da2:	2c00      	cmp	r4, #0
 8001da4:	d047      	beq.n	8001e36 <HAL_RTC_Init+0x9a>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001da6:	0025      	movs	r5, r4
 8001da8:	3529      	adds	r5, #41	; 0x29
 8001daa:	782b      	ldrb	r3, [r5, #0]
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d108      	bne.n	8001dc4 <HAL_RTC_Init+0x28>
    hrtc->Lock = HAL_UNLOCKED;
 8001db2:	0022      	movs	r2, r4
 8001db4:	3228      	adds	r2, #40	; 0x28
 8001db6:	7013      	strb	r3, [r2, #0]
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8001db8:	2388      	movs	r3, #136	; 0x88
 8001dba:	021b      	lsls	r3, r3, #8
 8001dbc:	6063      	str	r3, [r4, #4]
    HAL_RTC_MspInit(hrtc);
 8001dbe:	0020      	movs	r0, r4
 8001dc0:	f7fe fd42 	bl	8000848 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8001dc4:	2302      	movs	r3, #2
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001dc6:	22ca      	movs	r2, #202	; 0xca
    hrtc->State = HAL_RTC_STATE_BUSY;
 8001dc8:	702b      	strb	r3, [r5, #0]
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001dca:	6823      	ldr	r3, [r4, #0]
    status = RTC_EnterInitMode(hrtc);
 8001dcc:	0020      	movs	r0, r4
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001dce:	625a      	str	r2, [r3, #36]	; 0x24
 8001dd0:	3a77      	subs	r2, #119	; 0x77
 8001dd2:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8001dd4:	f7ff ff9a 	bl	8001d0c <RTC_EnterInitMode>
    if(status == HAL_OK)
 8001dd8:	2800      	cmp	r0, #0
 8001dda:	d125      	bne.n	8001e28 <HAL_RTC_Init+0x8c>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8001ddc:	6823      	ldr	r3, [r4, #0]
 8001dde:	4916      	ldr	r1, [pc, #88]	; (8001e38 <HAL_RTC_Init+0x9c>)
 8001de0:	699a      	ldr	r2, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001de2:	6960      	ldr	r0, [r4, #20]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8001de4:	400a      	ands	r2, r1
 8001de6:	619a      	str	r2, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001de8:	68a2      	ldr	r2, [r4, #8]
 8001dea:	6999      	ldr	r1, [r3, #24]
 8001dec:	4302      	orrs	r2, r0
 8001dee:	69e0      	ldr	r0, [r4, #28]
 8001df0:	4302      	orrs	r2, r0
 8001df2:	430a      	orrs	r2, r1
 8001df4:	619a      	str	r2, [r3, #24]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8001df6:	6922      	ldr	r2, [r4, #16]
      status = RTC_ExitInitMode(hrtc);
 8001df8:	0020      	movs	r0, r4
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8001dfa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001dfc:	68e2      	ldr	r2, [r4, #12]
 8001dfe:	6919      	ldr	r1, [r3, #16]
 8001e00:	0412      	lsls	r2, r2, #16
 8001e02:	430a      	orrs	r2, r1
 8001e04:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8001e06:	f7ff ffa5 	bl	8001d54 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8001e0a:	2800      	cmp	r0, #0
 8001e0c:	d10c      	bne.n	8001e28 <HAL_RTC_Init+0x8c>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8001e0e:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001e10:	6a26      	ldr	r6, [r4, #32]
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8001e12:	6993      	ldr	r3, [r2, #24]
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	08db      	lsrs	r3, r3, #3
 8001e18:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001e1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e1c:	6991      	ldr	r1, [r2, #24]
 8001e1e:	4333      	orrs	r3, r6
 8001e20:	69a6      	ldr	r6, [r4, #24]
 8001e22:	4333      	orrs	r3, r6
 8001e24:	430b      	orrs	r3, r1
 8001e26:	6193      	str	r3, [r2, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e28:	22ff      	movs	r2, #255	; 0xff
 8001e2a:	6823      	ldr	r3, [r4, #0]
 8001e2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8001e2e:	2800      	cmp	r0, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_RTC_Init+0x9a>
      hrtc->State = HAL_RTC_STATE_READY;
 8001e32:	2301      	movs	r3, #1
 8001e34:	702b      	strb	r3, [r5, #0]
}
 8001e36:	bd70      	pop	{r4, r5, r6, pc}
 8001e38:	fb8fffbf 	.word	0xfb8fffbf

08001e3c <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8001e3c:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while(Param >= 10U)
 8001e3e:	2809      	cmp	r0, #9
 8001e40:	d803      	bhi.n	8001e4a <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8001e42:	011b      	lsls	r3, r3, #4
 8001e44:	4318      	orrs	r0, r3
 8001e46:	b2c0      	uxtb	r0, r0
}
 8001e48:	4770      	bx	lr
    Param -= 10U;
 8001e4a:	380a      	subs	r0, #10
    bcdhigh++;
 8001e4c:	3301      	adds	r3, #1
    Param -= 10U;
 8001e4e:	b2c0      	uxtb	r0, r0
 8001e50:	e7f5      	b.n	8001e3e <RTC_ByteToBcd2+0x2>
	...

08001e54 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 8001e54:	0003      	movs	r3, r0
{
 8001e56:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001e58:	3328      	adds	r3, #40	; 0x28
{
 8001e5a:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8001e5c:	9301      	str	r3, [sp, #4]
{
 8001e5e:	9203      	str	r2, [sp, #12]
  __HAL_LOCK(hrtc);
 8001e60:	781a      	ldrb	r2, [r3, #0]
 8001e62:	2302      	movs	r3, #2
{
 8001e64:	0005      	movs	r5, r0
 8001e66:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8001e68:	0018      	movs	r0, r3
 8001e6a:	2a01      	cmp	r2, #1
 8001e6c:	d049      	beq.n	8001f02 <HAL_RTC_SetTime+0xae>
 8001e6e:	2201      	movs	r2, #1
 8001e70:	9901      	ldr	r1, [sp, #4]
  status = RTC_EnterInitMode(hrtc);
 8001e72:	0028      	movs	r0, r5
  __HAL_LOCK(hrtc);
 8001e74:	700a      	strb	r2, [r1, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e76:	002a      	movs	r2, r5
 8001e78:	3229      	adds	r2, #41	; 0x29
 8001e7a:	7013      	strb	r3, [r2, #0]
 8001e7c:	9202      	str	r2, [sp, #8]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e7e:	22ca      	movs	r2, #202	; 0xca
 8001e80:	682b      	ldr	r3, [r5, #0]
 8001e82:	625a      	str	r2, [r3, #36]	; 0x24
 8001e84:	3a77      	subs	r2, #119	; 0x77
 8001e86:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8001e88:	f7ff ff40 	bl	8001d0c <RTC_EnterInitMode>
  if(status == HAL_OK)
 8001e8c:	2800      	cmp	r0, #0
 8001e8e:	d12d      	bne.n	8001eec <HAL_RTC_SetTime+0x98>
    if(Format == RTC_FORMAT_BIN)
 8001e90:	9b03      	ldr	r3, [sp, #12]
 8001e92:	682e      	ldr	r6, [r5, #0]
 8001e94:	2240      	movs	r2, #64	; 0x40
 8001e96:	7820      	ldrb	r0, [r4, #0]
 8001e98:	7867      	ldrb	r7, [r4, #1]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d133      	bne.n	8001f06 <HAL_RTC_SetTime+0xb2>
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001e9e:	69b3      	ldr	r3, [r6, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d100      	bne.n	8001ea6 <HAL_RTC_SetTime+0x52>
        sTime->TimeFormat = 0x00U;
 8001ea4:	70e3      	strb	r3, [r4, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001ea6:	f7ff ffc9 	bl	8001e3c <RTC_ByteToBcd2>
 8001eaa:	9003      	str	r0, [sp, #12]
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001eac:	0038      	movs	r0, r7
 8001eae:	f7ff ffc5 	bl	8001e3c <RTC_ByteToBcd2>
 8001eb2:	0007      	movs	r7, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8001eb4:	78a0      	ldrb	r0, [r4, #2]
 8001eb6:	f7ff ffc1 	bl	8001e3c <RTC_ByteToBcd2>
 8001eba:	0003      	movs	r3, r0
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001ebc:	78e0      	ldrb	r0, [r4, #3]
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001ebe:	023f      	lsls	r7, r7, #8
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001ec0:	0580      	lsls	r0, r0, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001ec2:	4318      	orrs	r0, r3
 8001ec4:	9b03      	ldr	r3, [sp, #12]
 8001ec6:	041b      	lsls	r3, r3, #16
 8001ec8:	4318      	orrs	r0, r3
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001eca:	4307      	orrs	r7, r0
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001ecc:	4814      	ldr	r0, [pc, #80]	; (8001f20 <HAL_RTC_SetTime+0xcc>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001ece:	4a15      	ldr	r2, [pc, #84]	; (8001f24 <HAL_RTC_SetTime+0xd0>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001ed0:	4007      	ands	r7, r0
 8001ed2:	6037      	str	r7, [r6, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001ed4:	69b3      	ldr	r3, [r6, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001ed6:	6921      	ldr	r1, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61b3      	str	r3, [r6, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001edc:	68e3      	ldr	r3, [r4, #12]
 8001ede:	69b2      	ldr	r2, [r6, #24]
 8001ee0:	430b      	orrs	r3, r1
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61b3      	str	r3, [r6, #24]
    status = RTC_ExitInitMode(hrtc);
 8001ee6:	0028      	movs	r0, r5
 8001ee8:	f7ff ff34 	bl	8001d54 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001eec:	22ff      	movs	r2, #255	; 0xff
 8001eee:	682b      	ldr	r3, [r5, #0]
 8001ef0:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 8001ef2:	2800      	cmp	r0, #0
 8001ef4:	d102      	bne.n	8001efc <HAL_RTC_SetTime+0xa8>
   hrtc->State = HAL_RTC_STATE_READY;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	9a02      	ldr	r2, [sp, #8]
 8001efa:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(hrtc);
 8001efc:	2300      	movs	r3, #0
 8001efe:	9a01      	ldr	r2, [sp, #4]
 8001f00:	7013      	strb	r3, [r2, #0]
}
 8001f02:	b005      	add	sp, #20
 8001f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001f06:	69b3      	ldr	r3, [r6, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d100      	bne.n	8001f0e <HAL_RTC_SetTime+0xba>
        sTime->TimeFormat = 0x00U;
 8001f0c:	70e3      	strb	r3, [r4, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001f0e:	0400      	lsls	r0, r0, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001f10:	023f      	lsls	r7, r7, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001f12:	4307      	orrs	r7, r0
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8001f14:	78a0      	ldrb	r0, [r4, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001f16:	4307      	orrs	r7, r0
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001f18:	78e0      	ldrb	r0, [r4, #3]
 8001f1a:	0580      	lsls	r0, r0, #22
 8001f1c:	e7d5      	b.n	8001eca <HAL_RTC_SetTime+0x76>
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	007f7f7f 	.word	0x007f7f7f
 8001f24:	fffbffff 	.word	0xfffbffff

08001f28 <HAL_RTC_SetDate>:
{
 8001f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8001f2a:	0006      	movs	r6, r0
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	3628      	adds	r6, #40	; 0x28
{
 8001f30:	000d      	movs	r5, r1
 __HAL_LOCK(hrtc);
 8001f32:	7831      	ldrb	r1, [r6, #0]
{
 8001f34:	0004      	movs	r4, r0
 8001f36:	b085      	sub	sp, #20
 __HAL_LOCK(hrtc);
 8001f38:	0018      	movs	r0, r3
 8001f3a:	2901      	cmp	r1, #1
 8001f3c:	d03f      	beq.n	8001fbe <HAL_RTC_SetDate+0x96>
 8001f3e:	2101      	movs	r1, #1
 8001f40:	7031      	strb	r1, [r6, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f42:	0021      	movs	r1, r4
 8001f44:	3129      	adds	r1, #41	; 0x29
 8001f46:	9102      	str	r1, [sp, #8]
 8001f48:	700b      	strb	r3, [r1, #0]
 8001f4a:	7829      	ldrb	r1, [r5, #0]
 8001f4c:	78e8      	ldrb	r0, [r5, #3]
 8001f4e:	0349      	lsls	r1, r1, #13
 8001f50:	786b      	ldrb	r3, [r5, #1]
 8001f52:	78af      	ldrb	r7, [r5, #2]
 8001f54:	9101      	str	r1, [sp, #4]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001f56:	2a00      	cmp	r2, #0
 8001f58:	d133      	bne.n	8001fc2 <HAL_RTC_SetDate+0x9a>
 8001f5a:	3210      	adds	r2, #16
 8001f5c:	4213      	tst	r3, r2
 8001f5e:	d002      	beq.n	8001f66 <HAL_RTC_SetDate+0x3e>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001f60:	4393      	bics	r3, r2
 8001f62:	330a      	adds	r3, #10
 8001f64:	706b      	strb	r3, [r5, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001f66:	f7ff ff69 	bl	8001e3c <RTC_ByteToBcd2>
 8001f6a:	9003      	str	r0, [sp, #12]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001f6c:	7868      	ldrb	r0, [r5, #1]
 8001f6e:	f7ff ff65 	bl	8001e3c <RTC_ByteToBcd2>
 8001f72:	0005      	movs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8001f74:	0038      	movs	r0, r7
 8001f76:	f7ff ff61 	bl	8001e3c <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001f7a:	9b03      	ldr	r3, [sp, #12]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001f7c:	022d      	lsls	r5, r5, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001f7e:	041f      	lsls	r7, r3, #16
 8001f80:	9b01      	ldr	r3, [sp, #4]
 8001f82:	4318      	orrs	r0, r3
 8001f84:	4307      	orrs	r7, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f86:	22ca      	movs	r2, #202	; 0xca
 8001f88:	6823      	ldr	r3, [r4, #0]
  status = RTC_EnterInitMode(hrtc);
 8001f8a:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f8c:	625a      	str	r2, [r3, #36]	; 0x24
 8001f8e:	3a77      	subs	r2, #119	; 0x77
 8001f90:	625a      	str	r2, [r3, #36]	; 0x24
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8001f92:	433d      	orrs	r5, r7
  status = RTC_EnterInitMode(hrtc);
 8001f94:	f7ff feba 	bl	8001d0c <RTC_EnterInitMode>
  if(status == HAL_OK)
 8001f98:	2800      	cmp	r0, #0
 8001f9a:	d106      	bne.n	8001faa <HAL_RTC_SetDate+0x82>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001f9c:	4f0c      	ldr	r7, [pc, #48]	; (8001fd0 <HAL_RTC_SetDate+0xa8>)
 8001f9e:	6823      	ldr	r3, [r4, #0]
 8001fa0:	403d      	ands	r5, r7
 8001fa2:	605d      	str	r5, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 8001fa4:	0020      	movs	r0, r4
 8001fa6:	f7ff fed5 	bl	8001d54 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001faa:	22ff      	movs	r2, #255	; 0xff
 8001fac:	6823      	ldr	r3, [r4, #0]
 8001fae:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 8001fb0:	2800      	cmp	r0, #0
 8001fb2:	d102      	bne.n	8001fba <HAL_RTC_SetDate+0x92>
    hrtc->State = HAL_RTC_STATE_READY;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	9a02      	ldr	r2, [sp, #8]
 8001fb8:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(hrtc);
 8001fba:	2300      	movs	r3, #0
 8001fbc:	7033      	strb	r3, [r6, #0]
}
 8001fbe:	b005      	add	sp, #20
 8001fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8001fc2:	9a01      	ldr	r2, [sp, #4]
 8001fc4:	0400      	lsls	r0, r0, #16
 8001fc6:	4310      	orrs	r0, r2
 8001fc8:	4307      	orrs	r7, r0
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8001fca:	021d      	lsls	r5, r3, #8
 8001fcc:	e7db      	b.n	8001f86 <HAL_RTC_SetDate+0x5e>
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	00ffff3f 	.word	0x00ffff3f

08001fd4 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001fd4:	21e0      	movs	r1, #224	; 0xe0
 8001fd6:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001fd8:	b510      	push	{r4, lr}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	438a      	bics	r2, r1
 8001fde:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fe0:	2282      	movs	r2, #130	; 0x82
 8001fe2:	6841      	ldr	r1, [r0, #4]
 8001fe4:	0052      	lsls	r2, r2, #1
 8001fe6:	4291      	cmp	r1, r2
 8001fe8:	d10c      	bne.n	8002004 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
 8001fea:	2180      	movs	r1, #128	; 0x80
 8001fec:	6882      	ldr	r2, [r0, #8]
 8001fee:	0209      	lsls	r1, r1, #8
 8001ff0:	428a      	cmp	r2, r1
 8001ff2:	d003      	beq.n	8001ffc <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ff4:	2180      	movs	r1, #128	; 0x80
 8001ff6:	00c9      	lsls	r1, r1, #3
 8001ff8:	428a      	cmp	r2, r1
 8001ffa:	d103      	bne.n	8002004 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ffc:	2140      	movs	r1, #64	; 0x40
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	438a      	bics	r2, r1
 8002002:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002004:	2180      	movs	r1, #128	; 0x80
 8002006:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002008:	0189      	lsls	r1, r1, #6
 800200a:	428a      	cmp	r2, r1
 800200c:	d106      	bne.n	800201c <SPI_WaitFifoStateUntilTimeout.part.1+0x48>
        {
          SPI_RESET_CRC(hspi);
 800200e:	6819      	ldr	r1, [r3, #0]
 8002010:	4c07      	ldr	r4, [pc, #28]	; (8002030 <SPI_WaitFifoStateUntilTimeout.part.1+0x5c>)
 8002012:	4021      	ands	r1, r4
 8002014:	6019      	str	r1, [r3, #0]
 8002016:	6819      	ldr	r1, [r3, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800201c:	0003      	movs	r3, r0
 800201e:	2201      	movs	r2, #1
 8002020:	335d      	adds	r3, #93	; 0x5d
 8002022:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002024:	2300      	movs	r3, #0
 8002026:	305c      	adds	r0, #92	; 0x5c
 8002028:	7003      	strb	r3, [r0, #0]
      count--;
    }
  }

  return HAL_OK;
}
 800202a:	2003      	movs	r0, #3
 800202c:	bd10      	pop	{r4, pc}
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	ffffdfff 	.word	0xffffdfff

08002034 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002036:	000e      	movs	r6, r1
 8002038:	0014      	movs	r4, r2
 800203a:	0005      	movs	r5, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800203c:	f7ff f882 	bl	8001144 <HAL_GetTick>
 8002040:	19a4      	adds	r4, r4, r6
 8002042:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8002044:	f7ff f87e 	bl	8001144 <HAL_GetTick>
 8002048:	0007      	movs	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800204a:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x54>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	015b      	lsls	r3, r3, #5
 8002050:	0d1b      	lsrs	r3, r3, #20
 8002052:	4363      	muls	r3, r4
      count--;
 8002054:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002056:	682b      	ldr	r3, [r5, #0]
 8002058:	2280      	movs	r2, #128	; 0x80
 800205a:	6898      	ldr	r0, [r3, #8]
 800205c:	4010      	ands	r0, r2
 800205e:	d009      	beq.n	8002074 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x40>
    if (Timeout != HAL_MAX_DELAY)
 8002060:	1c72      	adds	r2, r6, #1
 8002062:	d0f9      	beq.n	8002058 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x24>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002064:	f7ff f86e 	bl	8001144 <HAL_GetTick>
 8002068:	1bc0      	subs	r0, r0, r7
 800206a:	42a0      	cmp	r0, r4
 800206c:	d303      	bcc.n	8002076 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x42>
 800206e:	0028      	movs	r0, r5
 8002070:	f7ff ffb0 	bl	8001fd4 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8002074:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if(count == 0U)
 8002076:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002078:	1e5a      	subs	r2, r3, #1
 800207a:	4193      	sbcs	r3, r2
 800207c:	425b      	negs	r3, r3
 800207e:	401c      	ands	r4, r3
      count--;
 8002080:	9b01      	ldr	r3, [sp, #4]
 8002082:	3b01      	subs	r3, #1
 8002084:	e7e6      	b.n	8002054 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x20>
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	20000000 	.word	0x20000000

0800208c <SPI_WaitFifoStateUntilTimeout.constprop.10>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800208c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800208e:	0016      	movs	r6, r2
 8002090:	001c      	movs	r4, r3
 8002092:	b085      	sub	sp, #20
 8002094:	000f      	movs	r7, r1
 8002096:	0005      	movs	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002098:	f7ff f854 	bl	8001144 <HAL_GetTick>
 800209c:	19a4      	adds	r4, r4, r6
 800209e:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80020a0:	f7ff f850 	bl	8001144 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80020a4:	2223      	movs	r2, #35	; 0x23
 80020a6:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x64>)
  tmp_tickstart = HAL_GetTick();
 80020a8:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4353      	muls	r3, r2
 80020ae:	0d1b      	lsrs	r3, r3, #20
 80020b0:	4363      	muls	r3, r4
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }      
      count--;
 80020b2:	9303      	str	r3, [sp, #12]
  while ((hspi->Instance->SR & Fifo) != State)
 80020b4:	682b      	ldr	r3, [r5, #0]
 80020b6:	6898      	ldr	r0, [r3, #8]
 80020b8:	4038      	ands	r0, r7
 80020ba:	d00f      	beq.n	80020dc <SPI_WaitFifoStateUntilTimeout.constprop.10+0x50>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80020bc:	22c0      	movs	r2, #192	; 0xc0
 80020be:	00d2      	lsls	r2, r2, #3
 80020c0:	4297      	cmp	r7, r2
 80020c2:	d100      	bne.n	80020c6 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x3a>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80020c4:	7b1a      	ldrb	r2, [r3, #12]
    if (Timeout != HAL_MAX_DELAY)
 80020c6:	1c72      	adds	r2, r6, #1
 80020c8:	d0f5      	beq.n	80020b6 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80020ca:	f7ff f83b 	bl	8001144 <HAL_GetTick>
 80020ce:	9b01      	ldr	r3, [sp, #4]
 80020d0:	1ac0      	subs	r0, r0, r3
 80020d2:	42a0      	cmp	r0, r4
 80020d4:	d304      	bcc.n	80020e0 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x54>
 80020d6:	0028      	movs	r0, r5
 80020d8:	f7ff ff7c 	bl	8001fd4 <SPI_WaitFifoStateUntilTimeout.part.1>
    }
  }

  return HAL_OK;
}
 80020dc:	b005      	add	sp, #20
 80020de:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 80020e0:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 80020e2:	1e5a      	subs	r2, r3, #1
 80020e4:	4193      	sbcs	r3, r2
 80020e6:	425b      	negs	r3, r3
 80020e8:	401c      	ands	r4, r3
      count--;
 80020ea:	9b03      	ldr	r3, [sp, #12]
 80020ec:	3b01      	subs	r3, #1
 80020ee:	e7e0      	b.n	80020b2 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x26>
 80020f0:	20000000 	.word	0x20000000

080020f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80020f4:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80020f6:	0013      	movs	r3, r2
{
 80020f8:	000d      	movs	r5, r1
 80020fa:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80020fc:	000a      	movs	r2, r1
 80020fe:	21c0      	movs	r1, #192	; 0xc0
 8002100:	0149      	lsls	r1, r1, #5
{
 8002102:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002104:	f7ff ffc2 	bl	800208c <SPI_WaitFifoStateUntilTimeout.constprop.10>
 8002108:	2800      	cmp	r0, #0
 800210a:	d005      	beq.n	8002118 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800210c:	2320      	movs	r3, #32
 800210e:	6e22      	ldr	r2, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002110:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002112:	4313      	orrs	r3, r2
 8002114:	6623      	str	r3, [r4, #96]	; 0x60
 8002116:	e00f      	b.n	8002138 <SPI_EndRxTxTransaction+0x44>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002118:	0032      	movs	r2, r6
 800211a:	0029      	movs	r1, r5
 800211c:	0020      	movs	r0, r4
 800211e:	f7ff ff89 	bl	8002034 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8002122:	2800      	cmp	r0, #0
 8002124:	d1f2      	bne.n	800210c <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002126:	21c0      	movs	r1, #192	; 0xc0
 8002128:	0033      	movs	r3, r6
 800212a:	002a      	movs	r2, r5
 800212c:	00c9      	lsls	r1, r1, #3
 800212e:	0020      	movs	r0, r4
 8002130:	f7ff ffac 	bl	800208c <SPI_WaitFifoStateUntilTimeout.constprop.10>
 8002134:	2800      	cmp	r0, #0
 8002136:	d1e9      	bne.n	800210c <SPI_EndRxTxTransaction+0x18>
  }

  return HAL_OK;
}
 8002138:	bd70      	pop	{r4, r5, r6, pc}
	...

0800213c <HAL_SPI_Init>:
{
 800213c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800213e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002140:	2001      	movs	r0, #1
  if (hspi == NULL)
 8002142:	2c00      	cmp	r4, #0
 8002144:	d067      	beq.n	8002216 <HAL_SPI_Init+0xda>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002148:	2b00      	cmp	r3, #0
 800214a:	d165      	bne.n	8002218 <HAL_SPI_Init+0xdc>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800214c:	2282      	movs	r2, #130	; 0x82
 800214e:	6861      	ldr	r1, [r4, #4]
 8002150:	0052      	lsls	r2, r2, #1
 8002152:	4291      	cmp	r1, r2
 8002154:	d000      	beq.n	8002158 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002156:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002158:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800215a:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800215c:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800215e:	355d      	adds	r5, #93	; 0x5d
 8002160:	782b      	ldrb	r3, [r5, #0]
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d105      	bne.n	8002174 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8002168:	0022      	movs	r2, r4
 800216a:	325c      	adds	r2, #92	; 0x5c
 800216c:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 800216e:	0020      	movs	r0, r4
 8002170:	f7fe fbaa 	bl	80008c8 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002174:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8002176:	2140      	movs	r1, #64	; 0x40
 8002178:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800217a:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 800217c:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800217e:	68e5      	ldr	r5, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8002180:	438b      	bics	r3, r1
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002182:	21e0      	movs	r1, #224	; 0xe0
  __HAL_SPI_DISABLE(hspi);
 8002184:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002186:	00c9      	lsls	r1, r1, #3
 8002188:	2300      	movs	r3, #0
 800218a:	428d      	cmp	r5, r1
 800218c:	d848      	bhi.n	8002220 <HAL_SPI_Init+0xe4>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800218e:	2080      	movs	r0, #128	; 0x80
 8002190:	0140      	lsls	r0, r0, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002192:	428d      	cmp	r5, r1
 8002194:	d000      	beq.n	8002198 <HAL_SPI_Init+0x5c>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002196:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002198:	2382      	movs	r3, #130	; 0x82
 800219a:	6866      	ldr	r6, [r4, #4]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4033      	ands	r3, r6
 80021a0:	2684      	movs	r6, #132	; 0x84
 80021a2:	68a7      	ldr	r7, [r4, #8]
 80021a4:	0236      	lsls	r6, r6, #8
 80021a6:	403e      	ands	r6, r7
 80021a8:	4333      	orrs	r3, r6
 80021aa:	2602      	movs	r6, #2
 80021ac:	6927      	ldr	r7, [r4, #16]
 80021ae:	69a1      	ldr	r1, [r4, #24]
 80021b0:	403e      	ands	r6, r7
 80021b2:	4333      	orrs	r3, r6
 80021b4:	2601      	movs	r6, #1
 80021b6:	6967      	ldr	r7, [r4, #20]
 80021b8:	46b4      	mov	ip, r6
 80021ba:	4037      	ands	r7, r6
 80021bc:	433b      	orrs	r3, r7
 80021be:	2780      	movs	r7, #128	; 0x80
 80021c0:	00bf      	lsls	r7, r7, #2
 80021c2:	400f      	ands	r7, r1
 80021c4:	433b      	orrs	r3, r7
 80021c6:	2738      	movs	r7, #56	; 0x38
 80021c8:	69e6      	ldr	r6, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80021ca:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021cc:	4037      	ands	r7, r6
 80021ce:	433b      	orrs	r3, r7
 80021d0:	2780      	movs	r7, #128	; 0x80
 80021d2:	6a26      	ldr	r6, [r4, #32]
 80021d4:	4037      	ands	r7, r6
 80021d6:	433b      	orrs	r3, r7
 80021d8:	2780      	movs	r7, #128	; 0x80
 80021da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80021dc:	01bf      	lsls	r7, r7, #6
 80021de:	4037      	ands	r7, r6
 80021e0:	433b      	orrs	r3, r7
 80021e2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80021e4:	2310      	movs	r3, #16
 80021e6:	2708      	movs	r7, #8
 80021e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80021ea:	4033      	ands	r3, r6
 80021ec:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80021ee:	4037      	ands	r7, r6
 80021f0:	433b      	orrs	r3, r7
 80021f2:	27f0      	movs	r7, #240	; 0xf0
 80021f4:	013f      	lsls	r7, r7, #4
 80021f6:	403d      	ands	r5, r7
 80021f8:	431d      	orrs	r5, r3
 80021fa:	2304      	movs	r3, #4
 80021fc:	4019      	ands	r1, r3
 80021fe:	4329      	orrs	r1, r5
 8002200:	4308      	orrs	r0, r1
 8002202:	6050      	str	r0, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002204:	69d3      	ldr	r3, [r2, #28]
 8002206:	4908      	ldr	r1, [pc, #32]	; (8002228 <HAL_SPI_Init+0xec>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002208:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800220a:	400b      	ands	r3, r1
 800220c:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 800220e:	4663      	mov	r3, ip
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002210:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002212:	345d      	adds	r4, #93	; 0x5d
 8002214:	7023      	strb	r3, [r4, #0]
}
 8002216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002218:	2300      	movs	r3, #0
 800221a:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800221c:	6163      	str	r3, [r4, #20]
 800221e:	e79b      	b.n	8002158 <HAL_SPI_Init+0x1c>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002220:	21f0      	movs	r1, #240	; 0xf0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002222:	0018      	movs	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002224:	0109      	lsls	r1, r1, #4
 8002226:	e7b4      	b.n	8002192 <HAL_SPI_Init+0x56>
 8002228:	fffff7ff 	.word	0xfffff7ff

0800222c <HAL_SPI_Transmit>:
{
 800222c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800222e:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8002230:	0003      	movs	r3, r0
{
 8002232:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8002234:	335c      	adds	r3, #92	; 0x5c
 8002236:	9301      	str	r3, [sp, #4]
 8002238:	781b      	ldrb	r3, [r3, #0]
{
 800223a:	0004      	movs	r4, r0
 800223c:	000d      	movs	r5, r1
 800223e:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8002240:	2002      	movs	r0, #2
 8002242:	2b01      	cmp	r3, #1
 8002244:	d100      	bne.n	8002248 <HAL_SPI_Transmit+0x1c>
 8002246:	e07e      	b.n	8002346 <HAL_SPI_Transmit+0x11a>
 8002248:	2301      	movs	r3, #1
 800224a:	9a01      	ldr	r2, [sp, #4]
 800224c:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800224e:	f7fe ff79 	bl	8001144 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8002252:	0022      	movs	r2, r4
  tickstart = HAL_GetTick();
 8002254:	9000      	str	r0, [sp, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 8002256:	325d      	adds	r2, #93	; 0x5d
 8002258:	7813      	ldrb	r3, [r2, #0]
    errorcode = HAL_BUSY;
 800225a:	2002      	movs	r0, #2
  if (hspi->State != HAL_SPI_STATE_READY)
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b01      	cmp	r3, #1
 8002260:	d16b      	bne.n	800233a <HAL_SPI_Transmit+0x10e>
    errorcode = HAL_ERROR;
 8002262:	0018      	movs	r0, r3
  if ((pData == NULL) || (Size == 0U))
 8002264:	2d00      	cmp	r5, #0
 8002266:	d068      	beq.n	800233a <HAL_SPI_Transmit+0x10e>
 8002268:	2f00      	cmp	r7, #0
 800226a:	d066      	beq.n	800233a <HAL_SPI_Transmit+0x10e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800226c:	3302      	adds	r3, #2
 800226e:	7013      	strb	r3, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002270:	2300      	movs	r3, #0
  hspi->RxXferSize  = 0U;
 8002272:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002274:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002276:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002278:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800227a:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800227c:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferCount = 0U;
 800227e:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 8002280:	8793      	strh	r3, [r2, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002282:	87d3      	strh	r3, [r2, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002284:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002286:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	68a1      	ldr	r1, [r4, #8]
 800228c:	6822      	ldr	r2, [r4, #0]
 800228e:	021b      	lsls	r3, r3, #8
 8002290:	4299      	cmp	r1, r3
 8002292:	d108      	bne.n	80022a6 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_DISABLE(hspi);
 8002294:	2140      	movs	r1, #64	; 0x40
 8002296:	6813      	ldr	r3, [r2, #0]
 8002298:	438b      	bics	r3, r1
 800229a:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800229c:	2380      	movs	r3, #128	; 0x80
 800229e:	6811      	ldr	r1, [r2, #0]
 80022a0:	01db      	lsls	r3, r3, #7
 80022a2:	430b      	orrs	r3, r1
 80022a4:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022a6:	2340      	movs	r3, #64	; 0x40
 80022a8:	6811      	ldr	r1, [r2, #0]
 80022aa:	4219      	tst	r1, r3
 80022ac:	d102      	bne.n	80022b4 <HAL_SPI_Transmit+0x88>
    __HAL_SPI_ENABLE(hspi);
 80022ae:	6811      	ldr	r1, [r2, #0]
 80022b0:	430b      	orrs	r3, r1
 80022b2:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022b4:	21e0      	movs	r1, #224	; 0xe0
 80022b6:	68e0      	ldr	r0, [r4, #12]
 80022b8:	6863      	ldr	r3, [r4, #4]
 80022ba:	00c9      	lsls	r1, r1, #3
 80022bc:	4288      	cmp	r0, r1
 80022be:	d944      	bls.n	800234a <HAL_SPI_Transmit+0x11e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <HAL_SPI_Transmit+0x9c>
 80022c4:	2f01      	cmp	r7, #1
 80022c6:	d107      	bne.n	80022d8 <HAL_SPI_Transmit+0xac>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022c8:	882b      	ldrh	r3, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022ca:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022cc:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 80022ce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022d0:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022d8:	2502      	movs	r5, #2
 80022da:	e00c      	b.n	80022f6 <HAL_SPI_Transmit+0xca>
 80022dc:	6822      	ldr	r2, [r4, #0]
 80022de:	6893      	ldr	r3, [r2, #8]
 80022e0:	422b      	tst	r3, r5
 80022e2:	d021      	beq.n	8002328 <HAL_SPI_Transmit+0xfc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80022e6:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022e8:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022ea:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022ec:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80022ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80022f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1ef      	bne.n	80022dc <HAL_SPI_Transmit+0xb0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022fc:	9a00      	ldr	r2, [sp, #0]
 80022fe:	0031      	movs	r1, r6
 8002300:	0020      	movs	r0, r4
 8002302:	f7ff fef7 	bl	80020f4 <SPI_EndRxTxTransaction>
 8002306:	2800      	cmp	r0, #0
 8002308:	d149      	bne.n	800239e <HAL_SPI_Transmit+0x172>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800230a:	68a3      	ldr	r3, [r4, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d106      	bne.n	800231e <HAL_SPI_Transmit+0xf2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002310:	9303      	str	r3, [sp, #12]
 8002312:	6823      	ldr	r3, [r4, #0]
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	9203      	str	r2, [sp, #12]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	9303      	str	r3, [sp, #12]
 800231c:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800231e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002320:	1e43      	subs	r3, r0, #1
 8002322:	4198      	sbcs	r0, r3
    errorcode = HAL_BUSY;
 8002324:	b2c0      	uxtb	r0, r0
error:
 8002326:	e008      	b.n	800233a <HAL_SPI_Transmit+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002328:	f7fe ff0c 	bl	8001144 <HAL_GetTick>
 800232c:	9b00      	ldr	r3, [sp, #0]
 800232e:	1ac0      	subs	r0, r0, r3
 8002330:	42b0      	cmp	r0, r6
 8002332:	d3e0      	bcc.n	80022f6 <HAL_SPI_Transmit+0xca>
 8002334:	1c73      	adds	r3, r6, #1
 8002336:	d0de      	beq.n	80022f6 <HAL_SPI_Transmit+0xca>
          errorcode = HAL_TIMEOUT;
 8002338:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800233a:	2301      	movs	r3, #1
 800233c:	345d      	adds	r4, #93	; 0x5d
 800233e:	7023      	strb	r3, [r4, #0]
  __HAL_UNLOCK(hspi);
 8002340:	2300      	movs	r3, #0
 8002342:	9a01      	ldr	r2, [sp, #4]
 8002344:	7013      	strb	r3, [r2, #0]
}
 8002346:	b005      	add	sp, #20
 8002348:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_SPI_Transmit+0x126>
 800234e:	2f01      	cmp	r7, #1
 8002350:	d108      	bne.n	8002364 <HAL_SPI_Transmit+0x138>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002352:	782b      	ldrb	r3, [r5, #0]
 8002354:	7313      	strb	r3, [r2, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002356:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002358:	3301      	adds	r3, #1
 800235a:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800235c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800235e:	3b01      	subs	r3, #1
 8002360:	b29b      	uxth	r3, r3
 8002362:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002364:	2502      	movs	r5, #2
 8002366:	e00d      	b.n	8002384 <HAL_SPI_Transmit+0x158>
 8002368:	6823      	ldr	r3, [r4, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	422a      	tst	r2, r5
 800236e:	d00d      	beq.n	800238c <HAL_SPI_Transmit+0x160>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002370:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002372:	7812      	ldrb	r2, [r2, #0]
 8002374:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002376:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002378:	3301      	adds	r3, #1
 800237a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800237c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800237e:	3b01      	subs	r3, #1
 8002380:	b29b      	uxth	r3, r3
 8002382:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8002384:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1ee      	bne.n	8002368 <HAL_SPI_Transmit+0x13c>
 800238a:	e7b7      	b.n	80022fc <HAL_SPI_Transmit+0xd0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800238c:	f7fe feda 	bl	8001144 <HAL_GetTick>
 8002390:	9b00      	ldr	r3, [sp, #0]
 8002392:	1ac0      	subs	r0, r0, r3
 8002394:	42b0      	cmp	r0, r6
 8002396:	d3f5      	bcc.n	8002384 <HAL_SPI_Transmit+0x158>
 8002398:	1c73      	adds	r3, r6, #1
 800239a:	d0f3      	beq.n	8002384 <HAL_SPI_Transmit+0x158>
 800239c:	e7cc      	b.n	8002338 <HAL_SPI_Transmit+0x10c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800239e:	2320      	movs	r3, #32
 80023a0:	6623      	str	r3, [r4, #96]	; 0x60
 80023a2:	e7b2      	b.n	800230a <HAL_SPI_Transmit+0xde>

080023a4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023a4:	2201      	movs	r2, #1
 80023a6:	6a03      	ldr	r3, [r0, #32]
{
 80023a8:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023aa:	4393      	bics	r3, r2
 80023ac:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023ae:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023b0:	4a19      	ldr	r2, [pc, #100]	; (8002418 <TIM_OC1_SetConfig+0x74>)
  tmpcr2 =  TIMx->CR2;
 80023b2:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80023b4:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023b6:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023b8:	680a      	ldr	r2, [r1, #0]
 80023ba:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023bc:	2202      	movs	r2, #2
 80023be:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023c0:	688a      	ldr	r2, [r1, #8]
 80023c2:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80023c4:	4a15      	ldr	r2, [pc, #84]	; (800241c <TIM_OC1_SetConfig+0x78>)
 80023c6:	4290      	cmp	r0, r2
 80023c8:	d008      	beq.n	80023dc <TIM_OC1_SetConfig+0x38>
 80023ca:	4e15      	ldr	r6, [pc, #84]	; (8002420 <TIM_OC1_SetConfig+0x7c>)
 80023cc:	42b0      	cmp	r0, r6
 80023ce:	d005      	beq.n	80023dc <TIM_OC1_SetConfig+0x38>
 80023d0:	4e14      	ldr	r6, [pc, #80]	; (8002424 <TIM_OC1_SetConfig+0x80>)
 80023d2:	42b0      	cmp	r0, r6
 80023d4:	d002      	beq.n	80023dc <TIM_OC1_SetConfig+0x38>
 80023d6:	4e14      	ldr	r6, [pc, #80]	; (8002428 <TIM_OC1_SetConfig+0x84>)
 80023d8:	42b0      	cmp	r0, r6
 80023da:	d116      	bne.n	800240a <TIM_OC1_SetConfig+0x66>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80023dc:	2608      	movs	r6, #8
 80023de:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80023e0:	68ce      	ldr	r6, [r1, #12]
 80023e2:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80023e4:	2604      	movs	r6, #4
 80023e6:	43b3      	bics	r3, r6
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023e8:	4290      	cmp	r0, r2
 80023ea:	d008      	beq.n	80023fe <TIM_OC1_SetConfig+0x5a>
 80023ec:	4a0c      	ldr	r2, [pc, #48]	; (8002420 <TIM_OC1_SetConfig+0x7c>)
 80023ee:	4290      	cmp	r0, r2
 80023f0:	d005      	beq.n	80023fe <TIM_OC1_SetConfig+0x5a>
 80023f2:	4a0c      	ldr	r2, [pc, #48]	; (8002424 <TIM_OC1_SetConfig+0x80>)
 80023f4:	4290      	cmp	r0, r2
 80023f6:	d002      	beq.n	80023fe <TIM_OC1_SetConfig+0x5a>
 80023f8:	4a0b      	ldr	r2, [pc, #44]	; (8002428 <TIM_OC1_SetConfig+0x84>)
 80023fa:	4290      	cmp	r0, r2
 80023fc:	d105      	bne.n	800240a <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023fe:	4a0b      	ldr	r2, [pc, #44]	; (800242c <TIM_OC1_SetConfig+0x88>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002400:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002402:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002404:	694c      	ldr	r4, [r1, #20]
 8002406:	4334      	orrs	r4, r6
 8002408:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800240a:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800240c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800240e:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002410:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002412:	6203      	str	r3, [r0, #32]
}
 8002414:	bd70      	pop	{r4, r5, r6, pc}
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	fffeff8c 	.word	0xfffeff8c
 800241c:	40012c00 	.word	0x40012c00
 8002420:	40014000 	.word	0x40014000
 8002424:	40014400 	.word	0x40014400
 8002428:	40014800 	.word	0x40014800
 800242c:	fffffcff 	.word	0xfffffcff

08002430 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002430:	6a03      	ldr	r3, [r0, #32]
 8002432:	4a18      	ldr	r2, [pc, #96]	; (8002494 <TIM_OC3_SetConfig+0x64>)
{
 8002434:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002436:	4013      	ands	r3, r2
 8002438:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800243a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800243c:	4d16      	ldr	r5, [pc, #88]	; (8002498 <TIM_OC3_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 800243e:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002440:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002442:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002444:	680d      	ldr	r5, [r1, #0]
 8002446:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002448:	4d14      	ldr	r5, [pc, #80]	; (800249c <TIM_OC3_SetConfig+0x6c>)
 800244a:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800244c:	688d      	ldr	r5, [r1, #8]
 800244e:	022d      	lsls	r5, r5, #8
 8002450:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002452:	4d13      	ldr	r5, [pc, #76]	; (80024a0 <TIM_OC3_SetConfig+0x70>)
 8002454:	42a8      	cmp	r0, r5
 8002456:	d10e      	bne.n	8002476 <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002458:	4d12      	ldr	r5, [pc, #72]	; (80024a4 <TIM_OC3_SetConfig+0x74>)
 800245a:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800245c:	68cb      	ldr	r3, [r1, #12]
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002462:	4d11      	ldr	r5, [pc, #68]	; (80024a8 <TIM_OC3_SetConfig+0x78>)
 8002464:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002466:	4d11      	ldr	r5, [pc, #68]	; (80024ac <TIM_OC3_SetConfig+0x7c>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002468:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800246a:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800246c:	698a      	ldr	r2, [r1, #24]
 800246e:	4332      	orrs	r2, r6
 8002470:	0112      	lsls	r2, r2, #4
 8002472:	432a      	orrs	r2, r5
 8002474:	e008      	b.n	8002488 <TIM_OC3_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002476:	4d0e      	ldr	r5, [pc, #56]	; (80024b0 <TIM_OC3_SetConfig+0x80>)
 8002478:	42a8      	cmp	r0, r5
 800247a:	d0f4      	beq.n	8002466 <TIM_OC3_SetConfig+0x36>
 800247c:	4d0d      	ldr	r5, [pc, #52]	; (80024b4 <TIM_OC3_SetConfig+0x84>)
 800247e:	42a8      	cmp	r0, r5
 8002480:	d0f1      	beq.n	8002466 <TIM_OC3_SetConfig+0x36>
 8002482:	4d0d      	ldr	r5, [pc, #52]	; (80024b8 <TIM_OC3_SetConfig+0x88>)
 8002484:	42a8      	cmp	r0, r5
 8002486:	d0ee      	beq.n	8002466 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002488:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800248a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800248c:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800248e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002490:	6203      	str	r3, [r0, #32]
}
 8002492:	bd70      	pop	{r4, r5, r6, pc}
 8002494:	fffffeff 	.word	0xfffffeff
 8002498:	fffeff8c 	.word	0xfffeff8c
 800249c:	fffffdff 	.word	0xfffffdff
 80024a0:	40012c00 	.word	0x40012c00
 80024a4:	fffff7ff 	.word	0xfffff7ff
 80024a8:	fffffbff 	.word	0xfffffbff
 80024ac:	ffffcfff 	.word	0xffffcfff
 80024b0:	40014000 	.word	0x40014000
 80024b4:	40014400 	.word	0x40014400
 80024b8:	40014800 	.word	0x40014800

080024bc <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80024bc:	6a03      	ldr	r3, [r0, #32]
 80024be:	4a14      	ldr	r2, [pc, #80]	; (8002510 <TIM_OC4_SetConfig+0x54>)
{
 80024c0:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80024c2:	4013      	ands	r3, r2
 80024c4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024c6:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80024c8:	4c12      	ldr	r4, [pc, #72]	; (8002514 <TIM_OC4_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 80024ca:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80024cc:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80024ce:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024d0:	680c      	ldr	r4, [r1, #0]
 80024d2:	0224      	lsls	r4, r4, #8
 80024d4:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80024d6:	4c10      	ldr	r4, [pc, #64]	; (8002518 <TIM_OC4_SetConfig+0x5c>)
 80024d8:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80024da:	688c      	ldr	r4, [r1, #8]
 80024dc:	0324      	lsls	r4, r4, #12
 80024de:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024e0:	4c0e      	ldr	r4, [pc, #56]	; (800251c <TIM_OC4_SetConfig+0x60>)
 80024e2:	42a0      	cmp	r0, r4
 80024e4:	d008      	beq.n	80024f8 <TIM_OC4_SetConfig+0x3c>
 80024e6:	4c0e      	ldr	r4, [pc, #56]	; (8002520 <TIM_OC4_SetConfig+0x64>)
 80024e8:	42a0      	cmp	r0, r4
 80024ea:	d005      	beq.n	80024f8 <TIM_OC4_SetConfig+0x3c>
 80024ec:	4c0d      	ldr	r4, [pc, #52]	; (8002524 <TIM_OC4_SetConfig+0x68>)
 80024ee:	42a0      	cmp	r0, r4
 80024f0:	d002      	beq.n	80024f8 <TIM_OC4_SetConfig+0x3c>
 80024f2:	4c0d      	ldr	r4, [pc, #52]	; (8002528 <TIM_OC4_SetConfig+0x6c>)
 80024f4:	42a0      	cmp	r0, r4
 80024f6:	d104      	bne.n	8002502 <TIM_OC4_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80024f8:	4c0c      	ldr	r4, [pc, #48]	; (800252c <TIM_OC4_SetConfig+0x70>)
 80024fa:	4023      	ands	r3, r4

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80024fc:	694c      	ldr	r4, [r1, #20]
 80024fe:	01a4      	lsls	r4, r4, #6
 8002500:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002502:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002504:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002506:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002508:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800250a:	6202      	str	r2, [r0, #32]
}
 800250c:	bd30      	pop	{r4, r5, pc}
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	ffffefff 	.word	0xffffefff
 8002514:	feff8cff 	.word	0xfeff8cff
 8002518:	ffffdfff 	.word	0xffffdfff
 800251c:	40012c00 	.word	0x40012c00
 8002520:	40014000 	.word	0x40014000
 8002524:	40014400 	.word	0x40014400
 8002528:	40014800 	.word	0x40014800
 800252c:	ffffbfff 	.word	0xffffbfff

08002530 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002530:	6a03      	ldr	r3, [r0, #32]
 8002532:	4a13      	ldr	r2, [pc, #76]	; (8002580 <TIM_OC5_SetConfig+0x50>)
{
 8002534:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002536:	4013      	ands	r3, r2
 8002538:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800253a:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800253c:	4e11      	ldr	r6, [pc, #68]	; (8002584 <TIM_OC5_SetConfig+0x54>)
  tmpcr2 =  TIMx->CR2;
 800253e:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8002540:	6d45      	ldr	r5, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002542:	4035      	ands	r5, r6
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002544:	680e      	ldr	r6, [r1, #0]
 8002546:	4335      	orrs	r5, r6

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002548:	4e0f      	ldr	r6, [pc, #60]	; (8002588 <TIM_OC5_SetConfig+0x58>)
 800254a:	4034      	ands	r4, r6
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800254c:	688e      	ldr	r6, [r1, #8]
 800254e:	0436      	lsls	r6, r6, #16
 8002550:	4334      	orrs	r4, r6

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002552:	4e0e      	ldr	r6, [pc, #56]	; (800258c <TIM_OC5_SetConfig+0x5c>)
 8002554:	42b0      	cmp	r0, r6
 8002556:	d008      	beq.n	800256a <TIM_OC5_SetConfig+0x3a>
 8002558:	4e0d      	ldr	r6, [pc, #52]	; (8002590 <TIM_OC5_SetConfig+0x60>)
 800255a:	42b0      	cmp	r0, r6
 800255c:	d005      	beq.n	800256a <TIM_OC5_SetConfig+0x3a>
 800255e:	4e0d      	ldr	r6, [pc, #52]	; (8002594 <TIM_OC5_SetConfig+0x64>)
 8002560:	42b0      	cmp	r0, r6
 8002562:	d002      	beq.n	800256a <TIM_OC5_SetConfig+0x3a>
 8002564:	4e0c      	ldr	r6, [pc, #48]	; (8002598 <TIM_OC5_SetConfig+0x68>)
 8002566:	42b0      	cmp	r0, r6
 8002568:	d103      	bne.n	8002572 <TIM_OC5_SetConfig+0x42>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800256a:	4013      	ands	r3, r2
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800256c:	694a      	ldr	r2, [r1, #20]
 800256e:	0212      	lsls	r2, r2, #8
 8002570:	4313      	orrs	r3, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002572:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002574:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 8002576:	6545      	str	r5, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8002578:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800257a:	6204      	str	r4, [r0, #32]
}
 800257c:	bd70      	pop	{r4, r5, r6, pc}
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	fffeffff 	.word	0xfffeffff
 8002584:	fffeff8f 	.word	0xfffeff8f
 8002588:	fffdffff 	.word	0xfffdffff
 800258c:	40012c00 	.word	0x40012c00
 8002590:	40014000 	.word	0x40014000
 8002594:	40014400 	.word	0x40014400
 8002598:	40014800 	.word	0x40014800

0800259c <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800259c:	6a03      	ldr	r3, [r0, #32]
 800259e:	4a14      	ldr	r2, [pc, #80]	; (80025f0 <TIM_OC6_SetConfig+0x54>)
{
 80025a0:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80025a2:	4013      	ands	r3, r2
 80025a4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025a6:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80025a8:	4c12      	ldr	r4, [pc, #72]	; (80025f4 <TIM_OC6_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 80025aa:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 80025ac:	6d45      	ldr	r5, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80025ae:	4025      	ands	r5, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025b0:	680c      	ldr	r4, [r1, #0]
 80025b2:	0224      	lsls	r4, r4, #8
 80025b4:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80025b6:	4c10      	ldr	r4, [pc, #64]	; (80025f8 <TIM_OC6_SetConfig+0x5c>)
 80025b8:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80025ba:	688c      	ldr	r4, [r1, #8]
 80025bc:	0524      	lsls	r4, r4, #20
 80025be:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025c0:	4c0e      	ldr	r4, [pc, #56]	; (80025fc <TIM_OC6_SetConfig+0x60>)
 80025c2:	42a0      	cmp	r0, r4
 80025c4:	d008      	beq.n	80025d8 <TIM_OC6_SetConfig+0x3c>
 80025c6:	4c0e      	ldr	r4, [pc, #56]	; (8002600 <TIM_OC6_SetConfig+0x64>)
 80025c8:	42a0      	cmp	r0, r4
 80025ca:	d005      	beq.n	80025d8 <TIM_OC6_SetConfig+0x3c>
 80025cc:	4c0d      	ldr	r4, [pc, #52]	; (8002604 <TIM_OC6_SetConfig+0x68>)
 80025ce:	42a0      	cmp	r0, r4
 80025d0:	d002      	beq.n	80025d8 <TIM_OC6_SetConfig+0x3c>
 80025d2:	4c0d      	ldr	r4, [pc, #52]	; (8002608 <TIM_OC6_SetConfig+0x6c>)
 80025d4:	42a0      	cmp	r0, r4
 80025d6:	d104      	bne.n	80025e2 <TIM_OC6_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80025d8:	4c0c      	ldr	r4, [pc, #48]	; (800260c <TIM_OC6_SetConfig+0x70>)
 80025da:	4023      	ands	r3, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80025dc:	694c      	ldr	r4, [r1, #20]
 80025de:	02a4      	lsls	r4, r4, #10
 80025e0:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025e2:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80025e4:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 80025e6:	6545      	str	r5, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 80025e8:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025ea:	6202      	str	r2, [r0, #32]
}
 80025ec:	bd30      	pop	{r4, r5, pc}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	ffefffff 	.word	0xffefffff
 80025f4:	feff8fff 	.word	0xfeff8fff
 80025f8:	ffdfffff 	.word	0xffdfffff
 80025fc:	40012c00 	.word	0x40012c00
 8002600:	40014000 	.word	0x40014000
 8002604:	40014400 	.word	0x40014400
 8002608:	40014800 	.word	0x40014800
 800260c:	fffbffff 	.word	0xfffbffff

08002610 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002610:	0003      	movs	r3, r0
    return HAL_ERROR;
 8002612:	2201      	movs	r2, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8002614:	333d      	adds	r3, #61	; 0x3d
 8002616:	7819      	ldrb	r1, [r3, #0]
 8002618:	4291      	cmp	r1, r2
 800261a:	d11d      	bne.n	8002658 <HAL_TIM_Base_Start_IT+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 800261c:	2102      	movs	r1, #2
 800261e:	7019      	strb	r1, [r3, #0]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002620:	6803      	ldr	r3, [r0, #0]
 8002622:	68d9      	ldr	r1, [r3, #12]
 8002624:	4311      	orrs	r1, r2
 8002626:	60d9      	str	r1, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002628:	490e      	ldr	r1, [pc, #56]	; (8002664 <HAL_TIM_Base_Start_IT+0x54>)
 800262a:	428b      	cmp	r3, r1
 800262c:	d005      	beq.n	800263a <HAL_TIM_Base_Start_IT+0x2a>
 800262e:	490e      	ldr	r1, [pc, #56]	; (8002668 <HAL_TIM_Base_Start_IT+0x58>)
 8002630:	428b      	cmp	r3, r1
 8002632:	d002      	beq.n	800263a <HAL_TIM_Base_Start_IT+0x2a>
 8002634:	490d      	ldr	r1, [pc, #52]	; (800266c <HAL_TIM_Base_Start_IT+0x5c>)
 8002636:	428b      	cmp	r3, r1
 8002638:	d110      	bne.n	800265c <HAL_TIM_Base_Start_IT+0x4c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800263a:	4a0d      	ldr	r2, [pc, #52]	; (8002670 <HAL_TIM_Base_Start_IT+0x60>)
 800263c:	6899      	ldr	r1, [r3, #8]
 800263e:	4011      	ands	r1, r2
  return HAL_OK;
 8002640:	2200      	movs	r2, #0
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002642:	2906      	cmp	r1, #6
 8002644:	d008      	beq.n	8002658 <HAL_TIM_Base_Start_IT+0x48>
 8002646:	2080      	movs	r0, #128	; 0x80
 8002648:	0240      	lsls	r0, r0, #9
 800264a:	4281      	cmp	r1, r0
 800264c:	d004      	beq.n	8002658 <HAL_TIM_Base_Start_IT+0x48>
      __HAL_TIM_ENABLE(htim);
 800264e:	6819      	ldr	r1, [r3, #0]
 8002650:	3201      	adds	r2, #1
 8002652:	430a      	orrs	r2, r1
    __HAL_TIM_ENABLE(htim);
 8002654:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002656:	2200      	movs	r2, #0
}
 8002658:	0010      	movs	r0, r2
 800265a:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800265c:	6818      	ldr	r0, [r3, #0]
 800265e:	4302      	orrs	r2, r0
 8002660:	e7f8      	b.n	8002654 <HAL_TIM_Base_Start_IT+0x44>
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	40012c00 	.word	0x40012c00
 8002668:	40000400 	.word	0x40000400
 800266c:	40014000 	.word	0x40014000
 8002670:	00010007 	.word	0x00010007

08002674 <HAL_TIM_PWM_MspInit>:
 8002674:	4770      	bx	lr

08002676 <HAL_TIM_OC_DelayElapsedCallback>:
 8002676:	4770      	bx	lr

08002678 <HAL_TIM_IC_CaptureCallback>:
 8002678:	4770      	bx	lr

0800267a <HAL_TIM_PWM_PulseFinishedCallback>:
 800267a:	4770      	bx	lr

0800267c <HAL_TIM_TriggerCallback>:
 800267c:	4770      	bx	lr
	...

08002680 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002680:	2202      	movs	r2, #2
 8002682:	6803      	ldr	r3, [r0, #0]
{
 8002684:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002686:	6919      	ldr	r1, [r3, #16]
{
 8002688:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800268a:	4211      	tst	r1, r2
 800268c:	d00e      	beq.n	80026ac <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800268e:	68d9      	ldr	r1, [r3, #12]
 8002690:	4211      	tst	r1, r2
 8002692:	d00b      	beq.n	80026ac <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002694:	3a05      	subs	r2, #5
 8002696:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002698:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800269a:	3204      	adds	r2, #4
 800269c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800269e:	079b      	lsls	r3, r3, #30
 80026a0:	d100      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x24>
 80026a2:	e086      	b.n	80027b2 <HAL_TIM_IRQHandler+0x132>
          HAL_TIM_IC_CaptureCallback(htim);
 80026a4:	f7ff ffe8 	bl	8002678 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a8:	2300      	movs	r3, #0
 80026aa:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026ac:	2204      	movs	r2, #4
 80026ae:	6823      	ldr	r3, [r4, #0]
 80026b0:	6919      	ldr	r1, [r3, #16]
 80026b2:	4211      	tst	r1, r2
 80026b4:	d011      	beq.n	80026da <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026b6:	68d9      	ldr	r1, [r3, #12]
 80026b8:	4211      	tst	r1, r2
 80026ba:	d00e      	beq.n	80026da <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026bc:	3a09      	subs	r2, #9
 80026be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026c0:	3207      	adds	r2, #7
 80026c2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026c4:	699a      	ldr	r2, [r3, #24]
 80026c6:	23c0      	movs	r3, #192	; 0xc0
 80026c8:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80026ca:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026cc:	421a      	tst	r2, r3
 80026ce:	d100      	bne.n	80026d2 <HAL_TIM_IRQHandler+0x52>
 80026d0:	e075      	b.n	80027be <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_IC_CaptureCallback(htim);
 80026d2:	f7ff ffd1 	bl	8002678 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026d6:	2300      	movs	r3, #0
 80026d8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026da:	2208      	movs	r2, #8
 80026dc:	6823      	ldr	r3, [r4, #0]
 80026de:	6919      	ldr	r1, [r3, #16]
 80026e0:	4211      	tst	r1, r2
 80026e2:	d00e      	beq.n	8002702 <HAL_TIM_IRQHandler+0x82>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026e4:	68d9      	ldr	r1, [r3, #12]
 80026e6:	4211      	tst	r1, r2
 80026e8:	d00b      	beq.n	8002702 <HAL_TIM_IRQHandler+0x82>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026ea:	3a11      	subs	r2, #17
 80026ec:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026ee:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026f0:	320d      	adds	r2, #13
 80026f2:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80026f4:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026f6:	079b      	lsls	r3, r3, #30
 80026f8:	d067      	beq.n	80027ca <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 80026fa:	f7ff ffbd 	bl	8002678 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fe:	2300      	movs	r3, #0
 8002700:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002702:	2210      	movs	r2, #16
 8002704:	6823      	ldr	r3, [r4, #0]
 8002706:	6919      	ldr	r1, [r3, #16]
 8002708:	4211      	tst	r1, r2
 800270a:	d010      	beq.n	800272e <HAL_TIM_IRQHandler+0xae>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800270c:	68d9      	ldr	r1, [r3, #12]
 800270e:	4211      	tst	r1, r2
 8002710:	d00d      	beq.n	800272e <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002712:	3a21      	subs	r2, #33	; 0x21
 8002714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002716:	3219      	adds	r2, #25
 8002718:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800271a:	69da      	ldr	r2, [r3, #28]
 800271c:	23c0      	movs	r3, #192	; 0xc0
 800271e:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002720:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002722:	421a      	tst	r2, r3
 8002724:	d057      	beq.n	80027d6 <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_IC_CaptureCallback(htim);
 8002726:	f7ff ffa7 	bl	8002678 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800272a:	2300      	movs	r3, #0
 800272c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800272e:	2201      	movs	r2, #1
 8002730:	6823      	ldr	r3, [r4, #0]
 8002732:	6919      	ldr	r1, [r3, #16]
 8002734:	4211      	tst	r1, r2
 8002736:	d007      	beq.n	8002748 <HAL_TIM_IRQHandler+0xc8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002738:	68d9      	ldr	r1, [r3, #12]
 800273a:	4211      	tst	r1, r2
 800273c:	d004      	beq.n	8002748 <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800273e:	3a03      	subs	r2, #3
 8002740:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002742:	0020      	movs	r0, r4
 8002744:	f7fe f82a 	bl	800079c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002748:	2280      	movs	r2, #128	; 0x80
 800274a:	6823      	ldr	r3, [r4, #0]
 800274c:	6919      	ldr	r1, [r3, #16]
 800274e:	4211      	tst	r1, r2
 8002750:	d008      	beq.n	8002764 <HAL_TIM_IRQHandler+0xe4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002752:	68d9      	ldr	r1, [r3, #12]
 8002754:	4211      	tst	r1, r2
 8002756:	d005      	beq.n	8002764 <HAL_TIM_IRQHandler+0xe4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002758:	3a02      	subs	r2, #2
 800275a:	3aff      	subs	r2, #255	; 0xff
 800275c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800275e:	0020      	movs	r0, r4
 8002760:	f000 fb4f 	bl	8002e02 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002764:	6823      	ldr	r3, [r4, #0]
 8002766:	691a      	ldr	r2, [r3, #16]
 8002768:	05d2      	lsls	r2, r2, #23
 800276a:	d507      	bpl.n	800277c <HAL_TIM_IRQHandler+0xfc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	0612      	lsls	r2, r2, #24
 8002770:	d504      	bpl.n	800277c <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002772:	4a1c      	ldr	r2, [pc, #112]	; (80027e4 <HAL_TIM_IRQHandler+0x164>)
      HAL_TIMEx_Break2Callback(htim);
 8002774:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002776:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002778:	f000 fb44 	bl	8002e04 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800277c:	2240      	movs	r2, #64	; 0x40
 800277e:	6823      	ldr	r3, [r4, #0]
 8002780:	6919      	ldr	r1, [r3, #16]
 8002782:	4211      	tst	r1, r2
 8002784:	d007      	beq.n	8002796 <HAL_TIM_IRQHandler+0x116>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002786:	68d9      	ldr	r1, [r3, #12]
 8002788:	4211      	tst	r1, r2
 800278a:	d004      	beq.n	8002796 <HAL_TIM_IRQHandler+0x116>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800278c:	3a81      	subs	r2, #129	; 0x81
 800278e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002790:	0020      	movs	r0, r4
 8002792:	f7ff ff73 	bl	800267c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002796:	2220      	movs	r2, #32
 8002798:	6823      	ldr	r3, [r4, #0]
 800279a:	6919      	ldr	r1, [r3, #16]
 800279c:	4211      	tst	r1, r2
 800279e:	d007      	beq.n	80027b0 <HAL_TIM_IRQHandler+0x130>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027a0:	68d9      	ldr	r1, [r3, #12]
 80027a2:	4211      	tst	r1, r2
 80027a4:	d004      	beq.n	80027b0 <HAL_TIM_IRQHandler+0x130>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027a6:	3a41      	subs	r2, #65	; 0x41
 80027a8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80027aa:	0020      	movs	r0, r4
 80027ac:	f000 fb28 	bl	8002e00 <HAL_TIMEx_CommutCallback>
}
 80027b0:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b2:	f7ff ff60 	bl	8002676 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b6:	0020      	movs	r0, r4
 80027b8:	f7ff ff5f 	bl	800267a <HAL_TIM_PWM_PulseFinishedCallback>
 80027bc:	e774      	b.n	80026a8 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027be:	f7ff ff5a 	bl	8002676 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c2:	0020      	movs	r0, r4
 80027c4:	f7ff ff59 	bl	800267a <HAL_TIM_PWM_PulseFinishedCallback>
 80027c8:	e785      	b.n	80026d6 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ca:	f7ff ff54 	bl	8002676 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ce:	0020      	movs	r0, r4
 80027d0:	f7ff ff53 	bl	800267a <HAL_TIM_PWM_PulseFinishedCallback>
 80027d4:	e793      	b.n	80026fe <HAL_TIM_IRQHandler+0x7e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d6:	f7ff ff4e 	bl	8002676 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027da:	0020      	movs	r0, r4
 80027dc:	f7ff ff4d 	bl	800267a <HAL_TIM_PWM_PulseFinishedCallback>
 80027e0:	e7a3      	b.n	800272a <HAL_TIM_IRQHandler+0xaa>
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	fffffeff 	.word	0xfffffeff

080027e8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027e8:	4a1c      	ldr	r2, [pc, #112]	; (800285c <TIM_Base_SetConfig+0x74>)
{
 80027ea:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 80027ec:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027ee:	4290      	cmp	r0, r2
 80027f0:	d002      	beq.n	80027f8 <TIM_Base_SetConfig+0x10>
 80027f2:	4c1b      	ldr	r4, [pc, #108]	; (8002860 <TIM_Base_SetConfig+0x78>)
 80027f4:	42a0      	cmp	r0, r4
 80027f6:	d108      	bne.n	800280a <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027f8:	2470      	movs	r4, #112	; 0x70
 80027fa:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80027fc:	684c      	ldr	r4, [r1, #4]
 80027fe:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002800:	4290      	cmp	r0, r2
 8002802:	d00e      	beq.n	8002822 <TIM_Base_SetConfig+0x3a>
 8002804:	4c16      	ldr	r4, [pc, #88]	; (8002860 <TIM_Base_SetConfig+0x78>)
 8002806:	42a0      	cmp	r0, r4
 8002808:	d00b      	beq.n	8002822 <TIM_Base_SetConfig+0x3a>
 800280a:	4c16      	ldr	r4, [pc, #88]	; (8002864 <TIM_Base_SetConfig+0x7c>)
 800280c:	42a0      	cmp	r0, r4
 800280e:	d008      	beq.n	8002822 <TIM_Base_SetConfig+0x3a>
 8002810:	4c15      	ldr	r4, [pc, #84]	; (8002868 <TIM_Base_SetConfig+0x80>)
 8002812:	42a0      	cmp	r0, r4
 8002814:	d005      	beq.n	8002822 <TIM_Base_SetConfig+0x3a>
 8002816:	4c15      	ldr	r4, [pc, #84]	; (800286c <TIM_Base_SetConfig+0x84>)
 8002818:	42a0      	cmp	r0, r4
 800281a:	d002      	beq.n	8002822 <TIM_Base_SetConfig+0x3a>
 800281c:	4c14      	ldr	r4, [pc, #80]	; (8002870 <TIM_Base_SetConfig+0x88>)
 800281e:	42a0      	cmp	r0, r4
 8002820:	d103      	bne.n	800282a <TIM_Base_SetConfig+0x42>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002822:	4c14      	ldr	r4, [pc, #80]	; (8002874 <TIM_Base_SetConfig+0x8c>)
 8002824:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002826:	68cc      	ldr	r4, [r1, #12]
 8002828:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800282a:	2480      	movs	r4, #128	; 0x80
 800282c:	43a3      	bics	r3, r4
 800282e:	694c      	ldr	r4, [r1, #20]
 8002830:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8002832:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002834:	688b      	ldr	r3, [r1, #8]
 8002836:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002838:	680b      	ldr	r3, [r1, #0]
 800283a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800283c:	4290      	cmp	r0, r2
 800283e:	d008      	beq.n	8002852 <TIM_Base_SetConfig+0x6a>
 8002840:	4b09      	ldr	r3, [pc, #36]	; (8002868 <TIM_Base_SetConfig+0x80>)
 8002842:	4298      	cmp	r0, r3
 8002844:	d005      	beq.n	8002852 <TIM_Base_SetConfig+0x6a>
 8002846:	4b09      	ldr	r3, [pc, #36]	; (800286c <TIM_Base_SetConfig+0x84>)
 8002848:	4298      	cmp	r0, r3
 800284a:	d002      	beq.n	8002852 <TIM_Base_SetConfig+0x6a>
 800284c:	4b08      	ldr	r3, [pc, #32]	; (8002870 <TIM_Base_SetConfig+0x88>)
 800284e:	4298      	cmp	r0, r3
 8002850:	d101      	bne.n	8002856 <TIM_Base_SetConfig+0x6e>
    TIMx->RCR = Structure->RepetitionCounter;
 8002852:	690b      	ldr	r3, [r1, #16]
 8002854:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002856:	2301      	movs	r3, #1
 8002858:	6143      	str	r3, [r0, #20]
}
 800285a:	bd10      	pop	{r4, pc}
 800285c:	40012c00 	.word	0x40012c00
 8002860:	40000400 	.word	0x40000400
 8002864:	40002000 	.word	0x40002000
 8002868:	40014000 	.word	0x40014000
 800286c:	40014400 	.word	0x40014400
 8002870:	40014800 	.word	0x40014800
 8002874:	fffffcff 	.word	0xfffffcff

08002878 <HAL_TIM_Base_Init>:
{
 8002878:	b570      	push	{r4, r5, r6, lr}
 800287a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800287c:	2001      	movs	r0, #1
  if (htim == NULL)
 800287e:	2c00      	cmp	r4, #0
 8002880:	d023      	beq.n	80028ca <HAL_TIM_Base_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002882:	0025      	movs	r5, r4
 8002884:	353d      	adds	r5, #61	; 0x3d
 8002886:	782b      	ldrb	r3, [r5, #0]
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d105      	bne.n	800289a <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800288e:	0022      	movs	r2, r4
 8002890:	323c      	adds	r2, #60	; 0x3c
 8002892:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8002894:	0020      	movs	r0, r4
 8002896:	f7fe f8b1 	bl	80009fc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800289a:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800289c:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800289e:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028a0:	1d21      	adds	r1, r4, #4
 80028a2:	f7ff ffa1 	bl	80027e8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028a6:	0022      	movs	r2, r4
 80028a8:	2301      	movs	r3, #1
  return HAL_OK;
 80028aa:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028ac:	3248      	adds	r2, #72	; 0x48
 80028ae:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b0:	3447      	adds	r4, #71	; 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b2:	3a0a      	subs	r2, #10
 80028b4:	7013      	strb	r3, [r2, #0]
 80028b6:	7053      	strb	r3, [r2, #1]
 80028b8:	7093      	strb	r3, [r2, #2]
 80028ba:	70d3      	strb	r3, [r2, #3]
 80028bc:	7113      	strb	r3, [r2, #4]
 80028be:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c0:	7193      	strb	r3, [r2, #6]
 80028c2:	71d3      	strb	r3, [r2, #7]
 80028c4:	7213      	strb	r3, [r2, #8]
 80028c6:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80028c8:	702b      	strb	r3, [r5, #0]
}
 80028ca:	bd70      	pop	{r4, r5, r6, pc}

080028cc <HAL_TIM_PWM_Init>:
{
 80028cc:	b570      	push	{r4, r5, r6, lr}
 80028ce:	0004      	movs	r4, r0
    return HAL_ERROR;
 80028d0:	2001      	movs	r0, #1
  if (htim == NULL)
 80028d2:	2c00      	cmp	r4, #0
 80028d4:	d023      	beq.n	800291e <HAL_TIM_PWM_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 80028d6:	0025      	movs	r5, r4
 80028d8:	353d      	adds	r5, #61	; 0x3d
 80028da:	782b      	ldrb	r3, [r5, #0]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d105      	bne.n	80028ee <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80028e2:	0022      	movs	r2, r4
 80028e4:	323c      	adds	r2, #60	; 0x3c
 80028e6:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 80028e8:	0020      	movs	r0, r4
 80028ea:	f7ff fec3 	bl	8002674 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80028ee:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f0:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80028f2:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f4:	1d21      	adds	r1, r4, #4
 80028f6:	f7ff ff77 	bl	80027e8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028fa:	0022      	movs	r2, r4
 80028fc:	2301      	movs	r3, #1
  return HAL_OK;
 80028fe:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002900:	3248      	adds	r2, #72	; 0x48
 8002902:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002904:	3447      	adds	r4, #71	; 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002906:	3a0a      	subs	r2, #10
 8002908:	7013      	strb	r3, [r2, #0]
 800290a:	7053      	strb	r3, [r2, #1]
 800290c:	7093      	strb	r3, [r2, #2]
 800290e:	70d3      	strb	r3, [r2, #3]
 8002910:	7113      	strb	r3, [r2, #4]
 8002912:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002914:	7193      	strb	r3, [r2, #6]
 8002916:	71d3      	strb	r3, [r2, #7]
 8002918:	7213      	strb	r3, [r2, #8]
 800291a:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 800291c:	702b      	strb	r3, [r5, #0]
}
 800291e:	bd70      	pop	{r4, r5, r6, pc}

08002920 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002920:	2210      	movs	r2, #16
 8002922:	6a03      	ldr	r3, [r0, #32]
{
 8002924:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002926:	4393      	bics	r3, r2
 8002928:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800292a:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800292c:	4d16      	ldr	r5, [pc, #88]	; (8002988 <TIM_OC2_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 800292e:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002930:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002932:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002934:	680d      	ldr	r5, [r1, #0]
 8002936:	022d      	lsls	r5, r5, #8
 8002938:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC2P;
 800293a:	2520      	movs	r5, #32
 800293c:	43aa      	bics	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800293e:	688d      	ldr	r5, [r1, #8]
 8002940:	012d      	lsls	r5, r5, #4
 8002942:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002944:	4d11      	ldr	r5, [pc, #68]	; (800298c <TIM_OC2_SetConfig+0x6c>)
 8002946:	42a8      	cmp	r0, r5
 8002948:	d10f      	bne.n	800296a <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 800294a:	2580      	movs	r5, #128	; 0x80
 800294c:	43aa      	bics	r2, r5
 800294e:	0015      	movs	r5, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002950:	68ca      	ldr	r2, [r1, #12]
 8002952:	0112      	lsls	r2, r2, #4
 8002954:	432a      	orrs	r2, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8002956:	2540      	movs	r5, #64	; 0x40
 8002958:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800295a:	4d0d      	ldr	r5, [pc, #52]	; (8002990 <TIM_OC2_SetConfig+0x70>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800295c:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800295e:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002960:	698b      	ldr	r3, [r1, #24]
 8002962:	4333      	orrs	r3, r6
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	432b      	orrs	r3, r5
 8002968:	e008      	b.n	800297c <TIM_OC2_SetConfig+0x5c>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800296a:	4d0a      	ldr	r5, [pc, #40]	; (8002994 <TIM_OC2_SetConfig+0x74>)
 800296c:	42a8      	cmp	r0, r5
 800296e:	d0f4      	beq.n	800295a <TIM_OC2_SetConfig+0x3a>
 8002970:	4d09      	ldr	r5, [pc, #36]	; (8002998 <TIM_OC2_SetConfig+0x78>)
 8002972:	42a8      	cmp	r0, r5
 8002974:	d0f1      	beq.n	800295a <TIM_OC2_SetConfig+0x3a>
 8002976:	4d09      	ldr	r5, [pc, #36]	; (800299c <TIM_OC2_SetConfig+0x7c>)
 8002978:	42a8      	cmp	r0, r5
 800297a:	d0ee      	beq.n	800295a <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 800297c:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800297e:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002980:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002982:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002984:	6202      	str	r2, [r0, #32]
}
 8002986:	bd70      	pop	{r4, r5, r6, pc}
 8002988:	feff8cff 	.word	0xfeff8cff
 800298c:	40012c00 	.word	0x40012c00
 8002990:	fffff3ff 	.word	0xfffff3ff
 8002994:	40014000 	.word	0x40014000
 8002998:	40014400 	.word	0x40014400
 800299c:	40014800 	.word	0x40014800

080029a0 <HAL_TIM_PWM_ConfigChannel>:
{
 80029a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80029a2:	0007      	movs	r7, r0
 80029a4:	373c      	adds	r7, #60	; 0x3c
 80029a6:	783b      	ldrb	r3, [r7, #0]
{
 80029a8:	0004      	movs	r4, r0
 80029aa:	000d      	movs	r5, r1
 80029ac:	0016      	movs	r6, r2
  __HAL_LOCK(htim);
 80029ae:	2002      	movs	r0, #2
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d00a      	beq.n	80029ca <HAL_TIM_PWM_ConfigChannel+0x2a>
 80029b4:	2301      	movs	r3, #1
 80029b6:	703b      	strb	r3, [r7, #0]
  switch (Channel)
 80029b8:	2a08      	cmp	r2, #8
 80029ba:	d040      	beq.n	8002a3e <HAL_TIM_PWM_ConfigChannel+0x9e>
 80029bc:	d806      	bhi.n	80029cc <HAL_TIM_PWM_ConfigChannel+0x2c>
 80029be:	2a00      	cmp	r2, #0
 80029c0:	d01b      	beq.n	80029fa <HAL_TIM_PWM_ConfigChannel+0x5a>
 80029c2:	2a04      	cmp	r2, #4
 80029c4:	d02a      	beq.n	8002a1c <HAL_TIM_PWM_ConfigChannel+0x7c>
  __HAL_UNLOCK(htim);
 80029c6:	2000      	movs	r0, #0
 80029c8:	7038      	strb	r0, [r7, #0]
}
 80029ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 80029cc:	2a10      	cmp	r2, #16
 80029ce:	d046      	beq.n	8002a5e <HAL_TIM_PWM_ConfigChannel+0xbe>
 80029d0:	2a14      	cmp	r2, #20
 80029d2:	d055      	beq.n	8002a80 <HAL_TIM_PWM_ConfigChannel+0xe0>
 80029d4:	2a0c      	cmp	r2, #12
 80029d6:	d1f6      	bne.n	80029c6 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029d8:	6820      	ldr	r0, [r4, #0]
 80029da:	f7ff fd6f 	bl	80024bc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029de:	2280      	movs	r2, #128	; 0x80
 80029e0:	6823      	ldr	r3, [r4, #0]
 80029e2:	0112      	lsls	r2, r2, #4
 80029e4:	69d9      	ldr	r1, [r3, #28]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029ea:	69da      	ldr	r2, [r3, #28]
 80029ec:	492d      	ldr	r1, [pc, #180]	; (8002aa4 <HAL_TIM_PWM_ConfigChannel+0x104>)
 80029ee:	400a      	ands	r2, r1
 80029f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029f2:	692a      	ldr	r2, [r5, #16]
 80029f4:	69d9      	ldr	r1, [r3, #28]
 80029f6:	0212      	lsls	r2, r2, #8
 80029f8:	e02e      	b.n	8002a58 <HAL_TIM_PWM_ConfigChannel+0xb8>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029fa:	6820      	ldr	r0, [r4, #0]
 80029fc:	f7ff fcd2 	bl	80023a4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a00:	2208      	movs	r2, #8
 8002a02:	6823      	ldr	r3, [r4, #0]
 8002a04:	6999      	ldr	r1, [r3, #24]
 8002a06:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a08:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a0c:	699a      	ldr	r2, [r3, #24]
 8002a0e:	438a      	bics	r2, r1
 8002a10:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a12:	699a      	ldr	r2, [r3, #24]
 8002a14:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a16:	430a      	orrs	r2, r1
 8002a18:	619a      	str	r2, [r3, #24]
      break;
 8002a1a:	e7d4      	b.n	80029c6 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a1c:	6820      	ldr	r0, [r4, #0]
 8002a1e:	f7ff ff7f 	bl	8002920 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a22:	2280      	movs	r2, #128	; 0x80
 8002a24:	6823      	ldr	r3, [r4, #0]
 8002a26:	0112      	lsls	r2, r2, #4
 8002a28:	6999      	ldr	r1, [r3, #24]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a2e:	699a      	ldr	r2, [r3, #24]
 8002a30:	491c      	ldr	r1, [pc, #112]	; (8002aa4 <HAL_TIM_PWM_ConfigChannel+0x104>)
 8002a32:	400a      	ands	r2, r1
 8002a34:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a36:	692a      	ldr	r2, [r5, #16]
 8002a38:	6999      	ldr	r1, [r3, #24]
 8002a3a:	0212      	lsls	r2, r2, #8
 8002a3c:	e7eb      	b.n	8002a16 <HAL_TIM_PWM_ConfigChannel+0x76>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a3e:	6820      	ldr	r0, [r4, #0]
 8002a40:	f7ff fcf6 	bl	8002430 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a44:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a46:	6823      	ldr	r3, [r4, #0]
 8002a48:	69da      	ldr	r2, [r3, #28]
 8002a4a:	4316      	orrs	r6, r2
 8002a4c:	61de      	str	r6, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a4e:	69da      	ldr	r2, [r3, #28]
 8002a50:	438a      	bics	r2, r1
 8002a52:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a54:	69da      	ldr	r2, [r3, #28]
 8002a56:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	61da      	str	r2, [r3, #28]
      break;
 8002a5c:	e7b3      	b.n	80029c6 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002a5e:	6820      	ldr	r0, [r4, #0]
 8002a60:	f7ff fd66 	bl	8002530 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002a64:	2208      	movs	r2, #8
 8002a66:	6823      	ldr	r3, [r4, #0]
 8002a68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002a6a:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002a6c:	2104      	movs	r1, #4
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002a6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002a70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a72:	438a      	bics	r2, r1
 8002a74:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002a76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a78:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002a7e:	e7a2      	b.n	80029c6 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002a80:	6820      	ldr	r0, [r4, #0]
 8002a82:	f7ff fd8b 	bl	800259c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002a86:	2280      	movs	r2, #128	; 0x80
 8002a88:	6823      	ldr	r3, [r4, #0]
 8002a8a:	0112      	lsls	r2, r2, #4
 8002a8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002a92:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a94:	4903      	ldr	r1, [pc, #12]	; (8002aa4 <HAL_TIM_PWM_ConfigChannel+0x104>)
 8002a96:	400a      	ands	r2, r1
 8002a98:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002a9a:	692a      	ldr	r2, [r5, #16]
 8002a9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002a9e:	0212      	lsls	r2, r2, #8
 8002aa0:	e7eb      	b.n	8002a7a <HAL_TIM_PWM_ConfigChannel+0xda>
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	fffffbff 	.word	0xfffffbff

08002aa8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002aa8:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002aaa:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aac:	4d03      	ldr	r5, [pc, #12]	; (8002abc <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ab2:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ab8:	6083      	str	r3, [r0, #8]
}
 8002aba:	bd30      	pop	{r4, r5, pc}
 8002abc:	ffff00ff 	.word	0xffff00ff

08002ac0 <HAL_TIM_ConfigClockSource>:
{
 8002ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8002ac2:	0005      	movs	r5, r0
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	353c      	adds	r5, #60	; 0x3c
 8002ac8:	782a      	ldrb	r2, [r5, #0]
{
 8002aca:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8002acc:	0018      	movs	r0, r3
 8002ace:	2a01      	cmp	r2, #1
 8002ad0:	d016      	beq.n	8002b00 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad2:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 8002ad4:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 8002ad6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad8:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 8002ada:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002adc:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002ade:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ae0:	4a3f      	ldr	r2, [pc, #252]	; (8002be0 <HAL_TIM_ConfigClockSource+0x120>)
 8002ae2:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8002ae4:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002ae6:	680b      	ldr	r3, [r1, #0]
 8002ae8:	2b40      	cmp	r3, #64	; 0x40
 8002aea:	d063      	beq.n	8002bb4 <HAL_TIM_ConfigClockSource+0xf4>
 8002aec:	d814      	bhi.n	8002b18 <HAL_TIM_ConfigClockSource+0x58>
 8002aee:	2b10      	cmp	r3, #16
 8002af0:	d00b      	beq.n	8002b0a <HAL_TIM_ConfigClockSource+0x4a>
 8002af2:	d806      	bhi.n	8002b02 <HAL_TIM_ConfigClockSource+0x42>
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8002af8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002afa:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002afc:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8002afe:	7028      	strb	r0, [r5, #0]
}
 8002b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	d001      	beq.n	8002b0a <HAL_TIM_ConfigClockSource+0x4a>
 8002b06:	2b30      	cmp	r3, #48	; 0x30
 8002b08:	d1f6      	bne.n	8002af8 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b0a:	4a36      	ldr	r2, [pc, #216]	; (8002be4 <HAL_TIM_ConfigClockSource+0x124>)
  tmpsmcr = TIMx->SMCR;
 8002b0c:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b0e:	4011      	ands	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b10:	2207      	movs	r2, #7
 8002b12:	4313      	orrs	r3, r2
 8002b14:	430b      	orrs	r3, r1
 8002b16:	e019      	b.n	8002b4c <HAL_TIM_ConfigClockSource+0x8c>
  switch (sClockSourceConfig->ClockSource)
 8002b18:	2b60      	cmp	r3, #96	; 0x60
 8002b1a:	d034      	beq.n	8002b86 <HAL_TIM_ConfigClockSource+0xc6>
 8002b1c:	d818      	bhi.n	8002b50 <HAL_TIM_ConfigClockSource+0x90>
 8002b1e:	2b50      	cmp	r3, #80	; 0x50
 8002b20:	d1ea      	bne.n	8002af8 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b22:	684a      	ldr	r2, [r1, #4]
 8002b24:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8002b26:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b28:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b2a:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b2c:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b2e:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b30:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b32:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b34:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b36:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b38:	240a      	movs	r4, #10
 8002b3a:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8002b3c:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002b3e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002b40:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002b42:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b44:	4a27      	ldr	r2, [pc, #156]	; (8002be4 <HAL_TIM_ConfigClockSource+0x124>)
 8002b46:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b48:	2357      	movs	r3, #87	; 0x57
 8002b4a:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8002b4c:	6083      	str	r3, [r0, #8]
 8002b4e:	e7d3      	b.n	8002af8 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8002b50:	2b70      	cmp	r3, #112	; 0x70
 8002b52:	d00d      	beq.n	8002b70 <HAL_TIM_ConfigClockSource+0xb0>
 8002b54:	2280      	movs	r2, #128	; 0x80
 8002b56:	0192      	lsls	r2, r2, #6
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d1cd      	bne.n	8002af8 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8002b5c:	68cb      	ldr	r3, [r1, #12]
 8002b5e:	684a      	ldr	r2, [r1, #4]
 8002b60:	6889      	ldr	r1, [r1, #8]
 8002b62:	f7ff ffa1 	bl	8002aa8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b66:	2380      	movs	r3, #128	; 0x80
 8002b68:	6822      	ldr	r2, [r4, #0]
 8002b6a:	01db      	lsls	r3, r3, #7
 8002b6c:	6891      	ldr	r1, [r2, #8]
 8002b6e:	e007      	b.n	8002b80 <HAL_TIM_ConfigClockSource+0xc0>
      TIM_ETR_SetConfig(htim->Instance,
 8002b70:	68cb      	ldr	r3, [r1, #12]
 8002b72:	684a      	ldr	r2, [r1, #4]
 8002b74:	6889      	ldr	r1, [r1, #8]
 8002b76:	f7ff ff97 	bl	8002aa8 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b7a:	2377      	movs	r3, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8002b7c:	6822      	ldr	r2, [r4, #0]
 8002b7e:	6891      	ldr	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b80:	430b      	orrs	r3, r1
 8002b82:	6093      	str	r3, [r2, #8]
      break;
 8002b84:	e7b8      	b.n	8002af8 <HAL_TIM_ConfigClockSource+0x38>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b86:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b88:	684b      	ldr	r3, [r1, #4]
 8002b8a:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b8c:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b8e:	4f16      	ldr	r7, [pc, #88]	; (8002be8 <HAL_TIM_ConfigClockSource+0x128>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b90:	43a1      	bics	r1, r4
 8002b92:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b94:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b96:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b98:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b9a:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b9c:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8002b9e:	6a01      	ldr	r1, [r0, #32]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ba0:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ba2:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ba4:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 8002ba6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002ba8:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002baa:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bac:	4a0d      	ldr	r2, [pc, #52]	; (8002be4 <HAL_TIM_ConfigClockSource+0x124>)
 8002bae:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bb0:	2367      	movs	r3, #103	; 0x67
 8002bb2:	e7ca      	b.n	8002b4a <HAL_TIM_ConfigClockSource+0x8a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bb4:	684a      	ldr	r2, [r1, #4]
 8002bb6:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8002bb8:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bba:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bbc:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bbe:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bc0:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bc2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bc4:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bc6:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bc8:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bca:	240a      	movs	r4, #10
 8002bcc:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8002bce:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002bd0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002bd2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002bd4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bd6:	4a03      	ldr	r2, [pc, #12]	; (8002be4 <HAL_TIM_ConfigClockSource+0x124>)
 8002bd8:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bda:	2347      	movs	r3, #71	; 0x47
 8002bdc:	e7b5      	b.n	8002b4a <HAL_TIM_ConfigClockSource+0x8a>
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	ffce0088 	.word	0xffce0088
 8002be4:	ffcfff8f 	.word	0xffcfff8f
 8002be8:	ffff0fff 	.word	0xffff0fff

08002bec <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002bec:	231f      	movs	r3, #31
{
 8002bee:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002bf0:	2401      	movs	r4, #1
 8002bf2:	4019      	ands	r1, r3
 8002bf4:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002bf6:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8002bf8:	6a03      	ldr	r3, [r0, #32]
 8002bfa:	43a3      	bics	r3, r4
 8002bfc:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002bfe:	6a03      	ldr	r3, [r0, #32]
 8002c00:	431a      	orrs	r2, r3
 8002c02:	6202      	str	r2, [r0, #32]
}
 8002c04:	bd10      	pop	{r4, pc}
	...

08002c08 <HAL_TIM_OC_Start>:
{
 8002c08:	b510      	push	{r4, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c0a:	0003      	movs	r3, r0
{
 8002c0c:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c0e:	2900      	cmp	r1, #0
 8002c10:	d105      	bne.n	8002c1e <HAL_TIM_OC_Start+0x16>
 8002c12:	333e      	adds	r3, #62	; 0x3e
    return HAL_ERROR;
 8002c14:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c16:	781a      	ldrb	r2, [r3, #0]
 8002c18:	4282      	cmp	r2, r0
 8002c1a:	d012      	beq.n	8002c42 <HAL_TIM_OC_Start+0x3a>
}
 8002c1c:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c1e:	2904      	cmp	r1, #4
 8002c20:	d101      	bne.n	8002c26 <HAL_TIM_OC_Start+0x1e>
 8002c22:	333f      	adds	r3, #63	; 0x3f
 8002c24:	e7f6      	b.n	8002c14 <HAL_TIM_OC_Start+0xc>
 8002c26:	2908      	cmp	r1, #8
 8002c28:	d101      	bne.n	8002c2e <HAL_TIM_OC_Start+0x26>
 8002c2a:	3340      	adds	r3, #64	; 0x40
 8002c2c:	e7f2      	b.n	8002c14 <HAL_TIM_OC_Start+0xc>
 8002c2e:	290c      	cmp	r1, #12
 8002c30:	d101      	bne.n	8002c36 <HAL_TIM_OC_Start+0x2e>
 8002c32:	3341      	adds	r3, #65	; 0x41
 8002c34:	e7ee      	b.n	8002c14 <HAL_TIM_OC_Start+0xc>
 8002c36:	2910      	cmp	r1, #16
 8002c38:	d101      	bne.n	8002c3e <HAL_TIM_OC_Start+0x36>
 8002c3a:	3342      	adds	r3, #66	; 0x42
 8002c3c:	e7ea      	b.n	8002c14 <HAL_TIM_OC_Start+0xc>
 8002c3e:	3343      	adds	r3, #67	; 0x43
 8002c40:	e7e8      	b.n	8002c14 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c42:	2202      	movs	r2, #2
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c44:	6820      	ldr	r0, [r4, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c46:	701a      	strb	r2, [r3, #0]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f7ff ffcf 	bl	8002bec <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c4e:	6823      	ldr	r3, [r4, #0]
 8002c50:	4918      	ldr	r1, [pc, #96]	; (8002cb4 <HAL_TIM_OC_Start+0xac>)
 8002c52:	428b      	cmp	r3, r1
 8002c54:	d008      	beq.n	8002c68 <HAL_TIM_OC_Start+0x60>
 8002c56:	4a18      	ldr	r2, [pc, #96]	; (8002cb8 <HAL_TIM_OC_Start+0xb0>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d005      	beq.n	8002c68 <HAL_TIM_OC_Start+0x60>
 8002c5c:	4a17      	ldr	r2, [pc, #92]	; (8002cbc <HAL_TIM_OC_Start+0xb4>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d002      	beq.n	8002c68 <HAL_TIM_OC_Start+0x60>
 8002c62:	4a17      	ldr	r2, [pc, #92]	; (8002cc0 <HAL_TIM_OC_Start+0xb8>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d122      	bne.n	8002cae <HAL_TIM_OC_Start+0xa6>
    __HAL_TIM_MOE_ENABLE(htim);
 8002c68:	2280      	movs	r2, #128	; 0x80
 8002c6a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8002c6c:	0212      	lsls	r2, r2, #8
 8002c6e:	4302      	orrs	r2, r0
 8002c70:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c72:	428b      	cmp	r3, r1
 8002c74:	d106      	bne.n	8002c84 <HAL_TIM_OC_Start+0x7c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	4912      	ldr	r1, [pc, #72]	; (8002cc4 <HAL_TIM_OC_Start+0xbc>)
 8002c7a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c7c:	2a06      	cmp	r2, #6
 8002c7e:	d10c      	bne.n	8002c9a <HAL_TIM_OC_Start+0x92>
  return HAL_OK;
 8002c80:	2000      	movs	r0, #0
 8002c82:	e7cb      	b.n	8002c1c <HAL_TIM_OC_Start+0x14>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c84:	4a10      	ldr	r2, [pc, #64]	; (8002cc8 <HAL_TIM_OC_Start+0xc0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d0f5      	beq.n	8002c76 <HAL_TIM_OC_Start+0x6e>
 8002c8a:	4a0b      	ldr	r2, [pc, #44]	; (8002cb8 <HAL_TIM_OC_Start+0xb0>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d0f2      	beq.n	8002c76 <HAL_TIM_OC_Start+0x6e>
    __HAL_TIM_ENABLE(htim);
 8002c90:	2201      	movs	r2, #1
 8002c92:	6819      	ldr	r1, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	e7f2      	b.n	8002c80 <HAL_TIM_OC_Start+0x78>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c9a:	2180      	movs	r1, #128	; 0x80
  return HAL_OK;
 8002c9c:	2000      	movs	r0, #0
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c9e:	0249      	lsls	r1, r1, #9
 8002ca0:	428a      	cmp	r2, r1
 8002ca2:	d0bb      	beq.n	8002c1c <HAL_TIM_OC_Start+0x14>
      __HAL_TIM_ENABLE(htim);
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	6819      	ldr	r1, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	e7b6      	b.n	8002c1c <HAL_TIM_OC_Start+0x14>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cae:	4a06      	ldr	r2, [pc, #24]	; (8002cc8 <HAL_TIM_OC_Start+0xc0>)
 8002cb0:	e7ec      	b.n	8002c8c <HAL_TIM_OC_Start+0x84>
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	40012c00 	.word	0x40012c00
 8002cb8:	40014000 	.word	0x40014000
 8002cbc:	40014400 	.word	0x40014400
 8002cc0:	40014800 	.word	0x40014800
 8002cc4:	00010007 	.word	0x00010007
 8002cc8:	40000400 	.word	0x40000400

08002ccc <HAL_TIM_PWM_Start>:
 8002ccc:	b510      	push	{r4, lr}
 8002cce:	f7ff ff9b 	bl	8002c08 <HAL_TIM_OC_Start>
 8002cd2:	bd10      	pop	{r4, pc}

08002cd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cd6:	0004      	movs	r4, r0
 8002cd8:	2202      	movs	r2, #2
 8002cda:	343c      	adds	r4, #60	; 0x3c
 8002cdc:	7825      	ldrb	r5, [r4, #0]
{
 8002cde:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8002ce0:	0010      	movs	r0, r2
 8002ce2:	2d01      	cmp	r5, #1
 8002ce4:	d024      	beq.n	8002d30 <HAL_TIMEx_MasterConfigSynchronization+0x5c>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce6:	001d      	movs	r5, r3
  __HAL_LOCK(htim);
 8002ce8:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002cea:	353d      	adds	r5, #61	; 0x3d
  __HAL_LOCK(htim);
 8002cec:	7020      	strb	r0, [r4, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002cee:	4e11      	ldr	r6, [pc, #68]	; (8002d34 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf0:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002cf6:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002cf8:	42b2      	cmp	r2, r6
 8002cfa:	d103      	bne.n	8002d04 <HAL_TIMEx_MasterConfigSynchronization+0x30>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002cfc:	4f0e      	ldr	r7, [pc, #56]	; (8002d38 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8002cfe:	403b      	ands	r3, r7
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002d00:	684f      	ldr	r7, [r1, #4]
 8002d02:	433b      	orrs	r3, r7
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d04:	2770      	movs	r7, #112	; 0x70
 8002d06:	43bb      	bics	r3, r7
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d08:	680f      	ldr	r7, [r1, #0]
 8002d0a:	433b      	orrs	r3, r7

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d0c:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d0e:	42b2      	cmp	r2, r6
 8002d10:	d005      	beq.n	8002d1e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8002d12:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d002      	beq.n	8002d1e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8002d18:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d104      	bne.n	8002d28 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d1e:	2380      	movs	r3, #128	; 0x80
 8002d20:	4398      	bics	r0, r3
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d22:	688b      	ldr	r3, [r1, #8]
 8002d24:	4318      	orrs	r0, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d26:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d28:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8002d2a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002d2c:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8002d2e:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8002d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	40012c00 	.word	0x40012c00
 8002d38:	ff0fffff 	.word	0xff0fffff
 8002d3c:	40000400 	.word	0x40000400
 8002d40:	40014000 	.word	0x40014000

08002d44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002d44:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d46:	0004      	movs	r4, r0
 8002d48:	343c      	adds	r4, #60	; 0x3c
 8002d4a:	7823      	ldrb	r3, [r4, #0]
{
 8002d4c:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8002d4e:	2002      	movs	r0, #2
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d039      	beq.n	8002dc8 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002d54:	68c8      	ldr	r0, [r1, #12]
 8002d56:	4b1d      	ldr	r3, [pc, #116]	; (8002dcc <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002d58:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002d5a:	4003      	ands	r3, r0
 8002d5c:	6888      	ldr	r0, [r1, #8]
 8002d5e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002d60:	481b      	ldr	r0, [pc, #108]	; (8002dd0 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8002d62:	4003      	ands	r3, r0
 8002d64:	6848      	ldr	r0, [r1, #4]
 8002d66:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002d68:	481a      	ldr	r0, [pc, #104]	; (8002dd4 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 8002d6a:	4003      	ands	r3, r0
 8002d6c:	6808      	ldr	r0, [r1, #0]
 8002d6e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002d70:	4819      	ldr	r0, [pc, #100]	; (8002dd8 <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8002d72:	4003      	ands	r3, r0
 8002d74:	6908      	ldr	r0, [r1, #16]
 8002d76:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002d78:	4818      	ldr	r0, [pc, #96]	; (8002ddc <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8002d7a:	4003      	ands	r3, r0
 8002d7c:	6948      	ldr	r0, [r1, #20]
 8002d7e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d80:	4817      	ldr	r0, [pc, #92]	; (8002de0 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8002d82:	4003      	ands	r3, r0
 8002d84:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8002d86:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002d88:	4816      	ldr	r0, [pc, #88]	; (8002de4 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8002d8a:	4003      	ands	r3, r0
 8002d8c:	6988      	ldr	r0, [r1, #24]
 8002d8e:	0400      	lsls	r0, r0, #16
 8002d90:	4303      	orrs	r3, r0
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002d92:	4815      	ldr	r0, [pc, #84]	; (8002de8 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002d94:	4282      	cmp	r2, r0
 8002d96:	d114      	bne.n	8002dc2 <HAL_TIMEx_ConfigBreakDeadTime+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002d98:	4814      	ldr	r0, [pc, #80]	; (8002dec <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002d9a:	4003      	ands	r3, r0
 8002d9c:	69c8      	ldr	r0, [r1, #28]
 8002d9e:	4303      	orrs	r3, r0
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002da0:	4813      	ldr	r0, [pc, #76]	; (8002df0 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002da2:	4018      	ands	r0, r3
 8002da4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002da6:	051b      	lsls	r3, r3, #20
 8002da8:	4303      	orrs	r3, r0
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002daa:	4812      	ldr	r0, [pc, #72]	; (8002df4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002dac:	4003      	ands	r3, r0
 8002dae:	6a08      	ldr	r0, [r1, #32]
 8002db0:	4303      	orrs	r3, r0
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002db2:	4811      	ldr	r0, [pc, #68]	; (8002df8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002db4:	4003      	ands	r3, r0
 8002db6:	6a48      	ldr	r0, [r1, #36]	; 0x24
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002db8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002dba:	4303      	orrs	r3, r0
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002dbc:	480f      	ldr	r0, [pc, #60]	; (8002dfc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002dbe:	4003      	ands	r3, r0
 8002dc0:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8002dc2:	2000      	movs	r0, #0
  htim->Instance->BDTR = tmpbdtr;
 8002dc4:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8002dc6:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8002dc8:	bd10      	pop	{r4, pc}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	fffffcff 	.word	0xfffffcff
 8002dd0:	fffffbff 	.word	0xfffffbff
 8002dd4:	fffff7ff 	.word	0xfffff7ff
 8002dd8:	ffffefff 	.word	0xffffefff
 8002ddc:	ffffdfff 	.word	0xffffdfff
 8002de0:	ffffbfff 	.word	0xffffbfff
 8002de4:	fff0ffff 	.word	0xfff0ffff
 8002de8:	40012c00 	.word	0x40012c00
 8002dec:	efffffff 	.word	0xefffffff
 8002df0:	ff0fffff 	.word	0xff0fffff
 8002df4:	feffffff 	.word	0xfeffffff
 8002df8:	fdffffff 	.word	0xfdffffff
 8002dfc:	dfffffff 	.word	0xdfffffff

08002e00 <HAL_TIMEx_CommutCallback>:
 8002e00:	4770      	bx	lr

08002e02 <HAL_TIMEx_BreakCallback>:
 8002e02:	4770      	bx	lr

08002e04 <HAL_TIMEx_Break2Callback>:
 8002e04:	4770      	bx	lr
	...

08002e08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e08:	b570      	push	{r4, r5, r6, lr}
 8002e0a:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e0c:	6903      	ldr	r3, [r0, #16]
 8002e0e:	6882      	ldr	r2, [r0, #8]
 8002e10:	69c1      	ldr	r1, [r0, #28]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	6943      	ldr	r3, [r0, #20]
  tmpreg |= (uint32_t)huart->FifoMode;
 8002e16:	6e65      	ldr	r5, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e18:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e1a:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e1c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e1e:	6818      	ldr	r0, [r3, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 8002e20:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e22:	4d4d      	ldr	r5, [pc, #308]	; (8002f58 <UART_SetConfig+0x150>)
 8002e24:	4028      	ands	r0, r5
 8002e26:	4302      	orrs	r2, r0
 8002e28:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	484b      	ldr	r0, [pc, #300]	; (8002f5c <UART_SetConfig+0x154>)
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e2e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e30:	4002      	ands	r2, r0
 8002e32:	68e0      	ldr	r0, [r4, #12]
 8002e34:	4302      	orrs	r2, r0
 8002e36:	605a      	str	r2, [r3, #4]
    tmpreg |= huart->Init.OneBitSampling;
 8002e38:	69a2      	ldr	r2, [r4, #24]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e3a:	6898      	ldr	r0, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8002e3c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e3e:	4d48      	ldr	r5, [pc, #288]	; (8002f60 <UART_SetConfig+0x158>)
 8002e40:	4028      	ands	r0, r5
 8002e42:	4302      	orrs	r2, r0

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e44:	200f      	movs	r0, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e46:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e4a:	4382      	bics	r2, r0
 8002e4c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002e4e:	4302      	orrs	r2, r0
 8002e50:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e52:	4a44      	ldr	r2, [pc, #272]	; (8002f64 <UART_SetConfig+0x15c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d112      	bne.n	8002e7e <UART_SetConfig+0x76>
 8002e58:	2203      	movs	r2, #3
 8002e5a:	4b43      	ldr	r3, [pc, #268]	; (8002f68 <UART_SetConfig+0x160>)
 8002e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5e:	4013      	ands	r3, r2
 8002e60:	4a42      	ldr	r2, [pc, #264]	; (8002f6c <UART_SetConfig+0x164>)
 8002e62:	5cd0      	ldrb	r0, [r2, r3]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e64:	2380      	movs	r3, #128	; 0x80
 8002e66:	021b      	lsls	r3, r3, #8
 8002e68:	4299      	cmp	r1, r3
 8002e6a:	d13c      	bne.n	8002ee6 <UART_SetConfig+0xde>
  {
    switch (clocksource)
 8002e6c:	2808      	cmp	r0, #8
 8002e6e:	d815      	bhi.n	8002e9c <UART_SetConfig+0x94>
 8002e70:	f7fd f962 	bl	8000138 <__gnu_thumb1_case_uqi>
 8002e74:	14191467 	.word	0x14191467
 8002e78:	14141416 	.word	0x14141416
 8002e7c:	36          	.byte	0x36
 8002e7d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e7e:	4a3c      	ldr	r2, [pc, #240]	; (8002f70 <UART_SetConfig+0x168>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d105      	bne.n	8002e90 <UART_SetConfig+0x88>
 8002e84:	220c      	movs	r2, #12
 8002e86:	4b38      	ldr	r3, [pc, #224]	; (8002f68 <UART_SetConfig+0x160>)
 8002e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	4a39      	ldr	r2, [pc, #228]	; (8002f74 <UART_SetConfig+0x16c>)
 8002e8e:	e7e8      	b.n	8002e62 <UART_SetConfig+0x5a>
 8002e90:	4a39      	ldr	r2, [pc, #228]	; (8002f78 <UART_SetConfig+0x170>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d051      	beq.n	8002f3a <UART_SetConfig+0x132>
 8002e96:	4a39      	ldr	r2, [pc, #228]	; (8002f7c <UART_SetConfig+0x174>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d04e      	beq.n	8002f3a <UART_SetConfig+0x132>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 8002e9c:	2001      	movs	r0, #1
 8002e9e:	e055      	b.n	8002f4c <UART_SetConfig+0x144>
        pclk = HAL_RCC_GetSysClockFreq();
 8002ea0:	f7fe fd48 	bl	8001934 <HAL_RCC_GetSysClockFreq>
        break;
 8002ea4:	e04f      	b.n	8002f46 <UART_SetConfig+0x13e>
        pclk = (uint32_t) HSI_VALUE;
 8002ea6:	4836      	ldr	r0, [pc, #216]	; (8002f80 <UART_SetConfig+0x178>)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002eaa:	4a36      	ldr	r2, [pc, #216]	; (8002f84 <UART_SetConfig+0x17c>)
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	5a99      	ldrh	r1, [r3, r2]
 8002eb0:	f7fd f960 	bl	8000174 <__udivsi3>
 8002eb4:	6865      	ldr	r5, [r4, #4]
 8002eb6:	0040      	lsls	r0, r0, #1
 8002eb8:	086b      	lsrs	r3, r5, #1
 8002eba:	18c0      	adds	r0, r0, r3
 8002ebc:	0029      	movs	r1, r5
 8002ebe:	f7fd f959 	bl	8000174 <__udivsi3>
 8002ec2:	0403      	lsls	r3, r0, #16
 8002ec4:	0c1a      	lsrs	r2, r3, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ec6:	4930      	ldr	r1, [pc, #192]	; (8002f88 <UART_SetConfig+0x180>)
 8002ec8:	3a10      	subs	r2, #16
 8002eca:	428a      	cmp	r2, r1
 8002ecc:	d8e6      	bhi.n	8002e9c <UART_SetConfig+0x94>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ece:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ed0:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ed2:	4390      	bics	r0, r2
 8002ed4:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8002ed6:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ed8:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8002eda:	4318      	orrs	r0, r3
 8002edc:	60d0      	str	r0, [r2, #12]
 8002ede:	e034      	b.n	8002f4a <UART_SetConfig+0x142>
        pclk = (uint32_t) LSE_VALUE;
 8002ee0:	2080      	movs	r0, #128	; 0x80
 8002ee2:	0200      	lsls	r0, r0, #8
 8002ee4:	e7e0      	b.n	8002ea8 <UART_SetConfig+0xa0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ee6:	2808      	cmp	r0, #8
 8002ee8:	d8d8      	bhi.n	8002e9c <UART_SetConfig+0x94>
 8002eea:	f7fd f91b 	bl	8000124 <__gnu_thumb1_case_sqi>
 8002eee:	d71c      	.short	0xd71c
 8002ef0:	d721d724 	.word	0xd721d724
 8002ef4:	d7d7      	.short	0xd7d7
 8002ef6:	05          	.byte	0x05
 8002ef7:	00          	.byte	0x00
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        break;
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ef8:	2080      	movs	r0, #128	; 0x80
 8002efa:	0200      	lsls	r0, r0, #8
    }

    if (pclk != 0U)
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002efc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002efe:	4a21      	ldr	r2, [pc, #132]	; (8002f84 <UART_SetConfig+0x17c>)
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	5a99      	ldrh	r1, [r3, r2]
 8002f04:	f7fd f936 	bl	8000174 <__udivsi3>
 8002f08:	6865      	ldr	r5, [r4, #4]
 8002f0a:	086b      	lsrs	r3, r5, #1
 8002f0c:	18c0      	adds	r0, r0, r3
 8002f0e:	0029      	movs	r1, r5
 8002f10:	f7fd f930 	bl	8000174 <__udivsi3>
 8002f14:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f16:	0002      	movs	r2, r0
 8002f18:	4b1b      	ldr	r3, [pc, #108]	; (8002f88 <UART_SetConfig+0x180>)
 8002f1a:	3a10      	subs	r2, #16
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d8bd      	bhi.n	8002e9c <UART_SetConfig+0x94>
      {
        huart->Instance->BRR = usartdiv;
 8002f20:	6823      	ldr	r3, [r4, #0]
 8002f22:	60d8      	str	r0, [r3, #12]
 8002f24:	e011      	b.n	8002f4a <UART_SetConfig+0x142>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f26:	f7fe fdf9 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002f2a:	2800      	cmp	r0, #0
 8002f2c:	d1e6      	bne.n	8002efc <UART_SetConfig+0xf4>
 8002f2e:	e00c      	b.n	8002f4a <UART_SetConfig+0x142>
        pclk = HAL_RCC_GetSysClockFreq();
 8002f30:	f7fe fd00 	bl	8001934 <HAL_RCC_GetSysClockFreq>
        break;
 8002f34:	e7f9      	b.n	8002f2a <UART_SetConfig+0x122>
        pclk = (uint32_t) HSI_VALUE;
 8002f36:	4812      	ldr	r0, [pc, #72]	; (8002f80 <UART_SetConfig+0x178>)
 8002f38:	e7e0      	b.n	8002efc <UART_SetConfig+0xf4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f3a:	2380      	movs	r3, #128	; 0x80
 8002f3c:	021b      	lsls	r3, r3, #8
 8002f3e:	4299      	cmp	r1, r3
 8002f40:	d1f1      	bne.n	8002f26 <UART_SetConfig+0x11e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f42:	f7fe fdeb 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002f46:	2800      	cmp	r0, #0
 8002f48:	d1ae      	bne.n	8002ea8 <UART_SetConfig+0xa0>
 8002f4a:	2000      	movs	r0, #0
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
 8002f4c:	4b0f      	ldr	r3, [pc, #60]	; (8002f8c <UART_SetConfig+0x184>)
 8002f4e:	66a3      	str	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8002f54:	6763      	str	r3, [r4, #116]	; 0x74

  return ret;
}
 8002f56:	bd70      	pop	{r4, r5, r6, pc}
 8002f58:	cfff69f3 	.word	0xcfff69f3
 8002f5c:	ffffcfff 	.word	0xffffcfff
 8002f60:	11fff4ff 	.word	0x11fff4ff
 8002f64:	40013800 	.word	0x40013800
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	0800f2f8 	.word	0x0800f2f8
 8002f70:	40004400 	.word	0x40004400
 8002f74:	0800f2fc 	.word	0x0800f2fc
 8002f78:	40004800 	.word	0x40004800
 8002f7c:	40004c00 	.word	0x40004c00
 8002f80:	00f42400 	.word	0x00f42400
 8002f84:	0800f30a 	.word	0x0800f30a
 8002f88:	0000ffef 	.word	0x0000ffef
 8002f8c:	00010001 	.word	0x00010001

08002f90 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f90:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8002f92:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f94:	07da      	lsls	r2, r3, #31
 8002f96:	d506      	bpl.n	8002fa6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f98:	6801      	ldr	r1, [r0, #0]
 8002f9a:	4c28      	ldr	r4, [pc, #160]	; (800303c <UART_AdvFeatureConfig+0xac>)
 8002f9c:	684a      	ldr	r2, [r1, #4]
 8002f9e:	4022      	ands	r2, r4
 8002fa0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002fa2:	4322      	orrs	r2, r4
 8002fa4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fa6:	079a      	lsls	r2, r3, #30
 8002fa8:	d506      	bpl.n	8002fb8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002faa:	6801      	ldr	r1, [r0, #0]
 8002fac:	4c24      	ldr	r4, [pc, #144]	; (8003040 <UART_AdvFeatureConfig+0xb0>)
 8002fae:	684a      	ldr	r2, [r1, #4]
 8002fb0:	4022      	ands	r2, r4
 8002fb2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002fb4:	4322      	orrs	r2, r4
 8002fb6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fb8:	075a      	lsls	r2, r3, #29
 8002fba:	d506      	bpl.n	8002fca <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fbc:	6801      	ldr	r1, [r0, #0]
 8002fbe:	4c21      	ldr	r4, [pc, #132]	; (8003044 <UART_AdvFeatureConfig+0xb4>)
 8002fc0:	684a      	ldr	r2, [r1, #4]
 8002fc2:	4022      	ands	r2, r4
 8002fc4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002fc6:	4322      	orrs	r2, r4
 8002fc8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fca:	071a      	lsls	r2, r3, #28
 8002fcc:	d506      	bpl.n	8002fdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fce:	6801      	ldr	r1, [r0, #0]
 8002fd0:	4c1d      	ldr	r4, [pc, #116]	; (8003048 <UART_AdvFeatureConfig+0xb8>)
 8002fd2:	684a      	ldr	r2, [r1, #4]
 8002fd4:	4022      	ands	r2, r4
 8002fd6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002fd8:	4322      	orrs	r2, r4
 8002fda:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fdc:	06da      	lsls	r2, r3, #27
 8002fde:	d506      	bpl.n	8002fee <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fe0:	6801      	ldr	r1, [r0, #0]
 8002fe2:	4c1a      	ldr	r4, [pc, #104]	; (800304c <UART_AdvFeatureConfig+0xbc>)
 8002fe4:	688a      	ldr	r2, [r1, #8]
 8002fe6:	4022      	ands	r2, r4
 8002fe8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002fea:	4322      	orrs	r2, r4
 8002fec:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002fee:	069a      	lsls	r2, r3, #26
 8002ff0:	d506      	bpl.n	8003000 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ff2:	6801      	ldr	r1, [r0, #0]
 8002ff4:	4c16      	ldr	r4, [pc, #88]	; (8003050 <UART_AdvFeatureConfig+0xc0>)
 8002ff6:	688a      	ldr	r2, [r1, #8]
 8002ff8:	4022      	ands	r2, r4
 8002ffa:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002ffc:	4322      	orrs	r2, r4
 8002ffe:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003000:	065a      	lsls	r2, r3, #25
 8003002:	d510      	bpl.n	8003026 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003004:	6801      	ldr	r1, [r0, #0]
 8003006:	4d13      	ldr	r5, [pc, #76]	; (8003054 <UART_AdvFeatureConfig+0xc4>)
 8003008:	684a      	ldr	r2, [r1, #4]
 800300a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800300c:	402a      	ands	r2, r5
 800300e:	4322      	orrs	r2, r4
 8003010:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003012:	2280      	movs	r2, #128	; 0x80
 8003014:	0352      	lsls	r2, r2, #13
 8003016:	4294      	cmp	r4, r2
 8003018:	d105      	bne.n	8003026 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800301a:	684a      	ldr	r2, [r1, #4]
 800301c:	4c0e      	ldr	r4, [pc, #56]	; (8003058 <UART_AdvFeatureConfig+0xc8>)
 800301e:	4022      	ands	r2, r4
 8003020:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8003022:	4322      	orrs	r2, r4
 8003024:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003026:	061b      	lsls	r3, r3, #24
 8003028:	d506      	bpl.n	8003038 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800302a:	6802      	ldr	r2, [r0, #0]
 800302c:	490b      	ldr	r1, [pc, #44]	; (800305c <UART_AdvFeatureConfig+0xcc>)
 800302e:	6853      	ldr	r3, [r2, #4]
 8003030:	400b      	ands	r3, r1
 8003032:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8003034:	430b      	orrs	r3, r1
 8003036:	6053      	str	r3, [r2, #4]
  }
}
 8003038:	bd30      	pop	{r4, r5, pc}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	fffdffff 	.word	0xfffdffff
 8003040:	fffeffff 	.word	0xfffeffff
 8003044:	fffbffff 	.word	0xfffbffff
 8003048:	ffff7fff 	.word	0xffff7fff
 800304c:	ffffefff 	.word	0xffffefff
 8003050:	ffffdfff 	.word	0xffffdfff
 8003054:	ffefffff 	.word	0xffefffff
 8003058:	ff9fffff 	.word	0xff9fffff
 800305c:	fff7ffff 	.word	0xfff7ffff

08003060 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003062:	2780      	movs	r7, #128	; 0x80
{
 8003064:	0004      	movs	r4, r0
 8003066:	000e      	movs	r6, r1
 8003068:	0015      	movs	r5, r2
 800306a:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800306c:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800306e:	6822      	ldr	r2, [r4, #0]
 8003070:	69d3      	ldr	r3, [r2, #28]
 8003072:	4033      	ands	r3, r6
 8003074:	1b9b      	subs	r3, r3, r6
 8003076:	4259      	negs	r1, r3
 8003078:	414b      	adcs	r3, r1
 800307a:	42ab      	cmp	r3, r5
 800307c:	d001      	beq.n	8003082 <UART_WaitOnFlagUntilTimeout+0x22>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800307e:	2000      	movs	r0, #0
 8003080:	e01f      	b.n	80030c2 <UART_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 8003082:	9b08      	ldr	r3, [sp, #32]
 8003084:	3301      	adds	r3, #1
 8003086:	d0f3      	beq.n	8003070 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003088:	f7fe f85c 	bl	8001144 <HAL_GetTick>
 800308c:	9b01      	ldr	r3, [sp, #4]
 800308e:	9a08      	ldr	r2, [sp, #32]
 8003090:	1ac0      	subs	r0, r0, r3
 8003092:	6823      	ldr	r3, [r4, #0]
 8003094:	4290      	cmp	r0, r2
 8003096:	d801      	bhi.n	800309c <UART_WaitOnFlagUntilTimeout+0x3c>
 8003098:	2a00      	cmp	r2, #0
 800309a:	d113      	bne.n	80030c4 <UART_WaitOnFlagUntilTimeout+0x64>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	4916      	ldr	r1, [pc, #88]	; (80030f8 <UART_WaitOnFlagUntilTimeout+0x98>)
 80030a0:	400a      	ands	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	31a3      	adds	r1, #163	; 0xa3
 80030a8:	31ff      	adds	r1, #255	; 0xff
 80030aa:	438a      	bics	r2, r1
 80030ac:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80030ae:	0022      	movs	r2, r4
 80030b0:	2320      	movs	r3, #32
 80030b2:	3208      	adds	r2, #8
 80030b4:	67d3      	str	r3, [r2, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80030b6:	3280      	adds	r2, #128	; 0x80
 80030b8:	6013      	str	r3, [r2, #0]
          __HAL_UNLOCK(huart);
 80030ba:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 80030bc:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80030be:	3480      	adds	r4, #128	; 0x80
 80030c0:	7023      	strb	r3, [r4, #0]
}
 80030c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80030c4:	2104      	movs	r1, #4
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	420a      	tst	r2, r1
 80030ca:	d0d0      	beq.n	800306e <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030cc:	69da      	ldr	r2, [r3, #28]
 80030ce:	423a      	tst	r2, r7
 80030d0:	d0cd      	beq.n	800306e <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030d2:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	4908      	ldr	r1, [pc, #32]	; (80030f8 <UART_WaitOnFlagUntilTimeout+0x98>)
 80030d8:	400a      	ands	r2, r1
 80030da:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	31a3      	adds	r1, #163	; 0xa3
 80030e0:	31ff      	adds	r1, #255	; 0xff
 80030e2:	438a      	bics	r2, r1
 80030e4:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 80030e6:	0022      	movs	r2, r4
 80030e8:	2320      	movs	r3, #32
 80030ea:	3208      	adds	r2, #8
 80030ec:	67d3      	str	r3, [r2, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80030ee:	3280      	adds	r2, #128	; 0x80
 80030f0:	6013      	str	r3, [r2, #0]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030f2:	6053      	str	r3, [r2, #4]
 80030f4:	e7e1      	b.n	80030ba <UART_WaitOnFlagUntilTimeout+0x5a>
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	fffffe5f 	.word	0xfffffe5f

080030fc <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030fc:	0003      	movs	r3, r0
{
 80030fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003100:	2600      	movs	r6, #0
{
 8003102:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003104:	338c      	adds	r3, #140	; 0x8c
 8003106:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8003108:	f7fe f81c 	bl	8001144 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800310c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800310e:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	071b      	lsls	r3, r3, #28
 8003114:	d419      	bmi.n	800314a <UART_CheckIdleState+0x4e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003116:	6823      	ldr	r3, [r4, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	075b      	lsls	r3, r3, #29
 800311c:	d50a      	bpl.n	8003134 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800311e:	2180      	movs	r1, #128	; 0x80
 8003120:	4b10      	ldr	r3, [pc, #64]	; (8003164 <UART_CheckIdleState+0x68>)
 8003122:	2200      	movs	r2, #0
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	03c9      	lsls	r1, r1, #15
 8003128:	002b      	movs	r3, r5
 800312a:	0020      	movs	r0, r4
 800312c:	f7ff ff98 	bl	8003060 <UART_WaitOnFlagUntilTimeout>
 8003130:	2800      	cmp	r0, #0
 8003132:	d115      	bne.n	8003160 <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 8003134:	0022      	movs	r2, r4
 8003136:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003138:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800313a:	3208      	adds	r2, #8
 800313c:	67d3      	str	r3, [r2, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800313e:	3280      	adds	r2, #128	; 0x80
 8003140:	6013      	str	r3, [r2, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003142:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8003144:	3480      	adds	r4, #128	; 0x80
 8003146:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8003148:	e00b      	b.n	8003162 <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800314a:	2180      	movs	r1, #128	; 0x80
 800314c:	4b05      	ldr	r3, [pc, #20]	; (8003164 <UART_CheckIdleState+0x68>)
 800314e:	0032      	movs	r2, r6
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	0389      	lsls	r1, r1, #14
 8003154:	0003      	movs	r3, r0
 8003156:	0020      	movs	r0, r4
 8003158:	f7ff ff82 	bl	8003060 <UART_WaitOnFlagUntilTimeout>
 800315c:	2800      	cmp	r0, #0
 800315e:	d0da      	beq.n	8003116 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003160:	2003      	movs	r0, #3
}
 8003162:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8003164:	01ffffff 	.word	0x01ffffff

08003168 <HAL_UART_Init>:
{
 8003168:	b570      	push	{r4, r5, r6, lr}
 800316a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800316c:	d101      	bne.n	8003172 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800316e:	2001      	movs	r0, #1
}
 8003170:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8003172:	0005      	movs	r5, r0
 8003174:	3508      	adds	r5, #8
 8003176:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8003178:	2b00      	cmp	r3, #0
 800317a:	d104      	bne.n	8003186 <HAL_UART_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 800317c:	0002      	movs	r2, r0
 800317e:	3280      	adds	r2, #128	; 0x80
 8003180:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8003182:	f7fd fd2b 	bl	8000bdc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003186:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003188:	2101      	movs	r1, #1
 800318a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800318c:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 800318e:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003190:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8003192:	438b      	bics	r3, r1
 8003194:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003196:	f7ff fe37 	bl	8002e08 <UART_SetConfig>
 800319a:	2801      	cmp	r0, #1
 800319c:	d0e7      	beq.n	800316e <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800319e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <HAL_UART_Init+0x42>
    UART_AdvFeatureConfig(huart);
 80031a4:	0020      	movs	r0, r4
 80031a6:	f7ff fef3 	bl	8002f90 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031aa:	6823      	ldr	r3, [r4, #0]
 80031ac:	4907      	ldr	r1, [pc, #28]	; (80031cc <HAL_UART_Init+0x64>)
 80031ae:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80031b0:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031b2:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031b4:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	438a      	bics	r2, r1
 80031bc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80031be:	2201      	movs	r2, #1
 80031c0:	6819      	ldr	r1, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80031c6:	f7ff ff99 	bl	80030fc <UART_CheckIdleState>
 80031ca:	e7d1      	b.n	8003170 <HAL_UART_Init+0x8>
 80031cc:	ffffb7ff 	.word	0xffffb7ff

080031d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80031d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80031d2:	4b14      	ldr	r3, [pc, #80]	; (8003224 <UARTEx_SetNbDataToProcess+0x54>)
{
 80031d4:	0004      	movs	r4, r0
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	2308      	movs	r3, #8
 80031da:	33ff      	adds	r3, #255	; 0xff
 80031dc:	9301      	str	r3, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80031de:	4b12      	ldr	r3, [pc, #72]	; (8003228 <UARTEx_SetNbDataToProcess+0x58>)
 80031e0:	9302      	str	r3, [sp, #8]
 80031e2:	4b12      	ldr	r3, [pc, #72]	; (800322c <UARTEx_SetNbDataToProcess+0x5c>)
 80031e4:	9303      	str	r3, [sp, #12]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80031e6:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d102      	bne.n	80031f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 80031ec:	4b10      	ldr	r3, [pc, #64]	; (8003230 <UARTEx_SetNbDataToProcess+0x60>)
 80031ee:	6683      	str	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80031f0:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80031f2:	466a      	mov	r2, sp
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80031f4:	6803      	ldr	r3, [r0, #0]
                               (uint16_t)denominator[tx_fifo_threshold];
 80031f6:	ae02      	add	r6, sp, #8
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80031f8:	689d      	ldr	r5, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80031fe:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 8003200:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003202:	00c0      	lsls	r0, r0, #3
 8003204:	f7fd f840 	bl	8000288 <__divsi3>
 8003208:	0023      	movs	r3, r4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800320a:	466a      	mov	r2, sp
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800320c:	336a      	adds	r3, #106	; 0x6a
 800320e:	8018      	strh	r0, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003210:	012b      	lsls	r3, r5, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003212:	0f5b      	lsrs	r3, r3, #29
 8003214:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 8003216:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003218:	00c0      	lsls	r0, r0, #3
 800321a:	f7fd f835 	bl	8000288 <__divsi3>
 800321e:	3468      	adds	r4, #104	; 0x68
 8003220:	8020      	strh	r0, [r4, #0]
}
 8003222:	e7e5      	b.n	80031f0 <UARTEx_SetNbDataToProcess+0x20>
 8003224:	03010101 	.word	0x03010101
 8003228:	04020408 	.word	0x04020408
 800322c:	01010108 	.word	0x01010108
 8003230:	00010001 	.word	0x00010001

08003234 <HAL_UARTEx_DisableFifoMode>:
{
 8003234:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8003236:	0004      	movs	r4, r0
 8003238:	3480      	adds	r4, #128	; 0x80
 800323a:	7822      	ldrb	r2, [r4, #0]
 800323c:	2302      	movs	r3, #2
 800323e:	2a01      	cmp	r2, #1
 8003240:	d011      	beq.n	8003266 <HAL_UARTEx_DisableFifoMode+0x32>
  huart->gState = HAL_UART_STATE_BUSY;
 8003242:	0005      	movs	r5, r0
  __HAL_UART_DISABLE(huart);
 8003244:	2601      	movs	r6, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003246:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003248:	3508      	adds	r5, #8
 800324a:	3322      	adds	r3, #34	; 0x22
 800324c:	67eb      	str	r3, [r5, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800324e:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003250:	6813      	ldr	r3, [r2, #0]
 8003252:	43b3      	bics	r3, r6
 8003254:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003256:	4b05      	ldr	r3, [pc, #20]	; (800326c <HAL_UARTEx_DisableFifoMode+0x38>)
 8003258:	4019      	ands	r1, r3
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800325a:	2300      	movs	r3, #0
 800325c:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800325e:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003260:	2220      	movs	r2, #32
 8003262:	67ea      	str	r2, [r5, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8003264:	7023      	strb	r3, [r4, #0]
}
 8003266:	0018      	movs	r0, r3
 8003268:	bd70      	pop	{r4, r5, r6, pc}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	dfffffff 	.word	0xdfffffff

08003270 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8003270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8003272:	0005      	movs	r5, r0
 8003274:	3580      	adds	r5, #128	; 0x80
 8003276:	782b      	ldrb	r3, [r5, #0]
{
 8003278:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 800327a:	2002      	movs	r0, #2
 800327c:	2b01      	cmp	r3, #1
 800327e:	d018      	beq.n	80032b2 <HAL_UARTEx_SetTxFifoThreshold+0x42>
  huart->gState = HAL_UART_STATE_BUSY;
 8003280:	0026      	movs	r6, r4
 8003282:	2324      	movs	r3, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003284:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(huart);
 8003286:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8003288:	3608      	adds	r6, #8
  __HAL_LOCK(huart);
 800328a:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800328c:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800328e:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003290:	6813      	ldr	r3, [r2, #0]
 8003292:	4383      	bics	r3, r0
 8003294:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003296:	6893      	ldr	r3, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003298:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	08db      	lsrs	r3, r3, #3
 800329e:	4319      	orrs	r1, r3
 80032a0:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80032a2:	f7ff ff95 	bl	80031d0 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032a6:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 80032a8:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032aa:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80032ac:	2320      	movs	r3, #32
 80032ae:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 80032b0:	7028      	strb	r0, [r5, #0]
}
 80032b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080032b4 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80032b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 80032b6:	0005      	movs	r5, r0
 80032b8:	3580      	adds	r5, #128	; 0x80
 80032ba:	782b      	ldrb	r3, [r5, #0]
{
 80032bc:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 80032be:	2002      	movs	r0, #2
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d018      	beq.n	80032f6 <HAL_UARTEx_SetRxFifoThreshold+0x42>
  huart->gState = HAL_UART_STATE_BUSY;
 80032c4:	0026      	movs	r6, r4
 80032c6:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 80032c8:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80032ca:	3608      	adds	r6, #8
  __HAL_LOCK(huart);
 80032cc:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80032ce:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032d0:	6823      	ldr	r3, [r4, #0]
 80032d2:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	4382      	bics	r2, r0
 80032d8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	4806      	ldr	r0, [pc, #24]	; (80032f8 <HAL_UARTEx_SetRxFifoThreshold+0x44>)
 80032de:	4002      	ands	r2, r0
 80032e0:	4311      	orrs	r1, r2
 80032e2:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 80032e4:	0020      	movs	r0, r4
 80032e6:	f7ff ff73 	bl	80031d0 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032ea:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 80032ec:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032ee:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80032f0:	2320      	movs	r3, #32
 80032f2:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 80032f4:	7028      	strb	r0, [r5, #0]
}
 80032f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032f8:	f1ffffff 	.word	0xf1ffffff

080032fc <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 80032fc:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 80032fe:	2800      	cmp	r0, #0
 8003300:	d103      	bne.n	800330a <lv_disp_get_scr_act+0xe>
 8003302:	f008 f9e3 	bl	800b6cc <lv_disp_get_default>
    if(!disp) {
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
 8003306:	1e03      	subs	r3, r0, #0
    if(!disp) {
 8003308:	d000      	beq.n	800330c <lv_disp_get_scr_act+0x10>
    }

    return disp->act_scr;
 800330a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
}
 800330c:	0018      	movs	r0, r3
 800330e:	bd10      	pop	{r4, pc}

08003310 <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
 8003310:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 8003312:	2800      	cmp	r0, #0
 8003314:	d103      	bne.n	800331e <lv_disp_get_scr_prev+0xe>
 8003316:	f008 f9d9 	bl	800b6cc <lv_disp_get_default>
    if(!disp) {
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
 800331a:	1e03      	subs	r3, r0, #0
    if(!disp) {
 800331c:	d000      	beq.n	8003320 <lv_disp_get_scr_prev+0x10>
    }

    return disp->prev_scr;
 800331e:	6c03      	ldr	r3, [r0, #64]	; 0x40
}
 8003320:	0018      	movs	r0, r3
 8003322:	bd10      	pop	{r4, pc}

08003324 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 8003324:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 8003326:	2800      	cmp	r0, #0
 8003328:	d103      	bne.n	8003332 <lv_disp_get_layer_top+0xe>
 800332a:	f008 f9cf 	bl	800b6cc <lv_disp_get_default>
    if(!disp) {
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
 800332e:	1e03      	subs	r3, r0, #0
    if(!disp) {
 8003330:	d000      	beq.n	8003334 <lv_disp_get_layer_top+0x10>
    }

    return disp->top_layer;
 8003332:	6c43      	ldr	r3, [r0, #68]	; 0x44
}
 8003334:	0018      	movs	r0, r3
 8003336:	bd10      	pop	{r4, pc}

08003338 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 8003338:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 800333a:	2800      	cmp	r0, #0
 800333c:	d103      	bne.n	8003346 <lv_disp_get_layer_sys+0xe>
 800333e:	f008 f9c5 	bl	800b6cc <lv_disp_get_default>
    if(!disp) {
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
 8003342:	1e03      	subs	r3, r0, #0
    if(!disp) {
 8003344:	d000      	beq.n	8003348 <lv_disp_get_layer_sys+0x10>
    }

    return disp->sys_layer;
 8003346:	6c83      	ldr	r3, [r0, #72]	; 0x48
}
 8003348:	0018      	movs	r0, r3
 800334a:	bd10      	pop	{r4, pc}

0800334c <obj_to_foreground>:

    if(group->focus_cb) group->focus_cb(group);
}

static void obj_to_foreground(lv_obj_t * obj)
{
 800334c:	b570      	push	{r4, r5, r6, lr}
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
    lv_obj_t * last_top = NULL;
 800334e:	2400      	movs	r4, #0
    while(i != NULL) {
        if(i->top != 0) last_top = i;
 8003350:	2520      	movs	r5, #32
    while(i != NULL) {
 8003352:	2800      	cmp	r0, #0
 8003354:	d105      	bne.n	8003362 <obj_to_foreground+0x16>
        i = lv_obj_get_parent(i);
    }

    if(last_top != NULL) {
 8003356:	2c00      	cmp	r4, #0
 8003358:	d002      	beq.n	8003360 <obj_to_foreground+0x14>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
 800335a:	0020      	movs	r0, r4
 800335c:	f000 fb9b 	bl	8003a96 <lv_obj_move_foreground>
    }
}
 8003360:	bd70      	pop	{r4, r5, r6, pc}
        if(i->top != 0) last_top = i;
 8003362:	0003      	movs	r3, r0
 8003364:	3334      	adds	r3, #52	; 0x34
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	422b      	tst	r3, r5
 800336a:	d000      	beq.n	800336e <obj_to_foreground+0x22>
 800336c:	0004      	movs	r4, r0
        i = lv_obj_get_parent(i);
 800336e:	f000 fcaf 	bl	8003cd0 <lv_obj_get_parent>
 8003372:	e7ee      	b.n	8003352 <obj_to_foreground+0x6>

08003374 <focus_next_core.part.0>:
    bool can_begin           = true;
 8003374:	2301      	movs	r3, #1
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 8003376:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003378:	0004      	movs	r4, r0
    lv_obj_t ** obj_sentinel = NULL;
 800337a:	2700      	movs	r7, #0
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 800337c:	b085      	sub	sp, #20
    lv_obj_t ** obj_next     = group->obj_focus;
 800337e:	68c5      	ldr	r5, [r0, #12]
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 8003380:	9102      	str	r1, [sp, #8]
 8003382:	9203      	str	r2, [sp, #12]
    bool can_begin           = true;
 8003384:	9301      	str	r3, [sp, #4]
        if(obj_next == NULL) {
 8003386:	2d00      	cmp	r5, #0
 8003388:	d158      	bne.n	800343c <focus_next_core.part.0+0xc8>
            if(group->wrap || obj_sentinel == NULL) {
 800338a:	2210      	movs	r2, #16
 800338c:	7d23      	ldrb	r3, [r4, #20]
 800338e:	4213      	tst	r3, r2
 8003390:	d103      	bne.n	800339a <focus_next_core.part.0+0x26>
 8003392:	2f00      	cmp	r7, #0
 8003394:	d061      	beq.n	800345a <focus_next_core.part.0+0xe6>
}
 8003396:	b005      	add	sp, #20
 8003398:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if(!can_begin) return;
 800339a:	9b01      	ldr	r3, [sp, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0fa      	beq.n	8003396 <focus_next_core.part.0+0x22>
                obj_next  = begin(&group->obj_ll);
 80033a0:	0020      	movs	r0, r4
 80033a2:	9b02      	ldr	r3, [sp, #8]
 80033a4:	4798      	blx	r3
 80033a6:	0006      	movs	r6, r0
        if(obj_sentinel == NULL) {
 80033a8:	2f00      	cmp	r7, #0
 80033aa:	d142      	bne.n	8003432 <focus_next_core.part.0+0xbe>
            if(obj_sentinel == NULL) return; /*Group is empty*/
 80033ac:	2e00      	cmp	r6, #0
 80033ae:	d0f2      	beq.n	8003396 <focus_next_core.part.0+0x22>
                can_begin = false;
 80033b0:	2300      	movs	r3, #0
            if(obj_sentinel == NULL) return; /*Group is empty*/
 80033b2:	0035      	movs	r5, r6
                can_begin = false;
 80033b4:	9301      	str	r3, [sp, #4]
        if(lv_obj_get_state(*obj_next, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) continue;
 80033b6:	2100      	movs	r1, #0
 80033b8:	6828      	ldr	r0, [r5, #0]
 80033ba:	f000 fffc 	bl	80043b6 <lv_obj_get_state>
 80033be:	2320      	movs	r3, #32
 80033c0:	4218      	tst	r0, r3
 80033c2:	d148      	bne.n	8003456 <focus_next_core.part.0+0xe2>
        if(!lv_obj_get_hidden(*obj_next)) break;
 80033c4:	6828      	ldr	r0, [r5, #0]
 80033c6:	f000 fff1 	bl	80043ac <lv_obj_get_hidden>
 80033ca:	1e07      	subs	r7, r0, #0
 80033cc:	d143      	bne.n	8003456 <focus_next_core.part.0+0xe2>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 80033ce:	68e3      	ldr	r3, [r4, #12]
 80033d0:	42ab      	cmp	r3, r5
 80033d2:	d0e0      	beq.n	8003396 <focus_next_core.part.0+0x22>
    if(group->obj_focus) {
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d010      	beq.n	80033fa <focus_next_core.part.0+0x86>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	003a      	movs	r2, r7
 80033dc:	69c3      	ldr	r3, [r0, #28]
 80033de:	2117      	movs	r1, #23
 80033e0:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 80033e2:	68e3      	ldr	r3, [r4, #12]
 80033e4:	003a      	movs	r2, r7
 80033e6:	210e      	movs	r1, #14
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	f000 fa77 	bl	80038dc <lv_event_send>
        if(res != LV_RES_OK) return;
 80033ee:	2801      	cmp	r0, #1
 80033f0:	d1d1      	bne.n	8003396 <focus_next_core.part.0+0x22>
        lv_obj_invalidate(*group->obj_focus);
 80033f2:	68e3      	ldr	r3, [r4, #12]
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	f000 fb32 	bl	8003a5e <lv_obj_invalidate>
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 80033fa:	6828      	ldr	r0, [r5, #0]
 80033fc:	2200      	movs	r2, #0
 80033fe:	69c3      	ldr	r3, [r0, #28]
 8003400:	2116      	movs	r1, #22
    group->obj_focus = obj_next;
 8003402:	60e5      	str	r5, [r4, #12]
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8003404:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 8003406:	68e3      	ldr	r3, [r4, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	210d      	movs	r1, #13
 800340c:	6818      	ldr	r0, [r3, #0]
 800340e:	f000 fa65 	bl	80038dc <lv_event_send>
    if(res != LV_RES_OK) return;
 8003412:	2801      	cmp	r0, #1
 8003414:	d1bf      	bne.n	8003396 <focus_next_core.part.0+0x22>
    obj_to_foreground(*group->obj_focus);
 8003416:	68e3      	ldr	r3, [r4, #12]
 8003418:	6818      	ldr	r0, [r3, #0]
 800341a:	f7ff ff97 	bl	800334c <obj_to_foreground>
    lv_obj_invalidate(*group->obj_focus);
 800341e:	68e3      	ldr	r3, [r4, #12]
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	f000 fb1c 	bl	8003a5e <lv_obj_invalidate>
    if(group->focus_cb) group->focus_cb(group);
 8003426:	6923      	ldr	r3, [r4, #16]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0b4      	beq.n	8003396 <focus_next_core.part.0+0x22>
 800342c:	0020      	movs	r0, r4
 800342e:	4798      	blx	r3
 8003430:	e7b1      	b.n	8003396 <focus_next_core.part.0+0x22>
                can_begin = false;
 8003432:	2300      	movs	r3, #0
                obj_next  = begin(&group->obj_ll);
 8003434:	0005      	movs	r5, r0
        if(obj_sentinel == NULL) {
 8003436:	003e      	movs	r6, r7
                can_begin = false;
 8003438:	9301      	str	r3, [sp, #4]
 800343a:	e00a      	b.n	8003452 <focus_next_core.part.0+0xde>
        if(obj_sentinel == NULL) {
 800343c:	002e      	movs	r6, r5
 800343e:	2f00      	cmp	r7, #0
 8003440:	d000      	beq.n	8003444 <focus_next_core.part.0+0xd0>
 8003442:	003e      	movs	r6, r7
            obj_next = move(&group->obj_ll, obj_next);
 8003444:	0029      	movs	r1, r5
 8003446:	0020      	movs	r0, r4
 8003448:	9b03      	ldr	r3, [sp, #12]
 800344a:	4798      	blx	r3
 800344c:	0005      	movs	r5, r0
            if(obj_next == obj_sentinel) return;
 800344e:	42b0      	cmp	r0, r6
 8003450:	d0a1      	beq.n	8003396 <focus_next_core.part.0+0x22>
        if(obj_next == NULL) continue;
 8003452:	2d00      	cmp	r5, #0
 8003454:	d1af      	bne.n	80033b6 <focus_next_core.part.0+0x42>
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 8003456:	0037      	movs	r7, r6
 8003458:	e795      	b.n	8003386 <focus_next_core.part.0+0x12>
                if(!can_begin) return;
 800345a:	9b01      	ldr	r3, [sp, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d09a      	beq.n	8003396 <focus_next_core.part.0+0x22>
                obj_next  = begin(&group->obj_ll);
 8003460:	0020      	movs	r0, r4
 8003462:	9b02      	ldr	r3, [sp, #8]
 8003464:	4798      	blx	r3
 8003466:	0006      	movs	r6, r0
 8003468:	e7a0      	b.n	80033ac <focus_next_core.part.0+0x38>
	...

0800346c <_lv_group_init>:
{
 800346c:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 800346e:	2118      	movs	r1, #24
 8003470:	4801      	ldr	r0, [pc, #4]	; (8003478 <_lv_group_init+0xc>)
 8003472:	f008 fd34 	bl	800bede <_lv_ll_init>
}
 8003476:	bd10      	pop	{r4, pc}
 8003478:	20007258 	.word	0x20007258

0800347c <lv_group_focus_next>:
    if(group->frozen) return;
 800347c:	7d03      	ldrb	r3, [r0, #20]
{
 800347e:	b510      	push	{r4, lr}
    if(group->frozen) return;
 8003480:	07db      	lsls	r3, r3, #31
 8003482:	d403      	bmi.n	800348c <lv_group_focus_next+0x10>
 8003484:	4a02      	ldr	r2, [pc, #8]	; (8003490 <lv_group_focus_next+0x14>)
 8003486:	4903      	ldr	r1, [pc, #12]	; (8003494 <lv_group_focus_next+0x18>)
 8003488:	f7ff ff74 	bl	8003374 <focus_next_core.part.0>
}
 800348c:	bd10      	pop	{r4, pc}
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	0800bf7f 	.word	0x0800bf7f
 8003494:	0800bf6f 	.word	0x0800bf6f

08003498 <lv_group_focus_prev>:
    if(group->frozen) return;
 8003498:	7d03      	ldrb	r3, [r0, #20]
{
 800349a:	b510      	push	{r4, lr}
    if(group->frozen) return;
 800349c:	07db      	lsls	r3, r3, #31
 800349e:	d403      	bmi.n	80034a8 <lv_group_focus_prev+0x10>
 80034a0:	4a02      	ldr	r2, [pc, #8]	; (80034ac <lv_group_focus_prev+0x14>)
 80034a2:	4903      	ldr	r1, [pc, #12]	; (80034b0 <lv_group_focus_prev+0x18>)
 80034a4:	f7ff ff66 	bl	8003374 <focus_next_core.part.0>
}
 80034a8:	bd10      	pop	{r4, pc}
 80034aa:	46c0      	nop			; (mov r8, r8)
 80034ac:	0800bf8b 	.word	0x0800bf8b
 80034b0:	0800bf77 	.word	0x0800bf77

080034b4 <lv_group_refocus>:
    g->wrap           = 1;
 80034b4:	2310      	movs	r3, #16
    uint8_t temp_wrap = g->wrap;
 80034b6:	7d02      	ldrb	r2, [r0, #20]
{
 80034b8:	b570      	push	{r4, r5, r6, lr}
    g->wrap           = 1;
 80034ba:	4313      	orrs	r3, r2
    uint8_t temp_wrap = g->wrap;
 80034bc:	06d5      	lsls	r5, r2, #27
{
 80034be:	0004      	movs	r4, r0
    uint8_t temp_wrap = g->wrap;
 80034c0:	0fed      	lsrs	r5, r5, #31
    g->wrap           = 1;
 80034c2:	7503      	strb	r3, [r0, #20]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 80034c4:	071b      	lsls	r3, r3, #28
 80034c6:	d408      	bmi.n	80034da <lv_group_refocus+0x26>
        lv_group_focus_next(g);
 80034c8:	f7ff ffd8 	bl	800347c <lv_group_focus_next>
    g->wrap = temp_wrap;
 80034cc:	2210      	movs	r2, #16
 80034ce:	7d23      	ldrb	r3, [r4, #20]
 80034d0:	012d      	lsls	r5, r5, #4
 80034d2:	4393      	bics	r3, r2
 80034d4:	432b      	orrs	r3, r5
 80034d6:	7523      	strb	r3, [r4, #20]
}
 80034d8:	bd70      	pop	{r4, r5, r6, pc}
        lv_group_focus_prev(g);
 80034da:	f7ff ffdd 	bl	8003498 <lv_group_focus_prev>
 80034de:	e7f5      	b.n	80034cc <lv_group_refocus+0x18>

080034e0 <lv_group_add_obj>:
{
 80034e0:	b570      	push	{r4, r5, r6, lr}
 80034e2:	0004      	movs	r4, r0
 80034e4:	000d      	movs	r5, r1
    if(group == NULL) return;
 80034e6:	2800      	cmp	r0, #0
 80034e8:	d01d      	beq.n	8003526 <lv_group_add_obj+0x46>
    _LV_LL_READ(group->obj_ll, obj_i) {
 80034ea:	f008 fd40 	bl	800bf6e <_lv_ll_get_head>
 80034ee:	2800      	cmp	r0, #0
 80034f0:	d11a      	bne.n	8003528 <lv_group_add_obj+0x48>
    if(obj->group_p) {
 80034f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d007      	beq.n	8003508 <lv_group_add_obj+0x28>
        if(lv_obj_is_focused(obj)) {
 80034f8:	0028      	movs	r0, r5
 80034fa:	f001 fc3a 	bl	8004d72 <lv_obj_is_focused>
 80034fe:	2800      	cmp	r0, #0
 8003500:	d002      	beq.n	8003508 <lv_group_add_obj+0x28>
            lv_group_refocus(obj->group_p);
 8003502:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8003504:	f7ff ffd6 	bl	80034b4 <lv_group_refocus>
    obj->group_p     = group;
 8003508:	63ac      	str	r4, [r5, #56]	; 0x38
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 800350a:	0020      	movs	r0, r4
 800350c:	f008 fd0f 	bl	800bf2e <_lv_ll_ins_tail>
 8003510:	1e06      	subs	r6, r0, #0
    if(next == NULL) return;
 8003512:	d008      	beq.n	8003526 <lv_group_add_obj+0x46>
    *next = obj;
 8003514:	6005      	str	r5, [r0, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
 8003516:	0020      	movs	r0, r4
 8003518:	f008 fd29 	bl	800bf6e <_lv_ll_get_head>
 800351c:	42b0      	cmp	r0, r6
 800351e:	d102      	bne.n	8003526 <lv_group_add_obj+0x46>
        lv_group_refocus(group);
 8003520:	0020      	movs	r0, r4
 8003522:	f7ff ffc7 	bl	80034b4 <lv_group_refocus>
}
 8003526:	bd70      	pop	{r4, r5, r6, pc}
        if((*obj_i) == obj) {
 8003528:	6803      	ldr	r3, [r0, #0]
 800352a:	42ab      	cmp	r3, r5
 800352c:	d0fb      	beq.n	8003526 <lv_group_add_obj+0x46>
    _LV_LL_READ(group->obj_ll, obj_i) {
 800352e:	0001      	movs	r1, r0
 8003530:	0020      	movs	r0, r4
 8003532:	f008 fd24 	bl	800bf7e <_lv_ll_get_next>
 8003536:	e7da      	b.n	80034ee <lv_group_add_obj+0xe>

08003538 <lv_group_remove_obj>:
{
 8003538:	b570      	push	{r4, r5, r6, lr}
    lv_group_t * g = obj->group_p;
 800353a:	6b84      	ldr	r4, [r0, #56]	; 0x38
{
 800353c:	0006      	movs	r6, r0
    if(g == NULL) return;
 800353e:	2c00      	cmp	r4, #0
 8003540:	d031      	beq.n	80035a6 <lv_group_remove_obj+0x6e>
    if(*g->obj_focus == obj) {
 8003542:	68e3      	ldr	r3, [r4, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4283      	cmp	r3, r0
 8003548:	d116      	bne.n	8003578 <lv_group_remove_obj+0x40>
        if(g->frozen) g->frozen = 0;
 800354a:	2201      	movs	r2, #1
 800354c:	7d23      	ldrb	r3, [r4, #20]
 800354e:	4213      	tst	r3, r2
 8003550:	d001      	beq.n	8003556 <lv_group_remove_obj+0x1e>
 8003552:	4393      	bics	r3, r2
 8003554:	7523      	strb	r3, [r4, #20]
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 8003556:	0020      	movs	r0, r4
 8003558:	f008 fd09 	bl	800bf6e <_lv_ll_get_head>
 800355c:	68e3      	ldr	r3, [r4, #12]
 800355e:	4298      	cmp	r0, r3
 8003560:	d122      	bne.n	80035a8 <lv_group_remove_obj+0x70>
 8003562:	0020      	movs	r0, r4
 8003564:	f008 fd07 	bl	800bf76 <_lv_ll_get_tail>
 8003568:	68e3      	ldr	r3, [r4, #12]
 800356a:	4298      	cmp	r0, r3
 800356c:	d11c      	bne.n	80035a8 <lv_group_remove_obj+0x70>
            (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 800356e:	6800      	ldr	r0, [r0, #0]
 8003570:	2200      	movs	r2, #0
 8003572:	69c3      	ldr	r3, [r0, #28]
 8003574:	2117      	movs	r1, #23
 8003576:	4798      	blx	r3
    if(*g->obj_focus == obj) {
 8003578:	68e3      	ldr	r3, [r4, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	42b3      	cmp	r3, r6
 800357e:	d101      	bne.n	8003584 <lv_group_remove_obj+0x4c>
        g->obj_focus = NULL;
 8003580:	2300      	movs	r3, #0
 8003582:	60e3      	str	r3, [r4, #12]
    _LV_LL_READ(g->obj_ll, i) {
 8003584:	0020      	movs	r0, r4
 8003586:	f008 fcf2 	bl	800bf6e <_lv_ll_get_head>
 800358a:	1e05      	subs	r5, r0, #0
 800358c:	d00b      	beq.n	80035a6 <lv_group_remove_obj+0x6e>
        if(*i == obj) {
 800358e:	682b      	ldr	r3, [r5, #0]
            _lv_ll_remove(&g->obj_ll, i);
 8003590:	0029      	movs	r1, r5
 8003592:	0020      	movs	r0, r4
        if(*i == obj) {
 8003594:	42b3      	cmp	r3, r6
 8003596:	d10b      	bne.n	80035b0 <lv_group_remove_obj+0x78>
            _lv_ll_remove(&g->obj_ll, i);
 8003598:	f008 fd2b 	bl	800bff2 <_lv_ll_remove>
            lv_mem_free(i);
 800359c:	0028      	movs	r0, r5
 800359e:	f008 fe87 	bl	800c2b0 <lv_mem_free>
            obj->group_p = NULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	63b3      	str	r3, [r6, #56]	; 0x38
}
 80035a6:	bd70      	pop	{r4, r5, r6, pc}
            lv_group_refocus(g);
 80035a8:	0020      	movs	r0, r4
 80035aa:	f7ff ff83 	bl	80034b4 <lv_group_refocus>
 80035ae:	e7e3      	b.n	8003578 <lv_group_remove_obj+0x40>
    _LV_LL_READ(g->obj_ll, i) {
 80035b0:	f008 fce5 	bl	800bf7e <_lv_ll_get_next>
 80035b4:	e7e9      	b.n	800358a <lv_group_remove_obj+0x52>

080035b6 <lv_group_get_focused>:
    if(!group) return NULL;
 80035b6:	1e03      	subs	r3, r0, #0
 80035b8:	d003      	beq.n	80035c2 <lv_group_get_focused+0xc>
    if(group->obj_focus == NULL) return NULL;
 80035ba:	68c2      	ldr	r2, [r0, #12]
    if(!group) return NULL;
 80035bc:	1e13      	subs	r3, r2, #0
    if(group->obj_focus == NULL) return NULL;
 80035be:	d000      	beq.n	80035c2 <lv_group_get_focused+0xc>
    return *group->obj_focus;
 80035c0:	6813      	ldr	r3, [r2, #0]
}
 80035c2:	0018      	movs	r0, r3
 80035c4:	4770      	bx	lr

080035c6 <lv_group_get_editing>:
    if(!group) return false;
 80035c6:	2800      	cmp	r0, #0
 80035c8:	d002      	beq.n	80035d0 <lv_group_get_editing+0xa>
    return group->editing ? true : false;
 80035ca:	7d00      	ldrb	r0, [r0, #20]
 80035cc:	0780      	lsls	r0, r0, #30
 80035ce:	0fc0      	lsrs	r0, r0, #31
}
 80035d0:	4770      	bx	lr
	...

080035d4 <lv_indev_reset.part.3>:
/**
 * Reset one or all input devices
 * @param indev pointer to an input device to reset or NULL to reset all of them
 * @param obj pointer to an object which triggers the reset.
 */
void lv_indev_reset(lv_indev_t * indev, lv_obj_t * obj)
 80035d4:	b570      	push	{r4, r5, r6, lr}
 80035d6:	0004      	movs	r4, r0
        if(obj == NULL || indev->proc.types.pointer.last_obj == obj) {
            indev->proc.types.pointer.last_obj = NULL;
        }
    }
    else {
        lv_indev_t * i = lv_indev_get_next(NULL);
 80035d8:	2000      	movs	r0, #0
 80035da:	f008 f97b 	bl	800b8d4 <lv_indev_get_next>
        while(i) {
            i->proc.reset_query = 1;
 80035de:	2502      	movs	r5, #2
        while(i) {
 80035e0:	2800      	cmp	r0, #0
 80035e2:	d100      	bne.n	80035e6 <lv_indev_reset.part.3+0x12>
                i->proc.types.pointer.last_obj = NULL;
            }
            i = lv_indev_get_next(i);
        }
    }
}
 80035e4:	bd70      	pop	{r4, r5, r6, pc}
            i->proc.reset_query = 1;
 80035e6:	0002      	movs	r2, r0
 80035e8:	3250      	adds	r2, #80	; 0x50
 80035ea:	7813      	ldrb	r3, [r2, #0]
 80035ec:	432b      	orrs	r3, r5
 80035ee:	7013      	strb	r3, [r2, #0]
            if(indev_act == i) indev_obj_act = NULL;
 80035f0:	4b0f      	ldr	r3, [pc, #60]	; (8003630 <lv_indev_reset.part.3+0x5c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4298      	cmp	r0, r3
 80035f6:	d102      	bne.n	80035fe <lv_indev_reset.part.3+0x2a>
 80035f8:	2200      	movs	r2, #0
 80035fa:	4b0e      	ldr	r3, [pc, #56]	; (8003634 <lv_indev_reset.part.3+0x60>)
 80035fc:	601a      	str	r2, [r3, #0]
            if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
 80035fe:	2c00      	cmp	r4, #0
 8003600:	d011      	beq.n	8003626 <lv_indev_reset.part.3+0x52>
 8003602:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003604:	429c      	cmp	r4, r3
 8003606:	d00e      	beq.n	8003626 <lv_indev_reset.part.3+0x52>
            if(obj == NULL || i->proc.types.pointer.act_obj == obj) {
 8003608:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800360a:	429c      	cmp	r4, r3
 800360c:	d103      	bne.n	8003616 <lv_indev_reset.part.3+0x42>
                i->proc.types.pointer.act_obj = NULL;
 800360e:	2300      	movs	r3, #0
 8003610:	6343      	str	r3, [r0, #52]	; 0x34
            if(obj == NULL || i->proc.types.pointer.last_obj == obj) {
 8003612:	429c      	cmp	r4, r3
 8003614:	d002      	beq.n	800361c <lv_indev_reset.part.3+0x48>
 8003616:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003618:	429c      	cmp	r4, r3
 800361a:	d101      	bne.n	8003620 <lv_indev_reset.part.3+0x4c>
                i->proc.types.pointer.last_obj = NULL;
 800361c:	2300      	movs	r3, #0
 800361e:	6383      	str	r3, [r0, #56]	; 0x38
            i = lv_indev_get_next(i);
 8003620:	f008 f958 	bl	800b8d4 <lv_indev_get_next>
 8003624:	e7dc      	b.n	80035e0 <lv_indev_reset.part.3+0xc>
                i->proc.types.pointer.last_pressed = NULL;
 8003626:	2300      	movs	r3, #0
 8003628:	63c3      	str	r3, [r0, #60]	; 0x3c
            if(obj == NULL || i->proc.types.pointer.act_obj == obj) {
 800362a:	429c      	cmp	r4, r3
 800362c:	d0ef      	beq.n	800360e <lv_indev_reset.part.3+0x3a>
 800362e:	e7eb      	b.n	8003608 <lv_indev_reset.part.3+0x34>
 8003630:	20005d24 	.word	0x20005d24
 8003634:	20005d28 	.word	0x20005d28

08003638 <_lv_indev_init>:
{
 8003638:	b510      	push	{r4, lr}
 800363a:	2000      	movs	r0, #0
 800363c:	f7ff ffca 	bl	80035d4 <lv_indev_reset.part.3>
}
 8003640:	bd10      	pop	{r4, pc}
	...

08003644 <lv_indev_get_act>:
    return indev_act;
 8003644:	4b01      	ldr	r3, [pc, #4]	; (800364c <lv_indev_get_act+0x8>)
 8003646:	6818      	ldr	r0, [r3, #0]
}
 8003648:	4770      	bx	lr
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	20005d24 	.word	0x20005d24

08003650 <lv_indev_reset>:
{
 8003650:	b510      	push	{r4, lr}
 8003652:	1e03      	subs	r3, r0, #0
    if(indev) {
 8003654:	d022      	beq.n	800369c <lv_indev_reset+0x4c>
        indev->proc.reset_query = 1;
 8003656:	2202      	movs	r2, #2
 8003658:	3050      	adds	r0, #80	; 0x50
 800365a:	7804      	ldrb	r4, [r0, #0]
 800365c:	4322      	orrs	r2, r4
 800365e:	7002      	strb	r2, [r0, #0]
        if(indev_act == indev) indev_obj_act = NULL;
 8003660:	4a10      	ldr	r2, [pc, #64]	; (80036a4 <lv_indev_reset+0x54>)
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	429a      	cmp	r2, r3
 8003666:	d102      	bne.n	800366e <lv_indev_reset+0x1e>
 8003668:	2000      	movs	r0, #0
 800366a:	4a0f      	ldr	r2, [pc, #60]	; (80036a8 <lv_indev_reset+0x58>)
 800366c:	6010      	str	r0, [r2, #0]
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
 800366e:	2900      	cmp	r1, #0
 8003670:	d00f      	beq.n	8003692 <lv_indev_reset+0x42>
 8003672:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003674:	428a      	cmp	r2, r1
 8003676:	d00c      	beq.n	8003692 <lv_indev_reset+0x42>
        if(obj == NULL || indev->proc.types.pointer.act_obj == obj) {
 8003678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800367a:	428a      	cmp	r2, r1
 800367c:	d103      	bne.n	8003686 <lv_indev_reset+0x36>
            indev->proc.types.pointer.act_obj = NULL;
 800367e:	2200      	movs	r2, #0
 8003680:	635a      	str	r2, [r3, #52]	; 0x34
        if(obj == NULL || indev->proc.types.pointer.last_obj == obj) {
 8003682:	4291      	cmp	r1, r2
 8003684:	d002      	beq.n	800368c <lv_indev_reset+0x3c>
 8003686:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003688:	428a      	cmp	r2, r1
 800368a:	d101      	bne.n	8003690 <lv_indev_reset+0x40>
            indev->proc.types.pointer.last_obj = NULL;
 800368c:	2200      	movs	r2, #0
 800368e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003690:	bd10      	pop	{r4, pc}
            indev->proc.types.pointer.last_pressed = NULL;
 8003692:	2200      	movs	r2, #0
 8003694:	63da      	str	r2, [r3, #60]	; 0x3c
        if(obj == NULL || indev->proc.types.pointer.act_obj == obj) {
 8003696:	4291      	cmp	r1, r2
 8003698:	d0f1      	beq.n	800367e <lv_indev_reset+0x2e>
 800369a:	e7ed      	b.n	8003678 <lv_indev_reset+0x28>
 800369c:	0008      	movs	r0, r1
 800369e:	f7ff ff99 	bl	80035d4 <lv_indev_reset.part.3>
}
 80036a2:	e7f5      	b.n	8003690 <lv_indev_reset+0x40>
 80036a4:	20005d24 	.word	0x20005d24
 80036a8:	20005d28 	.word	0x20005d28

080036ac <lv_indev_get_obj_act>:
 * Gets a pointer to the currently active object in the currently processed input device.
 * @return pointer to currently active object or NULL if no active object
 */
lv_obj_t * lv_indev_get_obj_act(void)
{
    return indev_obj_act;
 80036ac:	4b01      	ldr	r3, [pc, #4]	; (80036b4 <lv_indev_get_obj_act+0x8>)
 80036ae:	6818      	ldr	r0, [r3, #0]
}
 80036b0:	4770      	bx	lr
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	20005d28 	.word	0x20005d28

080036b8 <style_prop_is_cacheble>:
}

static bool style_prop_is_cacheble(lv_style_property_t prop)
{

    switch(prop) {
 80036b8:	2850      	cmp	r0, #80	; 0x50
 80036ba:	d00f      	beq.n	80036dc <style_prop_is_cacheble+0x24>
 80036bc:	d81f      	bhi.n	80036fe <style_prop_is_cacheble+0x46>
 80036be:	2818      	cmp	r0, #24
 80036c0:	d80e      	bhi.n	80036e0 <style_prop_is_cacheble+0x28>
 80036c2:	2815      	cmp	r0, #21
 80036c4:	d20a      	bcs.n	80036dc <style_prop_is_cacheble+0x24>
 80036c6:	2807      	cmp	r0, #7
 80036c8:	d805      	bhi.n	80036d6 <style_prop_is_cacheble+0x1e>
 80036ca:	2804      	cmp	r0, #4
 80036cc:	d206      	bcs.n	80036dc <style_prop_is_cacheble+0x24>
 80036ce:	3801      	subs	r0, #1
 80036d0:	2801      	cmp	r0, #1
 80036d2:	d80d      	bhi.n	80036f0 <style_prop_is_cacheble+0x38>
 80036d4:	e002      	b.n	80036dc <style_prop_is_cacheble+0x24>
 80036d6:	3810      	subs	r0, #16
 80036d8:	2803      	cmp	r0, #3
 80036da:	d809      	bhi.n	80036f0 <style_prop_is_cacheble+0x38>
        case LV_STYLE_OUTLINE_BLEND_MODE:
        case LV_STYLE_PATTERN_BLEND_MODE:
        case LV_STYLE_SHADOW_BLEND_MODE:
        case LV_STYLE_TEXT_BLEND_MODE:
        case LV_STYLE_VALUE_BLEND_MODE:
            return true;
 80036dc:	2001      	movs	r0, #1
 80036de:	e008      	b.n	80036f2 <style_prop_is_cacheble+0x3a>
    switch(prop) {
 80036e0:	2833      	cmp	r0, #51	; 0x33
 80036e2:	d807      	bhi.n	80036f4 <style_prop_is_cacheble+0x3c>
 80036e4:	2830      	cmp	r0, #48	; 0x30
 80036e6:	d2f9      	bcs.n	80036dc <style_prop_is_cacheble+0x24>
 80036e8:	2820      	cmp	r0, #32
 80036ea:	d0f7      	beq.n	80036dc <style_prop_is_cacheble+0x24>
 80036ec:	282c      	cmp	r0, #44	; 0x2c
 80036ee:	d0f5      	beq.n	80036dc <style_prop_is_cacheble+0x24>
            break;
        default:
            return false;
 80036f0:	2000      	movs	r0, #0
    }
}
 80036f2:	4770      	bx	lr
    switch(prop) {
 80036f4:	2840      	cmp	r0, #64	; 0x40
 80036f6:	d0f1      	beq.n	80036dc <style_prop_is_cacheble+0x24>
 80036f8:	2842      	cmp	r0, #66	; 0x42
 80036fa:	d1f9      	bne.n	80036f0 <style_prop_is_cacheble+0x38>
 80036fc:	e7ee      	b.n	80036dc <style_prop_is_cacheble+0x24>
 80036fe:	28ff      	cmp	r0, #255	; 0xff
 8003700:	d0ec      	beq.n	80036dc <style_prop_is_cacheble+0x24>
 8003702:	d80e      	bhi.n	8003722 <style_prop_is_cacheble+0x6a>
 8003704:	286e      	cmp	r0, #110	; 0x6e
 8003706:	d0e9      	beq.n	80036dc <style_prop_is_cacheble+0x24>
 8003708:	d804      	bhi.n	8003714 <style_prop_is_cacheble+0x5c>
 800370a:	2854      	cmp	r0, #84	; 0x54
 800370c:	d0e6      	beq.n	80036dc <style_prop_is_cacheble+0x24>
 800370e:	2860      	cmp	r0, #96	; 0x60
 8003710:	d1ee      	bne.n	80036f0 <style_prop_is_cacheble+0x38>
 8003712:	e7e3      	b.n	80036dc <style_prop_is_cacheble+0x24>
 8003714:	287f      	cmp	r0, #127	; 0x7f
 8003716:	d0e1      	beq.n	80036dc <style_prop_is_cacheble+0x24>
 8003718:	2891      	cmp	r0, #145	; 0x91
 800371a:	d0df      	beq.n	80036dc <style_prop_is_cacheble+0x24>
 800371c:	2872      	cmp	r0, #114	; 0x72
 800371e:	d1e7      	bne.n	80036f0 <style_prop_is_cacheble+0x38>
 8003720:	e7dc      	b.n	80036dc <style_prop_is_cacheble+0x24>
 8003722:	4b0a      	ldr	r3, [pc, #40]	; (800374c <style_prop_is_cacheble+0x94>)
 8003724:	4298      	cmp	r0, r3
 8003726:	d0d9      	beq.n	80036dc <style_prop_is_cacheble+0x24>
 8003728:	d806      	bhi.n	8003738 <style_prop_is_cacheble+0x80>
 800372a:	4b09      	ldr	r3, [pc, #36]	; (8003750 <style_prop_is_cacheble+0x98>)
 800372c:	4298      	cmp	r0, r3
 800372e:	d0d5      	beq.n	80036dc <style_prop_is_cacheble+0x24>
 8003730:	d3de      	bcc.n	80036f0 <style_prop_is_cacheble+0x38>
 8003732:	4b08      	ldr	r3, [pc, #32]	; (8003754 <style_prop_is_cacheble+0x9c>)
 8003734:	18c0      	adds	r0, r0, r3
 8003736:	e7cb      	b.n	80036d0 <style_prop_is_cacheble+0x18>
 8003738:	4b07      	ldr	r3, [pc, #28]	; (8003758 <style_prop_is_cacheble+0xa0>)
 800373a:	4298      	cmp	r0, r3
 800373c:	d0ce      	beq.n	80036dc <style_prop_is_cacheble+0x24>
 800373e:	4b07      	ldr	r3, [pc, #28]	; (800375c <style_prop_is_cacheble+0xa4>)
 8003740:	4298      	cmp	r0, r3
 8003742:	d0cb      	beq.n	80036dc <style_prop_is_cacheble+0x24>
 8003744:	4b06      	ldr	r3, [pc, #24]	; (8003760 <style_prop_is_cacheble+0xa8>)
 8003746:	4298      	cmp	r0, r3
 8003748:	d1d2      	bne.n	80036f0 <style_prop_is_cacheble+0x38>
 800374a:	e7c7      	b.n	80036dc <style_prop_is_cacheble+0x24>
 800374c:	00008083 	.word	0x00008083
 8003750:	0000800c 	.word	0x0000800c
 8003754:	ffff7f80 	.word	0xffff7f80
 8003758:	000080a0 	.word	0x000080a0
 800375c:	000080ad 	.word	0x000080ad
 8003760:	0000808e 	.word	0x0000808e

08003764 <refresh_children_position>:
{
 8003764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _LV_LL_READ(obj->child_ll, i) {
 8003766:	1d05      	adds	r5, r0, #4
 8003768:	0028      	movs	r0, r5
{
 800376a:	000e      	movs	r6, r1
 800376c:	0017      	movs	r7, r2
    _LV_LL_READ(obj->child_ll, i) {
 800376e:	f008 fbfe 	bl	800bf6e <_lv_ll_get_head>
 8003772:	1e04      	subs	r4, r0, #0
 8003774:	d100      	bne.n	8003778 <refresh_children_position+0x14>
}
 8003776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        i->coords.x1 += x_diff;
 8003778:	8a23      	ldrh	r3, [r4, #16]
 800377a:	b2b2      	uxth	r2, r6
        i->coords.y1 += y_diff;
 800377c:	8a61      	ldrh	r1, [r4, #18]
        i->coords.x1 += x_diff;
 800377e:	18d3      	adds	r3, r2, r3
 8003780:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
 8003782:	b2bb      	uxth	r3, r7
 8003784:	1859      	adds	r1, r3, r1
 8003786:	8261      	strh	r1, [r4, #18]
        i->coords.x2 += x_diff;
 8003788:	8aa1      	ldrh	r1, [r4, #20]
        refresh_children_position(i, x_diff, y_diff);
 800378a:	0020      	movs	r0, r4
        i->coords.x2 += x_diff;
 800378c:	1852      	adds	r2, r2, r1
 800378e:	82a2      	strh	r2, [r4, #20]
        i->coords.y2 += y_diff;
 8003790:	8ae2      	ldrh	r2, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
 8003792:	0031      	movs	r1, r6
        i->coords.y2 += y_diff;
 8003794:	189b      	adds	r3, r3, r2
 8003796:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
 8003798:	003a      	movs	r2, r7
 800379a:	f7ff ffe3 	bl	8003764 <refresh_children_position>
    _LV_LL_READ(obj->child_ll, i) {
 800379e:	0021      	movs	r1, r4
 80037a0:	0028      	movs	r0, r5
 80037a2:	f008 fbec 	bl	800bf7e <_lv_ll_get_next>
 80037a6:	e7e4      	b.n	8003772 <refresh_children_position+0xe>

080037a8 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 80037a8:	2300      	movs	r3, #0
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
 80037aa:	5cca      	ldrb	r2, [r1, r3]
 80037ac:	54c2      	strb	r2, [r0, r3]
 80037ae:	3301      	adds	r3, #1
    while(len) {
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d1fa      	bne.n	80037aa <lv_area_copy+0x2>
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
}
 80037b4:	4770      	bx	lr
	...

080037b8 <lv_init>:
{
 80037b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if(lv_initialized) {
 80037ba:	4c18      	ldr	r4, [pc, #96]	; (800381c <lv_init+0x64>)
 80037bc:	7823      	ldrb	r3, [r4, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d12a      	bne.n	8003818 <lv_init+0x60>
    _lv_mem_init();
 80037c2:	f008 fd15 	bl	800c1f0 <_lv_mem_init>
    _lv_task_core_init();
 80037c6:	f008 ff83 	bl	800c6d0 <_lv_task_core_init>
    _lv_group_init();
 80037ca:	f7ff fe4f 	bl	800346c <_lv_group_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(lv_style_trans_t));
 80037ce:	2110      	movs	r1, #16
 80037d0:	4813      	ldr	r0, [pc, #76]	; (8003820 <lv_init+0x68>)
 80037d2:	f008 fb84 	bl	800bede <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 80037d6:	21be      	movs	r1, #190	; 0xbe
 80037d8:	4812      	ldr	r0, [pc, #72]	; (8003824 <lv_init+0x6c>)
 80037da:	0049      	lsls	r1, r1, #1
 80037dc:	f008 fb7f 	bl	800bede <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 80037e0:	2160      	movs	r1, #96	; 0x60
 80037e2:	4811      	ldr	r0, [pc, #68]	; (8003828 <lv_init+0x70>)
 80037e4:	f008 fb7b 	bl	800bede <_lv_ll_init>
    lv_theme_t * th = LV_THEME_DEFAULT_INIT(LV_THEME_DEFAULT_COLOR_PRIMARY, LV_THEME_DEFAULT_COLOR_SECONDARY,
 80037e8:	4b10      	ldr	r3, [pc, #64]	; (800382c <lv_init+0x74>)
 80037ea:	4911      	ldr	r1, [pc, #68]	; (8003830 <lv_init+0x78>)
 80037ec:	4811      	ldr	r0, [pc, #68]	; (8003834 <lv_init+0x7c>)
 80037ee:	9302      	str	r3, [sp, #8]
 80037f0:	9301      	str	r3, [sp, #4]
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	2202      	movs	r2, #2
 80037f6:	8809      	ldrh	r1, [r1, #0]
 80037f8:	8800      	ldrh	r0, [r0, #0]
 80037fa:	f009 fcd3 	bl	800d1a4 <lv_theme_material_init>
    lv_theme_set_act(th);
 80037fe:	f009 fbb9 	bl	800cf74 <lv_theme_set_act>
    _lv_refr_init();
 8003802:	f002 fc1b 	bl	800603c <_lv_refr_init>
    _lv_indev_init();
 8003806:	f7ff ff17 	bl	8003638 <_lv_indev_init>
    _lv_img_decoder_init();
 800380a:	f007 fbef 	bl	800afec <_lv_img_decoder_init>
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
 800380e:	2001      	movs	r0, #1
 8003810:	f007 fab4 	bl	800ad7c <lv_img_cache_set_size>
    lv_initialized = true;
 8003814:	2301      	movs	r3, #1
 8003816:	7023      	strb	r3, [r4, #0]
}
 8003818:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 800381a:	46c0      	nop			; (mov r8, r8)
 800381c:	20005d34 	.word	0x20005d34
 8003820:	200071a8 	.word	0x200071a8
 8003824:	20007104 	.word	0x20007104
 8003828:	200070f8 	.word	0x200070f8
 800382c:	20000028 	.word	0x20000028
 8003830:	0800f322 	.word	0x0800f322
 8003834:	0800f324 	.word	0x0800f324

08003838 <lv_obj_set_click>:
    obj->click = (en == true ? 1 : 0);
 8003838:	2201      	movs	r2, #1
 800383a:	000b      	movs	r3, r1
 800383c:	3034      	adds	r0, #52	; 0x34
 800383e:	7801      	ldrb	r1, [r0, #0]
 8003840:	4013      	ands	r3, r2
 8003842:	4391      	bics	r1, r2
 8003844:	4319      	orrs	r1, r3
 8003846:	7001      	strb	r1, [r0, #0]
}
 8003848:	4770      	bx	lr
	...

0800384c <lv_event_send_func>:
{
 800384c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800384e:	b089      	sub	sp, #36	; 0x24
 8003850:	9302      	str	r3, [sp, #8]
    event_temp_data.deleted = false;
 8003852:	2300      	movs	r3, #0
    if(event_temp_data_head) {
 8003854:	4e1f      	ldr	r6, [pc, #124]	; (80038d4 <lv_event_send_func+0x88>)
    event_temp_data.obj     = obj;
 8003856:	ad05      	add	r5, sp, #20
    event_temp_data.deleted = false;
 8003858:	712b      	strb	r3, [r5, #4]
    event_temp_data.prev    = NULL;
 800385a:	60ab      	str	r3, [r5, #8]
    if(event_temp_data_head) {
 800385c:	6833      	ldr	r3, [r6, #0]
{
 800385e:	9001      	str	r0, [sp, #4]
 8003860:	000c      	movs	r4, r1
 8003862:	9200      	str	r2, [sp, #0]
    event_temp_data.obj     = obj;
 8003864:	9105      	str	r1, [sp, #20]
    if(event_temp_data_head) {
 8003866:	2b00      	cmp	r3, #0
 8003868:	d000      	beq.n	800386c <lv_event_send_func+0x20>
        event_temp_data.prev = event_temp_data_head;
 800386a:	60ab      	str	r3, [r5, #8]
    const void * event_act_data_save = event_act_data;
 800386c:	4f1a      	ldr	r7, [pc, #104]	; (80038d8 <lv_event_send_func+0x8c>)
    event_temp_data_head = &event_temp_data;
 800386e:	6035      	str	r5, [r6, #0]
    const void * event_act_data_save = event_act_data;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	9303      	str	r3, [sp, #12]
    event_act_data                   = data;
 8003874:	9b02      	ldr	r3, [sp, #8]
 8003876:	603b      	str	r3, [r7, #0]
    lv_indev_t * indev_act = lv_indev_get_act();
 8003878:	f7ff fee4 	bl	8003644 <lv_indev_get_act>
    if(indev_act) {
 800387c:	2800      	cmp	r0, #0
 800387e:	d004      	beq.n	800388a <lv_event_send_func+0x3e>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
 8003880:	6883      	ldr	r3, [r0, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <lv_event_send_func+0x3e>
 8003886:	9900      	ldr	r1, [sp, #0]
 8003888:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
 800388a:	9b01      	ldr	r3, [sp, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <lv_event_send_func+0x4a>
 8003890:	9900      	ldr	r1, [sp, #0]
 8003892:	0020      	movs	r0, r4
 8003894:	4798      	blx	r3
        return LV_RES_INV;
 8003896:	2000      	movs	r0, #0
    event_act_data = event_act_data_save;
 8003898:	9b03      	ldr	r3, [sp, #12]
 800389a:	603b      	str	r3, [r7, #0]
    event_temp_data_head = event_temp_data_head->prev;
 800389c:	6833      	ldr	r3, [r6, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	6033      	str	r3, [r6, #0]
    if(event_temp_data.deleted) {
 80038a2:	792b      	ldrb	r3, [r5, #4]
 80038a4:	4283      	cmp	r3, r0
 80038a6:	d113      	bne.n	80038d0 <lv_event_send_func+0x84>
    return LV_RES_OK;
 80038a8:	3001      	adds	r0, #1
    if(obj) {
 80038aa:	2c00      	cmp	r4, #0
 80038ac:	d010      	beq.n	80038d0 <lv_event_send_func+0x84>
        if(obj->parent_event && obj->parent) {
 80038ae:	0023      	movs	r3, r4
 80038b0:	3334      	adds	r3, #52	; 0x34
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	065b      	lsls	r3, r3, #25
 80038b6:	d50b      	bpl.n	80038d0 <lv_event_send_func+0x84>
 80038b8:	6823      	ldr	r3, [r4, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d008      	beq.n	80038d0 <lv_event_send_func+0x84>
            lv_res_t res = lv_event_send(obj->parent, event, data);
 80038be:	0018      	movs	r0, r3
 80038c0:	9a02      	ldr	r2, [sp, #8]
 80038c2:	9900      	ldr	r1, [sp, #0]
 80038c4:	f000 f80a 	bl	80038dc <lv_event_send>
            if(res != LV_RES_OK) {
 80038c8:	3801      	subs	r0, #1
 80038ca:	4243      	negs	r3, r0
 80038cc:	4158      	adcs	r0, r3
        return LV_RES_INV;
 80038ce:	b2c0      	uxtb	r0, r0
}
 80038d0:	b009      	add	sp, #36	; 0x24
 80038d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038d4:	20005d30 	.word	0x20005d30
 80038d8:	20005d2c 	.word	0x20005d2c

080038dc <lv_event_send>:
{
 80038dc:	b510      	push	{r4, lr}
 80038de:	0013      	movs	r3, r2
 80038e0:	0004      	movs	r4, r0
    if(obj == NULL) return LV_RES_OK;
 80038e2:	2001      	movs	r0, #1
 80038e4:	2c00      	cmp	r4, #0
 80038e6:	d004      	beq.n	80038f2 <lv_event_send+0x16>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
 80038e8:	000a      	movs	r2, r1
 80038ea:	69a0      	ldr	r0, [r4, #24]
 80038ec:	0021      	movs	r1, r4
 80038ee:	f7ff ffad 	bl	800384c <lv_event_send_func>
}
 80038f2:	bd10      	pop	{r4, pc}

080038f4 <lv_obj_set_signal_cb>:
    obj->signal_cb = signal_cb;
 80038f4:	61c1      	str	r1, [r0, #28]
}
 80038f6:	4770      	bx	lr

080038f8 <lv_signal_send>:
{
 80038f8:	b510      	push	{r4, lr}
    if(obj == NULL) return LV_RES_OK;
 80038fa:	2301      	movs	r3, #1
 80038fc:	2800      	cmp	r0, #0
 80038fe:	d004      	beq.n	800390a <lv_signal_send+0x12>
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8003900:	69c4      	ldr	r4, [r0, #28]
 8003902:	2c00      	cmp	r4, #0
 8003904:	d001      	beq.n	800390a <lv_signal_send+0x12>
 8003906:	47a0      	blx	r4
 8003908:	0003      	movs	r3, r0
}
 800390a:	0018      	movs	r0, r3
 800390c:	bd10      	pop	{r4, pc}

0800390e <lv_obj_set_design_cb>:
    obj->design_cb = design_cb;
 800390e:	6201      	str	r1, [r0, #32]
}
 8003910:	4770      	bx	lr

08003912 <lv_obj_allocate_ext_attr>:
{
 8003912:	b510      	push	{r4, lr}
 8003914:	0004      	movs	r4, r0
    void * new_ext = lv_mem_realloc(obj->ext_attr, ext_size);
 8003916:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003918:	f008 fdca 	bl	800c4b0 <lv_mem_realloc>
    if(new_ext == NULL) return NULL;
 800391c:	2800      	cmp	r0, #0
 800391e:	d000      	beq.n	8003922 <lv_obj_allocate_ext_attr+0x10>
    obj->ext_attr = new_ext;
 8003920:	6260      	str	r0, [r4, #36]	; 0x24
}
 8003922:	bd10      	pop	{r4, pc}

08003924 <lv_obj_refresh_ext_draw_pad>:
    obj->ext_draw_pad = 0;
 8003924:	2200      	movs	r2, #0
{
 8003926:	b510      	push	{r4, lr}
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 8003928:	69c3      	ldr	r3, [r0, #28]
    obj->ext_draw_pad = 0;
 800392a:	8642      	strh	r2, [r0, #50]	; 0x32
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 800392c:	2106      	movs	r1, #6
 800392e:	4798      	blx	r3
}
 8003930:	bd10      	pop	{r4, pc}
	...

08003934 <lv_obj_get_disp>:
{
 8003934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(obj->parent == NULL)
 8003936:	6803      	ldr	r3, [r0, #0]
{
 8003938:	0005      	movs	r5, r0
    if(obj->parent == NULL)
 800393a:	2b00      	cmp	r3, #0
 800393c:	d108      	bne.n	8003950 <lv_obj_get_disp+0x1c>
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
 800393e:	4e10      	ldr	r6, [pc, #64]	; (8003980 <lv_obj_get_disp+0x4c>)
 8003940:	0030      	movs	r0, r6
 8003942:	f008 fb14 	bl	800bf6e <_lv_ll_get_head>
 8003946:	1e04      	subs	r4, r0, #0
 8003948:	d106      	bne.n	8003958 <lv_obj_get_disp+0x24>
}
 800394a:	0020      	movs	r0, r4
 800394c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } while(par != NULL);
 800394e:	001d      	movs	r5, r3
    return obj->parent;
 8003950:	682b      	ldr	r3, [r5, #0]
    } while(par != NULL);
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1fb      	bne.n	800394e <lv_obj_get_disp+0x1a>
 8003956:	e7f2      	b.n	800393e <lv_obj_get_disp+0xa>
        _LV_LL_READ(d->scr_ll, s) {
 8003958:	0027      	movs	r7, r4
 800395a:	3730      	adds	r7, #48	; 0x30
 800395c:	0038      	movs	r0, r7
 800395e:	f008 fb06 	bl	800bf6e <_lv_ll_get_head>
 8003962:	2800      	cmp	r0, #0
 8003964:	d104      	bne.n	8003970 <lv_obj_get_disp+0x3c>
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
 8003966:	0021      	movs	r1, r4
 8003968:	0030      	movs	r0, r6
 800396a:	f008 fb08 	bl	800bf7e <_lv_ll_get_next>
 800396e:	e7ea      	b.n	8003946 <lv_obj_get_disp+0x12>
            if(s == scr) return d;
 8003970:	4285      	cmp	r5, r0
 8003972:	d0ea      	beq.n	800394a <lv_obj_get_disp+0x16>
        _LV_LL_READ(d->scr_ll, s) {
 8003974:	0001      	movs	r1, r0
 8003976:	0038      	movs	r0, r7
 8003978:	f008 fb01 	bl	800bf7e <_lv_ll_get_next>
 800397c:	e7f1      	b.n	8003962 <lv_obj_get_disp+0x2e>
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	20007104 	.word	0x20007104

08003984 <lv_obj_area_is_visible>:
    return obj->hidden == 0 ? false : true;
 8003984:	0003      	movs	r3, r0
 8003986:	3334      	adds	r3, #52	; 0x34
 8003988:	781b      	ldrb	r3, [r3, #0]
{
 800398a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800398c:	0004      	movs	r4, r0
 800398e:	000d      	movs	r5, r1
    if(lv_obj_get_hidden(obj)) return false;
 8003990:	2600      	movs	r6, #0
 8003992:	06db      	lsls	r3, r3, #27
 8003994:	d43c      	bmi.n	8003a10 <lv_obj_area_is_visible+0x8c>
 8003996:	0006      	movs	r6, r0
    return obj->parent;
 8003998:	6833      	ldr	r3, [r6, #0]
    } while(par != NULL);
 800399a:	2b00      	cmp	r3, #0
 800399c:	d126      	bne.n	80039ec <lv_obj_area_is_visible+0x68>
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 800399e:	0030      	movs	r0, r6
 80039a0:	f7ff ffc8 	bl	8003934 <lv_obj_get_disp>
 80039a4:	0007      	movs	r7, r0
    if(obj_scr == lv_disp_get_scr_act(disp) ||
 80039a6:	f7ff fca9 	bl	80032fc <lv_disp_get_scr_act>
 80039aa:	42b0      	cmp	r0, r6
 80039ac:	d120      	bne.n	80039f0 <lv_obj_area_is_visible+0x6c>
        lv_area_copy(&obj_coords, &obj->coords);
 80039ae:	0021      	movs	r1, r4
 80039b0:	4668      	mov	r0, sp
 80039b2:	3110      	adds	r1, #16
        lv_coord_t ext_size = obj->ext_draw_pad;
 80039b4:	2332      	movs	r3, #50	; 0x32
 80039b6:	5ee6      	ldrsh	r6, [r4, r3]
        lv_area_copy(&obj_coords, &obj->coords);
 80039b8:	f7ff fef6 	bl	80037a8 <lv_area_copy>
        obj_coords.x1 -= ext_size;
 80039bc:	466a      	mov	r2, sp
 80039be:	4669      	mov	r1, sp
 80039c0:	8812      	ldrh	r2, [r2, #0]
 80039c2:	b2b3      	uxth	r3, r6
 80039c4:	1ad2      	subs	r2, r2, r3
 80039c6:	800a      	strh	r2, [r1, #0]
        obj_coords.y1 -= ext_size;
 80039c8:	884a      	ldrh	r2, [r1, #2]
        is_common = _lv_area_intersect(area, area, &obj_coords);
 80039ca:	0028      	movs	r0, r5
        obj_coords.y1 -= ext_size;
 80039cc:	1ad2      	subs	r2, r2, r3
 80039ce:	804a      	strh	r2, [r1, #2]
        obj_coords.x2 += ext_size;
 80039d0:	888a      	ldrh	r2, [r1, #4]
 80039d2:	189a      	adds	r2, r3, r2
 80039d4:	808a      	strh	r2, [r1, #4]
        obj_coords.y2 += ext_size;
 80039d6:	88ca      	ldrh	r2, [r1, #6]
 80039d8:	189b      	adds	r3, r3, r2
 80039da:	80cb      	strh	r3, [r1, #6]
 80039dc:	466a      	mov	r2, sp
        is_common = _lv_area_intersect(area, area, &obj_coords);
 80039de:	0029      	movs	r1, r5
 80039e0:	f007 ffdf 	bl	800b9a2 <_lv_area_intersect>
 80039e4:	1e06      	subs	r6, r0, #0
        if(is_common == false) return false;  /*The area is not on the object*/
 80039e6:	d115      	bne.n	8003a14 <lv_obj_area_is_visible+0x90>
 80039e8:	2600      	movs	r6, #0
 80039ea:	e011      	b.n	8003a10 <lv_obj_area_is_visible+0x8c>
    } while(par != NULL);
 80039ec:	001e      	movs	r6, r3
 80039ee:	e7d3      	b.n	8003998 <lv_obj_area_is_visible+0x14>
       obj_scr == lv_disp_get_scr_prev(disp) ||
 80039f0:	0038      	movs	r0, r7
 80039f2:	f7ff fc8d 	bl	8003310 <lv_disp_get_scr_prev>
    if(obj_scr == lv_disp_get_scr_act(disp) ||
 80039f6:	42b0      	cmp	r0, r6
 80039f8:	d0d9      	beq.n	80039ae <lv_obj_area_is_visible+0x2a>
       obj_scr == lv_disp_get_layer_top(disp) ||
 80039fa:	0038      	movs	r0, r7
 80039fc:	f7ff fc92 	bl	8003324 <lv_disp_get_layer_top>
       obj_scr == lv_disp_get_scr_prev(disp) ||
 8003a00:	42b0      	cmp	r0, r6
 8003a02:	d0d4      	beq.n	80039ae <lv_obj_area_is_visible+0x2a>
       obj_scr == lv_disp_get_layer_sys(disp)) {
 8003a04:	0038      	movs	r0, r7
 8003a06:	f7ff fc97 	bl	8003338 <lv_disp_get_layer_sys>
       obj_scr == lv_disp_get_layer_top(disp) ||
 8003a0a:	42b0      	cmp	r0, r6
 8003a0c:	d0cf      	beq.n	80039ae <lv_obj_area_is_visible+0x2a>
    return true;
 8003a0e:	2601      	movs	r6, #1
}
 8003a10:	0030      	movs	r0, r6
 8003a12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    return obj->hidden == 0 ? false : true;
 8003a14:	2710      	movs	r7, #16
    return obj->parent;
 8003a16:	6824      	ldr	r4, [r4, #0]
        while(par != NULL) {
 8003a18:	2c00      	cmp	r4, #0
 8003a1a:	d0f9      	beq.n	8003a10 <lv_obj_area_is_visible+0x8c>
            is_common = _lv_area_intersect(area, area, &par->coords);
 8003a1c:	0022      	movs	r2, r4
 8003a1e:	0029      	movs	r1, r5
 8003a20:	3210      	adds	r2, #16
 8003a22:	0028      	movs	r0, r5
 8003a24:	f007 ffbd 	bl	800b9a2 <_lv_area_intersect>
            if(is_common == false) return false;       /*If no common parts with parent break;*/
 8003a28:	2800      	cmp	r0, #0
 8003a2a:	d0dd      	beq.n	80039e8 <lv_obj_area_is_visible+0x64>
    return obj->hidden == 0 ? false : true;
 8003a2c:	0023      	movs	r3, r4
 8003a2e:	3334      	adds	r3, #52	; 0x34
 8003a30:	781b      	ldrb	r3, [r3, #0]
            if(lv_obj_get_hidden(par)) return false; /*If the parent is hidden then the child is hidden and won't be drawn*/
 8003a32:	423b      	tst	r3, r7
 8003a34:	d1d8      	bne.n	80039e8 <lv_obj_area_is_visible+0x64>
    return obj->parent;
 8003a36:	6824      	ldr	r4, [r4, #0]
 8003a38:	e7ee      	b.n	8003a18 <lv_obj_area_is_visible+0x94>

08003a3a <lv_obj_invalidate_area>:
{
 8003a3a:	b513      	push	{r0, r1, r4, lr}
 8003a3c:	0004      	movs	r4, r0
    lv_area_copy(&area_tmp, area);
 8003a3e:	4668      	mov	r0, sp
 8003a40:	f7ff feb2 	bl	80037a8 <lv_area_copy>
    bool visible = lv_obj_area_is_visible(obj, &area_tmp);
 8003a44:	4669      	mov	r1, sp
 8003a46:	0020      	movs	r0, r4
 8003a48:	f7ff ff9c 	bl	8003984 <lv_obj_area_is_visible>
    if(visible) _lv_inv_area(lv_obj_get_disp(obj), &area_tmp);
 8003a4c:	2800      	cmp	r0, #0
 8003a4e:	d005      	beq.n	8003a5c <lv_obj_invalidate_area+0x22>
 8003a50:	0020      	movs	r0, r4
 8003a52:	f7ff ff6f 	bl	8003934 <lv_obj_get_disp>
 8003a56:	4669      	mov	r1, sp
 8003a58:	f002 faf1 	bl	800603e <_lv_inv_area>
}
 8003a5c:	bd13      	pop	{r0, r1, r4, pc}

08003a5e <lv_obj_invalidate>:
{
 8003a5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    lv_area_copy(&obj_coords, &obj->coords);
 8003a60:	0001      	movs	r1, r0
{
 8003a62:	0005      	movs	r5, r0
    lv_coord_t ext_size = obj->ext_draw_pad;
 8003a64:	2332      	movs	r3, #50	; 0x32
 8003a66:	5ec4      	ldrsh	r4, [r0, r3]
    lv_area_copy(&obj_coords, &obj->coords);
 8003a68:	3110      	adds	r1, #16
 8003a6a:	4668      	mov	r0, sp
 8003a6c:	f7ff fe9c 	bl	80037a8 <lv_area_copy>
    obj_coords.x1 -= ext_size;
 8003a70:	466a      	mov	r2, sp
 8003a72:	4669      	mov	r1, sp
 8003a74:	8812      	ldrh	r2, [r2, #0]
 8003a76:	b2a3      	uxth	r3, r4
 8003a78:	1ad2      	subs	r2, r2, r3
 8003a7a:	800a      	strh	r2, [r1, #0]
    obj_coords.y1 -= ext_size;
 8003a7c:	884a      	ldrh	r2, [r1, #2]
    lv_obj_invalidate_area(obj, &obj_coords);
 8003a7e:	0028      	movs	r0, r5
    obj_coords.y1 -= ext_size;
 8003a80:	1ad2      	subs	r2, r2, r3
 8003a82:	804a      	strh	r2, [r1, #2]
    obj_coords.x2 += ext_size;
 8003a84:	888a      	ldrh	r2, [r1, #4]
 8003a86:	189a      	adds	r2, r3, r2
 8003a88:	808a      	strh	r2, [r1, #4]
    obj_coords.y2 += ext_size;
 8003a8a:	88ca      	ldrh	r2, [r1, #6]
 8003a8c:	189b      	adds	r3, r3, r2
 8003a8e:	80cb      	strh	r3, [r1, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
 8003a90:	f7ff ffd3 	bl	8003a3a <lv_obj_invalidate_area>
}
 8003a94:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

08003a96 <lv_obj_move_foreground>:
{
 8003a96:	b570      	push	{r4, r5, r6, lr}
    return obj->parent;
 8003a98:	6804      	ldr	r4, [r0, #0]
{
 8003a9a:	0005      	movs	r5, r0
    if(_lv_ll_get_head(&parent->child_ll) == obj) return;
 8003a9c:	1d26      	adds	r6, r4, #4
 8003a9e:	0030      	movs	r0, r6
 8003aa0:	f008 fa65 	bl	800bf6e <_lv_ll_get_head>
 8003aa4:	42a8      	cmp	r0, r5
 8003aa6:	d010      	beq.n	8003aca <lv_obj_move_foreground+0x34>
    lv_obj_invalidate(parent);
 8003aa8:	0020      	movs	r0, r4
 8003aaa:	f7ff ffd8 	bl	8003a5e <lv_obj_invalidate>
    _lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
 8003aae:	2301      	movs	r3, #1
 8003ab0:	002a      	movs	r2, r5
 8003ab2:	0031      	movs	r1, r6
 8003ab4:	0030      	movs	r0, r6
 8003ab6:	f008 fad5 	bl	800c064 <_lv_ll_chg_list>
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 8003aba:	002a      	movs	r2, r5
 8003abc:	2101      	movs	r1, #1
 8003abe:	0020      	movs	r0, r4
 8003ac0:	69e3      	ldr	r3, [r4, #28]
 8003ac2:	4798      	blx	r3
    lv_obj_invalidate(parent);
 8003ac4:	0020      	movs	r0, r4
 8003ac6:	f7ff ffca 	bl	8003a5e <lv_obj_invalidate>
}
 8003aca:	bd70      	pop	{r4, r5, r6, pc}

08003acc <lv_obj_set_pos>:
{
 8003acc:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_obj_t * par = obj->parent;
 8003ace:	6807      	ldr	r7, [r0, #0]
{
 8003ad0:	b085      	sub	sp, #20
 8003ad2:	0004      	movs	r4, r0
    if(par) {
 8003ad4:	2f00      	cmp	r7, #0
 8003ad6:	d005      	beq.n	8003ae4 <lv_obj_set_pos+0x18>
        x = x + par->coords.x1;
 8003ad8:	8a3d      	ldrh	r5, [r7, #16]
        y = y + par->coords.y1;
 8003ada:	8a7e      	ldrh	r6, [r7, #18]
        x = x + par->coords.x1;
 8003adc:	1869      	adds	r1, r5, r1
        y = y + par->coords.y1;
 8003ade:	18b2      	adds	r2, r6, r2
        x = x + par->coords.x1;
 8003ae0:	b209      	sxth	r1, r1
        y = y + par->coords.y1;
 8003ae2:	b212      	sxth	r2, r2
    diff.x = x - obj->coords.x1;
 8003ae4:	8a25      	ldrh	r5, [r4, #16]
    diff.y = y - obj->coords.y1;
 8003ae6:	8a66      	ldrh	r6, [r4, #18]
    diff.x = x - obj->coords.x1;
 8003ae8:	1b4d      	subs	r5, r1, r5
 8003aea:	b2ad      	uxth	r5, r5
    diff.y = y - obj->coords.y1;
 8003aec:	1b96      	subs	r6, r2, r6
    diff.x = x - obj->coords.x1;
 8003aee:	b22b      	sxth	r3, r5
    diff.y = y - obj->coords.y1;
 8003af0:	b2b6      	uxth	r6, r6
    diff.x = x - obj->coords.x1;
 8003af2:	9300      	str	r3, [sp, #0]
    diff.y = y - obj->coords.y1;
 8003af4:	b233      	sxth	r3, r6
 8003af6:	9301      	str	r3, [sp, #4]
    if(diff.x == 0 && diff.y == 0) return;
 8003af8:	9b00      	ldr	r3, [sp, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d102      	bne.n	8003b04 <lv_obj_set_pos+0x38>
 8003afe:	9b01      	ldr	r3, [sp, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d027      	beq.n	8003b54 <lv_obj_set_pos+0x88>
    lv_obj_invalidate(obj);
 8003b04:	0020      	movs	r0, r4
 8003b06:	f7ff ffaa 	bl	8003a5e <lv_obj_invalidate>
    lv_area_copy(cords_p, &obj->coords);
 8003b0a:	0021      	movs	r1, r4
 8003b0c:	a802      	add	r0, sp, #8
 8003b0e:	3110      	adds	r1, #16
 8003b10:	f7ff fe4a 	bl	80037a8 <lv_area_copy>
    obj->coords.x1 += diff.x;
 8003b14:	8a23      	ldrh	r3, [r4, #16]
    obj->coords.x2 += diff.x;
 8003b16:	8aa1      	ldrh	r1, [r4, #20]
    obj->coords.x1 += diff.x;
 8003b18:	18eb      	adds	r3, r5, r3
    obj->coords.y2 += diff.y;
 8003b1a:	8ae2      	ldrh	r2, [r4, #22]
    obj->coords.x1 += diff.x;
 8003b1c:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
 8003b1e:	8a63      	ldrh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
 8003b20:	186d      	adds	r5, r5, r1
    obj->coords.y1 += diff.y;
 8003b22:	18f3      	adds	r3, r6, r3
    obj->coords.y2 += diff.y;
 8003b24:	18b6      	adds	r6, r6, r2
    obj->coords.y1 += diff.y;
 8003b26:	8263      	strh	r3, [r4, #18]
    refresh_children_position(obj, diff.x, diff.y);
 8003b28:	9a01      	ldr	r2, [sp, #4]
 8003b2a:	9900      	ldr	r1, [sp, #0]
 8003b2c:	0020      	movs	r0, r4
    obj->coords.x2 += diff.x;
 8003b2e:	82a5      	strh	r5, [r4, #20]
    obj->coords.y2 += diff.y;
 8003b30:	82e6      	strh	r6, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
 8003b32:	f7ff fe17 	bl	8003764 <refresh_children_position>
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
 8003b36:	aa02      	add	r2, sp, #8
 8003b38:	2102      	movs	r1, #2
 8003b3a:	0020      	movs	r0, r4
 8003b3c:	69e3      	ldr	r3, [r4, #28]
 8003b3e:	4798      	blx	r3
    if(par) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 8003b40:	2f00      	cmp	r7, #0
 8003b42:	d004      	beq.n	8003b4e <lv_obj_set_pos+0x82>
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	0022      	movs	r2, r4
 8003b48:	2101      	movs	r1, #1
 8003b4a:	0038      	movs	r0, r7
 8003b4c:	4798      	blx	r3
    lv_obj_invalidate(obj);
 8003b4e:	0020      	movs	r0, r4
 8003b50:	f7ff ff85 	bl	8003a5e <lv_obj_invalidate>
}
 8003b54:	b005      	add	sp, #20
 8003b56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b58 <lv_obj_align>:
{
 8003b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	ab0a      	add	r3, sp, #40	; 0x28
 8003b60:	0017      	movs	r7, r2
 8003b62:	2200      	movs	r2, #0
 8003b64:	5e9b      	ldrsh	r3, [r3, r2]
 8003b66:	0004      	movs	r4, r0
 8003b68:	1e0e      	subs	r6, r1, #0
 8003b6a:	9301      	str	r3, [sp, #4]
    if(base == NULL) base = lv_obj_get_parent(obj);
 8003b6c:	d100      	bne.n	8003b70 <lv_obj_align+0x18>
    return obj->parent;
 8003b6e:	6806      	ldr	r6, [r0, #0]
    _lv_area_align(&base->coords, &obj->coords, align, &new_pos);
 8003b70:	0021      	movs	r1, r4
 8003b72:	0030      	movs	r0, r6
 8003b74:	ad03      	add	r5, sp, #12
 8003b76:	002b      	movs	r3, r5
 8003b78:	003a      	movs	r2, r7
 8003b7a:	3110      	adds	r1, #16
 8003b7c:	3010      	adds	r0, #16
 8003b7e:	f008 f86b 	bl	800bc58 <_lv_area_align>
    return obj->parent;
 8003b82:	6820      	ldr	r0, [r4, #0]
    new_pos.y += y_ofs;
 8003b84:	9901      	ldr	r1, [sp, #4]
    lv_coord_t par_abs_y  = par->coords.y1;
 8003b86:	2312      	movs	r3, #18
 8003b88:	5ec2      	ldrsh	r2, [r0, r3]
    new_pos.x += x_ofs;
 8003b8a:	9b00      	ldr	r3, [sp, #0]
    lv_coord_t par_abs_y  = par->coords.y1;
 8003b8c:	4694      	mov	ip, r2
    new_pos.y += y_ofs;
 8003b8e:	886a      	ldrh	r2, [r5, #2]
    new_pos.x -= par_abs_x;
 8003b90:	8a00      	ldrh	r0, [r0, #16]
    new_pos.y += y_ofs;
 8003b92:	1852      	adds	r2, r2, r1
    new_pos.x += x_ofs;
 8003b94:	8829      	ldrh	r1, [r5, #0]
 8003b96:	18c9      	adds	r1, r1, r3
    new_pos.y -= par_abs_y;
 8003b98:	4663      	mov	r3, ip
    new_pos.x -= par_abs_x;
 8003b9a:	1a09      	subs	r1, r1, r0
    new_pos.y -= par_abs_y;
 8003b9c:	1ad2      	subs	r2, r2, r3
    new_pos.x -= par_abs_x;
 8003b9e:	b209      	sxth	r1, r1
    new_pos.y -= par_abs_y;
 8003ba0:	b212      	sxth	r2, r2
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
 8003ba2:	0020      	movs	r0, r4
    new_pos.x -= par_abs_x;
 8003ba4:	8029      	strh	r1, [r5, #0]
    new_pos.y -= par_abs_y;
 8003ba6:	806a      	strh	r2, [r5, #2]
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
 8003ba8:	f7ff ff90 	bl	8003acc <lv_obj_set_pos>
    obj->realign.align       = align;
 8003bac:	0022      	movs	r2, r4
 8003bae:	0023      	movs	r3, r4
 8003bb0:	3248      	adds	r2, #72	; 0x48
    obj->realign.xofs        = x_ofs;
 8003bb2:	9900      	ldr	r1, [sp, #0]
    obj->realign.align       = align;
 8003bb4:	7017      	strb	r7, [r2, #0]
    obj->realign.xofs        = x_ofs;
 8003bb6:	1da2      	adds	r2, r4, #6
 8003bb8:	87d1      	strh	r1, [r2, #62]	; 0x3e
    obj->realign.yofs        = y_ofs;
 8003bba:	9a01      	ldr	r2, [sp, #4]
    obj->realign.align       = align;
 8003bbc:	3308      	adds	r3, #8
    obj->realign.yofs        = y_ofs;
 8003bbe:	87da      	strh	r2, [r3, #62]	; 0x3e
    obj->realign.mid_align = 0;
 8003bc0:	2202      	movs	r2, #2
    obj->realign.base        = base;
 8003bc2:	6426      	str	r6, [r4, #64]	; 0x40
    obj->realign.mid_align = 0;
 8003bc4:	3449      	adds	r4, #73	; 0x49
 8003bc6:	7823      	ldrb	r3, [r4, #0]
 8003bc8:	4393      	bics	r3, r2
 8003bca:	7023      	strb	r3, [r4, #0]
}
 8003bcc:	b005      	add	sp, #20
 8003bce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bd0 <obj_del_core>:
{
 8003bd0:	b570      	push	{r4, r5, r6, lr}
 8003bd2:	0004      	movs	r4, r0
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	2115      	movs	r1, #21
 8003bd8:	f7ff fe80 	bl	80038dc <lv_event_send>
    return obj->group_p;
 8003bdc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    if(group) lv_group_remove_obj(obj);
 8003bde:	2e00      	cmp	r6, #0
 8003be0:	d002      	beq.n	8003be8 <obj_del_core+0x18>
 8003be2:	0020      	movs	r0, r4
 8003be4:	f7ff fca8 	bl	8003538 <lv_group_remove_obj>
    i = _lv_ll_get_head(&(obj->child_ll));
 8003be8:	1d25      	adds	r5, r4, #4
        i = _lv_ll_get_head(&(obj->child_ll));
 8003bea:	0028      	movs	r0, r5
 8003bec:	f008 f9bf 	bl	800bf6e <_lv_ll_get_head>
    while(i != NULL) {
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	d120      	bne.n	8003c36 <obj_del_core+0x66>
    lv_event_temp_data_t * t = event_temp_data_head;
 8003bf4:	4b23      	ldr	r3, [pc, #140]	; (8003c84 <obj_del_core+0xb4>)
 8003bf6:	6818      	ldr	r0, [r3, #0]
        if(t->obj == obj) t->deleted = true;
 8003bf8:	2301      	movs	r3, #1
    while(t) {
 8003bfa:	2800      	cmp	r0, #0
 8003bfc:	d11e      	bne.n	8003c3c <obj_del_core+0x6c>
        indev = lv_indev_get_next(indev);
 8003bfe:	f007 fe69 	bl	800b8d4 <lv_indev_get_next>
 8003c02:	1e05      	subs	r5, r0, #0
    while(indev) {
 8003c04:	d120      	bne.n	8003c48 <obj_del_core+0x78>
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
 8003c06:	0002      	movs	r2, r0
 8003c08:	0001      	movs	r1, r0
 8003c0a:	69e3      	ldr	r3, [r4, #28]
 8003c0c:	0020      	movs	r0, r4
 8003c0e:	4798      	blx	r3
    return obj->parent;
 8003c10:	6820      	ldr	r0, [r4, #0]
    if(par == NULL) { /*It is a screen*/
 8003c12:	2800      	cmp	r0, #0
 8003c14:	d134      	bne.n	8003c80 <obj_del_core+0xb0>
        lv_disp_t * d = lv_obj_get_disp(obj);
 8003c16:	0020      	movs	r0, r4
 8003c18:	f7ff fe8c 	bl	8003934 <lv_obj_get_disp>
        _lv_ll_remove(&d->scr_ll, obj);
 8003c1c:	3030      	adds	r0, #48	; 0x30
        _lv_ll_remove(&(par->child_ll), obj);
 8003c1e:	0021      	movs	r1, r4
 8003c20:	f008 f9e7 	bl	800bff2 <_lv_ll_remove>
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
 8003c24:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003c26:	2800      	cmp	r0, #0
 8003c28:	d001      	beq.n	8003c2e <obj_del_core+0x5e>
 8003c2a:	f008 fb41 	bl	800c2b0 <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
 8003c2e:	0020      	movs	r0, r4
 8003c30:	f008 fb3e 	bl	800c2b0 <lv_mem_free>
}
 8003c34:	bd70      	pop	{r4, r5, r6, pc}
        obj_del_core(i);
 8003c36:	f7ff ffcb 	bl	8003bd0 <obj_del_core>
 8003c3a:	e7d6      	b.n	8003bea <obj_del_core+0x1a>
        if(t->obj == obj) t->deleted = true;
 8003c3c:	6802      	ldr	r2, [r0, #0]
 8003c3e:	4294      	cmp	r4, r2
 8003c40:	d100      	bne.n	8003c44 <obj_del_core+0x74>
 8003c42:	7103      	strb	r3, [r0, #4]
        t = t->prev;
 8003c44:	6880      	ldr	r0, [r0, #8]
 8003c46:	e7d8      	b.n	8003bfa <obj_del_core+0x2a>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 8003c48:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003c4a:	42a3      	cmp	r3, r4
 8003c4c:	d002      	beq.n	8003c54 <obj_del_core+0x84>
 8003c4e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003c50:	42a3      	cmp	r3, r4
 8003c52:	d103      	bne.n	8003c5c <obj_del_core+0x8c>
            lv_indev_reset(indev, obj);
 8003c54:	0021      	movs	r1, r4
 8003c56:	0028      	movs	r0, r5
 8003c58:	f7ff fcfa 	bl	8003650 <lv_indev_reset>
        if(indev->proc.types.pointer.last_pressed == obj) {
 8003c5c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003c5e:	42a3      	cmp	r3, r4
 8003c60:	d101      	bne.n	8003c66 <obj_del_core+0x96>
            indev->proc.types.pointer.last_pressed = NULL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	63eb      	str	r3, [r5, #60]	; 0x3c
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 8003c66:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003c68:	42b3      	cmp	r3, r6
 8003c6a:	d107      	bne.n	8003c7c <obj_del_core+0xac>
 8003c6c:	f7ff fd1e 	bl	80036ac <lv_indev_get_obj_act>
 8003c70:	42a0      	cmp	r0, r4
 8003c72:	d103      	bne.n	8003c7c <obj_del_core+0xac>
            lv_indev_reset(indev, obj);
 8003c74:	0021      	movs	r1, r4
 8003c76:	0028      	movs	r0, r5
 8003c78:	f7ff fcea 	bl	8003650 <lv_indev_reset>
        indev = lv_indev_get_next(indev);
 8003c7c:	0028      	movs	r0, r5
 8003c7e:	e7be      	b.n	8003bfe <obj_del_core+0x2e>
        _lv_ll_remove(&(par->child_ll), obj);
 8003c80:	3004      	adds	r0, #4
 8003c82:	e7cc      	b.n	8003c1e <obj_del_core+0x4e>
 8003c84:	20005d30 	.word	0x20005d30

08003c88 <lv_obj_del>:
{
 8003c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8a:	0005      	movs	r5, r0
    lv_obj_invalidate(obj);
 8003c8c:	f7ff fee7 	bl	8003a5e <lv_obj_invalidate>
    return obj->parent;
 8003c90:	682f      	ldr	r7, [r5, #0]
    if(par == NULL) {
 8003c92:	2f00      	cmp	r7, #0
 8003c94:	d119      	bne.n	8003cca <lv_obj_del+0x42>
        disp = lv_obj_get_disp(obj);
 8003c96:	0028      	movs	r0, r5
 8003c98:	f7ff fe4c 	bl	8003934 <lv_obj_get_disp>
 8003c9c:	1e06      	subs	r6, r0, #0
        if(!disp) return LV_RES_INV;   /*Shouldn't happen*/
 8003c9e:	d012      	beq.n	8003cc6 <lv_obj_del+0x3e>
        if(disp->act_scr == obj) act_scr_del = true;
 8003ca0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003ca2:	1b5c      	subs	r4, r3, r5
 8003ca4:	4263      	negs	r3, r4
 8003ca6:	415c      	adcs	r4, r3
 8003ca8:	b2e4      	uxtb	r4, r4
    obj_del_core(obj);
 8003caa:	0028      	movs	r0, r5
 8003cac:	f7ff ff90 	bl	8003bd0 <obj_del_core>
    if(par) {
 8003cb0:	2f00      	cmp	r7, #0
 8003cb2:	d004      	beq.n	8003cbe <lv_obj_del+0x36>
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, NULL);
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	2101      	movs	r1, #1
 8003cba:	0038      	movs	r0, r7
 8003cbc:	4798      	blx	r3
    if(act_scr_del)  {
 8003cbe:	2c00      	cmp	r4, #0
 8003cc0:	d001      	beq.n	8003cc6 <lv_obj_del+0x3e>
        disp->act_scr = NULL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	63f3      	str	r3, [r6, #60]	; 0x3c
}
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool act_scr_del = false;
 8003cca:	2400      	movs	r4, #0
    lv_disp_t * disp = NULL;
 8003ccc:	0026      	movs	r6, r4
 8003cce:	e7ec      	b.n	8003caa <lv_obj_del+0x22>

08003cd0 <lv_obj_get_parent>:
    return obj->parent;
 8003cd0:	6800      	ldr	r0, [r0, #0]
}
 8003cd2:	4770      	bx	lr

08003cd4 <lv_obj_get_child>:
{
 8003cd4:	b510      	push	{r4, lr}
 8003cd6:	3004      	adds	r0, #4
    if(child == NULL) {
 8003cd8:	2900      	cmp	r1, #0
 8003cda:	d102      	bne.n	8003ce2 <lv_obj_get_child+0xe>
        result = _lv_ll_get_head(&obj->child_ll);
 8003cdc:	f008 f947 	bl	800bf6e <_lv_ll_get_head>
}
 8003ce0:	bd10      	pop	{r4, pc}
        result = _lv_ll_get_next(&obj->child_ll, child);
 8003ce2:	f008 f94c 	bl	800bf7e <_lv_ll_get_next>
    return result;
 8003ce6:	e7fb      	b.n	8003ce0 <lv_obj_get_child+0xc>

08003ce8 <refresh_children_style>:
{
 8003ce8:	b570      	push	{r4, r5, r6, lr}
 8003cea:	0005      	movs	r5, r0
        result = _lv_ll_get_head(&obj->child_ll);
 8003cec:	3004      	adds	r0, #4
 8003cee:	f008 f93e 	bl	800bf6e <_lv_ll_get_head>
        child = lv_obj_get_child(obj, child);
 8003cf2:	1e04      	subs	r4, r0, #0
    while(child != NULL) {
 8003cf4:	d100      	bne.n	8003cf8 <refresh_children_style+0x10>
}
 8003cf6:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_invalidate(child);
 8003cf8:	0020      	movs	r0, r4
 8003cfa:	f7ff feb0 	bl	8003a5e <lv_obj_invalidate>
        child->signal_cb(child, LV_SIGNAL_STYLE_CHG, NULL);
 8003cfe:	2200      	movs	r2, #0
 8003d00:	2104      	movs	r1, #4
 8003d02:	69e3      	ldr	r3, [r4, #28]
 8003d04:	0020      	movs	r0, r4
 8003d06:	4798      	blx	r3
        lv_obj_invalidate(child);
 8003d08:	0020      	movs	r0, r4
 8003d0a:	f7ff fea8 	bl	8003a5e <lv_obj_invalidate>
        refresh_children_style(child); /*Check children too*/
 8003d0e:	0020      	movs	r0, r4
 8003d10:	f7ff ffea 	bl	8003ce8 <refresh_children_style>
        child = lv_obj_get_child(obj, child);
 8003d14:	0021      	movs	r1, r4
 8003d16:	0028      	movs	r0, r5
 8003d18:	f7ff ffdc 	bl	8003cd4 <lv_obj_get_child>
 8003d1c:	e7e9      	b.n	8003cf2 <refresh_children_style+0xa>

08003d1e <lv_obj_get_coords>:
{
 8003d1e:	0003      	movs	r3, r0
 8003d20:	b510      	push	{r4, lr}
    lv_area_copy(cords_p, &obj->coords);
 8003d22:	3310      	adds	r3, #16
{
 8003d24:	0008      	movs	r0, r1
    lv_area_copy(cords_p, &obj->coords);
 8003d26:	0019      	movs	r1, r3
 8003d28:	f7ff fd3e 	bl	80037a8 <lv_area_copy>
}
 8003d2c:	bd10      	pop	{r4, pc}

08003d2e <lv_obj_get_x>:
    return obj->parent;
 8003d2e:	6803      	ldr	r3, [r0, #0]
 8003d30:	2210      	movs	r2, #16
 8003d32:	5e80      	ldrsh	r0, [r0, r2]
    if(parent) {
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <lv_obj_get_x+0x10>
        rel_x             = obj->coords.x1 - parent->coords.x1;
 8003d38:	8a1b      	ldrh	r3, [r3, #16]
 8003d3a:	1ac0      	subs	r0, r0, r3
 8003d3c:	b200      	sxth	r0, r0
}
 8003d3e:	4770      	bx	lr

08003d40 <lv_obj_set_y>:
{
 8003d40:	b570      	push	{r4, r5, r6, lr}
 8003d42:	000d      	movs	r5, r1
 8003d44:	0004      	movs	r4, r0
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
 8003d46:	f7ff fff2 	bl	8003d2e <lv_obj_get_x>
 8003d4a:	002a      	movs	r2, r5
 8003d4c:	0001      	movs	r1, r0
 8003d4e:	0020      	movs	r0, r4
 8003d50:	f7ff febc 	bl	8003acc <lv_obj_set_pos>
}
 8003d54:	bd70      	pop	{r4, r5, r6, pc}

08003d56 <lv_obj_get_y>:
    return obj->parent;
 8003d56:	6803      	ldr	r3, [r0, #0]
 8003d58:	2212      	movs	r2, #18
 8003d5a:	5e80      	ldrsh	r0, [r0, r2]
    if(parent) {
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <lv_obj_get_y+0x10>
        rel_y             = obj->coords.y1 - parent->coords.y1;
 8003d60:	8a5b      	ldrh	r3, [r3, #18]
 8003d62:	1ac0      	subs	r0, r0, r3
 8003d64:	b200      	sxth	r0, r0
}
 8003d66:	4770      	bx	lr

08003d68 <lv_obj_set_x>:
{
 8003d68:	b570      	push	{r4, r5, r6, lr}
 8003d6a:	000d      	movs	r5, r1
 8003d6c:	0004      	movs	r4, r0
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
 8003d6e:	f7ff fff2 	bl	8003d56 <lv_obj_get_y>
 8003d72:	0029      	movs	r1, r5
 8003d74:	0002      	movs	r2, r0
 8003d76:	0020      	movs	r0, r4
 8003d78:	f7ff fea8 	bl	8003acc <lv_obj_set_pos>
}
 8003d7c:	bd70      	pop	{r4, r5, r6, pc}

08003d7e <obj_align_mid_core>:
{
 8003d7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d80:	b087      	sub	sp, #28
 8003d82:	9303      	str	r3, [sp, #12]
 8003d84:	ab0c      	add	r3, sp, #48	; 0x30
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	9201      	str	r2, [sp, #4]
 8003d8a:	9302      	str	r3, [sp, #8]
 8003d8c:	ab0d      	add	r3, sp, #52	; 0x34
 8003d8e:	2200      	movs	r2, #0
 8003d90:	5e9b      	ldrsh	r3, [r3, r2]
 8003d92:	0006      	movs	r6, r0
 8003d94:	9304      	str	r3, [sp, #16]
 8003d96:	ab0e      	add	r3, sp, #56	; 0x38
 8003d98:	2200      	movs	r2, #0
 8003d9a:	5e9b      	ldrsh	r3, [r3, r2]
 8003d9c:	000d      	movs	r5, r1
 8003d9e:	9305      	str	r3, [sp, #20]
    lv_coord_t new_x = lv_obj_get_x(obj);
 8003da0:	f7ff ffc5 	bl	8003d2e <lv_obj_get_x>
 8003da4:	0004      	movs	r4, r0
    lv_coord_t new_y = lv_obj_get_y(obj);
 8003da6:	0030      	movs	r0, r6
 8003da8:	f7ff ffd5 	bl	8003d56 <lv_obj_get_y>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8003dac:	8ab3      	ldrh	r3, [r6, #20]
 8003dae:	8a32      	ldrh	r2, [r6, #16]
 8003db0:	3301      	adds	r3, #1
 8003db2:	1a9b      	subs	r3, r3, r2
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 8003db4:	b21b      	sxth	r3, r3
 8003db6:	0fd9      	lsrs	r1, r3, #31
 8003db8:	18cb      	adds	r3, r1, r3
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8003dba:	8af1      	ldrh	r1, [r6, #22]
 8003dbc:	8a72      	ldrh	r2, [r6, #18]
 8003dbe:	3101      	adds	r1, #1
 8003dc0:	1a89      	subs	r1, r1, r2
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 8003dc2:	b209      	sxth	r1, r1
 8003dc4:	0fca      	lsrs	r2, r1, #31
 8003dc6:	1851      	adds	r1, r2, r1
 8003dc8:	8a6a      	ldrh	r2, [r5, #18]
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 8003dca:	105b      	asrs	r3, r3, #1
 8003dcc:	9200      	str	r2, [sp, #0]
    switch(align) {
 8003dce:	9a01      	ldr	r2, [sp, #4]
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 8003dd0:	1049      	asrs	r1, r1, #1
 8003dd2:	8a2f      	ldrh	r7, [r5, #16]
    switch(align) {
 8003dd4:	2a14      	cmp	r2, #20
 8003dd6:	d82c      	bhi.n	8003e32 <obj_align_mid_core+0xb4>
 8003dd8:	0010      	movs	r0, r2
 8003dda:	f7fc f9ad 	bl	8000138 <__gnu_thumb1_case_uqi>
 8003dde:	260b      	.short	0x260b
 8003de0:	1d505714 	.word	0x1d505714
 8003de4:	265b435f 	.word	0x265b435f
 8003de8:	1d505714 	.word	0x1d505714
 8003dec:	5043265f 	.word	0x5043265f
 8003df0:	5b57      	.short	0x5b57
 8003df2:	5f          	.byte	0x5f
 8003df3:	00          	.byte	0x00
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8003df4:	8aac      	ldrh	r4, [r5, #20]
 8003df6:	3401      	adds	r4, #1
 8003df8:	1be4      	subs	r4, r4, r7
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8003dfa:	b224      	sxth	r4, r4
 8003dfc:	0fe0      	lsrs	r0, r4, #31
 8003dfe:	1904      	adds	r4, r0, r4
 8003e00:	1064      	asrs	r4, r4, #1
            new_x = lv_obj_get_width(base) - obj_w_half;
 8003e02:	1ae4      	subs	r4, r4, r3
 8003e04:	e02f      	b.n	8003e66 <obj_align_mid_core+0xe8>
 8003e06:	8aac      	ldrh	r4, [r5, #20]
 8003e08:	3401      	adds	r4, #1
 8003e0a:	1be4      	subs	r4, r4, r7
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8003e0c:	b224      	sxth	r4, r4
 8003e0e:	0fe0      	lsrs	r0, r4, #31
 8003e10:	1904      	adds	r4, r0, r4
 8003e12:	1064      	asrs	r4, r4, #1
            new_x = lv_obj_get_width(base) - obj_w_half;
 8003e14:	1ae4      	subs	r4, r4, r3
 8003e16:	e009      	b.n	8003e2c <obj_align_mid_core+0xae>
 8003e18:	8aac      	ldrh	r4, [r5, #20]
 8003e1a:	3401      	adds	r4, #1
 8003e1c:	1be4      	subs	r4, r4, r7
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8003e1e:	b224      	sxth	r4, r4
 8003e20:	0fe0      	lsrs	r0, r4, #31
 8003e22:	1904      	adds	r4, r0, r4
 8003e24:	1064      	asrs	r4, r4, #1
            new_x = lv_obj_get_width(base) - obj_w_half;
 8003e26:	1ae4      	subs	r4, r4, r3
 8003e28:	e02a      	b.n	8003e80 <obj_align_mid_core+0x102>
            new_x = -obj_w_half;
 8003e2a:	425c      	negs	r4, r3
            new_y = -obj_h_half;
 8003e2c:	4249      	negs	r1, r1
            new_x = lv_obj_get_width(base) - obj_w_half;
 8003e2e:	b224      	sxth	r4, r4
            new_y = -obj_h_half;
 8003e30:	b208      	sxth	r0, r1
    new_y -= par_abs_y;
 8003e32:	9900      	ldr	r1, [sp, #0]
    return obj->parent;
 8003e34:	6833      	ldr	r3, [r6, #0]
    new_y -= par_abs_y;
 8003e36:	9a05      	ldr	r2, [sp, #20]
 8003e38:	188a      	adds	r2, r1, r2
 8003e3a:	8a59      	ldrh	r1, [r3, #18]
 8003e3c:	1a52      	subs	r2, r2, r1
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
 8003e3e:	9903      	ldr	r1, [sp, #12]
    new_y -= par_abs_y;
 8003e40:	1812      	adds	r2, r2, r0
 8003e42:	b212      	sxth	r2, r2
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
 8003e44:	2900      	cmp	r1, #0
 8003e46:	d030      	beq.n	8003eaa <obj_align_mid_core+0x12c>
    new_x -= par_abs_x;
 8003e48:	9904      	ldr	r1, [sp, #16]
 8003e4a:	8a1b      	ldrh	r3, [r3, #16]
 8003e4c:	1879      	adds	r1, r7, r1
 8003e4e:	1ac9      	subs	r1, r1, r3
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
 8003e50:	9b02      	ldr	r3, [sp, #8]
    new_x -= par_abs_x;
 8003e52:	1909      	adds	r1, r1, r4
 8003e54:	b209      	sxth	r1, r1
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
 8003e56:	0030      	movs	r0, r6
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d023      	beq.n	8003ea4 <obj_align_mid_core+0x126>
 8003e5c:	f7ff fe36 	bl	8003acc <lv_obj_set_pos>
}
 8003e60:	b007      	add	sp, #28
 8003e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
            new_x = -obj_w_half;
 8003e64:	425c      	negs	r4, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8003e66:	8ae8      	ldrh	r0, [r5, #22]
 8003e68:	9b00      	ldr	r3, [sp, #0]
 8003e6a:	3001      	adds	r0, #1
 8003e6c:	1ac0      	subs	r0, r0, r3
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8003e6e:	b200      	sxth	r0, r0
 8003e70:	0fc3      	lsrs	r3, r0, #31
 8003e72:	1818      	adds	r0, r3, r0
            new_x = lv_obj_get_width(base) - obj_w_half;
 8003e74:	b224      	sxth	r4, r4
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8003e76:	1040      	asrs	r0, r0, #1
            new_y = lv_obj_get_height(base) - obj_h_half;
 8003e78:	1a40      	subs	r0, r0, r1
 8003e7a:	b200      	sxth	r0, r0
            break;
 8003e7c:	e7d9      	b.n	8003e32 <obj_align_mid_core+0xb4>
            new_x = -obj_w_half;
 8003e7e:	425c      	negs	r4, r3
 8003e80:	8ae8      	ldrh	r0, [r5, #22]
 8003e82:	9b00      	ldr	r3, [sp, #0]
 8003e84:	3001      	adds	r0, #1
            new_x = lv_obj_get_width(base) - obj_w_half;
 8003e86:	b224      	sxth	r4, r4
 8003e88:	1ac0      	subs	r0, r0, r3
 8003e8a:	e7f5      	b.n	8003e78 <obj_align_mid_core+0xfa>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8003e8c:	8aac      	ldrh	r4, [r5, #20]
 8003e8e:	3401      	adds	r4, #1
 8003e90:	1be4      	subs	r4, r4, r7
 8003e92:	e7bf      	b.n	8003e14 <obj_align_mid_core+0x96>
 8003e94:	8aac      	ldrh	r4, [r5, #20]
 8003e96:	3401      	adds	r4, #1
 8003e98:	1be4      	subs	r4, r4, r7
 8003e9a:	e7b2      	b.n	8003e02 <obj_align_mid_core+0x84>
 8003e9c:	8aac      	ldrh	r4, [r5, #20]
 8003e9e:	3401      	adds	r4, #1
 8003ea0:	1be4      	subs	r4, r4, r7
 8003ea2:	e7c0      	b.n	8003e26 <obj_align_mid_core+0xa8>
    else if(x_set) lv_obj_set_x(obj, new_x);
 8003ea4:	f7ff ff60 	bl	8003d68 <lv_obj_set_x>
 8003ea8:	e7da      	b.n	8003e60 <obj_align_mid_core+0xe2>
    else if(y_set) lv_obj_set_y(obj, new_y);
 8003eaa:	9b02      	ldr	r3, [sp, #8]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0d7      	beq.n	8003e60 <obj_align_mid_core+0xe2>
 8003eb0:	0011      	movs	r1, r2
 8003eb2:	0030      	movs	r0, r6
 8003eb4:	f7ff ff44 	bl	8003d40 <lv_obj_set_y>
}
 8003eb8:	e7d2      	b.n	8003e60 <obj_align_mid_core+0xe2>

08003eba <lv_obj_align_mid>:
{
 8003eba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ebc:	b087      	sub	sp, #28
 8003ebe:	001e      	movs	r6, r3
 8003ec0:	ab0c      	add	r3, sp, #48	; 0x30
 8003ec2:	0017      	movs	r7, r2
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	5e9b      	ldrsh	r3, [r3, r2]
 8003ec8:	0004      	movs	r4, r0
 8003eca:	1e0d      	subs	r5, r1, #0
 8003ecc:	9305      	str	r3, [sp, #20]
    if(base == NULL) {
 8003ece:	d100      	bne.n	8003ed2 <lv_obj_align_mid+0x18>
    return obj->parent;
 8003ed0:	6805      	ldr	r5, [r0, #0]
    obj_align_mid_core(obj, base, align, true, true, x_ofs, y_ofs);
 8003ed2:	9b05      	ldr	r3, [sp, #20]
 8003ed4:	003a      	movs	r2, r7
 8003ed6:	9302      	str	r3, [sp, #8]
 8003ed8:	2301      	movs	r3, #1
 8003eda:	0020      	movs	r0, r4
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	9601      	str	r6, [sp, #4]
 8003ee0:	0029      	movs	r1, r5
 8003ee2:	f7ff ff4c 	bl	8003d7e <obj_align_mid_core>
    obj->realign.align       = align;
 8003ee6:	0022      	movs	r2, r4
 8003ee8:	0023      	movs	r3, r4
 8003eea:	3248      	adds	r2, #72	; 0x48
 8003eec:	7017      	strb	r7, [r2, #0]
    obj->realign.xofs        = x_ofs;
 8003eee:	1da2      	adds	r2, r4, #6
 8003ef0:	87d6      	strh	r6, [r2, #62]	; 0x3e
    obj->realign.yofs        = y_ofs;
 8003ef2:	9a05      	ldr	r2, [sp, #20]
    obj->realign.align       = align;
 8003ef4:	3308      	adds	r3, #8
    obj->realign.yofs        = y_ofs;
 8003ef6:	87da      	strh	r2, [r3, #62]	; 0x3e
    obj->realign.mid_align = 1;
 8003ef8:	2302      	movs	r3, #2
    obj->realign.base        = base;
 8003efa:	6425      	str	r5, [r4, #64]	; 0x40
    obj->realign.mid_align = 1;
 8003efc:	3449      	adds	r4, #73	; 0x49
 8003efe:	7822      	ldrb	r2, [r4, #0]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	7023      	strb	r3, [r4, #0]
}
 8003f04:	b007      	add	sp, #28
 8003f06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f08 <lv_obj_realign>:
{
 8003f08:	0003      	movs	r3, r0
 8003f0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f0c:	0004      	movs	r4, r0
 8003f0e:	3348      	adds	r3, #72	; 0x48
 8003f10:	781a      	ldrb	r2, [r3, #0]
 8003f12:	3408      	adds	r4, #8
 8003f14:	1d83      	adds	r3, r0, #6
 8003f16:	253e      	movs	r5, #62	; 0x3e
 8003f18:	5f5b      	ldrsh	r3, [r3, r5]
 8003f1a:	253e      	movs	r5, #62	; 0x3e
 8003f1c:	5f64      	ldrsh	r4, [r4, r5]
    if(obj->realign.mid_align)
 8003f1e:	0005      	movs	r5, r0
 8003f20:	3549      	adds	r5, #73	; 0x49
 8003f22:	782d      	ldrb	r5, [r5, #0]
 8003f24:	6c01      	ldr	r1, [r0, #64]	; 0x40
        lv_obj_align_mid(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8003f26:	9400      	str	r4, [sp, #0]
    if(obj->realign.mid_align)
 8003f28:	07ad      	lsls	r5, r5, #30
 8003f2a:	d502      	bpl.n	8003f32 <lv_obj_realign+0x2a>
        lv_obj_align_mid(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8003f2c:	f7ff ffc5 	bl	8003eba <lv_obj_align_mid>
}
 8003f30:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8003f32:	f7ff fe11 	bl	8003b58 <lv_obj_align>
}
 8003f36:	e7fb      	b.n	8003f30 <lv_obj_realign+0x28>

08003f38 <lv_obj_set_size>:
 8003f38:	8a83      	ldrh	r3, [r0, #20]
{
 8003f3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f3c:	0016      	movs	r6, r2
 8003f3e:	8a02      	ldrh	r2, [r0, #16]
 8003f40:	3301      	adds	r3, #1
 8003f42:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 8003f44:	b21b      	sxth	r3, r3
{
 8003f46:	0004      	movs	r4, r0
 8003f48:	000d      	movs	r5, r1
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 8003f4a:	4299      	cmp	r1, r3
 8003f4c:	d106      	bne.n	8003f5c <lv_obj_set_size+0x24>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8003f4e:	8ac3      	ldrh	r3, [r0, #22]
 8003f50:	8a42      	ldrh	r2, [r0, #18]
 8003f52:	3301      	adds	r3, #1
 8003f54:	1a9b      	subs	r3, r3, r2
 8003f56:	b21b      	sxth	r3, r3
 8003f58:	429e      	cmp	r6, r3
 8003f5a:	d02c      	beq.n	8003fb6 <lv_obj_set_size+0x7e>
    lv_obj_invalidate(obj);
 8003f5c:	0020      	movs	r0, r4
 8003f5e:	f7ff fd7e 	bl	8003a5e <lv_obj_invalidate>
    lv_area_copy(cords_p, &obj->coords);
 8003f62:	0021      	movs	r1, r4
 8003f64:	4668      	mov	r0, sp
 8003f66:	3110      	adds	r1, #16
 8003f68:	f7ff fc1e 	bl	80037a8 <lv_area_copy>
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8003f6c:	8a63      	ldrh	r3, [r4, #18]
 8003f6e:	3e01      	subs	r6, #1
 8003f70:	199e      	adds	r6, r3, r6
        obj->coords.x2 = obj->coords.x1 + w - 1;
 8003f72:	8a23      	ldrh	r3, [r4, #16]
 8003f74:	3d01      	subs	r5, #1
 8003f76:	195d      	adds	r5, r3, r5
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8003f78:	82e6      	strh	r6, [r4, #22]
        obj->coords.x2 = obj->coords.x1 + w - 1;
 8003f7a:	82a5      	strh	r5, [r4, #20]
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
 8003f7c:	466a      	mov	r2, sp
 8003f7e:	2102      	movs	r1, #2
 8003f80:	0020      	movs	r0, r4
 8003f82:	69e3      	ldr	r3, [r4, #28]
 8003f84:	4798      	blx	r3
    return obj->parent;
 8003f86:	6820      	ldr	r0, [r4, #0]
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	d003      	beq.n	8003f94 <lv_obj_set_size+0x5c>
 8003f8c:	69c3      	ldr	r3, [r0, #28]
 8003f8e:	0022      	movs	r2, r4
 8003f90:	2101      	movs	r1, #1
 8003f92:	4798      	blx	r3
    _LV_LL_READ(obj->child_ll, i) {
 8003f94:	1d26      	adds	r6, r4, #4
 8003f96:	0030      	movs	r0, r6
 8003f98:	f007 ffe9 	bl	800bf6e <_lv_ll_get_head>
 8003f9c:	1e05      	subs	r5, r0, #0
 8003f9e:	d10b      	bne.n	8003fb8 <lv_obj_set_size+0x80>
    lv_obj_invalidate(obj);
 8003fa0:	0020      	movs	r0, r4
 8003fa2:	f7ff fd5c 	bl	8003a5e <lv_obj_invalidate>
    if(obj->realign.auto_realign) lv_obj_realign(obj);
 8003fa6:	0023      	movs	r3, r4
 8003fa8:	3349      	adds	r3, #73	; 0x49
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	07db      	lsls	r3, r3, #31
 8003fae:	d502      	bpl.n	8003fb6 <lv_obj_set_size+0x7e>
 8003fb0:	0020      	movs	r0, r4
 8003fb2:	f7ff ffa9 	bl	8003f08 <lv_obj_realign>
}
 8003fb6:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG,  &ori);
 8003fb8:	466a      	mov	r2, sp
 8003fba:	2103      	movs	r1, #3
 8003fbc:	0028      	movs	r0, r5
 8003fbe:	69eb      	ldr	r3, [r5, #28]
 8003fc0:	4798      	blx	r3
    _LV_LL_READ(obj->child_ll, i) {
 8003fc2:	0029      	movs	r1, r5
 8003fc4:	0030      	movs	r0, r6
 8003fc6:	f007 ffda 	bl	800bf7e <_lv_ll_get_next>
 8003fca:	e7e7      	b.n	8003f9c <lv_obj_set_size+0x64>

08003fcc <lv_obj_set_width>:
{
 8003fcc:	b510      	push	{r4, lr}
 8003fce:	8ac2      	ldrh	r2, [r0, #22]
 8003fd0:	8a43      	ldrh	r3, [r0, #18]
 8003fd2:	3201      	adds	r2, #1
 8003fd4:	1ad2      	subs	r2, r2, r3
    lv_obj_set_size(obj, w, lv_obj_get_height(obj));
 8003fd6:	b212      	sxth	r2, r2
 8003fd8:	f7ff ffae 	bl	8003f38 <lv_obj_set_size>
}
 8003fdc:	bd10      	pop	{r4, pc}

08003fde <lv_obj_set_height>:
{
 8003fde:	b510      	push	{r4, lr}
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8003fe0:	8a83      	ldrh	r3, [r0, #20]
 8003fe2:	000a      	movs	r2, r1
 8003fe4:	8a01      	ldrh	r1, [r0, #16]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	1a59      	subs	r1, r3, r1
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
 8003fea:	b209      	sxth	r1, r1
 8003fec:	f7ff ffa4 	bl	8003f38 <lv_obj_set_size>
}
 8003ff0:	bd10      	pop	{r4, pc}
	...

08003ff4 <lv_obj_create>:
{
 8003ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ff6:	b087      	sub	sp, #28
 8003ff8:	9001      	str	r0, [sp, #4]
 8003ffa:	000e      	movs	r6, r1
    if(parent == NULL) {
 8003ffc:	2800      	cmp	r0, #0
 8003ffe:	d000      	beq.n	8004002 <lv_obj_create+0xe>
 8004000:	e06b      	b.n	80040da <lv_obj_create+0xe6>
        lv_disp_t * disp = lv_disp_get_default();
 8004002:	f007 fb63 	bl	800b6cc <lv_disp_get_default>
        if(!disp) {
 8004006:	2800      	cmp	r0, #0
 8004008:	d103      	bne.n	8004012 <lv_obj_create+0x1e>
            return NULL;
 800400a:	2400      	movs	r4, #0
}
 800400c:	0020      	movs	r0, r4
 800400e:	b007      	add	sp, #28
 8004010:	bdf0      	pop	{r4, r5, r6, r7, pc}
        new_obj = _lv_ll_ins_head(&disp->scr_ll);
 8004012:	3030      	adds	r0, #48	; 0x30
 8004014:	f007 ff6b 	bl	800beee <_lv_ll_ins_head>
 8004018:	1e04      	subs	r4, r0, #0
        if(new_obj == NULL) return NULL;
 800401a:	d0f6      	beq.n	800400a <lv_obj_create+0x16>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
 800401c:	214c      	movs	r1, #76	; 0x4c
 800401e:	f008 fb01 	bl	800c624 <_lv_memset_00>
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 8004022:	0022      	movs	r2, r4
 8004024:	2160      	movs	r1, #96	; 0x60
 8004026:	3234      	adds	r2, #52	; 0x34
 8004028:	7853      	ldrb	r3, [r2, #1]
 800402a:	438b      	bics	r3, r1
 800402c:	7053      	strb	r3, [r2, #1]
        new_obj->signal_cb = lv_obj_signal;
 800402e:	4bb9      	ldr	r3, [pc, #740]	; (8004314 <lv_obj_create+0x320>)
 8004030:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
 8004032:	4bb9      	ldr	r3, [pc, #740]	; (8004318 <lv_obj_create+0x324>)
 8004034:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
 8004036:	9b01      	ldr	r3, [sp, #4]
 8004038:	61a3      	str	r3, [r4, #24]
        new_obj->coords.x1    = 0;
 800403a:	6123      	str	r3, [r4, #16]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
 800403c:	0018      	movs	r0, r3
 800403e:	f007 fb4b 	bl	800b6d8 <lv_disp_get_hor_res>
 8004042:	3801      	subs	r0, #1
 8004044:	82a0      	strh	r0, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 8004046:	9801      	ldr	r0, [sp, #4]
 8004048:	f007 fb5c 	bl	800b704 <lv_disp_get_ver_res>
 800404c:	3801      	subs	r0, #1
 800404e:	82e0      	strh	r0, [r4, #22]
    _lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8004050:	1d20      	adds	r0, r4, #4
 8004052:	214c      	movs	r1, #76	; 0x4c
 8004054:	f007 ff43 	bl	800bede <_lv_ll_init>
    new_obj->realign.align        = LV_ALIGN_CENTER;
 8004058:	0023      	movs	r3, r4
 800405a:	2200      	movs	r2, #0
 800405c:	3308      	adds	r3, #8
 800405e:	9304      	str	r3, [sp, #16]
 8004060:	3340      	adds	r3, #64	; 0x40
 8004062:	701a      	strb	r2, [r3, #0]
 8004064:	9305      	str	r3, [sp, #20]
    new_obj->realign.xofs         = 0;
 8004066:	1da3      	adds	r3, r4, #6
 8004068:	87da      	strh	r2, [r3, #62]	; 0x3e
    new_obj->realign.yofs         = 0;
 800406a:	9b04      	ldr	r3, [sp, #16]
    new_obj->realign.auto_realign = 0;
 800406c:	2701      	movs	r7, #1
    new_obj->realign.yofs         = 0;
 800406e:	87da      	strh	r2, [r3, #62]	; 0x3e
    new_obj->realign.auto_realign = 0;
 8004070:	0023      	movs	r3, r4
    new_obj->realign.base         = NULL;
 8004072:	6422      	str	r2, [r4, #64]	; 0x40
    new_obj->realign.auto_realign = 0;
 8004074:	3349      	adds	r3, #73	; 0x49
 8004076:	9302      	str	r3, [sp, #8]
    new_obj->drag_dir     = LV_DRAG_DIR_BOTH;
 8004078:	0025      	movs	r5, r4
    new_obj->realign.auto_realign = 0;
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	9902      	ldr	r1, [sp, #8]
 800407e:	43bb      	bics	r3, r7
 8004080:	700b      	strb	r3, [r1, #0]
    new_obj->drag_dir     = LV_DRAG_DIR_BOTH;
 8004082:	231c      	movs	r3, #28
 8004084:	3534      	adds	r5, #52	; 0x34
 8004086:	7868      	ldrb	r0, [r5, #1]
    new_obj->gesture_parent = parent ? 1 : 0;
 8004088:	9901      	ldr	r1, [sp, #4]
    new_obj->drag_dir     = LV_DRAG_DIR_BOTH;
 800408a:	4398      	bics	r0, r3
    new_obj->gesture_parent = parent ? 1 : 0;
 800408c:	1e4b      	subs	r3, r1, #1
 800408e:	4199      	sbcs	r1, r3
 8004090:	230c      	movs	r3, #12
 8004092:	4303      	orrs	r3, r0
 8004094:	43bb      	bics	r3, r7
    new_obj->focus_parent  = 0;
 8004096:	430b      	orrs	r3, r1
 8004098:	2102      	movs	r1, #2
 800409a:	438b      	bics	r3, r1
    new_obj->ext_click_pad_hor = 0;
 800409c:	6322      	str	r2, [r4, #48]	; 0x30
    new_obj->focus_parent  = 0;
 800409e:	706b      	strb	r3, [r5, #1]
    lv_style_list_init(&new_obj->style_list);
 80040a0:	0023      	movs	r3, r4
 80040a2:	3328      	adds	r3, #40	; 0x28
    new_obj->ext_draw_pad = 0;
 80040a4:	702f      	strb	r7, [r5, #0]
    lv_style_list_init(&new_obj->style_list);
 80040a6:	0018      	movs	r0, r3
    new_obj->group_p = NULL;
 80040a8:	63a2      	str	r2, [r4, #56]	; 0x38
 80040aa:	87a2      	strh	r2, [r4, #60]	; 0x3c
    new_obj->ext_attr = NULL;
 80040ac:	6262      	str	r2, [r4, #36]	; 0x24
    lv_style_list_init(&new_obj->style_list);
 80040ae:	9303      	str	r3, [sp, #12]
 80040b0:	f002 faed 	bl	800668e <lv_style_list_init>
    if(copy == NULL) {
 80040b4:	2e00      	cmp	r6, #0
 80040b6:	d162      	bne.n	800417e <lv_obj_create+0x18a>
        if(parent != NULL) lv_theme_apply(new_obj, LV_THEME_OBJ);
 80040b8:	9b01      	ldr	r3, [sp, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d05a      	beq.n	8004174 <lv_obj_create+0x180>
 80040be:	2102      	movs	r1, #2
 80040c0:	0020      	movs	r0, r4
 80040c2:	f008 ff5d 	bl	800cf80 <lv_theme_apply>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
 80040c6:	9b01      	ldr	r3, [sp, #4]
 80040c8:	0022      	movs	r2, r4
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	2101      	movs	r1, #1
 80040ce:	9801      	ldr	r0, [sp, #4]
 80040d0:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
 80040d2:	0020      	movs	r0, r4
 80040d4:	f7ff fcc3 	bl	8003a5e <lv_obj_invalidate>
 80040d8:	e798      	b.n	800400c <lv_obj_create+0x18>
        new_obj = _lv_ll_ins_head(&parent->child_ll);
 80040da:	9b01      	ldr	r3, [sp, #4]
 80040dc:	1d18      	adds	r0, r3, #4
 80040de:	f007 ff06 	bl	800beee <_lv_ll_ins_head>
 80040e2:	1e04      	subs	r4, r0, #0
        if(new_obj == NULL) return NULL;
 80040e4:	d100      	bne.n	80040e8 <lv_obj_create+0xf4>
 80040e6:	e790      	b.n	800400a <lv_obj_create+0x16>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
 80040e8:	214c      	movs	r1, #76	; 0x4c
 80040ea:	f008 fa9b 	bl	800c624 <_lv_memset_00>
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 80040ee:	0022      	movs	r2, r4
 80040f0:	2160      	movs	r1, #96	; 0x60
        new_obj->event_cb = NULL;
 80040f2:	2700      	movs	r7, #0
        new_obj->parent = parent;
 80040f4:	9b01      	ldr	r3, [sp, #4]
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 80040f6:	3234      	adds	r2, #52	; 0x34
        new_obj->parent = parent;
 80040f8:	6023      	str	r3, [r4, #0]
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 80040fa:	7853      	ldrb	r3, [r2, #1]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 80040fc:	0038      	movs	r0, r7
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 80040fe:	438b      	bics	r3, r1
 8004100:	7053      	strb	r3, [r2, #1]
        new_obj->signal_cb = lv_obj_signal;
 8004102:	4b84      	ldr	r3, [pc, #528]	; (8004314 <lv_obj_create+0x320>)
        new_obj->event_cb = NULL;
 8004104:	61a7      	str	r7, [r4, #24]
        new_obj->signal_cb = lv_obj_signal;
 8004106:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
 8004108:	4b83      	ldr	r3, [pc, #524]	; (8004318 <lv_obj_create+0x324>)
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 800410a:	2532      	movs	r5, #50	; 0x32
        new_obj->design_cb = lv_obj_design;
 800410c:	6223      	str	r3, [r4, #32]
        new_obj->coords.y1    = parent->coords.y1;
 800410e:	9b01      	ldr	r3, [sp, #4]
 8004110:	2212      	movs	r2, #18
 8004112:	5e9b      	ldrsh	r3, [r3, r2]
 8004114:	8263      	strh	r3, [r4, #18]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 8004116:	9b01      	ldr	r3, [sp, #4]
 8004118:	8a5b      	ldrh	r3, [r3, #18]
 800411a:	9302      	str	r3, [sp, #8]
 800411c:	f007 fb08 	bl	800b730 <lv_disp_get_dpi>
 8004120:	4368      	muls	r0, r5
 8004122:	2301      	movs	r3, #1
 8004124:	28ef      	cmp	r0, #239	; 0xef
 8004126:	dd08      	ble.n	800413a <lv_obj_create+0x146>
 8004128:	0038      	movs	r0, r7
 800412a:	f007 fb01 	bl	800b730 <lv_disp_get_dpi>
 800412e:	4368      	muls	r0, r5
 8004130:	21a0      	movs	r1, #160	; 0xa0
 8004132:	3050      	adds	r0, #80	; 0x50
 8004134:	f7fc f8a8 	bl	8000288 <__divsi3>
 8004138:	b283      	uxth	r3, r0
 800413a:	9a02      	ldr	r2, [sp, #8]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 800413c:	2000      	movs	r0, #0
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 800413e:	18d3      	adds	r3, r2, r3
 8004140:	82e3      	strh	r3, [r4, #22]
            new_obj->coords.x1    = parent->coords.x1;
 8004142:	9b01      	ldr	r3, [sp, #4]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 8004144:	2564      	movs	r5, #100	; 0x64
            new_obj->coords.x1    = parent->coords.x1;
 8004146:	2210      	movs	r2, #16
 8004148:	5e9b      	ldrsh	r3, [r3, r2]
 800414a:	8223      	strh	r3, [r4, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 800414c:	9b01      	ldr	r3, [sp, #4]
 800414e:	8a1f      	ldrh	r7, [r3, #16]
 8004150:	f007 faee 	bl	800b730 <lv_disp_get_dpi>
 8004154:	4368      	muls	r0, r5
 8004156:	2301      	movs	r3, #1
 8004158:	28ef      	cmp	r0, #239	; 0xef
 800415a:	dd08      	ble.n	800416e <lv_obj_create+0x17a>
 800415c:	2000      	movs	r0, #0
 800415e:	f007 fae7 	bl	800b730 <lv_disp_get_dpi>
 8004162:	4368      	muls	r0, r5
 8004164:	21a0      	movs	r1, #160	; 0xa0
 8004166:	3050      	adds	r0, #80	; 0x50
 8004168:	f7fc f88e 	bl	8000288 <__divsi3>
 800416c:	b283      	uxth	r3, r0
 800416e:	18fb      	adds	r3, r7, r3
 8004170:	82a3      	strh	r3, [r4, #20]
 8004172:	e76d      	b.n	8004050 <lv_obj_create+0x5c>
        else lv_theme_apply(new_obj, LV_THEME_SCR);
 8004174:	0039      	movs	r1, r7
 8004176:	0020      	movs	r0, r4
 8004178:	f008 ff02 	bl	800cf80 <lv_theme_apply>
 800417c:	e746      	b.n	800400c <lv_obj_create+0x18>
        lv_style_list_copy(&new_obj->style_list, &copy->style_list);
 800417e:	0031      	movs	r1, r6
 8004180:	9803      	ldr	r0, [sp, #12]
 8004182:	3128      	adds	r1, #40	; 0x28
 8004184:	f002 fd03 	bl	8006b8e <lv_style_list_copy>
        lv_area_copy(&new_obj->coords, &copy->coords);
 8004188:	0031      	movs	r1, r6
 800418a:	0020      	movs	r0, r4
 800418c:	3110      	adds	r1, #16
 800418e:	3010      	adds	r0, #16
 8004190:	f7ff fb0a 	bl	80037a8 <lv_area_copy>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 8004194:	2232      	movs	r2, #50	; 0x32
 8004196:	5eb3      	ldrsh	r3, [r6, r2]
        new_obj->base_dir = copy->base_dir;
 8004198:	2160      	movs	r1, #96	; 0x60
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 800419a:	8663      	strh	r3, [r4, #50]	; 0x32
        new_obj->ext_click_pad_hor = copy->ext_click_pad_hor;
 800419c:	0033      	movs	r3, r6
 800419e:	3330      	adds	r3, #48	; 0x30
 80041a0:	781a      	ldrb	r2, [r3, #0]
 80041a2:	0023      	movs	r3, r4
 80041a4:	3330      	adds	r3, #48	; 0x30
 80041a6:	701a      	strb	r2, [r3, #0]
        new_obj->ext_click_pad_ver = copy->ext_click_pad_ver;
 80041a8:	0033      	movs	r3, r6
 80041aa:	3331      	adds	r3, #49	; 0x31
 80041ac:	781a      	ldrb	r2, [r3, #0]
 80041ae:	0023      	movs	r3, r4
 80041b0:	3331      	adds	r3, #49	; 0x31
 80041b2:	701a      	strb	r2, [r3, #0]
        new_obj->base_dir = copy->base_dir;
 80041b4:	0032      	movs	r2, r6
 80041b6:	2060      	movs	r0, #96	; 0x60
 80041b8:	3235      	adds	r2, #53	; 0x35
 80041ba:	7813      	ldrb	r3, [r2, #0]
 80041bc:	9203      	str	r2, [sp, #12]
 80041be:	4019      	ands	r1, r3
 80041c0:	786b      	ldrb	r3, [r5, #1]
 80041c2:	4383      	bics	r3, r0
 80041c4:	430b      	orrs	r3, r1
 80041c6:	706b      	strb	r3, [r5, #1]
        new_obj->realign.align        = copy->realign.align;
 80041c8:	0033      	movs	r3, r6
 80041ca:	3348      	adds	r3, #72	; 0x48
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	9a05      	ldr	r2, [sp, #20]
 80041d0:	7013      	strb	r3, [r2, #0]
        new_obj->realign.xofs         = copy->realign.xofs;
 80041d2:	1db3      	adds	r3, r6, #6
 80041d4:	223e      	movs	r2, #62	; 0x3e
 80041d6:	5e9b      	ldrsh	r3, [r3, r2]
 80041d8:	1da2      	adds	r2, r4, #6
 80041da:	87d3      	strh	r3, [r2, #62]	; 0x3e
        new_obj->realign.yofs         = copy->realign.yofs;
 80041dc:	0033      	movs	r3, r6
 80041de:	3308      	adds	r3, #8
 80041e0:	223e      	movs	r2, #62	; 0x3e
 80041e2:	5e9b      	ldrsh	r3, [r3, r2]
 80041e4:	9a04      	ldr	r2, [sp, #16]
 80041e6:	87d3      	strh	r3, [r2, #62]	; 0x3e
        new_obj->realign.base         = copy->realign.base;
 80041e8:	6c33      	ldr	r3, [r6, #64]	; 0x40
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 80041ea:	9a02      	ldr	r2, [sp, #8]
        new_obj->realign.base         = copy->realign.base;
 80041ec:	6423      	str	r3, [r4, #64]	; 0x40
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 80041ee:	0033      	movs	r3, r6
 80041f0:	3349      	adds	r3, #73	; 0x49
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	07db      	lsls	r3, r3, #31
 80041f6:	0fd9      	lsrs	r1, r3, #31
 80041f8:	9b02      	ldr	r3, [sp, #8]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	43bb      	bics	r3, r7
 80041fe:	430b      	orrs	r3, r1
 8004200:	7013      	strb	r3, [r2, #0]
        new_obj->event_cb = copy->event_cb;
 8004202:	69b3      	ldr	r3, [r6, #24]
        new_obj->adv_hittest  = copy->adv_hittest;
 8004204:	227f      	movs	r2, #127	; 0x7f
        new_obj->event_cb = copy->event_cb;
 8004206:	61a3      	str	r3, [r4, #24]
        new_obj->adv_hittest  = copy->adv_hittest;
 8004208:	0033      	movs	r3, r6
 800420a:	3334      	adds	r3, #52	; 0x34
 800420c:	7819      	ldrb	r1, [r3, #0]
 800420e:	09c9      	lsrs	r1, r1, #7
 8004210:	01c8      	lsls	r0, r1, #7
 8004212:	7829      	ldrb	r1, [r5, #0]
 8004214:	4011      	ands	r1, r2
 8004216:	4301      	orrs	r1, r0
 8004218:	7029      	strb	r1, [r5, #0]
        new_obj->click        = copy->click;
 800421a:	7819      	ldrb	r1, [r3, #0]
        new_obj->drag         = copy->drag;
 800421c:	3a7d      	subs	r2, #125	; 0x7d
        new_obj->click        = copy->click;
 800421e:	07c9      	lsls	r1, r1, #31
 8004220:	0fc8      	lsrs	r0, r1, #31
 8004222:	7829      	ldrb	r1, [r5, #0]
 8004224:	43b9      	bics	r1, r7
 8004226:	4301      	orrs	r1, r0
 8004228:	7029      	strb	r1, [r5, #0]
        new_obj->drag         = copy->drag;
 800422a:	7819      	ldrb	r1, [r3, #0]
 800422c:	7828      	ldrb	r0, [r5, #0]
 800422e:	0849      	lsrs	r1, r1, #1
 8004230:	4039      	ands	r1, r7
 8004232:	4390      	bics	r0, r2
 8004234:	0049      	lsls	r1, r1, #1
        new_obj->drag_dir     = copy->drag_dir;
 8004236:	9a03      	ldr	r2, [sp, #12]
        new_obj->drag         = copy->drag;
 8004238:	4301      	orrs	r1, r0
        new_obj->drag_dir     = copy->drag_dir;
 800423a:	201c      	movs	r0, #28
        new_obj->drag         = copy->drag;
 800423c:	7029      	strb	r1, [r5, #0]
        new_obj->drag_dir     = copy->drag_dir;
 800423e:	7811      	ldrb	r1, [r2, #0]
 8004240:	221c      	movs	r2, #28
 8004242:	4008      	ands	r0, r1
 8004244:	7869      	ldrb	r1, [r5, #1]
 8004246:	4391      	bics	r1, r2
 8004248:	4301      	orrs	r1, r0
 800424a:	7069      	strb	r1, [r5, #1]
        new_obj->drag_throw   = copy->drag_throw;
 800424c:	7819      	ldrb	r1, [r3, #0]
 800424e:	7828      	ldrb	r0, [r5, #0]
 8004250:	0889      	lsrs	r1, r1, #2
 8004252:	4039      	ands	r1, r7
 8004254:	3a18      	subs	r2, #24
 8004256:	4390      	bics	r0, r2
 8004258:	0089      	lsls	r1, r1, #2
 800425a:	4301      	orrs	r1, r0
 800425c:	7029      	strb	r1, [r5, #0]
        new_obj->drag_parent  = copy->drag_parent;
 800425e:	7819      	ldrb	r1, [r3, #0]
 8004260:	7828      	ldrb	r0, [r5, #0]
 8004262:	08c9      	lsrs	r1, r1, #3
 8004264:	4039      	ands	r1, r7
 8004266:	3204      	adds	r2, #4
 8004268:	4390      	bics	r0, r2
 800426a:	00c9      	lsls	r1, r1, #3
 800426c:	4301      	orrs	r1, r0
 800426e:	7029      	strb	r1, [r5, #0]
        new_obj->hidden       = copy->hidden;
 8004270:	7819      	ldrb	r1, [r3, #0]
 8004272:	7828      	ldrb	r0, [r5, #0]
 8004274:	0909      	lsrs	r1, r1, #4
 8004276:	4039      	ands	r1, r7
 8004278:	3208      	adds	r2, #8
 800427a:	4390      	bics	r0, r2
 800427c:	0109      	lsls	r1, r1, #4
 800427e:	4301      	orrs	r1, r0
 8004280:	7029      	strb	r1, [r5, #0]
        new_obj->top          = copy->top;
 8004282:	7819      	ldrb	r1, [r3, #0]
 8004284:	7828      	ldrb	r0, [r5, #0]
 8004286:	0949      	lsrs	r1, r1, #5
 8004288:	4039      	ands	r1, r7
 800428a:	3210      	adds	r2, #16
 800428c:	4390      	bics	r0, r2
 800428e:	0149      	lsls	r1, r1, #5
 8004290:	4301      	orrs	r1, r0
        new_obj->parent_event = copy->parent_event;
 8004292:	2040      	movs	r0, #64	; 0x40
        new_obj->top          = copy->top;
 8004294:	7029      	strb	r1, [r5, #0]
        new_obj->parent_event = copy->parent_event;
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	b2c9      	uxtb	r1, r1
 800429a:	099b      	lsrs	r3, r3, #6
 800429c:	403b      	ands	r3, r7
 800429e:	4381      	bics	r1, r0
 80042a0:	019b      	lsls	r3, r3, #6
 80042a2:	430b      	orrs	r3, r1
 80042a4:	702b      	strb	r3, [r5, #0]
        new_obj->protect      = copy->protect;
 80042a6:	0033      	movs	r3, r6
 80042a8:	333c      	adds	r3, #60	; 0x3c
 80042aa:	7819      	ldrb	r1, [r3, #0]
 80042ac:	0023      	movs	r3, r4
 80042ae:	333c      	adds	r3, #60	; 0x3c
 80042b0:	7019      	strb	r1, [r3, #0]
        new_obj->gesture_parent = copy->gesture_parent;
 80042b2:	9b03      	ldr	r3, [sp, #12]
        new_obj->focus_parent = copy->focus_parent;
 80042b4:	3a1e      	subs	r2, #30
        new_obj->gesture_parent = copy->gesture_parent;
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	07db      	lsls	r3, r3, #31
 80042ba:	0fd9      	lsrs	r1, r3, #31
 80042bc:	786b      	ldrb	r3, [r5, #1]
 80042be:	43bb      	bics	r3, r7
 80042c0:	430b      	orrs	r3, r1
 80042c2:	706b      	strb	r3, [r5, #1]
        new_obj->focus_parent = copy->focus_parent;
 80042c4:	9b03      	ldr	r3, [sp, #12]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	085b      	lsrs	r3, r3, #1
 80042ca:	401f      	ands	r7, r3
 80042cc:	786b      	ldrb	r3, [r5, #1]
 80042ce:	007f      	lsls	r7, r7, #1
 80042d0:	4393      	bics	r3, r2
 80042d2:	431f      	orrs	r7, r3
 80042d4:	706f      	strb	r7, [r5, #1]
        if(copy->group_p != NULL) {
 80042d6:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 80042d8:	2800      	cmp	r0, #0
 80042da:	d002      	beq.n	80042e2 <lv_obj_create+0x2ee>
            lv_group_add_obj(copy->group_p, new_obj);
 80042dc:	0021      	movs	r1, r4
 80042de:	f7ff f8ff 	bl	80034e0 <lv_group_add_obj>
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
 80042e2:	6833      	ldr	r3, [r6, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d010      	beq.n	800430a <lv_obj_create+0x316>
 80042e8:	9b01      	ldr	r3, [sp, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d100      	bne.n	80042f0 <lv_obj_create+0x2fc>
 80042ee:	e68d      	b.n	800400c <lv_obj_create+0x18>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 80042f0:	0030      	movs	r0, r6
 80042f2:	f7ff fd1c 	bl	8003d2e <lv_obj_get_x>
 80042f6:	0005      	movs	r5, r0
 80042f8:	0030      	movs	r0, r6
 80042fa:	f7ff fd2c 	bl	8003d56 <lv_obj_get_y>
 80042fe:	0029      	movs	r1, r5
 8004300:	0002      	movs	r2, r0
 8004302:	0020      	movs	r0, r4
 8004304:	f7ff fbe2 	bl	8003acc <lv_obj_set_pos>
 8004308:	e6dd      	b.n	80040c6 <lv_obj_create+0xd2>
    if(parent != NULL) {
 800430a:	9b01      	ldr	r3, [sp, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d000      	beq.n	8004312 <lv_obj_create+0x31e>
 8004310:	e6d9      	b.n	80040c6 <lv_obj_create+0xd2>
 8004312:	e67b      	b.n	800400c <lv_obj_create+0x18>
 8004314:	08005875 	.word	0x08005875
 8004318:	08004e59 	.word	0x08004e59

0800431c <lv_obj_get_style_list>:
{
 800431c:	b513      	push	{r0, r1, r4, lr}
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 800431e:	2900      	cmp	r1, #0
 8004320:	d101      	bne.n	8004326 <lv_obj_get_style_list+0xa>
 8004322:	3028      	adds	r0, #40	; 0x28
}
 8004324:	bd16      	pop	{r1, r2, r4, pc}
    info.part = part;
 8004326:	466b      	mov	r3, sp
    info.result = NULL;
 8004328:	2400      	movs	r4, #0
    info.part = part;
 800432a:	7019      	strb	r1, [r3, #0]
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
 800432c:	466a      	mov	r2, sp
 800432e:	2108      	movs	r1, #8
    info.result = NULL;
 8004330:	9401      	str	r4, [sp, #4]
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
 8004332:	f7ff fae1 	bl	80038f8 <lv_signal_send>
 8004336:	0003      	movs	r3, r0
    if(res != LV_RES_OK) return NULL;
 8004338:	0020      	movs	r0, r4
 800433a:	2b01      	cmp	r3, #1
 800433c:	d1f2      	bne.n	8004324 <lv_obj_get_style_list+0x8>
    return info.result;
 800433e:	9801      	ldr	r0, [sp, #4]
 8004340:	e7f0      	b.n	8004324 <lv_obj_get_style_list+0x8>

08004342 <lv_obj_clean_style_list>:
{
 8004342:	b510      	push	{r4, lr}
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
 8004344:	f7ff ffea 	bl	800431c <lv_obj_get_style_list>
    if(style_dsc == NULL) {
 8004348:	2800      	cmp	r0, #0
 800434a:	d001      	beq.n	8004350 <lv_obj_clean_style_list+0xe>
    _lv_style_list_reset(style_dsc);
 800434c:	f002 fbf5 	bl	8006b3a <_lv_style_list_reset>
}
 8004350:	bd10      	pop	{r4, pc}

08004352 <_lv_obj_disable_style_caching>:
{
 8004352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004354:	0006      	movs	r6, r0
 8004356:	000d      	movs	r5, r1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8004358:	2400      	movs	r4, #0
        list->ignore_cache = dis;
 800435a:	2701      	movs	r7, #1
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 800435c:	0021      	movs	r1, r4
 800435e:	0030      	movs	r0, r6
 8004360:	f7ff ffdc 	bl	800431c <lv_obj_get_style_list>
        if(list == NULL) break;
 8004364:	2800      	cmp	r0, #0
 8004366:	d114      	bne.n	8004392 <_lv_obj_disable_style_caching+0x40>
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8004368:	2440      	movs	r4, #64	; 0x40
        list->ignore_cache = dis;
 800436a:	2701      	movs	r7, #1
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 800436c:	0021      	movs	r1, r4
 800436e:	0030      	movs	r0, r6
 8004370:	f7ff ffd4 	bl	800431c <lv_obj_get_style_list>
        if(list == NULL) break;
 8004374:	2800      	cmp	r0, #0
 8004376:	d00b      	beq.n	8004390 <_lv_obj_disable_style_caching+0x3e>
        list->ignore_cache = dis;
 8004378:	002a      	movs	r2, r5
 800437a:	2108      	movs	r1, #8
 800437c:	7943      	ldrb	r3, [r0, #5]
 800437e:	403a      	ands	r2, r7
 8004380:	00d2      	lsls	r2, r2, #3
 8004382:	438b      	bics	r3, r1
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 8004384:	3401      	adds	r4, #1
        list->ignore_cache = dis;
 8004386:	4313      	orrs	r3, r2
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 8004388:	b2e4      	uxtb	r4, r4
        list->ignore_cache = dis;
 800438a:	7143      	strb	r3, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 800438c:	2cff      	cmp	r4, #255	; 0xff
 800438e:	d1ed      	bne.n	800436c <_lv_obj_disable_style_caching+0x1a>
}
 8004390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        list->ignore_cache = dis;
 8004392:	002a      	movs	r2, r5
 8004394:	2108      	movs	r1, #8
 8004396:	7943      	ldrb	r3, [r0, #5]
 8004398:	403a      	ands	r2, r7
 800439a:	00d2      	lsls	r2, r2, #3
 800439c:	438b      	bics	r3, r1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 800439e:	3401      	adds	r4, #1
        list->ignore_cache = dis;
 80043a0:	4313      	orrs	r3, r2
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 80043a2:	b2e4      	uxtb	r4, r4
        list->ignore_cache = dis;
 80043a4:	7143      	strb	r3, [r0, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 80043a6:	2c40      	cmp	r4, #64	; 0x40
 80043a8:	d1d8      	bne.n	800435c <_lv_obj_disable_style_caching+0xa>
 80043aa:	e7dd      	b.n	8004368 <_lv_obj_disable_style_caching+0x16>

080043ac <lv_obj_get_hidden>:
    return obj->hidden == 0 ? false : true;
 80043ac:	3034      	adds	r0, #52	; 0x34
 80043ae:	7800      	ldrb	r0, [r0, #0]
 80043b0:	06c0      	lsls	r0, r0, #27
 80043b2:	0fc0      	lsrs	r0, r0, #31
}
 80043b4:	4770      	bx	lr

080043b6 <lv_obj_get_state>:
{
 80043b6:	b513      	push	{r0, r1, r4, lr}
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
 80043b8:	293f      	cmp	r1, #63	; 0x3f
 80043ba:	d802      	bhi.n	80043c2 <lv_obj_get_state+0xc>
 80043bc:	303d      	adds	r0, #61	; 0x3d
 80043be:	7800      	ldrb	r0, [r0, #0]
}
 80043c0:	bd16      	pop	{r1, r2, r4, pc}
    info.result = LV_STATE_DEFAULT;
 80043c2:	2300      	movs	r3, #0
    info.part = part;
 80043c4:	ac01      	add	r4, sp, #4
 80043c6:	7021      	strb	r1, [r4, #0]
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
 80043c8:	0022      	movs	r2, r4
 80043ca:	2109      	movs	r1, #9
    info.result = LV_STATE_DEFAULT;
 80043cc:	7063      	strb	r3, [r4, #1]
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
 80043ce:	f7ff fa93 	bl	80038f8 <lv_signal_send>
    return info.result;
 80043d2:	7860      	ldrb	r0, [r4, #1]
 80043d4:	e7f4      	b.n	80043c0 <lv_obj_get_state+0xa>
	...

080043d8 <_lv_obj_get_style_color>:
{
 80043d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043da:	0004      	movs	r4, r0
 80043dc:	000d      	movs	r5, r1
 80043de:	0016      	movs	r6, r2
    while(parent) {
 80043e0:	0017      	movs	r7, r2
{
 80043e2:	b085      	sub	sp, #20
    attr = prop_ori >> 8;
 80043e4:	0a13      	lsrs	r3, r2, #8
 80043e6:	9300      	str	r3, [sp, #0]
    while(parent) {
 80043e8:	2c00      	cmp	r4, #0
 80043ea:	d108      	bne.n	80043fe <_lv_obj_get_style_color+0x26>
    switch(prop) {
 80043ec:	4b14      	ldr	r3, [pc, #80]	; (8004440 <_lv_obj_get_style_color+0x68>)
 80043ee:	2000      	movs	r0, #0
 80043f0:	403b      	ands	r3, r7
 80043f2:	3b29      	subs	r3, #41	; 0x29
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d817      	bhi.n	8004428 <_lv_obj_get_style_color+0x50>
            return LV_COLOR_WHITE;
 80043f8:	4b12      	ldr	r3, [pc, #72]	; (8004444 <_lv_obj_get_style_color+0x6c>)
 80043fa:	8818      	ldrh	r0, [r3, #0]
 80043fc:	e014      	b.n	8004428 <_lv_obj_get_style_color+0x50>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 80043fe:	0029      	movs	r1, r5
 8004400:	0020      	movs	r0, r4
 8004402:	f7ff ff8b 	bl	800431c <lv_obj_get_style_list>
        lv_state_t state = lv_obj_get_state(parent, part);
 8004406:	0029      	movs	r1, r5
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 8004408:	9001      	str	r0, [sp, #4]
        lv_state_t state = lv_obj_get_state(parent, part);
 800440a:	0020      	movs	r0, r4
 800440c:	f7ff ffd3 	bl	80043b6 <lv_obj_get_state>
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 8004410:	0200      	lsls	r0, r0, #8
 8004412:	1830      	adds	r0, r6, r0
 8004414:	b287      	uxth	r7, r0
        res = _lv_style_list_get_color(list, prop, &value_act);
 8004416:	aa03      	add	r2, sp, #12
 8004418:	0039      	movs	r1, r7
 800441a:	9801      	ldr	r0, [sp, #4]
 800441c:	f002 fc71 	bl	8006d02 <_lv_style_list_get_color>
        if(res == LV_RES_OK) return value_act;
 8004420:	2801      	cmp	r0, #1
 8004422:	d103      	bne.n	800442c <_lv_obj_get_style_color+0x54>
 8004424:	ab02      	add	r3, sp, #8
 8004426:	8898      	ldrh	r0, [r3, #4]
}
 8004428:	b005      	add	sp, #20
 800442a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 800442c:	466b      	mov	r3, sp
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	b25b      	sxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	dada      	bge.n	80043ec <_lv_obj_get_style_color+0x14>
        if(part != LV_OBJ_PART_MAIN) {
 8004436:	2d00      	cmp	r5, #0
 8004438:	d100      	bne.n	800443c <_lv_obj_get_style_color+0x64>
    return obj->parent;
 800443a:	6824      	ldr	r4, [r4, #0]
 800443c:	2500      	movs	r5, #0
 800443e:	e7d3      	b.n	80043e8 <_lv_obj_get_style_color+0x10>
 8004440:	ffff80ff 	.word	0xffff80ff
 8004444:	0800f020 	.word	0x0800f020

08004448 <_lv_obj_get_style_int>:
{
 8004448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800444a:	0006      	movs	r6, r0
 800444c:	000f      	movs	r7, r1
 800444e:	b087      	sub	sp, #28
    attr = prop_ori >> 8;
 8004450:	0a13      	lsrs	r3, r2, #8
{
 8004452:	9202      	str	r2, [sp, #8]
    attr = prop_ori >> 8;
 8004454:	9303      	str	r3, [sp, #12]
    while(parent) {
 8004456:	9201      	str	r2, [sp, #4]
 8004458:	2e00      	cmp	r6, #0
 800445a:	d100      	bne.n	800445e <_lv_obj_get_style_int+0x16>
 800445c:	e07e      	b.n	800455c <_lv_obj_get_style_int+0x114>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 800445e:	0039      	movs	r1, r7
 8004460:	0030      	movs	r0, r6
 8004462:	f7ff ff5b 	bl	800431c <lv_obj_get_style_list>
        if(!list->ignore_cache && list->style_cnt > 0) {
 8004466:	2208      	movs	r2, #8
 8004468:	7943      	ldrb	r3, [r0, #5]
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 800446a:	0005      	movs	r5, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
 800446c:	4213      	tst	r3, r2
 800446e:	d11d      	bne.n	80044ac <_lv_obj_get_style_int+0x64>
 8004470:	213f      	movs	r1, #63	; 0x3f
 8004472:	7902      	ldrb	r2, [r0, #4]
 8004474:	420a      	tst	r2, r1
 8004476:	d019      	beq.n	80044ac <_lv_obj_get_style_int+0x64>
 8004478:	4c56      	ldr	r4, [pc, #344]	; (80045d4 <_lv_obj_get_style_int+0x18c>)
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
 800447a:	075b      	lsls	r3, r3, #29
 800447c:	d405      	bmi.n	800448a <_lv_obj_get_style_int+0x42>
 800447e:	9a01      	ldr	r2, [sp, #4]
 8004480:	0039      	movs	r1, r7
 8004482:	4022      	ands	r2, r4
 8004484:	0030      	movs	r0, r6
 8004486:	f000 f8b7 	bl	80045f8 <update_style_cache>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 800448a:	9b01      	ldr	r3, [sp, #4]
 800448c:	401c      	ands	r4, r3
 800448e:	2c33      	cmp	r4, #51	; 0x33
 8004490:	d100      	bne.n	8004494 <_lv_obj_get_style_int+0x4c>
 8004492:	e073      	b.n	800457c <_lv_obj_get_style_int+0x134>
 8004494:	dc39      	bgt.n	800450a <_lv_obj_get_style_int+0xc2>
 8004496:	2c13      	cmp	r4, #19
 8004498:	dc26      	bgt.n	80044e8 <_lv_obj_get_style_int+0xa0>
 800449a:	2c10      	cmp	r4, #16
 800449c:	db00      	blt.n	80044a0 <_lv_obj_get_style_int+0x58>
 800449e:	e07e      	b.n	800459e <_lv_obj_get_style_int+0x156>
 80044a0:	2c02      	cmp	r4, #2
 80044a2:	d054      	beq.n	800454e <_lv_obj_get_style_int+0x106>
 80044a4:	dc19      	bgt.n	80044da <_lv_obj_get_style_int+0x92>
 80044a6:	2c01      	cmp	r4, #1
 80044a8:	d100      	bne.n	80044ac <_lv_obj_get_style_int+0x64>
 80044aa:	e06e      	b.n	800458a <_lv_obj_get_style_int+0x142>
        lv_state_t state = lv_obj_get_state(parent, part);
 80044ac:	0039      	movs	r1, r7
 80044ae:	0030      	movs	r0, r6
 80044b0:	f7ff ff81 	bl	80043b6 <lv_obj_get_state>
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 80044b4:	9b02      	ldr	r3, [sp, #8]
 80044b6:	0200      	lsls	r0, r0, #8
 80044b8:	1818      	adds	r0, r3, r0
 80044ba:	b283      	uxth	r3, r0
 80044bc:	9301      	str	r3, [sp, #4]
        res = _lv_style_list_get_int(list, prop, &value_act);
 80044be:	ab04      	add	r3, sp, #16
 80044c0:	1d9c      	adds	r4, r3, #6
 80044c2:	0022      	movs	r2, r4
 80044c4:	9901      	ldr	r1, [sp, #4]
 80044c6:	0028      	movs	r0, r5
 80044c8:	f002 fbdb 	bl	8006c82 <_lv_style_list_get_int>
        if(res == LV_RES_OK) return value_act;
 80044cc:	2801      	cmp	r0, #1
 80044ce:	d000      	beq.n	80044d2 <_lv_obj_get_style_int+0x8a>
 80044d0:	e069      	b.n	80045a6 <_lv_obj_get_style_int+0x15e>
 80044d2:	2300      	movs	r3, #0
 80044d4:	5ee0      	ldrsh	r0, [r4, r3]
}
 80044d6:	b007      	add	sp, #28
 80044d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 80044da:	3c04      	subs	r4, #4
 80044dc:	2c03      	cmp	r4, #3
 80044de:	d8e5      	bhi.n	80044ac <_lv_obj_get_style_int+0x64>
                    if(list->transform_all_zero) def = true;
 80044e0:	796b      	ldrb	r3, [r5, #5]
                    if(list->border_post_off) def = true;
 80044e2:	2b7f      	cmp	r3, #127	; 0x7f
 80044e4:	d9e2      	bls.n	80044ac <_lv_obj_get_style_int+0x64>
 80044e6:	e039      	b.n	800455c <_lv_obj_get_style_int+0x114>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 80044e8:	2c20      	cmp	r4, #32
 80044ea:	d018      	beq.n	800451e <_lv_obj_get_style_int+0xd6>
 80044ec:	dc06      	bgt.n	80044fc <_lv_obj_get_style_int+0xb4>
 80044ee:	3c15      	subs	r4, #21
 80044f0:	2c03      	cmp	r4, #3
 80044f2:	d8db      	bhi.n	80044ac <_lv_obj_get_style_int+0x64>
                    if(list->margin_all_zero) def = true;
 80044f4:	79ab      	ldrb	r3, [r5, #6]
 80044f6:	079b      	lsls	r3, r3, #30
 80044f8:	d5d8      	bpl.n	80044ac <_lv_obj_get_style_int+0x64>
 80044fa:	e02f      	b.n	800455c <_lv_obj_get_style_int+0x114>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 80044fc:	2c31      	cmp	r4, #49	; 0x31
 80044fe:	d03b      	beq.n	8004578 <_lv_obj_get_style_int+0x130>
 8004500:	dc0d      	bgt.n	800451e <_lv_obj_get_style_int+0xd6>
 8004502:	2c30      	cmp	r4, #48	; 0x30
 8004504:	d1d2      	bne.n	80044ac <_lv_obj_get_style_int+0x64>
                    if(list->border_width_zero) def = true;
 8004506:	79ab      	ldrb	r3, [r5, #6]
 8004508:	e026      	b.n	8004558 <_lv_obj_get_style_int+0x110>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 800450a:	2c72      	cmp	r4, #114	; 0x72
 800450c:	d007      	beq.n	800451e <_lv_obj_get_style_int+0xd6>
 800450e:	dc0d      	bgt.n	800452c <_lv_obj_get_style_int+0xe4>
 8004510:	2c50      	cmp	r4, #80	; 0x50
 8004512:	d03f      	beq.n	8004594 <_lv_obj_get_style_int+0x14c>
 8004514:	dc05      	bgt.n	8004522 <_lv_obj_get_style_int+0xda>
 8004516:	2c40      	cmp	r4, #64	; 0x40
 8004518:	d032      	beq.n	8004580 <_lv_obj_get_style_int+0x138>
 800451a:	2c42      	cmp	r4, #66	; 0x42
 800451c:	d1c6      	bne.n	80044ac <_lv_obj_get_style_int+0x64>
                    if(list->blend_mode_all_normal) def = true;
 800451e:	79ab      	ldrb	r3, [r5, #6]
 8004520:	e039      	b.n	8004596 <_lv_obj_get_style_int+0x14e>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 8004522:	2c54      	cmp	r4, #84	; 0x54
 8004524:	d0fb      	beq.n	800451e <_lv_obj_get_style_int+0xd6>
 8004526:	2c60      	cmp	r4, #96	; 0x60
 8004528:	d1c0      	bne.n	80044ac <_lv_obj_get_style_int+0x64>
 800452a:	e7f8      	b.n	800451e <_lv_obj_get_style_int+0xd6>
 800452c:	4b2a      	ldr	r3, [pc, #168]	; (80045d8 <_lv_obj_get_style_int+0x190>)
 800452e:	429c      	cmp	r4, r3
 8004530:	dc05      	bgt.n	800453e <_lv_obj_get_style_int+0xf6>
 8004532:	4b2a      	ldr	r3, [pc, #168]	; (80045dc <_lv_obj_get_style_int+0x194>)
 8004534:	429c      	cmp	r4, r3
 8004536:	da0e      	bge.n	8004556 <_lv_obj_get_style_int+0x10e>
 8004538:	2c91      	cmp	r4, #145	; 0x91
 800453a:	d1b7      	bne.n	80044ac <_lv_obj_get_style_int+0x64>
 800453c:	e7ef      	b.n	800451e <_lv_obj_get_style_int+0xd6>
 800453e:	4b28      	ldr	r3, [pc, #160]	; (80045e0 <_lv_obj_get_style_int+0x198>)
 8004540:	429c      	cmp	r4, r3
 8004542:	d0ec      	beq.n	800451e <_lv_obj_get_style_int+0xd6>
 8004544:	db2d      	blt.n	80045a2 <_lv_obj_get_style_int+0x15a>
 8004546:	4b27      	ldr	r3, [pc, #156]	; (80045e4 <_lv_obj_get_style_int+0x19c>)
 8004548:	429c      	cmp	r4, r3
 800454a:	d1af      	bne.n	80044ac <_lv_obj_get_style_int+0x64>
 800454c:	e7e7      	b.n	800451e <_lv_obj_get_style_int+0xd6>
                    if(list->clip_corner_off) def = true;
 800454e:	796b      	ldrb	r3, [r5, #5]
                    if(list->text_decor_none) def = true;
 8004550:	065b      	lsls	r3, r3, #25
 8004552:	d5ab      	bpl.n	80044ac <_lv_obj_get_style_int+0x64>
 8004554:	e002      	b.n	800455c <_lv_obj_get_style_int+0x114>
                    if(list->text_space_zero) def = true;
 8004556:	79eb      	ldrb	r3, [r5, #7]
                    if(list->border_width_zero) def = true;
 8004558:	069b      	lsls	r3, r3, #26
 800455a:	d5a7      	bpl.n	80044ac <_lv_obj_get_style_int+0x64>
    switch(prop) {
 800455c:	4b1d      	ldr	r3, [pc, #116]	; (80045d4 <_lv_obj_get_style_int+0x18c>)
 800455e:	9a01      	ldr	r2, [sp, #4]
            return 255;
 8004560:	20ff      	movs	r0, #255	; 0xff
    switch(prop) {
 8004562:	401a      	ands	r2, r3
 8004564:	2a22      	cmp	r2, #34	; 0x22
 8004566:	d0b6      	beq.n	80044d6 <_lv_obj_get_style_int+0x8e>
 8004568:	d827      	bhi.n	80045ba <_lv_obj_get_style_int+0x172>
            return LV_DPI / 20;
 800456a:	38f9      	subs	r0, #249	; 0xf9
    switch(prop) {
 800456c:	2a03      	cmp	r2, #3
 800456e:	d0b2      	beq.n	80044d6 <_lv_obj_get_style_int+0x8e>
 8004570:	2a07      	cmp	r2, #7
 8004572:	d02b      	beq.n	80045cc <_lv_obj_get_style_int+0x184>
    return 0;
 8004574:	2000      	movs	r0, #0
 8004576:	e7ae      	b.n	80044d6 <_lv_obj_get_style_int+0x8e>
                    if(list->border_side_full) def = true;
 8004578:	79ab      	ldrb	r3, [r5, #6]
 800457a:	e7e9      	b.n	8004550 <_lv_obj_get_style_int+0x108>
                    if(list->border_post_off) def = true;
 800457c:	79ab      	ldrb	r3, [r5, #6]
 800457e:	e7b0      	b.n	80044e2 <_lv_obj_get_style_int+0x9a>
                    if(list->outline_width_zero) def = true;
 8004580:	79eb      	ldrb	r3, [r5, #7]
                    if(list->pad_all_zero) def = true;
 8004582:	07db      	lsls	r3, r3, #31
 8004584:	d400      	bmi.n	8004588 <_lv_obj_get_style_int+0x140>
 8004586:	e791      	b.n	80044ac <_lv_obj_get_style_int+0x64>
 8004588:	e7e8      	b.n	800455c <_lv_obj_get_style_int+0x114>
                    if(list->radius_zero) def = true;
 800458a:	796b      	ldrb	r3, [r5, #5]
 800458c:	06db      	lsls	r3, r3, #27
 800458e:	d400      	bmi.n	8004592 <_lv_obj_get_style_int+0x14a>
 8004590:	e78c      	b.n	80044ac <_lv_obj_get_style_int+0x64>
 8004592:	e7e3      	b.n	800455c <_lv_obj_get_style_int+0x114>
                    if(list->shadow_width_zero) def = true;
 8004594:	79eb      	ldrb	r3, [r5, #7]
                    if(list->blend_mode_all_normal) def = true;
 8004596:	075b      	lsls	r3, r3, #29
 8004598:	d400      	bmi.n	800459c <_lv_obj_get_style_int+0x154>
 800459a:	e787      	b.n	80044ac <_lv_obj_get_style_int+0x64>
 800459c:	e7de      	b.n	800455c <_lv_obj_get_style_int+0x114>
                    if(list->pad_all_zero) def = true;
 800459e:	79ab      	ldrb	r3, [r5, #6]
 80045a0:	e7ef      	b.n	8004582 <_lv_obj_get_style_int+0x13a>
                    if(list->text_decor_none) def = true;
 80045a2:	79eb      	ldrb	r3, [r5, #7]
 80045a4:	e7d4      	b.n	8004550 <_lv_obj_get_style_int+0x108>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 80045a6:	466b      	mov	r3, sp
 80045a8:	7b1b      	ldrb	r3, [r3, #12]
 80045aa:	b25b      	sxtb	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	dad5      	bge.n	800455c <_lv_obj_get_style_int+0x114>
        if(part != LV_OBJ_PART_MAIN) {
 80045b0:	2f00      	cmp	r7, #0
 80045b2:	d100      	bne.n	80045b6 <_lv_obj_get_style_int+0x16e>
    return obj->parent;
 80045b4:	6836      	ldr	r6, [r6, #0]
 80045b6:	2700      	movs	r7, #0
 80045b8:	e74e      	b.n	8004458 <_lv_obj_get_style_int+0x10>
            return LV_BORDER_SIDE_FULL;
 80045ba:	200f      	movs	r0, #15
    switch(prop) {
 80045bc:	2a31      	cmp	r2, #49	; 0x31
 80045be:	d100      	bne.n	80045c2 <_lv_obj_get_style_int+0x17a>
 80045c0:	e789      	b.n	80044d6 <_lv_obj_get_style_int+0x8e>
            return LV_DPI / 8;
 80045c2:	3001      	adds	r0, #1
    switch(prop) {
 80045c4:	2ac0      	cmp	r2, #192	; 0xc0
 80045c6:	d100      	bne.n	80045ca <_lv_obj_get_style_int+0x182>
 80045c8:	e785      	b.n	80044d6 <_lv_obj_get_style_int+0x8e>
 80045ca:	e7d3      	b.n	8004574 <_lv_obj_get_style_int+0x12c>
            return LV_IMG_ZOOM_NONE;
 80045cc:	2080      	movs	r0, #128	; 0x80
 80045ce:	0040      	lsls	r0, r0, #1
 80045d0:	e781      	b.n	80044d6 <_lv_obj_get_style_int+0x8e>
 80045d2:	46c0      	nop			; (mov r8, r8)
 80045d4:	ffff80ff 	.word	0xffff80ff
 80045d8:	00008081 	.word	0x00008081
 80045dc:	00008080 	.word	0x00008080
 80045e0:	00008083 	.word	0x00008083
 80045e4:	000080a0 	.word	0x000080a0

080045e8 <lv_obj_get_style_clip_corner>:
    _OBJ_GET_STYLE(prop_name, func_name, value_type, style_type)                                                         \
    _OBJ_SET_STYLE_LOCAL(prop_name, func_name, value_type, style_type)                                                   \
    _OBJ_SET_STYLE(prop_name, func_name, value_type, style_type)

_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int)
 80045e8:	b510      	push	{r4, lr}
 80045ea:	2202      	movs	r2, #2
 80045ec:	f7ff ff2c 	bl	8004448 <_lv_obj_get_style_int>
 80045f0:	1e43      	subs	r3, r0, #1
 80045f2:	4198      	sbcs	r0, r3
 80045f4:	b2c0      	uxtb	r0, r0
 80045f6:	bd10      	pop	{r4, pc}

080045f8 <update_style_cache>:
 * @param obj pointer to an object
 * @param part the part of the object
 * @param prop the property which triggered the update
 */
static void update_style_cache(lv_obj_t * obj, uint8_t part, uint16_t prop)
{
 80045f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045fa:	0005      	movs	r5, r0
    if(style_prop_is_cacheble(prop) == false) return;
 80045fc:	0010      	movs	r0, r2
{
 80045fe:	000e      	movs	r6, r1
    if(style_prop_is_cacheble(prop) == false) return;
 8004600:	f7ff f85a 	bl	80036b8 <style_prop_is_cacheble>
 8004604:	2800      	cmp	r0, #0
 8004606:	d100      	bne.n	800460a <update_style_cache+0x12>
 8004608:	e106      	b.n	8004818 <update_style_cache+0x220>

    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 800460a:	0031      	movs	r1, r6
 800460c:	0028      	movs	r0, r5
 800460e:	f7ff fe85 	bl	800431c <lv_obj_get_style_list>

    bool ignore_cache_ori = list->ignore_cache;
 8004612:	7942      	ldrb	r2, [r0, #5]
    list->ignore_cache = 1;

#if LV_USE_OPA_SCALE
    list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
#else
    list->opa_scale_cover    = 1;
 8004614:	2720      	movs	r7, #32
    bool ignore_cache_ori = list->ignore_cache;
 8004616:	0713      	lsls	r3, r2, #28
 8004618:	0fdb      	lsrs	r3, r3, #31
 800461a:	9301      	str	r3, [sp, #4]
    list->opa_scale_cover    = 1;
 800461c:	2308      	movs	r3, #8
 800461e:	4313      	orrs	r3, r2
 8004620:	433b      	orrs	r3, r7
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8004622:	0004      	movs	r4, r0
    list->opa_scale_cover    = 1;
 8004624:	7143      	strb	r3, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int)
 8004626:	4aa3      	ldr	r2, [pc, #652]	; (80048b4 <update_style_cache+0x2bc>)
 8004628:	0031      	movs	r1, r6
 800462a:	0028      	movs	r0, r5
 800462c:	f7ff ff0c 	bl	8004448 <_lv_obj_get_style_int>
#endif
    list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
 8004630:	b2c0      	uxtb	r0, r0
 8004632:	4243      	negs	r3, r0
 8004634:	4158      	adcs	r0, r3
 8004636:	2240      	movs	r2, #64	; 0x40
 8004638:	79e3      	ldrb	r3, [r4, #7]
 800463a:	0180      	lsls	r0, r0, #6
 800463c:	4393      	bics	r3, r2
 800463e:	4318      	orrs	r0, r3
 8004640:	71e0      	strb	r0, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr)
 8004642:	4a9d      	ldr	r2, [pc, #628]	; (80048b8 <update_style_cache+0x2c0>)
 8004644:	0031      	movs	r1, r6
 8004646:	0028      	movs	r0, r5
 8004648:	f000 f9ac 	bl	80049a4 <_lv_obj_get_style_ptr>
    list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == LV_THEME_DEFAULT_FONT_NORMAL ? 1 : 0;
 800464c:	4b9b      	ldr	r3, [pc, #620]	; (80048bc <update_style_cache+0x2c4>)
 800464e:	227f      	movs	r2, #127	; 0x7f
 8004650:	1ac0      	subs	r0, r0, r3
 8004652:	4243      	negs	r3, r0
 8004654:	4158      	adcs	r0, r3
 8004656:	79e3      	ldrb	r3, [r4, #7]
 8004658:	01c0      	lsls	r0, r0, #7
 800465a:	4013      	ands	r3, r2

    list->text_space_zero = 1;
 800465c:	4318      	orrs	r0, r3
 800465e:	4338      	orrs	r0, r7
 8004660:	71e0      	strb	r0, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int)
 8004662:	4a97      	ldr	r2, [pc, #604]	; (80048c0 <update_style_cache+0x2c8>)
 8004664:	0031      	movs	r1, r6
 8004666:	0028      	movs	r0, r5
 8004668:	f7ff feee 	bl	8004448 <_lv_obj_get_style_int>
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 800466c:	2800      	cmp	r0, #0
 800466e:	d100      	bne.n	8004672 <update_style_cache+0x7a>
 8004670:	e0d3      	b.n	800481a <update_style_cache+0x222>
       lv_obj_get_style_text_line_space(obj, part) != 0) {
        list->text_space_zero = 0;
 8004672:	2220      	movs	r2, #32
 8004674:	79e3      	ldrb	r3, [r4, #7]
 8004676:	4393      	bics	r3, r2
 8004678:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 800467a:	222c      	movs	r2, #44	; 0x2c
 800467c:	0031      	movs	r1, r6
 800467e:	0028      	movs	r0, r5
 8004680:	f000 f924 	bl	80048cc <_lv_obj_get_style_opa>
    }

    lv_opa_t bg_opa = lv_obj_get_style_bg_opa(obj, part);
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
 8004684:	2108      	movs	r1, #8
 8004686:	4242      	negs	r2, r0
 8004688:	4142      	adcs	r2, r0
 800468a:	79a3      	ldrb	r3, [r4, #6]
 800468c:	00d2      	lsls	r2, r2, #3
 800468e:	438b      	bics	r3, r1
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
 8004690:	38ff      	subs	r0, #255	; 0xff
 8004692:	4241      	negs	r1, r0
 8004694:	4148      	adcs	r0, r1
 8004696:	4313      	orrs	r3, r2
 8004698:	2210      	movs	r2, #16
 800469a:	0100      	lsls	r0, r0, #4
 800469c:	4393      	bics	r3, r2
 800469e:	4318      	orrs	r0, r3
 80046a0:	71a0      	strb	r0, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int)
 80046a2:	3220      	adds	r2, #32
 80046a4:	0031      	movs	r1, r6
 80046a6:	0028      	movs	r0, r5
 80046a8:	f7ff fece 	bl	8004448 <_lv_obj_get_style_int>

    list->border_width_zero = lv_obj_get_style_border_width(obj, part) == 0 ? 1 : 0;
 80046ac:	4243      	negs	r3, r0
 80046ae:	4158      	adcs	r0, r3
 80046b0:	2220      	movs	r2, #32
 80046b2:	0143      	lsls	r3, r0, #5
 80046b4:	79a0      	ldrb	r0, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int)
 80046b6:	0031      	movs	r1, r6
 80046b8:	4390      	bics	r0, r2
 80046ba:	4318      	orrs	r0, r3
 80046bc:	71a0      	strb	r0, [r4, #6]
 80046be:	3211      	adds	r2, #17
 80046c0:	0028      	movs	r0, r5
 80046c2:	f7ff fec1 	bl	8004448 <_lv_obj_get_style_int>
    list->border_side_full = lv_obj_get_style_border_side(obj, part) == LV_BORDER_SIDE_FULL ? 1 : 0;
 80046c6:	b2c0      	uxtb	r0, r0
 80046c8:	380f      	subs	r0, #15
 80046ca:	2740      	movs	r7, #64	; 0x40
 80046cc:	4243      	negs	r3, r0
 80046ce:	4158      	adcs	r0, r3
 80046d0:	79a3      	ldrb	r3, [r4, #6]
 80046d2:	0180      	lsls	r0, r0, #6
 80046d4:	43bb      	bics	r3, r7
 80046d6:	4318      	orrs	r0, r3
 80046d8:	71a0      	strb	r0, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int)
 80046da:	2233      	movs	r2, #51	; 0x33
 80046dc:	0031      	movs	r1, r6
 80046de:	0028      	movs	r0, r5
 80046e0:	f7ff feb2 	bl	8004448 <_lv_obj_get_style_int>
    list->border_post_off = lv_obj_get_style_border_post(obj, part) == 0 ? 1 : 0;
 80046e4:	4243      	negs	r3, r0
 80046e6:	4158      	adcs	r0, r3
 80046e8:	227f      	movs	r2, #127	; 0x7f
 80046ea:	01c3      	lsls	r3, r0, #7
 80046ec:	79a0      	ldrb	r0, [r4, #6]
    list->clip_corner_off   = lv_obj_get_style_clip_corner(obj, part) == false ? 1 : 0;
 80046ee:	0031      	movs	r1, r6
    list->border_post_off = lv_obj_get_style_border_post(obj, part) == 0 ? 1 : 0;
 80046f0:	4010      	ands	r0, r2
 80046f2:	4318      	orrs	r0, r3
 80046f4:	71a0      	strb	r0, [r4, #6]
    list->clip_corner_off   = lv_obj_get_style_clip_corner(obj, part) == false ? 1 : 0;
 80046f6:	0028      	movs	r0, r5
 80046f8:	f7ff ff76 	bl	80045e8 <lv_obj_get_style_clip_corner>
 80046fc:	2301      	movs	r3, #1
 80046fe:	4383      	bics	r3, r0
 8004700:	019a      	lsls	r2, r3, #6
 8004702:	7963      	ldrb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa)
 8004704:	0031      	movs	r1, r6
 8004706:	43bb      	bics	r3, r7
 8004708:	4313      	orrs	r3, r2
 800470a:	7163      	strb	r3, [r4, #5]
 800470c:	4a6d      	ldr	r2, [pc, #436]	; (80048c4 <update_style_cache+0x2cc>)
 800470e:	0028      	movs	r0, r5
 8004710:	f000 f8dc 	bl	80048cc <_lv_obj_get_style_opa>
    list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
 8004714:	4243      	negs	r3, r0
 8004716:	4158      	adcs	r0, r3
 8004718:	2210      	movs	r2, #16
 800471a:	0103      	lsls	r3, r0, #4
 800471c:	79e0      	ldrb	r0, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int)
 800471e:	0031      	movs	r1, r6
 8004720:	4390      	bics	r0, r2
 8004722:	4318      	orrs	r0, r3
 8004724:	003a      	movs	r2, r7
 8004726:	71e0      	strb	r0, [r4, #7]
 8004728:	0028      	movs	r0, r5
 800472a:	f7ff fe8d 	bl	8004448 <_lv_obj_get_style_int>
    list->outline_width_zero    = lv_obj_get_style_outline_width(obj, part) == 0 ? 1 : 0;
 800472e:	4243      	negs	r3, r0
 8004730:	4143      	adcs	r3, r0
 8004732:	79e0      	ldrb	r0, [r4, #7]
 8004734:	3f3f      	subs	r7, #63	; 0x3f
 8004736:	43b8      	bics	r0, r7
 8004738:	4318      	orrs	r0, r3
 800473a:	71e0      	strb	r0, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr)
 800473c:	226e      	movs	r2, #110	; 0x6e
 800473e:	0031      	movs	r1, r6
 8004740:	0028      	movs	r0, r5
 8004742:	f000 f92f 	bl	80049a4 <_lv_obj_get_style_ptr>
    list->pattern_img_null    = lv_obj_get_style_pattern_image(obj, part) == NULL ? 1 : 0;
 8004746:	4243      	negs	r3, r0
 8004748:	4158      	adcs	r0, r3
 800474a:	2202      	movs	r2, #2
 800474c:	0043      	lsls	r3, r0, #1
 800474e:	79e0      	ldrb	r0, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 8004750:	0031      	movs	r1, r6
 8004752:	4390      	bics	r0, r2
 8004754:	4318      	orrs	r0, r3
 8004756:	003a      	movs	r2, r7
 8004758:	71e0      	strb	r0, [r4, #7]
 800475a:	0028      	movs	r0, r5
 800475c:	f7ff fe74 	bl	8004448 <_lv_obj_get_style_int>
    list->radius_zero    = lv_obj_get_style_radius(obj, part) == 0 ? 1 : 0;
 8004760:	4243      	negs	r3, r0
 8004762:	4158      	adcs	r0, r3
 8004764:	2210      	movs	r2, #16
 8004766:	0103      	lsls	r3, r0, #4
 8004768:	7960      	ldrb	r0, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int)
 800476a:	0031      	movs	r1, r6
 800476c:	4390      	bics	r0, r2
 800476e:	4318      	orrs	r0, r3
 8004770:	7160      	strb	r0, [r4, #5]
 8004772:	3240      	adds	r2, #64	; 0x40
 8004774:	0028      	movs	r0, r5
 8004776:	f7ff fe67 	bl	8004448 <_lv_obj_get_style_int>
    list->shadow_width_zero    = lv_obj_get_style_shadow_width(obj, part) == 0 ? 1 : 0;
 800477a:	4243      	negs	r3, r0
 800477c:	4158      	adcs	r0, r3
 800477e:	0083      	lsls	r3, r0, #2
 8004780:	79e0      	ldrb	r0, [r4, #7]
 8004782:	3703      	adds	r7, #3
 8004784:	43b8      	bics	r0, r7
 8004786:	4318      	orrs	r0, r3
 8004788:	71e0      	strb	r0, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr)
 800478a:	227f      	movs	r2, #127	; 0x7f
 800478c:	0031      	movs	r1, r6
 800478e:	0028      	movs	r0, r5
 8004790:	f000 f908 	bl	80049a4 <_lv_obj_get_style_ptr>
    list->value_txt_str    = lv_obj_get_style_value_str(obj, part) == NULL ? 1 : 0;
 8004794:	4243      	negs	r3, r0
 8004796:	4158      	adcs	r0, r3
 8004798:	2108      	movs	r1, #8
 800479a:	00c3      	lsls	r3, r0, #3
 800479c:	79e0      	ldrb	r0, [r4, #7]

    list->transform_all_zero  = 1;
 800479e:	7962      	ldrb	r2, [r4, #5]
    list->value_txt_str    = lv_obj_get_style_value_str(obj, part) == NULL ? 1 : 0;
 80047a0:	4388      	bics	r0, r1
 80047a2:	4318      	orrs	r0, r3
    list->transform_all_zero  = 1;
 80047a4:	2380      	movs	r3, #128	; 0x80
 80047a6:	425b      	negs	r3, r3
 80047a8:	4313      	orrs	r3, r2
    list->value_txt_str    = lv_obj_get_style_value_str(obj, part) == NULL ? 1 : 0;
 80047aa:	71e0      	strb	r0, [r4, #7]
    list->transform_all_zero  = 1;
 80047ac:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int)
 80047ae:	2206      	movs	r2, #6
 80047b0:	0031      	movs	r1, r6
 80047b2:	0028      	movs	r0, r5
 80047b4:	f7ff fe48 	bl	8004448 <_lv_obj_get_style_int>
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
 80047b8:	2800      	cmp	r0, #0
 80047ba:	d037      	beq.n	800482c <update_style_cache+0x234>
       lv_obj_get_style_transform_width(obj, part) != 0 ||
       lv_obj_get_style_transform_height(obj, part) != 0 ||
       lv_obj_get_style_transform_zoom(obj, part) != LV_IMG_ZOOM_NONE) {
        list->transform_all_zero  = 0;
 80047bc:	227f      	movs	r2, #127	; 0x7f
 80047be:	7963      	ldrb	r3, [r4, #5]
 80047c0:	4013      	ands	r3, r2
 80047c2:	7163      	strb	r3, [r4, #5]
    }

    list->pad_all_zero  = 1;
 80047c4:	2301      	movs	r3, #1
 80047c6:	79a2      	ldrb	r2, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 80047c8:	0031      	movs	r1, r6
 80047ca:	4313      	orrs	r3, r2
 80047cc:	71a3      	strb	r3, [r4, #6]
 80047ce:	2210      	movs	r2, #16
 80047d0:	0028      	movs	r0, r5
 80047d2:	f7ff fe39 	bl	8004448 <_lv_obj_get_style_int>
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
 80047d6:	2800      	cmp	r0, #0
 80047d8:	d040      	beq.n	800485c <update_style_cache+0x264>
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
       lv_obj_get_style_pad_left(obj, part) != 0 ||
       lv_obj_get_style_pad_right(obj, part) != 0) {
        list->pad_all_zero  = 0;
 80047da:	2201      	movs	r2, #1
 80047dc:	79a3      	ldrb	r3, [r4, #6]
 80047de:	4393      	bics	r3, r2
 80047e0:	71a3      	strb	r3, [r4, #6]
    }

    list->margin_all_zero  = 1;
 80047e2:	2302      	movs	r3, #2
 80047e4:	79a2      	ldrb	r2, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int)
 80047e6:	0031      	movs	r1, r6
 80047e8:	4313      	orrs	r3, r2
 80047ea:	71a3      	strb	r3, [r4, #6]
 80047ec:	2215      	movs	r2, #21
 80047ee:	0028      	movs	r0, r5
 80047f0:	f7ff fe2a 	bl	8004448 <_lv_obj_get_style_int>
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
 80047f4:	2800      	cmp	r0, #0
 80047f6:	d047      	beq.n	8004888 <update_style_cache+0x290>
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
       lv_obj_get_style_margin_left(obj, part) != 0 ||
       lv_obj_get_style_margin_right(obj, part) != 0) {
        list->margin_all_zero  = 0;
 80047f8:	2202      	movs	r2, #2
 80047fa:	79a3      	ldrb	r3, [r4, #6]
 80047fc:	4393      	bics	r3, r2
 80047fe:	71a3      	strb	r3, [r4, #6]
    }

    list->blend_mode_all_normal = 1;
 8004800:	2204      	movs	r2, #4
       lv_obj_get_style_image_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
       lv_obj_get_style_shadow_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL) {
        list->blend_mode_all_normal = 0;
    }
#endif
    list->ignore_cache = ignore_cache_ori;
 8004802:	2008      	movs	r0, #8
    list->blend_mode_all_normal = 1;
 8004804:	79a3      	ldrb	r3, [r4, #6]
 8004806:	4313      	orrs	r3, r2
 8004808:	71a3      	strb	r3, [r4, #6]
    list->ignore_cache = ignore_cache_ori;
 800480a:	9b01      	ldr	r3, [sp, #4]
 800480c:	00d9      	lsls	r1, r3, #3
 800480e:	7963      	ldrb	r3, [r4, #5]
 8004810:	4383      	bics	r3, r0
    list->valid_cache = 1;
 8004812:	430b      	orrs	r3, r1
 8004814:	4313      	orrs	r3, r2
 8004816:	7163      	strb	r3, [r4, #5]
}
 8004818:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int)
 800481a:	4a2b      	ldr	r2, [pc, #172]	; (80048c8 <update_style_cache+0x2d0>)
 800481c:	0031      	movs	r1, r6
 800481e:	0028      	movs	r0, r5
 8004820:	f7ff fe12 	bl	8004448 <_lv_obj_get_style_int>
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 8004824:	2800      	cmp	r0, #0
 8004826:	d000      	beq.n	800482a <update_style_cache+0x232>
 8004828:	e723      	b.n	8004672 <update_style_cache+0x7a>
 800482a:	e726      	b.n	800467a <update_style_cache+0x82>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 800482c:	003a      	movs	r2, r7
 800482e:	0031      	movs	r1, r6
 8004830:	0028      	movs	r0, r5
 8004832:	f7ff fe09 	bl	8004448 <_lv_obj_get_style_int>
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
 8004836:	2800      	cmp	r0, #0
 8004838:	d1c0      	bne.n	80047bc <update_style_cache+0x1c4>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 800483a:	2205      	movs	r2, #5
 800483c:	0031      	movs	r1, r6
 800483e:	0028      	movs	r0, r5
 8004840:	f7ff fe02 	bl	8004448 <_lv_obj_get_style_int>
       lv_obj_get_style_transform_width(obj, part) != 0 ||
 8004844:	2800      	cmp	r0, #0
 8004846:	d1b9      	bne.n	80047bc <update_style_cache+0x1c4>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int)
 8004848:	2207      	movs	r2, #7
 800484a:	0031      	movs	r1, r6
 800484c:	0028      	movs	r0, r5
 800484e:	f7ff fdfb 	bl	8004448 <_lv_obj_get_style_int>
       lv_obj_get_style_transform_height(obj, part) != 0 ||
 8004852:	2380      	movs	r3, #128	; 0x80
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	4298      	cmp	r0, r3
 8004858:	d1b0      	bne.n	80047bc <update_style_cache+0x1c4>
 800485a:	e7b3      	b.n	80047c4 <update_style_cache+0x1cc>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 800485c:	2211      	movs	r2, #17
 800485e:	0031      	movs	r1, r6
 8004860:	0028      	movs	r0, r5
 8004862:	f7ff fdf1 	bl	8004448 <_lv_obj_get_style_int>
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
 8004866:	2800      	cmp	r0, #0
 8004868:	d1b7      	bne.n	80047da <update_style_cache+0x1e2>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 800486a:	2212      	movs	r2, #18
 800486c:	0031      	movs	r1, r6
 800486e:	0028      	movs	r0, r5
 8004870:	f7ff fdea 	bl	8004448 <_lv_obj_get_style_int>
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
 8004874:	2800      	cmp	r0, #0
 8004876:	d1b0      	bne.n	80047da <update_style_cache+0x1e2>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 8004878:	2213      	movs	r2, #19
 800487a:	0031      	movs	r1, r6
 800487c:	0028      	movs	r0, r5
 800487e:	f7ff fde3 	bl	8004448 <_lv_obj_get_style_int>
       lv_obj_get_style_pad_left(obj, part) != 0 ||
 8004882:	2800      	cmp	r0, #0
 8004884:	d1a9      	bne.n	80047da <update_style_cache+0x1e2>
 8004886:	e7ac      	b.n	80047e2 <update_style_cache+0x1ea>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int)
 8004888:	2216      	movs	r2, #22
 800488a:	0031      	movs	r1, r6
 800488c:	0028      	movs	r0, r5
 800488e:	f7ff fddb 	bl	8004448 <_lv_obj_get_style_int>
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
 8004892:	2800      	cmp	r0, #0
 8004894:	d1b0      	bne.n	80047f8 <update_style_cache+0x200>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int)
 8004896:	2217      	movs	r2, #23
 8004898:	0031      	movs	r1, r6
 800489a:	0028      	movs	r0, r5
 800489c:	f7ff fdd4 	bl	8004448 <_lv_obj_get_style_int>
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
 80048a0:	2800      	cmp	r0, #0
 80048a2:	d1a9      	bne.n	80047f8 <update_style_cache+0x200>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int)
 80048a4:	2218      	movs	r2, #24
 80048a6:	0031      	movs	r1, r6
 80048a8:	0028      	movs	r0, r5
 80048aa:	f7ff fdcd 	bl	8004448 <_lv_obj_get_style_int>
       lv_obj_get_style_margin_left(obj, part) != 0 ||
 80048ae:	2800      	cmp	r0, #0
 80048b0:	d1a2      	bne.n	80047f8 <update_style_cache+0x200>
 80048b2:	e7a5      	b.n	8004800 <update_style_cache+0x208>
 80048b4:	00008082 	.word	0x00008082
 80048b8:	0000808e 	.word	0x0000808e
 80048bc:	20000028 	.word	0x20000028
 80048c0:	00008080 	.word	0x00008080
 80048c4:	000080ad 	.word	0x000080ad
 80048c8:	00008081 	.word	0x00008081

080048cc <_lv_obj_get_style_opa>:
{
 80048cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ce:	0004      	movs	r4, r0
 80048d0:	000f      	movs	r7, r1
 80048d2:	b087      	sub	sp, #28
    attr = prop_ori >> 8;
 80048d4:	0a13      	lsrs	r3, r2, #8
{
 80048d6:	9202      	str	r2, [sp, #8]
    attr = prop_ori >> 8;
 80048d8:	9303      	str	r3, [sp, #12]
    while(parent) {
 80048da:	9201      	str	r2, [sp, #4]
 80048dc:	2c00      	cmp	r4, #0
 80048de:	d03d      	beq.n	800495c <_lv_obj_get_style_opa+0x90>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 80048e0:	0039      	movs	r1, r7
 80048e2:	0020      	movs	r0, r4
 80048e4:	f7ff fd1a 	bl	800431c <lv_obj_get_style_list>
        if(!list->ignore_cache && list->style_cnt > 0) {
 80048e8:	2208      	movs	r2, #8
 80048ea:	7943      	ldrb	r3, [r0, #5]
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 80048ec:	0005      	movs	r5, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
 80048ee:	4213      	tst	r3, r2
 80048f0:	d11c      	bne.n	800492c <_lv_obj_get_style_opa+0x60>
 80048f2:	213f      	movs	r1, #63	; 0x3f
 80048f4:	7902      	ldrb	r2, [r0, #4]
 80048f6:	420a      	tst	r2, r1
 80048f8:	d018      	beq.n	800492c <_lv_obj_get_style_opa+0x60>
 80048fa:	4e27      	ldr	r6, [pc, #156]	; (8004998 <_lv_obj_get_style_opa+0xcc>)
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
 80048fc:	075b      	lsls	r3, r3, #29
 80048fe:	d405      	bmi.n	800490c <_lv_obj_get_style_opa+0x40>
 8004900:	9a01      	ldr	r2, [sp, #4]
 8004902:	0039      	movs	r1, r7
 8004904:	4032      	ands	r2, r6
 8004906:	0020      	movs	r0, r4
 8004908:	f7ff fe76 	bl	80045f8 <update_style_cache>
            switch(prop & (~LV_STYLE_STATE_MASK)) {
 800490c:	9b01      	ldr	r3, [sp, #4]
 800490e:	401e      	ands	r6, r3
 8004910:	4b22      	ldr	r3, [pc, #136]	; (800499c <_lv_obj_get_style_opa+0xd0>)
 8004912:	429e      	cmp	r6, r3
 8004914:	d01f      	beq.n	8004956 <_lv_obj_get_style_opa+0x8a>
 8004916:	4b22      	ldr	r3, [pc, #136]	; (80049a0 <_lv_obj_get_style_opa+0xd4>)
 8004918:	429e      	cmp	r6, r3
 800491a:	d02c      	beq.n	8004976 <_lv_obj_get_style_opa+0xaa>
 800491c:	2e2c      	cmp	r6, #44	; 0x2c
 800491e:	d105      	bne.n	800492c <_lv_obj_get_style_opa+0x60>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
 8004920:	79ab      	ldrb	r3, [r5, #6]
 8004922:	06da      	lsls	r2, r3, #27
 8004924:	d425      	bmi.n	8004972 <_lv_obj_get_style_opa+0xa6>
                    if(list->bg_opa_transp) def = true;
 8004926:	2208      	movs	r2, #8
 8004928:	4213      	tst	r3, r2
 800492a:	d117      	bne.n	800495c <_lv_obj_get_style_opa+0x90>
        lv_state_t state = lv_obj_get_state(parent, part);
 800492c:	0039      	movs	r1, r7
 800492e:	0020      	movs	r0, r4
 8004930:	f7ff fd41 	bl	80043b6 <lv_obj_get_state>
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 8004934:	9b02      	ldr	r3, [sp, #8]
 8004936:	0200      	lsls	r0, r0, #8
 8004938:	1818      	adds	r0, r3, r0
 800493a:	b283      	uxth	r3, r0
 800493c:	9301      	str	r3, [sp, #4]
        res = _lv_style_list_get_opa(list, prop, &value_act);
 800493e:	ab04      	add	r3, sp, #16
 8004940:	1dde      	adds	r6, r3, #7
 8004942:	0032      	movs	r2, r6
 8004944:	9901      	ldr	r1, [sp, #4]
 8004946:	0028      	movs	r0, r5
 8004948:	f002 fa1a 	bl	8006d80 <_lv_style_list_get_opa>
        if(res == LV_RES_OK) return value_act;
 800494c:	2801      	cmp	r0, #1
 800494e:	d116      	bne.n	800497e <_lv_obj_get_style_opa+0xb2>
 8004950:	7830      	ldrb	r0, [r6, #0]
}
 8004952:	b007      	add	sp, #28
 8004954:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    if(list->opa_scale_cover) def = true;
 8004956:	796b      	ldrb	r3, [r5, #5]
 8004958:	069b      	lsls	r3, r3, #26
 800495a:	d5e7      	bpl.n	800492c <_lv_obj_get_style_opa+0x60>
    switch(prop) {
 800495c:	480e      	ldr	r0, [pc, #56]	; (8004998 <_lv_obj_get_style_opa+0xcc>)
 800495e:	9b01      	ldr	r3, [sp, #4]
 8004960:	4003      	ands	r3, r0
 8004962:	0018      	movs	r0, r3
 8004964:	2b6d      	cmp	r3, #109	; 0x6d
 8004966:	d014      	beq.n	8004992 <_lv_obj_get_style_opa+0xc6>
 8004968:	4b0d      	ldr	r3, [pc, #52]	; (80049a0 <_lv_obj_get_style_opa+0xd4>)
 800496a:	4298      	cmp	r0, r3
 800496c:	d011      	beq.n	8004992 <_lv_obj_get_style_opa+0xc6>
 800496e:	282c      	cmp	r0, #44	; 0x2c
 8004970:	d00f      	beq.n	8004992 <_lv_obj_get_style_opa+0xc6>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
 8004972:	20ff      	movs	r0, #255	; 0xff
 8004974:	e7ed      	b.n	8004952 <_lv_obj_get_style_opa+0x86>
                    if(list->img_recolor_opa_transp) def = true;
 8004976:	79eb      	ldrb	r3, [r5, #7]
 8004978:	06db      	lsls	r3, r3, #27
 800497a:	d5d7      	bpl.n	800492c <_lv_obj_get_style_opa+0x60>
 800497c:	e7ee      	b.n	800495c <_lv_obj_get_style_opa+0x90>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 800497e:	466b      	mov	r3, sp
 8004980:	7b1b      	ldrb	r3, [r3, #12]
 8004982:	b25b      	sxtb	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	dae9      	bge.n	800495c <_lv_obj_get_style_opa+0x90>
        if(part != LV_OBJ_PART_MAIN) {
 8004988:	2f00      	cmp	r7, #0
 800498a:	d100      	bne.n	800498e <_lv_obj_get_style_opa+0xc2>
    return obj->parent;
 800498c:	6824      	ldr	r4, [r4, #0]
 800498e:	2700      	movs	r7, #0
 8004990:	e7a4      	b.n	80048dc <_lv_obj_get_style_opa+0x10>
            return LV_OPA_TRANSP;
 8004992:	2000      	movs	r0, #0
 8004994:	e7dd      	b.n	8004952 <_lv_obj_get_style_opa+0x86>
 8004996:	46c0      	nop			; (mov r8, r8)
 8004998:	ffff80ff 	.word	0xffff80ff
 800499c:	0000800c 	.word	0x0000800c
 80049a0:	000080ad 	.word	0x000080ad

080049a4 <_lv_obj_get_style_ptr>:
{
 80049a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049a6:	0005      	movs	r5, r0
 80049a8:	000f      	movs	r7, r1
    while(parent) {
 80049aa:	0014      	movs	r4, r2
{
 80049ac:	b085      	sub	sp, #20
    attr = prop_ori >> 8;
 80049ae:	0a13      	lsrs	r3, r2, #8
{
 80049b0:	9200      	str	r2, [sp, #0]
    attr = prop_ori >> 8;
 80049b2:	9301      	str	r3, [sp, #4]
    while(parent) {
 80049b4:	2d00      	cmp	r5, #0
 80049b6:	d036      	beq.n	8004a26 <_lv_obj_get_style_ptr+0x82>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 80049b8:	0039      	movs	r1, r7
 80049ba:	0028      	movs	r0, r5
 80049bc:	f7ff fcae 	bl	800431c <lv_obj_get_style_list>
        if(!list->ignore_cache && list->style_cnt > 0) {
 80049c0:	2208      	movs	r2, #8
 80049c2:	7943      	ldrb	r3, [r0, #5]
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 80049c4:	0006      	movs	r6, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
 80049c6:	4213      	tst	r3, r2
 80049c8:	d117      	bne.n	80049fa <_lv_obj_get_style_ptr+0x56>
 80049ca:	213f      	movs	r1, #63	; 0x3f
 80049cc:	7902      	ldrb	r2, [r0, #4]
 80049ce:	420a      	tst	r2, r1
 80049d0:	d013      	beq.n	80049fa <_lv_obj_get_style_ptr+0x56>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
 80049d2:	075b      	lsls	r3, r3, #29
 80049d4:	d405      	bmi.n	80049e2 <_lv_obj_get_style_ptr+0x3e>
 80049d6:	4a20      	ldr	r2, [pc, #128]	; (8004a58 <_lv_obj_get_style_ptr+0xb4>)
 80049d8:	0039      	movs	r1, r7
 80049da:	4022      	ands	r2, r4
 80049dc:	0028      	movs	r0, r5
 80049de:	f7ff fe0b 	bl	80045f8 <update_style_cache>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 80049e2:	4b1d      	ldr	r3, [pc, #116]	; (8004a58 <_lv_obj_get_style_ptr+0xb4>)
 80049e4:	4023      	ands	r3, r4
 80049e6:	2b7f      	cmp	r3, #127	; 0x7f
 80049e8:	d019      	beq.n	8004a1e <_lv_obj_get_style_ptr+0x7a>
 80049ea:	4a1c      	ldr	r2, [pc, #112]	; (8004a5c <_lv_obj_get_style_ptr+0xb8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d025      	beq.n	8004a3c <_lv_obj_get_style_ptr+0x98>
 80049f0:	2b6e      	cmp	r3, #110	; 0x6e
 80049f2:	d102      	bne.n	80049fa <_lv_obj_get_style_ptr+0x56>
                    if(list->pattern_img_null) def = true;
 80049f4:	79f3      	ldrb	r3, [r6, #7]
 80049f6:	079b      	lsls	r3, r3, #30
 80049f8:	d415      	bmi.n	8004a26 <_lv_obj_get_style_ptr+0x82>
        lv_state_t state = lv_obj_get_state(parent, part);
 80049fa:	0039      	movs	r1, r7
 80049fc:	0028      	movs	r0, r5
 80049fe:	f7ff fcda 	bl	80043b6 <lv_obj_get_state>
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 8004a02:	9b00      	ldr	r3, [sp, #0]
 8004a04:	0204      	lsls	r4, r0, #8
 8004a06:	191c      	adds	r4, r3, r4
 8004a08:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_ptr(list, prop, &value_act);
 8004a0a:	aa03      	add	r2, sp, #12
 8004a0c:	0021      	movs	r1, r4
 8004a0e:	0030      	movs	r0, r6
 8004a10:	f002 f9f6 	bl	8006e00 <_lv_style_list_get_ptr>
        if(res == LV_RES_OK)  return value_act;
 8004a14:	2801      	cmp	r0, #1
 8004a16:	d115      	bne.n	8004a44 <_lv_obj_get_style_ptr+0xa0>
 8004a18:	9803      	ldr	r0, [sp, #12]
}
 8004a1a:	b005      	add	sp, #20
 8004a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    if(list->value_txt_str) def = true;
 8004a1e:	2208      	movs	r2, #8
 8004a20:	79f3      	ldrb	r3, [r6, #7]
 8004a22:	4213      	tst	r3, r2
 8004a24:	d0e9      	beq.n	80049fa <_lv_obj_get_style_ptr+0x56>
    switch(prop) {
 8004a26:	480c      	ldr	r0, [pc, #48]	; (8004a58 <_lv_obj_get_style_ptr+0xb4>)
 8004a28:	4004      	ands	r4, r0
 8004a2a:	2c7e      	cmp	r4, #126	; 0x7e
 8004a2c:	d003      	beq.n	8004a36 <_lv_obj_get_style_ptr+0x92>
 8004a2e:	4b0b      	ldr	r3, [pc, #44]	; (8004a5c <_lv_obj_get_style_ptr+0xb8>)
    return NULL;
 8004a30:	2000      	movs	r0, #0
    switch(prop) {
 8004a32:	429c      	cmp	r4, r3
 8004a34:	d1f1      	bne.n	8004a1a <_lv_obj_get_style_ptr+0x76>
            return lv_theme_get_font_normal();
 8004a36:	f008 fac3 	bl	800cfc0 <lv_theme_get_font_normal>
 8004a3a:	e7ee      	b.n	8004a1a <_lv_obj_get_style_ptr+0x76>
                    if(list->text_font_normal) def = true;
 8004a3c:	79f3      	ldrb	r3, [r6, #7]
 8004a3e:	2b7f      	cmp	r3, #127	; 0x7f
 8004a40:	d9db      	bls.n	80049fa <_lv_obj_get_style_ptr+0x56>
 8004a42:	e7f0      	b.n	8004a26 <_lv_obj_get_style_ptr+0x82>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8004a44:	466b      	mov	r3, sp
 8004a46:	791b      	ldrb	r3, [r3, #4]
 8004a48:	b25b      	sxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	daeb      	bge.n	8004a26 <_lv_obj_get_style_ptr+0x82>
        if(part != LV_OBJ_PART_MAIN) {
 8004a4e:	2f00      	cmp	r7, #0
 8004a50:	d100      	bne.n	8004a54 <_lv_obj_get_style_ptr+0xb0>
    return obj->parent;
 8004a52:	682d      	ldr	r5, [r5, #0]
 8004a54:	2700      	movs	r7, #0
 8004a56:	e7ad      	b.n	80049b4 <_lv_obj_get_style_ptr+0x10>
 8004a58:	ffff80ff 	.word	0xffff80ff
 8004a5c:	0000808e 	.word	0x0000808e

08004a60 <update_style_cache_children>:
 * Update the cache of style list
 * @param obj pointer to an object
 * @param part the part of the object
 */
static void update_style_cache_children(lv_obj_t * obj)
{
 8004a60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a62:	0006      	movs	r6, r0
    uint8_t part;
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 8004a64:	2500      	movs	r5, #0
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8004a66:	0029      	movs	r1, r5
 8004a68:	0030      	movs	r0, r6
 8004a6a:	f7ff fc57 	bl	800431c <lv_obj_get_style_list>
 8004a6e:	1e04      	subs	r4, r0, #0
        if(list == NULL) break;
 8004a70:	d058      	beq.n	8004b24 <update_style_cache_children+0xc4>

        bool ignore_cache_ori = list->ignore_cache;
 8004a72:	7942      	ldrb	r2, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa)
 8004a74:	0029      	movs	r1, r5
 8004a76:	0713      	lsls	r3, r2, #28
 8004a78:	0fdb      	lsrs	r3, r3, #31
 8004a7a:	9301      	str	r3, [sp, #4]
        list->ignore_cache = 1;
 8004a7c:	2308      	movs	r3, #8
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	7143      	strb	r3, [r0, #5]
 8004a82:	4a33      	ldr	r2, [pc, #204]	; (8004b50 <update_style_cache_children+0xf0>)
 8004a84:	0030      	movs	r0, r6
 8004a86:	f7ff ff21 	bl	80048cc <_lv_obj_get_style_opa>

        list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
 8004a8a:	38ff      	subs	r0, #255	; 0xff
 8004a8c:	4243      	negs	r3, r0
 8004a8e:	4158      	adcs	r0, r3
 8004a90:	2220      	movs	r2, #32
 8004a92:	7963      	ldrb	r3, [r4, #5]
 8004a94:	0140      	lsls	r0, r0, #5
 8004a96:	4393      	bics	r3, r2
 8004a98:	4318      	orrs	r0, r3
 8004a9a:	7160      	strb	r0, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int)
 8004a9c:	4a2d      	ldr	r2, [pc, #180]	; (8004b54 <update_style_cache_children+0xf4>)
 8004a9e:	0029      	movs	r1, r5
 8004aa0:	0030      	movs	r0, r6
 8004aa2:	f7ff fcd1 	bl	8004448 <_lv_obj_get_style_int>
        list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
 8004aa6:	b2c0      	uxtb	r0, r0
 8004aa8:	4243      	negs	r3, r0
 8004aaa:	4158      	adcs	r0, r3
 8004aac:	2240      	movs	r2, #64	; 0x40
 8004aae:	79e3      	ldrb	r3, [r4, #7]
 8004ab0:	0180      	lsls	r0, r0, #6
 8004ab2:	4393      	bics	r3, r2
 8004ab4:	4318      	orrs	r0, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr)
 8004ab6:	4a28      	ldr	r2, [pc, #160]	; (8004b58 <update_style_cache_children+0xf8>)
 8004ab8:	0029      	movs	r1, r5
 8004aba:	71e0      	strb	r0, [r4, #7]
 8004abc:	0030      	movs	r0, r6
 8004abe:	f7ff ff71 	bl	80049a4 <_lv_obj_get_style_ptr>
 8004ac2:	0007      	movs	r7, r0
        list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == lv_theme_get_font_normal() ? 1 : 0;
 8004ac4:	f008 fa7c 	bl	800cfc0 <lv_theme_get_font_normal>
 8004ac8:	1bc7      	subs	r7, r0, r7
 8004aca:	237f      	movs	r3, #127	; 0x7f
 8004acc:	4278      	negs	r0, r7
 8004ace:	4147      	adcs	r7, r0
 8004ad0:	79e0      	ldrb	r0, [r4, #7]
 8004ad2:	01ff      	lsls	r7, r7, #7
 8004ad4:	4018      	ands	r0, r3
 8004ad6:	4307      	orrs	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa)
 8004ad8:	4a20      	ldr	r2, [pc, #128]	; (8004b5c <update_style_cache_children+0xfc>)
 8004ada:	0029      	movs	r1, r5
 8004adc:	71e7      	strb	r7, [r4, #7]
 8004ade:	0030      	movs	r0, r6
 8004ae0:	f7ff fef4 	bl	80048cc <_lv_obj_get_style_opa>
        list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
 8004ae4:	4243      	negs	r3, r0
 8004ae6:	4158      	adcs	r0, r3
 8004ae8:	2210      	movs	r2, #16
 8004aea:	0103      	lsls	r3, r0, #4
 8004aec:	79e0      	ldrb	r0, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int)
 8004aee:	0029      	movs	r1, r5
 8004af0:	4390      	bics	r0, r2

        list->text_space_zero = 1;
 8004af2:	4318      	orrs	r0, r3
 8004af4:	1892      	adds	r2, r2, r2
 8004af6:	4310      	orrs	r0, r2
 8004af8:	71e0      	strb	r0, [r4, #7]
 8004afa:	4a19      	ldr	r2, [pc, #100]	; (8004b60 <update_style_cache_children+0x100>)
 8004afc:	0030      	movs	r0, r6
 8004afe:	f7ff fca3 	bl	8004448 <_lv_obj_get_style_int>
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 8004b02:	2800      	cmp	r0, #0
 8004b04:	d014      	beq.n	8004b30 <update_style_cache_children+0xd0>
           lv_obj_get_style_text_line_space(obj, part) != 0) {
            list->text_space_zero = 0;
 8004b06:	2220      	movs	r2, #32
 8004b08:	79e3      	ldrb	r3, [r4, #7]
 8004b0a:	4393      	bics	r3, r2
 8004b0c:	71e3      	strb	r3, [r4, #7]
        }

        list->ignore_cache = ignore_cache_ori;
 8004b0e:	2108      	movs	r1, #8
 8004b10:	9b01      	ldr	r3, [sp, #4]
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 8004b12:	3501      	adds	r5, #1
        list->ignore_cache = ignore_cache_ori;
 8004b14:	00da      	lsls	r2, r3, #3
 8004b16:	7963      	ldrb	r3, [r4, #5]
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 8004b18:	b2ed      	uxtb	r5, r5
        list->ignore_cache = ignore_cache_ori;
 8004b1a:	438b      	bics	r3, r1
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	7163      	strb	r3, [r4, #5]
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 8004b20:	2d40      	cmp	r5, #64	; 0x40
 8004b22:	d1a0      	bne.n	8004a66 <update_style_cache_children+0x6>
        result = _lv_ll_get_head(&obj->child_ll);
 8004b24:	1d30      	adds	r0, r6, #4
 8004b26:	f007 fa22 	bl	800bf6e <_lv_ll_get_head>
    }

    lv_obj_t * child = lv_obj_get_child(obj, NULL);
    while(child) {
        update_style_cache_children(child);
        child = lv_obj_get_child(obj, child);
 8004b2a:	1e04      	subs	r4, r0, #0
    while(child) {
 8004b2c:	d108      	bne.n	8004b40 <update_style_cache_children+0xe0>
    }

}
 8004b2e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int)
 8004b30:	4a0c      	ldr	r2, [pc, #48]	; (8004b64 <update_style_cache_children+0x104>)
 8004b32:	0029      	movs	r1, r5
 8004b34:	0030      	movs	r0, r6
 8004b36:	f7ff fc87 	bl	8004448 <_lv_obj_get_style_int>
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	d1e3      	bne.n	8004b06 <update_style_cache_children+0xa6>
 8004b3e:	e7e6      	b.n	8004b0e <update_style_cache_children+0xae>
        update_style_cache_children(child);
 8004b40:	0020      	movs	r0, r4
 8004b42:	f7ff ff8d 	bl	8004a60 <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
 8004b46:	0021      	movs	r1, r4
 8004b48:	0030      	movs	r0, r6
 8004b4a:	f7ff f8c3 	bl	8003cd4 <lv_obj_get_child>
 8004b4e:	e7ec      	b.n	8004b2a <update_style_cache_children+0xca>
 8004b50:	0000800c 	.word	0x0000800c
 8004b54:	00008082 	.word	0x00008082
 8004b58:	0000808e 	.word	0x0000808e
 8004b5c:	000080ad 	.word	0x000080ad
 8004b60:	00008080 	.word	0x00008080
 8004b64:	00008081 	.word	0x00008081

08004b68 <lv_obj_refresh_style>:
{
 8004b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6a:	0005      	movs	r5, r0
 * The cache will be updated when a cached property asked nest time
 * @param obj pointer to an object
 */
static void invalidate_style_cache(lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
{
    if(style_prop_is_cacheble(prop) == false) return;
 8004b6c:	0010      	movs	r0, r2
{
 8004b6e:	0014      	movs	r4, r2
    if(style_prop_is_cacheble(prop) == false) return;
 8004b70:	2600      	movs	r6, #0
 8004b72:	f7fe fda1 	bl	80036b8 <style_prop_is_cacheble>

    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
        if(list == NULL) break;
        list->valid_cache = 0;
 8004b76:	2704      	movs	r7, #4
    if(style_prop_is_cacheble(prop) == false) return;
 8004b78:	42b0      	cmp	r0, r6
 8004b7a:	d150      	bne.n	8004c1e <lv_obj_refresh_style+0xb6>
    switch(prop) {
 8004b7c:	2c71      	cmp	r4, #113	; 0x71
 8004b7e:	d834      	bhi.n	8004bea <lv_obj_refresh_style+0x82>
 8004b80:	2c70      	cmp	r4, #112	; 0x70
 8004b82:	d20b      	bcs.n	8004b9c <lv_obj_refresh_style+0x34>
 8004b84:	2c41      	cmp	r4, #65	; 0x41
 8004b86:	d823      	bhi.n	8004bd0 <lv_obj_refresh_style+0x68>
 8004b88:	2c40      	cmp	r4, #64	; 0x40
 8004b8a:	d207      	bcs.n	8004b9c <lv_obj_refresh_style+0x34>
 8004b8c:	2c02      	cmp	r4, #2
 8004b8e:	d325      	bcc.n	8004bdc <lv_obj_refresh_style+0x74>
 8004b90:	2c07      	cmp	r4, #7
 8004b92:	d903      	bls.n	8004b9c <lv_obj_refresh_style+0x34>
 8004b94:	0023      	movs	r3, r4
 8004b96:	3b10      	subs	r3, #16
 8004b98:	2b08      	cmp	r3, #8
 8004b9a:	d81f      	bhi.n	8004bdc <lv_obj_refresh_style+0x74>
        lv_obj_invalidate(obj);
 8004b9c:	0028      	movs	r0, r5
 8004b9e:	f7fe ff5e 	bl	8003a5e <lv_obj_invalidate>
        obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	2104      	movs	r1, #4
 8004ba6:	0028      	movs	r0, r5
 8004ba8:	69eb      	ldr	r3, [r5, #28]
 8004baa:	4798      	blx	r3
        switch(prop) {
 8004bac:	2c15      	cmp	r4, #21
 8004bae:	d303      	bcc.n	8004bb8 <lv_obj_refresh_style+0x50>
 8004bb0:	2c18      	cmp	r4, #24
 8004bb2:	d95d      	bls.n	8004c70 <lv_obj_refresh_style+0x108>
 8004bb4:	2cff      	cmp	r4, #255	; 0xff
 8004bb6:	d05b      	beq.n	8004c70 <lv_obj_refresh_style+0x108>
        lv_obj_invalidate(obj);
 8004bb8:	0028      	movs	r0, r5
 8004bba:	f7fe ff50 	bl	8003a5e <lv_obj_invalidate>
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
 8004bbe:	2cff      	cmp	r4, #255	; 0xff
 8004bc0:	d002      	beq.n	8004bc8 <lv_obj_refresh_style+0x60>
 8004bc2:	b224      	sxth	r4, r4
 8004bc4:	2c00      	cmp	r4, #0
 8004bc6:	da0c      	bge.n	8004be2 <lv_obj_refresh_style+0x7a>
 8004bc8:	0028      	movs	r0, r5
 8004bca:	f7ff f88d 	bl	8003ce8 <refresh_children_style>
}
 8004bce:	e008      	b.n	8004be2 <lv_obj_refresh_style+0x7a>
    switch(prop) {
 8004bd0:	2c53      	cmp	r4, #83	; 0x53
 8004bd2:	d807      	bhi.n	8004be4 <lv_obj_refresh_style+0x7c>
 8004bd4:	2c50      	cmp	r4, #80	; 0x50
 8004bd6:	d2e1      	bcs.n	8004b9c <lv_obj_refresh_style+0x34>
 8004bd8:	2c4c      	cmp	r4, #76	; 0x4c
 8004bda:	d0df      	beq.n	8004b9c <lv_obj_refresh_style+0x34>
        lv_obj_invalidate(obj);
 8004bdc:	0028      	movs	r0, r5
 8004bde:	f7fe ff3e 	bl	8003a5e <lv_obj_invalidate>
}
 8004be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(prop) {
 8004be4:	2c5c      	cmp	r4, #92	; 0x5c
 8004be6:	d1f9      	bne.n	8004bdc <lv_obj_refresh_style+0x74>
 8004be8:	e7d8      	b.n	8004b9c <lv_obj_refresh_style+0x34>
 8004bea:	2c7f      	cmp	r4, #127	; 0x7f
 8004bec:	d808      	bhi.n	8004c00 <lv_obj_refresh_style+0x98>
 8004bee:	2c7e      	cmp	r4, #126	; 0x7e
 8004bf0:	d2d4      	bcs.n	8004b9c <lv_obj_refresh_style+0x34>
 8004bf2:	2c73      	cmp	r4, #115	; 0x73
 8004bf4:	d3f2      	bcc.n	8004bdc <lv_obj_refresh_style+0x74>
 8004bf6:	2c75      	cmp	r4, #117	; 0x75
 8004bf8:	d9d0      	bls.n	8004b9c <lv_obj_refresh_style+0x34>
 8004bfa:	2c7c      	cmp	r4, #124	; 0x7c
 8004bfc:	d1ee      	bne.n	8004bdc <lv_obj_refresh_style+0x74>
 8004bfe:	e7cd      	b.n	8004b9c <lv_obj_refresh_style+0x34>
 8004c00:	4b1f      	ldr	r3, [pc, #124]	; (8004c80 <lv_obj_refresh_style+0x118>)
 8004c02:	429c      	cmp	r4, r3
 8004c04:	d807      	bhi.n	8004c16 <lv_obj_refresh_style+0xae>
 8004c06:	4b1f      	ldr	r3, [pc, #124]	; (8004c84 <lv_obj_refresh_style+0x11c>)
 8004c08:	429c      	cmp	r4, r3
 8004c0a:	d2c7      	bcs.n	8004b9c <lv_obj_refresh_style+0x34>
 8004c0c:	2c90      	cmp	r4, #144	; 0x90
 8004c0e:	d0c5      	beq.n	8004b9c <lv_obj_refresh_style+0x34>
 8004c10:	2cff      	cmp	r4, #255	; 0xff
 8004c12:	d1e3      	bne.n	8004bdc <lv_obj_refresh_style+0x74>
 8004c14:	e7c2      	b.n	8004b9c <lv_obj_refresh_style+0x34>
 8004c16:	4b1c      	ldr	r3, [pc, #112]	; (8004c88 <lv_obj_refresh_style+0x120>)
 8004c18:	429c      	cmp	r4, r3
 8004c1a:	d1df      	bne.n	8004bdc <lv_obj_refresh_style+0x74>
 8004c1c:	e7be      	b.n	8004b9c <lv_obj_refresh_style+0x34>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8004c1e:	b2f1      	uxtb	r1, r6
 8004c20:	0028      	movs	r0, r5
 8004c22:	f7ff fb7b 	bl	800431c <lv_obj_get_style_list>
        if(list == NULL) break;
 8004c26:	2800      	cmp	r0, #0
 8004c28:	d005      	beq.n	8004c36 <lv_obj_refresh_style+0xce>
        list->valid_cache = 0;
 8004c2a:	7943      	ldrb	r3, [r0, #5]
 8004c2c:	3601      	adds	r6, #1
 8004c2e:	43bb      	bics	r3, r7
 8004c30:	7143      	strb	r3, [r0, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8004c32:	2e40      	cmp	r6, #64	; 0x40
 8004c34:	d1f3      	bne.n	8004c1e <lv_obj_refresh_style+0xb6>
    if(style_prop_is_cacheble(prop) == false) return;
 8004c36:	2640      	movs	r6, #64	; 0x40
    }

    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
        if(list == NULL) break;
        list->valid_cache = 0;
 8004c38:	2704      	movs	r7, #4
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8004c3a:	0031      	movs	r1, r6
 8004c3c:	0028      	movs	r0, r5
 8004c3e:	f7ff fb6d 	bl	800431c <lv_obj_get_style_list>
        if(list == NULL) break;
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d006      	beq.n	8004c54 <lv_obj_refresh_style+0xec>
        list->valid_cache = 0;
 8004c46:	7943      	ldrb	r3, [r0, #5]
 8004c48:	3601      	adds	r6, #1
 8004c4a:	43bb      	bics	r3, r7
 8004c4c:	b2f6      	uxtb	r6, r6
 8004c4e:	7143      	strb	r3, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 8004c50:	2eff      	cmp	r6, #255	; 0xff
 8004c52:	d1f2      	bne.n	8004c3a <lv_obj_refresh_style+0xd2>
        result = _lv_ll_get_head(&obj->child_ll);
 8004c54:	1d28      	adds	r0, r5, #4
 8004c56:	f007 f98a 	bl	800bf6e <_lv_ll_get_head>
    }

    lv_obj_t * child = lv_obj_get_child(obj, NULL);
    while(child) {
        update_style_cache_children(child);
        child = lv_obj_get_child(obj, child);
 8004c5a:	1e06      	subs	r6, r0, #0
    while(child) {
 8004c5c:	d100      	bne.n	8004c60 <lv_obj_refresh_style+0xf8>
 8004c5e:	e78d      	b.n	8004b7c <lv_obj_refresh_style+0x14>
        update_style_cache_children(child);
 8004c60:	0030      	movs	r0, r6
 8004c62:	f7ff fefd 	bl	8004a60 <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
 8004c66:	0031      	movs	r1, r6
 8004c68:	0028      	movs	r0, r5
 8004c6a:	f7ff f833 	bl	8003cd4 <lv_obj_get_child>
 8004c6e:	e7f4      	b.n	8004c5a <lv_obj_refresh_style+0xf2>
                if(obj->parent) obj->parent->signal_cb(obj->parent, LV_SIGNAL_CHILD_CHG, NULL);
 8004c70:	6828      	ldr	r0, [r5, #0]
 8004c72:	2800      	cmp	r0, #0
 8004c74:	d0a0      	beq.n	8004bb8 <lv_obj_refresh_style+0x50>
 8004c76:	69c3      	ldr	r3, [r0, #28]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	4798      	blx	r3
 8004c7e:	e79b      	b.n	8004bb8 <lv_obj_refresh_style+0x50>
 8004c80:	00008081 	.word	0x00008081
 8004c84:	00008080 	.word	0x00008080
 8004c88:	0000808e 	.word	0x0000808e

08004c8c <lv_obj_reset_style_list>:
{
 8004c8c:	b570      	push	{r4, r5, r6, lr}
 8004c8e:	000d      	movs	r5, r1
 8004c90:	0004      	movs	r4, r0
    lv_obj_clean_style_list(obj, part);
 8004c92:	f7ff fb56 	bl	8004342 <lv_obj_clean_style_list>
    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
 8004c96:	0029      	movs	r1, r5
 8004c98:	22ff      	movs	r2, #255	; 0xff
 8004c9a:	0020      	movs	r0, r4
 8004c9c:	f7ff ff64 	bl	8004b68 <lv_obj_refresh_style>
}
 8004ca0:	bd70      	pop	{r4, r5, r6, pc}

08004ca2 <report_style_mod_core>:
{
 8004ca2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ca4:	0006      	movs	r6, r0
 8004ca6:	000d      	movs	r5, r1
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 8004ca8:	2400      	movs	r4, #0
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8004caa:	0021      	movs	r1, r4
 8004cac:	0028      	movs	r0, r5
 8004cae:	f7ff fb35 	bl	800431c <lv_obj_get_style_list>
        if(list == NULL) break;
 8004cb2:	2800      	cmp	r0, #0
 8004cb4:	d02d      	beq.n	8004d12 <report_style_mod_core+0x70>
void _lv_style_list_reset(lv_style_list_t * style_list);

static inline lv_style_t * lv_style_list_get_style(lv_style_list_t * list, uint8_t id)
{
    if(list->has_trans && list->skip_trans) id++;
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
 8004cb6:	223f      	movs	r2, #63	; 0x3f
        for(ci = 0; ci < list->style_cnt; ci++) {
 8004cb8:	2300      	movs	r3, #0
 8004cba:	7901      	ldrb	r1, [r0, #4]
 8004cbc:	068f      	lsls	r7, r1, #26
 8004cbe:	4011      	ands	r1, r2
 8004cc0:	0ebf      	lsrs	r7, r7, #26
 8004cc2:	9101      	str	r1, [sp, #4]
 8004cc4:	429f      	cmp	r7, r3
 8004cc6:	d920      	bls.n	8004d0a <report_style_mod_core+0x68>
    if(list->has_trans && list->skip_trans) id++;
 8004cc8:	21c0      	movs	r1, #192	; 0xc0
 8004cca:	8882      	ldrh	r2, [r0, #4]
 8004ccc:	0049      	lsls	r1, r1, #1
 8004cce:	4011      	ands	r1, r2
 8004cd0:	468c      	mov	ip, r1
 8004cd2:	21c0      	movs	r1, #192	; 0xc0
 8004cd4:	001a      	movs	r2, r3
 8004cd6:	0049      	lsls	r1, r1, #1
 8004cd8:	458c      	cmp	ip, r1
 8004cda:	d101      	bne.n	8004ce0 <report_style_mod_core+0x3e>
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	b2d2      	uxtb	r2, r2
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
 8004ce0:	9901      	ldr	r1, [sp, #4]
 8004ce2:	468c      	mov	ip, r1
 8004ce4:	2900      	cmp	r1, #0
 8004ce6:	d007      	beq.n	8004cf8 <report_style_mod_core+0x56>
 8004ce8:	2100      	movs	r1, #0
 8004cea:	468c      	mov	ip, r1
 8004cec:	4297      	cmp	r7, r2
 8004cee:	d903      	bls.n	8004cf8 <report_style_mod_core+0x56>
    return list->style_list[id];
 8004cf0:	6801      	ldr	r1, [r0, #0]
 8004cf2:	0092      	lsls	r2, r2, #2
 8004cf4:	5852      	ldr	r2, [r2, r1]
 8004cf6:	4694      	mov	ip, r2
            if(_class == style || style == NULL) {
 8004cf8:	4566      	cmp	r6, ip
 8004cfa:	d001      	beq.n	8004d00 <report_style_mod_core+0x5e>
 8004cfc:	2e00      	cmp	r6, #0
 8004cfe:	d10e      	bne.n	8004d1e <report_style_mod_core+0x7c>
                lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
 8004d00:	22ff      	movs	r2, #255	; 0xff
 8004d02:	0021      	movs	r1, r4
 8004d04:	0028      	movs	r0, r5
 8004d06:	f7ff ff2f 	bl	8004b68 <lv_obj_refresh_style>
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 8004d0a:	3401      	adds	r4, #1
 8004d0c:	b2e4      	uxtb	r4, r4
 8004d0e:	2c40      	cmp	r4, #64	; 0x40
 8004d10:	d1cb      	bne.n	8004caa <report_style_mod_core+0x8>
        result = _lv_ll_get_head(&obj->child_ll);
 8004d12:	1d28      	adds	r0, r5, #4
 8004d14:	f007 f92b 	bl	800bf6e <_lv_ll_get_head>
        child = lv_obj_get_child(obj, child);
 8004d18:	1e04      	subs	r4, r0, #0
    while(child) {
 8004d1a:	d103      	bne.n	8004d24 <report_style_mod_core+0x82>
}
 8004d1c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        for(ci = 0; ci < list->style_cnt; ci++) {
 8004d1e:	3301      	adds	r3, #1
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	e7cf      	b.n	8004cc4 <report_style_mod_core+0x22>
        report_style_mod_core(style, child);
 8004d24:	0021      	movs	r1, r4
 8004d26:	0030      	movs	r0, r6
 8004d28:	f7ff ffbb 	bl	8004ca2 <report_style_mod_core>
        child = lv_obj_get_child(obj, child);
 8004d2c:	0021      	movs	r1, r4
 8004d2e:	0028      	movs	r0, r5
 8004d30:	f7fe ffd0 	bl	8003cd4 <lv_obj_get_child>
 8004d34:	e7f0      	b.n	8004d18 <report_style_mod_core+0x76>

08004d36 <lv_obj_report_style_mod>:
{
 8004d36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d38:	0007      	movs	r7, r0
    lv_disp_t * d = lv_disp_get_next(NULL);
 8004d3a:	2000      	movs	r0, #0
        d = lv_disp_get_next(d);
 8004d3c:	f006 fd30 	bl	800b7a0 <lv_disp_get_next>
 8004d40:	1e04      	subs	r4, r0, #0
    while(d) {
 8004d42:	d100      	bne.n	8004d46 <lv_obj_report_style_mod+0x10>
}
 8004d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _LV_LL_READ(d->scr_ll, i) {
 8004d46:	0026      	movs	r6, r4
 8004d48:	3630      	adds	r6, #48	; 0x30
 8004d4a:	0030      	movs	r0, r6
 8004d4c:	f007 f90f 	bl	800bf6e <_lv_ll_get_head>
 8004d50:	1e05      	subs	r5, r0, #0
 8004d52:	d101      	bne.n	8004d58 <lv_obj_report_style_mod+0x22>
        d = lv_disp_get_next(d);
 8004d54:	0020      	movs	r0, r4
 8004d56:	e7f1      	b.n	8004d3c <lv_obj_report_style_mod+0x6>
            report_style_mod_core(style, i);
 8004d58:	0029      	movs	r1, r5
 8004d5a:	0038      	movs	r0, r7
 8004d5c:	f7ff ffa1 	bl	8004ca2 <report_style_mod_core>
        _LV_LL_READ(d->scr_ll, i) {
 8004d60:	0029      	movs	r1, r5
 8004d62:	0030      	movs	r0, r6
 8004d64:	f007 f90b 	bl	800bf7e <_lv_ll_get_next>
 8004d68:	e7f2      	b.n	8004d50 <lv_obj_report_style_mod+0x1a>

08004d6a <lv_obj_get_signal_cb>:
    return obj->signal_cb;
 8004d6a:	69c0      	ldr	r0, [r0, #28]
}
 8004d6c:	4770      	bx	lr

08004d6e <lv_obj_get_ext_attr>:
    return obj->ext_attr;
 8004d6e:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 8004d70:	4770      	bx	lr

08004d72 <lv_obj_is_focused>:
{
 8004d72:	b510      	push	{r4, lr}
    if(obj->group_p) {
 8004d74:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
 8004d76:	0004      	movs	r4, r0
    return false;
 8004d78:	2000      	movs	r0, #0
    if(obj->group_p) {
 8004d7a:	4283      	cmp	r3, r0
 8004d7c:	d006      	beq.n	8004d8c <lv_obj_is_focused+0x1a>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
 8004d7e:	0018      	movs	r0, r3
 8004d80:	f7fe fc19 	bl	80035b6 <lv_group_get_focused>
 8004d84:	1b00      	subs	r0, r0, r4
 8004d86:	4243      	negs	r3, r0
 8004d88:	4158      	adcs	r0, r3
 8004d8a:	b2c0      	uxtb	r0, r0
}
 8004d8c:	bd10      	pop	{r4, pc}

08004d8e <lv_obj_handle_get_type_signal>:
{
 8004d8e:	2300      	movs	r3, #0
 8004d90:	b510      	push	{r4, lr}
        if(buf->type[i] == NULL) break;
 8004d92:	009c      	lsls	r4, r3, #2
 8004d94:	5904      	ldr	r4, [r0, r4]
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	2c00      	cmp	r4, #0
 8004d9a:	d003      	beq.n	8004da4 <lv_obj_handle_get_type_signal+0x16>
 8004d9c:	3301      	adds	r3, #1
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8004d9e:	2b07      	cmp	r3, #7
 8004da0:	d1f7      	bne.n	8004d92 <lv_obj_handle_get_type_signal+0x4>
 8004da2:	001a      	movs	r2, r3
    buf->type[i] = name;
 8004da4:	0092      	lsls	r2, r2, #2
 8004da6:	5011      	str	r1, [r2, r0]
}
 8004da8:	2001      	movs	r0, #1
 8004daa:	bd10      	pop	{r4, pc}

08004dac <lv_obj_init_draw_rect_dsc>:
{
 8004dac:	b570      	push	{r4, r5, r6, lr}
 8004dae:	0014      	movs	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 8004db0:	2201      	movs	r2, #1
 8004db2:	0005      	movs	r5, r0
 8004db4:	000e      	movs	r6, r1
 8004db6:	f7ff fb47 	bl	8004448 <_lv_obj_get_style_int>
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 8004dba:	7b23      	ldrb	r3, [r4, #12]
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
 8004dbc:	8020      	strh	r0, [r4, #0]
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d028      	beq.n	8004e14 <lv_obj_init_draw_rect_dsc+0x68>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 8004dc2:	222c      	movs	r2, #44	; 0x2c
 8004dc4:	0031      	movs	r1, r6
 8004dc6:	0028      	movs	r0, r5
 8004dc8:	f7ff fd80 	bl	80048cc <_lv_obj_get_style_opa>
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
 8004dcc:	7320      	strb	r0, [r4, #12]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 8004dce:	2802      	cmp	r0, #2
 8004dd0:	d920      	bls.n	8004e14 <lv_obj_init_draw_rect_dsc+0x68>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 8004dd2:	2229      	movs	r2, #41	; 0x29
 8004dd4:	0031      	movs	r1, r6
 8004dd6:	0028      	movs	r0, r5
 8004dd8:	f7ff fafe 	bl	80043d8 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int)
 8004ddc:	2223      	movs	r2, #35	; 0x23
            draw_dsc->bg_color = lv_obj_get_style_bg_color(obj, part);
 8004dde:	8060      	strh	r0, [r4, #2]
 8004de0:	0031      	movs	r1, r6
 8004de2:	0028      	movs	r0, r5
 8004de4:	f7ff fb30 	bl	8004448 <_lv_obj_get_style_int>
 8004de8:	b2c0      	uxtb	r0, r0
            draw_dsc->bg_grad_dir =  lv_obj_get_style_bg_grad_dir(obj, part);
 8004dea:	71a0      	strb	r0, [r4, #6]
            if(draw_dsc->bg_grad_dir != LV_GRAD_DIR_NONE) {
 8004dec:	2800      	cmp	r0, #0
 8004dee:	d011      	beq.n	8004e14 <lv_obj_init_draw_rect_dsc+0x68>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color)
 8004df0:	222a      	movs	r2, #42	; 0x2a
 8004df2:	0031      	movs	r1, r6
 8004df4:	0028      	movs	r0, r5
 8004df6:	f7ff faef 	bl	80043d8 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int)
 8004dfa:	2221      	movs	r2, #33	; 0x21
                draw_dsc->bg_grad_color = lv_obj_get_style_bg_grad_color(obj, part);
 8004dfc:	80a0      	strh	r0, [r4, #4]
 8004dfe:	0031      	movs	r1, r6
 8004e00:	0028      	movs	r0, r5
 8004e02:	f7ff fb21 	bl	8004448 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int)
 8004e06:	2222      	movs	r2, #34	; 0x22
                draw_dsc->bg_main_color_stop =  lv_obj_get_style_bg_main_stop(obj, part);
 8004e08:	8120      	strh	r0, [r4, #8]
 8004e0a:	0031      	movs	r1, r6
 8004e0c:	0028      	movs	r0, r5
 8004e0e:	f7ff fb1b 	bl	8004448 <_lv_obj_get_style_int>
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
 8004e12:	8160      	strh	r0, [r4, #10]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int)
 8004e14:	2230      	movs	r2, #48	; 0x30
 8004e16:	0031      	movs	r1, r6
 8004e18:	0028      	movs	r0, r5
 8004e1a:	f7ff fb15 	bl	8004448 <_lv_obj_get_style_int>
    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
 8004e1e:	8220      	strh	r0, [r4, #16]
    if(draw_dsc->border_width) {
 8004e20:	2800      	cmp	r0, #0
 8004e22:	d017      	beq.n	8004e54 <lv_obj_init_draw_rect_dsc+0xa8>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
 8004e24:	7d23      	ldrb	r3, [r4, #20]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d014      	beq.n	8004e54 <lv_obj_init_draw_rect_dsc+0xa8>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa)
 8004e2a:	223c      	movs	r2, #60	; 0x3c
 8004e2c:	0031      	movs	r1, r6
 8004e2e:	0028      	movs	r0, r5
 8004e30:	f7ff fd4c 	bl	80048cc <_lv_obj_get_style_opa>
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
 8004e34:	7520      	strb	r0, [r4, #20]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 8004e36:	2802      	cmp	r0, #2
 8004e38:	d90c      	bls.n	8004e54 <lv_obj_init_draw_rect_dsc+0xa8>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int)
 8004e3a:	2231      	movs	r2, #49	; 0x31
 8004e3c:	0031      	movs	r1, r6
 8004e3e:	0028      	movs	r0, r5
 8004e40:	f7ff fb02 	bl	8004448 <_lv_obj_get_style_int>
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
 8004e44:	b2c0      	uxtb	r0, r0
 8004e46:	8260      	strh	r0, [r4, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color)
 8004e48:	2239      	movs	r2, #57	; 0x39
 8004e4a:	0031      	movs	r1, r6
 8004e4c:	0028      	movs	r0, r5
 8004e4e:	f7ff fac3 	bl	80043d8 <_lv_obj_get_style_color>
                draw_dsc->border_color = lv_obj_get_style_border_color(obj, part);
 8004e52:	81e0      	strh	r0, [r4, #14]
}
 8004e54:	bd70      	pop	{r4, r5, r6, pc}
	...

08004e58 <lv_obj_design>:
{
 8004e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e5a:	b09f      	sub	sp, #124	; 0x7c
 8004e5c:	0004      	movs	r4, r0
 8004e5e:	9101      	str	r1, [sp, #4]
 8004e60:	0015      	movs	r5, r2
    if(mode == LV_DESIGN_COVER_CHK) {
 8004e62:	2a02      	cmp	r2, #2
 8004e64:	d155      	bne.n	8004f12 <lv_obj_design+0xba>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
 8004e66:	2100      	movs	r1, #0
 8004e68:	f7ff fbbe 	bl	80045e8 <lv_obj_get_style_clip_corner>
 8004e6c:	0006      	movs	r6, r0
 8004e6e:	2003      	movs	r0, #3
 8004e70:	2e00      	cmp	r6, #0
 8004e72:	d12e      	bne.n	8004ed2 <lv_obj_design+0x7a>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 8004e74:	2201      	movs	r2, #1
 8004e76:	0031      	movs	r1, r6
 8004e78:	0020      	movs	r0, r4
 8004e7a:	f7ff fae5 	bl	8004448 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 8004e7e:	2204      	movs	r2, #4
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 8004e80:	9002      	str	r0, [sp, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 8004e82:	0031      	movs	r1, r6
 8004e84:	0020      	movs	r0, r4
 8004e86:	f7ff fadf 	bl	8004448 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 8004e8a:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 8004e8c:	0007      	movs	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 8004e8e:	0031      	movs	r1, r6
 8004e90:	0020      	movs	r0, r4
 8004e92:	f7ff fad9 	bl	8004448 <_lv_obj_get_style_int>
        lv_area_copy(&coords, &obj->coords);
 8004e96:	0021      	movs	r1, r4
 8004e98:	ad09      	add	r5, sp, #36	; 0x24
 8004e9a:	9003      	str	r0, [sp, #12]
 8004e9c:	3110      	adds	r1, #16
 8004e9e:	0028      	movs	r0, r5
 8004ea0:	f7fe fc82 	bl	80037a8 <lv_area_copy>
        coords.x1 -= w;
 8004ea4:	882b      	ldrh	r3, [r5, #0]
 8004ea6:	b2bf      	uxth	r7, r7
 8004ea8:	1bdb      	subs	r3, r3, r7
 8004eaa:	802b      	strh	r3, [r5, #0]
        coords.x2 += w;
 8004eac:	88ab      	ldrh	r3, [r5, #4]
        coords.y1 -= h;
 8004eae:	886a      	ldrh	r2, [r5, #2]
        coords.x2 += w;
 8004eb0:	18ff      	adds	r7, r7, r3
        coords.y1 -= h;
 8004eb2:	466b      	mov	r3, sp
 8004eb4:	899b      	ldrh	r3, [r3, #12]
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
 8004eb6:	0029      	movs	r1, r5
        coords.y1 -= h;
 8004eb8:	1ad2      	subs	r2, r2, r3
 8004eba:	806a      	strh	r2, [r5, #2]
        coords.y2 += h;
 8004ebc:	88ea      	ldrh	r2, [r5, #6]
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
 8004ebe:	9801      	ldr	r0, [sp, #4]
        coords.y2 += h;
 8004ec0:	189b      	adds	r3, r3, r2
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
 8004ec2:	9a02      	ldr	r2, [sp, #8]
        coords.x2 += w;
 8004ec4:	80af      	strh	r7, [r5, #4]
        coords.y2 += h;
 8004ec6:	80eb      	strh	r3, [r5, #6]
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
 8004ec8:	f006 fe7b 	bl	800bbc2 <_lv_area_is_in>
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	d102      	bne.n	8004ed6 <lv_obj_design+0x7e>
 8004ed0:	2002      	movs	r0, #2
}
 8004ed2:	b01f      	add	sp, #124	; 0x7c
 8004ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 8004ed6:	222c      	movs	r2, #44	; 0x2c
 8004ed8:	0031      	movs	r1, r6
 8004eda:	0020      	movs	r0, r4
 8004edc:	f7ff fcf6 	bl	80048cc <_lv_obj_get_style_opa>
        if(lv_obj_get_style_bg_opa(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
 8004ee0:	28fc      	cmp	r0, #252	; 0xfc
 8004ee2:	d9f5      	bls.n	8004ed0 <lv_obj_design+0x78>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int)
 8004ee4:	0031      	movs	r1, r6
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	0020      	movs	r0, r4
 8004eea:	f7ff faad 	bl	8004448 <_lv_obj_get_style_int>
        if(lv_obj_get_style_bg_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
 8004eee:	b2c1      	uxtb	r1, r0
 8004ef0:	2900      	cmp	r1, #0
 8004ef2:	d1ed      	bne.n	8004ed0 <lv_obj_design+0x78>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int)
 8004ef4:	2232      	movs	r2, #50	; 0x32
 8004ef6:	0020      	movs	r0, r4
 8004ef8:	f7ff faa6 	bl	8004448 <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
 8004efc:	b2c1      	uxtb	r1, r0
 8004efe:	2900      	cmp	r1, #0
 8004f00:	d1e6      	bne.n	8004ed0 <lv_obj_design+0x78>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa)
 8004f02:	4a66      	ldr	r2, [pc, #408]	; (800509c <lv_obj_design+0x244>)
 8004f04:	0020      	movs	r0, r4
 8004f06:	f7ff fce1 	bl	80048cc <_lv_obj_get_style_opa>
        if(lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
 8004f0a:	28fc      	cmp	r0, #252	; 0xfc
 8004f0c:	d9e0      	bls.n	8004ed0 <lv_obj_design+0x78>
        return LV_DESIGN_RES_COVER;
 8004f0e:	2001      	movs	r0, #1
 8004f10:	e7df      	b.n	8004ed2 <lv_obj_design+0x7a>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8004f12:	2a00      	cmp	r2, #0
 8004f14:	d171      	bne.n	8004ffa <lv_obj_design+0x1a2>
        lv_draw_rect_dsc_init(&draw_dsc);
 8004f16:	ae09      	add	r6, sp, #36	; 0x24
 8004f18:	0030      	movs	r0, r6
 8004f1a:	f005 f877 	bl	800a00c <lv_draw_rect_dsc_init>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int)
 8004f1e:	2233      	movs	r2, #51	; 0x33
 8004f20:	0029      	movs	r1, r5
 8004f22:	0020      	movs	r0, r4
 8004f24:	f7ff fa90 	bl	8004448 <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
 8004f28:	2800      	cmp	r0, #0
 8004f2a:	d003      	beq.n	8004f34 <lv_obj_design+0xdc>
            draw_dsc.border_post = 1;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	7db2      	ldrb	r2, [r6, #22]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	75b3      	strb	r3, [r6, #22]
        lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
 8004f34:	0032      	movs	r2, r6
 8004f36:	2100      	movs	r1, #0
 8004f38:	0020      	movs	r0, r4
 8004f3a:	f7ff ff37 	bl	8004dac <lv_obj_init_draw_rect_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 8004f3e:	2204      	movs	r2, #4
 8004f40:	2100      	movs	r1, #0
 8004f42:	0020      	movs	r0, r4
 8004f44:	f7ff fa80 	bl	8004448 <_lv_obj_get_style_int>
        lv_area_copy(&coords, &obj->coords);
 8004f48:	0027      	movs	r7, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 8004f4a:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 8004f4c:	9002      	str	r0, [sp, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 8004f4e:	2100      	movs	r1, #0
 8004f50:	0020      	movs	r0, r4
 8004f52:	f7ff fa79 	bl	8004448 <_lv_obj_get_style_int>
 8004f56:	ad05      	add	r5, sp, #20
 8004f58:	3710      	adds	r7, #16
 8004f5a:	9003      	str	r0, [sp, #12]
 8004f5c:	0039      	movs	r1, r7
 8004f5e:	0028      	movs	r0, r5
 8004f60:	f7fe fc22 	bl	80037a8 <lv_area_copy>
        coords.x1 -= w;
 8004f64:	466b      	mov	r3, sp
 8004f66:	882a      	ldrh	r2, [r5, #0]
 8004f68:	891b      	ldrh	r3, [r3, #8]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
 8004f6a:	9901      	ldr	r1, [sp, #4]
        coords.x1 -= w;
 8004f6c:	1ad2      	subs	r2, r2, r3
 8004f6e:	802a      	strh	r2, [r5, #0]
        coords.x2 += w;
 8004f70:	88aa      	ldrh	r2, [r5, #4]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
 8004f72:	0028      	movs	r0, r5
        coords.x2 += w;
 8004f74:	189b      	adds	r3, r3, r2
 8004f76:	80ab      	strh	r3, [r5, #4]
        coords.y1 -= h;
 8004f78:	466b      	mov	r3, sp
 8004f7a:	886a      	ldrh	r2, [r5, #2]
 8004f7c:	899b      	ldrh	r3, [r3, #12]
 8004f7e:	1ad2      	subs	r2, r2, r3
 8004f80:	806a      	strh	r2, [r5, #2]
        coords.y2 += h;
 8004f82:	88ea      	ldrh	r2, [r5, #6]
 8004f84:	189b      	adds	r3, r3, r2
        lv_draw_rect(&coords, clip_area, &draw_dsc);
 8004f86:	0032      	movs	r2, r6
        coords.y2 += h;
 8004f88:	80eb      	strh	r3, [r5, #6]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
 8004f8a:	f005 f867 	bl	800a05c <lv_draw_rect>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
 8004f8e:	2100      	movs	r1, #0
 8004f90:	0020      	movs	r0, r4
 8004f92:	f7ff fb29 	bl	80045e8 <lv_obj_get_style_clip_corner>
 8004f96:	2800      	cmp	r0, #0
 8004f98:	d02a      	beq.n	8004ff0 <lv_obj_design+0x198>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
 8004f9a:	201c      	movs	r0, #28
 8004f9c:	f007 faba 	bl	800c514 <_lv_mem_buf_get>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	0005      	movs	r5, r0
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	0020      	movs	r0, r4
 8004fa8:	f7ff fa4e 	bl	8004448 <_lv_obj_get_style_int>
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
 8004fac:	7db3      	ldrb	r3, [r6, #22]
 8004fae:	0002      	movs	r2, r0
 8004fb0:	07db      	lsls	r3, r3, #31
 8004fb2:	d51f      	bpl.n	8004ff4 <lv_obj_design+0x19c>
 8004fb4:	7d33      	ldrb	r3, [r6, #20]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d91c      	bls.n	8004ff4 <lv_obj_design+0x19c>
 8004fba:	2110      	movs	r1, #16
 8004fbc:	5e73      	ldrsh	r3, [r6, r1]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	dd18      	ble.n	8004ff4 <lv_obj_design+0x19c>
                cc_area.x1 = obj->coords.x1 + 1;
 8004fc2:	8a23      	ldrh	r3, [r4, #16]
 8004fc4:	a907      	add	r1, sp, #28
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	800b      	strh	r3, [r1, #0]
                cc_area.y1 = obj->coords.y1 + 1;
 8004fca:	8a63      	ldrh	r3, [r4, #18]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	804b      	strh	r3, [r1, #2]
                cc_area.x2 = obj->coords.x2 - 1;
 8004fd0:	8aa3      	ldrh	r3, [r4, #20]
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	808b      	strh	r3, [r1, #4]
                cc_area.y2 = obj->coords.y2 - 1;
 8004fd6:	8ae3      	ldrh	r3, [r4, #22]
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	80cb      	strh	r3, [r1, #6]
                lv_draw_mask_radius_init(mp, &cc_area, r, false);
 8004fdc:	2300      	movs	r3, #0
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
 8004fde:	0028      	movs	r0, r5
 8004fe0:	f004 ff96 	bl	8009f10 <lv_draw_mask_radius_init>
            lv_draw_mask_add(mp, obj + 8);
 8004fe4:	2398      	movs	r3, #152	; 0x98
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	18e1      	adds	r1, r4, r3
 8004fea:	0028      	movs	r0, r5
 8004fec:	f004 fe9a 	bl	8009d24 <lv_draw_mask_add>
    return LV_DESIGN_RES_OK;
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	e76e      	b.n	8004ed2 <lv_obj_design+0x7a>
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	0039      	movs	r1, r7
 8004ff8:	e7f1      	b.n	8004fde <lv_obj_design+0x186>
    else if(mode == LV_DESIGN_DRAW_POST) {
 8004ffa:	2a01      	cmp	r2, #1
 8004ffc:	d1f8      	bne.n	8004ff0 <lv_obj_design+0x198>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
 8004ffe:	2100      	movs	r1, #0
 8005000:	f7ff faf2 	bl	80045e8 <lv_obj_get_style_clip_corner>
 8005004:	2800      	cmp	r0, #0
 8005006:	d006      	beq.n	8005016 <lv_obj_design+0x1be>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
 8005008:	2398      	movs	r3, #152	; 0x98
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	18e0      	adds	r0, r4, r3
 800500e:	f004 fecd 	bl	8009dac <lv_draw_mask_remove_custom>
            _lv_mem_buf_release(param);
 8005012:	f007 f987 	bl	800c324 <_lv_mem_buf_release>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int)
 8005016:	2233      	movs	r2, #51	; 0x33
 8005018:	2100      	movs	r1, #0
 800501a:	0020      	movs	r0, r4
 800501c:	f7ff fa14 	bl	8004448 <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
 8005020:	2800      	cmp	r0, #0
 8005022:	d0e5      	beq.n	8004ff0 <lv_obj_design+0x198>
            lv_draw_rect_dsc_init(&draw_dsc);
 8005024:	af09      	add	r7, sp, #36	; 0x24
 8005026:	0038      	movs	r0, r7
 8005028:	f004 fff0 	bl	800a00c <lv_draw_rect_dsc_init>
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
 800502c:	234a      	movs	r3, #74	; 0x4a
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 800502e:	2500      	movs	r5, #0
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
 8005030:	aa04      	add	r2, sp, #16
 8005032:	189b      	adds	r3, r3, r2
 8005034:	701d      	strb	r5, [r3, #0]
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
 8005036:	233e      	movs	r3, #62	; 0x3e
 8005038:	189b      	adds	r3, r3, r2
 800503a:	701d      	strb	r5, [r3, #0]
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
 800503c:	0020      	movs	r0, r4
            draw_dsc.value_opa = LV_OPA_TRANSP;
 800503e:	ab1a      	add	r3, sp, #104	; 0x68
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
 8005040:	003a      	movs	r2, r7
 8005042:	0029      	movs	r1, r5
            draw_dsc.value_opa = LV_OPA_TRANSP;
 8005044:	701d      	strb	r5, [r3, #0]
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 8005046:	733d      	strb	r5, [r7, #12]
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
 8005048:	f7ff feb0 	bl	8004dac <lv_obj_init_draw_rect_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 800504c:	2204      	movs	r2, #4
 800504e:	0029      	movs	r1, r5
 8005050:	0020      	movs	r0, r4
 8005052:	f7ff f9f9 	bl	8004448 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 8005056:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 8005058:	0006      	movs	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 800505a:	0029      	movs	r1, r5
 800505c:	0020      	movs	r0, r4
 800505e:	f7ff f9f3 	bl	8004448 <_lv_obj_get_style_int>
            lv_area_copy(&coords, &obj->coords);
 8005062:	0021      	movs	r1, r4
 8005064:	ac07      	add	r4, sp, #28
 8005066:	9002      	str	r0, [sp, #8]
 8005068:	3110      	adds	r1, #16
 800506a:	0020      	movs	r0, r4
 800506c:	f7fe fb9c 	bl	80037a8 <lv_area_copy>
            coords.x1 -= w;
 8005070:	8823      	ldrh	r3, [r4, #0]
 8005072:	b2b6      	uxth	r6, r6
 8005074:	1b9b      	subs	r3, r3, r6
 8005076:	8023      	strh	r3, [r4, #0]
            coords.x2 += w;
 8005078:	88a3      	ldrh	r3, [r4, #4]
            coords.y1 -= h;
 800507a:	8862      	ldrh	r2, [r4, #2]
            coords.x2 += w;
 800507c:	18f6      	adds	r6, r6, r3
            coords.y1 -= h;
 800507e:	466b      	mov	r3, sp
 8005080:	891b      	ldrh	r3, [r3, #8]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
 8005082:	0020      	movs	r0, r4
            coords.y1 -= h;
 8005084:	1ad2      	subs	r2, r2, r3
 8005086:	8062      	strh	r2, [r4, #2]
            coords.y2 += h;
 8005088:	88e2      	ldrh	r2, [r4, #6]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
 800508a:	9901      	ldr	r1, [sp, #4]
            coords.y2 += h;
 800508c:	189b      	adds	r3, r3, r2
            lv_draw_rect(&coords, clip_area, &draw_dsc);
 800508e:	003a      	movs	r2, r7
            coords.x2 += w;
 8005090:	80a6      	strh	r6, [r4, #4]
            coords.y2 += h;
 8005092:	80e3      	strh	r3, [r4, #6]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
 8005094:	f004 ffe2 	bl	800a05c <lv_draw_rect>
    return LV_DESIGN_RES_OK;
 8005098:	0028      	movs	r0, r5
 800509a:	e71a      	b.n	8004ed2 <lv_obj_design+0x7a>
 800509c:	0000800c 	.word	0x0000800c

080050a0 <lv_obj_init_draw_label_dsc>:
{
 80050a0:	b570      	push	{r4, r5, r6, lr}
 80050a2:	0014      	movs	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa)
 80050a4:	4a1d      	ldr	r2, [pc, #116]	; (800511c <lv_obj_init_draw_label_dsc+0x7c>)
 80050a6:	0005      	movs	r5, r0
 80050a8:	000e      	movs	r6, r1
 80050aa:	f7ff fc0f 	bl	80048cc <_lv_obj_get_style_opa>
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
 80050ae:	7320      	strb	r0, [r4, #12]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 80050b0:	2802      	cmp	r0, #2
 80050b2:	d931      	bls.n	8005118 <lv_obj_init_draw_label_dsc+0x78>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
 80050b4:	4a1a      	ldr	r2, [pc, #104]	; (8005120 <lv_obj_init_draw_label_dsc+0x80>)
 80050b6:	0031      	movs	r1, r6
 80050b8:	0028      	movs	r0, r5
 80050ba:	f7ff f98d 	bl	80043d8 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int)
 80050be:	4a19      	ldr	r2, [pc, #100]	; (8005124 <lv_obj_init_draw_label_dsc+0x84>)
    draw_dsc->color = lv_obj_get_style_text_color(obj, part);
 80050c0:	8020      	strh	r0, [r4, #0]
 80050c2:	0031      	movs	r1, r6
 80050c4:	0028      	movs	r0, r5
 80050c6:	f7ff f9bf 	bl	8004448 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int)
 80050ca:	4a17      	ldr	r2, [pc, #92]	; (8005128 <lv_obj_init_draw_label_dsc+0x88>)
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
 80050cc:	8220      	strh	r0, [r4, #16]
 80050ce:	0031      	movs	r1, r6
 80050d0:	0028      	movs	r0, r5
 80050d2:	f7ff f9b9 	bl	8004448 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int)
 80050d6:	4a15      	ldr	r2, [pc, #84]	; (800512c <lv_obj_init_draw_label_dsc+0x8c>)
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
 80050d8:	81e0      	strh	r0, [r4, #14]
 80050da:	0031      	movs	r1, r6
 80050dc:	0028      	movs	r0, r5
 80050de:	f7ff f9b3 	bl	8004448 <_lv_obj_get_style_int>
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
 80050e2:	1ce3      	adds	r3, r4, #3
 80050e4:	77d8      	strb	r0, [r3, #31]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr)
 80050e6:	4a12      	ldr	r2, [pc, #72]	; (8005130 <lv_obj_init_draw_label_dsc+0x90>)
 80050e8:	0031      	movs	r1, r6
 80050ea:	0028      	movs	r0, r5
 80050ec:	f7ff fc5a 	bl	80049a4 <_lv_obj_get_style_ptr>
    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 80050f0:	4b10      	ldr	r3, [pc, #64]	; (8005134 <lv_obj_init_draw_label_dsc+0x94>)
 80050f2:	6962      	ldr	r2, [r4, #20]
    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
 80050f4:	60a0      	str	r0, [r4, #8]
    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d00e      	beq.n	8005118 <lv_obj_init_draw_label_dsc+0x78>
 80050fa:	69a2      	ldr	r2, [r4, #24]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d00b      	beq.n	8005118 <lv_obj_init_draw_label_dsc+0x78>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color)
 8005100:	4a0d      	ldr	r2, [pc, #52]	; (8005138 <lv_obj_init_draw_label_dsc+0x98>)
 8005102:	0031      	movs	r1, r6
 8005104:	0028      	movs	r0, r5
 8005106:	f7ff f967 	bl	80043d8 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color)
 800510a:	4a0c      	ldr	r2, [pc, #48]	; (800513c <lv_obj_init_draw_label_dsc+0x9c>)
        draw_dsc->sel_color = lv_obj_get_style_text_sel_color(obj, part);
 800510c:	8060      	strh	r0, [r4, #2]
 800510e:	0031      	movs	r1, r6
 8005110:	0028      	movs	r0, r5
 8005112:	f7ff f961 	bl	80043d8 <_lv_obj_get_style_color>
        draw_dsc->sel_bg_color = lv_obj_get_style_text_sel_bg_color(obj, part);
 8005116:	80a0      	strh	r0, [r4, #4]
}
 8005118:	bd70      	pop	{r4, r5, r6, pc}
 800511a:	46c0      	nop			; (mov r8, r8)
 800511c:	0000808c 	.word	0x0000808c
 8005120:	00008089 	.word	0x00008089
 8005124:	00008080 	.word	0x00008080
 8005128:	00008081 	.word	0x00008081
 800512c:	00008082 	.word	0x00008082
 8005130:	0000808e 	.word	0x0000808e
 8005134:	0000ffff 	.word	0x0000ffff
 8005138:	0000808a 	.word	0x0000808a
 800513c:	0000808b 	.word	0x0000808b

08005140 <lv_obj_init_draw_img_dsc>:
{
 8005140:	b570      	push	{r4, r5, r6, lr}
 8005142:	0014      	movs	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa)
 8005144:	4a16      	ldr	r2, [pc, #88]	; (80051a0 <lv_obj_init_draw_img_dsc+0x60>)
 8005146:	0005      	movs	r5, r0
 8005148:	000e      	movs	r6, r1
 800514a:	f7ff fbbf 	bl	80048cc <_lv_obj_get_style_opa>
    draw_dsc->opa = lv_obj_get_style_image_opa(obj, part);
 800514e:	7020      	strb	r0, [r4, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8005150:	2802      	cmp	r0, #2
 8005152:	d924      	bls.n	800519e <lv_obj_init_draw_img_dsc+0x5e>
    draw_dsc->angle = 0;
 8005154:	2300      	movs	r3, #0
 8005156:	8063      	strh	r3, [r4, #2]
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
 8005158:	3301      	adds	r3, #1
 800515a:	33ff      	adds	r3, #255	; 0xff
 800515c:	8123      	strh	r3, [r4, #8]
 800515e:	8aab      	ldrh	r3, [r5, #20]
 8005160:	8a2a      	ldrh	r2, [r5, #16]
 8005162:	3301      	adds	r3, #1
 8005164:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
 8005166:	b21b      	sxth	r3, r3
 8005168:	0fda      	lsrs	r2, r3, #31
 800516a:	18d3      	adds	r3, r2, r3
 800516c:	105b      	asrs	r3, r3, #1
 800516e:	80a3      	strh	r3, [r4, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005170:	8aeb      	ldrh	r3, [r5, #22]
 8005172:	8a6a      	ldrh	r2, [r5, #18]
 8005174:	3301      	adds	r3, #1
 8005176:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
 8005178:	b21b      	sxth	r3, r3
 800517a:	0fda      	lsrs	r2, r3, #31
 800517c:	18d3      	adds	r3, r2, r3
 800517e:	105b      	asrs	r3, r3, #1
 8005180:	80e3      	strh	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa)
 8005182:	4a08      	ldr	r2, [pc, #32]	; (80051a4 <lv_obj_init_draw_img_dsc+0x64>)
 8005184:	0031      	movs	r1, r6
 8005186:	0028      	movs	r0, r5
 8005188:	f7ff fba0 	bl	80048cc <_lv_obj_get_style_opa>
    draw_dsc->recolor_opa = lv_obj_get_style_image_recolor_opa(obj, part);
 800518c:	72a0      	strb	r0, [r4, #10]
    if(draw_dsc->recolor_opa > 0) {
 800518e:	2800      	cmp	r0, #0
 8005190:	d005      	beq.n	800519e <lv_obj_init_draw_img_dsc+0x5e>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color)
 8005192:	4a05      	ldr	r2, [pc, #20]	; (80051a8 <lv_obj_init_draw_img_dsc+0x68>)
 8005194:	0031      	movs	r1, r6
 8005196:	0028      	movs	r0, r5
 8005198:	f7ff f91e 	bl	80043d8 <_lv_obj_get_style_color>
        draw_dsc->recolor = lv_obj_get_style_image_recolor(obj, part);
 800519c:	81a0      	strh	r0, [r4, #12]
}
 800519e:	bd70      	pop	{r4, r5, r6, pc}
 80051a0:	000080ac 	.word	0x000080ac
 80051a4:	000080ad 	.word	0x000080ad
 80051a8:	000080a9 	.word	0x000080a9

080051ac <lv_obj_init_draw_line_dsc>:
{
 80051ac:	b570      	push	{r4, r5, r6, lr}
 80051ae:	0014      	movs	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int)
 80051b0:	2290      	movs	r2, #144	; 0x90
 80051b2:	0005      	movs	r5, r0
 80051b4:	000e      	movs	r6, r1
 80051b6:	f7ff f947 	bl	8004448 <_lv_obj_get_style_int>
    draw_dsc->width = lv_obj_get_style_line_width(obj, part);
 80051ba:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
 80051bc:	2800      	cmp	r0, #0
 80051be:	d02d      	beq.n	800521c <lv_obj_init_draw_line_dsc+0x70>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa)
 80051c0:	229c      	movs	r2, #156	; 0x9c
 80051c2:	0031      	movs	r1, r6
 80051c4:	0028      	movs	r0, r5
 80051c6:	f7ff fb81 	bl	80048cc <_lv_obj_get_style_opa>
    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
 80051ca:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 80051cc:	2802      	cmp	r0, #2
 80051ce:	d925      	bls.n	800521c <lv_obj_init_draw_line_dsc+0x70>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color)
 80051d0:	2299      	movs	r2, #153	; 0x99
 80051d2:	0031      	movs	r1, r6
 80051d4:	0028      	movs	r0, r5
 80051d6:	f7ff f8ff 	bl	80043d8 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int)
 80051da:	2292      	movs	r2, #146	; 0x92
    draw_dsc->color = lv_obj_get_style_line_color(obj, part);
 80051dc:	8020      	strh	r0, [r4, #0]
 80051de:	0031      	movs	r1, r6
 80051e0:	0028      	movs	r0, r5
 80051e2:	f7ff f931 	bl	8004448 <_lv_obj_get_style_int>
    draw_dsc->dash_width = lv_obj_get_style_line_dash_width(obj, part);
 80051e6:	80a0      	strh	r0, [r4, #4]
    if(draw_dsc->dash_width) {
 80051e8:	2800      	cmp	r0, #0
 80051ea:	d005      	beq.n	80051f8 <lv_obj_init_draw_line_dsc+0x4c>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int)
 80051ec:	2293      	movs	r2, #147	; 0x93
 80051ee:	0031      	movs	r1, r6
 80051f0:	0028      	movs	r0, r5
 80051f2:	f7ff f929 	bl	8004448 <_lv_obj_get_style_int>
        draw_dsc->dash_gap = lv_obj_get_style_line_dash_gap(obj, part);
 80051f6:	80e0      	strh	r0, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int)
 80051f8:	2294      	movs	r2, #148	; 0x94
 80051fa:	0031      	movs	r1, r6
 80051fc:	0028      	movs	r0, r5
 80051fe:	f7ff f923 	bl	8004448 <_lv_obj_get_style_int>
    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
 8005202:	0003      	movs	r3, r0
 8005204:	2104      	movs	r1, #4
 8005206:	1e58      	subs	r0, r3, #1
 8005208:	4183      	sbcs	r3, r0
 800520a:	7a60      	ldrb	r0, [r4, #9]
 800520c:	009a      	lsls	r2, r3, #2
 800520e:	4388      	bics	r0, r1
    draw_dsc->round_end = draw_dsc->round_start;
 8005210:	4310      	orrs	r0, r2
 8005212:	2208      	movs	r2, #8
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	4390      	bics	r0, r2
 8005218:	4318      	orrs	r0, r3
 800521a:	7260      	strb	r0, [r4, #9]
}
 800521c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005220 <style_snapshot>:
    }
}

static void style_snapshot(lv_obj_t * obj, uint8_t part, style_snapshot_t * shot)
{
 8005220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005222:	0014      	movs	r4, r2
 8005224:	b085      	sub	sp, #20
 8005226:	000e      	movs	r6, r1
    _lv_obj_disable_style_caching(obj, true);
 8005228:	2101      	movs	r1, #1
{
 800522a:	0005      	movs	r5, r0
    _lv_obj_disable_style_caching(obj, true);
 800522c:	f7ff f891 	bl	8004352 <_lv_obj_disable_style_caching>
    _lv_memset_00(shot, sizeof(style_snapshot_t));
 8005230:	21bc      	movs	r1, #188	; 0xbc
 8005232:	0020      	movs	r0, r4
 8005234:	f007 f9f6 	bl	800c624 <_lv_memset_00>
    lv_draw_rect_dsc_init(&shot->rect);
 8005238:	0020      	movs	r0, r4
 800523a:	f004 fee7 	bl	800a00c <lv_draw_rect_dsc_init>
    lv_draw_label_dsc_init(&shot->label);
 800523e:	0023      	movs	r3, r4
 8005240:	3354      	adds	r3, #84	; 0x54
 8005242:	0018      	movs	r0, r3
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	f002 fe85 	bl	8007f54 <lv_draw_label_dsc_init>
    lv_draw_img_dsc_init(&shot->img);
 800524a:	0023      	movs	r3, r4
 800524c:	3382      	adds	r3, #130	; 0x82
 800524e:	0018      	movs	r0, r3
 8005250:	9301      	str	r3, [sp, #4]
 8005252:	f002 fd5d 	bl	8007d10 <lv_draw_img_dsc_init>
    lv_draw_line_dsc_init(&shot->line);
 8005256:	0023      	movs	r3, r4
 8005258:	3378      	adds	r3, #120	; 0x78
 800525a:	0018      	movs	r0, r3
 800525c:	9302      	str	r3, [sp, #8]
 800525e:	f003 fcf5 	bl	8008c4c <lv_draw_line_dsc_init>

    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8005262:	0031      	movs	r1, r6
 8005264:	0028      	movs	r0, r5
 8005266:	f7ff f859 	bl	800431c <lv_obj_get_style_list>
    bool trans_ori = list->skip_trans;
 800526a:	7943      	ldrb	r3, [r0, #5]
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 800526c:	0007      	movs	r7, r0
    bool trans_ori = list->skip_trans;
 800526e:	07da      	lsls	r2, r3, #31
 8005270:	0fd2      	lsrs	r2, r2, #31
 8005272:	9203      	str	r2, [sp, #12]
    list->skip_trans = 1;
 8005274:	2201      	movs	r2, #1
 8005276:	4313      	orrs	r3, r2
 8005278:	7143      	strb	r3, [r0, #5]

    lv_obj_init_draw_rect_dsc(obj, part, &shot->rect);
 800527a:	0022      	movs	r2, r4
 800527c:	0031      	movs	r1, r6
 800527e:	0028      	movs	r0, r5
 8005280:	f7ff fd94 	bl	8004dac <lv_obj_init_draw_rect_dsc>
    lv_obj_init_draw_label_dsc(obj, part, &shot->label);
 8005284:	9a00      	ldr	r2, [sp, #0]
 8005286:	0031      	movs	r1, r6
 8005288:	0028      	movs	r0, r5
 800528a:	f7ff ff09 	bl	80050a0 <lv_obj_init_draw_label_dsc>
    lv_obj_init_draw_img_dsc(obj, part, &shot->img);
 800528e:	9a01      	ldr	r2, [sp, #4]
 8005290:	0031      	movs	r1, r6
 8005292:	0028      	movs	r0, r5
 8005294:	f7ff ff54 	bl	8005140 <lv_obj_init_draw_img_dsc>
    lv_obj_init_draw_line_dsc(obj, part, &shot->line);
 8005298:	9a02      	ldr	r2, [sp, #8]
 800529a:	0031      	movs	r1, r6
 800529c:	0028      	movs	r0, r5
 800529e:	f7ff ff85 	bl	80051ac <lv_obj_init_draw_line_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 80052a2:	0031      	movs	r1, r6
 80052a4:	2210      	movs	r2, #16
 80052a6:	0028      	movs	r0, r5
 80052a8:	f7ff f8ce 	bl	8004448 <_lv_obj_get_style_int>

    shot->pad_top = lv_obj_get_style_pad_top(obj, part);
 80052ac:	0023      	movs	r3, r4
 80052ae:	3392      	adds	r3, #146	; 0x92
 80052b0:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 80052b2:	0031      	movs	r1, r6
 80052b4:	2211      	movs	r2, #17
 80052b6:	0028      	movs	r0, r5
 80052b8:	f7ff f8c6 	bl	8004448 <_lv_obj_get_style_int>
    shot->pad_bottom = lv_obj_get_style_pad_bottom(obj, part);
 80052bc:	0023      	movs	r3, r4
 80052be:	3394      	adds	r3, #148	; 0x94
 80052c0:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 80052c2:	0031      	movs	r1, r6
 80052c4:	2213      	movs	r2, #19
 80052c6:	0028      	movs	r0, r5
 80052c8:	f7ff f8be 	bl	8004448 <_lv_obj_get_style_int>
    shot->pad_right = lv_obj_get_style_pad_right(obj, part);
 80052cc:	0023      	movs	r3, r4
 80052ce:	3396      	adds	r3, #150	; 0x96
 80052d0:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 80052d2:	0031      	movs	r1, r6
 80052d4:	2212      	movs	r2, #18
 80052d6:	0028      	movs	r0, r5
 80052d8:	f7ff f8b6 	bl	8004448 <_lv_obj_get_style_int>
    shot->pad_left = lv_obj_get_style_pad_left(obj, part);
 80052dc:	0023      	movs	r3, r4
 80052de:	3398      	adds	r3, #152	; 0x98
 80052e0:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 80052e2:	0031      	movs	r1, r6
 80052e4:	2214      	movs	r2, #20
 80052e6:	0028      	movs	r0, r5
 80052e8:	f7ff f8ae 	bl	8004448 <_lv_obj_get_style_int>
    shot->pad_inner = lv_obj_get_style_pad_inner(obj, part);
 80052ec:	0023      	movs	r3, r4
 80052ee:	339a      	adds	r3, #154	; 0x9a
 80052f0:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int)
 80052f2:	0031      	movs	r1, r6
 80052f4:	2215      	movs	r2, #21
 80052f6:	0028      	movs	r0, r5
 80052f8:	f7ff f8a6 	bl	8004448 <_lv_obj_get_style_int>
    shot->margin_top = lv_obj_get_style_margin_top(obj, part);
 80052fc:	0023      	movs	r3, r4
 80052fe:	339c      	adds	r3, #156	; 0x9c
 8005300:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int)
 8005302:	0031      	movs	r1, r6
 8005304:	2216      	movs	r2, #22
 8005306:	0028      	movs	r0, r5
 8005308:	f7ff f89e 	bl	8004448 <_lv_obj_get_style_int>
    shot->margin_bottom = lv_obj_get_style_margin_bottom(obj, part);
 800530c:	0023      	movs	r3, r4
 800530e:	339e      	adds	r3, #158	; 0x9e
 8005310:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int)
 8005312:	0031      	movs	r1, r6
 8005314:	2217      	movs	r2, #23
 8005316:	0028      	movs	r0, r5
 8005318:	f7ff f896 	bl	8004448 <_lv_obj_get_style_int>
    shot->margin_left = lv_obj_get_style_margin_left(obj, part);
 800531c:	0023      	movs	r3, r4
 800531e:	33a0      	adds	r3, #160	; 0xa0
 8005320:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int)
 8005322:	0031      	movs	r1, r6
 8005324:	2218      	movs	r2, #24
 8005326:	0028      	movs	r0, r5
 8005328:	f7ff f88e 	bl	8004448 <_lv_obj_get_style_int>
    shot->margin_right = lv_obj_get_style_margin_right(obj, part);
 800532c:	0023      	movs	r3, r4
 800532e:	33a2      	adds	r3, #162	; 0xa2
 8005330:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int)
 8005332:	0031      	movs	r1, r6
 8005334:	2203      	movs	r2, #3
 8005336:	0028      	movs	r0, r5
 8005338:	f7ff f886 	bl	8004448 <_lv_obj_get_style_int>
    shot->size = lv_obj_get_style_size(obj, part);
 800533c:	0023      	movs	r3, r4
 800533e:	33a4      	adds	r3, #164	; 0xa4
 8005340:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 8005342:	0031      	movs	r1, r6
 8005344:	2204      	movs	r2, #4
 8005346:	0028      	movs	r0, r5
 8005348:	f7ff f87e 	bl	8004448 <_lv_obj_get_style_int>
    shot->transform_width = lv_obj_get_style_transform_width(obj, part);
 800534c:	0023      	movs	r3, r4
 800534e:	33a6      	adds	r3, #166	; 0xa6
 8005350:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 8005352:	0031      	movs	r1, r6
 8005354:	2205      	movs	r2, #5
 8005356:	0028      	movs	r0, r5
 8005358:	f7ff f876 	bl	8004448 <_lv_obj_get_style_int>
    shot->transform_height = lv_obj_get_style_transform_height(obj, part);
 800535c:	0023      	movs	r3, r4
 800535e:	33a8      	adds	r3, #168	; 0xa8
 8005360:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int)
 8005362:	0031      	movs	r1, r6
 8005364:	2206      	movs	r2, #6
 8005366:	0028      	movs	r0, r5
 8005368:	f7ff f86e 	bl	8004448 <_lv_obj_get_style_int>
    shot->transform_angle = lv_obj_get_style_transform_angle(obj, part);
 800536c:	0023      	movs	r3, r4
 800536e:	33aa      	adds	r3, #170	; 0xaa
 8005370:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int)
 8005372:	0031      	movs	r1, r6
 8005374:	2207      	movs	r2, #7
 8005376:	0028      	movs	r0, r5
 8005378:	f7ff f866 	bl	8004448 <_lv_obj_get_style_int>
    shot->transform_zoom = lv_obj_get_style_transform_zoom(obj, part);
 800537c:	0023      	movs	r3, r4
 800537e:	33ac      	adds	r3, #172	; 0xac
 8005380:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const lv_anim_path_t *, _ptr)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int)
 8005382:	0031      	movs	r1, r6
 8005384:	22c0      	movs	r2, #192	; 0xc0
 8005386:	0028      	movs	r0, r5
 8005388:	f7ff f85e 	bl	8004448 <_lv_obj_get_style_int>
    shot->scale_width = lv_obj_get_style_scale_width(obj, part);
 800538c:	0023      	movs	r3, r4
 800538e:	33ae      	adds	r3, #174	; 0xae
 8005390:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int)
 8005392:	0031      	movs	r1, r6
 8005394:	22c1      	movs	r2, #193	; 0xc1
 8005396:	0028      	movs	r0, r5
 8005398:	f7ff f856 	bl	8004448 <_lv_obj_get_style_int>
    shot->scale_border_width = lv_obj_get_style_scale_border_width(obj, part);
 800539c:	0023      	movs	r3, r4
 800539e:	33b0      	adds	r3, #176	; 0xb0
 80053a0:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int)
 80053a2:	0031      	movs	r1, r6
 80053a4:	22c2      	movs	r2, #194	; 0xc2
 80053a6:	0028      	movs	r0, r5
 80053a8:	f7ff f84e 	bl	8004448 <_lv_obj_get_style_int>
    shot->scale_end_border_width = lv_obj_get_style_scale_end_border_width(obj, part);
 80053ac:	0023      	movs	r3, r4
 80053ae:	33b2      	adds	r3, #178	; 0xb2
 80053b0:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int)
 80053b2:	0031      	movs	r1, r6
 80053b4:	22c3      	movs	r2, #195	; 0xc3
 80053b6:	0028      	movs	r0, r5
 80053b8:	f7ff f846 	bl	8004448 <_lv_obj_get_style_int>
    shot->scale_end_line_width = lv_obj_get_style_scale_end_line_width(obj, part);
 80053bc:	0023      	movs	r3, r4
 80053be:	33b4      	adds	r3, #180	; 0xb4
 80053c0:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color)
 80053c2:	0031      	movs	r1, r6
 80053c4:	22c9      	movs	r2, #201	; 0xc9
 80053c6:	0028      	movs	r0, r5
 80053c8:	f7ff f806 	bl	80043d8 <_lv_obj_get_style_color>
    shot->scale_grad_color = lv_obj_get_style_scale_grad_color(obj, part);
 80053cc:	0023      	movs	r3, r4
 80053ce:	33b6      	adds	r3, #182	; 0xb6
 80053d0:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color)
 80053d2:	0031      	movs	r1, r6
 80053d4:	22ca      	movs	r2, #202	; 0xca
 80053d6:	0028      	movs	r0, r5
 80053d8:	f7fe fffe 	bl	80043d8 <_lv_obj_get_style_color>
    shot->scale_end_color = lv_obj_get_style_scale_end_color(obj, part);
 80053dc:	0023      	movs	r3, r4
 80053de:	33b8      	adds	r3, #184	; 0xb8
 80053e0:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa)
 80053e2:	4a16      	ldr	r2, [pc, #88]	; (800543c <style_snapshot+0x21c>)
 80053e4:	0031      	movs	r1, r6
 80053e6:	0028      	movs	r0, r5
 80053e8:	f7ff fa70 	bl	80048cc <_lv_obj_get_style_opa>
    shot->opa_scale = lv_obj_get_style_opa_scale(obj, part);
 80053ec:	0023      	movs	r3, r4
 80053ee:	33ba      	adds	r3, #186	; 0xba
 80053f0:	7018      	strb	r0, [r3, #0]
    shot->clip_corner = lv_obj_get_style_clip_corner(obj, part);
 80053f2:	0031      	movs	r1, r6
 80053f4:	0028      	movs	r0, r5
 80053f6:	f7ff f8f7 	bl	80045e8 <lv_obj_get_style_clip_corner>
 80053fa:	2301      	movs	r3, #1
 80053fc:	2201      	movs	r2, #1
 80053fe:	34bb      	adds	r4, #187	; 0xbb
 8005400:	4003      	ands	r3, r0
 8005402:	7820      	ldrb	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int)
 8005404:	0031      	movs	r1, r6
 8005406:	4390      	bics	r0, r2
 8005408:	4318      	orrs	r0, r3
 800540a:	7020      	strb	r0, [r4, #0]
 800540c:	3232      	adds	r2, #50	; 0x32
 800540e:	0028      	movs	r0, r5
 8005410:	f7ff f81a 	bl	8004448 <_lv_obj_get_style_int>
 8005414:	1e43      	subs	r3, r0, #1
 8005416:	4198      	sbcs	r0, r3
    shot->border_post  = lv_obj_get_style_border_post(obj, part);
 8005418:	2202      	movs	r2, #2
 800541a:	0043      	lsls	r3, r0, #1
 800541c:	7820      	ldrb	r0, [r4, #0]

    _lv_obj_disable_style_caching(obj, false);
 800541e:	2100      	movs	r1, #0
    shot->border_post  = lv_obj_get_style_border_post(obj, part);
 8005420:	4390      	bics	r0, r2
 8005422:	4318      	orrs	r0, r3
 8005424:	7020      	strb	r0, [r4, #0]
    _lv_obj_disable_style_caching(obj, false);
 8005426:	0028      	movs	r0, r5
 8005428:	f7fe ff93 	bl	8004352 <_lv_obj_disable_style_caching>
    list->skip_trans = trans_ori;
 800542c:	2201      	movs	r2, #1
 800542e:	797b      	ldrb	r3, [r7, #5]
 8005430:	4393      	bics	r3, r2
 8005432:	9a03      	ldr	r2, [sp, #12]
 8005434:	4313      	orrs	r3, r2
 8005436:	717b      	strb	r3, [r7, #5]
}
 8005438:	b005      	add	sp, #20
 800543a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800543c:	0000800c 	.word	0x0000800c

08005440 <lv_obj_set_state>:
    if(obj->state == new_state) return;
 8005440:	0003      	movs	r3, r0
{
 8005442:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005444:	b0e3      	sub	sp, #396	; 0x18c
 8005446:	9101      	str	r1, [sp, #4]
    if(obj->state == new_state) return;
 8005448:	333d      	adds	r3, #61	; 0x3d
 800544a:	781b      	ldrb	r3, [r3, #0]
{
 800544c:	0006      	movs	r6, r0
    if(obj->state == new_state) return;
 800544e:	9302      	str	r3, [sp, #8]
 8005450:	428b      	cmp	r3, r1
 8005452:	d100      	bne.n	8005456 <lv_obj_set_state+0x16>
 8005454:	e0f9      	b.n	800564a <lv_obj_set_state+0x20a>
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8005456:	2500      	movs	r5, #0
    style_snapshot_res_t cmp_res = STYLE_COMPARE_SAME;
 8005458:	002c      	movs	r4, r5
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
 800545a:	0029      	movs	r1, r5
 800545c:	0030      	movs	r0, r6
 800545e:	f7fe ff5d 	bl	800431c <lv_obj_get_style_list>
        if(style_list == NULL) break;   /*No more style lists*/
 8005462:	2800      	cmp	r0, #0
 8005464:	d100      	bne.n	8005468 <lv_obj_set_state+0x28>
 8005466:	e0e2      	b.n	800562e <lv_obj_set_state+0x1ee>
        obj->state = prev_state;
 8005468:	0037      	movs	r7, r6
 800546a:	9b02      	ldr	r3, [sp, #8]
 800546c:	373d      	adds	r7, #61	; 0x3d
 800546e:	703b      	strb	r3, [r7, #0]
        style_snapshot(obj, part, &shot_pre);
 8005470:	aa04      	add	r2, sp, #16
 8005472:	0029      	movs	r1, r5
 8005474:	0030      	movs	r0, r6
 8005476:	f7ff fed3 	bl	8005220 <style_snapshot>
        obj->state = new_state;
 800547a:	9b01      	ldr	r3, [sp, #4]
        style_snapshot(obj, part, &shot_post);
 800547c:	0029      	movs	r1, r5
        obj->state = new_state;
 800547e:	703b      	strb	r3, [r7, #0]
        style_snapshot(obj, part, &shot_post);
 8005480:	af33      	add	r7, sp, #204	; 0xcc
 8005482:	003a      	movs	r2, r7
 8005484:	0030      	movs	r0, r6
 8005486:	f7ff fecb 	bl	8005220 <style_snapshot>

static style_snapshot_res_t style_snapshot_compare(style_snapshot_t * shot1, style_snapshot_t * shot2)
{
    if(memcmp(shot1, shot2, sizeof(style_snapshot_t)) == 0) return STYLE_COMPARE_SAME;
 800548a:	22bc      	movs	r2, #188	; 0xbc
 800548c:	0039      	movs	r1, r7
 800548e:	a804      	add	r0, sp, #16
 8005490:	f009 fd92 	bl	800efb8 <memcmp>
 8005494:	2800      	cmp	r0, #0
 8005496:	d100      	bne.n	800549a <lv_obj_set_state+0x5a>
 8005498:	e0c4      	b.n	8005624 <lv_obj_set_state+0x1e4>

    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
 800549a:	2392      	movs	r3, #146	; 0x92
 800549c:	aa04      	add	r2, sp, #16
 800549e:	189b      	adds	r3, r3, r2
 80054a0:	2200      	movs	r2, #0
 80054a2:	5e9a      	ldrsh	r2, [r3, r2]
 80054a4:	23a7      	movs	r3, #167	; 0xa7
 80054a6:	a904      	add	r1, sp, #16
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	185b      	adds	r3, r3, r1
 80054ac:	2100      	movs	r1, #0
 80054ae:	5e5b      	ldrsh	r3, [r3, r1]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d000      	beq.n	80054b6 <lv_obj_set_state+0x76>
 80054b4:	e0cb      	b.n	800564e <lv_obj_set_state+0x20e>
    if(shot1->pad_bottom != shot2->pad_bottom) return STYLE_COMPARE_DIFF;
 80054b6:	ab29      	add	r3, sp, #164	; 0xa4
 80054b8:	2200      	movs	r2, #0
 80054ba:	5e9a      	ldrsh	r2, [r3, r2]
 80054bc:	ab58      	add	r3, sp, #352	; 0x160
 80054be:	2100      	movs	r1, #0
 80054c0:	5e5b      	ldrsh	r3, [r3, r1]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d000      	beq.n	80054c8 <lv_obj_set_state+0x88>
 80054c6:	e0c2      	b.n	800564e <lv_obj_set_state+0x20e>
    if(shot1->pad_left != shot2->pad_right) return STYLE_COMPARE_DIFF;
 80054c8:	ab2a      	add	r3, sp, #168	; 0xa8
 80054ca:	2200      	movs	r2, #0
 80054cc:	5e9a      	ldrsh	r2, [r3, r2]
 80054ce:	23a9      	movs	r3, #169	; 0xa9
 80054d0:	a904      	add	r1, sp, #16
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	185b      	adds	r3, r3, r1
 80054d6:	2100      	movs	r1, #0
 80054d8:	5e5b      	ldrsh	r3, [r3, r1]
 80054da:	4293      	cmp	r3, r2
 80054dc:	d000      	beq.n	80054e0 <lv_obj_set_state+0xa0>
 80054de:	e0b6      	b.n	800564e <lv_obj_set_state+0x20e>
    if(shot1->pad_right != shot2->pad_right) return STYLE_COMPARE_DIFF;
 80054e0:	2296      	movs	r2, #150	; 0x96
 80054e2:	a904      	add	r1, sp, #16
 80054e4:	1852      	adds	r2, r2, r1
 80054e6:	2100      	movs	r1, #0
 80054e8:	5e52      	ldrsh	r2, [r2, r1]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d000      	beq.n	80054f0 <lv_obj_set_state+0xb0>
 80054ee:	e0ae      	b.n	800564e <lv_obj_set_state+0x20e>
    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
    if(shot1->pad_inner != shot2->pad_inner) return STYLE_COMPARE_DIFF;
 80054f0:	239a      	movs	r3, #154	; 0x9a
 80054f2:	aa04      	add	r2, sp, #16
 80054f4:	189b      	adds	r3, r3, r2
 80054f6:	2200      	movs	r2, #0
 80054f8:	5e9a      	ldrsh	r2, [r3, r2]
 80054fa:	23ab      	movs	r3, #171	; 0xab
 80054fc:	a904      	add	r1, sp, #16
 80054fe:	005b      	lsls	r3, r3, #1
 8005500:	185b      	adds	r3, r3, r1
 8005502:	2100      	movs	r1, #0
 8005504:	5e5b      	ldrsh	r3, [r3, r1]
 8005506:	429a      	cmp	r2, r3
 8005508:	d000      	beq.n	800550c <lv_obj_set_state+0xcc>
 800550a:	e0a0      	b.n	800564e <lv_obj_set_state+0x20e>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
 800550c:	ab2b      	add	r3, sp, #172	; 0xac
 800550e:	2200      	movs	r2, #0
 8005510:	5e9a      	ldrsh	r2, [r3, r2]
 8005512:	ab5a      	add	r3, sp, #360	; 0x168
 8005514:	2100      	movs	r1, #0
 8005516:	5e5b      	ldrsh	r3, [r3, r1]
 8005518:	429a      	cmp	r2, r3
 800551a:	d000      	beq.n	800551e <lv_obj_set_state+0xde>
 800551c:	e097      	b.n	800564e <lv_obj_set_state+0x20e>
    if(shot1->margin_bottom != shot2->margin_bottom) return STYLE_COMPARE_DIFF;
 800551e:	239e      	movs	r3, #158	; 0x9e
 8005520:	aa04      	add	r2, sp, #16
 8005522:	189b      	adds	r3, r3, r2
 8005524:	2200      	movs	r2, #0
 8005526:	5e9a      	ldrsh	r2, [r3, r2]
 8005528:	23ad      	movs	r3, #173	; 0xad
 800552a:	a904      	add	r1, sp, #16
 800552c:	005b      	lsls	r3, r3, #1
 800552e:	185b      	adds	r3, r3, r1
 8005530:	2100      	movs	r1, #0
 8005532:	5e5b      	ldrsh	r3, [r3, r1]
 8005534:	429a      	cmp	r2, r3
 8005536:	d000      	beq.n	800553a <lv_obj_set_state+0xfa>
 8005538:	e089      	b.n	800564e <lv_obj_set_state+0x20e>
    if(shot1->margin_left != shot2->margin_right) return STYLE_COMPARE_DIFF;
 800553a:	ab2c      	add	r3, sp, #176	; 0xb0
 800553c:	2200      	movs	r2, #0
 800553e:	5e9b      	ldrsh	r3, [r3, r2]
 8005540:	22af      	movs	r2, #175	; 0xaf
 8005542:	a904      	add	r1, sp, #16
 8005544:	0052      	lsls	r2, r2, #1
 8005546:	1852      	adds	r2, r2, r1
 8005548:	2100      	movs	r1, #0
 800554a:	5e52      	ldrsh	r2, [r2, r1]
 800554c:	429a      	cmp	r2, r3
 800554e:	d000      	beq.n	8005552 <lv_obj_set_state+0x112>
 8005550:	e07d      	b.n	800564e <lv_obj_set_state+0x20e>
    if(shot1->margin_right != shot2->margin_right) return STYLE_COMPARE_DIFF;
 8005552:	22a2      	movs	r2, #162	; 0xa2
 8005554:	a904      	add	r1, sp, #16
 8005556:	1852      	adds	r2, r2, r1
 8005558:	2100      	movs	r1, #0
 800555a:	5e52      	ldrsh	r2, [r2, r1]
 800555c:	429a      	cmp	r2, r3
 800555e:	d000      	beq.n	8005562 <lv_obj_set_state+0x122>
 8005560:	e075      	b.n	800564e <lv_obj_set_state+0x20e>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
    if(shot1->transform_width != shot2->transform_width) return STYLE_COMPARE_DIFF;
 8005562:	23a6      	movs	r3, #166	; 0xa6
 8005564:	aa04      	add	r2, sp, #16
 8005566:	189b      	adds	r3, r3, r2
 8005568:	2200      	movs	r2, #0
 800556a:	5e9a      	ldrsh	r2, [r3, r2]
 800556c:	23b1      	movs	r3, #177	; 0xb1
 800556e:	a904      	add	r1, sp, #16
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	185b      	adds	r3, r3, r1
 8005574:	2100      	movs	r1, #0
 8005576:	5e5b      	ldrsh	r3, [r3, r1]
 8005578:	429a      	cmp	r2, r3
 800557a:	d168      	bne.n	800564e <lv_obj_set_state+0x20e>
    if(shot1->transform_height != shot2->transform_height) return STYLE_COMPARE_DIFF;
 800557c:	ab2e      	add	r3, sp, #184	; 0xb8
 800557e:	2200      	movs	r2, #0
 8005580:	5e9a      	ldrsh	r2, [r3, r2]
 8005582:	ab5d      	add	r3, sp, #372	; 0x174
 8005584:	2100      	movs	r1, #0
 8005586:	5e5b      	ldrsh	r3, [r3, r1]
 8005588:	429a      	cmp	r2, r3
 800558a:	d160      	bne.n	800564e <lv_obj_set_state+0x20e>
    if(shot1->transform_angle != shot2->transform_angle) return STYLE_COMPARE_DIFF;
 800558c:	23aa      	movs	r3, #170	; 0xaa
 800558e:	aa04      	add	r2, sp, #16
 8005590:	189b      	adds	r3, r3, r2
 8005592:	2200      	movs	r2, #0
 8005594:	5e9a      	ldrsh	r2, [r3, r2]
 8005596:	23b3      	movs	r3, #179	; 0xb3
 8005598:	a904      	add	r1, sp, #16
 800559a:	005b      	lsls	r3, r3, #1
 800559c:	185b      	adds	r3, r3, r1
 800559e:	2100      	movs	r1, #0
 80055a0:	5e5b      	ldrsh	r3, [r3, r1]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d153      	bne.n	800564e <lv_obj_set_state+0x20e>
    if(shot1->transform_zoom != shot2->transform_zoom) return STYLE_COMPARE_DIFF;
 80055a6:	ab2f      	add	r3, sp, #188	; 0xbc
 80055a8:	2200      	movs	r2, #0
 80055aa:	5e9a      	ldrsh	r2, [r3, r2]
 80055ac:	ab5e      	add	r3, sp, #376	; 0x178
 80055ae:	2100      	movs	r1, #0
 80055b0:	5e5b      	ldrsh	r3, [r3, r1]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d14b      	bne.n	800564e <lv_obj_set_state+0x20e>
    if(shot1->rect.outline_width != shot2->rect.outline_width) return STYLE_COMPARE_DIFF;
 80055b6:	ab04      	add	r3, sp, #16
 80055b8:	221a      	movs	r2, #26
 80055ba:	5e9a      	ldrsh	r2, [r3, r2]
 80055bc:	211a      	movs	r1, #26
 80055be:	5e7b      	ldrsh	r3, [r7, r1]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d144      	bne.n	800564e <lv_obj_set_state+0x20e>
    if(shot1->rect.outline_pad != shot2->rect.outline_pad) return STYLE_COMPARE_DIFF;
 80055c4:	ab04      	add	r3, sp, #16
 80055c6:	221c      	movs	r2, #28
 80055c8:	5e9a      	ldrsh	r2, [r3, r2]
 80055ca:	211c      	movs	r1, #28
 80055cc:	5e7b      	ldrsh	r3, [r7, r1]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d13d      	bne.n	800564e <lv_obj_set_state+0x20e>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
 80055d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80055d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055d6:	9303      	str	r3, [sp, #12]
 80055d8:	4293      	cmp	r3, r2
 80055da:	d138      	bne.n	800564e <lv_obj_set_state+0x20e>
    if(shot1->rect.value_align != shot2->rect.value_align) return STYLE_COMPARE_DIFF;
 80055dc:	ab18      	add	r3, sp, #96	; 0x60
 80055de:	781a      	ldrb	r2, [r3, #0]
 80055e0:	ab47      	add	r3, sp, #284	; 0x11c
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d132      	bne.n	800564e <lv_obj_set_state+0x20e>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
    if(shot1->rect.shadow_spread != shot2->rect.shadow_spread) return STYLE_COMPARE_DIFF;
 80055e8:	ab04      	add	r3, sp, #16
 80055ea:	2228      	movs	r2, #40	; 0x28
 80055ec:	5e9a      	ldrsh	r2, [r3, r2]
 80055ee:	2128      	movs	r1, #40	; 0x28
 80055f0:	5e7b      	ldrsh	r3, [r7, r1]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d12b      	bne.n	800564e <lv_obj_set_state+0x20e>
    if(shot1->rect.shadow_width != shot2->rect.shadow_width) return STYLE_COMPARE_DIFF;
 80055f6:	aa04      	add	r2, sp, #16
 80055f8:	ab33      	add	r3, sp, #204	; 0xcc
 80055fa:	2122      	movs	r1, #34	; 0x22
 80055fc:	5e51      	ldrsh	r1, [r2, r1]
 80055fe:	2022      	movs	r0, #34	; 0x22
 8005600:	5e1a      	ldrsh	r2, [r3, r0]
 8005602:	4291      	cmp	r1, r2
 8005604:	d123      	bne.n	800564e <lv_obj_set_state+0x20e>
    if(shot1->rect.shadow_ofs_x != shot2->rect.shadow_ofs_x) return STYLE_COMPARE_DIFF;
 8005606:	aa04      	add	r2, sp, #16
 8005608:	2124      	movs	r1, #36	; 0x24
 800560a:	5e51      	ldrsh	r1, [r2, r1]
 800560c:	2024      	movs	r0, #36	; 0x24
 800560e:	5e1a      	ldrsh	r2, [r3, r0]
 8005610:	4291      	cmp	r1, r2
 8005612:	d11c      	bne.n	800564e <lv_obj_set_state+0x20e>
    if(shot1->rect.shadow_ofs_y != shot2->rect.shadow_ofs_y) return STYLE_COMPARE_DIFF;
 8005614:	aa04      	add	r2, sp, #16
 8005616:	2126      	movs	r1, #38	; 0x26
 8005618:	5e52      	ldrsh	r2, [r2, r1]
 800561a:	2126      	movs	r1, #38	; 0x26
 800561c:	5e5b      	ldrsh	r3, [r3, r1]
 800561e:	429a      	cmp	r2, r3
 8005620:	d115      	bne.n	800564e <lv_obj_set_state+0x20e>
            cmp_res = STYLE_COMPARE_VISUAL_DIFF;
 8005622:	2401      	movs	r4, #1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8005624:	3501      	adds	r5, #1
 8005626:	b2ed      	uxtb	r5, r5
 8005628:	2d40      	cmp	r5, #64	; 0x40
 800562a:	d000      	beq.n	800562e <lv_obj_set_state+0x1ee>
 800562c:	e715      	b.n	800545a <lv_obj_set_state+0x1a>
    obj->state = new_state;
 800562e:	0033      	movs	r3, r6
 8005630:	9a01      	ldr	r2, [sp, #4]
 8005632:	333d      	adds	r3, #61	; 0x3d
 8005634:	701a      	strb	r2, [r3, #0]
    if(cmp_res == STYLE_COMPARE_SAME) {
 8005636:	2c00      	cmp	r4, #0
 8005638:	d007      	beq.n	800564a <lv_obj_set_state+0x20a>
    if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
 800563a:	22ff      	movs	r2, #255	; 0xff
 800563c:	0029      	movs	r1, r5
 800563e:	2c02      	cmp	r4, #2
 8005640:	d000      	beq.n	8005644 <lv_obj_set_state+0x204>
    else if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 8005642:	0011      	movs	r1, r2
 8005644:	0030      	movs	r0, r6
 8005646:	f7ff fa8f 	bl	8004b68 <lv_obj_refresh_style>
}
 800564a:	b063      	add	sp, #396	; 0x18c
 800564c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            cmp_res = STYLE_COMPARE_DIFF;
 800564e:	2402      	movs	r4, #2
 8005650:	e7ed      	b.n	800562e <lv_obj_set_state+0x1ee>

08005652 <lv_obj_add_state>:
    lv_state_t new_state = obj->state | state;
 8005652:	0003      	movs	r3, r0
{
 8005654:	b510      	push	{r4, lr}
    lv_state_t new_state = obj->state | state;
 8005656:	333d      	adds	r3, #61	; 0x3d
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	4319      	orrs	r1, r3
    if(obj->state != new_state) {
 800565c:	428b      	cmp	r3, r1
 800565e:	d001      	beq.n	8005664 <lv_obj_add_state+0x12>
        lv_obj_set_state(obj, new_state);
 8005660:	f7ff feee 	bl	8005440 <lv_obj_set_state>
}
 8005664:	bd10      	pop	{r4, pc}

08005666 <lv_obj_clear_state>:
    lv_state_t new_state = obj->state & (~state);
 8005666:	0003      	movs	r3, r0
{
 8005668:	b510      	push	{r4, lr}
    lv_state_t new_state = obj->state & (~state);
 800566a:	333d      	adds	r3, #61	; 0x3d
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	001a      	movs	r2, r3
 8005670:	438a      	bics	r2, r1
 8005672:	0011      	movs	r1, r2
    if(obj->state != new_state) {
 8005674:	4293      	cmp	r3, r2
 8005676:	d001      	beq.n	800567c <lv_obj_clear_state+0x16>
        lv_obj_set_state(obj, new_state);
 8005678:	f7ff fee2 	bl	8005440 <lv_obj_set_state>
}
 800567c:	bd10      	pop	{r4, pc}
	...

08005680 <lv_obj_get_draw_rect_ext_pad_size>:
{
 8005680:	b5f0      	push	{r4, r5, r6, r7, lr}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int)
 8005682:	2250      	movs	r2, #80	; 0x50
 8005684:	b08d      	sub	sp, #52	; 0x34
 8005686:	0004      	movs	r4, r0
 8005688:	000d      	movs	r5, r1
 800568a:	f7fe fedd 	bl	8004448 <_lv_obj_get_style_int>
 800568e:	1e07      	subs	r7, r0, #0
    if(sh_width) {
 8005690:	d000      	beq.n	8005694 <lv_obj_get_draw_rect_ext_pad_size+0x14>
 8005692:	e0b2      	b.n	80057fa <lv_obj_get_draw_rect_ext_pad_size+0x17a>
    lv_coord_t s = 0;
 8005694:	2700      	movs	r7, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr)
 8005696:	227f      	movs	r2, #127	; 0x7f
 8005698:	0029      	movs	r1, r5
 800569a:	0020      	movs	r0, r4
 800569c:	f7ff f982 	bl	80049a4 <_lv_obj_get_style_ptr>
 80056a0:	1e06      	subs	r6, r0, #0
    if(value_str) {
 80056a2:	d100      	bne.n	80056a6 <lv_obj_get_draw_rect_ext_pad_size+0x26>
 80056a4:	e07a      	b.n	800579c <lv_obj_get_draw_rect_ext_pad_size+0x11c>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa)
 80056a6:	227c      	movs	r2, #124	; 0x7c
 80056a8:	0029      	movs	r1, r5
 80056aa:	0020      	movs	r0, r4
 80056ac:	f7ff f90e 	bl	80048cc <_lv_obj_get_style_opa>
        if(value_opa > LV_OPA_MIN) {
 80056b0:	2802      	cmp	r0, #2
 80056b2:	d973      	bls.n	800579c <lv_obj_get_draw_rect_ext_pad_size+0x11c>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int)
 80056b4:	2270      	movs	r2, #112	; 0x70
 80056b6:	0029      	movs	r1, r5
 80056b8:	0020      	movs	r0, r4
 80056ba:	f7fe fec5 	bl	8004448 <_lv_obj_get_style_int>
 80056be:	2270      	movs	r2, #112	; 0x70
 80056c0:	9005      	str	r0, [sp, #20]
 80056c2:	0029      	movs	r1, r5
 80056c4:	0020      	movs	r0, r4
 80056c6:	f7fe febf 	bl	8004448 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr)
 80056ca:	227e      	movs	r2, #126	; 0x7e
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int)
 80056cc:	9006      	str	r0, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr)
 80056ce:	0029      	movs	r1, r5
 80056d0:	0020      	movs	r0, r4
 80056d2:	f7ff f967 	bl	80049a4 <_lv_obj_get_style_ptr>
            _lv_txt_get_size(&txt_size, value_str, font, letter_space, line_space, LV_COORD_MAX, LV_TXT_FLAG_NONE);
 80056d6:	2300      	movs	r3, #0
 80056d8:	9906      	ldr	r1, [sp, #24]
 80056da:	9302      	str	r3, [sp, #8]
 80056dc:	4b5e      	ldr	r3, [pc, #376]	; (8005858 <lv_obj_get_draw_rect_ext_pad_size+0x1d8>)
 80056de:	0002      	movs	r2, r0
 80056e0:	9301      	str	r3, [sp, #4]
 80056e2:	9100      	str	r1, [sp, #0]
 80056e4:	9b05      	ldr	r3, [sp, #20]
 80056e6:	0031      	movs	r1, r6
 80056e8:	a808      	add	r0, sp, #32
 80056ea:	f007 fb9f 	bl	800ce2c <_lv_txt_get_size>
            value_area.x1 = 0;
 80056ee:	2300      	movs	r3, #0
 80056f0:	930a      	str	r3, [sp, #40]	; 0x28
            value_area.x2 = txt_size.x - 1;
 80056f2:	ab04      	add	r3, sp, #16
 80056f4:	8a1b      	ldrh	r3, [r3, #16]
 80056f6:	ae0a      	add	r6, sp, #40	; 0x28
 80056f8:	3b01      	subs	r3, #1
 80056fa:	80b3      	strh	r3, [r6, #4]
            value_area.y2 = txt_size.y - 1;
 80056fc:	ab04      	add	r3, sp, #16
 80056fe:	8a5b      	ldrh	r3, [r3, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int)
 8005700:	2275      	movs	r2, #117	; 0x75
 8005702:	3b01      	subs	r3, #1
 8005704:	0029      	movs	r1, r5
 8005706:	0020      	movs	r0, r4
 8005708:	80f3      	strh	r3, [r6, #6]
 800570a:	f7fe fe9d 	bl	8004448 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int)
 800570e:	2273      	movs	r2, #115	; 0x73
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int)
 8005710:	9005      	str	r0, [sp, #20]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int)
 8005712:	0029      	movs	r1, r5
 8005714:	0020      	movs	r0, r4
 8005716:	f7fe fe97 	bl	8004448 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int)
 800571a:	2274      	movs	r2, #116	; 0x74
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int)
 800571c:	9006      	str	r0, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int)
 800571e:	0029      	movs	r1, r5
 8005720:	0020      	movs	r0, r4
 8005722:	f7fe fe91 	bl	8004448 <_lv_obj_get_style_int>
            _lv_area_align(&obj->coords, &value_area, align, &p_align);
 8005726:	466b      	mov	r3, sp
 8005728:	9007      	str	r0, [sp, #28]
 800572a:	0020      	movs	r0, r4
 800572c:	7d1a      	ldrb	r2, [r3, #20]
 800572e:	3010      	adds	r0, #16
 8005730:	ab09      	add	r3, sp, #36	; 0x24
 8005732:	0031      	movs	r1, r6
 8005734:	f006 fa90 	bl	800bc58 <_lv_area_align>
            value_area.x1 += p_align.x + xofs;
 8005738:	ab04      	add	r3, sp, #16
 800573a:	9a06      	ldr	r2, [sp, #24]
 800573c:	8a9b      	ldrh	r3, [r3, #20]
            value_area.y1 += p_align.y + yofs;
 800573e:	9907      	ldr	r1, [sp, #28]
            value_area.x1 += p_align.x + xofs;
 8005740:	189b      	adds	r3, r3, r2
            value_area.y1 += p_align.y + yofs;
 8005742:	aa04      	add	r2, sp, #16
 8005744:	8ad2      	ldrh	r2, [r2, #22]
            value_area.x1 += p_align.x + xofs;
 8005746:	b29b      	uxth	r3, r3
            value_area.y1 += p_align.y + yofs;
 8005748:	1852      	adds	r2, r2, r1
 800574a:	b291      	uxth	r1, r2
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
 800574c:	2010      	movs	r0, #16
 800574e:	5e22      	ldrsh	r2, [r4, r0]
            value_area.x1 += p_align.x + xofs;
 8005750:	8830      	ldrh	r0, [r6, #0]
 8005752:	1818      	adds	r0, r3, r0
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
 8005754:	b200      	sxth	r0, r0
 8005756:	1a10      	subs	r0, r2, r0
 8005758:	42b8      	cmp	r0, r7
 800575a:	da00      	bge.n	800575e <lv_obj_get_draw_rect_ext_pad_size+0xde>
 800575c:	0038      	movs	r0, r7
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
 800575e:	2212      	movs	r2, #18
 8005760:	5ea7      	ldrsh	r7, [r4, r2]
            value_area.y1 += p_align.y + yofs;
 8005762:	8872      	ldrh	r2, [r6, #2]
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
 8005764:	b200      	sxth	r0, r0
            value_area.y1 += p_align.y + yofs;
 8005766:	188a      	adds	r2, r1, r2
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
 8005768:	b212      	sxth	r2, r2
 800576a:	1aba      	subs	r2, r7, r2
 800576c:	4282      	cmp	r2, r0
 800576e:	da00      	bge.n	8005772 <lv_obj_get_draw_rect_ext_pad_size+0xf2>
 8005770:	0002      	movs	r2, r0
            value_area.x2 += p_align.x + xofs;
 8005772:	88b0      	ldrh	r0, [r6, #4]
            s = LV_MATH_MAX(s, value_area.x2 - obj->coords.x2);
 8005774:	b212      	sxth	r2, r2
            value_area.x2 += p_align.x + xofs;
 8005776:	181b      	adds	r3, r3, r0
            s = LV_MATH_MAX(s, value_area.x2 - obj->coords.x2);
 8005778:	2714      	movs	r7, #20
 800577a:	5fe0      	ldrsh	r0, [r4, r7]
 800577c:	b21b      	sxth	r3, r3
 800577e:	1a1b      	subs	r3, r3, r0
 8005780:	4293      	cmp	r3, r2
 8005782:	da00      	bge.n	8005786 <lv_obj_get_draw_rect_ext_pad_size+0x106>
 8005784:	0013      	movs	r3, r2
            value_area.y2 += p_align.y + yofs;
 8005786:	88f2      	ldrh	r2, [r6, #6]
            s = LV_MATH_MAX(s, value_area.y2 - obj->coords.y2);
 8005788:	b21b      	sxth	r3, r3
            value_area.y2 += p_align.y + yofs;
 800578a:	188a      	adds	r2, r1, r2
            s = LV_MATH_MAX(s, value_area.y2 - obj->coords.y2);
 800578c:	2016      	movs	r0, #22
 800578e:	5e21      	ldrsh	r1, [r4, r0]
 8005790:	b212      	sxth	r2, r2
 8005792:	1a52      	subs	r2, r2, r1
 8005794:	429a      	cmp	r2, r3
 8005796:	da00      	bge.n	800579a <lv_obj_get_draw_rect_ext_pad_size+0x11a>
 8005798:	001a      	movs	r2, r3
 800579a:	b217      	sxth	r7, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int)
 800579c:	2240      	movs	r2, #64	; 0x40
 800579e:	0029      	movs	r1, r5
 80057a0:	0020      	movs	r0, r4
 80057a2:	f7fe fe51 	bl	8004448 <_lv_obj_get_style_int>
 80057a6:	1e06      	subs	r6, r0, #0
    if(outline_width) {
 80057a8:	d010      	beq.n	80057cc <lv_obj_get_draw_rect_ext_pad_size+0x14c>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa)
 80057aa:	224c      	movs	r2, #76	; 0x4c
 80057ac:	0029      	movs	r1, r5
 80057ae:	0020      	movs	r0, r4
 80057b0:	f7ff f88c 	bl	80048cc <_lv_obj_get_style_opa>
        if(outline_opa > LV_OPA_MIN) {
 80057b4:	2802      	cmp	r0, #2
 80057b6:	d909      	bls.n	80057cc <lv_obj_get_draw_rect_ext_pad_size+0x14c>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int)
 80057b8:	2241      	movs	r2, #65	; 0x41
 80057ba:	0029      	movs	r1, r5
 80057bc:	0020      	movs	r0, r4
 80057be:	f7fe fe43 	bl	8004448 <_lv_obj_get_style_int>
            s = LV_MATH_MAX(s, outline_pad + outline_width);
 80057c2:	1980      	adds	r0, r0, r6
 80057c4:	42b8      	cmp	r0, r7
 80057c6:	da00      	bge.n	80057ca <lv_obj_get_draw_rect_ext_pad_size+0x14a>
 80057c8:	0038      	movs	r0, r7
 80057ca:	b207      	sxth	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 80057cc:	2204      	movs	r2, #4
 80057ce:	0029      	movs	r1, r5
 80057d0:	0020      	movs	r0, r4
 80057d2:	f7fe fe39 	bl	8004448 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 80057d6:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 80057d8:	0006      	movs	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 80057da:	0029      	movs	r1, r5
 80057dc:	0020      	movs	r0, r4
 80057de:	f7fe fe33 	bl	8004448 <_lv_obj_get_style_int>
    lv_coord_t wh = LV_MATH_MAX(w, h);
 80057e2:	1c03      	adds	r3, r0, #0
 80057e4:	42b0      	cmp	r0, r6
 80057e6:	da00      	bge.n	80057ea <lv_obj_get_draw_rect_ext_pad_size+0x16a>
 80057e8:	1c33      	adds	r3, r6, #0
 80057ea:	b21a      	sxth	r2, r3
    if(wh > 0) s += wh;
 80057ec:	2a00      	cmp	r2, #0
 80057ee:	dd01      	ble.n	80057f4 <lv_obj_get_draw_rect_ext_pad_size+0x174>
 80057f0:	18ff      	adds	r7, r7, r3
 80057f2:	b23f      	sxth	r7, r7
}
 80057f4:	0038      	movs	r0, r7
 80057f6:	b00d      	add	sp, #52	; 0x34
 80057f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa)
 80057fa:	225c      	movs	r2, #92	; 0x5c
 80057fc:	0029      	movs	r1, r5
 80057fe:	0020      	movs	r0, r4
 8005800:	f7ff f864 	bl	80048cc <_lv_obj_get_style_opa>
        if(sh_opa > LV_OPA_MIN) {
 8005804:	2802      	cmp	r0, #2
 8005806:	d800      	bhi.n	800580a <lv_obj_get_draw_rect_ext_pad_size+0x18a>
 8005808:	e744      	b.n	8005694 <lv_obj_get_draw_rect_ext_pad_size+0x14>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int)
 800580a:	2253      	movs	r2, #83	; 0x53
 800580c:	0029      	movs	r1, r5
 800580e:	0020      	movs	r0, r4
 8005810:	f7fe fe1a 	bl	8004448 <_lv_obj_get_style_int>
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
 8005814:	0ffe      	lsrs	r6, r7, #31
 8005816:	19f6      	adds	r6, r6, r7
 8005818:	1076      	asrs	r6, r6, #1
            sh_width++;
 800581a:	3601      	adds	r6, #1
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 800581c:	1836      	adds	r6, r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int)
 800581e:	2251      	movs	r2, #81	; 0x51
 8005820:	0029      	movs	r1, r5
 8005822:	0020      	movs	r0, r4
 8005824:	f7fe fe10 	bl	8004448 <_lv_obj_get_style_int>
 8005828:	0007      	movs	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int)
 800582a:	2252      	movs	r2, #82	; 0x52
 800582c:	0029      	movs	r1, r5
 800582e:	0020      	movs	r0, r4
 8005830:	f7fe fe0a 	bl	8004448 <_lv_obj_get_style_int>
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
 8005834:	17fb      	asrs	r3, r7, #31
 8005836:	18ff      	adds	r7, r7, r3
 8005838:	405f      	eors	r7, r3
 800583a:	17c3      	asrs	r3, r0, #31
 800583c:	18c0      	adds	r0, r0, r3
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 800583e:	b2b6      	uxth	r6, r6
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
 8005840:	4058      	eors	r0, r3
 8005842:	42b8      	cmp	r0, r7
 8005844:	da00      	bge.n	8005848 <lv_obj_get_draw_rect_ext_pad_size+0x1c8>
 8005846:	0038      	movs	r0, r7
 8005848:	1830      	adds	r0, r6, r0
            s = LV_MATH_MAX(s, sh_width);
 800584a:	1c07      	adds	r7, r0, #0
 800584c:	0403      	lsls	r3, r0, #16
 800584e:	d500      	bpl.n	8005852 <lv_obj_get_draw_rect_ext_pad_size+0x1d2>
 8005850:	2700      	movs	r7, #0
 8005852:	b23f      	sxth	r7, r7
 8005854:	e71f      	b.n	8005696 <lv_obj_get_draw_rect_ext_pad_size+0x16>
 8005856:	46c0      	nop			; (mov r8, r8)
 8005858:	00007c18 	.word	0x00007c18

0800585c <lv_obj_get_focused_obj>:
    return obj->focus_parent == 0 ? false : true;
 800585c:	2302      	movs	r3, #2
    if(obj == NULL) return NULL;
 800585e:	2800      	cmp	r0, #0
 8005860:	d101      	bne.n	8005866 <lv_obj_get_focused_obj+0xa>
}
 8005862:	4770      	bx	lr
    return obj->parent;
 8005864:	6800      	ldr	r0, [r0, #0]
    return obj->focus_parent == 0 ? false : true;
 8005866:	0002      	movs	r2, r0
 8005868:	3235      	adds	r2, #53	; 0x35
 800586a:	7812      	ldrb	r2, [r2, #0]
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
 800586c:	421a      	tst	r2, r3
 800586e:	d1f9      	bne.n	8005864 <lv_obj_get_focused_obj+0x8>
 8005870:	e7f7      	b.n	8005862 <lv_obj_get_focused_obj+0x6>
	...

08005874 <lv_obj_signal>:
{
 8005874:	b570      	push	{r4, r5, r6, lr}
 8005876:	0005      	movs	r5, r0
    if(sign == LV_SIGNAL_GET_STYLE) {
 8005878:	2908      	cmp	r1, #8
 800587a:	d10a      	bne.n	8005892 <lv_obj_signal+0x1e>
        if(info->part == LV_OBJ_PART_MAIN) info->result = &obj->style_list;
 800587c:	7813      	ldrb	r3, [r2, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d104      	bne.n	800588c <lv_obj_signal+0x18>
 8005882:	3528      	adds	r5, #40	; 0x28
 8005884:	6055      	str	r5, [r2, #4]
        return LV_RES_OK;
 8005886:	2401      	movs	r4, #1
}
 8005888:	0020      	movs	r0, r4
 800588a:	bd70      	pop	{r4, r5, r6, pc}
        else info->result = NULL;
 800588c:	2300      	movs	r3, #0
 800588e:	6053      	str	r3, [r2, #4]
 8005890:	e7f9      	b.n	8005886 <lv_obj_signal+0x12>
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 8005892:	2907      	cmp	r1, #7
 8005894:	d105      	bne.n	80058a2 <lv_obj_signal+0x2e>
 8005896:	492f      	ldr	r1, [pc, #188]	; (8005954 <lv_obj_signal+0xe0>)
 8005898:	0010      	movs	r0, r2
 800589a:	f7ff fa78 	bl	8004d8e <lv_obj_handle_get_type_signal>
 800589e:	0004      	movs	r4, r0
 80058a0:	e7f2      	b.n	8005888 <lv_obj_signal+0x14>
    if(sign == LV_SIGNAL_CHILD_CHG) {
 80058a2:	2901      	cmp	r1, #1
 80058a4:	d104      	bne.n	80058b0 <lv_obj_signal+0x3c>
    return (obj->protect & prot) == 0 ? false : true;
 80058a6:	353c      	adds	r5, #60	; 0x3c
 80058a8:	782b      	ldrb	r3, [r5, #0]
 80058aa:	4399      	bics	r1, r3
 80058ac:	000c      	movs	r4, r1
 80058ae:	e7eb      	b.n	8005888 <lv_obj_signal+0x14>
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 80058b0:	2906      	cmp	r1, #6
 80058b2:	d10a      	bne.n	80058ca <lv_obj_signal+0x56>
        lv_coord_t d = lv_obj_get_draw_rect_ext_pad_size(obj, LV_OBJ_PART_MAIN);
 80058b4:	2100      	movs	r1, #0
 80058b6:	f7ff fee3 	bl	8005680 <lv_obj_get_draw_rect_ext_pad_size>
        obj->ext_draw_pad = LV_MATH_MAX(obj->ext_draw_pad, d);
 80058ba:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 80058bc:	1c1a      	adds	r2, r3, #0
 80058be:	b21b      	sxth	r3, r3
 80058c0:	4283      	cmp	r3, r0
 80058c2:	da00      	bge.n	80058c6 <lv_obj_signal+0x52>
 80058c4:	1c02      	adds	r2, r0, #0
 80058c6:	866a      	strh	r2, [r5, #50]	; 0x32
 80058c8:	e7dd      	b.n	8005886 <lv_obj_signal+0x12>
 80058ca:	2401      	movs	r4, #1
    else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
 80058cc:	2903      	cmp	r1, #3
 80058ce:	d107      	bne.n	80058e0 <lv_obj_signal+0x6c>
        if(obj->realign.auto_realign) {
 80058d0:	0003      	movs	r3, r0
 80058d2:	3349      	adds	r3, #73	; 0x49
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	4223      	tst	r3, r4
 80058d8:	d0d6      	beq.n	8005888 <lv_obj_signal+0x14>
            lv_obj_realign(obj);
 80058da:	f7fe fb15 	bl	8003f08 <lv_obj_realign>
 80058de:	e7d3      	b.n	8005888 <lv_obj_signal+0x14>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
 80058e0:	2904      	cmp	r1, #4
 80058e2:	d102      	bne.n	80058ea <lv_obj_signal+0x76>
        lv_obj_refresh_ext_draw_pad(obj);
 80058e4:	f7fe f81e 	bl	8003924 <lv_obj_refresh_ext_draw_pad>
 80058e8:	e7ce      	b.n	8005888 <lv_obj_signal+0x14>
    else if(sign == LV_SIGNAL_PRESSED) {
 80058ea:	290b      	cmp	r1, #11
 80058ec:	d103      	bne.n	80058f6 <lv_obj_signal+0x82>
        lv_obj_add_state(obj, LV_STATE_PRESSED);
 80058ee:	3105      	adds	r1, #5
 80058f0:	f7ff feaf 	bl	8005652 <lv_obj_add_state>
 80058f4:	e7c8      	b.n	8005888 <lv_obj_signal+0x14>
    else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 80058f6:	000b      	movs	r3, r1
 80058f8:	3b0d      	subs	r3, #13
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d803      	bhi.n	8005906 <lv_obj_signal+0x92>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 80058fe:	2110      	movs	r1, #16
 8005900:	f7ff feb1 	bl	8005666 <lv_obj_clear_state>
 8005904:	e7c0      	b.n	8005888 <lv_obj_signal+0x14>
    else if(sign == LV_SIGNAL_FOCUS) {
 8005906:	2916      	cmp	r1, #22
 8005908:	d117      	bne.n	800593a <lv_obj_signal+0xc6>
        editing = lv_group_get_editing(lv_obj_get_group(obj));
 800590a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800590c:	f7fd fe5b 	bl	80035c6 <lv_group_get_editing>
        if(editing) {
 8005910:	2800      	cmp	r0, #0
 8005912:	d006      	beq.n	8005922 <lv_obj_signal+0xae>
            obj = lv_obj_get_focused_obj(obj);
 8005914:	0028      	movs	r0, r5
 8005916:	f7ff ffa1 	bl	800585c <lv_obj_get_focused_obj>
            lv_obj_add_state(obj, state);
 800591a:	2106      	movs	r1, #6
 800591c:	f7ff fe99 	bl	8005652 <lv_obj_add_state>
 8005920:	e7b1      	b.n	8005886 <lv_obj_signal+0x12>
            obj = lv_obj_get_focused_obj(obj);
 8005922:	0028      	movs	r0, r5
 8005924:	f7ff ff9a 	bl	800585c <lv_obj_get_focused_obj>
 8005928:	0004      	movs	r4, r0
            lv_obj_add_state(obj, LV_STATE_FOCUSED);
 800592a:	2102      	movs	r1, #2
 800592c:	f7ff fe91 	bl	8005652 <lv_obj_add_state>
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 8005930:	2104      	movs	r1, #4
 8005932:	0020      	movs	r0, r4
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
 8005934:	f7ff fe97 	bl	8005666 <lv_obj_clear_state>
 8005938:	e7a5      	b.n	8005886 <lv_obj_signal+0x12>
    else if(sign == LV_SIGNAL_DEFOCUS) {
 800593a:	2917      	cmp	r1, #23
 800593c:	d103      	bne.n	8005946 <lv_obj_signal+0xd2>
        obj = lv_obj_get_focused_obj(obj);
 800593e:	f7ff ff8d 	bl	800585c <lv_obj_get_focused_obj>
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
 8005942:	2106      	movs	r1, #6
 8005944:	e7f6      	b.n	8005934 <lv_obj_signal+0xc0>
    else if(sign == LV_SIGNAL_CLEANUP) {
 8005946:	2401      	movs	r4, #1
 8005948:	2900      	cmp	r1, #0
 800594a:	d19d      	bne.n	8005888 <lv_obj_signal+0x14>
        lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
 800594c:	f7fe fcf9 	bl	8004342 <lv_obj_clean_style_list>
 8005950:	e79a      	b.n	8005888 <lv_obj_signal+0x14>
 8005952:	46c0      	nop			; (mov r8, r8)
 8005954:	0800f326 	.word	0x0800f326

08005958 <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
 8005958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800595a:	000c      	movs	r4, r1
    lv_obj_t * found_p = NULL;

    /*If this object is fully cover the draw area check the children too */
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
 800595c:	2200      	movs	r2, #0
 800595e:	3110      	adds	r1, #16
{
 8005960:	0006      	movs	r6, r0
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
 8005962:	f006 f92e 	bl	800bbc2 <_lv_area_is_in>
 8005966:	2800      	cmp	r0, #0
 8005968:	d101      	bne.n	800596e <lv_refr_get_top_obj+0x16>
    lv_obj_t * found_p = NULL;
 800596a:	2000      	movs	r0, #0
            }
        }
    }

    return found_p;
}
 800596c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
 800596e:	0023      	movs	r3, r4
 8005970:	3334      	adds	r3, #52	; 0x34
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	06db      	lsls	r3, r3, #27
 8005976:	d4f8      	bmi.n	800596a <lv_refr_get_top_obj+0x12>
        lv_design_res_t design_res = obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK);
 8005978:	2202      	movs	r2, #2
 800597a:	0031      	movs	r1, r6
 800597c:	0020      	movs	r0, r4
 800597e:	6a23      	ldr	r3, [r4, #32]
 8005980:	4798      	blx	r3
 8005982:	9001      	str	r0, [sp, #4]
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
 8005984:	2803      	cmp	r0, #3
 8005986:	d0f0      	beq.n	800596a <lv_refr_get_top_obj+0x12>
        _LV_LL_READ(obj->child_ll, i) {
 8005988:	1d27      	adds	r7, r4, #4
 800598a:	0038      	movs	r0, r7
 800598c:	f006 faef 	bl	800bf6e <_lv_ll_get_head>
 8005990:	1e05      	subs	r5, r0, #0
 8005992:	d104      	bne.n	800599e <lv_refr_get_top_obj+0x46>
            if(design_res == LV_DESIGN_RES_COVER) {
 8005994:	9b01      	ldr	r3, [sp, #4]
 8005996:	0020      	movs	r0, r4
 8005998:	2b01      	cmp	r3, #1
 800599a:	d0e7      	beq.n	800596c <lv_refr_get_top_obj+0x14>
 800599c:	e7e5      	b.n	800596a <lv_refr_get_top_obj+0x12>
            found_p = lv_refr_get_top_obj(area_p, i);
 800599e:	0029      	movs	r1, r5
 80059a0:	0030      	movs	r0, r6
 80059a2:	f7ff ffd9 	bl	8005958 <lv_refr_get_top_obj>
            if(found_p != NULL) {
 80059a6:	2800      	cmp	r0, #0
 80059a8:	d1e0      	bne.n	800596c <lv_refr_get_top_obj+0x14>
        _LV_LL_READ(obj->child_ll, i) {
 80059aa:	0029      	movs	r1, r5
 80059ac:	0038      	movs	r0, r7
 80059ae:	f006 fae6 	bl	800bf7e <_lv_ll_get_next>
 80059b2:	e7ed      	b.n	8005990 <lv_refr_get_top_obj+0x38>

080059b4 <lv_refr_obj>:
 * @param mask_ori_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
{
    /*Do not refresh hidden objects*/
    if(obj->hidden != 0) return;
 80059b4:	0003      	movs	r3, r0
 80059b6:	3334      	adds	r3, #52	; 0x34
 80059b8:	781a      	ldrb	r2, [r3, #0]
 80059ba:	2310      	movs	r3, #16
{
 80059bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(obj->hidden != 0) return;
 80059be:	401a      	ands	r2, r3
{
 80059c0:	b08d      	sub	sp, #52	; 0x34
 80059c2:	0005      	movs	r5, r0
 80059c4:	000f      	movs	r7, r1
    if(obj->hidden != 0) return;
 80059c6:	9201      	str	r2, [sp, #4]
 80059c8:	2a00      	cmp	r2, #0
 80059ca:	d138      	bne.n	8005a3e <lv_refr_obj+0x8a>
     * because the parent and its children are visible only here */
    lv_area_t obj_mask;
    lv_area_t obj_ext_mask;
    lv_area_t obj_area;
    lv_coord_t ext_size = obj->ext_draw_pad;
    lv_obj_get_coords(obj, &obj_area);
 80059cc:	ac06      	add	r4, sp, #24
    lv_coord_t ext_size = obj->ext_draw_pad;
 80059ce:	2332      	movs	r3, #50	; 0x32
 80059d0:	5ec6      	ldrsh	r6, [r0, r3]
    lv_obj_get_coords(obj, &obj_area);
 80059d2:	0021      	movs	r1, r4
 80059d4:	f7fe f9a3 	bl	8003d1e <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
 80059d8:	8823      	ldrh	r3, [r4, #0]
 80059da:	b2b6      	uxth	r6, r6
 80059dc:	1b9b      	subs	r3, r3, r6
 80059de:	8023      	strh	r3, [r4, #0]
    obj_area.y1 -= ext_size;
 80059e0:	8863      	ldrh	r3, [r4, #2]
    obj_area.x2 += ext_size;
    obj_area.y2 += ext_size;
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 80059e2:	0022      	movs	r2, r4
    obj_area.y1 -= ext_size;
 80059e4:	1b9b      	subs	r3, r3, r6
 80059e6:	8063      	strh	r3, [r4, #2]
    obj_area.x2 += ext_size;
 80059e8:	88a3      	ldrh	r3, [r4, #4]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 80059ea:	0039      	movs	r1, r7
    obj_area.x2 += ext_size;
 80059ec:	18f3      	adds	r3, r6, r3
 80059ee:	80a3      	strh	r3, [r4, #4]
    obj_area.y2 += ext_size;
 80059f0:	88e3      	ldrh	r3, [r4, #6]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 80059f2:	a804      	add	r0, sp, #16
    obj_area.y2 += ext_size;
 80059f4:	18f6      	adds	r6, r6, r3
 80059f6:	80e6      	strh	r6, [r4, #6]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 80059f8:	f005 ffd3 	bl	800b9a2 <_lv_area_intersect>

    /*Draw the parent and its children only if they ore on 'mask_parent'*/
    if(union_ok != false) {
 80059fc:	2800      	cmp	r0, #0
 80059fe:	d01e      	beq.n	8005a3e <lv_refr_obj+0x8a>

        /* Redraw the object */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
 8005a00:	6a2b      	ldr	r3, [r5, #32]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <lv_refr_obj+0x5a>
 8005a06:	9a01      	ldr	r2, [sp, #4]
 8005a08:	a904      	add	r1, sp, #16
 8005a0a:	0028      	movs	r0, r5
 8005a0c:	4798      	blx	r3
#if LV_COLOR_DEPTH == 32
        debug_color.ch.alpha = 0xff;
#endif
#endif
        /*Create a new 'obj_mask' without 'ext_size' because the children can't be visible there*/
        lv_obj_get_coords(obj, &obj_area);
 8005a0e:	0021      	movs	r1, r4
 8005a10:	0028      	movs	r0, r5
 8005a12:	f7fe f984 	bl	8003d1e <lv_obj_get_coords>
        union_ok = _lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
 8005a16:	0022      	movs	r2, r4
 8005a18:	0039      	movs	r1, r7
 8005a1a:	a802      	add	r0, sp, #8
 8005a1c:	f005 ffc1 	bl	800b9a2 <_lv_area_intersect>
        if(union_ok != false) {
 8005a20:	2800      	cmp	r0, #0
 8005a22:	d005      	beq.n	8005a30 <lv_refr_obj+0x7c>
            lv_area_t mask_child; /*Mask from obj and its child*/
            lv_obj_t * child_p;
            lv_area_t child_area;
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
 8005a24:	1d2f      	adds	r7, r5, #4
 8005a26:	0038      	movs	r0, r7
 8005a28:	f006 faa5 	bl	800bf76 <_lv_ll_get_tail>
 8005a2c:	1e06      	subs	r6, r0, #0
 8005a2e:	d108      	bne.n	8005a42 <lv_refr_obj+0x8e>
                }
            }
        }

        /* If all the children are redrawn make 'post draw' design */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
 8005a30:	6a2b      	ldr	r3, [r5, #32]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <lv_refr_obj+0x8a>
 8005a36:	2201      	movs	r2, #1
 8005a38:	a904      	add	r1, sp, #16
 8005a3a:	0028      	movs	r0, r5
 8005a3c:	4798      	blx	r3
    }
}
 8005a3e:	b00d      	add	sp, #52	; 0x34
 8005a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
                lv_obj_get_coords(child_p, &child_area);
 8005a42:	ac0a      	add	r4, sp, #40	; 0x28
 8005a44:	0021      	movs	r1, r4
 8005a46:	0030      	movs	r0, r6
 8005a48:	f7fe f969 	bl	8003d1e <lv_obj_get_coords>
                child_area.x1 -= ext_size;
 8005a4c:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8005a4e:	8822      	ldrh	r2, [r4, #0]
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8005a50:	a902      	add	r1, sp, #8
                child_area.x1 -= ext_size;
 8005a52:	1ad2      	subs	r2, r2, r3
 8005a54:	8022      	strh	r2, [r4, #0]
                child_area.y1 -= ext_size;
 8005a56:	8862      	ldrh	r2, [r4, #2]
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8005a58:	a808      	add	r0, sp, #32
                child_area.y1 -= ext_size;
 8005a5a:	1ad2      	subs	r2, r2, r3
 8005a5c:	8062      	strh	r2, [r4, #2]
                child_area.x2 += ext_size;
 8005a5e:	88a2      	ldrh	r2, [r4, #4]
 8005a60:	189a      	adds	r2, r3, r2
 8005a62:	80a2      	strh	r2, [r4, #4]
                child_area.y2 += ext_size;
 8005a64:	88e2      	ldrh	r2, [r4, #6]
 8005a66:	189b      	adds	r3, r3, r2
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8005a68:	0022      	movs	r2, r4
                child_area.y2 += ext_size;
 8005a6a:	80e3      	strh	r3, [r4, #6]
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8005a6c:	f005 ff99 	bl	800b9a2 <_lv_area_intersect>
                if(union_ok) {
 8005a70:	2800      	cmp	r0, #0
 8005a72:	d003      	beq.n	8005a7c <lv_refr_obj+0xc8>
                    lv_refr_obj(child_p, &mask_child);
 8005a74:	a908      	add	r1, sp, #32
 8005a76:	0030      	movs	r0, r6
 8005a78:	f7ff ff9c 	bl	80059b4 <lv_refr_obj>
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
 8005a7c:	0031      	movs	r1, r6
 8005a7e:	0038      	movs	r0, r7
 8005a80:	f006 fa83 	bl	800bf8a <_lv_ll_get_prev>
 8005a84:	e7d2      	b.n	8005a2c <lv_refr_obj+0x78>
	...

08005a88 <lv_refr_obj_and_children>:
{
 8005a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a8a:	0005      	movs	r5, r0
 8005a8c:	000e      	movs	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
 8005a8e:	2800      	cmp	r0, #0
 8005a90:	d105      	bne.n	8005a9e <lv_refr_obj_and_children+0x16>
 8005a92:	4b14      	ldr	r3, [pc, #80]	; (8005ae4 <lv_refr_obj_and_children+0x5c>)
 8005a94:	6818      	ldr	r0, [r3, #0]
 8005a96:	f7fd fc31 	bl	80032fc <lv_disp_get_scr_act>
 8005a9a:	1e05      	subs	r5, r0, #0
    if(top_p == NULL) return;  /*Shouldn't happen*/
 8005a9c:	d008      	beq.n	8005ab0 <lv_refr_obj_and_children+0x28>
    lv_refr_obj(top_p, mask_p);
 8005a9e:	0028      	movs	r0, r5
 8005aa0:	0031      	movs	r1, r6
 8005aa2:	f7ff ff87 	bl	80059b4 <lv_refr_obj>
    par = lv_obj_get_parent(top_p);
 8005aa6:	0028      	movs	r0, r5
 8005aa8:	f7fe f912 	bl	8003cd0 <lv_obj_get_parent>
        par = lv_obj_get_parent(par);
 8005aac:	1e04      	subs	r4, r0, #0
    while(par != NULL) {
 8005aae:	d100      	bne.n	8005ab2 <lv_refr_obj_and_children+0x2a>
}
 8005ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
 8005ab2:	1d27      	adds	r7, r4, #4
            i = _lv_ll_get_prev(&(par->child_ll), i);
 8005ab4:	0029      	movs	r1, r5
 8005ab6:	0038      	movs	r0, r7
 8005ab8:	f006 fa67 	bl	800bf8a <_lv_ll_get_prev>
 8005abc:	1e05      	subs	r5, r0, #0
        while(i != NULL) {
 8005abe:	d10b      	bne.n	8005ad8 <lv_refr_obj_and_children+0x50>
        if(par->design_cb) par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
 8005ac0:	6a23      	ldr	r3, [r4, #32]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d003      	beq.n	8005ace <lv_refr_obj_and_children+0x46>
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	0031      	movs	r1, r6
 8005aca:	0020      	movs	r0, r4
 8005acc:	4798      	blx	r3
        par = lv_obj_get_parent(par);
 8005ace:	0020      	movs	r0, r4
 8005ad0:	f7fe f8fe 	bl	8003cd0 <lv_obj_get_parent>
 8005ad4:	0025      	movs	r5, r4
 8005ad6:	e7e9      	b.n	8005aac <lv_refr_obj_and_children+0x24>
            lv_refr_obj(i, mask_p);
 8005ad8:	0031      	movs	r1, r6
 8005ada:	0028      	movs	r0, r5
 8005adc:	f7ff ff6a 	bl	80059b4 <lv_refr_obj>
 8005ae0:	e7e8      	b.n	8005ab4 <lv_refr_obj_and_children+0x2c>
 8005ae2:	46c0      	nop			; (mov r8, r8)
 8005ae4:	20005d38 	.word	0x20005d38

08005ae8 <lv_area_copy>:
{
 8005ae8:	2300      	movs	r3, #0
        *d8 = *s8;
 8005aea:	5cca      	ldrb	r2, [r1, r3]
 8005aec:	54c2      	strb	r2, [r0, r3]
 8005aee:	3301      	adds	r3, #1
    while(len) {
 8005af0:	2b08      	cmp	r3, #8
 8005af2:	d1fa      	bne.n	8005aea <lv_area_copy+0x2>
}
 8005af4:	4770      	bx	lr
	...

08005af8 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
 8005af8:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8005afa:	4dc5      	ldr	r5, [pc, #788]	; (8005e10 <lv_refr_vdb_flush+0x318>)
{
 8005afc:	b095      	sub	sp, #84	; 0x54
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8005afe:	6828      	ldr	r0, [r5, #0]
 8005b00:	f005 fe5c 	bl	800b7bc <lv_disp_get_buf>
 8005b04:	0007      	movs	r7, r0
    lv_color_t * color_p = vdb->buf_act;
 8005b06:	6886      	ldr	r6, [r0, #8]

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
 8005b08:	6828      	ldr	r0, [r5, #0]
 8005b0a:	f005 fe59 	bl	800b7c0 <lv_disp_is_double_buf>
 8005b0e:	2800      	cmp	r0, #0
 8005b10:	d10c      	bne.n	8005b2c <lv_refr_vdb_flush+0x34>
        while(vdb->flushing) {
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
        }
    }

    vdb->flushing = 1;
 8005b12:	2301      	movs	r3, #1

    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
 8005b14:	682c      	ldr	r4, [r5, #0]
    vdb->flushing = 1;
 8005b16:	61bb      	str	r3, [r7, #24]
    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
 8005b18:	6862      	ldr	r2, [r4, #4]
 8005b1a:	6a11      	ldr	r1, [r2, #32]
 8005b1c:	07c9      	lsls	r1, r1, #31
 8005b1e:	d40a      	bmi.n	8005b36 <lv_refr_vdb_flush+0x3e>
    else vdb->flushing_last = 0;
 8005b20:	2300      	movs	r3, #0
 8005b22:	e00b      	b.n	8005b3c <lv_refr_vdb_flush+0x44>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
 8005b24:	69c3      	ldr	r3, [r0, #28]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <lv_refr_vdb_flush+0x36>
 8005b2a:	4798      	blx	r3
 8005b2c:	6828      	ldr	r0, [r5, #0]
        while(vdb->flushing) {
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1f7      	bne.n	8005b24 <lv_refr_vdb_flush+0x2c>
 8005b34:	e7ed      	b.n	8005b12 <lv_refr_vdb_flush+0x1a>
    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
 8005b36:	6a12      	ldr	r2, [r2, #32]
 8005b38:	0792      	lsls	r2, r2, #30
 8005b3a:	d5f1      	bpl.n	8005b20 <lv_refr_vdb_flush+0x28>
    else vdb->flushing_last = 0;
 8005b3c:	61fb      	str	r3, [r7, #28]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
 8005b3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <lv_refr_vdb_flush+0x50>
 8005b44:	0020      	movs	r0, r4
 8005b46:	4798      	blx	r3

    if(disp->driver.flush_cb) {
 8005b48:	68e3      	ldr	r3, [r4, #12]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d100      	bne.n	8005b50 <lv_refr_vdb_flush+0x58>
 8005b4e:	e0b9      	b.n	8005cc4 <lv_refr_vdb_flush+0x1cc>
 8005b50:	0039      	movs	r1, r7
 8005b52:	3110      	adds	r1, #16
 8005b54:	910b      	str	r1, [sp, #44]	; 0x2c
        /*Rotate the buffer to the display's native orientation if necessary*/
        if(disp->driver.rotated != LV_DISP_ROT_NONE && disp->driver.sw_rotate) {
 8005b56:	2106      	movs	r1, #6
 8005b58:	7a22      	ldrb	r2, [r4, #8]
 8005b5a:	420a      	tst	r2, r1
 8005b5c:	d100      	bne.n	8005b60 <lv_refr_vdb_flush+0x68>
 8005b5e:	e1ce      	b.n	8005efe <lv_refr_vdb_flush+0x406>
 8005b60:	3102      	adds	r1, #2
 8005b62:	420a      	tst	r2, r1
 8005b64:	d100      	bne.n	8005b68 <lv_refr_vdb_flush+0x70>
 8005b66:	e1ca      	b.n	8005efe <lv_refr_vdb_flush+0x406>
            lv_refr_vdb_rotate(&vdb->area, vdb->buf_act);
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	9302      	str	r3, [sp, #8]
    lv_disp_drv_t * drv = &disp_refr->driver;
 8005b6c:	682b      	ldr	r3, [r5, #0]
    if(lv_disp_is_true_double_buf(disp_refr) && drv->sw_rotate) {
 8005b6e:	0018      	movs	r0, r3
    lv_disp_drv_t * drv = &disp_refr->driver;
 8005b70:	9300      	str	r3, [sp, #0]
    if(lv_disp_is_true_double_buf(disp_refr) && drv->sw_rotate) {
 8005b72:	f005 fe2e 	bl	800b7d2 <lv_disp_is_true_double_buf>
 8005b76:	9b00      	ldr	r3, [sp, #0]
 8005b78:	7a1b      	ldrb	r3, [r3, #8]
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	d003      	beq.n	8005b86 <lv_refr_vdb_flush+0x8e>
 8005b7e:	2208      	movs	r2, #8
 8005b80:	4213      	tst	r3, r2
 8005b82:	d000      	beq.n	8005b86 <lv_refr_vdb_flush+0x8e>
 8005b84:	e09e      	b.n	8005cc4 <lv_refr_vdb_flush+0x1cc>
    if(drv->rotated == LV_DISP_ROT_180) {
 8005b86:	2206      	movs	r2, #6
 8005b88:	401a      	ands	r2, r3
 8005b8a:	2a04      	cmp	r2, #4
 8005b8c:	d13a      	bne.n	8005c04 <lv_refr_vdb_flush+0x10c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005b8e:	8abb      	ldrh	r3, [r7, #20]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005b90:	8afc      	ldrh	r4, [r7, #22]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005b92:	9301      	str	r3, [sp, #4]
 8005b94:	8a3b      	ldrh	r3, [r7, #16]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005b96:	8a7a      	ldrh	r2, [r7, #18]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005b98:	469c      	mov	ip, r3
 8005b9a:	4661      	mov	r1, ip
 8005b9c:	9b01      	ldr	r3, [sp, #4]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	1a5b      	subs	r3, r3, r1
    uint32_t total = area_w * area_h;
 8005ba2:	b219      	sxth	r1, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005ba4:	1c63      	adds	r3, r4, #1
 8005ba6:	1a9b      	subs	r3, r3, r2
 8005ba8:	b21b      	sxth	r3, r3
 8005baa:	434b      	muls	r3, r1
 8005bac:	9902      	ldr	r1, [sp, #8]
    uint32_t i = total - 1, j = 0;
 8005bae:	1e5d      	subs	r5, r3, #1
 8005bb0:	005b      	lsls	r3, r3, #1
 8005bb2:	18cb      	adds	r3, r1, r3
 8005bb4:	0008      	movs	r0, r1
 8005bb6:	0029      	movs	r1, r5
 8005bb8:	3b02      	subs	r3, #2
    while(i > j) {
 8005bba:	1a6e      	subs	r6, r5, r1
 8005bbc:	428e      	cmp	r6, r1
 8005bbe:	d318      	bcc.n	8005bf2 <lv_refr_vdb_flush+0xfa>
 8005bc0:	9b00      	ldr	r3, [sp, #0]
        drv->flush_cb(drv, area, color_p);
 8005bc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005bc4:	885b      	ldrh	r3, [r3, #2]
 8005bc6:	9800      	ldr	r0, [sp, #0]
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	b29b      	uxth	r3, r3
    area->y2 = drv->ver_res - area->y1 - 1;
 8005bcc:	1a9a      	subs	r2, r3, r2
 8005bce:	82fa      	strh	r2, [r7, #22]
    area->x2 = drv->hor_res - area->x1 - 1;
 8005bd0:	4662      	mov	r2, ip
    area->y1 = drv->ver_res - tmp_coord - 1;
 8005bd2:	1b1c      	subs	r4, r3, r4
 8005bd4:	9b00      	ldr	r3, [sp, #0]
 8005bd6:	827c      	strh	r4, [r7, #18]
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	b29b      	uxth	r3, r3
    area->x2 = drv->hor_res - area->x1 - 1;
 8005bde:	1a9a      	subs	r2, r3, r2
 8005be0:	82ba      	strh	r2, [r7, #20]
    area->x1 = drv->hor_res - tmp_coord - 1;
 8005be2:	9a01      	ldr	r2, [sp, #4]
 8005be4:	1a9b      	subs	r3, r3, r2
 8005be6:	823b      	strh	r3, [r7, #16]
        drv->flush_cb(drv, area, color_p);
 8005be8:	9b00      	ldr	r3, [sp, #0]
 8005bea:	9a02      	ldr	r2, [sp, #8]
 8005bec:	68db      	ldr	r3, [r3, #12]
        } else {
            disp->driver.flush_cb(&disp->driver, &vdb->area, color_p);
 8005bee:	4798      	blx	r3
 8005bf0:	e068      	b.n	8005cc4 <lv_refr_vdb_flush+0x1cc>
        tmp = color_p[i];
 8005bf2:	881e      	ldrh	r6, [r3, #0]
        i--;
 8005bf4:	3901      	subs	r1, #1
        tmp = color_p[i];
 8005bf6:	9603      	str	r6, [sp, #12]
        color_p[i] = color_p[j];
 8005bf8:	8806      	ldrh	r6, [r0, #0]
 8005bfa:	801e      	strh	r6, [r3, #0]
        color_p[j] = tmp;
 8005bfc:	9e03      	ldr	r6, [sp, #12]
 8005bfe:	8006      	strh	r6, [r0, #0]
 8005c00:	3002      	adds	r0, #2
 8005c02:	e7d9      	b.n	8005bb8 <lv_refr_vdb_flush+0xc0>
    } else if(drv->rotated == LV_DISP_ROT_90 || drv->rotated == LV_DISP_ROT_270) {
 8005c04:	079b      	lsls	r3, r3, #30
 8005c06:	d55d      	bpl.n	8005cc4 <lv_refr_vdb_flush+0x1cc>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8005c08:	6828      	ldr	r0, [r5, #0]
 8005c0a:	f005 fdd7 	bl	800b7bc <lv_disp_get_buf>
        lv_coord_t area_w = lv_area_get_width(area);
 8005c0e:	2310      	movs	r3, #16
 8005c10:	5efd      	ldrsh	r5, [r7, r3]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005c12:	8abb      	ldrh	r3, [r7, #20]
 8005c14:	b2ac      	uxth	r4, r5
 8005c16:	3301      	adds	r3, #1
 8005c18:	1b1b      	subs	r3, r3, r4
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	9305      	str	r3, [sp, #20]
 8005c1e:	466b      	mov	r3, sp
 8005c20:	2214      	movs	r2, #20
 8005c22:	5e9b      	ldrsh	r3, [r3, r2]
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8005c24:	9009      	str	r0, [sp, #36]	; 0x24
 8005c26:	9301      	str	r3, [sp, #4]
        lv_coord_t area_h = lv_area_get_height(area);
 8005c28:	2212      	movs	r2, #18
 8005c2a:	5ebb      	ldrsh	r3, [r7, r2]
        lv_coord_t max_row = LV_MATH_MIN((lv_coord_t)((LV_DISP_ROT_MAX_BUF/sizeof(lv_color_t)) / area_w), area_h);
 8005c2c:	2080      	movs	r0, #128	; 0x80
        lv_coord_t area_h = lv_area_get_height(area);
 8005c2e:	930c      	str	r3, [sp, #48]	; 0x30
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005c30:	466b      	mov	r3, sp
 8005c32:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
        lv_coord_t max_row = LV_MATH_MIN((lv_coord_t)((LV_DISP_ROT_MAX_BUF/sizeof(lv_color_t)) / area_w), area_h);
 8005c34:	9901      	ldr	r1, [sp, #4]
 8005c36:	9306      	str	r3, [sp, #24]
 8005c38:	8afb      	ldrh	r3, [r7, #22]
 8005c3a:	9a06      	ldr	r2, [sp, #24]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	1a9b      	subs	r3, r3, r2
 8005c40:	b21b      	sxth	r3, r3
 8005c42:	0100      	lsls	r0, r0, #4
 8005c44:	9307      	str	r3, [sp, #28]
 8005c46:	f7fa fa95 	bl	8000174 <__udivsi3>
 8005c4a:	9a07      	ldr	r2, [sp, #28]
 8005c4c:	1c03      	adds	r3, r0, #0
 8005c4e:	b200      	sxth	r0, r0
 8005c50:	4290      	cmp	r0, r2
 8005c52:	dd01      	ble.n	8005c58 <lv_refr_vdb_flush+0x160>
 8005c54:	466b      	mov	r3, sp
 8005c56:	8b9b      	ldrh	r3, [r3, #28]
        if(drv->rotated == LV_DISP_ROT_90) {
 8005c58:	2206      	movs	r2, #6
        lv_coord_t max_row = LV_MATH_MIN((lv_coord_t)((LV_DISP_ROT_MAX_BUF/sizeof(lv_color_t)) / area_w), area_h);
 8005c5a:	b21b      	sxth	r3, r3
 8005c5c:	930d      	str	r3, [sp, #52]	; 0x34
        if(drv->rotated == LV_DISP_ROT_90) {
 8005c5e:	9b00      	ldr	r3, [sp, #0]
 8005c60:	7a1b      	ldrb	r3, [r3, #8]
 8005c62:	4013      	ands	r3, r2
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d13a      	bne.n	8005cde <lv_refr_vdb_flush+0x1e6>
            area->y2 = drv->ver_res - area->x1 - 1;
 8005c68:	9b00      	ldr	r3, [sp, #0]
 8005c6a:	885b      	ldrh	r3, [r3, #2]
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	1b1c      	subs	r4, r3, r4
 8005c70:	b2a4      	uxth	r4, r4
            area->y1 = area->y2 - area_w + 1;
 8005c72:	9b05      	ldr	r3, [sp, #20]
            area->y2 = drv->ver_res - area->x1 - 1;
 8005c74:	82fc      	strh	r4, [r7, #22]
            area->y1 = area->y2 - area_w + 1;
 8005c76:	3401      	adds	r4, #1
 8005c78:	1ae4      	subs	r4, r4, r3
 8005c7a:	827c      	strh	r4, [r7, #18]
        vdb->flushing = 0;
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    for(lv_coord_t i = 0; i < w/2; i++) {
 8005c80:	9901      	ldr	r1, [sp, #4]
        vdb->flushing = 0;
 8005c82:	619a      	str	r2, [r3, #24]
    for(lv_coord_t i = 0; i < w/2; i++) {
 8005c84:	9b01      	ldr	r3, [sp, #4]
 8005c86:	0fdb      	lsrs	r3, r3, #31
 8005c88:	185b      	adds	r3, r3, r1
 8005c8a:	105b      	asrs	r3, r3, #1
        for(lv_coord_t j = 0; j < (w + 1)/2; j++) {
 8005c8c:	3101      	adds	r1, #1
    for(lv_coord_t i = 0; i < w/2; i++) {
 8005c8e:	9313      	str	r3, [sp, #76]	; 0x4c
        for(lv_coord_t j = 0; j < (w + 1)/2; j++) {
 8005c90:	0fcb      	lsrs	r3, r1, #31
 8005c92:	185b      	adds	r3, r3, r1
 8005c94:	105b      	asrs	r3, r3, #1
 8005c96:	9312      	str	r3, [sp, #72]	; 0x48
 8005c98:	466b      	mov	r3, sp
 8005c9a:	9901      	ldr	r1, [sp, #4]
 8005c9c:	889b      	ldrh	r3, [r3, #4]
 8005c9e:	4291      	cmp	r1, r2
 8005ca0:	da00      	bge.n	8005ca4 <lv_refr_vdb_flush+0x1ac>
 8005ca2:	1c13      	adds	r3, r2, #0
 8005ca4:	b21b      	sxth	r3, r3
 8005ca6:	005b      	lsls	r3, r3, #1
 8005ca8:	9310      	str	r3, [sp, #64]	; 0x40
        lv_coord_t row = 0;
 8005caa:	2300      	movs	r3, #0
 8005cac:	9303      	str	r3, [sp, #12]
        lv_color_t * rot_buf = NULL; 
 8005cae:	9304      	str	r3, [sp, #16]
        while(row < area_h) {
 8005cb0:	9b07      	ldr	r3, [sp, #28]
 8005cb2:	9a03      	ldr	r2, [sp, #12]
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	dc18      	bgt.n	8005cea <lv_refr_vdb_flush+0x1f2>
        if(rot_buf != NULL)
 8005cb8:	9b04      	ldr	r3, [sp, #16]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <lv_refr_vdb_flush+0x1cc>
            _lv_mem_buf_release(rot_buf);
 8005cbe:	0018      	movs	r0, r3
 8005cc0:	f006 fb30 	bl	800c324 <_lv_mem_buf_release>
        }
    }
    if(vdb->buf1 && vdb->buf2) {
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d007      	beq.n	8005cda <lv_refr_vdb_flush+0x1e2>
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	2a00      	cmp	r2, #0
 8005cce:	d004      	beq.n	8005cda <lv_refr_vdb_flush+0x1e2>
        if(vdb->buf_act == vdb->buf1)
 8005cd0:	68b9      	ldr	r1, [r7, #8]
 8005cd2:	428b      	cmp	r3, r1
 8005cd4:	d000      	beq.n	8005cd8 <lv_refr_vdb_flush+0x1e0>
 8005cd6:	e116      	b.n	8005f06 <lv_refr_vdb_flush+0x40e>
            vdb->buf_act = vdb->buf2;
 8005cd8:	60ba      	str	r2, [r7, #8]
        else
            vdb->buf_act = vdb->buf1;
    }
}
 8005cda:	b015      	add	sp, #84	; 0x54
 8005cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            area->y2 = area->y1 + area_w - 1;
 8005cde:	9b05      	ldr	r3, [sp, #20]
 8005ce0:	3c01      	subs	r4, #1
 8005ce2:	191c      	adds	r4, r3, r4
            area->y1 = area->x1;
 8005ce4:	827d      	strh	r5, [r7, #18]
            area->y2 = area->y1 + area_w - 1;
 8005ce6:	82fc      	strh	r4, [r7, #22]
 8005ce8:	e7c8      	b.n	8005c7c <lv_refr_vdb_flush+0x184>
            lv_coord_t height = LV_MATH_MIN(max_row, area_h-row);
 8005cea:	9b07      	ldr	r3, [sp, #28]
 8005cec:	9a03      	ldr	r2, [sp, #12]
 8005cee:	1a9d      	subs	r5, r3, r2
 8005cf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cf2:	429d      	cmp	r5, r3
 8005cf4:	dd00      	ble.n	8005cf8 <lv_refr_vdb_flush+0x200>
 8005cf6:	001d      	movs	r5, r3
            vdb->flushing = 1;
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
            lv_coord_t height = LV_MATH_MIN(max_row, area_h-row);
 8005cfc:	b22c      	sxth	r4, r5
            vdb->flushing = 1;
 8005cfe:	619a      	str	r2, [r3, #24]
            if((row == 0) && (area_h >= area_w)) {
 8005d00:	9b03      	ldr	r3, [sp, #12]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d000      	beq.n	8005d08 <lv_refr_vdb_flush+0x210>
 8005d06:	e091      	b.n	8005e2c <lv_refr_vdb_flush+0x334>
 8005d08:	9b01      	ldr	r3, [sp, #4]
 8005d0a:	9a07      	ldr	r2, [sp, #28]
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	dd00      	ble.n	8005d12 <lv_refr_vdb_flush+0x21a>
 8005d10:	e08c      	b.n	8005e2c <lv_refr_vdb_flush+0x334>
                lv_refr_vdb_rotate_90_sqr(drv->rotated == LV_DISP_ROT_270, area_w, color_p);
 8005d12:	2206      	movs	r2, #6
 8005d14:	9b00      	ldr	r3, [sp, #0]
 8005d16:	7a1b      	ldrb	r3, [r3, #8]
 8005d18:	401a      	ands	r2, r3
 8005d1a:	9b03      	ldr	r3, [sp, #12]
 8005d1c:	920f      	str	r2, [sp, #60]	; 0x3c
 8005d1e:	469c      	mov	ip, r3
 8005d20:	001d      	movs	r5, r3
 8005d22:	9b05      	ldr	r3, [sp, #20]
 8005d24:	3b01      	subs	r3, #1
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	9308      	str	r3, [sp, #32]
    for(lv_coord_t i = 0; i < w/2; i++) {
 8005d2a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005d2c:	b22b      	sxth	r3, r5
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	dd46      	ble.n	8005dc0 <lv_refr_vdb_flush+0x2c8>
 8005d32:	9b08      	ldr	r3, [sp, #32]
                    &color_p[inv_i * w + inv_j],
 8005d34:	9c08      	ldr	r4, [sp, #32]
 8005d36:	1b5b      	subs	r3, r3, r5
 8005d38:	b21b      	sxth	r3, r3
 8005d3a:	930a      	str	r3, [sp, #40]	; 0x28
 8005d3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d3e:	9b01      	ldr	r3, [sp, #4]
 8005d40:	4353      	muls	r3, r2
 8005d42:	9311      	str	r3, [sp, #68]	; 0x44
 8005d44:	e026      	b.n	8005d94 <lv_refr_vdb_flush+0x29c>
 8005d46:	4662      	mov	r2, ip
 8005d48:	1898      	adds	r0, r3, r2
 8005d4a:	9a02      	ldr	r2, [sp, #8]
 8005d4c:	0040      	lsls	r0, r0, #1
 8005d4e:	9901      	ldr	r1, [sp, #4]
 8005d50:	1810      	adds	r0, r2, r0
 8005d52:	b222      	sxth	r2, r4
 8005d54:	4351      	muls	r1, r2
 8005d56:	9e02      	ldr	r6, [sp, #8]
 8005d58:	1949      	adds	r1, r1, r5
 8005d5a:	0049      	lsls	r1, r1, #1
 8005d5c:	1871      	adds	r1, r6, r1
 8005d5e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8005d60:	18b2      	adds	r2, r6, r2
 8005d62:	9e02      	ldr	r6, [sp, #8]
 8005d64:	0052      	lsls	r2, r2, #1
 8005d66:	18b2      	adds	r2, r6, r2
 8005d68:	9e01      	ldr	r6, [sp, #4]
 8005d6a:	4373      	muls	r3, r6
 8005d6c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005d6e:	199b      	adds	r3, r3, r6
 8005d70:	9e02      	ldr	r6, [sp, #8]
 8005d72:	005b      	lsls	r3, r3, #1
 8005d74:	18f3      	adds	r3, r6, r3
 8005d76:	8806      	ldrh	r6, [r0, #0]
 8005d78:	960e      	str	r6, [sp, #56]	; 0x38
            if(is_270) {
 8005d7a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8005d7c:	2e06      	cmp	r6, #6
 8005d7e:	d116      	bne.n	8005dae <lv_refr_vdb_flush+0x2b6>
    *a = *b;
 8005d80:	880e      	ldrh	r6, [r1, #0]
 8005d82:	8006      	strh	r6, [r0, #0]
    *b = *c;
 8005d84:	8810      	ldrh	r0, [r2, #0]
 8005d86:	8008      	strh	r0, [r1, #0]
    *c = *d;
 8005d88:	8819      	ldrh	r1, [r3, #0]
 8005d8a:	8011      	strh	r1, [r2, #0]
    *d = tmp;
 8005d8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d8e:	801a      	strh	r2, [r3, #0]
 8005d90:	3c01      	subs	r4, #1
 8005d92:	b2a4      	uxth	r4, r4
        for(lv_coord_t j = 0; j < (w + 1)/2; j++) {
 8005d94:	9b08      	ldr	r3, [sp, #32]
 8005d96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d98:	1b1b      	subs	r3, r3, r4
 8005d9a:	b21b      	sxth	r3, r3
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	dbd2      	blt.n	8005d46 <lv_refr_vdb_flush+0x24e>
 8005da0:	9a01      	ldr	r2, [sp, #4]
 8005da2:	4663      	mov	r3, ip
 8005da4:	4694      	mov	ip, r2
 8005da6:	4463      	add	r3, ip
 8005da8:	3501      	adds	r5, #1
 8005daa:	469c      	mov	ip, r3
 8005dac:	e7bd      	b.n	8005d2a <lv_refr_vdb_flush+0x232>
    *a = *b;
 8005dae:	881e      	ldrh	r6, [r3, #0]
 8005db0:	8006      	strh	r6, [r0, #0]
    *b = *c;
 8005db2:	8810      	ldrh	r0, [r2, #0]
 8005db4:	8018      	strh	r0, [r3, #0]
    *c = *d;
 8005db6:	880b      	ldrh	r3, [r1, #0]
 8005db8:	8013      	strh	r3, [r2, #0]
    *d = tmp;
 8005dba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005dbc:	800b      	strh	r3, [r1, #0]
 8005dbe:	e7e7      	b.n	8005d90 <lv_refr_vdb_flush+0x298>
                if(drv->rotated == LV_DISP_ROT_90) {
 8005dc0:	2206      	movs	r2, #6
 8005dc2:	9b00      	ldr	r3, [sp, #0]
 8005dc4:	7a1b      	ldrb	r3, [r3, #8]
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d123      	bne.n	8005e14 <lv_refr_vdb_flush+0x31c>
                    area->x1 = init_y_off;
 8005dcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                    area->x2 = init_y_off+area_w-1;
 8005dce:	9a05      	ldr	r2, [sp, #20]
                    area->x1 = init_y_off;
 8005dd0:	823b      	strh	r3, [r7, #16]
                    area->x2 = init_y_off+area_w-1;
 8005dd2:	9b06      	ldr	r3, [sp, #24]
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	18d3      	adds	r3, r2, r3
 8005dd8:	82bb      	strh	r3, [r7, #20]
                    area->x1 = area->x2 - area_w + 1;
 8005dda:	9c01      	ldr	r4, [sp, #4]
            drv->flush_cb(drv, area, rot_buf == NULL ? color_p : rot_buf);
 8005ddc:	9b00      	ldr	r3, [sp, #0]
 8005dde:	9904      	ldr	r1, [sp, #16]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	9a02      	ldr	r2, [sp, #8]
 8005de4:	2900      	cmp	r1, #0
 8005de6:	d000      	beq.n	8005dea <lv_refr_vdb_flush+0x2f2>
 8005de8:	000a      	movs	r2, r1
 8005dea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005dec:	9800      	ldr	r0, [sp, #0]
 8005dee:	4798      	blx	r3
            while(vdb->flushing) {
 8005df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d000      	beq.n	8005dfa <lv_refr_vdb_flush+0x302>
 8005df8:	e079      	b.n	8005eee <lv_refr_vdb_flush+0x3f6>
            color_p += area_w * height;
 8005dfa:	9b01      	ldr	r3, [sp, #4]
 8005dfc:	9a02      	ldr	r2, [sp, #8]
 8005dfe:	4363      	muls	r3, r4
 8005e00:	005b      	lsls	r3, r3, #1
 8005e02:	18d3      	adds	r3, r2, r3
 8005e04:	9302      	str	r3, [sp, #8]
            row += height;
 8005e06:	9b03      	ldr	r3, [sp, #12]
 8005e08:	191c      	adds	r4, r3, r4
 8005e0a:	b223      	sxth	r3, r4
 8005e0c:	9303      	str	r3, [sp, #12]
 8005e0e:	e74f      	b.n	8005cb0 <lv_refr_vdb_flush+0x1b8>
 8005e10:	20005d38 	.word	0x20005d38
                    area->x2 = drv->hor_res - 1 - init_y_off;
 8005e14:	9b00      	ldr	r3, [sp, #0]
 8005e16:	9a06      	ldr	r2, [sp, #24]
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	1a9b      	subs	r3, r3, r2
 8005e1e:	b29b      	uxth	r3, r3
                    area->x1 = area->x2 - area_w + 1;
 8005e20:	9a05      	ldr	r2, [sp, #20]
                    area->x2 = drv->hor_res - 1 - init_y_off;
 8005e22:	82bb      	strh	r3, [r7, #20]
                    area->x1 = area->x2 - area_w + 1;
 8005e24:	3301      	adds	r3, #1
 8005e26:	1a9b      	subs	r3, r3, r2
 8005e28:	823b      	strh	r3, [r7, #16]
 8005e2a:	e7d6      	b.n	8005dda <lv_refr_vdb_flush+0x2e2>
                if(rot_buf == NULL)
 8005e2c:	9b04      	ldr	r3, [sp, #16]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d104      	bne.n	8005e3c <lv_refr_vdb_flush+0x344>
                    rot_buf = _lv_mem_buf_get(LV_DISP_ROT_MAX_BUF);
 8005e32:	2080      	movs	r0, #128	; 0x80
 8005e34:	0140      	lsls	r0, r0, #5
 8005e36:	f006 fb6d 	bl	800c514 <_lv_mem_buf_get>
 8005e3a:	9004      	str	r0, [sp, #16]
                lv_refr_vdb_rotate_90(drv->rotated == LV_DISP_ROT_270, area_w, height, color_p, rot_buf);
 8005e3c:	2206      	movs	r2, #6
 8005e3e:	9b00      	ldr	r3, [sp, #0]
 8005e40:	7a1b      	ldrb	r3, [r3, #8]
 8005e42:	401a      	ands	r2, r3
    uint32_t invert = (area_w * area_h) - 1;
 8005e44:	9b01      	ldr	r3, [sp, #4]
                lv_refr_vdb_rotate_90(drv->rotated == LV_DISP_ROT_270, area_w, height, color_p, rot_buf);
 8005e46:	920e      	str	r2, [sp, #56]	; 0x38
    uint32_t invert = (area_w * area_h) - 1;
 8005e48:	4363      	muls	r3, r4
    uint32_t initial_i = ((area_w - 1) * area_h);
 8005e4a:	1b1a      	subs	r2, r3, r4
 8005e4c:	4694      	mov	ip, r2
 8005e4e:	4661      	mov	r1, ip
 8005e50:	9a02      	ldr	r2, [sp, #8]
 8005e52:	1a5b      	subs	r3, r3, r1
 8005e54:	920a      	str	r2, [sp, #40]	; 0x28
 8005e56:	2200      	movs	r2, #0
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	9311      	str	r3, [sp, #68]	; 0x44
    for(lv_coord_t y = 0; y < area_h; y++) {
 8005e5c:	b213      	sxth	r3, r2
 8005e5e:	429c      	cmp	r4, r3
 8005e60:	dc10      	bgt.n	8005e84 <lv_refr_vdb_flush+0x38c>
 8005e62:	466b      	mov	r3, sp
                if(drv->rotated == LV_DISP_ROT_90) {
 8005e64:	2106      	movs	r1, #6
 8005e66:	899a      	ldrh	r2, [r3, #12]
 8005e68:	9b00      	ldr	r3, [sp, #0]
 8005e6a:	b2ad      	uxth	r5, r5
 8005e6c:	7a1b      	ldrb	r3, [r3, #8]
 8005e6e:	400b      	ands	r3, r1
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d130      	bne.n	8005ed6 <lv_refr_vdb_flush+0x3de>
                    area->x1 = init_y_off+row;
 8005e74:	9b06      	ldr	r3, [sp, #24]
 8005e76:	189a      	adds	r2, r3, r2
 8005e78:	b293      	uxth	r3, r2
 8005e7a:	823b      	strh	r3, [r7, #16]
                    area->x2 = init_y_off+row+height-1;
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	18ed      	adds	r5, r5, r3
 8005e80:	82bd      	strh	r5, [r7, #20]
 8005e82:	e7ab      	b.n	8005ddc <lv_refr_vdb_flush+0x2e4>
 8005e84:	4663      	mov	r3, ip
        if(invert_i)
 8005e86:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005e88:	18d3      	adds	r3, r2, r3
 8005e8a:	2906      	cmp	r1, #6
 8005e8c:	d101      	bne.n	8005e92 <lv_refr_vdb_flush+0x39a>
 8005e8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e90:	1a9b      	subs	r3, r3, r2
                lv_refr_vdb_rotate_90_sqr(drv->rotated == LV_DISP_ROT_270, area_w, color_p);
 8005e92:	2100      	movs	r1, #0
 8005e94:	9108      	str	r1, [sp, #32]
        for(lv_coord_t x = 0; x < area_w; x++) {
 8005e96:	9908      	ldr	r1, [sp, #32]
 8005e98:	b209      	sxth	r1, r1
 8005e9a:	0008      	movs	r0, r1
 8005e9c:	9901      	ldr	r1, [sp, #4]
 8005e9e:	4281      	cmp	r1, r0
 8005ea0:	dc05      	bgt.n	8005eae <lv_refr_vdb_flush+0x3b6>
 8005ea2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ea4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ea6:	3201      	adds	r2, #1
 8005ea8:	18cb      	adds	r3, r1, r3
 8005eaa:	930a      	str	r3, [sp, #40]	; 0x28
 8005eac:	e7d6      	b.n	8005e5c <lv_refr_vdb_flush+0x364>
            rot_buf[i] = *(orig_color_p++);
 8005eae:	9908      	ldr	r1, [sp, #32]
 8005eb0:	004e      	lsls	r6, r1, #1
 8005eb2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005eb4:	5b8e      	ldrh	r6, [r1, r6]
 8005eb6:	960f      	str	r6, [sp, #60]	; 0x3c
 8005eb8:	005e      	lsls	r6, r3, #1
 8005eba:	0031      	movs	r1, r6
 8005ebc:	0008      	movs	r0, r1
 8005ebe:	9e04      	ldr	r6, [sp, #16]
 8005ec0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005ec2:	5381      	strh	r1, [r0, r6]
            if(invert_i)
 8005ec4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005ec6:	2906      	cmp	r1, #6
 8005ec8:	d103      	bne.n	8005ed2 <lv_refr_vdb_flush+0x3da>
                i += area_h;
 8005eca:	191b      	adds	r3, r3, r4
 8005ecc:	9908      	ldr	r1, [sp, #32]
 8005ece:	3101      	adds	r1, #1
 8005ed0:	e7e0      	b.n	8005e94 <lv_refr_vdb_flush+0x39c>
                i -= area_h;
 8005ed2:	1b1b      	subs	r3, r3, r4
 8005ed4:	e7fa      	b.n	8005ecc <lv_refr_vdb_flush+0x3d4>
                    area->x2 = drv->hor_res - 1 - init_y_off - row;
 8005ed6:	9b00      	ldr	r3, [sp, #0]
 8005ed8:	9906      	ldr	r1, [sp, #24]
 8005eda:	881b      	ldrh	r3, [r3, #0]
 8005edc:	3b01      	subs	r3, #1
 8005ede:	1a5b      	subs	r3, r3, r1
 8005ee0:	1a9b      	subs	r3, r3, r2
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	82bb      	strh	r3, [r7, #20]
                    area->x1 = area->x2 - height + 1;
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	1b5b      	subs	r3, r3, r5
 8005eea:	823b      	strh	r3, [r7, #16]
 8005eec:	e776      	b.n	8005ddc <lv_refr_vdb_flush+0x2e4>
                if(drv->wait_cb) drv->wait_cb(drv);
 8005eee:	9b00      	ldr	r3, [sp, #0]
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d100      	bne.n	8005ef8 <lv_refr_vdb_flush+0x400>
 8005ef6:	e77b      	b.n	8005df0 <lv_refr_vdb_flush+0x2f8>
 8005ef8:	9800      	ldr	r0, [sp, #0]
 8005efa:	4798      	blx	r3
 8005efc:	e778      	b.n	8005df0 <lv_refr_vdb_flush+0x2f8>
            disp->driver.flush_cb(&disp->driver, &vdb->area, color_p);
 8005efe:	0032      	movs	r2, r6
 8005f00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f02:	0020      	movs	r0, r4
 8005f04:	e673      	b.n	8005bee <lv_refr_vdb_flush+0xf6>
            vdb->buf_act = vdb->buf1;
 8005f06:	60bb      	str	r3, [r7, #8]
}
 8005f08:	e6e7      	b.n	8005cda <lv_refr_vdb_flush+0x1e2>
 8005f0a:	46c0      	nop			; (mov r8, r8)

08005f0c <lv_refr_area_part>:
{
 8005f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8005f0e:	4c4a      	ldr	r4, [pc, #296]	; (8006038 <lv_refr_area_part+0x12c>)
{
 8005f10:	b09d      	sub	sp, #116	; 0x74
 8005f12:	0006      	movs	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8005f14:	6820      	ldr	r0, [r4, #0]
 8005f16:	f005 fc51 	bl	800b7bc <lv_disp_get_buf>
 8005f1a:	0005      	movs	r5, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
 8005f1c:	6820      	ldr	r0, [r4, #0]
 8005f1e:	f005 fc4f 	bl	800b7c0 <lv_disp_is_double_buf>
 8005f22:	2800      	cmp	r0, #0
 8005f24:	d018      	beq.n	8005f58 <lv_refr_area_part+0x4c>
    _lv_area_intersect(&start_mask, area_p, &vdb->area);
 8005f26:	002a      	movs	r2, r5
 8005f28:	0031      	movs	r1, r6
 8005f2a:	3210      	adds	r2, #16
 8005f2c:	a803      	add	r0, sp, #12
 8005f2e:	f005 fd38 	bl	800b9a2 <_lv_area_intersect>
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 8005f32:	6820      	ldr	r0, [r4, #0]
 8005f34:	f7fd f9e2 	bl	80032fc <lv_disp_get_scr_act>
 8005f38:	0001      	movs	r1, r0
 8005f3a:	a803      	add	r0, sp, #12
 8005f3c:	f7ff fd0c 	bl	8005958 <lv_refr_get_top_obj>
    if(disp_refr->prev_scr) {
 8005f40:	6823      	ldr	r3, [r4, #0]
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 8005f42:	0005      	movs	r5, r0
    if(disp_refr->prev_scr) {
 8005f44:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005f46:	2900      	cmp	r1, #0
 8005f48:	d10b      	bne.n	8005f62 <lv_refr_area_part+0x56>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 8005f4a:	2800      	cmp	r0, #0
 8005f4c:	d13b      	bne.n	8005fc6 <lv_refr_area_part+0xba>
 8005f4e:	e00f      	b.n	8005f70 <lv_refr_area_part+0x64>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
 8005f50:	69c3      	ldr	r3, [r0, #28]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <lv_refr_area_part+0x4e>
 8005f56:	4798      	blx	r3
 8005f58:	6820      	ldr	r0, [r4, #0]
        while(vdb->flushing) {
 8005f5a:	69ab      	ldr	r3, [r5, #24]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1f7      	bne.n	8005f50 <lv_refr_area_part+0x44>
 8005f60:	e7e1      	b.n	8005f26 <lv_refr_area_part+0x1a>
        top_prev_scr = lv_refr_get_top_obj(&start_mask, disp_refr->prev_scr);
 8005f62:	a803      	add	r0, sp, #12
 8005f64:	f7ff fcf8 	bl	8005958 <lv_refr_get_top_obj>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 8005f68:	2d00      	cmp	r5, #0
 8005f6a:	d12d      	bne.n	8005fc8 <lv_refr_area_part+0xbc>
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	d12b      	bne.n	8005fc8 <lv_refr_area_part+0xbc>
        if(disp_refr->bg_img) {
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	af07      	add	r7, sp, #28
 8005f74:	6d1e      	ldr	r6, [r3, #80]	; 0x50
            lv_draw_img_dsc_init(&dsc);
 8005f76:	0038      	movs	r0, r7
        if(disp_refr->bg_img) {
 8005f78:	2e00      	cmp	r6, #0
 8005f7a:	d04c      	beq.n	8006016 <lv_refr_area_part+0x10a>
            lv_draw_img_dsc_init(&dsc);
 8005f7c:	f001 fec8 	bl	8007d10 <lv_draw_img_dsc_init>
            dsc.opa = disp_refr->bg_opa;
 8005f80:	6823      	ldr	r3, [r4, #0]
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 8005f82:	a902      	add	r1, sp, #8
            dsc.opa = disp_refr->bg_opa;
 8005f84:	001a      	movs	r2, r3
 8005f86:	3254      	adds	r2, #84	; 0x54
 8005f88:	7812      	ldrb	r2, [r2, #0]
 8005f8a:	703a      	strb	r2, [r7, #0]
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 8005f8c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005f8e:	f004 ff85 	bl	800ae9c <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
 8005f92:	2801      	cmp	r0, #1
 8005f94:	d117      	bne.n	8005fc6 <lv_refr_area_part+0xba>
                lv_area_set(&a, 0, 0, header.w - 1, header.h - 1);
 8005f96:	220a      	movs	r2, #10
 8005f98:	446a      	add	r2, sp
 8005f9a:	8812      	ldrh	r2, [r2, #0]
 8005f9c:	9b02      	ldr	r3, [sp, #8]
 8005f9e:	0952      	lsrs	r2, r2, #5
 8005fa0:	3a01      	subs	r2, #1
 8005fa2:	b212      	sxth	r2, r2
 8005fa4:	9200      	str	r2, [sp, #0]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	02db      	lsls	r3, r3, #11
 8005faa:	0d5b      	lsrs	r3, r3, #21
 8005fac:	3b01      	subs	r3, #1
 8005fae:	0011      	movs	r1, r2
 8005fb0:	b21b      	sxth	r3, r3
 8005fb2:	a805      	add	r0, sp, #20
 8005fb4:	f005 fcd9 	bl	800b96a <lv_area_set>
                lv_draw_img(&a, &start_mask, disp_refr->bg_img, &dsc);
 8005fb8:	6822      	ldr	r2, [r4, #0]
 8005fba:	003b      	movs	r3, r7
 8005fbc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005fbe:	a903      	add	r1, sp, #12
 8005fc0:	a805      	add	r0, sp, #20
 8005fc2:	f001 fed1 	bl	8007d68 <lv_draw_img>
 8005fc6:	2000      	movs	r0, #0
    if(disp_refr->prev_scr) {
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d005      	beq.n	8005fdc <lv_refr_area_part+0xd0>
        if(top_prev_scr == NULL) {
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	d100      	bne.n	8005fd6 <lv_refr_area_part+0xca>
 8005fd4:	0018      	movs	r0, r3
        lv_refr_obj_and_children(top_prev_scr, &start_mask);
 8005fd6:	a903      	add	r1, sp, #12
 8005fd8:	f7ff fd56 	bl	8005a88 <lv_refr_obj_and_children>
    if(top_act_scr == NULL) {
 8005fdc:	2d00      	cmp	r5, #0
 8005fde:	d101      	bne.n	8005fe4 <lv_refr_area_part+0xd8>
        top_act_scr = disp_refr->act_scr;
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    lv_refr_obj_and_children(top_act_scr, &start_mask);
 8005fe4:	a903      	add	r1, sp, #12
 8005fe6:	0028      	movs	r0, r5
 8005fe8:	f7ff fd4e 	bl	8005a88 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
 8005fec:	6820      	ldr	r0, [r4, #0]
 8005fee:	f7fd f999 	bl	8003324 <lv_disp_get_layer_top>
 8005ff2:	a903      	add	r1, sp, #12
 8005ff4:	f7ff fd48 	bl	8005a88 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
 8005ff8:	6820      	ldr	r0, [r4, #0]
 8005ffa:	f7fd f99d 	bl	8003338 <lv_disp_get_layer_sys>
 8005ffe:	a903      	add	r1, sp, #12
 8006000:	f7ff fd42 	bl	8005a88 <lv_refr_obj_and_children>
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
 8006004:	6820      	ldr	r0, [r4, #0]
 8006006:	f005 fbe4 	bl	800b7d2 <lv_disp_is_true_double_buf>
 800600a:	2800      	cmp	r0, #0
 800600c:	d101      	bne.n	8006012 <lv_refr_area_part+0x106>
        lv_refr_vdb_flush();
 800600e:	f7ff fd73 	bl	8005af8 <lv_refr_vdb_flush>
}
 8006012:	b01d      	add	sp, #116	; 0x74
 8006014:	bdf0      	pop	{r4, r5, r6, r7, pc}
            lv_draw_rect_dsc_init(&dsc);
 8006016:	f003 fff9 	bl	800a00c <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
 800601a:	6823      	ldr	r3, [r4, #0]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 800601c:	a903      	add	r1, sp, #12
            dsc.bg_color = disp_refr->bg_color;
 800601e:	001a      	movs	r2, r3
 8006020:	324e      	adds	r2, #78	; 0x4e
 8006022:	8812      	ldrh	r2, [r2, #0]
            dsc.bg_opa = disp_refr->bg_opa;
 8006024:	3354      	adds	r3, #84	; 0x54
            dsc.bg_color = disp_refr->bg_color;
 8006026:	807a      	strh	r2, [r7, #2]
            dsc.bg_opa = disp_refr->bg_opa;
 8006028:	781b      	ldrb	r3, [r3, #0]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 800602a:	0008      	movs	r0, r1
 800602c:	003a      	movs	r2, r7
            dsc.bg_opa = disp_refr->bg_opa;
 800602e:	733b      	strb	r3, [r7, #12]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 8006030:	f004 f814 	bl	800a05c <lv_draw_rect>
 8006034:	0030      	movs	r0, r6
 8006036:	e7c7      	b.n	8005fc8 <lv_refr_area_part+0xbc>
 8006038:	20005d38 	.word	0x20005d38

0800603c <_lv_refr_init>:
}
 800603c:	4770      	bx	lr

0800603e <_lv_inv_area>:
{
 800603e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006040:	0004      	movs	r4, r0
 8006042:	000d      	movs	r5, r1
    if(!disp) disp = lv_disp_get_default();
 8006044:	2800      	cmp	r0, #0
 8006046:	d103      	bne.n	8006050 <_lv_inv_area+0x12>
 8006048:	f005 fb40 	bl	800b6cc <lv_disp_get_default>
 800604c:	1e04      	subs	r4, r0, #0
    if(!disp) return;
 800604e:	d007      	beq.n	8006060 <_lv_inv_area+0x22>
    if(area_p == NULL) {
 8006050:	2d00      	cmp	r5, #0
 8006052:	d106      	bne.n	8006062 <_lv_inv_area+0x24>
        disp->inv_p = 0;
 8006054:	22bb      	movs	r2, #187	; 0xbb
 8006056:	0052      	lsls	r2, r2, #1
 8006058:	5aa3      	ldrh	r3, [r4, r2]
 800605a:	0a9b      	lsrs	r3, r3, #10
 800605c:	029b      	lsls	r3, r3, #10
 800605e:	52a3      	strh	r3, [r4, r2]
}
 8006060:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    scr_area.x1 = 0;
 8006062:	2300      	movs	r3, #0
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8006064:	0020      	movs	r0, r4
    scr_area.x1 = 0;
 8006066:	9300      	str	r3, [sp, #0]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8006068:	f005 fb36 	bl	800b6d8 <lv_disp_get_hor_res>
 800606c:	466b      	mov	r3, sp
 800606e:	3801      	subs	r0, #1
 8006070:	8098      	strh	r0, [r3, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 8006072:	0020      	movs	r0, r4
 8006074:	f005 fb46 	bl	800b704 <lv_disp_get_ver_res>
 8006078:	466b      	mov	r3, sp
 800607a:	3801      	subs	r0, #1
 800607c:	80d8      	strh	r0, [r3, #6]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 800607e:	466a      	mov	r2, sp
 8006080:	0029      	movs	r1, r5
 8006082:	a802      	add	r0, sp, #8
 8006084:	f005 fc8d 	bl	800b9a2 <_lv_area_intersect>
    if(suc != false) {
 8006088:	2800      	cmp	r0, #0
 800608a:	d0e9      	beq.n	8006060 <_lv_inv_area+0x22>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
 800608c:	6923      	ldr	r3, [r4, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d002      	beq.n	8006098 <_lv_inv_area+0x5a>
 8006092:	a902      	add	r1, sp, #8
 8006094:	0020      	movs	r0, r4
 8006096:	4798      	blx	r3
        for(i = 0; i < disp->inv_p; i++) {
 8006098:	26bb      	movs	r6, #187	; 0xbb
{
 800609a:	2500      	movs	r5, #0
        for(i = 0; i < disp->inv_p; i++) {
 800609c:	0076      	lsls	r6, r6, #1
 800609e:	5ba0      	ldrh	r0, [r4, r6]
 80060a0:	b2aa      	uxth	r2, r5
 80060a2:	1c03      	adds	r3, r0, #0
 80060a4:	0580      	lsls	r0, r0, #22
 80060a6:	0d80      	lsrs	r0, r0, #22
 80060a8:	4290      	cmp	r0, r2
 80060aa:	d819      	bhi.n	80060e0 <_lv_inv_area+0xa2>
        if(disp->inv_p < LV_INV_BUF_SIZE) {
 80060ac:	281f      	cmp	r0, #31
 80060ae:	d823      	bhi.n	80060f8 <_lv_inv_area+0xba>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 80060b0:	00c0      	lsls	r0, r0, #3
 80060b2:	3056      	adds	r0, #86	; 0x56
 80060b4:	1820      	adds	r0, r4, r0
 80060b6:	a902      	add	r1, sp, #8
            lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
 80060b8:	f7ff fd16 	bl	8005ae8 <lv_area_copy>
        disp->inv_p++;
 80060bc:	21bb      	movs	r1, #187	; 0xbb
 80060be:	2080      	movs	r0, #128	; 0x80
 80060c0:	0049      	lsls	r1, r1, #1
 80060c2:	5a63      	ldrh	r3, [r4, r1]
 80060c4:	03c0      	lsls	r0, r0, #15
 80060c6:	059a      	lsls	r2, r3, #22
 80060c8:	1812      	adds	r2, r2, r0
 80060ca:	0a9b      	lsrs	r3, r3, #10
 80060cc:	0d92      	lsrs	r2, r2, #22
 80060ce:	029b      	lsls	r3, r3, #10
 80060d0:	4313      	orrs	r3, r2
 80060d2:	5263      	strh	r3, [r4, r1]
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
 80060d4:	3974      	subs	r1, #116	; 0x74
 80060d6:	39ff      	subs	r1, #255	; 0xff
 80060d8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80060da:	f006 fc39 	bl	800c950 <lv_task_set_prio>
 80060de:	e7bf      	b.n	8006060 <_lv_inv_area+0x22>
            if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 80060e0:	0021      	movs	r1, r4
 80060e2:	00eb      	lsls	r3, r5, #3
 80060e4:	3156      	adds	r1, #86	; 0x56
 80060e6:	18c9      	adds	r1, r1, r3
 80060e8:	2200      	movs	r2, #0
 80060ea:	a802      	add	r0, sp, #8
 80060ec:	f005 fd69 	bl	800bbc2 <_lv_area_is_in>
 80060f0:	3501      	adds	r5, #1
 80060f2:	2800      	cmp	r0, #0
 80060f4:	d0d3      	beq.n	800609e <_lv_inv_area+0x60>
 80060f6:	e7b3      	b.n	8006060 <_lv_inv_area+0x22>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
 80060f8:	0020      	movs	r0, r4
            disp->inv_p = 0;
 80060fa:	0a9b      	lsrs	r3, r3, #10
 80060fc:	029b      	lsls	r3, r3, #10
 80060fe:	53a3      	strh	r3, [r4, r6]
            lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
 8006100:	4669      	mov	r1, sp
 8006102:	3056      	adds	r0, #86	; 0x56
 8006104:	e7d8      	b.n	80060b8 <_lv_inv_area+0x7a>
	...

08006108 <_lv_refr_get_disp_refreshing>:
    return disp_refr;
 8006108:	4b01      	ldr	r3, [pc, #4]	; (8006110 <_lv_refr_get_disp_refreshing+0x8>)
 800610a:	6818      	ldr	r0, [r3, #0]
}
 800610c:	4770      	bx	lr
 800610e:	46c0      	nop			; (mov r8, r8)
 8006110:	20005d38 	.word	0x20005d38

08006114 <_lv_disp_refr_task>:
{
 8006114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006116:	b08d      	sub	sp, #52	; 0x34
 8006118:	0005      	movs	r5, r0
    uint32_t start = lv_tick_get();
 800611a:	f005 fbf5 	bl	800b908 <lv_tick_get>
    disp_refr = task->user_data;
 800611e:	68eb      	ldr	r3, [r5, #12]
    uint32_t start = lv_tick_get();
 8006120:	9008      	str	r0, [sp, #32]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
 8006122:	0028      	movs	r0, r5
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8006124:	2500      	movs	r5, #0
    disp_refr = task->user_data;
 8006126:	4cca      	ldr	r4, [pc, #808]	; (8006450 <_lv_disp_refr_task+0x33c>)
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
 8006128:	2100      	movs	r1, #0
    disp_refr = task->user_data;
 800612a:	6023      	str	r3, [r4, #0]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
 800612c:	f006 fc10 	bl	800c950 <lv_task_set_prio>
    if(disp_refr->act_scr == NULL) {
 8006130:	6822      	ldr	r2, [r4, #0]
 8006132:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006134:	42ab      	cmp	r3, r5
 8006136:	d10e      	bne.n	8006156 <_lv_disp_refr_task+0x42>
        disp_refr->inv_p = 0;
 8006138:	21bb      	movs	r1, #187	; 0xbb
 800613a:	0049      	lsls	r1, r1, #1
 800613c:	5a53      	ldrh	r3, [r2, r1]
 800613e:	0a9b      	lsrs	r3, r3, #10
 8006140:	029b      	lsls	r3, r3, #10
 8006142:	5253      	strh	r3, [r2, r1]
}
 8006144:	b00d      	add	sp, #52	; 0x34
 8006146:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 8006148:	195b      	adds	r3, r3, r5
 800614a:	3357      	adds	r3, #87	; 0x57
 800614c:	33ff      	adds	r3, #255	; 0xff
 800614e:	781c      	ldrb	r4, [r3, #0]
 8006150:	2c00      	cmp	r4, #0
 8006152:	d073      	beq.n	800623c <_lv_disp_refr_task+0x128>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8006154:	3501      	adds	r5, #1
 8006156:	22bb      	movs	r2, #187	; 0xbb
 8006158:	4bbd      	ldr	r3, [pc, #756]	; (8006450 <_lv_disp_refr_task+0x33c>)
 800615a:	0052      	lsls	r2, r2, #1
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	5a9a      	ldrh	r2, [r3, r2]
 8006160:	0592      	lsls	r2, r2, #22
 8006162:	0d91      	lsrs	r1, r2, #22
 8006164:	428d      	cmp	r5, r1
 8006166:	d3ef      	bcc.n	8006148 <_lv_disp_refr_task+0x34>
    px_num = 0;
 8006168:	2400      	movs	r4, #0
 800616a:	48ba      	ldr	r0, [pc, #744]	; (8006454 <_lv_disp_refr_task+0x340>)
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 800616c:	3901      	subs	r1, #1
    px_num = 0;
 800616e:	6004      	str	r4, [r0, #0]
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 8006170:	9104      	str	r1, [sp, #16]
    if(disp_refr->inv_p == 0) return;
 8006172:	42a2      	cmp	r2, r4
 8006174:	d000      	beq.n	8006178 <_lv_disp_refr_task+0x64>
 8006176:	e0af      	b.n	80062d8 <_lv_disp_refr_task+0x1c4>
    if(disp_refr->inv_p != 0) {
 8006178:	23bb      	movs	r3, #187	; 0xbb
 800617a:	4cb5      	ldr	r4, [pc, #724]	; (8006450 <_lv_disp_refr_task+0x33c>)
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	6820      	ldr	r0, [r4, #0]
 8006180:	5ac3      	ldrh	r3, [r0, r3]
 8006182:	059b      	lsls	r3, r3, #22
 8006184:	d055      	beq.n	8006232 <_lv_disp_refr_task+0x11e>
        if(lv_disp_is_true_double_buf(disp_refr)) {
 8006186:	f005 fb24 	bl	800b7d2 <lv_disp_is_true_double_buf>
 800618a:	2800      	cmp	r0, #0
 800618c:	d032      	beq.n	80061f4 <_lv_disp_refr_task+0xe0>
            if(disp_refr->driver.set_px_cb) {
 800618e:	6820      	ldr	r0, [r4, #0]
 8006190:	6943      	ldr	r3, [r0, #20]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d12e      	bne.n	80061f4 <_lv_disp_refr_task+0xe0>
                lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8006196:	f005 fb11 	bl	800b7bc <lv_disp_get_buf>
 800619a:	0005      	movs	r5, r0
                lv_refr_vdb_flush();
 800619c:	f7ff fcac 	bl	8005af8 <lv_refr_vdb_flush>
                while(vdb->flushing);
 80061a0:	69ab      	ldr	r3, [r5, #24]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1fc      	bne.n	80061a0 <_lv_disp_refr_task+0x8c>
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
 80061a6:	6823      	ldr	r3, [r4, #0]
 80061a8:	2000      	movs	r0, #0
 80061aa:	5e18      	ldrsh	r0, [r3, r0]
 80061ac:	0040      	lsls	r0, r0, #1
 80061ae:	f006 f9b1 	bl	800c514 <_lv_mem_buf_get>
                uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 80061b2:	68ab      	ldr	r3, [r5, #8]
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
 80061b4:	0006      	movs	r6, r0
                uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 80061b6:	9303      	str	r3, [sp, #12]
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 80061b8:	9a03      	ldr	r2, [sp, #12]
 80061ba:	682b      	ldr	r3, [r5, #0]
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	4293      	cmp	r3, r2
 80061c0:	d101      	bne.n	80061c6 <_lv_disp_refr_task+0xb2>
 80061c2:	686b      	ldr	r3, [r5, #4]
 80061c4:	9300      	str	r3, [sp, #0]
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 80061c6:	6820      	ldr	r0, [r4, #0]
 80061c8:	f005 fa86 	bl	800b6d8 <lv_disp_get_hor_res>
                for(a = 0; a < disp_refr->inv_p; a++) {
 80061cc:	2700      	movs	r7, #0
                            start_offs += hres * sizeof(lv_color_t);
 80061ce:	0043      	lsls	r3, r0, #1
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 80061d0:	9005      	str	r0, [sp, #20]
                            start_offs += hres * sizeof(lv_color_t);
 80061d2:	9302      	str	r3, [sp, #8]
                for(a = 0; a < disp_refr->inv_p; a++) {
 80061d4:	4b9e      	ldr	r3, [pc, #632]	; (8006450 <_lv_disp_refr_task+0x33c>)
 80061d6:	6819      	ldr	r1, [r3, #0]
 80061d8:	23bb      	movs	r3, #187	; 0xbb
 80061da:	005b      	lsls	r3, r3, #1
 80061dc:	5aca      	ldrh	r2, [r1, r3]
 80061de:	b2bb      	uxth	r3, r7
 80061e0:	0592      	lsls	r2, r2, #22
 80061e2:	0d92      	lsrs	r2, r2, #22
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d900      	bls.n	80061ea <_lv_disp_refr_task+0xd6>
 80061e8:	e183      	b.n	80064f2 <_lv_disp_refr_task+0x3de>
                if(copy_buf) _lv_mem_buf_release(copy_buf);
 80061ea:	2e00      	cmp	r6, #0
 80061ec:	d002      	beq.n	80061f4 <_lv_disp_refr_task+0xe0>
 80061ee:	0030      	movs	r0, r6
 80061f0:	f006 f898 	bl	800c324 <_lv_mem_buf_release>
        _lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
 80061f4:	2180      	movs	r1, #128	; 0x80
 80061f6:	4c96      	ldr	r4, [pc, #600]	; (8006450 <_lv_disp_refr_task+0x33c>)
 80061f8:	0049      	lsls	r1, r1, #1
 80061fa:	6820      	ldr	r0, [r4, #0]
 80061fc:	3056      	adds	r0, #86	; 0x56
 80061fe:	f006 fa11 	bl	800c624 <_lv_memset_00>
        _lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
 8006202:	6820      	ldr	r0, [r4, #0]
 8006204:	2120      	movs	r1, #32
 8006206:	3057      	adds	r0, #87	; 0x57
 8006208:	30ff      	adds	r0, #255	; 0xff
 800620a:	f006 fa0b 	bl	800c624 <_lv_memset_00>
        disp_refr->inv_p = 0;
 800620e:	22bb      	movs	r2, #187	; 0xbb
 8006210:	6821      	ldr	r1, [r4, #0]
 8006212:	0052      	lsls	r2, r2, #1
 8006214:	5a8b      	ldrh	r3, [r1, r2]
        elaps = lv_tick_elaps(start);
 8006216:	9808      	ldr	r0, [sp, #32]
        disp_refr->inv_p = 0;
 8006218:	0a9b      	lsrs	r3, r3, #10
 800621a:	029b      	lsls	r3, r3, #10
 800621c:	528b      	strh	r3, [r1, r2]
        elaps = lv_tick_elaps(start);
 800621e:	f005 fb81 	bl	800b924 <lv_tick_elaps>
 8006222:	0001      	movs	r1, r0
        if(disp_refr->driver.monitor_cb) {
 8006224:	6820      	ldr	r0, [r4, #0]
 8006226:	6983      	ldr	r3, [r0, #24]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <_lv_disp_refr_task+0x11e>
            disp_refr->driver.monitor_cb(&disp_refr->driver, elaps, px_num);
 800622c:	4a89      	ldr	r2, [pc, #548]	; (8006454 <_lv_disp_refr_task+0x340>)
 800622e:	6812      	ldr	r2, [r2, #0]
 8006230:	4798      	blx	r3
    _lv_mem_buf_free_all();
 8006232:	f006 f897 	bl	800c364 <_lv_mem_buf_free_all>
    _lv_font_clean_up_fmt_txt();
 8006236:	f005 fa0d 	bl	800b654 <_lv_font_clean_up_fmt_txt>
 800623a:	e783      	b.n	8006144 <_lv_disp_refr_task+0x30>
 800623c:	00ef      	lsls	r7, r5, #3
 800623e:	3756      	adds	r7, #86	; 0x56
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 8006240:	23bb      	movs	r3, #187	; 0xbb
 8006242:	4e83      	ldr	r6, [pc, #524]	; (8006450 <_lv_disp_refr_task+0x33c>)
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	6830      	ldr	r0, [r6, #0]
 8006248:	5ac3      	ldrh	r3, [r0, r3]
 800624a:	059b      	lsls	r3, r3, #22
 800624c:	0d9b      	lsrs	r3, r3, #22
 800624e:	429c      	cmp	r4, r3
 8006250:	d300      	bcc.n	8006254 <_lv_disp_refr_task+0x140>
 8006252:	e77f      	b.n	8006154 <_lv_disp_refr_task+0x40>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 8006254:	1903      	adds	r3, r0, r4
 8006256:	3357      	adds	r3, #87	; 0x57
 8006258:	33ff      	adds	r3, #255	; 0xff
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d130      	bne.n	80062c2 <_lv_disp_refr_task+0x1ae>
 8006260:	42a5      	cmp	r5, r4
 8006262:	d02e      	beq.n	80062c2 <_lv_disp_refr_task+0x1ae>
 8006264:	00e3      	lsls	r3, r4, #3
 8006266:	3356      	adds	r3, #86	; 0x56
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 8006268:	18c1      	adds	r1, r0, r3
 800626a:	19c0      	adds	r0, r0, r7
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	f005 fc89 	bl	800bb84 <_lv_area_is_on>
 8006272:	2800      	cmp	r0, #0
 8006274:	d025      	beq.n	80062c2 <_lv_disp_refr_task+0x1ae>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 8006276:	9b00      	ldr	r3, [sp, #0]
 8006278:	6831      	ldr	r1, [r6, #0]
 800627a:	a80a      	add	r0, sp, #40	; 0x28
 800627c:	18ca      	adds	r2, r1, r3
 800627e:	19c9      	adds	r1, r1, r7
 8006280:	f005 fbc4 	bl	800ba0c <_lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 8006284:	a80a      	add	r0, sp, #40	; 0x28
 8006286:	f005 fb7e 	bl	800b986 <lv_area_get_size>
 800628a:	6833      	ldr	r3, [r6, #0]
 800628c:	9001      	str	r0, [sp, #4]
 800628e:	19d8      	adds	r0, r3, r7
 8006290:	f005 fb79 	bl	800b986 <lv_area_get_size>
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 8006294:	6832      	ldr	r2, [r6, #0]
 8006296:	9b00      	ldr	r3, [sp, #0]
 8006298:	4694      	mov	ip, r2
 800629a:	4463      	add	r3, ip
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800629c:	9002      	str	r0, [sp, #8]
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 800629e:	0018      	movs	r0, r3
 80062a0:	f005 fb71 	bl	800b986 <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 80062a4:	9b02      	ldr	r3, [sp, #8]
 80062a6:	9a01      	ldr	r2, [sp, #4]
 80062a8:	181b      	adds	r3, r3, r0
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d209      	bcs.n	80062c2 <_lv_disp_refr_task+0x1ae>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 80062ae:	6836      	ldr	r6, [r6, #0]
 80062b0:	a90a      	add	r1, sp, #40	; 0x28
 80062b2:	19f0      	adds	r0, r6, r7
 80062b4:	f7ff fc18 	bl	8005ae8 <lv_area_copy>
                disp_refr->inv_area_joined[join_from] = 1;
 80062b8:	2301      	movs	r3, #1
 80062ba:	1936      	adds	r6, r6, r4
 80062bc:	3657      	adds	r6, #87	; 0x57
 80062be:	36ff      	adds	r6, #255	; 0xff
 80062c0:	7033      	strb	r3, [r6, #0]
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 80062c2:	3401      	adds	r4, #1
 80062c4:	e7bc      	b.n	8006240 <_lv_disp_refr_task+0x12c>
        if(disp_refr->inv_area_joined[i] == 0) {
 80062c6:	9a04      	ldr	r2, [sp, #16]
 80062c8:	3257      	adds	r2, #87	; 0x57
 80062ca:	32ff      	adds	r2, #255	; 0xff
 80062cc:	5c9a      	ldrb	r2, [r3, r2]
 80062ce:	2a00      	cmp	r2, #0
 80062d0:	d007      	beq.n	80062e2 <_lv_disp_refr_task+0x1ce>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 80062d2:	9a04      	ldr	r2, [sp, #16]
 80062d4:	3a01      	subs	r2, #1
 80062d6:	9204      	str	r2, [sp, #16]
 80062d8:	9a04      	ldr	r2, [sp, #16]
 80062da:	3201      	adds	r2, #1
 80062dc:	d1f3      	bne.n	80062c6 <_lv_disp_refr_task+0x1b2>
    int32_t last_i = 0;
 80062de:	2200      	movs	r2, #0
 80062e0:	9204      	str	r2, [sp, #16]
    disp_refr->driver.buffer->last_area = 0;
 80062e2:	2101      	movs	r1, #1
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	3301      	adds	r3, #1
 80062e8:	7fda      	ldrb	r2, [r3, #31]
 80062ea:	438a      	bics	r2, r1
 80062ec:	77da      	strb	r2, [r3, #31]
    disp_refr->driver.buffer->last_part = 0;
 80062ee:	7fda      	ldrb	r2, [r3, #31]
 80062f0:	1849      	adds	r1, r1, r1
 80062f2:	438a      	bics	r2, r1
 80062f4:	77da      	strb	r2, [r3, #31]
    for(i = 0; i < disp_refr->inv_p; i++) {
 80062f6:	2300      	movs	r3, #0
            disp_refr->driver.buffer->last_part = 0;
 80062f8:	9105      	str	r1, [sp, #20]
    for(i = 0; i < disp_refr->inv_p; i++) {
 80062fa:	9301      	str	r3, [sp, #4]
 80062fc:	4b54      	ldr	r3, [pc, #336]	; (8006450 <_lv_disp_refr_task+0x33c>)
 80062fe:	9a01      	ldr	r2, [sp, #4]
 8006300:	681c      	ldr	r4, [r3, #0]
 8006302:	23bb      	movs	r3, #187	; 0xbb
 8006304:	005b      	lsls	r3, r3, #1
 8006306:	5ae3      	ldrh	r3, [r4, r3]
 8006308:	059b      	lsls	r3, r3, #22
 800630a:	0d9b      	lsrs	r3, r3, #22
 800630c:	429a      	cmp	r2, r3
 800630e:	db00      	blt.n	8006312 <_lv_disp_refr_task+0x1fe>
 8006310:	e732      	b.n	8006178 <_lv_disp_refr_task+0x64>
        if(disp_refr->inv_area_joined[i] == 0) {
 8006312:	9b01      	ldr	r3, [sp, #4]
 8006314:	18e3      	adds	r3, r4, r3
 8006316:	3357      	adds	r3, #87	; 0x57
 8006318:	33ff      	adds	r3, #255	; 0xff
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d000      	beq.n	8006322 <_lv_disp_refr_task+0x20e>
 8006320:	e08b      	b.n	800643a <_lv_disp_refr_task+0x326>
 8006322:	6863      	ldr	r3, [r4, #4]
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
 8006324:	9904      	ldr	r1, [sp, #16]
 8006326:	1c5a      	adds	r2, r3, #1
 8006328:	9b01      	ldr	r3, [sp, #4]
 800632a:	428b      	cmp	r3, r1
 800632c:	d103      	bne.n	8006336 <_lv_disp_refr_task+0x222>
 800632e:	2301      	movs	r3, #1
 8006330:	7fd1      	ldrb	r1, [r2, #31]
 8006332:	430b      	orrs	r3, r1
 8006334:	77d3      	strb	r3, [r2, #31]
            disp_refr->driver.buffer->last_part = 0;
 8006336:	7fd3      	ldrb	r3, [r2, #31]
 8006338:	9905      	ldr	r1, [sp, #20]
    if(lv_disp_is_true_double_buf(disp_refr)) {
 800633a:	0020      	movs	r0, r4
            disp_refr->driver.buffer->last_part = 0;
 800633c:	438b      	bics	r3, r1
 800633e:	77d3      	strb	r3, [r2, #31]
 8006340:	9b01      	ldr	r3, [sp, #4]
 8006342:	00db      	lsls	r3, r3, #3
 8006344:	9306      	str	r3, [sp, #24]
 8006346:	3356      	adds	r3, #86	; 0x56
 8006348:	9307      	str	r3, [sp, #28]
            lv_refr_area(&disp_refr->inv_areas[i]);
 800634a:	18e3      	adds	r3, r4, r3
 800634c:	9302      	str	r3, [sp, #8]
    if(lv_disp_is_true_double_buf(disp_refr)) {
 800634e:	f005 fa40 	bl	800b7d2 <lv_disp_is_true_double_buf>
 8006352:	4d3f      	ldr	r5, [pc, #252]	; (8006450 <_lv_disp_refr_task+0x33c>)
 8006354:	2800      	cmp	r0, #0
 8006356:	d01b      	beq.n	8006390 <_lv_disp_refr_task+0x27c>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8006358:	6828      	ldr	r0, [r5, #0]
 800635a:	f005 fa2f 	bl	800b7bc <lv_disp_get_buf>
        vdb->area.x1        = 0;
 800635e:	2600      	movs	r6, #0
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8006360:	0004      	movs	r4, r0
        vdb->area.x1        = 0;
 8006362:	8206      	strh	r6, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 8006364:	6828      	ldr	r0, [r5, #0]
 8006366:	f005 f9b7 	bl	800b6d8 <lv_disp_get_hor_res>
 800636a:	3801      	subs	r0, #1
 800636c:	82a0      	strh	r0, [r4, #20]
        vdb->area.y1        = 0;
 800636e:	8266      	strh	r6, [r4, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 8006370:	6828      	ldr	r0, [r5, #0]
 8006372:	f005 f9c7 	bl	800b704 <lv_disp_get_ver_res>
        disp_refr->driver.buffer->last_part = 1;
 8006376:	682b      	ldr	r3, [r5, #0]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 8006378:	3801      	subs	r0, #1
 800637a:	82e0      	strh	r0, [r4, #22]
            disp_refr->driver.buffer->last_part = 1;
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	9905      	ldr	r1, [sp, #20]
 8006380:	3301      	adds	r3, #1
 8006382:	7fda      	ldrb	r2, [r3, #31]
            lv_refr_area_part(area_p);
 8006384:	9802      	ldr	r0, [sp, #8]
            disp_refr->driver.buffer->last_part = 1;
 8006386:	430a      	orrs	r2, r1
 8006388:	77da      	strb	r2, [r3, #31]
            lv_refr_area_part(area_p);
 800638a:	f7ff fdbf 	bl	8005f0c <lv_refr_area_part>
 800638e:	e04a      	b.n	8006426 <_lv_disp_refr_task+0x312>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8006390:	6828      	ldr	r0, [r5, #0]
 8006392:	f005 fa13 	bl	800b7bc <lv_disp_get_buf>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8006396:	9b02      	ldr	r3, [sp, #8]
 8006398:	9a02      	ldr	r2, [sp, #8]
 800639a:	889b      	ldrh	r3, [r3, #4]
 800639c:	8812      	ldrh	r2, [r2, #0]
 800639e:	3301      	adds	r3, #1
 80063a0:	1a9b      	subs	r3, r3, r2
 80063a2:	b21b      	sxth	r3, r3
 80063a4:	9300      	str	r3, [sp, #0]
        lv_coord_t h = lv_area_get_height(area_p);
 80063a6:	9b02      	ldr	r3, [sp, #8]
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 80063a8:	0007      	movs	r7, r0
        lv_coord_t h = lv_area_get_height(area_p);
 80063aa:	2606      	movs	r6, #6
 80063ac:	5f9e      	ldrsh	r6, [r3, r6]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80063ae:	9b02      	ldr	r3, [sp, #8]
 80063b0:	1c72      	adds	r2, r6, #1
 80063b2:	885b      	ldrh	r3, [r3, #2]
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 80063b4:	6828      	ldr	r0, [r5, #0]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	b21b      	sxth	r3, r3
 80063ba:	9309      	str	r3, [sp, #36]	; 0x24
 80063bc:	f005 f9a2 	bl	800b704 <lv_disp_get_ver_res>
        lv_coord_t y2 =
 80063c0:	4286      	cmp	r6, r0
 80063c2:	db3e      	blt.n	8006442 <_lv_disp_refr_task+0x32e>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 80063c4:	6828      	ldr	r0, [r5, #0]
 80063c6:	f005 f99d 	bl	800b704 <lv_disp_get_ver_res>
 80063ca:	3801      	subs	r0, #1
        lv_coord_t y2 =
 80063cc:	b203      	sxth	r3, r0
        int32_t max_row = (uint32_t)vdb->size / w;
 80063ce:	9900      	ldr	r1, [sp, #0]
 80063d0:	68f8      	ldr	r0, [r7, #12]
        lv_coord_t y2 =
 80063d2:	9303      	str	r3, [sp, #12]
        int32_t max_row = (uint32_t)vdb->size / w;
 80063d4:	f7f9 fece 	bl	8000174 <__udivsi3>
 80063d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063da:	9300      	str	r3, [sp, #0]
 80063dc:	4283      	cmp	r3, r0
 80063de:	dd00      	ble.n	80063e2 <_lv_disp_refr_task+0x2ce>
 80063e0:	9000      	str	r0, [sp, #0]
        if(disp_refr->driver.rounder_cb) {
 80063e2:	4b1b      	ldr	r3, [pc, #108]	; (8006450 <_lv_disp_refr_task+0x33c>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d038      	beq.n	800645e <_lv_disp_refr_task+0x34a>
            tmp.x1 = 0;
 80063ec:	2300      	movs	r3, #0
            tmp.y1 = 0;
 80063ee:	aa0a      	add	r2, sp, #40	; 0x28
            tmp.x1 = 0;
 80063f0:	930a      	str	r3, [sp, #40]	; 0x28
            tmp.y1 = 0;
 80063f2:	8093      	strh	r3, [r2, #4]
            lv_coord_t h_tmp = max_row;
 80063f4:	466b      	mov	r3, sp
 80063f6:	2500      	movs	r5, #0
 80063f8:	5f5d      	ldrsh	r5, [r3, r5]
 80063fa:	1e6e      	subs	r6, r5, #1
                tmp.y2 = h_tmp - 1;
 80063fc:	ab0a      	add	r3, sp, #40	; 0x28
 80063fe:	b236      	sxth	r6, r6
 8006400:	80de      	strh	r6, [r3, #6]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 8006402:	4b13      	ldr	r3, [pc, #76]	; (8006450 <_lv_disp_refr_task+0x33c>)
 8006404:	a90a      	add	r1, sp, #40	; 0x28
 8006406:	6818      	ldr	r0, [r3, #0]
 8006408:	6903      	ldr	r3, [r0, #16]
 800640a:	4798      	blx	r3
                if(lv_area_get_height(&tmp) <= max_row) break;
 800640c:	ab0a      	add	r3, sp, #40	; 0x28
 800640e:	2206      	movs	r2, #6
 8006410:	5e9a      	ldrsh	r2, [r3, r2]
 8006412:	ab0a      	add	r3, sp, #40	; 0x28
 8006414:	885b      	ldrh	r3, [r3, #2]
 8006416:	3201      	adds	r2, #1
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	9900      	ldr	r1, [sp, #0]
 800641c:	b21b      	sxth	r3, r3
 800641e:	4299      	cmp	r1, r3
 8006420:	da1a      	bge.n	8006458 <_lv_disp_refr_task+0x344>
 8006422:	1e35      	subs	r5, r6, #0
            } while(h_tmp > 0);
 8006424:	dce9      	bgt.n	80063fa <_lv_disp_refr_task+0x2e6>
            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 8006426:	4b0a      	ldr	r3, [pc, #40]	; (8006450 <_lv_disp_refr_task+0x33c>)
 8006428:	6818      	ldr	r0, [r3, #0]
 800642a:	9b07      	ldr	r3, [sp, #28]
 800642c:	18c0      	adds	r0, r0, r3
 800642e:	f005 faaa 	bl	800b986 <lv_area_get_size>
 8006432:	4b08      	ldr	r3, [pc, #32]	; (8006454 <_lv_disp_refr_task+0x340>)
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	1810      	adds	r0, r2, r0
 8006438:	6018      	str	r0, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800643a:	9b01      	ldr	r3, [sp, #4]
 800643c:	3301      	adds	r3, #1
 800643e:	9301      	str	r3, [sp, #4]
 8006440:	e75c      	b.n	80062fc <_lv_disp_refr_task+0x1e8>
        lv_coord_t y2 =
 8006442:	9b01      	ldr	r3, [sp, #4]
 8006444:	330a      	adds	r3, #10
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	18e3      	adds	r3, r4, r3
 800644a:	220c      	movs	r2, #12
 800644c:	5e9b      	ldrsh	r3, [r3, r2]
 800644e:	e7be      	b.n	80063ce <_lv_disp_refr_task+0x2ba>
 8006450:	20005d38 	.word	0x20005d38
 8006454:	20005d3c 	.word	0x20005d3c
            if(h_tmp <= 0) {
 8006458:	2d00      	cmp	r5, #0
 800645a:	dde4      	ble.n	8006426 <_lv_disp_refr_task+0x312>
                max_row = tmp.y2 + 1;
 800645c:	9200      	str	r2, [sp, #0]
 800645e:	9b06      	ldr	r3, [sp, #24]
        lv_coord_t row_last = 0;
 8006460:	2600      	movs	r6, #0
 8006462:	18e4      	adds	r4, r4, r3
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8006464:	0023      	movs	r3, r4
 8006466:	3358      	adds	r3, #88	; 0x58
 8006468:	2500      	movs	r5, #0
 800646a:	5f5d      	ldrsh	r5, [r3, r5]
 800646c:	9b00      	ldr	r3, [sp, #0]
 800646e:	9a03      	ldr	r2, [sp, #12]
 8006470:	18eb      	adds	r3, r5, r3
 8006472:	3b01      	subs	r3, #1
 8006474:	4293      	cmp	r3, r2
 8006476:	dd10      	ble.n	800649a <_lv_disp_refr_task+0x386>
        if(y2 != row_last) {
 8006478:	42b2      	cmp	r2, r6
 800647a:	d0d4      	beq.n	8006426 <_lv_disp_refr_task+0x312>
            vdb->area.x1 = area_p->x1;
 800647c:	0022      	movs	r2, r4
 800647e:	3256      	adds	r2, #86	; 0x56
 8006480:	2100      	movs	r1, #0
 8006482:	5e52      	ldrsh	r2, [r2, r1]
            vdb->area.x2 = area_p->x2;
 8006484:	345a      	adds	r4, #90	; 0x5a
            vdb->area.x1 = area_p->x1;
 8006486:	823a      	strh	r2, [r7, #16]
            vdb->area.x2 = area_p->x2;
 8006488:	2100      	movs	r1, #0
 800648a:	5e62      	ldrsh	r2, [r4, r1]
 800648c:	4b39      	ldr	r3, [pc, #228]	; (8006574 <_lv_disp_refr_task+0x460>)
 800648e:	82ba      	strh	r2, [r7, #20]
            vdb->area.y2 = y2;
 8006490:	9a03      	ldr	r2, [sp, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
            vdb->area.y1 = row;
 8006494:	827d      	strh	r5, [r7, #18]
            vdb->area.y2 = y2;
 8006496:	82fa      	strh	r2, [r7, #22]
 8006498:	e770      	b.n	800637c <_lv_disp_refr_task+0x268>
            vdb->area.x1 = area_p->x1;
 800649a:	0023      	movs	r3, r4
 800649c:	3356      	adds	r3, #86	; 0x56
 800649e:	2200      	movs	r2, #0
 80064a0:	5e9b      	ldrsh	r3, [r3, r2]
 80064a2:	823b      	strh	r3, [r7, #16]
            vdb->area.x2 = area_p->x2;
 80064a4:	0023      	movs	r3, r4
 80064a6:	335a      	adds	r3, #90	; 0x5a
 80064a8:	2200      	movs	r2, #0
 80064aa:	5e9b      	ldrsh	r3, [r3, r2]
            vdb->area.y1 = row;
 80064ac:	827d      	strh	r5, [r7, #18]
            vdb->area.x2 = area_p->x2;
 80064ae:	82bb      	strh	r3, [r7, #20]
            vdb->area.y2 = row + max_row - 1;
 80064b0:	466b      	mov	r3, sp
 80064b2:	881b      	ldrh	r3, [r3, #0]
 80064b4:	b2ad      	uxth	r5, r5
 80064b6:	9306      	str	r3, [sp, #24]
 80064b8:	3b01      	subs	r3, #1
 80064ba:	18eb      	adds	r3, r5, r3
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
 80064bc:	9a03      	ldr	r2, [sp, #12]
 80064be:	b21b      	sxth	r3, r3
 80064c0:	429a      	cmp	r2, r3
 80064c2:	db14      	blt.n	80064ee <_lv_disp_refr_task+0x3da>
 80064c4:	82fb      	strh	r3, [r7, #22]
            row_last = vdb->area.y2;
 80064c6:	2316      	movs	r3, #22
 80064c8:	5efe      	ldrsh	r6, [r7, r3]
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
 80064ca:	9b03      	ldr	r3, [sp, #12]
 80064cc:	42b3      	cmp	r3, r6
 80064ce:	d107      	bne.n	80064e0 <_lv_disp_refr_task+0x3cc>
 80064d0:	4b28      	ldr	r3, [pc, #160]	; (8006574 <_lv_disp_refr_task+0x460>)
 80064d2:	9905      	ldr	r1, [sp, #20]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	3301      	adds	r3, #1
 80064da:	7fda      	ldrb	r2, [r3, #31]
 80064dc:	430a      	orrs	r2, r1
 80064de:	77da      	strb	r2, [r3, #31]
            lv_refr_area_part(area_p);
 80064e0:	9802      	ldr	r0, [sp, #8]
 80064e2:	f7ff fd13 	bl	8005f0c <lv_refr_area_part>
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 80064e6:	9b06      	ldr	r3, [sp, #24]
 80064e8:	195d      	adds	r5, r3, r5
 80064ea:	b22d      	sxth	r5, r5
 80064ec:	e7be      	b.n	800646c <_lv_disp_refr_task+0x358>
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
 80064ee:	9b03      	ldr	r3, [sp, #12]
 80064f0:	e7e8      	b.n	80064c4 <_lv_disp_refr_task+0x3b0>
                    if(disp_refr->inv_area_joined[a] == 0) {
 80064f2:	19cb      	adds	r3, r1, r7
 80064f4:	3357      	adds	r3, #87	; 0x57
 80064f6:	33ff      	adds	r3, #255	; 0xff
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <_lv_disp_refr_task+0x3ee>
 80064fe:	3701      	adds	r7, #1
 8006500:	e668      	b.n	80061d4 <_lv_disp_refr_task+0xc0>
 8006502:	00fb      	lsls	r3, r7, #3
 8006504:	18cb      	adds	r3, r1, r3
                            (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
 8006506:	001a      	movs	r2, r3
 8006508:	3356      	adds	r3, #86	; 0x56
 800650a:	3258      	adds	r2, #88	; 0x58
 800650c:	2500      	movs	r5, #0
 800650e:	5f55      	ldrsh	r5, [r2, r5]
 8006510:	2100      	movs	r1, #0
 8006512:	5e5a      	ldrsh	r2, [r3, r1]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8006514:	2101      	movs	r1, #1
 8006516:	9c05      	ldr	r4, [sp, #20]
 8006518:	889b      	ldrh	r3, [r3, #4]
 800651a:	436c      	muls	r4, r5
 800651c:	18a4      	adds	r4, r4, r2
 800651e:	1a8a      	subs	r2, r1, r2
 8006520:	189b      	adds	r3, r3, r2
                        uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
 8006522:	b21b      	sxth	r3, r3
 8006524:	408b      	lsls	r3, r1
 8006526:	9304      	str	r3, [sp, #16]
 8006528:	9b00      	ldr	r3, [sp, #0]
                        uint32_t start_offs =
 800652a:	0064      	lsls	r4, r4, #1
 800652c:	191b      	adds	r3, r3, r4
 800652e:	9301      	str	r3, [sp, #4]
 8006530:	9b03      	ldr	r3, [sp, #12]
 8006532:	191c      	adds	r4, r3, r4
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 8006534:	003b      	movs	r3, r7
 8006536:	330a      	adds	r3, #10
 8006538:	00db      	lsls	r3, r3, #3
 800653a:	9306      	str	r3, [sp, #24]
 800653c:	4b0d      	ldr	r3, [pc, #52]	; (8006574 <_lv_disp_refr_task+0x460>)
 800653e:	9a06      	ldr	r2, [sp, #24]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	189b      	adds	r3, r3, r2
 8006544:	220c      	movs	r2, #12
 8006546:	5e9b      	ldrsh	r3, [r3, r2]
 8006548:	42ab      	cmp	r3, r5
 800654a:	dbd8      	blt.n	80064fe <_lv_disp_refr_task+0x3ea>
                            _lv_memcpy(copy_buf, buf_ina + start_offs, line_length);
 800654c:	9a04      	ldr	r2, [sp, #16]
 800654e:	9901      	ldr	r1, [sp, #4]
 8006550:	0030      	movs	r0, r6
 8006552:	f005 ff27 	bl	800c3a4 <_lv_memcpy>
                            _lv_memcpy(buf_act + start_offs, copy_buf, line_length);
 8006556:	9a04      	ldr	r2, [sp, #16]
 8006558:	0020      	movs	r0, r4
 800655a:	0031      	movs	r1, r6
 800655c:	f005 ff22 	bl	800c3a4 <_lv_memcpy>
 8006560:	9a02      	ldr	r2, [sp, #8]
 8006562:	9b01      	ldr	r3, [sp, #4]
 8006564:	4694      	mov	ip, r2
 8006566:	3501      	adds	r5, #1
 8006568:	4463      	add	r3, ip
 800656a:	b22d      	sxth	r5, r5
 800656c:	9301      	str	r3, [sp, #4]
 800656e:	18a4      	adds	r4, r4, r2
 8006570:	e7e4      	b.n	800653c <_lv_disp_refr_task+0x428>
 8006572:	46c0      	nop			; (mov r8, r8)
 8006574:	20005d38 	.word	0x20005d38

08006578 <_lv_memcpy_small>:
{
 8006578:	2300      	movs	r3, #0
 800657a:	b510      	push	{r4, lr}
        *d8 = *s8;
 800657c:	5ccc      	ldrb	r4, [r1, r3]
 800657e:	54c4      	strb	r4, [r0, r3]
 8006580:	3301      	adds	r3, #1
    while(len) {
 8006582:	4293      	cmp	r3, r2
 8006584:	d1fa      	bne.n	800657c <_lv_memcpy_small+0x4>
        s8++;
        len--;
    }

    return dst;
}
 8006586:	bd10      	pop	{r4, pc}

08006588 <lv_style_list_get_style>:
    if(list->has_trans && list->skip_trans) id++;
 8006588:	22c0      	movs	r2, #192	; 0xc0
 800658a:	8883      	ldrh	r3, [r0, #4]
 800658c:	0052      	lsls	r2, r2, #1
{
 800658e:	b510      	push	{r4, lr}
    if(list->has_trans && list->skip_trans) id++;
 8006590:	4013      	ands	r3, r2
{
 8006592:	0004      	movs	r4, r0
    if(list->has_trans && list->skip_trans) id++;
 8006594:	4293      	cmp	r3, r2
 8006596:	d101      	bne.n	800659c <lv_style_list_get_style+0x14>
 8006598:	3101      	adds	r1, #1
 800659a:	b2c9      	uxtb	r1, r1
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
 800659c:	223f      	movs	r2, #63	; 0x3f
 800659e:	7923      	ldrb	r3, [r4, #4]
 80065a0:	401a      	ands	r2, r3
 80065a2:	1e10      	subs	r0, r2, #0
 80065a4:	d007      	beq.n	80065b6 <lv_style_list_get_style+0x2e>
 80065a6:	069b      	lsls	r3, r3, #26
 80065a8:	0e9b      	lsrs	r3, r3, #26
 80065aa:	2000      	movs	r0, #0
 80065ac:	428b      	cmp	r3, r1
 80065ae:	d902      	bls.n	80065b6 <lv_style_list_get_style+0x2e>
    return list->style_list[id];
 80065b0:	6823      	ldr	r3, [r4, #0]
 80065b2:	0089      	lsls	r1, r1, #2
 80065b4:	58c8      	ldr	r0, [r1, r3]
}
 80065b6:	bd10      	pop	{r4, pc}

080065b8 <get_style_prop_attr>:
 * @param style pointer to style.
 * @param idx index of the style in style->map
 * @return attribute of property in style->map + idx
 */
static inline uint8_t get_style_prop_attr(const lv_style_t * style, size_t idx)
{
 80065b8:	b513      	push	{r0, r1, r4, lr}
    _lv_memcpy_small(&prop, &style->map[idx], sizeof(lv_style_property_t));
 80065ba:	6803      	ldr	r3, [r0, #0]
 80065bc:	2202      	movs	r2, #2
 80065be:	1859      	adds	r1, r3, r1
 80065c0:	466b      	mov	r3, sp
 80065c2:	1d9c      	adds	r4, r3, #6
 80065c4:	0020      	movs	r0, r4
 80065c6:	f7ff ffd7 	bl	8006578 <_lv_memcpy_small>
    return prop;
 80065ca:	8820      	ldrh	r0, [r4, #0]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
 80065cc:	0a00      	lsrs	r0, r0, #8
}
 80065ce:	bd16      	pop	{r1, r2, r4, pc}

080065d0 <get_prop_size>:
 * @param prop_id property id.
 * @return size of property
 */
static inline size_t get_prop_size(uint8_t prop_id)
{
    prop_id &= 0xF;
 80065d0:	230f      	movs	r3, #15
 80065d2:	4003      	ands	r3, r0
    size_t size = sizeof(lv_style_property_t);
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
 80065d4:	2004      	movs	r0, #4
 80065d6:	2b0b      	cmp	r3, #11
 80065d8:	d903      	bls.n	80065e2 <get_prop_size+0x12>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
 80065da:	3801      	subs	r0, #1
 80065dc:	2b0d      	cmp	r3, #13
 80065de:	d900      	bls.n	80065e2 <get_prop_size+0x12>
    else size += sizeof(const void *);
 80065e0:	3003      	adds	r0, #3
    return size;
}
 80065e2:	4770      	bx	lr

080065e4 <style_resize>:
{
 80065e4:	b570      	push	{r4, r5, r6, lr}
 80065e6:	0004      	movs	r4, r0
    uint8_t * new_map = lv_mem_realloc(style->map, sz);
 80065e8:	6800      	ldr	r0, [r0, #0]
{
 80065ea:	000d      	movs	r5, r1
    uint8_t * new_map = lv_mem_realloc(style->map, sz);
 80065ec:	f005 ff60 	bl	800c4b0 <lv_mem_realloc>
 80065f0:	0003      	movs	r3, r0
    if(sz && new_map == NULL) return false;
 80065f2:	2d00      	cmp	r5, #0
 80065f4:	d001      	beq.n	80065fa <style_resize+0x16>
 80065f6:	2800      	cmp	r0, #0
 80065f8:	d001      	beq.n	80065fe <style_resize+0x1a>
    return true;
 80065fa:	2001      	movs	r0, #1
    style->map = new_map;
 80065fc:	6023      	str	r3, [r4, #0]
}
 80065fe:	bd70      	pop	{r4, r5, r6, pc}

08006600 <get_property_index>:
{
 8006600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006602:	0005      	movs	r5, r0
 8006604:	b087      	sub	sp, #28
    if(style == NULL) return -1;
 8006606:	2800      	cmp	r0, #0
 8006608:	d039      	beq.n	800667e <get_property_index+0x7e>
    if(style->map == NULL) return -1;
 800660a:	6803      	ldr	r3, [r0, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d036      	beq.n	800667e <get_property_index+0x7e>
    uint8_t id_to_find = prop & 0xFF;
 8006610:	b2cb      	uxtb	r3, r1
 8006612:	9303      	str	r3, [sp, #12]
    attr = (prop >> 8) & 0xFF;
 8006614:	0a0b      	lsrs	r3, r1, #8
 8006616:	9302      	str	r3, [sp, #8]
    int16_t id_guess = -1;
 8006618:	2301      	movs	r3, #1
    size_t i = 0;
 800661a:	2400      	movs	r4, #0
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 800661c:	277f      	movs	r7, #127	; 0x7f
    int16_t id_guess = -1;
 800661e:	425b      	negs	r3, r3
 8006620:	9301      	str	r3, [sp, #4]
    int16_t weight = -1;
 8006622:	9300      	str	r3, [sp, #0]
    _lv_memcpy_small(&prop, &style->map[idx], sizeof(lv_style_property_t));
 8006624:	682b      	ldr	r3, [r5, #0]
 8006626:	2202      	movs	r2, #2
 8006628:	1919      	adds	r1, r3, r4
 800662a:	ab04      	add	r3, sp, #16
 800662c:	1d9e      	adds	r6, r3, #6
 800662e:	0030      	movs	r0, r6
 8006630:	f7ff ffa2 	bl	8006578 <_lv_memcpy_small>
    return get_style_prop(style, idx) & 0xFF;
 8006634:	7836      	ldrb	r6, [r6, #0]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 8006636:	2eff      	cmp	r6, #255	; 0xff
 8006638:	d101      	bne.n	800663e <get_property_index+0x3e>
    return id_guess;
 800663a:	9801      	ldr	r0, [sp, #4]
 800663c:	e00b      	b.n	8006656 <get_property_index+0x56>
        if(prop_id == id_to_find) {
 800663e:	9b03      	ldr	r3, [sp, #12]
 8006640:	42b3      	cmp	r3, r6
 8006642:	d117      	bne.n	8006674 <get_property_index+0x74>
            attr_i = get_style_prop_attr(style, i);
 8006644:	0021      	movs	r1, r4
 8006646:	0028      	movs	r0, r5
 8006648:	f7ff ffb6 	bl	80065b8 <get_style_prop_attr>
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 800664c:	9b02      	ldr	r3, [sp, #8]
 800664e:	4043      	eors	r3, r0
 8006650:	423b      	tst	r3, r7
 8006652:	d102      	bne.n	800665a <get_property_index+0x5a>
                return i;
 8006654:	0020      	movs	r0, r4
}
 8006656:	b007      	add	sp, #28
 8006658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800665a:	4038      	ands	r0, r7
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 800665c:	0002      	movs	r2, r0
 800665e:	9b02      	ldr	r3, [sp, #8]
 8006660:	403b      	ands	r3, r7
 8006662:	439a      	bics	r2, r3
 8006664:	d106      	bne.n	8006674 <get_property_index+0x74>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
 8006666:	9b00      	ldr	r3, [sp, #0]
 8006668:	4298      	cmp	r0, r3
 800666a:	dd03      	ble.n	8006674 <get_property_index+0x74>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
 800666c:	b203      	sxth	r3, r0
 800666e:	9300      	str	r3, [sp, #0]
                    id_guess = i;
 8006670:	b223      	sxth	r3, r4
 8006672:	9301      	str	r3, [sp, #4]
 * @param idx index of the style in style->map
 * @return index of next property in style->map
 */
static inline size_t get_next_prop_index(uint8_t prop_id, size_t idx)
{
    return idx + get_prop_size(prop_id);
 8006674:	0030      	movs	r0, r6
 8006676:	f7ff ffab 	bl	80065d0 <get_prop_size>
 800667a:	1824      	adds	r4, r4, r0
 800667c:	e7d2      	b.n	8006624 <get_property_index+0x24>
    if(style == NULL) return -1;
 800667e:	2001      	movs	r0, #1
 8006680:	4240      	negs	r0, r0
 8006682:	e7e8      	b.n	8006656 <get_property_index+0x56>

08006684 <lv_style_init>:
{
 8006684:	b510      	push	{r4, lr}
    _lv_memset_00(style, sizeof(lv_style_t));
 8006686:	2104      	movs	r1, #4
 8006688:	f005 ffcc 	bl	800c624 <_lv_memset_00>
}
 800668c:	bd10      	pop	{r4, pc}

0800668e <lv_style_list_init>:
{
 800668e:	b510      	push	{r4, lr}
    _lv_memset_00(list, sizeof(lv_style_list_t));
 8006690:	2108      	movs	r1, #8
 8006692:	f005 ffc7 	bl	800c624 <_lv_memset_00>
}
 8006696:	bd10      	pop	{r4, pc}

08006698 <_lv_style_list_remove_style>:
{
 8006698:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(list->style_cnt == 0) return;
 800669a:	223f      	movs	r2, #63	; 0x3f
 800669c:	7903      	ldrb	r3, [r0, #4]
{
 800669e:	0004      	movs	r4, r0
    if(list->style_cnt == 0) return;
 80066a0:	401a      	ands	r2, r3
 80066a2:	d005      	beq.n	80066b0 <_lv_style_list_remove_style+0x18>
    for(i = 0; i < list->style_cnt; i++) {
 80066a4:	2600      	movs	r6, #0
 80066a6:	069b      	lsls	r3, r3, #26
 80066a8:	0e9b      	lsrs	r3, r3, #26
 80066aa:	b2f0      	uxtb	r0, r6
 80066ac:	4283      	cmp	r3, r0
 80066ae:	d800      	bhi.n	80066b2 <_lv_style_list_remove_style+0x1a>
}
 80066b0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        if(list->style_list[i] == style) {
 80066b2:	6820      	ldr	r0, [r4, #0]
 80066b4:	00b5      	lsls	r5, r6, #2
 80066b6:	582d      	ldr	r5, [r5, r0]
 80066b8:	3601      	adds	r6, #1
 80066ba:	428d      	cmp	r5, r1
 80066bc:	d1f5      	bne.n	80066aa <_lv_style_list_remove_style+0x12>
    if(list->style_cnt == 1) {
 80066be:	2a01      	cmp	r2, #1
 80066c0:	d108      	bne.n	80066d4 <_lv_style_list_remove_style+0x3c>
        lv_mem_free(list->style_list);
 80066c2:	f005 fdf5 	bl	800c2b0 <lv_mem_free>
        list->style_list = NULL;
 80066c6:	2300      	movs	r3, #0
        list->has_local = 0;
 80066c8:	2280      	movs	r2, #128	; 0x80
        list->style_list = NULL;
 80066ca:	6023      	str	r3, [r4, #0]
        list->style_cnt = 0;
 80066cc:	7923      	ldrb	r3, [r4, #4]
        list->has_local = 0;
 80066ce:	4013      	ands	r3, r2
 80066d0:	7123      	strb	r3, [r4, #4]
        return;
 80066d2:	e7ed      	b.n	80066b0 <_lv_style_list_remove_style+0x18>
    lv_style_t ** new_styles = lv_mem_alloc(sizeof(lv_style_t *) * (list->style_cnt - 1));
 80066d4:	1e58      	subs	r0, r3, #1
 80066d6:	0080      	lsls	r0, r0, #2
 80066d8:	f005 fd96 	bl	800c208 <lv_mem_alloc>
 80066dc:	1e06      	subs	r6, r0, #0
    if(new_styles == NULL) {
 80066de:	d0e7      	beq.n	80066b0 <_lv_style_list_remove_style+0x18>
    for(i = 0, j = 0; i < list->style_cnt; i++) {
 80066e0:	2200      	movs	r2, #0
 80066e2:	0011      	movs	r1, r2
 80066e4:	7923      	ldrb	r3, [r4, #4]
 80066e6:	6820      	ldr	r0, [r4, #0]
 80066e8:	069b      	lsls	r3, r3, #26
 80066ea:	0e9b      	lsrs	r3, r3, #26
 80066ec:	9301      	str	r3, [sp, #4]
 80066ee:	9b01      	ldr	r3, [sp, #4]
 80066f0:	b2d7      	uxtb	r7, r2
 80066f2:	42bb      	cmp	r3, r7
 80066f4:	d80c      	bhi.n	8006710 <_lv_style_list_remove_style+0x78>
    lv_mem_free(list->style_list);
 80066f6:	f005 fddb 	bl	800c2b0 <lv_mem_free>
    list->style_cnt--;
 80066fa:	213f      	movs	r1, #63	; 0x3f
 80066fc:	7922      	ldrb	r2, [r4, #4]
    list->style_list = new_styles;
 80066fe:	6026      	str	r6, [r4, #0]
    list->style_cnt--;
 8006700:	0693      	lsls	r3, r2, #26
 8006702:	0e9b      	lsrs	r3, r3, #26
 8006704:	333f      	adds	r3, #63	; 0x3f
 8006706:	400b      	ands	r3, r1
 8006708:	438a      	bics	r2, r1
 800670a:	4313      	orrs	r3, r2
 800670c:	7123      	strb	r3, [r4, #4]
 800670e:	e7cf      	b.n	80066b0 <_lv_style_list_remove_style+0x18>
        if(list->style_list[i] == style) continue;
 8006710:	0097      	lsls	r7, r2, #2
 8006712:	583f      	ldr	r7, [r7, r0]
 8006714:	42bd      	cmp	r5, r7
 8006716:	d003      	beq.n	8006720 <_lv_style_list_remove_style+0x88>
        new_styles[j++] = list->style_list[i];
 8006718:	1c4b      	adds	r3, r1, #1
 800671a:	0089      	lsls	r1, r1, #2
 800671c:	518f      	str	r7, [r1, r6]
 800671e:	b2d9      	uxtb	r1, r3
 8006720:	3201      	adds	r2, #1
 8006722:	e7e4      	b.n	80066ee <_lv_style_list_remove_style+0x56>

08006724 <_lv_style_list_add_style>:
{
 8006724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006726:	0004      	movs	r4, r0
 8006728:	000d      	movs	r5, r1
    if(list == NULL) return;
 800672a:	2800      	cmp	r0, #0
 800672c:	d020      	beq.n	8006770 <_lv_style_list_add_style+0x4c>
    _lv_style_list_remove_style(list, style);
 800672e:	f7ff ffb3 	bl	8006698 <_lv_style_list_remove_style>
    if(list->style_cnt == 0) new_styles = lv_mem_alloc(sizeof(lv_style_t *));
 8006732:	7921      	ldrb	r1, [r4, #4]
 8006734:	068b      	lsls	r3, r1, #26
 8006736:	d11c      	bne.n	8006772 <_lv_style_list_add_style+0x4e>
 8006738:	2004      	movs	r0, #4
 800673a:	f005 fd65 	bl	800c208 <lv_mem_alloc>
    if(new_styles == NULL) {
 800673e:	2800      	cmp	r0, #0
 8006740:	d016      	beq.n	8006770 <_lv_style_list_add_style+0x4c>
    if(list->has_trans) first_style++;
 8006742:	7923      	ldrb	r3, [r4, #4]
    uint8_t first_style = 0;
 8006744:	09da      	lsrs	r2, r3, #7
    if(list->has_local) first_style++;
 8006746:	0659      	lsls	r1, r3, #25
 8006748:	d500      	bpl.n	800674c <_lv_style_list_add_style+0x28>
 800674a:	3201      	adds	r2, #1
    for(i = list->style_cnt; i > first_style; i--) {
 800674c:	069b      	lsls	r3, r3, #26
 800674e:	0e9b      	lsrs	r3, r3, #26
 8006750:	001e      	movs	r6, r3
 8006752:	0099      	lsls	r1, r3, #2
 8006754:	1841      	adds	r1, r0, r1
 8006756:	3904      	subs	r1, #4
 8006758:	4296      	cmp	r6, r2
 800675a:	d811      	bhi.n	8006780 <_lv_style_list_add_style+0x5c>
    list->style_cnt++;
 800675c:	213f      	movs	r1, #63	; 0x3f
    new_styles[first_style] = style;
 800675e:	0092      	lsls	r2, r2, #2
 8006760:	5015      	str	r5, [r2, r0]
    list->style_cnt++;
 8006762:	7922      	ldrb	r2, [r4, #4]
 8006764:	3301      	adds	r3, #1
 8006766:	400b      	ands	r3, r1
 8006768:	438a      	bics	r2, r1
 800676a:	4313      	orrs	r3, r2
 800676c:	7123      	strb	r3, [r4, #4]
    list->style_list = new_styles;
 800676e:	6020      	str	r0, [r4, #0]
}
 8006770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else new_styles = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt + 1));
 8006772:	0689      	lsls	r1, r1, #26
 8006774:	0e09      	lsrs	r1, r1, #24
 8006776:	3104      	adds	r1, #4
 8006778:	6820      	ldr	r0, [r4, #0]
 800677a:	f005 fe99 	bl	800c4b0 <lv_mem_realloc>
 800677e:	e7de      	b.n	800673e <_lv_style_list_add_style+0x1a>
        new_styles[i] = new_styles[i - 1];
 8006780:	680f      	ldr	r7, [r1, #0]
    for(i = list->style_cnt; i > first_style; i--) {
 8006782:	3e01      	subs	r6, #1
        new_styles[i] = new_styles[i - 1];
 8006784:	604f      	str	r7, [r1, #4]
    for(i = list->style_cnt; i > first_style; i--) {
 8006786:	b2f6      	uxtb	r6, r6
 8006788:	e7e5      	b.n	8006756 <_lv_style_list_add_style+0x32>

0800678a <get_alloc_local_style>:
{
 800678a:	b570      	push	{r4, r5, r6, lr}
    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
 800678c:	2640      	movs	r6, #64	; 0x40
 800678e:	7901      	ldrb	r1, [r0, #4]
{
 8006790:	0005      	movs	r5, r0
    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
 8006792:	4231      	tst	r1, r6
 8006794:	d005      	beq.n	80067a2 <get_alloc_local_style+0x18>
 8006796:	09c9      	lsrs	r1, r1, #7
 8006798:	f7ff fef6 	bl	8006588 <lv_style_list_get_style>
 800679c:	0004      	movs	r4, r0
}
 800679e:	0020      	movs	r0, r4
 80067a0:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_t * local_style = lv_mem_alloc(sizeof(lv_style_t));
 80067a2:	2004      	movs	r0, #4
 80067a4:	f005 fd30 	bl	800c208 <lv_mem_alloc>
 80067a8:	1e04      	subs	r4, r0, #0
    if(local_style == NULL) {
 80067aa:	d0f8      	beq.n	800679e <get_alloc_local_style+0x14>
    lv_style_init(local_style);
 80067ac:	f7ff ff6a 	bl	8006684 <lv_style_init>
    _lv_style_list_add_style(list, local_style);
 80067b0:	0021      	movs	r1, r4
 80067b2:	0028      	movs	r0, r5
 80067b4:	f7ff ffb6 	bl	8006724 <_lv_style_list_add_style>
    list->has_local = 1;
 80067b8:	792b      	ldrb	r3, [r5, #4]
 80067ba:	431e      	orrs	r6, r3
 80067bc:	712e      	strb	r6, [r5, #4]
 80067be:	e7ee      	b.n	800679e <get_alloc_local_style+0x14>

080067c0 <lv_style_reset>:
{
 80067c0:	b510      	push	{r4, lr}
 80067c2:	0004      	movs	r4, r0
    lv_mem_free(style->map);
 80067c4:	6800      	ldr	r0, [r0, #0]
 80067c6:	f005 fd73 	bl	800c2b0 <lv_mem_free>
    lv_style_init(style);
 80067ca:	0020      	movs	r0, r4
 80067cc:	f7ff ff5a 	bl	8006684 <lv_style_init>
}
 80067d0:	bd10      	pop	{r4, pc}

080067d2 <_lv_style_get_mem_size>:
{
 80067d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067d4:	1e05      	subs	r5, r0, #0
    if(style == NULL || style->map == NULL) return 0;
 80067d6:	d003      	beq.n	80067e0 <_lv_style_get_mem_size+0xe>
 80067d8:	6800      	ldr	r0, [r0, #0]
    size_t i = 0;
 80067da:	2400      	movs	r4, #0
    if(style == NULL || style->map == NULL) return 0;
 80067dc:	2800      	cmp	r0, #0
 80067de:	d103      	bne.n	80067e8 <_lv_style_get_mem_size+0x16>
}
 80067e0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    return idx + get_prop_size(prop_id);
 80067e2:	f7ff fef5 	bl	80065d0 <get_prop_size>
 80067e6:	1824      	adds	r4, r4, r0
    _lv_memcpy_small(&prop, &style->map[idx], sizeof(lv_style_property_t));
 80067e8:	682b      	ldr	r3, [r5, #0]
 80067ea:	2202      	movs	r2, #2
 80067ec:	1919      	adds	r1, r3, r4
 80067ee:	466b      	mov	r3, sp
 80067f0:	1d9e      	adds	r6, r3, #6
 80067f2:	0030      	movs	r0, r6
 80067f4:	f7ff fec0 	bl	8006578 <_lv_memcpy_small>
    return get_style_prop(style, idx) & 0xFF;
 80067f8:	7830      	ldrb	r0, [r6, #0]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 80067fa:	28ff      	cmp	r0, #255	; 0xff
 80067fc:	d1f1      	bne.n	80067e2 <_lv_style_get_mem_size+0x10>
    return i + sizeof(lv_style_property_t);
 80067fe:	3402      	adds	r4, #2
 8006800:	b2a0      	uxth	r0, r4
 8006802:	e7ed      	b.n	80067e0 <_lv_style_get_mem_size+0xe>

08006804 <lv_style_copy>:
{
 8006804:	b570      	push	{r4, r5, r6, lr}
 8006806:	0006      	movs	r6, r0
    uint16_t size = _lv_style_get_mem_size(style_src);
 8006808:	0008      	movs	r0, r1
{
 800680a:	000d      	movs	r5, r1
    uint16_t size = _lv_style_get_mem_size(style_src);
 800680c:	f7ff ffe1 	bl	80067d2 <_lv_style_get_mem_size>
 8006810:	1e04      	subs	r4, r0, #0
    if(size == 0) return;
 8006812:	d008      	beq.n	8006826 <lv_style_copy+0x22>
    style_dest->map = lv_mem_alloc(size);
 8006814:	f005 fcf8 	bl	800c208 <lv_mem_alloc>
 8006818:	6030      	str	r0, [r6, #0]
    if(style_dest->map)
 800681a:	2800      	cmp	r0, #0
 800681c:	d003      	beq.n	8006826 <lv_style_copy+0x22>
        _lv_memcpy(style_dest->map, style_src->map, size);
 800681e:	0022      	movs	r2, r4
 8006820:	6829      	ldr	r1, [r5, #0]
 8006822:	f005 fdbf 	bl	800c3a4 <_lv_memcpy>
}
 8006826:	bd70      	pop	{r4, r5, r6, pc}

08006828 <_lv_style_set_int>:
{
 8006828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800682a:	b085      	sub	sp, #20
 800682c:	466b      	mov	r3, sp
 800682e:	ae01      	add	r6, sp, #4
 8006830:	1d9f      	adds	r7, r3, #6
 8006832:	0005      	movs	r5, r0
 8006834:	8039      	strh	r1, [r7, #0]
 8006836:	8032      	strh	r2, [r6, #0]
    int32_t id = get_property_index(style, prop);
 8006838:	f7ff fee2 	bl	8006600 <get_property_index>
 800683c:	1e04      	subs	r4, r0, #0
    if(id >= 0) {
 800683e:	db11      	blt.n	8006864 <_lv_style_set_int+0x3c>
        attr_found = get_style_prop_attr(style, id);
 8006840:	0001      	movs	r1, r0
 8006842:	0028      	movs	r0, r5
 8006844:	f7ff feb8 	bl	80065b8 <get_style_prop_attr>
        attr_goal = (prop >> 8) & 0xFFU;
 8006848:	883b      	ldrh	r3, [r7, #0]
 800684a:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 800684c:	4058      	eors	r0, r3
 800684e:	0643      	lsls	r3, r0, #25
 8006850:	d108      	bne.n	8006864 <_lv_style_set_int+0x3c>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &value, sizeof(lv_style_int_t));
 8006852:	2202      	movs	r2, #2
 8006854:	0031      	movs	r1, r6
 8006856:	6828      	ldr	r0, [r5, #0]
 8006858:	3402      	adds	r4, #2
 800685a:	1900      	adds	r0, r0, r4
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 800685c:	f7ff fe8c 	bl	8006578 <_lv_memcpy_small>
}
 8006860:	b005      	add	sp, #20
 8006862:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 8006864:	23ff      	movs	r3, #255	; 0xff
 8006866:	466a      	mov	r2, sp
    uint16_t size = _lv_style_get_mem_size(style);
 8006868:	0028      	movs	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 800686a:	81d3      	strh	r3, [r2, #14]
    uint16_t size = _lv_style_get_mem_size(style);
 800686c:	f7ff ffb1 	bl	80067d2 <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
 8006870:	2800      	cmp	r0, #0
 8006872:	d100      	bne.n	8006876 <_lv_style_set_int+0x4e>
 8006874:	3002      	adds	r0, #2
    size += new_prop_size;
 8006876:	3004      	adds	r0, #4
    if(!style_resize(style, size)) return;
 8006878:	b284      	uxth	r4, r0
 800687a:	0021      	movs	r1, r4
 800687c:	0028      	movs	r0, r5
 800687e:	f7ff feb1 	bl	80065e4 <style_resize>
 8006882:	2800      	cmp	r0, #0
 8006884:	d0ec      	beq.n	8006860 <_lv_style_set_int+0x38>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 8006886:	682b      	ldr	r3, [r5, #0]
 8006888:	1fa0      	subs	r0, r4, #6
 800688a:	1818      	adds	r0, r3, r0
 800688c:	2202      	movs	r2, #2
 800688e:	0039      	movs	r1, r7
 8006890:	f7ff fe72 	bl	8006578 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
 8006894:	682b      	ldr	r3, [r5, #0]
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 8006896:	1f20      	subs	r0, r4, #4
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
 8006898:	1818      	adds	r0, r3, r0
 800689a:	2202      	movs	r2, #2
 800689c:	0031      	movs	r1, r6
 800689e:	f7ff fe6b 	bl	8006578 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 80068a2:	230e      	movs	r3, #14
 80068a4:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
 80068a6:	3c02      	subs	r4, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 80068a8:	446b      	add	r3, sp
 80068aa:	1900      	adds	r0, r0, r4
 80068ac:	2202      	movs	r2, #2
 80068ae:	0019      	movs	r1, r3
 80068b0:	e7d4      	b.n	800685c <_lv_style_set_int+0x34>

080068b2 <_lv_style_set_color>:
{
 80068b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068b4:	b085      	sub	sp, #20
 80068b6:	466b      	mov	r3, sp
 80068b8:	ae01      	add	r6, sp, #4
 80068ba:	1d9f      	adds	r7, r3, #6
 80068bc:	0005      	movs	r5, r0
 80068be:	8032      	strh	r2, [r6, #0]
 80068c0:	8039      	strh	r1, [r7, #0]
    int32_t id = get_property_index(style, prop);
 80068c2:	f7ff fe9d 	bl	8006600 <get_property_index>
 80068c6:	1e04      	subs	r4, r0, #0
    if(id >= 0) {
 80068c8:	db11      	blt.n	80068ee <_lv_style_set_color+0x3c>
        attr_found = get_style_prop_attr(style, id);
 80068ca:	0001      	movs	r1, r0
 80068cc:	0028      	movs	r0, r5
 80068ce:	f7ff fe73 	bl	80065b8 <get_style_prop_attr>
        attr_goal = (prop >> 8) & 0xFFU;
 80068d2:	883b      	ldrh	r3, [r7, #0]
 80068d4:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 80068d6:	4058      	eors	r0, r3
 80068d8:	0643      	lsls	r3, r0, #25
 80068da:	d108      	bne.n	80068ee <_lv_style_set_color+0x3c>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &color, sizeof(lv_color_t));
 80068dc:	2202      	movs	r2, #2
 80068de:	0031      	movs	r1, r6
 80068e0:	6828      	ldr	r0, [r5, #0]
 80068e2:	3402      	adds	r4, #2
 80068e4:	1900      	adds	r0, r0, r4
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 80068e6:	f7ff fe47 	bl	8006578 <_lv_memcpy_small>
}
 80068ea:	b005      	add	sp, #20
 80068ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 80068ee:	23ff      	movs	r3, #255	; 0xff
 80068f0:	466a      	mov	r2, sp
    uint16_t size = _lv_style_get_mem_size(style);
 80068f2:	0028      	movs	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 80068f4:	81d3      	strh	r3, [r2, #14]
    uint16_t size = _lv_style_get_mem_size(style);
 80068f6:	f7ff ff6c 	bl	80067d2 <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
 80068fa:	2800      	cmp	r0, #0
 80068fc:	d100      	bne.n	8006900 <_lv_style_set_color+0x4e>
 80068fe:	3002      	adds	r0, #2
    size += new_prop_size;
 8006900:	3004      	adds	r0, #4
    if(!style_resize(style, size)) return;
 8006902:	b284      	uxth	r4, r0
 8006904:	0021      	movs	r1, r4
 8006906:	0028      	movs	r0, r5
 8006908:	f7ff fe6c 	bl	80065e4 <style_resize>
 800690c:	2800      	cmp	r0, #0
 800690e:	d0ec      	beq.n	80068ea <_lv_style_set_color+0x38>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 8006910:	682b      	ldr	r3, [r5, #0]
 8006912:	1fa0      	subs	r0, r4, #6
 8006914:	1818      	adds	r0, r3, r0
 8006916:	2202      	movs	r2, #2
 8006918:	0039      	movs	r1, r7
 800691a:	f7ff fe2d 	bl	8006578 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
 800691e:	682b      	ldr	r3, [r5, #0]
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 8006920:	1f20      	subs	r0, r4, #4
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
 8006922:	1818      	adds	r0, r3, r0
 8006924:	2202      	movs	r2, #2
 8006926:	0031      	movs	r1, r6
 8006928:	f7ff fe26 	bl	8006578 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 800692c:	230e      	movs	r3, #14
 800692e:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
 8006930:	3c02      	subs	r4, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 8006932:	446b      	add	r3, sp
 8006934:	1900      	adds	r0, r0, r4
 8006936:	2202      	movs	r2, #2
 8006938:	0019      	movs	r1, r3
 800693a:	e7d4      	b.n	80068e6 <_lv_style_set_color+0x34>

0800693c <_lv_style_set_opa>:
{
 800693c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800693e:	b085      	sub	sp, #20
 8006940:	466b      	mov	r3, sp
 8006942:	1d9f      	adds	r7, r3, #6
 8006944:	1d5e      	adds	r6, r3, #5
 8006946:	0005      	movs	r5, r0
 8006948:	8039      	strh	r1, [r7, #0]
 800694a:	7032      	strb	r2, [r6, #0]
    int32_t id = get_property_index(style, prop);
 800694c:	f7ff fe58 	bl	8006600 <get_property_index>
 8006950:	1e04      	subs	r4, r0, #0
    if(id >= 0) {
 8006952:	db11      	blt.n	8006978 <_lv_style_set_opa+0x3c>
        attr_found = get_style_prop_attr(style, id);
 8006954:	0001      	movs	r1, r0
 8006956:	0028      	movs	r0, r5
 8006958:	f7ff fe2e 	bl	80065b8 <get_style_prop_attr>
        attr_goal = (prop >> 8) & 0xFFU;
 800695c:	883b      	ldrh	r3, [r7, #0]
 800695e:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 8006960:	4058      	eors	r0, r3
 8006962:	0643      	lsls	r3, r0, #25
 8006964:	d108      	bne.n	8006978 <_lv_style_set_opa+0x3c>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &opa, sizeof(lv_opa_t));
 8006966:	2201      	movs	r2, #1
 8006968:	0031      	movs	r1, r6
 800696a:	6828      	ldr	r0, [r5, #0]
 800696c:	3402      	adds	r4, #2
 800696e:	1900      	adds	r0, r0, r4
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 8006970:	f7ff fe02 	bl	8006578 <_lv_memcpy_small>
}
 8006974:	b005      	add	sp, #20
 8006976:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 8006978:	23ff      	movs	r3, #255	; 0xff
 800697a:	466a      	mov	r2, sp
    uint16_t size = _lv_style_get_mem_size(style);
 800697c:	0028      	movs	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 800697e:	81d3      	strh	r3, [r2, #14]
    uint16_t size = _lv_style_get_mem_size(style);
 8006980:	f7ff ff27 	bl	80067d2 <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
 8006984:	2800      	cmp	r0, #0
 8006986:	d100      	bne.n	800698a <_lv_style_set_opa+0x4e>
 8006988:	3002      	adds	r0, #2
    size += new_prop_size;
 800698a:	3003      	adds	r0, #3
    if(!style_resize(style, size)) return;
 800698c:	b284      	uxth	r4, r0
 800698e:	0021      	movs	r1, r4
 8006990:	0028      	movs	r0, r5
 8006992:	f7ff fe27 	bl	80065e4 <style_resize>
 8006996:	2800      	cmp	r0, #0
 8006998:	d0ec      	beq.n	8006974 <_lv_style_set_opa+0x38>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 800699a:	682b      	ldr	r3, [r5, #0]
 800699c:	1f60      	subs	r0, r4, #5
 800699e:	1818      	adds	r0, r3, r0
 80069a0:	2202      	movs	r2, #2
 80069a2:	0039      	movs	r1, r7
 80069a4:	f7ff fde8 	bl	8006578 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
 80069a8:	682b      	ldr	r3, [r5, #0]
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 80069aa:	1ee0      	subs	r0, r4, #3
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
 80069ac:	1818      	adds	r0, r3, r0
 80069ae:	2201      	movs	r2, #1
 80069b0:	0031      	movs	r1, r6
 80069b2:	f7ff fde1 	bl	8006578 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 80069b6:	230e      	movs	r3, #14
 80069b8:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
 80069ba:	3c02      	subs	r4, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 80069bc:	446b      	add	r3, sp
 80069be:	1900      	adds	r0, r0, r4
 80069c0:	2202      	movs	r2, #2
 80069c2:	0019      	movs	r1, r3
 80069c4:	e7d4      	b.n	8006970 <_lv_style_set_opa+0x34>

080069c6 <_lv_style_set_ptr>:
{
 80069c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069c8:	b085      	sub	sp, #20
 80069ca:	466b      	mov	r3, sp
 80069cc:	1d9f      	adds	r7, r3, #6
 80069ce:	0005      	movs	r5, r0
 80069d0:	9200      	str	r2, [sp, #0]
 80069d2:	8039      	strh	r1, [r7, #0]
    int32_t id = get_property_index(style, prop);
 80069d4:	f7ff fe14 	bl	8006600 <get_property_index>
 80069d8:	1e04      	subs	r4, r0, #0
    if(id >= 0) {
 80069da:	db11      	blt.n	8006a00 <_lv_style_set_ptr+0x3a>
        attr_found = get_style_prop_attr(style, id);
 80069dc:	0001      	movs	r1, r0
 80069de:	0028      	movs	r0, r5
 80069e0:	f7ff fdea 	bl	80065b8 <get_style_prop_attr>
        attr_goal = (prop >> 8) & 0xFFU;
 80069e4:	883b      	ldrh	r3, [r7, #0]
 80069e6:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 80069e8:	4058      	eors	r0, r3
 80069ea:	0643      	lsls	r3, r0, #25
 80069ec:	d108      	bne.n	8006a00 <_lv_style_set_ptr+0x3a>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &p, sizeof(const void *));
 80069ee:	2204      	movs	r2, #4
 80069f0:	4669      	mov	r1, sp
 80069f2:	6828      	ldr	r0, [r5, #0]
 80069f4:	3402      	adds	r4, #2
 80069f6:	1900      	adds	r0, r0, r4
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 80069f8:	f7ff fdbe 	bl	8006578 <_lv_memcpy_small>
}
 80069fc:	b005      	add	sp, #20
 80069fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 8006a00:	260e      	movs	r6, #14
 8006a02:	23ff      	movs	r3, #255	; 0xff
 8006a04:	446e      	add	r6, sp
    uint16_t size = _lv_style_get_mem_size(style);
 8006a06:	0028      	movs	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 8006a08:	8033      	strh	r3, [r6, #0]
    uint16_t size = _lv_style_get_mem_size(style);
 8006a0a:	f7ff fee2 	bl	80067d2 <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
 8006a0e:	2800      	cmp	r0, #0
 8006a10:	d100      	bne.n	8006a14 <_lv_style_set_ptr+0x4e>
 8006a12:	3002      	adds	r0, #2
    size += new_prop_size;
 8006a14:	3006      	adds	r0, #6
    if(!style_resize(style, size)) return;
 8006a16:	b284      	uxth	r4, r0
 8006a18:	0021      	movs	r1, r4
 8006a1a:	0028      	movs	r0, r5
 8006a1c:	f7ff fde2 	bl	80065e4 <style_resize>
 8006a20:	2800      	cmp	r0, #0
 8006a22:	d0eb      	beq.n	80069fc <_lv_style_set_ptr+0x36>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 8006a24:	0020      	movs	r0, r4
 8006a26:	682b      	ldr	r3, [r5, #0]
 8006a28:	3808      	subs	r0, #8
 8006a2a:	1818      	adds	r0, r3, r0
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	0039      	movs	r1, r7
 8006a30:	f7ff fda2 	bl	8006578 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - sizeof(const void *) - end_mark_size, &p, sizeof(const void *));
 8006a34:	682b      	ldr	r3, [r5, #0]
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 8006a36:	1fa0      	subs	r0, r4, #6
    _lv_memcpy_small(style->map + size - sizeof(const void *) - end_mark_size, &p, sizeof(const void *));
 8006a38:	2204      	movs	r2, #4
 8006a3a:	4669      	mov	r1, sp
 8006a3c:	1818      	adds	r0, r3, r0
 8006a3e:	f7ff fd9b 	bl	8006578 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 8006a42:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - sizeof(const void *) - end_mark_size, &p, sizeof(const void *));
 8006a44:	3c02      	subs	r4, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 8006a46:	1900      	adds	r0, r0, r4
 8006a48:	2202      	movs	r2, #2
 8006a4a:	0031      	movs	r1, r6
 8006a4c:	e7d4      	b.n	80069f8 <_lv_style_set_ptr+0x32>

08006a4e <_lv_style_get_int>:
{
 8006a4e:	b570      	push	{r4, r5, r6, lr}
 8006a50:	0004      	movs	r4, r0
 8006a52:	0016      	movs	r6, r2
    int32_t id = get_property_index(style, prop);
 8006a54:	f7ff fdd4 	bl	8006600 <get_property_index>
 8006a58:	1e05      	subs	r5, r0, #0
    if(id < 0) {
 8006a5a:	db0d      	blt.n	8006a78 <_lv_style_get_int+0x2a>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_style_int_t));
 8006a5c:	6823      	ldr	r3, [r4, #0]
 8006a5e:	1c81      	adds	r1, r0, #2
 8006a60:	1859      	adds	r1, r3, r1
 8006a62:	2202      	movs	r2, #2
 8006a64:	0030      	movs	r0, r6
 8006a66:	f7ff fd87 	bl	8006578 <_lv_memcpy_small>
        attr_act = get_style_prop_attr(style, id);
 8006a6a:	0029      	movs	r1, r5
 8006a6c:	0020      	movs	r0, r4
 8006a6e:	f7ff fda3 	bl	80065b8 <get_style_prop_attr>
        return LV_STYLE_ATTR_GET_STATE(attr_act);
 8006a72:	237f      	movs	r3, #127	; 0x7f
 8006a74:	4018      	ands	r0, r3
}
 8006a76:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
 8006a78:	2001      	movs	r0, #1
 8006a7a:	4240      	negs	r0, r0
 8006a7c:	e7fb      	b.n	8006a76 <_lv_style_get_int+0x28>

08006a7e <_lv_style_get_opa>:
{
 8006a7e:	b570      	push	{r4, r5, r6, lr}
 8006a80:	0004      	movs	r4, r0
 8006a82:	0016      	movs	r6, r2
    int32_t id = get_property_index(style, prop);
 8006a84:	f7ff fdbc 	bl	8006600 <get_property_index>
 8006a88:	1e05      	subs	r5, r0, #0
    if(id < 0) {
 8006a8a:	db0d      	blt.n	8006aa8 <_lv_style_get_opa+0x2a>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_opa_t));
 8006a8c:	6823      	ldr	r3, [r4, #0]
 8006a8e:	1c81      	adds	r1, r0, #2
 8006a90:	1859      	adds	r1, r3, r1
 8006a92:	2201      	movs	r2, #1
 8006a94:	0030      	movs	r0, r6
 8006a96:	f7ff fd6f 	bl	8006578 <_lv_memcpy_small>
        attr_act = get_style_prop_attr(style, id);
 8006a9a:	0029      	movs	r1, r5
 8006a9c:	0020      	movs	r0, r4
 8006a9e:	f7ff fd8b 	bl	80065b8 <get_style_prop_attr>
        return LV_STYLE_ATTR_GET_STATE(attr_act);
 8006aa2:	237f      	movs	r3, #127	; 0x7f
 8006aa4:	4018      	ands	r0, r3
}
 8006aa6:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
 8006aa8:	2001      	movs	r0, #1
 8006aaa:	4240      	negs	r0, r0
 8006aac:	e7fb      	b.n	8006aa6 <_lv_style_get_opa+0x28>

08006aae <_lv_style_get_color>:
{
 8006aae:	b570      	push	{r4, r5, r6, lr}
 8006ab0:	0004      	movs	r4, r0
 8006ab2:	0016      	movs	r6, r2
    int32_t id = get_property_index(style, prop);
 8006ab4:	f7ff fda4 	bl	8006600 <get_property_index>
 8006ab8:	1e05      	subs	r5, r0, #0
    if(id < 0) {
 8006aba:	db0d      	blt.n	8006ad8 <_lv_style_get_color+0x2a>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_color_t));
 8006abc:	6823      	ldr	r3, [r4, #0]
 8006abe:	1c81      	adds	r1, r0, #2
 8006ac0:	1859      	adds	r1, r3, r1
 8006ac2:	2202      	movs	r2, #2
 8006ac4:	0030      	movs	r0, r6
 8006ac6:	f7ff fd57 	bl	8006578 <_lv_memcpy_small>
        attr_act = get_style_prop_attr(style, id);
 8006aca:	0029      	movs	r1, r5
 8006acc:	0020      	movs	r0, r4
 8006ace:	f7ff fd73 	bl	80065b8 <get_style_prop_attr>
        return LV_STYLE_ATTR_GET_STATE(attr_act);
 8006ad2:	237f      	movs	r3, #127	; 0x7f
 8006ad4:	4018      	ands	r0, r3
}
 8006ad6:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
 8006ad8:	2001      	movs	r0, #1
 8006ada:	4240      	negs	r0, r0
 8006adc:	e7fb      	b.n	8006ad6 <_lv_style_get_color+0x28>

08006ade <_lv_style_get_ptr>:
{
 8006ade:	b570      	push	{r4, r5, r6, lr}
 8006ae0:	0004      	movs	r4, r0
 8006ae2:	0016      	movs	r6, r2
    int32_t id = get_property_index(style, prop);
 8006ae4:	f7ff fd8c 	bl	8006600 <get_property_index>
 8006ae8:	1e05      	subs	r5, r0, #0
    if(id < 0) {
 8006aea:	db0d      	blt.n	8006b08 <_lv_style_get_ptr+0x2a>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(const void *));
 8006aec:	6823      	ldr	r3, [r4, #0]
 8006aee:	1c81      	adds	r1, r0, #2
 8006af0:	1859      	adds	r1, r3, r1
 8006af2:	2204      	movs	r2, #4
 8006af4:	0030      	movs	r0, r6
 8006af6:	f7ff fd3f 	bl	8006578 <_lv_memcpy_small>
        attr_act = get_style_prop_attr(style, id);
 8006afa:	0029      	movs	r1, r5
 8006afc:	0020      	movs	r0, r4
 8006afe:	f7ff fd5b 	bl	80065b8 <get_style_prop_attr>
        return LV_STYLE_ATTR_GET_STATE(attr_act);
 8006b02:	237f      	movs	r3, #127	; 0x7f
 8006b04:	4018      	ands	r0, r3
}
 8006b06:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
 8006b08:	2001      	movs	r0, #1
 8006b0a:	4240      	negs	r0, r0
 8006b0c:	e7fb      	b.n	8006b06 <_lv_style_get_ptr+0x28>

08006b0e <lv_style_list_get_local_style>:
    if(!list->has_local) return NULL;
 8006b0e:	2240      	movs	r2, #64	; 0x40
 8006b10:	7903      	ldrb	r3, [r0, #4]
 8006b12:	401a      	ands	r2, r3
 8006b14:	1e11      	subs	r1, r2, #0
 8006b16:	d004      	beq.n	8006b22 <lv_style_list_get_local_style+0x14>
    if(list->has_trans) return list->style_list[1];
 8006b18:	b25b      	sxtb	r3, r3
 8006b1a:	6802      	ldr	r2, [r0, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	da02      	bge.n	8006b26 <lv_style_list_get_local_style+0x18>
 8006b20:	6851      	ldr	r1, [r2, #4]
}
 8006b22:	0008      	movs	r0, r1
 8006b24:	4770      	bx	lr
    else return list->style_list[0];
 8006b26:	6811      	ldr	r1, [r2, #0]
 8006b28:	e7fb      	b.n	8006b22 <lv_style_list_get_local_style+0x14>

08006b2a <_lv_style_list_get_transition_style>:
    if(!list->has_trans) return NULL;
 8006b2a:	7902      	ldrb	r2, [r0, #4]
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	2a7f      	cmp	r2, #127	; 0x7f
 8006b30:	d901      	bls.n	8006b36 <_lv_style_list_get_transition_style+0xc>
    return list->style_list[0];
 8006b32:	6803      	ldr	r3, [r0, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
}
 8006b36:	0018      	movs	r0, r3
 8006b38:	4770      	bx	lr

08006b3a <_lv_style_list_reset>:
{
 8006b3a:	b570      	push	{r4, r5, r6, lr}
 8006b3c:	1e04      	subs	r4, r0, #0
    if(list == NULL) return;
 8006b3e:	d025      	beq.n	8006b8c <_lv_style_list_reset+0x52>
    if(list->has_local) {
 8006b40:	7903      	ldrb	r3, [r0, #4]
 8006b42:	065b      	lsls	r3, r3, #25
 8006b44:	d508      	bpl.n	8006b58 <_lv_style_list_reset+0x1e>
        lv_style_t * local = lv_style_list_get_local_style(list);
 8006b46:	f7ff ffe2 	bl	8006b0e <lv_style_list_get_local_style>
 8006b4a:	1e05      	subs	r5, r0, #0
        if(local) {
 8006b4c:	d004      	beq.n	8006b58 <_lv_style_list_reset+0x1e>
            lv_style_reset(local);
 8006b4e:	f7ff fe37 	bl	80067c0 <lv_style_reset>
            lv_mem_free(local);
 8006b52:	0028      	movs	r0, r5
 8006b54:	f005 fbac 	bl	800c2b0 <lv_mem_free>
    if(list->has_trans) {
 8006b58:	7923      	ldrb	r3, [r4, #4]
 8006b5a:	2b7f      	cmp	r3, #127	; 0x7f
 8006b5c:	d909      	bls.n	8006b72 <_lv_style_list_reset+0x38>
        lv_style_t * trans = _lv_style_list_get_transition_style(list);
 8006b5e:	0020      	movs	r0, r4
 8006b60:	f7ff ffe3 	bl	8006b2a <_lv_style_list_get_transition_style>
 8006b64:	1e05      	subs	r5, r0, #0
        if(trans) {
 8006b66:	d004      	beq.n	8006b72 <_lv_style_list_reset+0x38>
            lv_style_reset(trans);
 8006b68:	f7ff fe2a 	bl	80067c0 <lv_style_reset>
            lv_mem_free(trans);
 8006b6c:	0028      	movs	r0, r5
 8006b6e:	f005 fb9f 	bl	800c2b0 <lv_mem_free>
    if(list->style_cnt > 0) lv_mem_free(list->style_list);
 8006b72:	7923      	ldrb	r3, [r4, #4]
 8006b74:	069b      	lsls	r3, r3, #26
 8006b76:	d002      	beq.n	8006b7e <_lv_style_list_reset+0x44>
 8006b78:	6820      	ldr	r0, [r4, #0]
 8006b7a:	f005 fb99 	bl	800c2b0 <lv_mem_free>
    list->style_list = NULL;
 8006b7e:	2300      	movs	r3, #0
    list->skip_trans = 0;
 8006b80:	2201      	movs	r2, #1
    list->style_list = NULL;
 8006b82:	6023      	str	r3, [r4, #0]
    list->has_trans = 0;
 8006b84:	7123      	strb	r3, [r4, #4]
    list->skip_trans = 0;
 8006b86:	7963      	ldrb	r3, [r4, #5]
 8006b88:	4393      	bics	r3, r2
 8006b8a:	7163      	strb	r3, [r4, #5]
}
 8006b8c:	bd70      	pop	{r4, r5, r6, pc}

08006b8e <lv_style_list_copy>:
{
 8006b8e:	b570      	push	{r4, r5, r6, lr}
 8006b90:	000c      	movs	r4, r1
 8006b92:	0005      	movs	r5, r0
    _lv_style_list_reset(list_dest);
 8006b94:	f7ff ffd1 	bl	8006b3a <_lv_style_list_reset>
    if(list_src == NULL || list_src->style_list == NULL) return;
 8006b98:	2c00      	cmp	r4, #0
 8006b9a:	d023      	beq.n	8006be4 <lv_style_list_copy+0x56>
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d020      	beq.n	8006be4 <lv_style_list_copy+0x56>
    if(list_src->has_local == 0) {
 8006ba2:	7923      	ldrb	r3, [r4, #4]
 8006ba4:	0698      	lsls	r0, r3, #26
 8006ba6:	b25a      	sxtb	r2, r3
 8006ba8:	0e80      	lsrs	r0, r0, #26
 8006baa:	065b      	lsls	r3, r3, #25
 8006bac:	d42d      	bmi.n	8006c0a <lv_style_list_copy+0x7c>
        if(list_src->has_trans) {
 8006bae:	2a00      	cmp	r2, #0
 8006bb0:	da19      	bge.n	8006be6 <lv_style_list_copy+0x58>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
 8006bb2:	3801      	subs	r0, #1
 8006bb4:	0080      	lsls	r0, r0, #2
 8006bb6:	f005 fb27 	bl	800c208 <lv_mem_alloc>
 8006bba:	6028      	str	r0, [r5, #0]
            if(list_dest->style_list) {
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	d011      	beq.n	8006be4 <lv_style_list_copy+0x56>
                _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
 8006bc0:	7922      	ldrb	r2, [r4, #4]
 8006bc2:	6823      	ldr	r3, [r4, #0]
 8006bc4:	0692      	lsls	r2, r2, #26
 8006bc6:	0e12      	lsrs	r2, r2, #24
 8006bc8:	1d19      	adds	r1, r3, #4
 8006bca:	3a04      	subs	r2, #4
 8006bcc:	f005 fbea 	bl	800c3a4 <_lv_memcpy>
                list_dest->style_cnt = list_src->style_cnt - 1;
 8006bd0:	213f      	movs	r1, #63	; 0x3f
 8006bd2:	7923      	ldrb	r3, [r4, #4]
 8006bd4:	792a      	ldrb	r2, [r5, #4]
 8006bd6:	069b      	lsls	r3, r3, #26
 8006bd8:	0e9b      	lsrs	r3, r3, #26
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	400b      	ands	r3, r1
 8006bde:	438a      	bics	r2, r1
                list_dest->style_cnt = list_src->style_cnt;
 8006be0:	4313      	orrs	r3, r2
 8006be2:	712b      	strb	r3, [r5, #4]
}
 8006be4:	bd70      	pop	{r4, r5, r6, pc}
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
 8006be6:	0080      	lsls	r0, r0, #2
 8006be8:	f005 fb0e 	bl	800c208 <lv_mem_alloc>
 8006bec:	6028      	str	r0, [r5, #0]
            if(list_dest->style_list) {
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	d0f8      	beq.n	8006be4 <lv_style_list_copy+0x56>
                _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
 8006bf2:	7922      	ldrb	r2, [r4, #4]
 8006bf4:	6821      	ldr	r1, [r4, #0]
 8006bf6:	0692      	lsls	r2, r2, #26
 8006bf8:	0e12      	lsrs	r2, r2, #24
 8006bfa:	f005 fbd3 	bl	800c3a4 <_lv_memcpy>
                list_dest->style_cnt = list_src->style_cnt;
 8006bfe:	213f      	movs	r1, #63	; 0x3f
 8006c00:	7922      	ldrb	r2, [r4, #4]
 8006c02:	792b      	ldrb	r3, [r5, #4]
 8006c04:	400a      	ands	r2, r1
 8006c06:	438b      	bics	r3, r1
 8006c08:	e7ea      	b.n	8006be0 <lv_style_list_copy+0x52>
        if(list_src->has_trans) {
 8006c0a:	2a00      	cmp	r2, #0
 8006c0c:	da25      	bge.n	8006c5a <lv_style_list_copy+0xcc>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
 8006c0e:	3802      	subs	r0, #2
 8006c10:	0080      	lsls	r0, r0, #2
 8006c12:	f005 faf9 	bl	800c208 <lv_mem_alloc>
 8006c16:	6028      	str	r0, [r5, #0]
            if(list_dest->style_list) {
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	d011      	beq.n	8006c40 <lv_style_list_copy+0xb2>
                _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
 8006c1c:	7922      	ldrb	r2, [r4, #4]
 8006c1e:	6821      	ldr	r1, [r4, #0]
 8006c20:	0692      	lsls	r2, r2, #26
 8006c22:	0e12      	lsrs	r2, r2, #24
 8006c24:	3a08      	subs	r2, #8
 8006c26:	3108      	adds	r1, #8
 8006c28:	f005 fbbc 	bl	800c3a4 <_lv_memcpy>
                list_dest->style_cnt = list_src->style_cnt - 2;
 8006c2c:	7923      	ldrb	r3, [r4, #4]
 8006c2e:	069b      	lsls	r3, r3, #26
 8006c30:	0e9b      	lsrs	r3, r3, #26
 8006c32:	3b02      	subs	r3, #2
                list_dest->style_cnt = list_src->style_cnt - 1;
 8006c34:	213f      	movs	r1, #63	; 0x3f
 8006c36:	792a      	ldrb	r2, [r5, #4]
 8006c38:	400b      	ands	r3, r1
 8006c3a:	438a      	bics	r2, r1
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	712b      	strb	r3, [r5, #4]
        lv_style_t * local_style = get_alloc_local_style(list_dest);
 8006c40:	0028      	movs	r0, r5
 8006c42:	f7ff fda2 	bl	800678a <get_alloc_local_style>
 8006c46:	1e05      	subs	r5, r0, #0
        if (local_style)
 8006c48:	d0cc      	beq.n	8006be4 <lv_style_list_copy+0x56>
            lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
 8006c4a:	0020      	movs	r0, r4
 8006c4c:	f7ff fd9d 	bl	800678a <get_alloc_local_style>
 8006c50:	0001      	movs	r1, r0
 8006c52:	0028      	movs	r0, r5
 8006c54:	f7ff fdd6 	bl	8006804 <lv_style_copy>
 8006c58:	e7c4      	b.n	8006be4 <lv_style_list_copy+0x56>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
 8006c5a:	3801      	subs	r0, #1
 8006c5c:	0080      	lsls	r0, r0, #2
 8006c5e:	f005 fad3 	bl	800c208 <lv_mem_alloc>
 8006c62:	6028      	str	r0, [r5, #0]
            if(list_dest->style_list) {
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d0eb      	beq.n	8006c40 <lv_style_list_copy+0xb2>
                _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
 8006c68:	7922      	ldrb	r2, [r4, #4]
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	0692      	lsls	r2, r2, #26
 8006c6e:	0e12      	lsrs	r2, r2, #24
 8006c70:	1d19      	adds	r1, r3, #4
 8006c72:	3a04      	subs	r2, #4
 8006c74:	f005 fb96 	bl	800c3a4 <_lv_memcpy>
                list_dest->style_cnt = list_src->style_cnt - 1;
 8006c78:	7923      	ldrb	r3, [r4, #4]
 8006c7a:	069b      	lsls	r3, r3, #26
 8006c7c:	0e9b      	lsrs	r3, r3, #26
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	e7d8      	b.n	8006c34 <lv_style_list_copy+0xa6>

08006c82 <_lv_style_list_get_int>:
{
 8006c82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c84:	b087      	sub	sp, #28
 8006c86:	1e05      	subs	r5, r0, #0
 8006c88:	9101      	str	r1, [sp, #4]
 8006c8a:	9202      	str	r2, [sp, #8]
    if(list == NULL) return LV_RES_INV;
 8006c8c:	d023      	beq.n	8006cd6 <_lv_style_list_get_int+0x54>
 8006c8e:	6800      	ldr	r0, [r0, #0]
    if(list->style_list == NULL) return LV_RES_INV;
 8006c90:	2800      	cmp	r0, #0
 8006c92:	d020      	beq.n	8006cd6 <_lv_style_list_get_int+0x54>
    lv_style_int_t value_act = 0;
 8006c94:	2400      	movs	r4, #0
    int16_t weight = -1;
 8006c96:	2701      	movs	r7, #1
    int16_t weight_goal = attr;
 8006c98:	0a0b      	lsrs	r3, r1, #8
 8006c9a:	9303      	str	r3, [sp, #12]
    lv_style_int_t value_act = 0;
 8006c9c:	ab04      	add	r3, sp, #16
 8006c9e:	80dc      	strh	r4, [r3, #6]
    int16_t weight = -1;
 8006ca0:	427f      	negs	r7, r7
    for(ci = 0; ci < list->style_cnt; ci++) {
 8006ca2:	792b      	ldrb	r3, [r5, #4]
 8006ca4:	069b      	lsls	r3, r3, #26
 8006ca6:	0e9b      	lsrs	r3, r3, #26
 8006ca8:	429c      	cmp	r4, r3
 8006caa:	db03      	blt.n	8006cb4 <_lv_style_list_get_int+0x32>
    if(weight >= 0) return LV_RES_OK;
 8006cac:	43f8      	mvns	r0, r7
 8006cae:	b280      	uxth	r0, r0
    if(list == NULL) return LV_RES_INV;
 8006cb0:	0bc0      	lsrs	r0, r0, #15
 8006cb2:	e010      	b.n	8006cd6 <_lv_style_list_get_int+0x54>
        lv_style_t * style = lv_style_list_get_style(list, ci);
 8006cb4:	b2e1      	uxtb	r1, r4
 8006cb6:	0028      	movs	r0, r5
 8006cb8:	f7ff fc66 	bl	8006588 <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_int(style, prop, &value_act);
 8006cbc:	ab04      	add	r3, sp, #16
 8006cbe:	1d9e      	adds	r6, r3, #6
 8006cc0:	0032      	movs	r2, r6
 8006cc2:	9901      	ldr	r1, [sp, #4]
 8006cc4:	f7ff fec3 	bl	8006a4e <_lv_style_get_int>
        if(weight_act == weight_goal) {
 8006cc8:	9b03      	ldr	r3, [sp, #12]
 8006cca:	4283      	cmp	r3, r0
 8006ccc:	d105      	bne.n	8006cda <_lv_style_list_get_int+0x58>
            return LV_RES_OK;
 8006cce:	2001      	movs	r0, #1
            *res = value_act;
 8006cd0:	8833      	ldrh	r3, [r6, #0]
 8006cd2:	9a02      	ldr	r2, [sp, #8]
 8006cd4:	8013      	strh	r3, [r2, #0]
}
 8006cd6:	b007      	add	sp, #28
 8006cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 8006cda:	792b      	ldrb	r3, [r5, #4]
 8006cdc:	2b7f      	cmp	r3, #127	; 0x7f
 8006cde:	d907      	bls.n	8006cf0 <_lv_style_list_get_int+0x6e>
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	db05      	blt.n	8006cf0 <_lv_style_list_get_int+0x6e>
 8006ce4:	2c00      	cmp	r4, #0
 8006ce6:	d103      	bne.n	8006cf0 <_lv_style_list_get_int+0x6e>
 8006ce8:	2201      	movs	r2, #1
 8006cea:	796b      	ldrb	r3, [r5, #5]
 8006cec:	4213      	tst	r3, r2
 8006cee:	d0ee      	beq.n	8006cce <_lv_style_list_get_int+0x4c>
        else if(weight_act > weight) {
 8006cf0:	4287      	cmp	r7, r0
 8006cf2:	da03      	bge.n	8006cfc <_lv_style_list_get_int+0x7a>
            *res = value_act;
 8006cf4:	0007      	movs	r7, r0
 8006cf6:	8833      	ldrh	r3, [r6, #0]
 8006cf8:	9a02      	ldr	r2, [sp, #8]
 8006cfa:	8013      	strh	r3, [r2, #0]
 8006cfc:	3401      	adds	r4, #1
 8006cfe:	b224      	sxth	r4, r4
 8006d00:	e7cf      	b.n	8006ca2 <_lv_style_list_get_int+0x20>

08006d02 <_lv_style_list_get_color>:
{
 8006d02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d04:	b087      	sub	sp, #28
 8006d06:	1e05      	subs	r5, r0, #0
 8006d08:	9101      	str	r1, [sp, #4]
 8006d0a:	9202      	str	r2, [sp, #8]
    if(list == NULL) return LV_RES_INV;
 8006d0c:	d022      	beq.n	8006d54 <_lv_style_list_get_color+0x52>
 8006d0e:	6800      	ldr	r0, [r0, #0]
    if(list->style_list == NULL) return LV_RES_INV;
 8006d10:	2800      	cmp	r0, #0
 8006d12:	d01f      	beq.n	8006d54 <_lv_style_list_get_color+0x52>
    value_act.full = 0;
 8006d14:	2400      	movs	r4, #0
    int16_t weight = -1;
 8006d16:	2701      	movs	r7, #1
    int16_t weight_goal = attr;
 8006d18:	0a0b      	lsrs	r3, r1, #8
 8006d1a:	9303      	str	r3, [sp, #12]
    value_act.full = 0;
 8006d1c:	ab05      	add	r3, sp, #20
 8006d1e:	801c      	strh	r4, [r3, #0]
    int16_t weight = -1;
 8006d20:	427f      	negs	r7, r7
    for(ci = 0; ci < list->style_cnt; ci++) {
 8006d22:	792b      	ldrb	r3, [r5, #4]
 8006d24:	069b      	lsls	r3, r3, #26
 8006d26:	0e9b      	lsrs	r3, r3, #26
 8006d28:	429c      	cmp	r4, r3
 8006d2a:	db03      	blt.n	8006d34 <_lv_style_list_get_color+0x32>
    if(weight >= 0)  return LV_RES_OK;
 8006d2c:	43f8      	mvns	r0, r7
 8006d2e:	b280      	uxth	r0, r0
    if(list == NULL) return LV_RES_INV;
 8006d30:	0bc0      	lsrs	r0, r0, #15
 8006d32:	e00f      	b.n	8006d54 <_lv_style_list_get_color+0x52>
        lv_style_t * style = lv_style_list_get_style(list, ci);
 8006d34:	b2e1      	uxtb	r1, r4
 8006d36:	0028      	movs	r0, r5
        int16_t weight_act = _lv_style_get_color(style, prop, &value_act);
 8006d38:	ae05      	add	r6, sp, #20
        lv_style_t * style = lv_style_list_get_style(list, ci);
 8006d3a:	f7ff fc25 	bl	8006588 <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_color(style, prop, &value_act);
 8006d3e:	0032      	movs	r2, r6
 8006d40:	9901      	ldr	r1, [sp, #4]
 8006d42:	f7ff feb4 	bl	8006aae <_lv_style_get_color>
        if(weight_act == weight_goal) {
 8006d46:	9b03      	ldr	r3, [sp, #12]
 8006d48:	4283      	cmp	r3, r0
 8006d4a:	d105      	bne.n	8006d58 <_lv_style_list_get_color+0x56>
            return LV_RES_OK;
 8006d4c:	2001      	movs	r0, #1
            *res = value_act;
 8006d4e:	8833      	ldrh	r3, [r6, #0]
 8006d50:	9a02      	ldr	r2, [sp, #8]
 8006d52:	8013      	strh	r3, [r2, #0]
}
 8006d54:	b007      	add	sp, #28
 8006d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 8006d58:	792b      	ldrb	r3, [r5, #4]
 8006d5a:	2b7f      	cmp	r3, #127	; 0x7f
 8006d5c:	d907      	bls.n	8006d6e <_lv_style_list_get_color+0x6c>
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	db05      	blt.n	8006d6e <_lv_style_list_get_color+0x6c>
 8006d62:	2c00      	cmp	r4, #0
 8006d64:	d103      	bne.n	8006d6e <_lv_style_list_get_color+0x6c>
 8006d66:	2201      	movs	r2, #1
 8006d68:	796b      	ldrb	r3, [r5, #5]
 8006d6a:	4213      	tst	r3, r2
 8006d6c:	d0ee      	beq.n	8006d4c <_lv_style_list_get_color+0x4a>
        else if(weight_act > weight) {
 8006d6e:	4287      	cmp	r7, r0
 8006d70:	da03      	bge.n	8006d7a <_lv_style_list_get_color+0x78>
            *res = value_act;
 8006d72:	0007      	movs	r7, r0
 8006d74:	8833      	ldrh	r3, [r6, #0]
 8006d76:	9a02      	ldr	r2, [sp, #8]
 8006d78:	8013      	strh	r3, [r2, #0]
 8006d7a:	3401      	adds	r4, #1
 8006d7c:	b224      	sxth	r4, r4
 8006d7e:	e7d0      	b.n	8006d22 <_lv_style_list_get_color+0x20>

08006d80 <_lv_style_list_get_opa>:
{
 8006d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d82:	b087      	sub	sp, #28
 8006d84:	1e05      	subs	r5, r0, #0
 8006d86:	9101      	str	r1, [sp, #4]
 8006d88:	9202      	str	r2, [sp, #8]
    if(list == NULL) return LV_RES_INV;
 8006d8a:	d023      	beq.n	8006dd4 <_lv_style_list_get_opa+0x54>
 8006d8c:	6800      	ldr	r0, [r0, #0]
    if(list->style_list == NULL) return LV_RES_INV;
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	d020      	beq.n	8006dd4 <_lv_style_list_get_opa+0x54>
    lv_opa_t value_act = LV_OPA_TRANSP;
 8006d92:	2400      	movs	r4, #0
    int16_t weight = -1;
 8006d94:	2701      	movs	r7, #1
    int16_t weight_goal = attr;
 8006d96:	0a0b      	lsrs	r3, r1, #8
 8006d98:	9303      	str	r3, [sp, #12]
    lv_opa_t value_act = LV_OPA_TRANSP;
 8006d9a:	ab04      	add	r3, sp, #16
 8006d9c:	71dc      	strb	r4, [r3, #7]
    int16_t weight = -1;
 8006d9e:	427f      	negs	r7, r7
    for(ci = 0; ci < list->style_cnt; ci++) {
 8006da0:	792b      	ldrb	r3, [r5, #4]
 8006da2:	069b      	lsls	r3, r3, #26
 8006da4:	0e9b      	lsrs	r3, r3, #26
 8006da6:	429c      	cmp	r4, r3
 8006da8:	db03      	blt.n	8006db2 <_lv_style_list_get_opa+0x32>
    if(weight >= 0)  return LV_RES_OK;
 8006daa:	43f8      	mvns	r0, r7
 8006dac:	b280      	uxth	r0, r0
    if(list == NULL) return LV_RES_INV;
 8006dae:	0bc0      	lsrs	r0, r0, #15
 8006db0:	e010      	b.n	8006dd4 <_lv_style_list_get_opa+0x54>
        lv_style_t * style = lv_style_list_get_style(list, ci);
 8006db2:	b2e1      	uxtb	r1, r4
 8006db4:	0028      	movs	r0, r5
 8006db6:	f7ff fbe7 	bl	8006588 <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_opa(style, prop, &value_act);
 8006dba:	ab04      	add	r3, sp, #16
 8006dbc:	1dde      	adds	r6, r3, #7
 8006dbe:	0032      	movs	r2, r6
 8006dc0:	9901      	ldr	r1, [sp, #4]
 8006dc2:	f7ff fe5c 	bl	8006a7e <_lv_style_get_opa>
        if(weight_act == weight_goal) {
 8006dc6:	9b03      	ldr	r3, [sp, #12]
 8006dc8:	4283      	cmp	r3, r0
 8006dca:	d105      	bne.n	8006dd8 <_lv_style_list_get_opa+0x58>
            return LV_RES_OK;
 8006dcc:	2001      	movs	r0, #1
            *res = value_act;
 8006dce:	7833      	ldrb	r3, [r6, #0]
 8006dd0:	9a02      	ldr	r2, [sp, #8]
 8006dd2:	7013      	strb	r3, [r2, #0]
}
 8006dd4:	b007      	add	sp, #28
 8006dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 8006dd8:	792b      	ldrb	r3, [r5, #4]
 8006dda:	2b7f      	cmp	r3, #127	; 0x7f
 8006ddc:	d907      	bls.n	8006dee <_lv_style_list_get_opa+0x6e>
 8006dde:	2800      	cmp	r0, #0
 8006de0:	db05      	blt.n	8006dee <_lv_style_list_get_opa+0x6e>
 8006de2:	2c00      	cmp	r4, #0
 8006de4:	d103      	bne.n	8006dee <_lv_style_list_get_opa+0x6e>
 8006de6:	2201      	movs	r2, #1
 8006de8:	796b      	ldrb	r3, [r5, #5]
 8006dea:	4213      	tst	r3, r2
 8006dec:	d0ee      	beq.n	8006dcc <_lv_style_list_get_opa+0x4c>
        else if(weight_act > weight) {
 8006dee:	4287      	cmp	r7, r0
 8006df0:	da03      	bge.n	8006dfa <_lv_style_list_get_opa+0x7a>
            *res = value_act;
 8006df2:	0007      	movs	r7, r0
 8006df4:	7833      	ldrb	r3, [r6, #0]
 8006df6:	9a02      	ldr	r2, [sp, #8]
 8006df8:	7013      	strb	r3, [r2, #0]
 8006dfa:	3401      	adds	r4, #1
 8006dfc:	b224      	sxth	r4, r4
 8006dfe:	e7cf      	b.n	8006da0 <_lv_style_list_get_opa+0x20>

08006e00 <_lv_style_list_get_ptr>:
{
 8006e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e02:	b085      	sub	sp, #20
 8006e04:	0005      	movs	r5, r0
 8006e06:	9100      	str	r1, [sp, #0]
 8006e08:	0017      	movs	r7, r2
    if(list == NULL) return LV_RES_INV;
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	d01e      	beq.n	8006e4c <_lv_style_list_get_ptr+0x4c>
 8006e0e:	6800      	ldr	r0, [r0, #0]
    if(list->style_list == NULL) return LV_RES_INV;
 8006e10:	2800      	cmp	r0, #0
 8006e12:	d01b      	beq.n	8006e4c <_lv_style_list_get_ptr+0x4c>
    int16_t weight = -1;
 8006e14:	2601      	movs	r6, #1
    for(ci = 0; ci < list->style_cnt; ci++) {
 8006e16:	2400      	movs	r4, #0
    int16_t weight_goal = attr;
 8006e18:	0a0b      	lsrs	r3, r1, #8
 8006e1a:	9301      	str	r3, [sp, #4]
    int16_t weight = -1;
 8006e1c:	4276      	negs	r6, r6
    for(ci = 0; ci < list->style_cnt; ci++) {
 8006e1e:	792b      	ldrb	r3, [r5, #4]
 8006e20:	069b      	lsls	r3, r3, #26
 8006e22:	0e9b      	lsrs	r3, r3, #26
 8006e24:	429c      	cmp	r4, r3
 8006e26:	db03      	blt.n	8006e30 <_lv_style_list_get_ptr+0x30>
    if(weight >= 0)  return LV_RES_OK;
 8006e28:	43f0      	mvns	r0, r6
 8006e2a:	b280      	uxth	r0, r0
    if(list == NULL) return LV_RES_INV;
 8006e2c:	0bc0      	lsrs	r0, r0, #15
 8006e2e:	e00d      	b.n	8006e4c <_lv_style_list_get_ptr+0x4c>
        lv_style_t * style = lv_style_list_get_style(list, ci);
 8006e30:	b2e1      	uxtb	r1, r4
 8006e32:	0028      	movs	r0, r5
 8006e34:	f7ff fba8 	bl	8006588 <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_ptr(style, prop, &value_act);
 8006e38:	aa03      	add	r2, sp, #12
 8006e3a:	9900      	ldr	r1, [sp, #0]
 8006e3c:	f7ff fe4f 	bl	8006ade <_lv_style_get_ptr>
        if(weight_act == weight_goal) {
 8006e40:	9b01      	ldr	r3, [sp, #4]
 8006e42:	4283      	cmp	r3, r0
 8006e44:	d104      	bne.n	8006e50 <_lv_style_list_get_ptr+0x50>
            return LV_RES_OK;
 8006e46:	2001      	movs	r0, #1
            *res = value_act;
 8006e48:	9b03      	ldr	r3, [sp, #12]
 8006e4a:	603b      	str	r3, [r7, #0]
}
 8006e4c:	b005      	add	sp, #20
 8006e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 8006e50:	792b      	ldrb	r3, [r5, #4]
 8006e52:	2b7f      	cmp	r3, #127	; 0x7f
 8006e54:	d907      	bls.n	8006e66 <_lv_style_list_get_ptr+0x66>
 8006e56:	2800      	cmp	r0, #0
 8006e58:	db05      	blt.n	8006e66 <_lv_style_list_get_ptr+0x66>
 8006e5a:	2c00      	cmp	r4, #0
 8006e5c:	d103      	bne.n	8006e66 <_lv_style_list_get_ptr+0x66>
 8006e5e:	2201      	movs	r2, #1
 8006e60:	796b      	ldrb	r3, [r5, #5]
 8006e62:	4213      	tst	r3, r2
 8006e64:	d0ef      	beq.n	8006e46 <_lv_style_list_get_ptr+0x46>
        else if(weight_act > weight) {
 8006e66:	4286      	cmp	r6, r0
 8006e68:	da02      	bge.n	8006e70 <_lv_style_list_get_ptr+0x70>
            *res = value_act;
 8006e6a:	0006      	movs	r6, r0
 8006e6c:	9b03      	ldr	r3, [sp, #12]
 8006e6e:	603b      	str	r3, [r7, #0]
 8006e70:	3401      	adds	r4, #1
 8006e72:	b224      	sxth	r4, r4
 8006e74:	e7d3      	b.n	8006e1e <_lv_style_list_get_ptr+0x1e>
	...

08006e78 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 8006e78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8006e7a:	26ff      	movs	r6, #255	; 0xff
 8006e7c:	271f      	movs	r7, #31
 8006e7e:	0403      	lsls	r3, r0, #16
 8006e80:	040c      	lsls	r4, r1, #16
 8006e82:	1ab6      	subs	r6, r6, r2
 8006e84:	0edb      	lsrs	r3, r3, #27
 8006e86:	0ee4      	lsrs	r4, r4, #27
 8006e88:	4374      	muls	r4, r6
 8006e8a:	4353      	muls	r3, r2
 8006e8c:	4d11      	ldr	r5, [pc, #68]	; (8006ed4 <lv_color_mix+0x5c>)
 8006e8e:	191b      	adds	r3, r3, r4
 8006e90:	3380      	adds	r3, #128	; 0x80
 8006e92:	436b      	muls	r3, r5
 8006e94:	0ddb      	lsrs	r3, r3, #23
 8006e96:	403b      	ands	r3, r7
 8006e98:	9301      	str	r3, [sp, #4]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8006e9a:	054b      	lsls	r3, r1, #21
 8006e9c:	0e9b      	lsrs	r3, r3, #26
 8006e9e:	4373      	muls	r3, r6
 8006ea0:	469c      	mov	ip, r3
 8006ea2:	0544      	lsls	r4, r0, #21
 8006ea4:	0ea4      	lsrs	r4, r4, #26
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8006ea6:	06c0      	lsls	r0, r0, #27
 8006ea8:	06c9      	lsls	r1, r1, #27
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8006eaa:	4354      	muls	r4, r2
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8006eac:	0ec0      	lsrs	r0, r0, #27
 8006eae:	0ec9      	lsrs	r1, r1, #27
 8006eb0:	4371      	muls	r1, r6
 8006eb2:	4350      	muls	r0, r2
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8006eb4:	4464      	add	r4, ip
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8006eb6:	1840      	adds	r0, r0, r1
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8006eb8:	3480      	adds	r4, #128	; 0x80
 8006eba:	436c      	muls	r4, r5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8006ebc:	3080      	adds	r0, #128	; 0x80
 8006ebe:	4368      	muls	r0, r5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8006ec0:	00e4      	lsls	r4, r4, #3
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8006ec2:	9b01      	ldr	r3, [sp, #4]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8006ec4:	0dc0      	lsrs	r0, r0, #23
    return ret;
 8006ec6:	0ea4      	lsrs	r4, r4, #26
 8006ec8:	4038      	ands	r0, r7
 8006eca:	0164      	lsls	r4, r4, #5
 8006ecc:	02db      	lsls	r3, r3, #11
 8006ece:	4320      	orrs	r0, r4
 8006ed0:	4318      	orrs	r0, r3
}
 8006ed2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006ed4:	00008081 	.word	0x00008081

08006ed8 <_lv_blend_fill>:
 * @param mode blend mode from `lv_blend_mode_t`
 */
LV_ATTRIBUTE_FAST_MEM void _lv_blend_fill(const lv_area_t * clip_area, const lv_area_t * fill_area,
                                          lv_color_t color, lv_opa_t * mask, lv_draw_mask_res_t mask_res, lv_opa_t opa,
                                          lv_blend_mode_t mode)
{
 8006ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eda:	b095      	sub	sp, #84	; 0x54
 8006edc:	9306      	str	r3, [sp, #24]
 8006ede:	ab1a      	add	r3, sp, #104	; 0x68
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	9008      	str	r0, [sp, #32]
 8006ee4:	930c      	str	r3, [sp, #48]	; 0x30
 8006ee6:	ab1b      	add	r3, sp, #108	; 0x6c
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	910a      	str	r1, [sp, #40]	; 0x28
 8006eec:	9307      	str	r3, [sp, #28]
 8006eee:	ab1c      	add	r3, sp, #112	; 0x70
 8006ef0:	781e      	ldrb	r6, [r3, #0]
    /*Do not draw transparent things*/
    if(opa < LV_OPA_MIN) return;
 8006ef2:	9b07      	ldr	r3, [sp, #28]
{
 8006ef4:	1c17      	adds	r7, r2, #0
    if(opa < LV_OPA_MIN) return;
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d800      	bhi.n	8006efc <_lv_blend_fill+0x24>
 8006efa:	e0b6      	b.n	800706a <_lv_blend_fill+0x192>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 8006efc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d100      	bne.n	8006f04 <_lv_blend_fill+0x2c>
 8006f02:	e0b2      	b.n	800706a <_lv_blend_fill+0x192>

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8006f04:	f7ff f900 	bl	8006108 <_lv_refr_get_disp_refreshing>
 8006f08:	9005      	str	r0, [sp, #20]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8006f0a:	f004 fc57 	bl	800b7bc <lv_disp_get_buf>
    const lv_area_t * disp_area = &vdb->area;
    lv_color_t * disp_buf = vdb->buf_act;
 8006f0e:	6883      	ldr	r3, [r0, #8]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8006f10:	0005      	movs	r5, r0
    lv_color_t * disp_buf = vdb->buf_act;
 8006f12:	9309      	str	r3, [sp, #36]	; 0x24

    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
 8006f14:	9b05      	ldr	r3, [sp, #20]
 8006f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <_lv_blend_fill+0x48>
 8006f1c:	9805      	ldr	r0, [sp, #20]
 8006f1e:	4798      	blx	r3

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, clip_area, fill_area);
 8006f20:	ac12      	add	r4, sp, #72	; 0x48
 8006f22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f24:	9908      	ldr	r1, [sp, #32]
 8006f26:	0020      	movs	r0, r4
 8006f28:	f004 fd3b 	bl	800b9a2 <_lv_area_intersect>
    if(!is_common) return;
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	d100      	bne.n	8006f32 <_lv_blend_fill+0x5a>
 8006f30:	e09b      	b.n	800706a <_lv_blend_fill+0x192>

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
 8006f32:	8a28      	ldrh	r0, [r5, #16]
 8006f34:	8823      	ldrh	r3, [r4, #0]
 8006f36:	1a1b      	subs	r3, r3, r0
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	469c      	mov	ip, r3
 8006f3c:	b21b      	sxth	r3, r3
 8006f3e:	930a      	str	r3, [sp, #40]	; 0x28
 8006f40:	8023      	strh	r3, [r4, #0]
    draw_area.y1 -= disp_area->y1;
 8006f42:	8a69      	ldrh	r1, [r5, #18]
 8006f44:	8862      	ldrh	r2, [r4, #2]
 8006f46:	1a52      	subs	r2, r2, r1
 8006f48:	b293      	uxth	r3, r2
 8006f4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f4c:	466b      	mov	r3, sp
 8006f4e:	222c      	movs	r2, #44	; 0x2c
 8006f50:	5e9b      	ldrsh	r3, [r3, r2]
 8006f52:	930d      	str	r3, [sp, #52]	; 0x34
    draw_area.x2 -= disp_area->x1;
    draw_area.y2 -= disp_area->y1;
 8006f54:	88e2      	ldrh	r2, [r4, #6]
    draw_area.y1 -= disp_area->y1;
 8006f56:	8063      	strh	r3, [r4, #2]
    draw_area.x2 -= disp_area->x1;
 8006f58:	88a3      	ldrh	r3, [r4, #4]
    draw_area.y2 -= disp_area->y1;
 8006f5a:	1a52      	subs	r2, r2, r1
    draw_area.x2 -= disp_area->x1;
 8006f5c:	1a1b      	subs	r3, r3, r0

    /*Round the values in the mask if anti-aliasing is disabled*/
#if LV_ANTIALIAS
    if(mask && disp->driver.antialiasing == 0)
 8006f5e:	9906      	ldr	r1, [sp, #24]
    draw_area.x2 -= disp_area->x1;
 8006f60:	b29b      	uxth	r3, r3
    draw_area.y2 -= disp_area->y1;
 8006f62:	b292      	uxth	r2, r2
    draw_area.x2 -= disp_area->x1;
 8006f64:	80a3      	strh	r3, [r4, #4]
    draw_area.y2 -= disp_area->y1;
 8006f66:	80e2      	strh	r2, [r4, #6]
    if(mask && disp->driver.antialiasing == 0)
 8006f68:	2900      	cmp	r1, #0
 8006f6a:	d152      	bne.n	8007012 <_lv_blend_fill+0x13a>
        int32_t mask_w = lv_area_get_width(&draw_area);
        int32_t i;
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
    }

    if(disp->driver.set_px_cb) {
 8006f6c:	9905      	ldr	r1, [sp, #20]
 8006f6e:	6949      	ldr	r1, [r1, #20]
 8006f70:	2900      	cmp	r1, #0
 8006f72:	d164      	bne.n	800703e <_lv_blend_fill+0x166>
        fill_set_px(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res);
    }
    else if(mode == LV_BLEND_MODE_NORMAL) {
 8006f74:	2e00      	cmp	r6, #0
 8006f76:	d178      	bne.n	800706a <_lv_blend_fill+0x192>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8006f78:	8aa9      	ldrh	r1, [r5, #20]
 8006f7a:	8a28      	ldrh	r0, [r5, #16]
 8006f7c:	3101      	adds	r1, #1
 8006f7e:	1a09      	subs	r1, r1, r0
 8006f80:	4660      	mov	r0, ip
 8006f82:	3301      	adds	r3, #1
 8006f84:	1a1b      	subs	r3, r3, r0
 8006f86:	b21b      	sxth	r3, r3
 8006f88:	9308      	str	r3, [sp, #32]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006f8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f8c:	3201      	adds	r2, #1
 8006f8e:	1ad2      	subs	r2, r2, r3

    int32_t draw_area_w = lv_area_get_width(draw_area);
    int32_t draw_area_h = lv_area_get_height(draw_area);

    /*Create a temp. disp_buf which always point to the first pixel of the destination area*/
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 8006f90:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    int32_t draw_area_h = lv_area_get_height(draw_area);
 8006f92:	b213      	sxth	r3, r2
 8006f94:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 8006f96:	002b      	movs	r3, r5
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8006f98:	b209      	sxth	r1, r1
 8006f9a:	434b      	muls	r3, r1
 8006f9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f9e:	189b      	adds	r3, r3, r2
 8006fa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fa2:	005b      	lsls	r3, r3, #1
 8006fa4:	18d3      	adds	r3, r2, r3
 8006fa6:	9305      	str	r3, [sp, #20]
 8006fa8:	004b      	lsls	r3, r1, #1
 8006faa:	930a      	str	r3, [sp, #40]	; 0x28

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 8006fac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d000      	beq.n	8006fb4 <_lv_blend_fill+0xdc>
 8006fb2:	e106      	b.n	80071c2 <_lv_blend_fill+0x2ea>
        if(opa > LV_OPA_MAX) {
 8006fb4:	9b07      	ldr	r3, [sp, #28]
                disp->driver.gpu_fill_cb(&disp->driver, disp_buf, disp_w, draw_area, color);
                return;
            }
#endif
            /*Software rendering*/
            for(y = 0; y < draw_area_h; y++) {
 8006fb6:	0034      	movs	r4, r6
        if(opa > LV_OPA_MAX) {
 8006fb8:	2bfd      	cmp	r3, #253	; 0xfd
 8006fba:	d900      	bls.n	8006fbe <_lv_blend_fill+0xe6>
 8006fbc:	e0b4      	b.n	8007128 <_lv_blend_fill+0x250>
                }

                return;
            }
#endif
            lv_color_t last_dest_color = LV_COLOR_BLACK;
 8006fbe:	466b      	mov	r3, sp
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 8006fc0:	9a07      	ldr	r2, [sp, #28]
 8006fc2:	1c31      	adds	r1, r6, #0
 8006fc4:	1c38      	adds	r0, r7, #0
            lv_color_t last_dest_color = LV_COLOR_BLACK;
 8006fc6:	875e      	strh	r6, [r3, #58]	; 0x3a
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 8006fc8:	f7ff ff56 	bl	8006e78 <lv_color_mix>
 8006fcc:	06c3      	lsls	r3, r0, #27
 8006fce:	0edb      	lsrs	r3, r3, #27
 8006fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8006fd2:	0543      	lsls	r3, r0, #21
 8006fd4:	0e9b      	lsrs	r3, r3, #26
 8006fd6:	0400      	lsls	r0, r0, #16
 8006fd8:	930c      	str	r3, [sp, #48]	; 0x30
 8006fda:	0ec3      	lsrs	r3, r0, #27
 8006fdc:	930d      	str	r3, [sp, #52]	; 0x34

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
#if LV_COLOR_DEPTH != 1
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
 8006fde:	466b      	mov	r3, sp
 8006fe0:	043a      	lsls	r2, r7, #16
 8006fe2:	8b9b      	ldrh	r3, [r3, #28]
 8006fe4:	0ed2      	lsrs	r2, r2, #27
 8006fe6:	435a      	muls	r2, r3
 8006fe8:	920f      	str	r2, [sp, #60]	; 0x3c
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 8006fea:	057a      	lsls	r2, r7, #21
 8006fec:	0e92      	lsrs	r2, r2, #26
 8006fee:	435a      	muls	r2, r3
 8006ff0:	9210      	str	r2, [sp, #64]	; 0x40
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 8006ff2:	06fa      	lsls	r2, r7, #27
 8006ff4:	0ed2      	lsrs	r2, r2, #27
 8006ff6:	435a      	muls	r2, r3

            uint16_t color_premult[3];
            lv_color_premult(color, opa, color_premult);
            lv_opa_t opa_inv = 255 - opa;
 8006ff8:	9b07      	ldr	r3, [sp, #28]
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8006ffa:	261f      	movs	r6, #31
 8006ffc:	43db      	mvns	r3, r3
 8006ffe:	b2db      	uxtb	r3, r3
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 8007000:	9211      	str	r2, [sp, #68]	; 0x44
 8007002:	9306      	str	r3, [sp, #24]

            for(y = 0; y < draw_area_h; y++) {
 8007004:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007006:	42a3      	cmp	r3, r4
 8007008:	dd2f      	ble.n	800706a <_lv_blend_fill+0x192>
 800700a:	9a05      	ldr	r2, [sp, #20]
                for(x = 0; x < draw_area_w; x++) {
 800700c:	2500      	movs	r5, #0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800700e:	49ba      	ldr	r1, [pc, #744]	; (80072f8 <_lv_blend_fill+0x420>)
 8007010:	e0cd      	b.n	80071ae <_lv_blend_fill+0x2d6>
    if(mask && disp->driver.antialiasing == 0)
 8007012:	9905      	ldr	r1, [sp, #20]
 8007014:	7a09      	ldrb	r1, [r1, #8]
 8007016:	07c9      	lsls	r1, r1, #31
 8007018:	d4a8      	bmi.n	8006f6c <_lv_blend_fill+0x94>
 800701a:	4660      	mov	r0, ip
 800701c:	1c59      	adds	r1, r3, #1
 800701e:	1a09      	subs	r1, r1, r0
        int32_t mask_w = lv_area_get_width(&draw_area);
 8007020:	b209      	sxth	r1, r1
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 8007022:	9806      	ldr	r0, [sp, #24]
        int32_t mask_w = lv_area_get_width(&draw_area);
 8007024:	9108      	str	r1, [sp, #32]
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 8007026:	9906      	ldr	r1, [sp, #24]
 8007028:	1a44      	subs	r4, r0, r1
 800702a:	9908      	ldr	r1, [sp, #32]
 800702c:	42a1      	cmp	r1, r4
 800702e:	dd9d      	ble.n	8006f6c <_lv_blend_fill+0x94>
 8007030:	2180      	movs	r1, #128	; 0x80
 8007032:	7804      	ldrb	r4, [r0, #0]
 8007034:	42a1      	cmp	r1, r4
 8007036:	41a4      	sbcs	r4, r4
 8007038:	7004      	strb	r4, [r0, #0]
 800703a:	3001      	adds	r0, #1
 800703c:	e7f3      	b.n	8007026 <_lv_blend_fill+0x14e>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800703e:	f7ff f863 	bl	8006108 <_lv_refr_get_disp_refreshing>
 8007042:	8aab      	ldrh	r3, [r5, #20]
 8007044:	8a2a      	ldrh	r2, [r5, #16]
 8007046:	3301      	adds	r3, #1
 8007048:	1a9b      	subs	r3, r3, r2
 800704a:	b21b      	sxth	r3, r3
 800704c:	9308      	str	r3, [sp, #32]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800704e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8007050:	0006      	movs	r6, r0
 8007052:	aa12      	add	r2, sp, #72	; 0x48
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 8007054:	2b01      	cmp	r3, #1
 8007056:	d124      	bne.n	80070a2 <_lv_blend_fill+0x1ca>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8007058:	2302      	movs	r3, #2
 800705a:	5ed2      	ldrsh	r2, [r2, r3]
 800705c:	9205      	str	r2, [sp, #20]
 800705e:	ab12      	add	r3, sp, #72	; 0x48
 8007060:	2106      	movs	r1, #6
 8007062:	5e5a      	ldrsh	r2, [r3, r1]
 8007064:	9905      	ldr	r1, [sp, #20]
 8007066:	4291      	cmp	r1, r2
 8007068:	dd01      	ble.n	800706e <_lv_blend_fill+0x196>
}
 800706a:	b015      	add	sp, #84	; 0x54
 800706c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800706e:	2500      	movs	r5, #0
 8007070:	5f5d      	ldrsh	r5, [r3, r5]
 8007072:	ab12      	add	r3, sp, #72	; 0x48
 8007074:	2204      	movs	r2, #4
 8007076:	5e9b      	ldrsh	r3, [r3, r2]
 8007078:	429d      	cmp	r5, r3
 800707a:	dd03      	ble.n	8007084 <_lv_blend_fill+0x1ac>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800707c:	9b05      	ldr	r3, [sp, #20]
 800707e:	3301      	adds	r3, #1
 8007080:	9305      	str	r3, [sp, #20]
 8007082:	e7ec      	b.n	800705e <_lv_blend_fill+0x186>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
 8007084:	9a07      	ldr	r2, [sp, #28]
 8007086:	b22b      	sxth	r3, r5
 8007088:	9202      	str	r2, [sp, #8]
 800708a:	aa01      	add	r2, sp, #4
 800708c:	8017      	strh	r7, [r2, #0]
 800708e:	9a05      	ldr	r2, [sp, #20]
 8007090:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007092:	b212      	sxth	r2, r2
 8007094:	9200      	str	r2, [sp, #0]
 8007096:	0030      	movs	r0, r6
 8007098:	9a08      	ldr	r2, [sp, #32]
 800709a:	6974      	ldr	r4, [r6, #20]
 800709c:	47a0      	blx	r4
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800709e:	3501      	adds	r5, #1
 80070a0:	e7e7      	b.n	8007072 <_lv_blend_fill+0x19a>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 80070a2:	2300      	movs	r3, #0
 80070a4:	5ed1      	ldrsh	r1, [r2, r3]
 80070a6:	9b06      	ldr	r3, [sp, #24]
 80070a8:	1a5b      	subs	r3, r3, r1
 80070aa:	9306      	str	r3, [sp, #24]
 80070ac:	8893      	ldrh	r3, [r2, #4]
 80070ae:	3301      	adds	r3, #1
 80070b0:	1a5b      	subs	r3, r3, r1
 80070b2:	b21b      	sxth	r3, r3
 80070b4:	930a      	str	r3, [sp, #40]	; 0x28
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 80070b6:	2302      	movs	r3, #2
 80070b8:	5ed2      	ldrsh	r2, [r2, r3]
 80070ba:	9205      	str	r2, [sp, #20]
 80070bc:	ab12      	add	r3, sp, #72	; 0x48
 80070be:	2106      	movs	r1, #6
 80070c0:	5e5a      	ldrsh	r2, [r3, r1]
 80070c2:	9905      	ldr	r1, [sp, #20]
 80070c4:	4291      	cmp	r1, r2
 80070c6:	dcd0      	bgt.n	800706a <_lv_blend_fill+0x192>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 80070c8:	2400      	movs	r4, #0
 80070ca:	5f1c      	ldrsh	r4, [r3, r4]
 80070cc:	ab12      	add	r3, sp, #72	; 0x48
 80070ce:	2204      	movs	r2, #4
 80070d0:	5e9b      	ldrsh	r3, [r3, r2]
 80070d2:	429c      	cmp	r4, r3
 80070d4:	dd08      	ble.n	80070e8 <_lv_blend_fill+0x210>
            mask_tmp += draw_area_w;
 80070d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070d8:	9b06      	ldr	r3, [sp, #24]
 80070da:	4694      	mov	ip, r2
 80070dc:	4463      	add	r3, ip
 80070de:	9306      	str	r3, [sp, #24]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 80070e0:	9b05      	ldr	r3, [sp, #20]
 80070e2:	3301      	adds	r3, #1
 80070e4:	9305      	str	r3, [sp, #20]
 80070e6:	e7e9      	b.n	80070bc <_lv_blend_fill+0x1e4>
                if(mask_tmp[x]) {
 80070e8:	9b06      	ldr	r3, [sp, #24]
 80070ea:	5d1a      	ldrb	r2, [r3, r4]
 80070ec:	2a00      	cmp	r2, #0
 80070ee:	d00e      	beq.n	800710e <_lv_blend_fill+0x236>
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 80070f0:	9907      	ldr	r1, [sp, #28]
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
 80070f2:	b223      	sxth	r3, r4
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 80070f4:	434a      	muls	r2, r1
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
 80070f6:	0a12      	lsrs	r2, r2, #8
 80070f8:	9202      	str	r2, [sp, #8]
 80070fa:	aa01      	add	r2, sp, #4
 80070fc:	8017      	strh	r7, [r2, #0]
 80070fe:	9a05      	ldr	r2, [sp, #20]
 8007100:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007102:	b212      	sxth	r2, r2
 8007104:	9200      	str	r2, [sp, #0]
 8007106:	0030      	movs	r0, r6
 8007108:	9a08      	ldr	r2, [sp, #32]
 800710a:	6975      	ldr	r5, [r6, #20]
 800710c:	47a8      	blx	r5
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800710e:	3401      	adds	r4, #1
 8007110:	e7dc      	b.n	80070cc <_lv_blend_fill+0x1f4>
                lv_color_fill(disp_buf_first, color, draw_area_w);
 8007112:	9a08      	ldr	r2, [sp, #32]
 8007114:	1c39      	adds	r1, r7, #0
 8007116:	9805      	ldr	r0, [sp, #20]
 8007118:	f004 feb2 	bl	800be80 <lv_color_fill>
                disp_buf_first += disp_w;
 800711c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800711e:	9b05      	ldr	r3, [sp, #20]
 8007120:	4694      	mov	ip, r2
 8007122:	4463      	add	r3, ip
 8007124:	9305      	str	r3, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
 8007126:	3401      	adds	r4, #1
 8007128:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800712a:	42a3      	cmp	r3, r4
 800712c:	dcf1      	bgt.n	8007112 <_lv_blend_fill+0x23a>
 800712e:	e79c      	b.n	800706a <_lv_blend_fill+0x192>
                    if(last_dest_color.full != disp_buf_first[x].full) {
 8007130:	466b      	mov	r3, sp
 8007132:	8817      	ldrh	r7, [r2, #0]
 8007134:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007136:	42bb      	cmp	r3, r7
 8007138:	d024      	beq.n	8007184 <_lv_blend_fill+0x2ac>
                        last_dest_color = disp_buf_first[x];
 800713a:	466b      	mov	r3, sp
 800713c:	7850      	ldrb	r0, [r2, #1]
 800713e:	875f      	strh	r7, [r3, #58]	; 0x3a
 8007140:	9b06      	ldr	r3, [sp, #24]
 8007142:	08c0      	lsrs	r0, r0, #3
 8007144:	4358      	muls	r0, r3
 8007146:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007148:	18c0      	adds	r0, r0, r3
 800714a:	3080      	adds	r0, #128	; 0x80
 800714c:	4348      	muls	r0, r1
 800714e:	0dc0      	lsrs	r0, r0, #23
 8007150:	4030      	ands	r0, r6
 8007152:	900d      	str	r0, [sp, #52]	; 0x34
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8007154:	057b      	lsls	r3, r7, #21
 8007156:	9806      	ldr	r0, [sp, #24]
 8007158:	0e9b      	lsrs	r3, r3, #26
 800715a:	4343      	muls	r3, r0
 800715c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800715e:	181b      	adds	r3, r3, r0
 8007160:	203f      	movs	r0, #63	; 0x3f
 8007162:	3380      	adds	r3, #128	; 0x80
 8007164:	434b      	muls	r3, r1
 8007166:	0ddb      	lsrs	r3, r3, #23
 8007168:	4018      	ands	r0, r3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800716a:	7813      	ldrb	r3, [r2, #0]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800716c:	900c      	str	r0, [sp, #48]	; 0x30
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800716e:	06db      	lsls	r3, r3, #27
 8007170:	9806      	ldr	r0, [sp, #24]
 8007172:	0edb      	lsrs	r3, r3, #27
 8007174:	4343      	muls	r3, r0
 8007176:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007178:	181b      	adds	r3, r3, r0
 800717a:	3380      	adds	r3, #128	; 0x80
 800717c:	434b      	muls	r3, r1
 800717e:	0ddb      	lsrs	r3, r3, #23
 8007180:	4033      	ands	r3, r6
 8007182:	9309      	str	r3, [sp, #36]	; 0x24
#endif
                        {
                            last_res_color = lv_color_mix_premult(color_premult, disp_buf_first[x], opa_inv);
                        }
                    }
                    disp_buf_first[x] = last_res_color;
 8007184:	7813      	ldrb	r3, [r2, #0]
 8007186:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007188:	43b3      	bics	r3, r6
 800718a:	4303      	orrs	r3, r0
 800718c:	7013      	strb	r3, [r2, #0]
 800718e:	8817      	ldrh	r7, [r2, #0]
 8007190:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007192:	485a      	ldr	r0, [pc, #360]	; (80072fc <_lv_blend_fill+0x424>)
 8007194:	015b      	lsls	r3, r3, #5
 8007196:	4038      	ands	r0, r7
 8007198:	4318      	orrs	r0, r3
 800719a:	8010      	strh	r0, [r2, #0]
 800719c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800719e:	0a00      	lsrs	r0, r0, #8
 80071a0:	00df      	lsls	r7, r3, #3
 80071a2:	2307      	movs	r3, #7
 80071a4:	4018      	ands	r0, r3
 80071a6:	4307      	orrs	r7, r0
 80071a8:	7057      	strb	r7, [r2, #1]
                for(x = 0; x < draw_area_w; x++) {
 80071aa:	3501      	adds	r5, #1
 80071ac:	3202      	adds	r2, #2
 80071ae:	9b08      	ldr	r3, [sp, #32]
 80071b0:	42ab      	cmp	r3, r5
 80071b2:	dcbd      	bgt.n	8007130 <_lv_blend_fill+0x258>
                }
                disp_buf_first += disp_w;
 80071b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071b6:	9b05      	ldr	r3, [sp, #20]
 80071b8:	4694      	mov	ip, r2
 80071ba:	4463      	add	r3, ip
 80071bc:	9305      	str	r3, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
 80071be:	3401      	adds	r4, #1
 80071c0:	e720      	b.n	8007004 <_lv_blend_fill+0x12c>
        last_res_color.full = disp_buf_first[0].full;

        int32_t x_end4 = draw_area_w - 4;

        /*Only the mask matters*/
        if(opa > LV_OPA_MAX) {
 80071c2:	9b07      	ldr	r3, [sp, #28]
 80071c4:	2bfd      	cmp	r3, #253	; 0xfd
 80071c6:	d900      	bls.n	80071ca <_lv_blend_fill+0x2f2>
 80071c8:	e094      	b.n	80072f4 <_lv_blend_fill+0x41c>
        last_dest_color.full = disp_buf_first[0].full;
 80071ca:	9b05      	ldr	r3, [sp, #20]
                mask += draw_area_w;
            }
        }
        /*Handle opa and mask values too*/
        else {
            lv_opa_t opa_tmp = LV_OPA_TRANSP;
 80071cc:	0034      	movs	r4, r6
        last_dest_color.full = disp_buf_first[0].full;
 80071ce:	881a      	ldrh	r2, [r3, #0]
        lv_opa_t last_mask = LV_OPA_TRANSP;
 80071d0:	960b      	str	r6, [sp, #44]	; 0x2c
        last_res_color.full = disp_buf_first[0].full;
 80071d2:	0010      	movs	r0, r2
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 80071d4:	ab12      	add	r3, sp, #72	; 0x48
 80071d6:	2106      	movs	r1, #6
 80071d8:	5e5b      	ldrsh	r3, [r3, r1]
 80071da:	429d      	cmp	r5, r3
 80071dc:	dd00      	ble.n	80071e0 <_lv_blend_fill+0x308>
 80071de:	e744      	b.n	800706a <_lv_blend_fill+0x192>
                const lv_opa_t * mask_tmp_x = mask;
 80071e0:	9b06      	ldr	r3, [sp, #24]
 80071e2:	9e05      	ldr	r6, [sp, #20]
 80071e4:	9309      	str	r3, [sp, #36]	; 0x24
 80071e6:	e0a6      	b.n	8007336 <_lv_blend_fill+0x45e>
                    FILL_NORMAL_MASK_PX(x, color)
 80071e8:	8831      	ldrh	r1, [r6, #0]
 80071ea:	1c38      	adds	r0, r7, #0
 80071ec:	f7ff fe44 	bl	8006e78 <lv_color_mix>
 80071f0:	8030      	strh	r0, [r6, #0]
 80071f2:	e008      	b.n	8007206 <_lv_blend_fill+0x32e>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 80071f4:	2303      	movs	r3, #3
 80071f6:	421d      	tst	r5, r3
 80071f8:	d00b      	beq.n	8007212 <_lv_blend_fill+0x33a>
                    FILL_NORMAL_MASK_PX(x, color)
 80071fa:	782a      	ldrb	r2, [r5, #0]
 80071fc:	2a00      	cmp	r2, #0
 80071fe:	d002      	beq.n	8007206 <_lv_blend_fill+0x32e>
 8007200:	2aff      	cmp	r2, #255	; 0xff
 8007202:	d1f1      	bne.n	80071e8 <_lv_blend_fill+0x310>
 8007204:	8037      	strh	r7, [r6, #0]
 8007206:	3501      	adds	r5, #1
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8007208:	3401      	adds	r4, #1
 800720a:	3602      	adds	r6, #2
 800720c:	9b08      	ldr	r3, [sp, #32]
 800720e:	42a3      	cmp	r3, r4
 8007210:	dcf0      	bgt.n	80071f4 <_lv_blend_fill+0x31c>
 8007212:	9b05      	ldr	r3, [sp, #20]
 8007214:	0066      	lsls	r6, r4, #1
 8007216:	199e      	adds	r6, r3, r6
        int32_t x_end4 = draw_area_w - 4;
 8007218:	9b08      	ldr	r3, [sp, #32]
 800721a:	3b04      	subs	r3, #4
                for(; x <= x_end4; x += 4) {
 800721c:	42a3      	cmp	r3, r4
 800721e:	da1c      	bge.n	800725a <_lv_blend_fill+0x382>
 8007220:	9b05      	ldr	r3, [sp, #20]
 8007222:	0066      	lsls	r6, r4, #1
 8007224:	9409      	str	r4, [sp, #36]	; 0x24
 8007226:	199e      	adds	r6, r3, r6
                for(; x < draw_area_w ; x++) {
 8007228:	9b08      	ldr	r3, [sp, #32]
 800722a:	42a3      	cmp	r3, r4
 800722c:	dc51      	bgt.n	80072d2 <_lv_blend_fill+0x3fa>
                disp_buf_first += disp_w;
 800722e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007230:	9b05      	ldr	r3, [sp, #20]
 8007232:	4694      	mov	ip, r2
                mask += draw_area_w;
 8007234:	9a08      	ldr	r2, [sp, #32]
                disp_buf_first += disp_w;
 8007236:	4463      	add	r3, ip
                mask += draw_area_w;
 8007238:	4694      	mov	ip, r2
                disp_buf_first += disp_w;
 800723a:	9305      	str	r3, [sp, #20]
                mask += draw_area_w;
 800723c:	9b06      	ldr	r3, [sp, #24]
 800723e:	4463      	add	r3, ip
 8007240:	9306      	str	r3, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
 8007242:	9b07      	ldr	r3, [sp, #28]
 8007244:	3301      	adds	r3, #1
 8007246:	9307      	str	r3, [sp, #28]
 8007248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800724a:	9a07      	ldr	r2, [sp, #28]
 800724c:	4293      	cmp	r3, r2
 800724e:	dc00      	bgt.n	8007252 <_lv_blend_fill+0x37a>
 8007250:	e70b      	b.n	800706a <_lv_blend_fill+0x192>
 8007252:	9e05      	ldr	r6, [sp, #20]
                const lv_opa_t * mask_tmp_x = mask;
 8007254:	9d06      	ldr	r5, [sp, #24]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8007256:	2400      	movs	r4, #0
 8007258:	e7d8      	b.n	800720c <_lv_blend_fill+0x334>
                    if(*mask32) {
 800725a:	682b      	ldr	r3, [r5, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d005      	beq.n	800726c <_lv_blend_fill+0x394>
                        if((*mask32) == 0xFFFFFFFF) {
 8007260:	3301      	adds	r3, #1
 8007262:	d107      	bne.n	8007274 <_lv_blend_fill+0x39c>
                            disp_buf_first[x] = color;
 8007264:	8037      	strh	r7, [r6, #0]
                            disp_buf_first[x + 1] = color;
 8007266:	8077      	strh	r7, [r6, #2]
                            disp_buf_first[x + 2] = color;
 8007268:	80b7      	strh	r7, [r6, #4]
                            FILL_NORMAL_MASK_PX(x + 3, color)
 800726a:	80f7      	strh	r7, [r6, #6]
                    mask32++;
 800726c:	3504      	adds	r5, #4
                for(; x <= x_end4; x += 4) {
 800726e:	3404      	adds	r4, #4
 8007270:	3608      	adds	r6, #8
 8007272:	e7d1      	b.n	8007218 <_lv_blend_fill+0x340>
                            FILL_NORMAL_MASK_PX(x, color)
 8007274:	782a      	ldrb	r2, [r5, #0]
 8007276:	2a00      	cmp	r2, #0
 8007278:	d002      	beq.n	8007280 <_lv_blend_fill+0x3a8>
 800727a:	2aff      	cmp	r2, #255	; 0xff
 800727c:	d117      	bne.n	80072ae <_lv_blend_fill+0x3d6>
 800727e:	8037      	strh	r7, [r6, #0]
                            FILL_NORMAL_MASK_PX(x + 1, color)
 8007280:	786a      	ldrb	r2, [r5, #1]
 8007282:	2a00      	cmp	r2, #0
 8007284:	d002      	beq.n	800728c <_lv_blend_fill+0x3b4>
 8007286:	2aff      	cmp	r2, #255	; 0xff
 8007288:	d117      	bne.n	80072ba <_lv_blend_fill+0x3e2>
 800728a:	8077      	strh	r7, [r6, #2]
                            FILL_NORMAL_MASK_PX(x + 2, color)
 800728c:	78aa      	ldrb	r2, [r5, #2]
 800728e:	2a00      	cmp	r2, #0
 8007290:	d002      	beq.n	8007298 <_lv_blend_fill+0x3c0>
 8007292:	2aff      	cmp	r2, #255	; 0xff
 8007294:	d117      	bne.n	80072c6 <_lv_blend_fill+0x3ee>
 8007296:	80b7      	strh	r7, [r6, #4]
                            FILL_NORMAL_MASK_PX(x + 3, color)
 8007298:	78ea      	ldrb	r2, [r5, #3]
 800729a:	2a00      	cmp	r2, #0
 800729c:	d0e6      	beq.n	800726c <_lv_blend_fill+0x394>
 800729e:	2aff      	cmp	r2, #255	; 0xff
 80072a0:	d0e3      	beq.n	800726a <_lv_blend_fill+0x392>
 80072a2:	88f1      	ldrh	r1, [r6, #6]
 80072a4:	1c38      	adds	r0, r7, #0
 80072a6:	f7ff fde7 	bl	8006e78 <lv_color_mix>
 80072aa:	80f0      	strh	r0, [r6, #6]
 80072ac:	e7de      	b.n	800726c <_lv_blend_fill+0x394>
                            FILL_NORMAL_MASK_PX(x, color)
 80072ae:	8831      	ldrh	r1, [r6, #0]
 80072b0:	1c38      	adds	r0, r7, #0
 80072b2:	f7ff fde1 	bl	8006e78 <lv_color_mix>
 80072b6:	8030      	strh	r0, [r6, #0]
 80072b8:	e7e2      	b.n	8007280 <_lv_blend_fill+0x3a8>
                            FILL_NORMAL_MASK_PX(x + 1, color)
 80072ba:	8871      	ldrh	r1, [r6, #2]
 80072bc:	1c38      	adds	r0, r7, #0
 80072be:	f7ff fddb 	bl	8006e78 <lv_color_mix>
 80072c2:	8070      	strh	r0, [r6, #2]
 80072c4:	e7e2      	b.n	800728c <_lv_blend_fill+0x3b4>
                            FILL_NORMAL_MASK_PX(x + 2, color)
 80072c6:	88b1      	ldrh	r1, [r6, #4]
 80072c8:	1c38      	adds	r0, r7, #0
 80072ca:	f7ff fdd5 	bl	8006e78 <lv_color_mix>
 80072ce:	80b0      	strh	r0, [r6, #4]
 80072d0:	e7e2      	b.n	8007298 <_lv_blend_fill+0x3c0>
                    FILL_NORMAL_MASK_PX(x, color)
 80072d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072d4:	1aeb      	subs	r3, r5, r3
 80072d6:	5d1a      	ldrb	r2, [r3, r4]
 80072d8:	2a00      	cmp	r2, #0
 80072da:	d002      	beq.n	80072e2 <_lv_blend_fill+0x40a>
 80072dc:	2aff      	cmp	r2, #255	; 0xff
 80072de:	d103      	bne.n	80072e8 <_lv_blend_fill+0x410>
 80072e0:	8037      	strh	r7, [r6, #0]
                for(; x < draw_area_w ; x++) {
 80072e2:	3401      	adds	r4, #1
 80072e4:	3602      	adds	r6, #2
 80072e6:	e79f      	b.n	8007228 <_lv_blend_fill+0x350>
                    FILL_NORMAL_MASK_PX(x, color)
 80072e8:	8831      	ldrh	r1, [r6, #0]
 80072ea:	1c38      	adds	r0, r7, #0
 80072ec:	f7ff fdc4 	bl	8006e78 <lv_color_mix>
 80072f0:	8030      	strh	r0, [r6, #0]
 80072f2:	e7f6      	b.n	80072e2 <_lv_blend_fill+0x40a>
            for(y = 0; y < draw_area_h; y++) {
 80072f4:	9607      	str	r6, [sp, #28]
 80072f6:	e7a7      	b.n	8007248 <_lv_blend_fill+0x370>
 80072f8:	00008081 	.word	0x00008081
 80072fc:	fffff81f 	.word	0xfffff81f
                for(x = 0; x < draw_area_w; x++) {
                    if(*mask_tmp_x) {
 8007300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d012      	beq.n	800732e <_lv_blend_fill+0x456>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
 8007308:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800730a:	428b      	cmp	r3, r1
 800730c:	d025      	beq.n	800735a <_lv_blend_fill+0x482>
 800730e:	9c07      	ldr	r4, [sp, #28]
 8007310:	2bff      	cmp	r3, #255	; 0xff
 8007312:	d001      	beq.n	8007318 <_lv_blend_fill+0x440>
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
 8007314:	435c      	muls	r4, r3
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
 8007316:	0a24      	lsrs	r4, r4, #8
                            }
                            else
#endif
                            {
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
                                else last_res_color = lv_color_mix(color, disp_buf_first[x], opa_tmp);
 8007318:	0022      	movs	r2, r4
 800731a:	8831      	ldrh	r1, [r6, #0]
 800731c:	1c38      	adds	r0, r7, #0
 800731e:	f7ff fdab 	bl	8006e78 <lv_color_mix>
                            }
                            last_mask = *mask_tmp_x;
 8007322:	9b09      	ldr	r3, [sp, #36]	; 0x24
                            last_dest_color.full = disp_buf_first[x].full;
 8007324:	8832      	ldrh	r2, [r6, #0]
                            last_mask = *mask_tmp_x;
 8007326:	781b      	ldrb	r3, [r3, #0]
                                else last_res_color = lv_color_mix(color, disp_buf_first[x], opa_tmp);
 8007328:	b280      	uxth	r0, r0
                            last_mask = *mask_tmp_x;
 800732a:	930b      	str	r3, [sp, #44]	; 0x2c
                        }
                        disp_buf_first[x] = last_res_color;
 800732c:	8030      	strh	r0, [r6, #0]
                    }
                    mask_tmp_x++;
 800732e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007330:	3602      	adds	r6, #2
 8007332:	3301      	adds	r3, #1
 8007334:	9309      	str	r3, [sp, #36]	; 0x24
                for(x = 0; x < draw_area_w; x++) {
 8007336:	9906      	ldr	r1, [sp, #24]
 8007338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800733a:	1a5b      	subs	r3, r3, r1
 800733c:	9908      	ldr	r1, [sp, #32]
 800733e:	4299      	cmp	r1, r3
 8007340:	dcde      	bgt.n	8007300 <_lv_blend_fill+0x428>
                }
                disp_buf_first += disp_w;
 8007342:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007344:	9b05      	ldr	r3, [sp, #20]
 8007346:	468c      	mov	ip, r1
                mask += draw_area_w;
 8007348:	9908      	ldr	r1, [sp, #32]
                disp_buf_first += disp_w;
 800734a:	4463      	add	r3, ip
                mask += draw_area_w;
 800734c:	468c      	mov	ip, r1
                disp_buf_first += disp_w;
 800734e:	9305      	str	r3, [sp, #20]
                mask += draw_area_w;
 8007350:	9b06      	ldr	r3, [sp, #24]
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8007352:	3501      	adds	r5, #1
                mask += draw_area_w;
 8007354:	4463      	add	r3, ip
 8007356:	9306      	str	r3, [sp, #24]
 8007358:	e73c      	b.n	80071d4 <_lv_blend_fill+0x2fc>
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
 800735a:	8833      	ldrh	r3, [r6, #0]
 800735c:	4293      	cmp	r3, r2
 800735e:	d1db      	bne.n	8007318 <_lv_blend_fill+0x440>
 8007360:	e7e4      	b.n	800732c <_lv_blend_fill+0x454>
 8007362:	46c0      	nop			; (mov r8, r8)

08007364 <_lv_blend_map>:
{
 8007364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007366:	b091      	sub	sp, #68	; 0x44
 8007368:	9306      	str	r3, [sp, #24]
 800736a:	ab16      	add	r3, sp, #88	; 0x58
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	000c      	movs	r4, r1
 8007370:	930c      	str	r3, [sp, #48]	; 0x30
 8007372:	ab17      	add	r3, sp, #92	; 0x5c
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	920d      	str	r2, [sp, #52]	; 0x34
 8007378:	9305      	str	r3, [sp, #20]
 800737a:	ab18      	add	r3, sp, #96	; 0x60
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	9308      	str	r3, [sp, #32]
    if(opa < LV_OPA_MIN) return;
 8007380:	9b05      	ldr	r3, [sp, #20]
 8007382:	2b01      	cmp	r3, #1
 8007384:	d800      	bhi.n	8007388 <_lv_blend_map+0x24>
 8007386:	e0d0      	b.n	800752a <_lv_blend_map+0x1c6>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 8007388:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800738a:	2b00      	cmp	r3, #0
 800738c:	d100      	bne.n	8007390 <_lv_blend_map+0x2c>
 800738e:	e0cc      	b.n	800752a <_lv_blend_map+0x1c6>
    is_common = _lv_area_intersect(&draw_area, clip_area, map_area);
 8007390:	000a      	movs	r2, r1
 8007392:	0001      	movs	r1, r0
 8007394:	a80e      	add	r0, sp, #56	; 0x38
 8007396:	f004 fb04 	bl	800b9a2 <_lv_area_intersect>
    if(!is_common) return;
 800739a:	2800      	cmp	r0, #0
 800739c:	d100      	bne.n	80073a0 <_lv_blend_map+0x3c>
 800739e:	e0c4      	b.n	800752a <_lv_blend_map+0x1c6>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 80073a0:	f7fe feb2 	bl	8006108 <_lv_refr_get_disp_refreshing>
 80073a4:	0005      	movs	r5, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80073a6:	f004 fa09 	bl	800b7bc <lv_disp_get_buf>
    lv_color_t * disp_buf = vdb->buf_act;
 80073aa:	6883      	ldr	r3, [r0, #8]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80073ac:	0006      	movs	r6, r0
    lv_color_t * disp_buf = vdb->buf_act;
 80073ae:	930b      	str	r3, [sp, #44]	; 0x2c
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
 80073b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d001      	beq.n	80073ba <_lv_blend_map+0x56>
 80073b6:	0028      	movs	r0, r5
 80073b8:	4798      	blx	r3
    draw_area.x1 -= disp_area->x1;
 80073ba:	a90e      	add	r1, sp, #56	; 0x38
 80073bc:	880b      	ldrh	r3, [r1, #0]
 80073be:	8a37      	ldrh	r7, [r6, #16]
 80073c0:	1bdb      	subs	r3, r3, r7
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	9304      	str	r3, [sp, #16]
 80073c6:	466b      	mov	r3, sp
 80073c8:	2210      	movs	r2, #16
 80073ca:	5e9b      	ldrsh	r3, [r3, r2]
    draw_area.y1 -= disp_area->y1;
 80073cc:	884a      	ldrh	r2, [r1, #2]
    draw_area.x1 -= disp_area->x1;
 80073ce:	800b      	strh	r3, [r1, #0]
    draw_area.y1 -= disp_area->y1;
 80073d0:	8a70      	ldrh	r0, [r6, #18]
    draw_area.x1 -= disp_area->x1;
 80073d2:	469c      	mov	ip, r3
    draw_area.y1 -= disp_area->y1;
 80073d4:	1a12      	subs	r2, r2, r0
 80073d6:	b293      	uxth	r3, r2
 80073d8:	9309      	str	r3, [sp, #36]	; 0x24
 80073da:	466b      	mov	r3, sp
 80073dc:	2224      	movs	r2, #36	; 0x24
 80073de:	5e9b      	ldrsh	r3, [r3, r2]
 80073e0:	930a      	str	r3, [sp, #40]	; 0x28
    draw_area.y2 -= disp_area->y1;
 80073e2:	88ca      	ldrh	r2, [r1, #6]
    draw_area.y1 -= disp_area->y1;
 80073e4:	804b      	strh	r3, [r1, #2]
    draw_area.x2 -= disp_area->x1;
 80073e6:	888b      	ldrh	r3, [r1, #4]
    draw_area.y2 -= disp_area->y1;
 80073e8:	1a12      	subs	r2, r2, r0
    draw_area.x2 -= disp_area->x1;
 80073ea:	1bdb      	subs	r3, r3, r7
 80073ec:	b29b      	uxth	r3, r3
    draw_area.y2 -= disp_area->y1;
 80073ee:	b292      	uxth	r2, r2
    draw_area.x2 -= disp_area->x1;
 80073f0:	808b      	strh	r3, [r1, #4]
    draw_area.y2 -= disp_area->y1;
 80073f2:	80ca      	strh	r2, [r1, #6]
    if(mask && disp->driver.antialiasing == 0)
 80073f4:	9906      	ldr	r1, [sp, #24]
 80073f6:	2900      	cmp	r1, #0
 80073f8:	d152      	bne.n	80074a0 <_lv_blend_map+0x13c>
    if(disp->driver.set_px_cb) {
 80073fa:	6969      	ldr	r1, [r5, #20]
 80073fc:	2900      	cmp	r1, #0
 80073fe:	d164      	bne.n	80074ca <_lv_blend_map+0x166>
    else if(mode == LV_BLEND_MODE_NORMAL) {
 8007400:	9908      	ldr	r1, [sp, #32]
 8007402:	2900      	cmp	r1, #0
 8007404:	d000      	beq.n	8007408 <_lv_blend_map+0xa4>
 8007406:	e090      	b.n	800752a <_lv_blend_map+0x1c6>
 8007408:	9d04      	ldr	r5, [sp, #16]
 800740a:	3301      	adds	r3, #1
 800740c:	1b5b      	subs	r3, r3, r5
 800740e:	b21b      	sxth	r3, r3
 8007410:	9307      	str	r3, [sp, #28]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007414:	3201      	adds	r2, #1
 8007416:	1ad2      	subs	r2, r2, r3

    /*Get the width of the `disp_area` it will be used to go to the next line*/
    int32_t disp_w = lv_area_get_width(disp_area);

    int32_t draw_area_w = lv_area_get_width(draw_area);
    int32_t draw_area_h = lv_area_get_height(draw_area);
 8007418:	b213      	sxth	r3, r2
    int32_t disp_w = lv_area_get_width(disp_area);
 800741a:	2110      	movs	r1, #16
 800741c:	5e70      	ldrsh	r0, [r6, r1]
    int32_t draw_area_h = lv_area_get_height(draw_area);
 800741e:	9309      	str	r3, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007420:	8ab1      	ldrh	r1, [r6, #20]

    /*Get the width of the `mask_area` it will be used to go to the next line*/
    int32_t map_w = lv_area_get_width(map_area);
 8007422:	2300      	movs	r3, #0
 8007424:	5ee2      	ldrsh	r2, [r4, r3]
 8007426:	88a3      	ldrh	r3, [r4, #4]
 8007428:	3101      	adds	r1, #1
 800742a:	3301      	adds	r3, #1
 800742c:	1a09      	subs	r1, r1, r0
 800742e:	1a9b      	subs	r3, r3, r2
    /*Create a temp. disp_buf which always point to first pixel to draw*/
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;

    /*Create a temp. map_buf which always point to first pixel to draw from the map*/
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 8007430:	1a10      	subs	r0, r2, r0
 8007432:	4662      	mov	r2, ip
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 8007434:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007436:	b209      	sxth	r1, r1
 8007438:	434d      	muls	r5, r1
 800743a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800743c:	4465      	add	r5, ip
 800743e:	006d      	lsls	r5, r5, #1
 8007440:	197f      	adds	r7, r7, r5
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 8007442:	2502      	movs	r5, #2
 8007444:	5f64      	ldrsh	r4, [r4, r5]
 8007446:	2512      	movs	r5, #18
 8007448:	5f75      	ldrsh	r5, [r6, r5]
 800744a:	b21b      	sxth	r3, r3
 800744c:	1b64      	subs	r4, r4, r5
 800744e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 8007450:	1a10      	subs	r0, r2, r0
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 8007452:	1b2c      	subs	r4, r5, r4
 8007454:	435c      	muls	r4, r3
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 8007456:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007458:	1824      	adds	r4, r4, r0
 800745a:	005b      	lsls	r3, r3, #1
 800745c:	0064      	lsls	r4, r4, #1
 800745e:	1912      	adds	r2, r2, r4
 8007460:	930b      	str	r3, [sp, #44]	; 0x2c

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 8007462:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 8007464:	9204      	str	r2, [sp, #16]
 8007466:	004a      	lsls	r2, r1, #1
 8007468:	920a      	str	r2, [sp, #40]	; 0x28
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800746a:	2b01      	cmp	r3, #1
 800746c:	d000      	beq.n	8007470 <_lv_blend_map+0x10c>
 800746e:	e0d1      	b.n	8007614 <_lv_blend_map+0x2b0>
            }
            return;
        }
#endif

        if(opa > LV_OPA_MAX) {
 8007470:	9b05      	ldr	r3, [sp, #20]
 8007472:	2bfd      	cmp	r3, #253	; 0xfd
 8007474:	d800      	bhi.n	8007478 <_lv_blend_map+0x114>
 8007476:	e0cb      	b.n	8007610 <_lv_blend_map+0x2ac>
            }
#endif

            /*Software rendering*/
            for(y = 0; y < draw_area_h; y++) {
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
 8007478:	9b07      	ldr	r3, [sp, #28]
            for(y = 0; y < draw_area_h; y++) {
 800747a:	9c08      	ldr	r4, [sp, #32]
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
 800747c:	005d      	lsls	r5, r3, #1
            for(y = 0; y < draw_area_h; y++) {
 800747e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007480:	42a3      	cmp	r3, r4
 8007482:	dd52      	ble.n	800752a <_lv_blend_map+0x1c6>
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
 8007484:	002a      	movs	r2, r5
 8007486:	0038      	movs	r0, r7
 8007488:	9904      	ldr	r1, [sp, #16]
 800748a:	f004 ff8b 	bl	800c3a4 <_lv_memcpy>
                disp_buf_first += disp_w;
                map_buf_first += map_w;
 800748e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                disp_buf_first += disp_w;
 8007490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                map_buf_first += map_w;
 8007492:	4694      	mov	ip, r2
                disp_buf_first += disp_w;
 8007494:	18ff      	adds	r7, r7, r3
                map_buf_first += map_w;
 8007496:	9b04      	ldr	r3, [sp, #16]
            for(y = 0; y < draw_area_h; y++) {
 8007498:	3401      	adds	r4, #1
                map_buf_first += map_w;
 800749a:	4463      	add	r3, ip
 800749c:	9304      	str	r3, [sp, #16]
 800749e:	e7ee      	b.n	800747e <_lv_blend_map+0x11a>
    if(mask && disp->driver.antialiasing == 0)
 80074a0:	7a29      	ldrb	r1, [r5, #8]
 80074a2:	07c9      	lsls	r1, r1, #31
 80074a4:	d4a9      	bmi.n	80073fa <_lv_blend_map+0x96>
 80074a6:	9804      	ldr	r0, [sp, #16]
 80074a8:	1c59      	adds	r1, r3, #1
 80074aa:	1a09      	subs	r1, r1, r0
        int32_t mask_w = lv_area_get_width(&draw_area);
 80074ac:	b209      	sxth	r1, r1
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 80074ae:	9806      	ldr	r0, [sp, #24]
        int32_t mask_w = lv_area_get_width(&draw_area);
 80074b0:	9107      	str	r1, [sp, #28]
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 80074b2:	9906      	ldr	r1, [sp, #24]
 80074b4:	1a47      	subs	r7, r0, r1
 80074b6:	9907      	ldr	r1, [sp, #28]
 80074b8:	42b9      	cmp	r1, r7
 80074ba:	dd9e      	ble.n	80073fa <_lv_blend_map+0x96>
 80074bc:	2180      	movs	r1, #128	; 0x80
 80074be:	7807      	ldrb	r7, [r0, #0]
 80074c0:	42b9      	cmp	r1, r7
 80074c2:	41bf      	sbcs	r7, r7
 80074c4:	7007      	strb	r7, [r0, #0]
 80074c6:	3001      	adds	r0, #1
 80074c8:	e7f3      	b.n	80074b2 <_lv_blend_map+0x14e>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 80074ca:	f7fe fe1d 	bl	8006108 <_lv_refr_get_disp_refreshing>
    int32_t disp_w = lv_area_get_width(disp_area);
 80074ce:	2210      	movs	r2, #16
 80074d0:	5eb3      	ldrsh	r3, [r6, r2]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 80074d2:	0007      	movs	r7, r0
    int32_t disp_w = lv_area_get_width(disp_area);
 80074d4:	469c      	mov	ip, r3
 80074d6:	4662      	mov	r2, ip
 80074d8:	8ab3      	ldrh	r3, [r6, #20]
    int32_t draw_area_w = lv_area_get_width(draw_area);
 80074da:	a80e      	add	r0, sp, #56	; 0x38
 80074dc:	3301      	adds	r3, #1
 80074de:	1a9b      	subs	r3, r3, r2
 80074e0:	b21b      	sxth	r3, r3
 80074e2:	9307      	str	r3, [sp, #28]
 80074e4:	2200      	movs	r2, #0
 80074e6:	5e83      	ldrsh	r3, [r0, r2]
 80074e8:	88a2      	ldrh	r2, [r4, #4]
 80074ea:	9308      	str	r3, [sp, #32]
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 80074ec:	2302      	movs	r3, #2
 80074ee:	5ec5      	ldrsh	r5, [r0, r3]
    int32_t map_w = lv_area_get_width(map_area);
 80074f0:	2300      	movs	r3, #0
 80074f2:	5ee1      	ldrsh	r1, [r4, r3]
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 80074f4:	2302      	movs	r3, #2
 80074f6:	5ee3      	ldrsh	r3, [r4, r3]
 80074f8:	2412      	movs	r4, #18
 80074fa:	5f34      	ldrsh	r4, [r6, r4]
 80074fc:	3201      	adds	r2, #1
 80074fe:	1b1c      	subs	r4, r3, r4
    map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 8007500:	4663      	mov	r3, ip
 8007502:	1a52      	subs	r2, r2, r1
 8007504:	b212      	sxth	r2, r2
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 8007506:	1b2c      	subs	r4, r5, r4
 8007508:	4354      	muls	r4, r2
    map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 800750a:	1ac9      	subs	r1, r1, r3
    map_buf_tmp -= draw_area->x1;
 800750c:	1a64      	subs	r4, r4, r1
 800750e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007510:	0064      	lsls	r4, r4, #1
 8007512:	191b      	adds	r3, r3, r4
 8007514:	9304      	str	r3, [sp, #16]
 8007516:	0053      	lsls	r3, r2, #1
 8007518:	9309      	str	r3, [sp, #36]	; 0x24
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800751a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800751c:	2b01      	cmp	r3, #1
 800751e:	d124      	bne.n	800756a <_lv_blend_map+0x206>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8007520:	ab0e      	add	r3, sp, #56	; 0x38
 8007522:	2106      	movs	r1, #6
 8007524:	5e5a      	ldrsh	r2, [r3, r1]
 8007526:	4295      	cmp	r5, r2
 8007528:	dd01      	ble.n	800752e <_lv_blend_map+0x1ca>
}
 800752a:	b011      	add	sp, #68	; 0x44
 800752c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800752e:	2600      	movs	r6, #0
 8007530:	5f9e      	ldrsh	r6, [r3, r6]
 8007532:	ab0e      	add	r3, sp, #56	; 0x38
 8007534:	2204      	movs	r2, #4
 8007536:	5e9b      	ldrsh	r3, [r3, r2]
 8007538:	429e      	cmp	r6, r3
 800753a:	dd05      	ble.n	8007548 <_lv_blend_map+0x1e4>
            map_buf_tmp += map_w;
 800753c:	9a04      	ldr	r2, [sp, #16]
 800753e:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8007540:	3501      	adds	r5, #1
            map_buf_tmp += map_w;
 8007542:	18d3      	adds	r3, r2, r3
 8007544:	9304      	str	r3, [sp, #16]
 8007546:	e7eb      	b.n	8007520 <_lv_blend_map+0x1bc>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
 8007548:	9a05      	ldr	r2, [sp, #20]
 800754a:	9804      	ldr	r0, [sp, #16]
 800754c:	9202      	str	r2, [sp, #8]
 800754e:	0071      	lsls	r1, r6, #1
 8007550:	5a09      	ldrh	r1, [r1, r0]
 8007552:	aa01      	add	r2, sp, #4
 8007554:	8011      	strh	r1, [r2, #0]
 8007556:	b22a      	sxth	r2, r5
 8007558:	9200      	str	r2, [sp, #0]
 800755a:	b233      	sxth	r3, r6
 800755c:	9a07      	ldr	r2, [sp, #28]
 800755e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007560:	0038      	movs	r0, r7
 8007562:	697c      	ldr	r4, [r7, #20]
 8007564:	47a0      	blx	r4
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8007566:	3601      	adds	r6, #1
 8007568:	e7e3      	b.n	8007532 <_lv_blend_map+0x1ce>
    int32_t draw_area_w = lv_area_get_width(draw_area);
 800756a:	2204      	movs	r2, #4
 800756c:	5e83      	ldrsh	r3, [r0, r2]
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 800756e:	9a08      	ldr	r2, [sp, #32]
    int32_t draw_area_w = lv_area_get_width(draw_area);
 8007570:	930a      	str	r3, [sp, #40]	; 0x28
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 8007572:	9b06      	ldr	r3, [sp, #24]
 8007574:	1a9b      	subs	r3, r3, r2
 8007576:	9306      	str	r3, [sp, #24]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8007578:	ab0e      	add	r3, sp, #56	; 0x38
 800757a:	2106      	movs	r1, #6
 800757c:	5e5a      	ldrsh	r2, [r3, r1]
 800757e:	4295      	cmp	r5, r2
 8007580:	dcd3      	bgt.n	800752a <_lv_blend_map+0x1c6>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8007582:	2600      	movs	r6, #0
 8007584:	5f9e      	ldrsh	r6, [r3, r6]
 8007586:	ab0e      	add	r3, sp, #56	; 0x38
 8007588:	2204      	movs	r2, #4
 800758a:	5e9b      	ldrsh	r3, [r3, r2]
 800758c:	429e      	cmp	r6, r3
 800758e:	dd0d      	ble.n	80075ac <_lv_blend_map+0x248>
 8007590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007592:	9a08      	ldr	r2, [sp, #32]
 8007594:	3301      	adds	r3, #1
 8007596:	1a9b      	subs	r3, r3, r2
            mask_tmp += draw_area_w;
 8007598:	9a06      	ldr	r2, [sp, #24]
 800759a:	b21b      	sxth	r3, r3
 800759c:	18d3      	adds	r3, r2, r3
 800759e:	9306      	str	r3, [sp, #24]
            map_buf_tmp += map_w;
 80075a0:	9a04      	ldr	r2, [sp, #16]
 80075a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 80075a4:	3501      	adds	r5, #1
            map_buf_tmp += map_w;
 80075a6:	18d3      	adds	r3, r2, r3
 80075a8:	9304      	str	r3, [sp, #16]
 80075aa:	e7e5      	b.n	8007578 <_lv_blend_map+0x214>
                if(mask_tmp[x]) {
 80075ac:	9b06      	ldr	r3, [sp, #24]
 80075ae:	5d9a      	ldrb	r2, [r3, r6]
 80075b0:	2a00      	cmp	r2, #0
 80075b2:	d010      	beq.n	80075d6 <_lv_blend_map+0x272>
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 80075b4:	9905      	ldr	r1, [sp, #20]
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 80075b6:	9804      	ldr	r0, [sp, #16]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 80075b8:	434a      	muls	r2, r1
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 80075ba:	0a12      	lsrs	r2, r2, #8
 80075bc:	9202      	str	r2, [sp, #8]
 80075be:	0072      	lsls	r2, r6, #1
 80075c0:	5a12      	ldrh	r2, [r2, r0]
 80075c2:	a901      	add	r1, sp, #4
 80075c4:	800a      	strh	r2, [r1, #0]
 80075c6:	b22a      	sxth	r2, r5
 80075c8:	9200      	str	r2, [sp, #0]
 80075ca:	b233      	sxth	r3, r6
 80075cc:	9a07      	ldr	r2, [sp, #28]
 80075ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075d0:	0038      	movs	r0, r7
 80075d2:	697c      	ldr	r4, [r7, #20]
 80075d4:	47a0      	blx	r4
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 80075d6:	3601      	adds	r6, #1
 80075d8:	e7d5      	b.n	8007586 <_lv_blend_map+0x222>
 80075da:	006b      	lsls	r3, r5, #1
                                                &disp_buf_first[x].ch.alpha);
                    }
                    else
#endif
                    {
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
 80075dc:	9804      	ldr	r0, [sp, #16]
 80075de:	18fe      	adds	r6, r7, r3
 80075e0:	9a05      	ldr	r2, [sp, #20]
 80075e2:	8831      	ldrh	r1, [r6, #0]
 80075e4:	5ac0      	ldrh	r0, [r0, r3]
 80075e6:	f7ff fc47 	bl	8006e78 <lv_color_mix>
                for(x = 0; x < draw_area_w; x++) {
 80075ea:	3501      	adds	r5, #1
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
 80075ec:	8030      	strh	r0, [r6, #0]
                for(x = 0; x < draw_area_w; x++) {
 80075ee:	9b07      	ldr	r3, [sp, #28]
 80075f0:	42ab      	cmp	r3, r5
 80075f2:	dcf2      	bgt.n	80075da <_lv_blend_map+0x276>
                    }
                }
                disp_buf_first += disp_w;
                map_buf_first += map_w;
 80075f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                disp_buf_first += disp_w;
 80075f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                map_buf_first += map_w;
 80075f8:	4694      	mov	ip, r2
                disp_buf_first += disp_w;
 80075fa:	18ff      	adds	r7, r7, r3
                map_buf_first += map_w;
 80075fc:	9b04      	ldr	r3, [sp, #16]
            for(y = 0; y < draw_area_h; y++) {
 80075fe:	3401      	adds	r4, #1
                map_buf_first += map_w;
 8007600:	4463      	add	r3, ip
 8007602:	9304      	str	r3, [sp, #16]
            for(y = 0; y < draw_area_h; y++) {
 8007604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007606:	42a3      	cmp	r3, r4
 8007608:	dc00      	bgt.n	800760c <_lv_blend_map+0x2a8>
 800760a:	e78e      	b.n	800752a <_lv_blend_map+0x1c6>
                for(x = 0; x < draw_area_w; x++) {
 800760c:	2500      	movs	r5, #0
 800760e:	e7ee      	b.n	80075ee <_lv_blend_map+0x28a>
            for(y = 0; y < draw_area_h; y++) {
 8007610:	9c08      	ldr	r4, [sp, #32]
 8007612:	e7f7      	b.n	8007604 <_lv_blend_map+0x2a0>
        }
    }
    /*Masked*/
    else {
        /*Only the mask matters*/
        if(opa > LV_OPA_MAX) {
 8007614:	9b05      	ldr	r3, [sp, #20]
 8007616:	2bfd      	cmp	r3, #253	; 0xfd
 8007618:	d800      	bhi.n	800761c <_lv_blend_map+0x2b8>
 800761a:	e0ce      	b.n	80077ba <_lv_blend_map+0x456>
            /*Go to the first pixel of the row */

            int32_t x_end4 = draw_area_w - 4;
 800761c:	9b07      	ldr	r3, [sp, #28]
 800761e:	3b04      	subs	r3, #4
 8007620:	930c      	str	r3, [sp, #48]	; 0x30

            for(y = 0; y < draw_area_h; y++) {
 8007622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007624:	9a08      	ldr	r2, [sp, #32]
 8007626:	4293      	cmp	r3, r2
 8007628:	dc00      	bgt.n	800762c <_lv_blend_map+0x2c8>
 800762a:	e77e      	b.n	800752a <_lv_blend_map+0x1c6>
                const lv_opa_t * mask_tmp_x = mask;
 800762c:	9b06      	ldr	r3, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
 800762e:	003c      	movs	r4, r7
 8007630:	9d04      	ldr	r5, [sp, #16]
                const lv_opa_t * mask_tmp_x = mask;
 8007632:	9305      	str	r3, [sp, #20]
#if 0
                for(x = 0; x < draw_area_w; x++) {
                    MAP_NORMAL_MASK_PX(x);
                }
#else
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8007634:	2600      	movs	r6, #0
 8007636:	e017      	b.n	8007668 <_lv_blend_map+0x304>
#if LV_COLOR_SCREEN_TRANSP
                    MAP_NORMAL_MASK_PX_SCR_TRANSP(x)
#else
                    MAP_NORMAL_MASK_PX(x)
 8007638:	8821      	ldrh	r1, [r4, #0]
 800763a:	8828      	ldrh	r0, [r5, #0]
 800763c:	f7ff fc1c 	bl	8006e78 <lv_color_mix>
 8007640:	8020      	strh	r0, [r4, #0]
 8007642:	e00b      	b.n	800765c <_lv_blend_map+0x2f8>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8007644:	2203      	movs	r2, #3
 8007646:	9b05      	ldr	r3, [sp, #20]
 8007648:	4213      	tst	r3, r2
 800764a:	d010      	beq.n	800766e <_lv_blend_map+0x30a>
                    MAP_NORMAL_MASK_PX(x)
 800764c:	9b05      	ldr	r3, [sp, #20]
 800764e:	781a      	ldrb	r2, [r3, #0]
 8007650:	2a00      	cmp	r2, #0
 8007652:	d003      	beq.n	800765c <_lv_blend_map+0x2f8>
 8007654:	2aff      	cmp	r2, #255	; 0xff
 8007656:	d1ef      	bne.n	8007638 <_lv_blend_map+0x2d4>
 8007658:	882b      	ldrh	r3, [r5, #0]
 800765a:	8023      	strh	r3, [r4, #0]
 800765c:	9b05      	ldr	r3, [sp, #20]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800765e:	3601      	adds	r6, #1
                    MAP_NORMAL_MASK_PX(x)
 8007660:	3301      	adds	r3, #1
 8007662:	9305      	str	r3, [sp, #20]
 8007664:	3502      	adds	r5, #2
 8007666:	3402      	adds	r4, #2
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8007668:	9b07      	ldr	r3, [sp, #28]
 800766a:	42b3      	cmp	r3, r6
 800766c:	dcea      	bgt.n	8007644 <_lv_blend_map+0x2e0>
 800766e:	9b04      	ldr	r3, [sp, #16]
 8007670:	0074      	lsls	r4, r6, #1
 8007672:	191d      	adds	r5, r3, r4
 8007674:	193c      	adds	r4, r7, r4
#endif
                }

                uint32_t * mask32 = (uint32_t *) mask_tmp_x;
                for(; x < x_end4; x += 4) {
 8007676:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007678:	42b3      	cmp	r3, r6
 800767a:	dc14      	bgt.n	80076a6 <_lv_blend_map+0x342>
 800767c:	960d      	str	r6, [sp, #52]	; 0x34
 800767e:	0074      	lsls	r4, r6, #1
                    }
                    mask32++;
                }

                mask_tmp_x = (const lv_opa_t *)mask32;
                for(; x < draw_area_w ; x++) {
 8007680:	9b07      	ldr	r3, [sp, #28]
 8007682:	42b3      	cmp	r3, r6
 8007684:	dc5a      	bgt.n	800773c <_lv_blend_map+0x3d8>
                    MAP_NORMAL_MASK_PX(x)
#endif
                }
#endif
                disp_buf_first += disp_w;
                mask += draw_area_w;
 8007686:	9a07      	ldr	r2, [sp, #28]
                disp_buf_first += disp_w;
 8007688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                mask += draw_area_w;
 800768a:	4694      	mov	ip, r2
                disp_buf_first += disp_w;
 800768c:	18ff      	adds	r7, r7, r3
                map_buf_first += map_w;
 800768e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                mask += draw_area_w;
 8007690:	9b06      	ldr	r3, [sp, #24]
 8007692:	4463      	add	r3, ip
                map_buf_first += map_w;
 8007694:	4694      	mov	ip, r2
                mask += draw_area_w;
 8007696:	9306      	str	r3, [sp, #24]
                map_buf_first += map_w;
 8007698:	9b04      	ldr	r3, [sp, #16]
 800769a:	4463      	add	r3, ip
 800769c:	9304      	str	r3, [sp, #16]
            for(y = 0; y < draw_area_h; y++) {
 800769e:	9b08      	ldr	r3, [sp, #32]
 80076a0:	3301      	adds	r3, #1
 80076a2:	9308      	str	r3, [sp, #32]
 80076a4:	e7bd      	b.n	8007622 <_lv_blend_map+0x2be>
                    if(*mask32) {
 80076a6:	9b05      	ldr	r3, [sp, #20]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d009      	beq.n	80076c2 <_lv_blend_map+0x35e>
                        if((*mask32) == 0xFFFFFFFF) {
 80076ae:	3301      	adds	r3, #1
 80076b0:	d10e      	bne.n	80076d0 <_lv_blend_map+0x36c>
                            disp_buf_first[x] = map_buf_first[x];
 80076b2:	882b      	ldrh	r3, [r5, #0]
 80076b4:	8023      	strh	r3, [r4, #0]
                            disp_buf_first[x + 1] = map_buf_first[x + 1];
 80076b6:	886b      	ldrh	r3, [r5, #2]
 80076b8:	8063      	strh	r3, [r4, #2]
                            disp_buf_first[x + 2] = map_buf_first[x + 2];
 80076ba:	88ab      	ldrh	r3, [r5, #4]
 80076bc:	80a3      	strh	r3, [r4, #4]
                            MAP_NORMAL_MASK_PX(x + 3)
 80076be:	88eb      	ldrh	r3, [r5, #6]
 80076c0:	80e3      	strh	r3, [r4, #6]
                    mask32++;
 80076c2:	9b05      	ldr	r3, [sp, #20]
                for(; x < x_end4; x += 4) {
 80076c4:	3604      	adds	r6, #4
                    mask32++;
 80076c6:	3304      	adds	r3, #4
 80076c8:	9305      	str	r3, [sp, #20]
 80076ca:	3508      	adds	r5, #8
 80076cc:	3408      	adds	r4, #8
 80076ce:	e7d2      	b.n	8007676 <_lv_blend_map+0x312>
                            MAP_NORMAL_MASK_PX(x)
 80076d0:	9b05      	ldr	r3, [sp, #20]
 80076d2:	781a      	ldrb	r2, [r3, #0]
 80076d4:	2a00      	cmp	r2, #0
 80076d6:	d003      	beq.n	80076e0 <_lv_blend_map+0x37c>
 80076d8:	2aff      	cmp	r2, #255	; 0xff
 80076da:	d11d      	bne.n	8007718 <_lv_blend_map+0x3b4>
 80076dc:	882b      	ldrh	r3, [r5, #0]
 80076de:	8023      	strh	r3, [r4, #0]
                            MAP_NORMAL_MASK_PX(x + 1)
 80076e0:	9b05      	ldr	r3, [sp, #20]
 80076e2:	785a      	ldrb	r2, [r3, #1]
 80076e4:	2a00      	cmp	r2, #0
 80076e6:	d003      	beq.n	80076f0 <_lv_blend_map+0x38c>
 80076e8:	2aff      	cmp	r2, #255	; 0xff
 80076ea:	d11b      	bne.n	8007724 <_lv_blend_map+0x3c0>
 80076ec:	886b      	ldrh	r3, [r5, #2]
 80076ee:	8063      	strh	r3, [r4, #2]
                            MAP_NORMAL_MASK_PX(x + 2)
 80076f0:	9b05      	ldr	r3, [sp, #20]
 80076f2:	789a      	ldrb	r2, [r3, #2]
 80076f4:	2a00      	cmp	r2, #0
 80076f6:	d003      	beq.n	8007700 <_lv_blend_map+0x39c>
 80076f8:	2aff      	cmp	r2, #255	; 0xff
 80076fa:	d119      	bne.n	8007730 <_lv_blend_map+0x3cc>
 80076fc:	88ab      	ldrh	r3, [r5, #4]
 80076fe:	80a3      	strh	r3, [r4, #4]
                            MAP_NORMAL_MASK_PX(x + 3)
 8007700:	9b05      	ldr	r3, [sp, #20]
 8007702:	78da      	ldrb	r2, [r3, #3]
 8007704:	2a00      	cmp	r2, #0
 8007706:	d0dc      	beq.n	80076c2 <_lv_blend_map+0x35e>
 8007708:	2aff      	cmp	r2, #255	; 0xff
 800770a:	d0d8      	beq.n	80076be <_lv_blend_map+0x35a>
 800770c:	88e1      	ldrh	r1, [r4, #6]
 800770e:	88e8      	ldrh	r0, [r5, #6]
 8007710:	f7ff fbb2 	bl	8006e78 <lv_color_mix>
 8007714:	80e0      	strh	r0, [r4, #6]
 8007716:	e7d4      	b.n	80076c2 <_lv_blend_map+0x35e>
                            MAP_NORMAL_MASK_PX(x)
 8007718:	8821      	ldrh	r1, [r4, #0]
 800771a:	8828      	ldrh	r0, [r5, #0]
 800771c:	f7ff fbac 	bl	8006e78 <lv_color_mix>
 8007720:	8020      	strh	r0, [r4, #0]
 8007722:	e7dd      	b.n	80076e0 <_lv_blend_map+0x37c>
                            MAP_NORMAL_MASK_PX(x + 1)
 8007724:	8861      	ldrh	r1, [r4, #2]
 8007726:	8868      	ldrh	r0, [r5, #2]
 8007728:	f7ff fba6 	bl	8006e78 <lv_color_mix>
 800772c:	8060      	strh	r0, [r4, #2]
 800772e:	e7df      	b.n	80076f0 <_lv_blend_map+0x38c>
                            MAP_NORMAL_MASK_PX(x + 2)
 8007730:	88a1      	ldrh	r1, [r4, #4]
 8007732:	88a8      	ldrh	r0, [r5, #4]
 8007734:	f7ff fba0 	bl	8006e78 <lv_color_mix>
 8007738:	80a0      	strh	r0, [r4, #4]
 800773a:	e7e1      	b.n	8007700 <_lv_blend_map+0x39c>
                    MAP_NORMAL_MASK_PX(x)
 800773c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800773e:	9b05      	ldr	r3, [sp, #20]
 8007740:	1a9b      	subs	r3, r3, r2
 8007742:	5d9a      	ldrb	r2, [r3, r6]
 8007744:	2a00      	cmp	r2, #0
 8007746:	d007      	beq.n	8007758 <_lv_blend_map+0x3f4>
 8007748:	9b04      	ldr	r3, [sp, #16]
 800774a:	193d      	adds	r5, r7, r4
 800774c:	191b      	adds	r3, r3, r4
 800774e:	2aff      	cmp	r2, #255	; 0xff
 8007750:	d105      	bne.n	800775e <_lv_blend_map+0x3fa>
 8007752:	9b04      	ldr	r3, [sp, #16]
 8007754:	5b1b      	ldrh	r3, [r3, r4]
 8007756:	533b      	strh	r3, [r7, r4]
                for(; x < draw_area_w ; x++) {
 8007758:	3601      	adds	r6, #1
 800775a:	3402      	adds	r4, #2
 800775c:	e790      	b.n	8007680 <_lv_blend_map+0x31c>
                    MAP_NORMAL_MASK_PX(x)
 800775e:	8829      	ldrh	r1, [r5, #0]
 8007760:	8818      	ldrh	r0, [r3, #0]
 8007762:	f7ff fb89 	bl	8006e78 <lv_color_mix>
 8007766:	8028      	strh	r0, [r5, #0]
 8007768:	e7f6      	b.n	8007758 <_lv_blend_map+0x3f4>
        }
        /*Handle opa and mask values too*/
        else {
            for(y = 0; y < draw_area_h; y++) {
                for(x = 0; x < draw_area_w; x++) {
                    if(mask[x]) {
 800776a:	9b06      	ldr	r3, [sp, #24]
 800776c:	5d5b      	ldrb	r3, [r3, r5]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00c      	beq.n	800778c <_lv_blend_map+0x428>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 8007772:	9a05      	ldr	r2, [sp, #20]
 8007774:	2bfc      	cmp	r3, #252	; 0xfc
 8007776:	d801      	bhi.n	800777c <_lv_blend_map+0x418>
 8007778:	4353      	muls	r3, r2
 800777a:	0a1a      	lsrs	r2, r3, #8
 800777c:	0068      	lsls	r0, r5, #1
                                                    &disp_buf_first[x].ch.alpha);
                        }
                        else
#endif
                        {
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
 800777e:	9b04      	ldr	r3, [sp, #16]
 8007780:	183e      	adds	r6, r7, r0
 8007782:	8831      	ldrh	r1, [r6, #0]
 8007784:	5a18      	ldrh	r0, [r3, r0]
 8007786:	f7ff fb77 	bl	8006e78 <lv_color_mix>
 800778a:	8030      	strh	r0, [r6, #0]
                for(x = 0; x < draw_area_w; x++) {
 800778c:	3501      	adds	r5, #1
 800778e:	9b07      	ldr	r3, [sp, #28]
 8007790:	42ab      	cmp	r3, r5
 8007792:	dcea      	bgt.n	800776a <_lv_blend_map+0x406>
                        }
                    }
                }
                disp_buf_first += disp_w;
                mask += draw_area_w;
 8007794:	9a07      	ldr	r2, [sp, #28]
                disp_buf_first += disp_w;
 8007796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                mask += draw_area_w;
 8007798:	4694      	mov	ip, r2
                disp_buf_first += disp_w;
 800779a:	18ff      	adds	r7, r7, r3
                map_buf_first += map_w;
 800779c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                mask += draw_area_w;
 800779e:	9b06      	ldr	r3, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
 80077a0:	3401      	adds	r4, #1
                mask += draw_area_w;
 80077a2:	4463      	add	r3, ip
                map_buf_first += map_w;
 80077a4:	4694      	mov	ip, r2
                mask += draw_area_w;
 80077a6:	9306      	str	r3, [sp, #24]
                map_buf_first += map_w;
 80077a8:	9b04      	ldr	r3, [sp, #16]
 80077aa:	4463      	add	r3, ip
 80077ac:	9304      	str	r3, [sp, #16]
            for(y = 0; y < draw_area_h; y++) {
 80077ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077b0:	42a3      	cmp	r3, r4
 80077b2:	dc00      	bgt.n	80077b6 <_lv_blend_map+0x452>
 80077b4:	e6b9      	b.n	800752a <_lv_blend_map+0x1c6>
                for(x = 0; x < draw_area_w; x++) {
 80077b6:	2500      	movs	r5, #0
 80077b8:	e7e9      	b.n	800778e <_lv_blend_map+0x42a>
            for(y = 0; y < draw_area_h; y++) {
 80077ba:	9c08      	ldr	r4, [sp, #32]
 80077bc:	e7f7      	b.n	80077ae <_lv_blend_map+0x44a>
	...

080077c0 <show_error>:
        }
    }
}

static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)
{
 80077c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077c2:	0005      	movs	r5, r0
 80077c4:	000e      	movs	r6, r1
 80077c6:	b0a1      	sub	sp, #132	; 0x84
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
 80077c8:	ac0b      	add	r4, sp, #44	; 0x2c
 80077ca:	0020      	movs	r0, r4
{
 80077cc:	0017      	movs	r7, r2
    lv_draw_rect_dsc_init(&rect_dsc);
 80077ce:	f002 fc1d 	bl	800a00c <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = LV_COLOR_WHITE;
 80077d2:	4b0a      	ldr	r3, [pc, #40]	; (80077fc <show_error+0x3c>)
    lv_draw_rect(coords, clip_area, &rect_dsc);
 80077d4:	0022      	movs	r2, r4
    rect_dsc.bg_color = LV_COLOR_WHITE;
 80077d6:	881b      	ldrh	r3, [r3, #0]
    lv_draw_rect(coords, clip_area, &rect_dsc);
 80077d8:	0031      	movs	r1, r6
 80077da:	0028      	movs	r0, r5
    rect_dsc.bg_color = LV_COLOR_WHITE;
 80077dc:	8063      	strh	r3, [r4, #2]
    lv_draw_rect(coords, clip_area, &rect_dsc);
 80077de:	f002 fc3d 	bl	800a05c <lv_draw_rect>

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 80077e2:	a802      	add	r0, sp, #8
 80077e4:	f000 fbb6 	bl	8007f54 <lv_draw_label_dsc_init>
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
 80077e8:	2300      	movs	r3, #0
 80077ea:	aa02      	add	r2, sp, #8
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	0031      	movs	r1, r6
 80077f0:	003b      	movs	r3, r7
 80077f2:	0028      	movs	r0, r5
 80077f4:	f000 fbc6 	bl	8007f84 <lv_draw_label>
}
 80077f8:	b021      	add	sp, #132	; 0x84
 80077fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077fc:	0800f022 	.word	0x0800f022

08007800 <lv_area_copy>:
{
 8007800:	2300      	movs	r3, #0
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
 8007802:	5cca      	ldrb	r2, [r1, r3]
 8007804:	54c2      	strb	r2, [r0, r3]
 8007806:	3301      	adds	r3, #1
    while(len) {
 8007808:	2b08      	cmp	r3, #8
 800780a:	d1fa      	bne.n	8007802 <lv_area_copy+0x2>
}
 800780c:	4770      	bx	lr
	...

08007810 <lv_draw_map>:
{
 8007810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007812:	b0a3      	sub	sp, #140	; 0x8c
 8007814:	001e      	movs	r6, r3
 8007816:	ab28      	add	r3, sp, #160	; 0xa0
 8007818:	781b      	ldrb	r3, [r3, #0]
    lv_area_copy(&draw_area, clip_area);
 800781a:	ac1e      	add	r4, sp, #120	; 0x78
{
 800781c:	9312      	str	r3, [sp, #72]	; 0x48
 800781e:	ab29      	add	r3, sp, #164	; 0xa4
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	0005      	movs	r5, r0
    lv_area_copy(&draw_area, clip_area);
 8007824:	0020      	movs	r0, r4
{
 8007826:	910c      	str	r1, [sp, #48]	; 0x30
 8007828:	9208      	str	r2, [sp, #32]
 800782a:	930d      	str	r3, [sp, #52]	; 0x34
    lv_area_copy(&draw_area, clip_area);
 800782c:	f7ff ffe8 	bl	8007800 <lv_area_copy>
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 8007830:	f7fe fc6a 	bl	8006108 <_lv_refr_get_disp_refreshing>
 8007834:	9006      	str	r0, [sp, #24]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8007836:	f003 ffc1 	bl	800b7bc <lv_disp_get_buf>
    draw_area.x1 -= disp_area->x1;
 800783a:	8822      	ldrh	r2, [r4, #0]
 800783c:	8a03      	ldrh	r3, [r0, #16]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800783e:	900a      	str	r0, [sp, #40]	; 0x28
    draw_area.x1 -= disp_area->x1;
 8007840:	1ad2      	subs	r2, r2, r3
 8007842:	8022      	strh	r2, [r4, #0]
    draw_area.x2 -= disp_area->x1;
 8007844:	88a2      	ldrh	r2, [r4, #4]
    draw_area.y1 -= disp_area->y1;
 8007846:	8a40      	ldrh	r0, [r0, #18]
 8007848:	8861      	ldrh	r1, [r4, #2]
    draw_area.x2 -= disp_area->x1;
 800784a:	1ad2      	subs	r2, r2, r3
    draw_area.y2 -= disp_area->y1;
 800784c:	88e3      	ldrh	r3, [r4, #6]
    draw_area.y1 -= disp_area->y1;
 800784e:	1a09      	subs	r1, r1, r0
    draw_area.y2 -= disp_area->y1;
 8007850:	1a1b      	subs	r3, r3, r0
    draw_area.y1 -= disp_area->y1;
 8007852:	8061      	strh	r1, [r4, #2]
    draw_area.x2 -= disp_area->x1;
 8007854:	80a2      	strh	r2, [r4, #4]
    draw_area.y2 -= disp_area->y1;
 8007856:	80e3      	strh	r3, [r4, #6]
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 8007858:	f002 fabc 	bl	8009dd4 <lv_draw_mask_get_cnt>
 800785c:	900e      	str	r0, [sp, #56]	; 0x38
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
 800785e:	2800      	cmp	r0, #0
 8007860:	d120      	bne.n	80078a4 <lv_draw_map+0x94>
 8007862:	8873      	ldrh	r3, [r6, #2]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d11d      	bne.n	80078a4 <lv_draw_map+0x94>
 8007868:	3301      	adds	r3, #1
 800786a:	8932      	ldrh	r2, [r6, #8]
 800786c:	33ff      	adds	r3, #255	; 0xff
 800786e:	429a      	cmp	r2, r3
 8007870:	d118      	bne.n	80078a4 <lv_draw_map+0x94>
 8007872:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007874:	2b00      	cmp	r3, #0
 8007876:	d115      	bne.n	80078a4 <lv_draw_map+0x94>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 8007878:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800787a:	2b00      	cmp	r3, #0
 800787c:	d000      	beq.n	8007880 <lv_draw_map+0x70>
 800787e:	e089      	b.n	8007994 <lv_draw_map+0x184>
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 8007880:	2202      	movs	r2, #2
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 8007882:	7ab3      	ldrb	r3, [r6, #10]
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 8007884:	9207      	str	r2, [sp, #28]
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 8007886:	2b00      	cmp	r3, #0
 8007888:	d111      	bne.n	80078ae <lv_draw_map+0x9e>
        _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, draw_dsc->opa,
 800788a:	7bb2      	ldrb	r2, [r6, #14]
 800788c:	0029      	movs	r1, r5
 800788e:	9202      	str	r2, [sp, #8]
 8007890:	7832      	ldrb	r2, [r6, #0]
 8007892:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007894:	9201      	str	r2, [sp, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	9200      	str	r2, [sp, #0]
 800789a:	9a08      	ldr	r2, [sp, #32]
 800789c:	f7ff fd62 	bl	8007364 <_lv_blend_map>
}
 80078a0:	b023      	add	sp, #140	; 0x8c
 80078a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 80078a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078a6:	1e5a      	subs	r2, r3, #1
 80078a8:	4193      	sbcs	r3, r2
 80078aa:	3302      	adds	r3, #2
 80078ac:	9307      	str	r3, [sp, #28]
        int32_t map_w = lv_area_get_width(map_area);
 80078ae:	2300      	movs	r3, #0
 80078b0:	5eea      	ldrsh	r2, [r5, r3]
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
 80078b2:	ac1e      	add	r4, sp, #120	; 0x78
        int32_t map_w = lv_area_get_width(map_area);
 80078b4:	4694      	mov	ip, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80078b6:	4663      	mov	r3, ip
 80078b8:	88aa      	ldrh	r2, [r5, #4]
 80078ba:	3201      	adds	r2, #1
 80078bc:	1ad2      	subs	r2, r2, r3
 80078be:	b212      	sxth	r2, r2
 80078c0:	920f      	str	r2, [sp, #60]	; 0x3c
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
 80078c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078c4:	2302      	movs	r3, #2
 80078c6:	5eed      	ldrsh	r5, [r5, r3]
 80078c8:	2312      	movs	r3, #18
 80078ca:	5ed1      	ldrsh	r1, [r2, r3]
 80078cc:	2302      	movs	r3, #2
 80078ce:	5ee0      	ldrsh	r0, [r4, r3]
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 80078d0:	2300      	movs	r3, #0
 80078d2:	5ee7      	ldrsh	r7, [r4, r3]
 80078d4:	2310      	movs	r3, #16
 80078d6:	5ed2      	ldrsh	r2, [r2, r3]
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
 80078d8:	1a6d      	subs	r5, r5, r1
 80078da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078dc:	1b45      	subs	r5, r0, r5
 80078de:	435d      	muls	r5, r3
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 80078e0:	4663      	mov	r3, ip
 80078e2:	1a9b      	subs	r3, r3, r2
 80078e4:	1afb      	subs	r3, r7, r3
 80078e6:	195b      	adds	r3, r3, r5
 80078e8:	9d07      	ldr	r5, [sp, #28]
        blend_area.x1 = draw_area.x1 + disp_area->x1;
 80078ea:	b2bf      	uxth	r7, r7
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 80078ec:	436b      	muls	r3, r5
 80078ee:	9d08      	ldr	r5, [sp, #32]
        blend_area.x1 = draw_area.x1 + disp_area->x1;
 80078f0:	18ba      	adds	r2, r7, r2
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 80078f2:	18eb      	adds	r3, r5, r3
 80078f4:	9309      	str	r3, [sp, #36]	; 0x24
 80078f6:	88a3      	ldrh	r3, [r4, #4]
        blend_area.x1 = draw_area.x1 + disp_area->x1;
 80078f8:	b292      	uxth	r2, r2
 80078fa:	3301      	adds	r3, #1
 80078fc:	1bdf      	subs	r7, r3, r7
 80078fe:	b2bf      	uxth	r7, r7
 8007900:	b23b      	sxth	r3, r7
 8007902:	930b      	str	r3, [sp, #44]	; 0x2c
        blend_area.y1 = disp_area->y1 + draw_area.y1;
 8007904:	b283      	uxth	r3, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007906:	88e0      	ldrh	r0, [r4, #6]
 8007908:	1859      	adds	r1, r3, r1
 800790a:	3001      	adds	r0, #1
 800790c:	1ac0      	subs	r0, r0, r3
 800790e:	b203      	sxth	r3, r0
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
 8007910:	3f01      	subs	r7, #1
 8007912:	9317      	str	r3, [sp, #92]	; 0x5c
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
 8007914:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        blend_area.x1 = draw_area.x1 + disp_area->x1;
 8007916:	ad20      	add	r5, sp, #128	; 0x80
        blend_area.y1 = disp_area->y1 + draw_area.y1;
 8007918:	b209      	sxth	r1, r1
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
 800791a:	19d7      	adds	r7, r2, r7
        blend_area.x1 = draw_area.x1 + disp_area->x1;
 800791c:	802a      	strh	r2, [r5, #0]
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
 800791e:	80af      	strh	r7, [r5, #4]
        blend_area.y1 = disp_area->y1 + draw_area.y1;
 8007920:	8069      	strh	r1, [r5, #2]
        blend_area.y2 = blend_area.y1;
 8007922:	80e9      	strh	r1, [r5, #6]
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
 8007924:	2b00      	cmp	r3, #0
 8007926:	d000      	beq.n	800792a <lv_draw_map+0x11a>
 8007928:	e09a      	b.n	8007a60 <lv_draw_map+0x250>
 800792a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800792c:	2b00      	cmp	r3, #0
 800792e:	d000      	beq.n	8007932 <lv_draw_map+0x122>
 8007930:	e096      	b.n	8007a60 <lv_draw_map+0x250>
 8007932:	7ab3      	ldrb	r3, [r6, #10]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d000      	beq.n	800793a <lv_draw_map+0x12a>
 8007938:	e092      	b.n	8007a60 <lv_draw_map+0x250>
 800793a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800793c:	2b00      	cmp	r3, #0
 800793e:	d100      	bne.n	8007942 <lv_draw_map+0x132>
 8007940:	e08e      	b.n	8007a60 <lv_draw_map+0x250>
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
 8007942:	9806      	ldr	r0, [sp, #24]
 8007944:	f003 fec8 	bl	800b6d8 <lv_disp_get_hor_res>
 8007948:	0005      	movs	r5, r0
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
 800794a:	0020      	movs	r0, r4
 800794c:	f004 f81b 	bl	800b986 <lv_area_get_size>
 8007950:	42a8      	cmp	r0, r5
 8007952:	d803      	bhi.n	800795c <lv_draw_map+0x14c>
 8007954:	0020      	movs	r0, r4
 8007956:	f004 f816 	bl	800b986 <lv_area_get_size>
 800795a:	0005      	movs	r5, r0
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800795c:	0068      	lsls	r0, r5, #1
 800795e:	f004 fdd9 	bl	800c514 <_lv_mem_buf_get>
 8007962:	0007      	movs	r7, r0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 8007964:	0028      	movs	r0, r5
 8007966:	f004 fdd5 	bl	800c514 <_lv_mem_buf_get>
                map_buf_tmp += map_w * px_size_byte;
 800796a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800796c:	9a07      	ldr	r2, [sp, #28]
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800796e:	9008      	str	r0, [sp, #32]
                map_buf_tmp += map_w * px_size_byte;
 8007970:	4353      	muls	r3, r2
 8007972:	930d      	str	r3, [sp, #52]	; 0x34
            for(y = 0; y < draw_area_h; y++) {
 8007974:	2300      	movs	r3, #0
 8007976:	930a      	str	r3, [sp, #40]	; 0x28
 8007978:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800797a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800797c:	428a      	cmp	r2, r1
 800797e:	dd54      	ble.n	8007a2a <lv_draw_map+0x21a>
 8007980:	005a      	lsls	r2, r3, #1
 8007982:	18ba      	adds	r2, r7, r2
 8007984:	920e      	str	r2, [sp, #56]	; 0x38
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 8007986:	2200      	movs	r2, #0
 8007988:	9206      	str	r2, [sp, #24]
                    mask_buf[px_i] = px_opa;
 800798a:	9a08      	ldr	r2, [sp, #32]
                map_px = map_buf_tmp;
 800798c:	9909      	ldr	r1, [sp, #36]	; 0x24
                    mask_buf[px_i] = px_opa;
 800798e:	18d2      	adds	r2, r2, r3
 8007990:	920f      	str	r2, [sp, #60]	; 0x3c
 8007992:	e015      	b.n	80079c0 <lv_draw_map+0x1b0>
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 8007994:	2303      	movs	r3, #3
 8007996:	e789      	b.n	80078ac <lv_draw_map+0x9c>
                    lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8007998:	7888      	ldrb	r0, [r1, #2]
                    mask_buf[px_i] = px_opa;
 800799a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800799c:	9a06      	ldr	r2, [sp, #24]
 800799e:	54a0      	strb	r0, [r4, r2]
                    if(px_opa) {
 80079a0:	2800      	cmp	r0, #0
 80079a2:	d008      	beq.n	80079b6 <lv_draw_map+0x1a6>
                        map2[px_i].full =  map_px[0] + (map_px[1] << 8);
 80079a4:	7848      	ldrb	r0, [r1, #1]
 80079a6:	0054      	lsls	r4, r2, #1
 80079a8:	0202      	lsls	r2, r0, #8
 80079aa:	7808      	ldrb	r0, [r1, #0]
 80079ac:	4684      	mov	ip, r0
 80079ae:	4462      	add	r2, ip
 80079b0:	0010      	movs	r0, r2
 80079b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079b4:	5310      	strh	r0, [r2, r4]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 80079b6:	9a06      	ldr	r2, [sp, #24]
 80079b8:	3201      	adds	r2, #1
 80079ba:	9206      	str	r2, [sp, #24]
 80079bc:	9a07      	ldr	r2, [sp, #28]
 80079be:	1889      	adds	r1, r1, r2
 80079c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80079c2:	9806      	ldr	r0, [sp, #24]
 80079c4:	4282      	cmp	r2, r0
 80079c6:	dce7      	bgt.n	8007998 <lv_draw_map+0x188>
 80079c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079ca:	aa02      	add	r2, sp, #8
 80079cc:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80079ce:	2900      	cmp	r1, #0
 80079d0:	da00      	bge.n	80079d4 <lv_draw_map+0x1c4>
 80079d2:	2200      	movs	r2, #0
                map_buf_tmp += map_w * px_size_byte;
 80079d4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80079d6:	b212      	sxth	r2, r2
 80079d8:	468c      	mov	ip, r1
 80079da:	189b      	adds	r3, r3, r2
 80079dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 80079de:	a91e      	add	r1, sp, #120	; 0x78
                map_buf_tmp += map_w * px_size_byte;
 80079e0:	4462      	add	r2, ip
 80079e2:	9209      	str	r2, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80079e4:	888a      	ldrh	r2, [r1, #4]
 80079e6:	8809      	ldrh	r1, [r1, #0]
 80079e8:	3201      	adds	r2, #1
 80079ea:	1a52      	subs	r2, r2, r1
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 80079ec:	b212      	sxth	r2, r2
 80079ee:	18d2      	adds	r2, r2, r3
 80079f0:	ac20      	add	r4, sp, #128	; 0x80
 80079f2:	42aa      	cmp	r2, r5
 80079f4:	d206      	bcs.n	8007a04 <lv_draw_map+0x1f4>
                    blend_area.y2 ++;
 80079f6:	88e2      	ldrh	r2, [r4, #6]
 80079f8:	3201      	adds	r2, #1
 80079fa:	80e2      	strh	r2, [r4, #6]
            for(y = 0; y < draw_area_h; y++) {
 80079fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079fe:	3201      	adds	r2, #1
 8007a00:	920a      	str	r2, [sp, #40]	; 0x28
 8007a02:	e7b9      	b.n	8007978 <lv_draw_map+0x168>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
 8007a04:	7bb3      	ldrb	r3, [r6, #14]
 8007a06:	003a      	movs	r2, r7
 8007a08:	9302      	str	r3, [sp, #8]
 8007a0a:	7833      	ldrb	r3, [r6, #0]
 8007a0c:	0021      	movs	r1, r4
 8007a0e:	9301      	str	r3, [sp, #4]
 8007a10:	2302      	movs	r3, #2
 8007a12:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	9b08      	ldr	r3, [sp, #32]
 8007a18:	f7ff fca4 	bl	8007364 <_lv_blend_map>
                    blend_area.y1 = blend_area.y2 + 1;
 8007a1c:	88e3      	ldrh	r3, [r4, #6]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	b21b      	sxth	r3, r3
 8007a22:	8063      	strh	r3, [r4, #2]
                    blend_area.y2 = blend_area.y1;
 8007a24:	80e3      	strh	r3, [r4, #6]
                    px_i = 0;
 8007a26:	2300      	movs	r3, #0
 8007a28:	e7e8      	b.n	80079fc <lv_draw_map+0x1ec>
            if(blend_area.y1 != blend_area.y2) {
 8007a2a:	a920      	add	r1, sp, #128	; 0x80
 8007a2c:	2206      	movs	r2, #6
 8007a2e:	5e8b      	ldrsh	r3, [r1, r2]
 8007a30:	2002      	movs	r0, #2
 8007a32:	5e0a      	ldrsh	r2, [r1, r0]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d00c      	beq.n	8007a52 <lv_draw_map+0x242>
                blend_area.y2--;
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	80cb      	strh	r3, [r1, #6]
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
 8007a3c:	7bb3      	ldrb	r3, [r6, #14]
 8007a3e:	003a      	movs	r2, r7
 8007a40:	9302      	str	r3, [sp, #8]
 8007a42:	7833      	ldrb	r3, [r6, #0]
 8007a44:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007a46:	9301      	str	r3, [sp, #4]
 8007a48:	2302      	movs	r3, #2
 8007a4a:	9300      	str	r3, [sp, #0]
 8007a4c:	9b08      	ldr	r3, [sp, #32]
 8007a4e:	f7ff fc89 	bl	8007364 <_lv_blend_map>
            _lv_mem_buf_release(mask_buf);
 8007a52:	9808      	ldr	r0, [sp, #32]
 8007a54:	f004 fc66 	bl	800c324 <_lv_mem_buf_release>
            _lv_mem_buf_release(map2);
 8007a58:	0038      	movs	r0, r7
            _lv_mem_buf_release(map2);
 8007a5a:	f004 fc63 	bl	800c324 <_lv_mem_buf_release>
}
 8007a5e:	e71f      	b.n	80078a0 <lv_draw_map+0x90>
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
 8007a60:	9806      	ldr	r0, [sp, #24]
 8007a62:	f003 fe39 	bl	800b6d8 <lv_disp_get_hor_res>
 8007a66:	9008      	str	r0, [sp, #32]
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
 8007a68:	a81e      	add	r0, sp, #120	; 0x78
 8007a6a:	f003 ff8c 	bl	800b986 <lv_area_get_size>
 8007a6e:	9b08      	ldr	r3, [sp, #32]
 8007a70:	4298      	cmp	r0, r3
 8007a72:	d803      	bhi.n	8007a7c <lv_draw_map+0x26c>
 8007a74:	a81e      	add	r0, sp, #120	; 0x78
 8007a76:	f003 ff86 	bl	800b986 <lv_area_get_size>
 8007a7a:	9008      	str	r0, [sp, #32]
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 8007a7c:	9b08      	ldr	r3, [sp, #32]
 8007a7e:	0058      	lsls	r0, r3, #1
 8007a80:	f004 fd48 	bl	800c514 <_lv_mem_buf_get>
 8007a84:	9010      	str	r0, [sp, #64]	; 0x40
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 8007a86:	9808      	ldr	r0, [sp, #32]
 8007a88:	f004 fd44 	bl	800c514 <_lv_mem_buf_get>
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
 8007a8c:	7ab3      	ldrb	r3, [r6, #10]
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 8007a8e:	0007      	movs	r7, r0
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
 8007a90:	43da      	mvns	r2, r3
 8007a92:	b2d2      	uxtb	r2, r2
 8007a94:	9213      	str	r2, [sp, #76]	; 0x4c
            if(draw_dsc->recolor_opa != 0) {
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d042      	beq.n	8007b20 <lv_draw_map+0x310>
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
 8007a9a:	7b72      	ldrb	r2, [r6, #13]
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	08d2      	lsrs	r2, r2, #3
 8007aa0:	435a      	muls	r2, r3
 8007aa2:	9215      	str	r2, [sp, #84]	; 0x54
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 8007aa4:	89b2      	ldrh	r2, [r6, #12]
 8007aa6:	0552      	lsls	r2, r2, #21
 8007aa8:	0e92      	lsrs	r2, r2, #26
 8007aaa:	435a      	muls	r2, r3
 8007aac:	9218      	str	r2, [sp, #96]	; 0x60
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 8007aae:	7b32      	ldrb	r2, [r6, #12]
 8007ab0:	06d2      	lsls	r2, r2, #27
 8007ab2:	0ed2      	lsrs	r2, r2, #27
 8007ab4:	435a      	muls	r2, r3
 8007ab6:	9211      	str	r2, [sp, #68]	; 0x44
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 8007ab8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007aba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007abc:	4313      	orrs	r3, r2
 8007abe:	9316      	str	r3, [sp, #88]	; 0x58
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	9306      	str	r3, [sp, #24]
 8007ac4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d109      	bne.n	8007ade <lv_draw_map+0x2ce>
 8007aca:	8873      	ldrh	r3, [r6, #2]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d106      	bne.n	8007ade <lv_draw_map+0x2ce>
 8007ad0:	8933      	ldrh	r3, [r6, #8]
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	3bff      	subs	r3, #255	; 0xff
 8007ad6:	1e5a      	subs	r2, r3, #1
 8007ad8:	4193      	sbcs	r3, r2
 8007ada:	3301      	adds	r3, #1
 8007adc:	9306      	str	r3, [sp, #24]
            if(other_mask_cnt) {
 8007ade:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d003      	beq.n	8007aec <lv_draw_map+0x2dc>
                _lv_memset_ff(mask_buf, mask_buf_size);
 8007ae4:	9908      	ldr	r1, [sp, #32]
 8007ae6:	0038      	movs	r0, r7
 8007ae8:	f004 fdc6 	bl	800c678 <_lv_memset_ff>
                map_buf_tmp += map_w * px_size_byte;
 8007aec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007aee:	9a07      	ldr	r2, [sp, #28]
 8007af0:	4353      	muls	r3, r2
 8007af2:	9319      	str	r3, [sp, #100]	; 0x64
 8007af4:	2300      	movs	r3, #0
 8007af6:	0018      	movs	r0, r3
 8007af8:	930f      	str	r3, [sp, #60]	; 0x3c
            for(y = 0; y < draw_area_h; y++) {
 8007afa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007afc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007afe:	4293      	cmp	r3, r2
 8007b00:	dc00      	bgt.n	8007b04 <lv_draw_map+0x2f4>
 8007b02:	e0e7      	b.n	8007cd4 <lv_draw_map+0x4c4>
                            if(c.full == chroma_keyed_color.full) {
 8007b04:	23fc      	movs	r3, #252	; 0xfc
 8007b06:	00db      	lsls	r3, r3, #3
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b0c:	931a      	str	r3, [sp, #104]	; 0x68
 8007b0e:	0043      	lsls	r3, r0, #1
 8007b10:	18d3      	adds	r3, r2, r3
 8007b12:	931c      	str	r3, [sp, #112]	; 0x70
                map_px = map_buf_tmp;
 8007b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 8007b16:	2500      	movs	r5, #0
                map_px = map_buf_tmp;
 8007b18:	469c      	mov	ip, r3
 8007b1a:	183b      	adds	r3, r7, r0
 8007b1c:	9314      	str	r3, [sp, #80]	; 0x50
 8007b1e:	e00f      	b.n	8007b40 <lv_draw_map+0x330>
            uint16_t recolor_premult[3] = {0};
 8007b20:	9311      	str	r3, [sp, #68]	; 0x44
 8007b22:	9318      	str	r3, [sp, #96]	; 0x60
 8007b24:	9315      	str	r3, [sp, #84]	; 0x54
 8007b26:	e7c7      	b.n	8007ab8 <lv_draw_map+0x2a8>
                        if(alpha_byte) {
 8007b28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d050      	beq.n	8007bd0 <lv_draw_map+0x3c0>
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8007b2e:	4663      	mov	r3, ip
                            mask_buf[px_i] = px_opa;
 8007b30:	9a14      	ldr	r2, [sp, #80]	; 0x50
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8007b32:	789b      	ldrb	r3, [r3, #2]
                            mask_buf[px_i] = px_opa;
 8007b34:	5553      	strb	r3, [r2, r5]
                            if(px_opa == 0) {
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d14d      	bne.n	8007bd6 <lv_draw_map+0x3c6>
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 8007b3a:	9b07      	ldr	r3, [sp, #28]
 8007b3c:	3501      	adds	r5, #1
 8007b3e:	449c      	add	ip, r3
 8007b40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b42:	42ab      	cmp	r3, r5
 8007b44:	dcf0      	bgt.n	8007b28 <lv_draw_map+0x318>
 8007b46:	ab02      	add	r3, sp, #8
 8007b48:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
 8007b4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	da00      	bge.n	8007b52 <lv_draw_map+0x342>
 8007b50:	2400      	movs	r4, #0
                if(other_mask_cnt) {
 8007b52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b54:	b224      	sxth	r4, r4
 8007b56:	1824      	adds	r4, r4, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d021      	beq.n	8007ba0 <lv_draw_map+0x390>
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + vdb->area.x1, y + draw_area.y1 + vdb->area.y1,
 8007b5c:	183b      	adds	r3, r7, r0
 8007b5e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007b60:	9314      	str	r3, [sp, #80]	; 0x50
 8007b62:	ad1e      	add	r5, sp, #120	; 0x78
 8007b64:	8a40      	ldrh	r0, [r0, #18]
 8007b66:	886a      	ldrh	r2, [r5, #2]
 8007b68:	88ab      	ldrh	r3, [r5, #4]
 8007b6a:	1812      	adds	r2, r2, r0
 8007b6c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007b6e:	8829      	ldrh	r1, [r5, #0]
 8007b70:	1812      	adds	r2, r2, r0
 8007b72:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007b74:	3301      	adds	r3, #1
 8007b76:	8a00      	ldrh	r0, [r0, #16]
 8007b78:	1a5b      	subs	r3, r3, r1
 8007b7a:	1809      	adds	r1, r1, r0
 8007b7c:	b21b      	sxth	r3, r3
 8007b7e:	b212      	sxth	r2, r2
 8007b80:	b209      	sxth	r1, r1
 8007b82:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007b84:	f002 f8e4 	bl	8009d50 <lv_draw_mask_apply>
                    if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
 8007b88:	2800      	cmp	r0, #0
 8007b8a:	d175      	bne.n	8007c78 <lv_draw_map+0x468>
 8007b8c:	88a9      	ldrh	r1, [r5, #4]
 8007b8e:	882b      	ldrh	r3, [r5, #0]
 8007b90:	3101      	adds	r1, #1
 8007b92:	1ac9      	subs	r1, r1, r3
                        _lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
 8007b94:	b209      	sxth	r1, r1
 8007b96:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007b98:	f004 fd44 	bl	800c624 <_lv_memset_00>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	9306      	str	r3, [sp, #24]
                map_buf_tmp += map_w * px_size_byte;
 8007ba0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba4:	4694      	mov	ip, r2
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 8007ba6:	aa1e      	add	r2, sp, #120	; 0x78
                map_buf_tmp += map_w * px_size_byte;
 8007ba8:	4463      	add	r3, ip
 8007baa:	9309      	str	r3, [sp, #36]	; 0x24
 8007bac:	8893      	ldrh	r3, [r2, #4]
 8007bae:	8812      	ldrh	r2, [r2, #0]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	1a9b      	subs	r3, r3, r2
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 8007bb4:	b21b      	sxth	r3, r3
 8007bb6:	9a08      	ldr	r2, [sp, #32]
 8007bb8:	191b      	adds	r3, r3, r4
 8007bba:	ad20      	add	r5, sp, #128	; 0x80
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d25f      	bcs.n	8007c80 <lv_draw_map+0x470>
                    blend_area.y2 ++;
 8007bc0:	88eb      	ldrh	r3, [r5, #6]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	80eb      	strh	r3, [r5, #6]
            for(y = 0; y < draw_area_h; y++) {
 8007bc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007bc8:	0020      	movs	r0, r4
 8007bca:	3301      	adds	r3, #1
 8007bcc:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bce:	e794      	b.n	8007afa <lv_draw_map+0x2ea>
                            mask_buf[px_i] = 0xFF;
 8007bd0:	22ff      	movs	r2, #255	; 0xff
 8007bd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007bd4:	555a      	strb	r2, [r3, r5]
                        c.full =  map_px[0] + (map_px[1] << 8);
 8007bd6:	4663      	mov	r3, ip
 8007bd8:	785a      	ldrb	r2, [r3, #1]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	0212      	lsls	r2, r2, #8
 8007bde:	189b      	adds	r3, r3, r2
                        if(chroma_key) {
 8007be0:	9a12      	ldr	r2, [sp, #72]	; 0x48
                        c.full =  map_px[0] + (map_px[1] << 8);
 8007be2:	b29b      	uxth	r3, r3
                        if(chroma_key) {
 8007be4:	2a00      	cmp	r2, #0
 8007be6:	d006      	beq.n	8007bf6 <lv_draw_map+0x3e6>
                            if(c.full == chroma_keyed_color.full) {
 8007be8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d103      	bne.n	8007bf6 <lv_draw_map+0x3e6>
                                mask_buf[px_i] = LV_OPA_TRANSP;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007bf2:	5553      	strb	r3, [r2, r5]
                                continue;
 8007bf4:	e7a1      	b.n	8007b3a <lv_draw_map+0x32a>
                    if(draw_dsc->recolor_opa != 0) {
 8007bf6:	7ab2      	ldrb	r2, [r6, #10]
 8007bf8:	2a00      	cmp	r2, #0
 8007bfa:	d039      	beq.n	8007c70 <lv_draw_map+0x460>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8007bfc:	211f      	movs	r1, #31
 8007bfe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007c00:	0adc      	lsrs	r4, r3, #11
 8007c02:	4354      	muls	r4, r2
 8007c04:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007c06:	18a4      	adds	r4, r4, r2
 8007c08:	4a3f      	ldr	r2, [pc, #252]	; (8007d08 <lv_draw_map+0x4f8>)
 8007c0a:	3480      	adds	r4, #128	; 0x80
 8007c0c:	4354      	muls	r4, r2
 8007c0e:	0de4      	lsrs	r4, r4, #23
 8007c10:	400c      	ands	r4, r1
 8007c12:	941b      	str	r4, [sp, #108]	; 0x6c
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8007c14:	0559      	lsls	r1, r3, #21
 8007c16:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007c18:	0e89      	lsrs	r1, r1, #26
 8007c1a:	4361      	muls	r1, r4
 8007c1c:	9c18      	ldr	r4, [sp, #96]	; 0x60
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8007c1e:	06db      	lsls	r3, r3, #27
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8007c20:	1909      	adds	r1, r1, r4
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8007c22:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007c24:	0edb      	lsrs	r3, r3, #27
 8007c26:	4363      	muls	r3, r4
 8007c28:	9c11      	ldr	r4, [sp, #68]	; 0x44
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8007c2a:	3180      	adds	r1, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8007c2c:	191b      	adds	r3, r3, r4
 8007c2e:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8007c30:	4351      	muls	r1, r2
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8007c32:	435a      	muls	r2, r3
 8007c34:	231f      	movs	r3, #31
 8007c36:	0dd2      	lsrs	r2, r2, #23
 8007c38:	401a      	ands	r2, r3
 8007c3a:	9305      	str	r3, [sp, #20]
 8007c3c:	ac02      	add	r4, sp, #8
 8007c3e:	334d      	adds	r3, #77	; 0x4d
 8007c40:	18e4      	adds	r4, r4, r3
 8007c42:	8824      	ldrh	r4, [r4, #0]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8007c44:	0dc9      	lsrs	r1, r1, #23
 8007c46:	1c23      	adds	r3, r4, #0
 8007c48:	001c      	movs	r4, r3
 8007c4a:	231f      	movs	r3, #31
 8007c4c:	439c      	bics	r4, r3
 8007c4e:	233f      	movs	r3, #63	; 0x3f
 8007c50:	4019      	ands	r1, r3
 8007c52:	4b2e      	ldr	r3, [pc, #184]	; (8007d0c <lv_draw_map+0x4fc>)
 8007c54:	4322      	orrs	r2, r4
 8007c56:	401a      	ands	r2, r3
 8007c58:	0149      	lsls	r1, r1, #5
 8007c5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c5c:	430a      	orrs	r2, r1
 8007c5e:	0552      	lsls	r2, r2, #21
 8007c60:	02dc      	lsls	r4, r3, #11
 8007c62:	0d52      	lsrs	r2, r2, #21
 8007c64:	4314      	orrs	r4, r2
 8007c66:	226c      	movs	r2, #108	; 0x6c
 8007c68:	ab02      	add	r3, sp, #8
 8007c6a:	189b      	adds	r3, r3, r2
 8007c6c:	801c      	strh	r4, [r3, #0]
 8007c6e:	b2a3      	uxth	r3, r4
                    map2[px_i].full = c.full;
 8007c70:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007c72:	006a      	lsls	r2, r5, #1
 8007c74:	528b      	strh	r3, [r1, r2]
 8007c76:	e760      	b.n	8007b3a <lv_draw_map+0x32a>
                    else if(mask_res_sub == LV_DRAW_MASK_RES_CHANGED) {
 8007c78:	2802      	cmp	r0, #2
 8007c7a:	d191      	bne.n	8007ba0 <lv_draw_map+0x390>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
 8007c7c:	9006      	str	r0, [sp, #24]
 8007c7e:	e78f      	b.n	8007ba0 <lv_draw_map+0x390>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
 8007c80:	7bb3      	ldrb	r3, [r6, #14]
 8007c82:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007c84:	9302      	str	r3, [sp, #8]
 8007c86:	7833      	ldrb	r3, [r6, #0]
 8007c88:	0029      	movs	r1, r5
 8007c8a:	9301      	str	r3, [sp, #4]
 8007c8c:	9b06      	ldr	r3, [sp, #24]
 8007c8e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	003b      	movs	r3, r7
 8007c94:	f7ff fb66 	bl	8007364 <_lv_blend_map>
                    blend_area.y1 = blend_area.y2 + 1;
 8007c98:	88eb      	ldrh	r3, [r5, #6]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	b21b      	sxth	r3, r3
 8007c9e:	806b      	strh	r3, [r5, #2]
                    blend_area.y2 = blend_area.y1;
 8007ca0:	80eb      	strh	r3, [r5, #6]
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 8007ca2:	2302      	movs	r3, #2
 8007ca4:	9306      	str	r3, [sp, #24]
 8007ca6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d109      	bne.n	8007cc0 <lv_draw_map+0x4b0>
 8007cac:	8873      	ldrh	r3, [r6, #2]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d106      	bne.n	8007cc0 <lv_draw_map+0x4b0>
 8007cb2:	8933      	ldrh	r3, [r6, #8]
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	3bff      	subs	r3, #255	; 0xff
 8007cb8:	1e5a      	subs	r2, r3, #1
 8007cba:	4193      	sbcs	r3, r2
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	9306      	str	r3, [sp, #24]
                    px_i = 0;
 8007cc0:	2400      	movs	r4, #0
                    if(other_mask_cnt) {
 8007cc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cc4:	42a3      	cmp	r3, r4
 8007cc6:	d100      	bne.n	8007cca <lv_draw_map+0x4ba>
 8007cc8:	e77d      	b.n	8007bc6 <lv_draw_map+0x3b6>
                        _lv_memset_ff(mask_buf, mask_buf_size);
 8007cca:	9908      	ldr	r1, [sp, #32]
 8007ccc:	0038      	movs	r0, r7
 8007cce:	f004 fcd3 	bl	800c678 <_lv_memset_ff>
 8007cd2:	e778      	b.n	8007bc6 <lv_draw_map+0x3b6>
            if(blend_area.y1 != blend_area.y2) {
 8007cd4:	a920      	add	r1, sp, #128	; 0x80
 8007cd6:	2206      	movs	r2, #6
 8007cd8:	5e8b      	ldrsh	r3, [r1, r2]
 8007cda:	2002      	movs	r0, #2
 8007cdc:	5e0a      	ldrsh	r2, [r1, r0]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d00c      	beq.n	8007cfc <lv_draw_map+0x4ec>
                blend_area.y2--;
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	80cb      	strh	r3, [r1, #6]
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
 8007ce6:	7bb3      	ldrb	r3, [r6, #14]
 8007ce8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007cea:	9302      	str	r3, [sp, #8]
 8007cec:	7833      	ldrb	r3, [r6, #0]
 8007cee:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007cf0:	9301      	str	r3, [sp, #4]
 8007cf2:	9b06      	ldr	r3, [sp, #24]
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	003b      	movs	r3, r7
 8007cf8:	f7ff fb34 	bl	8007364 <_lv_blend_map>
            _lv_mem_buf_release(mask_buf);
 8007cfc:	0038      	movs	r0, r7
 8007cfe:	f004 fb11 	bl	800c324 <_lv_mem_buf_release>
            _lv_mem_buf_release(map2);
 8007d02:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007d04:	e6a9      	b.n	8007a5a <lv_draw_map+0x24a>
 8007d06:	46c0      	nop			; (mov r8, r8)
 8007d08:	00008081 	.word	0x00008081
 8007d0c:	fffff81f 	.word	0xfffff81f

08007d10 <lv_draw_img_dsc_init>:
{
 8007d10:	b510      	push	{r4, lr}
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 8007d12:	2110      	movs	r1, #16
{
 8007d14:	0004      	movs	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 8007d16:	f004 fc85 	bl	800c624 <_lv_memset_00>
    dsc->recolor = LV_COLOR_BLACK;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	81a3      	strh	r3, [r4, #12]
    dsc->opa = LV_OPA_COVER;
 8007d1e:	33ff      	adds	r3, #255	; 0xff
    dsc->antialias = LV_ANTIALIAS;
 8007d20:	7be2      	ldrb	r2, [r4, #15]
    dsc->opa = LV_OPA_COVER;
 8007d22:	7023      	strb	r3, [r4, #0]
    dsc->zoom = LV_IMG_ZOOM_NONE;
 8007d24:	3301      	adds	r3, #1
 8007d26:	8123      	strh	r3, [r4, #8]
    dsc->antialias = LV_ANTIALIAS;
 8007d28:	3bff      	subs	r3, #255	; 0xff
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	73e3      	strb	r3, [r4, #15]
}
 8007d2e:	bd10      	pop	{r4, pc}

08007d30 <lv_img_cf_is_chroma_keyed>:
            is_chroma_keyed = false;
 8007d30:	2300      	movs	r3, #0
 8007d32:	280a      	cmp	r0, #10
 8007d34:	d807      	bhi.n	8007d46 <lv_img_cf_is_chroma_keyed+0x16>
 8007d36:	3301      	adds	r3, #1
 8007d38:	4083      	lsls	r3, r0
 8007d3a:	20f9      	movs	r0, #249	; 0xf9
 8007d3c:	00c0      	lsls	r0, r0, #3
 8007d3e:	4003      	ands	r3, r0
 8007d40:	1e58      	subs	r0, r3, #1
 8007d42:	4183      	sbcs	r3, r0
 8007d44:	b2db      	uxtb	r3, r3
}
 8007d46:	0018      	movs	r0, r3
 8007d48:	4770      	bx	lr
	...

08007d4c <lv_img_cf_has_alpha>:
            has_alpha = false;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	280e      	cmp	r0, #14
 8007d50:	d806      	bhi.n	8007d60 <lv_img_cf_has_alpha+0x14>
 8007d52:	3301      	adds	r3, #1
 8007d54:	4083      	lsls	r3, r0
 8007d56:	4803      	ldr	r0, [pc, #12]	; (8007d64 <lv_img_cf_has_alpha+0x18>)
 8007d58:	4003      	ands	r3, r0
 8007d5a:	1e58      	subs	r0, r3, #1
 8007d5c:	4183      	sbcs	r3, r0
 8007d5e:	b2db      	uxtb	r3, r3
}
 8007d60:	0018      	movs	r0, r3
 8007d62:	4770      	bx	lr
 8007d64:	00007fa4 	.word	0x00007fa4

08007d68 <lv_draw_img>:
{
 8007d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d6a:	b093      	sub	sp, #76	; 0x4c
 8007d6c:	0004      	movs	r4, r0
 8007d6e:	9103      	str	r1, [sp, #12]
 8007d70:	001f      	movs	r7, r3
    if(src == NULL) {
 8007d72:	2a00      	cmp	r2, #0
 8007d74:	d106      	bne.n	8007d84 <lv_draw_img+0x1c>
        show_error(coords, mask, "No\ndata");
 8007d76:	4a65      	ldr	r2, [pc, #404]	; (8007f0c <lv_draw_img+0x1a4>)
        show_error(coords, clip_area, cdsc->dec_dsc.error_msg);
 8007d78:	9903      	ldr	r1, [sp, #12]
 8007d7a:	0020      	movs	r0, r4
 8007d7c:	f7ff fd20 	bl	80077c0 <show_error>
}
 8007d80:	b013      	add	sp, #76	; 0x4c
 8007d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(dsc->opa <= LV_OPA_MIN) return;
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	d9fa      	bls.n	8007d80 <lv_draw_img+0x18>
    lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor);
 8007d8a:	89b9      	ldrh	r1, [r7, #12]
 8007d8c:	0010      	movs	r0, r2
 8007d8e:	f002 ff4d 	bl	800ac2c <_lv_img_cache_open>
 8007d92:	1e05      	subs	r5, r0, #0
    if(cdsc == NULL) return LV_RES_INV;
 8007d94:	d0ef      	beq.n	8007d76 <lv_draw_img+0xe>
    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
 8007d96:	7b06      	ldrb	r6, [r0, #12]
 8007d98:	06f6      	lsls	r6, r6, #27
 8007d9a:	0ef6      	lsrs	r6, r6, #27
 8007d9c:	0030      	movs	r0, r6
 8007d9e:	f7ff ffc7 	bl	8007d30 <lv_img_cf_is_chroma_keyed>
 8007da2:	9008      	str	r0, [sp, #32]
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
 8007da4:	0030      	movs	r0, r6
 8007da6:	f7ff ffd1 	bl	8007d4c <lv_img_cf_has_alpha>
    if(cdsc->dec_dsc.error_msg != NULL) {
 8007daa:	69aa      	ldr	r2, [r5, #24]
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
 8007dac:	9009      	str	r0, [sp, #36]	; 0x24
    if(cdsc->dec_dsc.error_msg != NULL) {
 8007dae:	2a00      	cmp	r2, #0
 8007db0:	d1e2      	bne.n	8007d78 <lv_draw_img+0x10>
    else if(cdsc->dec_dsc.img_data) {
 8007db2:	692b      	ldr	r3, [r5, #16]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d03f      	beq.n	8007e38 <lv_draw_img+0xd0>
        lv_area_copy(&map_area_rot, coords);
 8007db8:	a80e      	add	r0, sp, #56	; 0x38
 8007dba:	0021      	movs	r1, r4
 8007dbc:	f7ff fd20 	bl	8007800 <lv_area_copy>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 8007dc0:	887b      	ldrh	r3, [r7, #2]
 8007dc2:	8938      	ldrh	r0, [r7, #8]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d103      	bne.n	8007dd0 <lv_draw_img+0x68>
 8007dc8:	2280      	movs	r2, #128	; 0x80
 8007dca:	0052      	lsls	r2, r2, #1
 8007dcc:	4290      	cmp	r0, r2
 8007dce:	d021      	beq.n	8007e14 <lv_draw_img+0xac>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007dd0:	88e2      	ldrh	r2, [r4, #6]
 8007dd2:	8861      	ldrh	r1, [r4, #2]
 8007dd4:	3201      	adds	r2, #1
 8007dd6:	1a52      	subs	r2, r2, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007dd8:	88a1      	ldrh	r1, [r4, #4]
 8007dda:	8826      	ldrh	r6, [r4, #0]
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
 8007ddc:	b21b      	sxth	r3, r3
 8007dde:	3101      	adds	r1, #1
 8007de0:	9304      	str	r3, [sp, #16]
 8007de2:	1b89      	subs	r1, r1, r6
 8007de4:	1d3b      	adds	r3, r7, #4
 8007de6:	ae0e      	add	r6, sp, #56	; 0x38
 8007de8:	b212      	sxth	r2, r2
 8007dea:	b209      	sxth	r1, r1
 8007dec:	9301      	str	r3, [sp, #4]
 8007dee:	9000      	str	r0, [sp, #0]
 8007df0:	9b04      	ldr	r3, [sp, #16]
 8007df2:	0030      	movs	r0, r6
 8007df4:	f002 fef5 	bl	800abe2 <_lv_img_buf_get_transformed_area>
            map_area_rot.x1 += coords->x1;
 8007df8:	8822      	ldrh	r2, [r4, #0]
 8007dfa:	8833      	ldrh	r3, [r6, #0]
            map_area_rot.y1 += coords->y1;
 8007dfc:	8871      	ldrh	r1, [r6, #2]
            map_area_rot.x1 += coords->x1;
 8007dfe:	18d3      	adds	r3, r2, r3
 8007e00:	8033      	strh	r3, [r6, #0]
            map_area_rot.y1 += coords->y1;
 8007e02:	8863      	ldrh	r3, [r4, #2]
 8007e04:	1859      	adds	r1, r3, r1
 8007e06:	8071      	strh	r1, [r6, #2]
            map_area_rot.x2 += coords->x1;
 8007e08:	88b1      	ldrh	r1, [r6, #4]
 8007e0a:	1852      	adds	r2, r2, r1
 8007e0c:	80b2      	strh	r2, [r6, #4]
            map_area_rot.y2 += coords->y1;
 8007e0e:	88f2      	ldrh	r2, [r6, #6]
 8007e10:	189b      	adds	r3, r3, r2
 8007e12:	80f3      	strh	r3, [r6, #6]
        union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
 8007e14:	aa0e      	add	r2, sp, #56	; 0x38
 8007e16:	9903      	ldr	r1, [sp, #12]
 8007e18:	a810      	add	r0, sp, #64	; 0x40
 8007e1a:	f003 fdc2 	bl	800b9a2 <_lv_area_intersect>
        if(union_ok == false) {
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d0ae      	beq.n	8007d80 <lv_draw_img+0x18>
        lv_draw_map(coords, &mask_com, cdsc->dec_dsc.img_data, draw_dsc, chroma_keyed, alpha_byte);
 8007e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e24:	a910      	add	r1, sp, #64	; 0x40
 8007e26:	9301      	str	r3, [sp, #4]
 8007e28:	9b08      	ldr	r3, [sp, #32]
 8007e2a:	0020      	movs	r0, r4
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	692a      	ldr	r2, [r5, #16]
 8007e30:	003b      	movs	r3, r7
 8007e32:	f7ff fced 	bl	8007810 <lv_draw_map>
 8007e36:	e7a3      	b.n	8007d80 <lv_draw_img+0x18>
        union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
 8007e38:	ae0c      	add	r6, sp, #48	; 0x30
 8007e3a:	0022      	movs	r2, r4
 8007e3c:	9903      	ldr	r1, [sp, #12]
 8007e3e:	0030      	movs	r0, r6
 8007e40:	f003 fdaf 	bl	800b9a2 <_lv_area_intersect>
        if(union_ok == false) {
 8007e44:	2800      	cmp	r0, #0
 8007e46:	d100      	bne.n	8007e4a <lv_draw_img+0xe2>
 8007e48:	e79a      	b.n	8007d80 <lv_draw_img+0x18>
        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
 8007e4a:	2003      	movs	r0, #3
 8007e4c:	88b3      	ldrh	r3, [r6, #4]
 8007e4e:	8832      	ldrh	r2, [r6, #0]
 8007e50:	3301      	adds	r3, #1
 8007e52:	1a9b      	subs	r3, r3, r2
 8007e54:	b21b      	sxth	r3, r3
 8007e56:	4358      	muls	r0, r3
 8007e58:	9307      	str	r3, [sp, #28]
 8007e5a:	f004 fb5b 	bl	800c514 <_lv_mem_buf_get>
        lv_area_copy(&line, &mask_com);
 8007e5e:	0031      	movs	r1, r6
        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
 8007e60:	9004      	str	r0, [sp, #16]
        lv_area_copy(&line, &mask_com);
 8007e62:	a80e      	add	r0, sp, #56	; 0x38
 8007e64:	f7ff fccc 	bl	8007800 <lv_area_copy>
        lv_area_set_height(&line, 1);
 8007e68:	2101      	movs	r1, #1
 8007e6a:	a80e      	add	r0, sp, #56	; 0x38
 8007e6c:	f003 fd86 	bl	800b97c <lv_area_set_height>
        int32_t x = mask_com.x1 - coords->x1;
 8007e70:	2200      	movs	r2, #0
 8007e72:	5eb3      	ldrsh	r3, [r6, r2]
 8007e74:	930a      	str	r3, [sp, #40]	; 0x28
 8007e76:	2200      	movs	r2, #0
 8007e78:	5ea3      	ldrsh	r3, [r4, r2]
 8007e7a:	930b      	str	r3, [sp, #44]	; 0x2c
        int32_t y = mask_com.y1 - coords->y1;
 8007e7c:	2202      	movs	r2, #2
 8007e7e:	5eb3      	ldrsh	r3, [r6, r2]
 8007e80:	9305      	str	r3, [sp, #20]
 8007e82:	2202      	movs	r2, #2
 8007e84:	5ea3      	ldrsh	r3, [r4, r2]
 8007e86:	9a05      	ldr	r2, [sp, #20]
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	9306      	str	r3, [sp, #24]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 8007e8c:	ab0c      	add	r3, sp, #48	; 0x30
 8007e8e:	2206      	movs	r2, #6
 8007e90:	5e9b      	ldrsh	r3, [r3, r2]
 8007e92:	9a05      	ldr	r2, [sp, #20]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	dd03      	ble.n	8007ea0 <lv_draw_img+0x138>
        _lv_mem_buf_release(buf);
 8007e98:	9804      	ldr	r0, [sp, #16]
 8007e9a:	f004 fa43 	bl	800c324 <_lv_mem_buf_release>
 8007e9e:	e76f      	b.n	8007d80 <lv_draw_img+0x18>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
 8007ea0:	ae0e      	add	r6, sp, #56	; 0x38
 8007ea2:	0032      	movs	r2, r6
 8007ea4:	9903      	ldr	r1, [sp, #12]
 8007ea6:	a810      	add	r0, sp, #64	; 0x40
 8007ea8:	f003 fd7b 	bl	800b9a2 <_lv_area_intersect>
            if(union_ok == false) continue;
 8007eac:	2800      	cmp	r0, #0
 8007eae:	d028      	beq.n	8007f02 <lv_draw_img+0x19a>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 8007eb0:	466b      	mov	r3, sp
 8007eb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007eb4:	2218      	movs	r2, #24
 8007eb6:	5e9a      	ldrsh	r2, [r3, r2]
 8007eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eba:	0028      	movs	r0, r5
 8007ebc:	1a59      	subs	r1, r3, r1
 8007ebe:	9b04      	ldr	r3, [sp, #16]
 8007ec0:	b209      	sxth	r1, r1
 8007ec2:	9300      	str	r3, [sp, #0]
 8007ec4:	9b07      	ldr	r3, [sp, #28]
 8007ec6:	f003 f861 	bl	800af8c <lv_img_decoder_read_line>
            if(read_res != LV_RES_OK) {
 8007eca:	2801      	cmp	r0, #1
 8007ecc:	d006      	beq.n	8007edc <lv_draw_img+0x174>
                lv_img_decoder_close(&cdsc->dec_dsc);
 8007ece:	0028      	movs	r0, r5
 8007ed0:	f003 f86b 	bl	800afaa <lv_img_decoder_close>
                _lv_mem_buf_release(buf);
 8007ed4:	9804      	ldr	r0, [sp, #16]
 8007ed6:	f004 fa25 	bl	800c324 <_lv_mem_buf_release>
 8007eda:	e74c      	b.n	8007d76 <lv_draw_img+0xe>
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
 8007edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ede:	9a04      	ldr	r2, [sp, #16]
 8007ee0:	9301      	str	r3, [sp, #4]
 8007ee2:	9b08      	ldr	r3, [sp, #32]
 8007ee4:	a910      	add	r1, sp, #64	; 0x40
 8007ee6:	9300      	str	r3, [sp, #0]
 8007ee8:	0030      	movs	r0, r6
 8007eea:	003b      	movs	r3, r7
 8007eec:	f7ff fc90 	bl	8007810 <lv_draw_map>
            line.y1++;
 8007ef0:	8873      	ldrh	r3, [r6, #2]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	8073      	strh	r3, [r6, #2]
            line.y2++;
 8007ef6:	88f3      	ldrh	r3, [r6, #6]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	80f3      	strh	r3, [r6, #6]
            y++;
 8007efc:	9b06      	ldr	r3, [sp, #24]
 8007efe:	3301      	adds	r3, #1
 8007f00:	9306      	str	r3, [sp, #24]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 8007f02:	9b05      	ldr	r3, [sp, #20]
 8007f04:	3301      	adds	r3, #1
 8007f06:	9305      	str	r3, [sp, #20]
 8007f08:	e7c0      	b.n	8007e8c <lv_draw_img+0x124>
 8007f0a:	46c0      	nop			; (mov r8, r8)
 8007f0c:	0800f32d 	.word	0x0800f32d

08007f10 <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
 8007f10:	2303      	movs	r3, #3
 8007f12:	2800      	cmp	r0, #0
 8007f14:	d007      	beq.n	8007f26 <lv_img_src_get_type+0x16>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 8007f16:	7802      	ldrb	r2, [r0, #0]
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 8007f18:	3b02      	subs	r3, #2
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 8007f1a:	0011      	movs	r1, r2
 8007f1c:	3920      	subs	r1, #32
 8007f1e:	295f      	cmp	r1, #95	; 0x5f
 8007f20:	d901      	bls.n	8007f26 <lv_img_src_get_type+0x16>
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
 8007f22:	09d3      	lsrs	r3, r2, #7
 8007f24:	005b      	lsls	r3, r3, #1
}
 8007f26:	0018      	movs	r0, r3
 8007f28:	4770      	bx	lr
	...

08007f2c <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
 8007f2c:	0003      	movs	r3, r0
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
 8007f2e:	3830      	subs	r0, #48	; 0x30
 8007f30:	b2c0      	uxtb	r0, r0
 8007f32:	2809      	cmp	r0, #9
 8007f34:	d90a      	bls.n	8007f4c <hex_char_to_num+0x20>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 8007f36:	2b60      	cmp	r3, #96	; 0x60
 8007f38:	d901      	bls.n	8007f3e <hex_char_to_num+0x12>
 8007f3a:	3b20      	subs	r3, #32
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	3b41      	subs	r3, #65	; 0x41
 8007f40:	b2db      	uxtb	r3, r3
{
 8007f42:	2000      	movs	r0, #0
 8007f44:	2b05      	cmp	r3, #5
 8007f46:	d801      	bhi.n	8007f4c <hex_char_to_num+0x20>
 8007f48:	4a01      	ldr	r2, [pc, #4]	; (8007f50 <hex_char_to_num+0x24>)
 8007f4a:	5cd0      	ldrb	r0, [r2, r3]
                break;
        }
    }

    return result;
}
 8007f4c:	4770      	bx	lr
 8007f4e:	46c0      	nop			; (mov r8, r8)
 8007f50:	0800f336 	.word	0x0800f336

08007f54 <lv_draw_label_dsc_init>:
{
 8007f54:	b510      	push	{r4, lr}
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 8007f56:	2124      	movs	r1, #36	; 0x24
{
 8007f58:	0004      	movs	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 8007f5a:	f004 fb63 	bl	800c624 <_lv_memset_00>
    dsc->opa = LV_OPA_COVER;
 8007f5e:	23ff      	movs	r3, #255	; 0xff
 8007f60:	7323      	strb	r3, [r4, #12]
    dsc->font = LV_THEME_DEFAULT_FONT_NORMAL;
 8007f62:	4b06      	ldr	r3, [pc, #24]	; (8007f7c <lv_draw_label_dsc_init+0x28>)
    dsc->sel_color = LV_COLOR_BLACK;
 8007f64:	221f      	movs	r2, #31
    dsc->font = LV_THEME_DEFAULT_FONT_NORMAL;
 8007f66:	60a3      	str	r3, [r4, #8]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 8007f68:	4b05      	ldr	r3, [pc, #20]	; (8007f80 <lv_draw_label_dsc_init+0x2c>)
    dsc->sel_color = LV_COLOR_BLACK;
 8007f6a:	80a2      	strh	r2, [r4, #4]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 8007f6c:	6163      	str	r3, [r4, #20]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
 8007f6e:	61a3      	str	r3, [r4, #24]
    dsc->color = LV_COLOR_BLACK;
 8007f70:	2300      	movs	r3, #0
 8007f72:	6023      	str	r3, [r4, #0]
    dsc->bidi_dir = LV_BIDI_DIR_LTR;
 8007f74:	3401      	adds	r4, #1
 8007f76:	77e3      	strb	r3, [r4, #31]
}
 8007f78:	bd10      	pop	{r4, pc}
 8007f7a:	46c0      	nop			; (mov r8, r8)
 8007f7c:	20000028 	.word	0x20000028
 8007f80:	0000ffff 	.word	0x0000ffff

08007f84 <lv_draw_label>:
{
 8007f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f86:	b0d7      	sub	sp, #348	; 0x15c
 8007f88:	9006      	str	r0, [sp, #24]
 8007f8a:	9104      	str	r1, [sp, #16]
 8007f8c:	9310      	str	r3, [sp, #64]	; 0x40
    if(dsc->opa <= LV_OPA_MIN) return;
 8007f8e:	7b13      	ldrb	r3, [r2, #12]
{
 8007f90:	0017      	movs	r7, r2
 8007f92:	9c5c      	ldr	r4, [sp, #368]	; 0x170
    if(dsc->opa <= LV_OPA_MIN) return;
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d800      	bhi.n	8007f9a <lv_draw_label+0x16>
 8007f98:	e0d7      	b.n	800814a <lv_draw_label+0x1c6>
    if(txt[0] == '\0')  return;
 8007f9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d100      	bne.n	8007fa4 <lv_draw_label+0x20>
 8007fa2:	e0d2      	b.n	800814a <lv_draw_label+0x1c6>
    const lv_font_t * font = dsc->font;
 8007fa4:	6893      	ldr	r3, [r2, #8]
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
 8007fa6:	000a      	movs	r2, r1
 8007fa8:	0001      	movs	r1, r0
 8007faa:	a837      	add	r0, sp, #220	; 0xdc
    const lv_font_t * font = dsc->font;
 8007fac:	9305      	str	r3, [sp, #20]
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
 8007fae:	f003 fcf8 	bl	800b9a2 <_lv_area_intersect>
    if(!clip_ok) return;
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	d100      	bne.n	8007fb8 <lv_draw_label+0x34>
 8007fb6:	e0c8      	b.n	800814a <lv_draw_label+0x1c6>
    if((dsc->flag & LV_TXT_FLAG_EXPAND) == 0) {
 8007fb8:	1cbb      	adds	r3, r7, #2
 8007fba:	7fda      	ldrb	r2, [r3, #31]
 8007fbc:	0793      	lsls	r3, r2, #30
 8007fbe:	d500      	bpl.n	8007fc2 <lv_draw_label+0x3e>
 8007fc0:	e0c5      	b.n	800814e <lv_draw_label+0x1ca>
 8007fc2:	9b06      	ldr	r3, [sp, #24]
 8007fc4:	9a06      	ldr	r2, [sp, #24]
 8007fc6:	889b      	ldrh	r3, [r3, #4]
 8007fc8:	8812      	ldrh	r2, [r2, #0]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	1a9b      	subs	r3, r3, r2
        w = lv_area_get_width(coords);
 8007fce:	b21b      	sxth	r3, r3
    int32_t line_height_font = lv_font_get_line_height(font);
 8007fd0:	9a05      	ldr	r2, [sp, #20]
 8007fd2:	2108      	movs	r1, #8
 8007fd4:	5e52      	ldrsh	r2, [r2, r1]
 8007fd6:	920a      	str	r2, [sp, #40]	; 0x28
    int32_t line_height = line_height_font + dsc->line_space;
 8007fd8:	210e      	movs	r1, #14
 8007fda:	5e7a      	ldrsh	r2, [r7, r1]
 8007fdc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007fde:	1855      	adds	r5, r2, r1
    pos.x = coords->x1;
 8007fe0:	9a06      	ldr	r2, [sp, #24]
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	5e52      	ldrsh	r2, [r2, r1]
 8007fe6:	9211      	str	r2, [sp, #68]	; 0x44
    pos.y = coords->y1;
 8007fe8:	9a06      	ldr	r2, [sp, #24]
 8007fea:	2002      	movs	r0, #2
 8007fec:	5e10      	ldrsh	r0, [r2, r0]
    x_ofs = dsc->ofs_x;
 8007fee:	211c      	movs	r1, #28
 8007ff0:	5e7a      	ldrsh	r2, [r7, r1]
 8007ff2:	922b      	str	r2, [sp, #172]	; 0xac
    y_ofs = dsc->ofs_y;
 8007ff4:	221e      	movs	r2, #30
 8007ff6:	5eb9      	ldrsh	r1, [r7, r2]
    uint32_t line_start     = 0;
 8007ff8:	9407      	str	r4, [sp, #28]
    pos.y += y_ofs;
 8007ffa:	1842      	adds	r2, r0, r1
 8007ffc:	b292      	uxth	r2, r2
 8007ffe:	b216      	sxth	r6, r2
 8008000:	9608      	str	r6, [sp, #32]
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 8008002:	2c00      	cmp	r4, #0
 8008004:	d01e      	beq.n	8008044 <lv_draw_label+0xc0>
    uint32_t line_start     = 0;
 8008006:	2600      	movs	r6, #0
 8008008:	9607      	str	r6, [sp, #28]
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 800800a:	42b1      	cmp	r1, r6
 800800c:	d11a      	bne.n	8008044 <lv_draw_label+0xc0>
    uint32_t line_start     = 0;
 800800e:	9107      	str	r1, [sp, #28]
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 8008010:	42b0      	cmp	r0, r6
 8008012:	da17      	bge.n	8008044 <lv_draw_label+0xc0>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 8008014:	68a1      	ldr	r1, [r4, #8]
 8008016:	1a08      	subs	r0, r1, r0
 8008018:	17c1      	asrs	r1, r0, #31
 800801a:	1840      	adds	r0, r0, r1
 800801c:	4048      	eors	r0, r1
 800801e:	2180      	movs	r1, #128	; 0x80
 8008020:	0089      	lsls	r1, r1, #2
 8008022:	1b49      	subs	r1, r1, r5
 8008024:	0049      	lsls	r1, r1, #1
 8008026:	4288      	cmp	r0, r1
 8008028:	dd02      	ble.n	8008030 <lv_draw_label+0xac>
            hint->line_start = -1;
 800802a:	2101      	movs	r1, #1
 800802c:	4249      	negs	r1, r1
 800802e:	6021      	str	r1, [r4, #0]
    uint32_t line_start     = 0;
 8008030:	2000      	movs	r0, #0
        last_line_start = hint->line_start;
 8008032:	6821      	ldr	r1, [r4, #0]
    uint32_t line_start     = 0;
 8008034:	9007      	str	r0, [sp, #28]
    if(hint && last_line_start >= 0) {
 8008036:	4281      	cmp	r1, r0
 8008038:	db04      	blt.n	8008044 <lv_draw_label+0xc0>
        line_start = last_line_start;
 800803a:	9107      	str	r1, [sp, #28]
        pos.y += hint->y;
 800803c:	6861      	ldr	r1, [r4, #4]
 800803e:	1852      	adds	r2, r2, r1
 8008040:	b212      	sxth	r2, r2
 8008042:	9208      	str	r2, [sp, #32]
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 8008044:	b21b      	sxth	r3, r3
 8008046:	9324      	str	r3, [sp, #144]	; 0x90
 8008048:	2310      	movs	r3, #16
 800804a:	5efa      	ldrsh	r2, [r7, r3]
 800804c:	9907      	ldr	r1, [sp, #28]
 800804e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008050:	1858      	adds	r0, r3, r1
 8008052:	1cbb      	adds	r3, r7, #2
 8008054:	7fdb      	ldrb	r3, [r3, #31]
 8008056:	9905      	ldr	r1, [sp, #20]
 8008058:	9300      	str	r3, [sp, #0]
 800805a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800805c:	f004 fe02 	bl	800cc64 <_lv_txt_get_next_line>
 8008060:	9b07      	ldr	r3, [sp, #28]
 8008062:	18c3      	adds	r3, r0, r3
 8008064:	9309      	str	r3, [sp, #36]	; 0x24
 8008066:	1cbb      	adds	r3, r7, #2
    while(pos.y + line_height_font < mask->y1) {
 8008068:	990a      	ldr	r1, [sp, #40]	; 0x28
 800806a:	7fda      	ldrb	r2, [r3, #31]
 800806c:	9b08      	ldr	r3, [sp, #32]
 800806e:	185b      	adds	r3, r3, r1
 8008070:	9904      	ldr	r1, [sp, #16]
 8008072:	2002      	movs	r0, #2
 8008074:	5e09      	ldrsh	r1, [r1, r0]
 8008076:	428b      	cmp	r3, r1
 8008078:	da00      	bge.n	800807c <lv_draw_label+0xf8>
 800807a:	e079      	b.n	8008170 <lv_draw_label+0x1ec>
 800807c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800807e:	9907      	ldr	r1, [sp, #28]
 8008080:	1858      	adds	r0, r3, r1
    if(dsc->flag & LV_TXT_FLAG_CENTER) {
 8008082:	0753      	lsls	r3, r2, #29
 8008084:	d400      	bmi.n	8008088 <lv_draw_label+0x104>
 8008086:	e09e      	b.n	80081c6 <lv_draw_label+0x242>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8008088:	2110      	movs	r1, #16
 800808a:	5e7b      	ldrsh	r3, [r7, r1]
 800808c:	9c07      	ldr	r4, [sp, #28]
 800808e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008090:	9200      	str	r2, [sp, #0]
 8008092:	1b09      	subs	r1, r1, r4
 8008094:	9a05      	ldr	r2, [sp, #20]
 8008096:	f004 fd9b 	bl	800cbd0 <_lv_txt_get_width>
 800809a:	9b06      	ldr	r3, [sp, #24]
 800809c:	9a06      	ldr	r2, [sp, #24]
 800809e:	889b      	ldrh	r3, [r3, #4]
 80080a0:	8812      	ldrh	r2, [r2, #0]
 80080a2:	3301      	adds	r3, #1
 80080a4:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 80080a6:	b21b      	sxth	r3, r3
 80080a8:	1a18      	subs	r0, r3, r0
 80080aa:	0fc3      	lsrs	r3, r0, #31
 80080ac:	1818      	adds	r0, r3, r0
 80080ae:	1040      	asrs	r0, r0, #1
        pos.x += lv_area_get_width(coords) - line_width;
 80080b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080b2:	18c0      	adds	r0, r0, r3
 80080b4:	b203      	sxth	r3, r0
 80080b6:	9311      	str	r3, [sp, #68]	; 0x44
    lv_opa_t opa = dsc->opa;
 80080b8:	7b3b      	ldrb	r3, [r7, #12]
 80080ba:	9326      	str	r3, [sp, #152]	; 0x98
    uint32_t sel_start = dsc->sel_start;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	9315      	str	r3, [sp, #84]	; 0x54
    uint32_t sel_end = dsc->sel_end;
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	9314      	str	r3, [sp, #80]	; 0x50
    if(sel_start > sel_end) {
 80080c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80080c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d803      	bhi.n	80080d4 <lv_draw_label+0x150>
 80080cc:	0013      	movs	r3, r2
 80080ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80080d0:	9315      	str	r3, [sp, #84]	; 0x54
 80080d2:	9214      	str	r2, [sp, #80]	; 0x50
    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
 80080d4:	1cfb      	adds	r3, r7, #3
 80080d6:	7fdb      	ldrb	r3, [r3, #31]
 80080d8:	079b      	lsls	r3, r3, #30
 80080da:	d016      	beq.n	800810a <lv_draw_label+0x186>
        lv_draw_line_dsc_init(&line_dsc);
 80080dc:	ac3b      	add	r4, sp, #236	; 0xec
 80080de:	0020      	movs	r0, r4
 80080e0:	f000 fdb4 	bl	8008c4c <lv_draw_line_dsc_init>
        line_dsc.color = dsc->color;
 80080e4:	883b      	ldrh	r3, [r7, #0]
 80080e6:	8023      	strh	r3, [r4, #0]
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 80080e8:	9b05      	ldr	r3, [sp, #20]
 80080ea:	7b9b      	ldrb	r3, [r3, #14]
 80080ec:	b25b      	sxtb	r3, r3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d100      	bne.n	80080f4 <lv_draw_label+0x170>
 80080f2:	3301      	adds	r3, #1
        line_dsc.blend_mode = dsc->blend_mode;
 80080f4:	2103      	movs	r1, #3
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 80080f6:	8063      	strh	r3, [r4, #2]
        line_dsc.opa = dsc->opa;
 80080f8:	7b3b      	ldrb	r3, [r7, #12]
 80080fa:	7223      	strb	r3, [r4, #8]
        line_dsc.blend_mode = dsc->blend_mode;
 80080fc:	1d3b      	adds	r3, r7, #4
 80080fe:	7fda      	ldrb	r2, [r3, #31]
 8008100:	7a63      	ldrb	r3, [r4, #9]
 8008102:	400a      	ands	r2, r1
 8008104:	438b      	bics	r3, r1
 8008106:	4313      	orrs	r3, r2
 8008108:	7263      	strb	r3, [r4, #9]
    lv_draw_rect_dsc_init(&draw_dsc_sel);
 800810a:	ac41      	add	r4, sp, #260	; 0x104
 800810c:	0020      	movs	r0, r4
 800810e:	f001 ff7d 	bl	800a00c <lv_draw_rect_dsc_init>
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
 8008112:	88bb      	ldrh	r3, [r7, #4]
 8008114:	8063      	strh	r3, [r4, #2]
 8008116:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008118:	2bfd      	cmp	r3, #253	; 0xfd
 800811a:	d900      	bls.n	800811e <lv_draw_label+0x19a>
 800811c:	e068      	b.n	80081f0 <lv_draw_label+0x26c>
 800811e:	466b      	mov	r3, sp
 8008120:	2298      	movs	r2, #152	; 0x98
 8008122:	189b      	adds	r3, r3, r2
 8008124:	781b      	ldrb	r3, [r3, #0]
    while(txt[line_start] != '\0') {
 8008126:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8008128:	b2db      	uxtb	r3, r3
 800812a:	930b      	str	r3, [sp, #44]	; 0x2c
 800812c:	b2ab      	uxth	r3, r5
 800812e:	9327      	str	r3, [sp, #156]	; 0x9c
 8008130:	466b      	mov	r3, sp
 8008132:	8c1b      	ldrh	r3, [r3, #32]
 8008134:	9323      	str	r3, [sp, #140]	; 0x8c
    uint32_t par_start = 0;
 8008136:	2300      	movs	r3, #0
 8008138:	9325      	str	r3, [sp, #148]	; 0x94
    while(txt[line_start] != '\0') {
 800813a:	9a07      	ldr	r2, [sp, #28]
 800813c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800813e:	4694      	mov	ip, r2
 8008140:	4463      	add	r3, ip
 8008142:	9321      	str	r3, [sp, #132]	; 0x84
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d154      	bne.n	80081f4 <lv_draw_label+0x270>
}
 800814a:	b057      	add	sp, #348	; 0x15c
 800814c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        _lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
 800814e:	2110      	movs	r1, #16
 8008150:	5e7b      	ldrsh	r3, [r7, r1]
 8008152:	9202      	str	r2, [sp, #8]
 8008154:	4ad0      	ldr	r2, [pc, #832]	; (8008498 <lv_draw_label+0x514>)
 8008156:	ad41      	add	r5, sp, #260	; 0x104
 8008158:	9201      	str	r2, [sp, #4]
 800815a:	210e      	movs	r1, #14
 800815c:	5e7a      	ldrsh	r2, [r7, r1]
 800815e:	0028      	movs	r0, r5
 8008160:	9200      	str	r2, [sp, #0]
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008166:	f004 fe61 	bl	800ce2c <_lv_txt_get_size>
        w = p.x;
 800816a:	2200      	movs	r2, #0
 800816c:	5eab      	ldrsh	r3, [r5, r2]
 800816e:	e72f      	b.n	8007fd0 <lv_draw_label+0x4c>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 8008170:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008172:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008174:	185e      	adds	r6, r3, r1
 8008176:	2310      	movs	r3, #16
 8008178:	5ef9      	ldrsh	r1, [r7, r3]
 800817a:	0030      	movs	r0, r6
 800817c:	9200      	str	r2, [sp, #0]
 800817e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008180:	000a      	movs	r2, r1
 8008182:	9905      	ldr	r1, [sp, #20]
 8008184:	f004 fd6e 	bl	800cc64 <_lv_txt_get_next_line>
 8008188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800818a:	1818      	adds	r0, r3, r0
 800818c:	9b08      	ldr	r3, [sp, #32]
 800818e:	18eb      	adds	r3, r5, r3
 8008190:	b21b      	sxth	r3, r3
 8008192:	9308      	str	r3, [sp, #32]
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 8008194:	2c00      	cmp	r4, #0
 8008196:	d00f      	beq.n	80081b8 <lv_draw_label+0x234>
 8008198:	4bc0      	ldr	r3, [pc, #768]	; (800849c <lv_draw_label+0x518>)
 800819a:	9a08      	ldr	r2, [sp, #32]
 800819c:	429a      	cmp	r2, r3
 800819e:	db0b      	blt.n	80081b8 <lv_draw_label+0x234>
 80081a0:	6823      	ldr	r3, [r4, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	da08      	bge.n	80081b8 <lv_draw_label+0x234>
            hint->line_start = line_start;
 80081a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081a8:	6023      	str	r3, [r4, #0]
            hint->y          = pos.y - coords->y1;
 80081aa:	9b06      	ldr	r3, [sp, #24]
 80081ac:	2202      	movs	r2, #2
 80081ae:	5e9b      	ldrsh	r3, [r3, r2]
 80081b0:	9a08      	ldr	r2, [sp, #32]
            hint->coord_y    = coords->y1;
 80081b2:	60a3      	str	r3, [r4, #8]
            hint->y          = pos.y - coords->y1;
 80081b4:	1ad2      	subs	r2, r2, r3
 80081b6:	6062      	str	r2, [r4, #4]
 80081b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ba:	9307      	str	r3, [sp, #28]
        if(txt[line_start] == '\0') return;
 80081bc:	7833      	ldrb	r3, [r6, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d0c3      	beq.n	800814a <lv_draw_label+0x1c6>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 80081c2:	9009      	str	r0, [sp, #36]	; 0x24
 80081c4:	e74f      	b.n	8008066 <lv_draw_label+0xe2>
    else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
 80081c6:	0713      	lsls	r3, r2, #28
 80081c8:	d400      	bmi.n	80081cc <lv_draw_label+0x248>
 80081ca:	e775      	b.n	80080b8 <lv_draw_label+0x134>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 80081cc:	2110      	movs	r1, #16
 80081ce:	5e7b      	ldrsh	r3, [r7, r1]
 80081d0:	9c07      	ldr	r4, [sp, #28]
 80081d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081d4:	9200      	str	r2, [sp, #0]
 80081d6:	1b09      	subs	r1, r1, r4
 80081d8:	9a05      	ldr	r2, [sp, #20]
 80081da:	f004 fcf9 	bl	800cbd0 <_lv_txt_get_width>
 80081de:	9b06      	ldr	r3, [sp, #24]
 80081e0:	9a06      	ldr	r2, [sp, #24]
 80081e2:	889b      	ldrh	r3, [r3, #4]
 80081e4:	8812      	ldrh	r2, [r2, #0]
 80081e6:	3301      	adds	r3, #1
 80081e8:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
 80081ea:	b21b      	sxth	r3, r3
 80081ec:	1a18      	subs	r0, r3, r0
 80081ee:	e75f      	b.n	80080b0 <lv_draw_label+0x12c>
 80081f0:	4bab      	ldr	r3, [pc, #684]	; (80084a0 <lv_draw_label+0x51c>)
 80081f2:	e797      	b.n	8008124 <lv_draw_label+0x1a0>
        pos.x += x_ofs;
 80081f4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80081f6:	18e4      	adds	r4, r4, r3
 80081f8:	b223      	sxth	r3, r4
 80081fa:	9312      	str	r3, [sp, #72]	; 0x48
        i         = 0;
 80081fc:	2300      	movs	r3, #0
 80081fe:	9336      	str	r3, [sp, #216]	; 0xd8
                        cmd_state = CMD_STATE_WAIT;
 8008200:	930c      	str	r3, [sp, #48]	; 0x30
 8008202:	e0bd      	b.n	8008380 <lv_draw_label+0x3fc>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 8008204:	9b14      	ldr	r3, [sp, #80]	; 0x50
            uint32_t logical_char_pos = 0;
 8008206:	2500      	movs	r5, #0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 8008208:	001a      	movs	r2, r3
 800820a:	4ba6      	ldr	r3, [pc, #664]	; (80084a4 <lv_draw_label+0x520>)
 800820c:	429a      	cmp	r2, r3
 800820e:	d009      	beq.n	8008224 <lv_draw_label+0x2a0>
 8008210:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008212:	429a      	cmp	r2, r3
 8008214:	d006      	beq.n	8008224 <lv_draw_label+0x2a0>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
 8008216:	9b07      	ldr	r3, [sp, #28]
 8008218:	9810      	ldr	r0, [sp, #64]	; 0x40
 800821a:	18c9      	adds	r1, r1, r3
 800821c:	4ba2      	ldr	r3, [pc, #648]	; (80084a8 <lv_draw_label+0x524>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4798      	blx	r3
 8008222:	0005      	movs	r5, r0
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
 8008224:	4ca1      	ldr	r4, [pc, #644]	; (80084ac <lv_draw_label+0x528>)
 8008226:	a936      	add	r1, sp, #216	; 0xd8
 8008228:	6823      	ldr	r3, [r4, #0]
 800822a:	9821      	ldr	r0, [sp, #132]	; 0x84
 800822c:	4798      	blx	r3
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
 800822e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008230:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8008232:	2100      	movs	r1, #0
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
 8008234:	0006      	movs	r6, r0
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
 8008236:	1898      	adds	r0, r3, r2
 8008238:	6823      	ldr	r3, [r4, #0]
 800823a:	4798      	blx	r3
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800823c:	2101      	movs	r1, #1
 800823e:	1cbb      	adds	r3, r7, #2
 8008240:	7fdb      	ldrb	r3, [r3, #31]
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
 8008242:	0002      	movs	r2, r0
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8008244:	420b      	tst	r3, r1
 8008246:	d100      	bne.n	800824a <lv_draw_label+0x2c6>
 8008248:	e11e      	b.n	8008488 <lv_draw_label+0x504>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 800824a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800824c:	2e23      	cmp	r6, #35	; 0x23
 800824e:	d10d      	bne.n	800826c <lv_draw_label+0x2e8>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 8008250:	2b00      	cmp	r3, #0
 8008252:	d103      	bne.n	800825c <lv_draw_label+0x2d8>
                        par_start = i;
 8008254:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8008256:	9325      	str	r3, [sp, #148]	; 0x94
                        cmd_state = CMD_STATE_PAR;
 8008258:	000b      	movs	r3, r1
 800825a:	e7d1      	b.n	8008200 <lv_draw_label+0x27c>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char */
 800825c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800825e:	2b01      	cmp	r3, #1
 8008260:	d054      	beq.n	800830c <lv_draw_label+0x388>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end */
 8008262:	2b02      	cmp	r3, #2
 8008264:	d000      	beq.n	8008268 <lv_draw_label+0x2e4>
 8008266:	e10f      	b.n	8008488 <lv_draw_label+0x504>
                        cmd_state = CMD_STATE_WAIT;
 8008268:	2300      	movs	r3, #0
 800826a:	e7c9      	b.n	8008200 <lv_draw_label+0x27c>
                if(cmd_state == CMD_STATE_PAR) {
 800826c:	2b01      	cmp	r3, #1
 800826e:	d000      	beq.n	8008272 <lv_draw_label+0x2ee>
 8008270:	e10a      	b.n	8008488 <lv_draw_label+0x504>
                    if(letter == ' ') {
 8008272:	2e20      	cmp	r6, #32
 8008274:	d000      	beq.n	8008278 <lv_draw_label+0x2f4>
 8008276:	e083      	b.n	8008380 <lv_draw_label+0x3fc>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 8008278:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800827a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800827c:	1a9b      	subs	r3, r3, r2
 800827e:	2b07      	cmp	r3, #7
 8008280:	d142      	bne.n	8008308 <lv_draw_label+0x384>
                            _lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 8008282:	9b21      	ldr	r3, [sp, #132]	; 0x84
        *d8 = *s8;
 8008284:	ae3e      	add	r6, sp, #248	; 0xf8
 8008286:	1899      	adds	r1, r3, r2
 8008288:	2300      	movs	r3, #0
 800828a:	5cca      	ldrb	r2, [r1, r3]
 800828c:	559a      	strb	r2, [r3, r6]
 800828e:	3301      	adds	r3, #1
    while(len) {
 8008290:	2b06      	cmp	r3, #6
 8008292:	d1fa      	bne.n	800828a <lv_draw_label+0x306>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 8008294:	7830      	ldrb	r0, [r6, #0]
 8008296:	f7ff fe49 	bl	8007f2c <hex_char_to_num>
 800829a:	0004      	movs	r4, r0
 800829c:	7870      	ldrb	r0, [r6, #1]
 800829e:	f7ff fe45 	bl	8007f2c <hex_char_to_num>
 80082a2:	0124      	lsls	r4, r4, #4
 80082a4:	1824      	adds	r4, r4, r0
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 80082a6:	78b0      	ldrb	r0, [r6, #2]
 80082a8:	f7ff fe40 	bl	8007f2c <hex_char_to_num>
 80082ac:	0005      	movs	r5, r0
 80082ae:	78f0      	ldrb	r0, [r6, #3]
 80082b0:	f7ff fe3c 	bl	8007f2c <hex_char_to_num>
 80082b4:	012d      	lsls	r5, r5, #4
 80082b6:	182d      	adds	r5, r5, r0
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 80082b8:	7930      	ldrb	r0, [r6, #4]
 80082ba:	f7ff fe37 	bl	8007f2c <hex_char_to_num>
 80082be:	900a      	str	r0, [sp, #40]	; 0x28
 80082c0:	7970      	ldrb	r0, [r6, #5]
 80082c2:	f7ff fe33 	bl	8007f2c <hex_char_to_num>
 80082c6:	21c8      	movs	r1, #200	; 0xc8
 80082c8:	466a      	mov	r2, sp
 80082ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082cc:	1852      	adds	r2, r2, r1
 80082ce:	011e      	lsls	r6, r3, #4
 80082d0:	1836      	adds	r6, r6, r0
 80082d2:	8812      	ldrh	r2, [r2, #0]
 80082d4:	08f6      	lsrs	r6, r6, #3
 80082d6:	231f      	movs	r3, #31
 80082d8:	0030      	movs	r0, r6
 80082da:	0016      	movs	r6, r2
 80082dc:	4018      	ands	r0, r3
 80082de:	439e      	bics	r6, r3
 80082e0:	466b      	mov	r3, sp
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
 80082e2:	b2ed      	uxtb	r5, r5
 80082e4:	08ad      	lsrs	r5, r5, #2
 80082e6:	4306      	orrs	r6, r0
 80082e8:	0168      	lsls	r0, r5, #5
 80082ea:	4d71      	ldr	r5, [pc, #452]	; (80084b0 <lv_draw_label+0x52c>)
 80082ec:	b2e4      	uxtb	r4, r4
 80082ee:	4035      	ands	r5, r6
 80082f0:	4305      	orrs	r5, r0
 80082f2:	08e4      	lsrs	r4, r4, #3
 80082f4:	02e0      	lsls	r0, r4, #11
 80082f6:	056c      	lsls	r4, r5, #21
 80082f8:	0d64      	lsrs	r4, r4, #21
 80082fa:	4304      	orrs	r4, r0
 80082fc:	185b      	adds	r3, r3, r1
 80082fe:	801c      	strh	r4, [r3, #0]
 8008300:	b2a3      	uxth	r3, r4
                            recolor.full = dsc->color.full;
 8008302:	9329      	str	r3, [sp, #164]	; 0xa4
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 8008304:	2302      	movs	r3, #2
 8008306:	e77b      	b.n	8008200 <lv_draw_label+0x27c>
                            recolor.full = dsc->color.full;
 8008308:	883b      	ldrh	r3, [r7, #0]
 800830a:	e7fa      	b.n	8008302 <lv_draw_label+0x37e>
                        cmd_state = CMD_STATE_WAIT;
 800830c:	2300      	movs	r3, #0
            lv_color_t color = dsc->color;
 800830e:	883c      	ldrh	r4, [r7, #0]
                        cmd_state = CMD_STATE_WAIT;
 8008310:	930c      	str	r3, [sp, #48]	; 0x30
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8008312:	0031      	movs	r1, r6
 8008314:	9805      	ldr	r0, [sp, #20]
 8008316:	f002 fe8d 	bl	800b034 <lv_font_get_glyph_width>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800831a:	9b14      	ldr	r3, [sp, #80]	; 0x50
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800831c:	9028      	str	r0, [sp, #160]	; 0xa0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800831e:	001a      	movs	r2, r3
 8008320:	4b60      	ldr	r3, [pc, #384]	; (80084a4 <lv_draw_label+0x520>)
 8008322:	429a      	cmp	r2, r3
 8008324:	d01d      	beq.n	8008362 <lv_draw_label+0x3de>
 8008326:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008328:	429a      	cmp	r2, r3
 800832a:	d01a      	beq.n	8008362 <lv_draw_label+0x3de>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
 800832c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800832e:	42ab      	cmp	r3, r5
 8008330:	d817      	bhi.n	8008362 <lv_draw_label+0x3de>
 8008332:	42aa      	cmp	r2, r5
 8008334:	d915      	bls.n	8008362 <lv_draw_label+0x3de>
                    sel_coords.x1 = pos.x;
 8008336:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008338:	a83e      	add	r0, sp, #248	; 0xf8
 800833a:	8003      	strh	r3, [r0, #0]
                    sel_coords.y1 = pos.y;
 800833c:	9b08      	ldr	r3, [sp, #32]
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800833e:	9a12      	ldr	r2, [sp, #72]	; 0x48
                    sel_coords.y1 = pos.y;
 8008340:	8043      	strh	r3, [r0, #2]
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 8008342:	8a3b      	ldrh	r3, [r7, #16]
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
 8008344:	9904      	ldr	r1, [sp, #16]
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 8008346:	3b01      	subs	r3, #1
 8008348:	18d3      	adds	r3, r2, r3
 800834a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800834c:	18d3      	adds	r3, r2, r3
 800834e:	8083      	strh	r3, [r0, #4]
                    sel_coords.y2 = pos.y + line_height - 1;
 8008350:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008352:	9a08      	ldr	r2, [sp, #32]
 8008354:	3b01      	subs	r3, #1
 8008356:	18d3      	adds	r3, r2, r3
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
 8008358:	aa41      	add	r2, sp, #260	; 0x104
                    sel_coords.y2 = pos.y + line_height - 1;
 800835a:	80c3      	strh	r3, [r0, #6]
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
 800835c:	f001 fe7e 	bl	800a05c <lv_draw_rect>
                    color = dsc->sel_color;
 8008360:	887c      	ldrh	r4, [r7, #2]
    if(opa < LV_OPA_MIN) return;
 8008362:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008364:	2b01      	cmp	r3, #1
 8008366:	d901      	bls.n	800836c <lv_draw_label+0x3e8>
 8008368:	f000 fbee 	bl	8008b48 <lv_draw_label+0xbc4>
            if(letter_w > 0) {
 800836c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d006      	beq.n	8008380 <lv_draw_label+0x3fc>
                pos.x += letter_w + dsc->letter_space;
 8008372:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008374:	8a3c      	ldrh	r4, [r7, #16]
 8008376:	18e4      	adds	r4, r4, r3
 8008378:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800837a:	191c      	adds	r4, r3, r4
 800837c:	b223      	sxth	r3, r4
 800837e:	9312      	str	r3, [sp, #72]	; 0x48
        while(i < line_end - line_start) {
 8008380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008382:	9a07      	ldr	r2, [sp, #28]
 8008384:	9936      	ldr	r1, [sp, #216]	; 0xd8
 8008386:	1a9b      	subs	r3, r3, r2
 8008388:	428b      	cmp	r3, r1
 800838a:	d900      	bls.n	800838e <lv_draw_label+0x40a>
 800838c:	e73a      	b.n	8008204 <lv_draw_label+0x280>
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
 800838e:	1cfb      	adds	r3, r7, #3
 8008390:	7fdb      	ldrb	r3, [r3, #31]
 8008392:	079b      	lsls	r3, r3, #30
 8008394:	d51a      	bpl.n	80083cc <lv_draw_label+0x448>
            p1.x = pos_x_start;
 8008396:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008398:	a839      	add	r0, sp, #228	; 0xe4
 800839a:	8003      	strh	r3, [r0, #0]
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	2208      	movs	r2, #8
 80083a0:	5e9b      	ldrsh	r3, [r3, r2]
 80083a2:	0fda      	lsrs	r2, r3, #31
 80083a4:	18d2      	adds	r2, r2, r3
 80083a6:	ab3b      	add	r3, sp, #236	; 0xec
 80083a8:	2102      	movs	r1, #2
 80083aa:	5e5c      	ldrsh	r4, [r3, r1]
 80083ac:	1052      	asrs	r2, r2, #1
 80083ae:	0fe1      	lsrs	r1, r4, #31
 80083b0:	1909      	adds	r1, r1, r4
 80083b2:	1049      	asrs	r1, r1, #1
 80083b4:	1852      	adds	r2, r2, r1
 80083b6:	9923      	ldr	r1, [sp, #140]	; 0x8c
            p2.x = pos.x;
 80083b8:	9c12      	ldr	r4, [sp, #72]	; 0x48
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 80083ba:	188a      	adds	r2, r1, r2
 80083bc:	b212      	sxth	r2, r2
            p2.x = pos.x;
 80083be:	a93e      	add	r1, sp, #248	; 0xf8
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 80083c0:	8042      	strh	r2, [r0, #2]
            p2.y = p1.y;
 80083c2:	804a      	strh	r2, [r1, #2]
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 80083c4:	9a04      	ldr	r2, [sp, #16]
            p2.x = pos.x;
 80083c6:	800c      	strh	r4, [r1, #0]
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 80083c8:	f000 fc4c 	bl	8008c64 <lv_draw_line>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
 80083cc:	2201      	movs	r2, #1
 80083ce:	1cfb      	adds	r3, r7, #3
 80083d0:	7fdb      	ldrb	r3, [r3, #31]
 80083d2:	4213      	tst	r3, r2
 80083d4:	d016      	beq.n	8008404 <lv_draw_label+0x480>
            p1.x = pos_x_start;
 80083d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083d8:	a839      	add	r0, sp, #228	; 0xe4
 80083da:	8003      	strh	r3, [r0, #0]
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 80083dc:	9b05      	ldr	r3, [sp, #20]
 80083de:	68b9      	ldr	r1, [r7, #8]
 80083e0:	7b5b      	ldrb	r3, [r3, #13]
 80083e2:	894a      	ldrh	r2, [r1, #10]
 80083e4:	b25b      	sxtb	r3, r3
 80083e6:	189a      	adds	r2, r3, r2
 80083e8:	890b      	ldrh	r3, [r1, #8]
            p2.x = pos.x;
 80083ea:	a93e      	add	r1, sp, #248	; 0xf8
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 80083ec:	1a9b      	subs	r3, r3, r2
 80083ee:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80083f0:	18d3      	adds	r3, r2, r3
            p2.x = pos.x;
 80083f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 80083f4:	b21b      	sxth	r3, r3
 80083f6:	8043      	strh	r3, [r0, #2]
            p2.x = pos.x;
 80083f8:	800a      	strh	r2, [r1, #0]
            p2.y = p1.y;
 80083fa:	804b      	strh	r3, [r1, #2]
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 80083fc:	9a04      	ldr	r2, [sp, #16]
 80083fe:	ab3b      	add	r3, sp, #236	; 0xec
 8008400:	f000 fc30 	bl	8008c64 <lv_draw_line>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 8008404:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008408:	1cbe      	adds	r6, r7, #2
 800840a:	189d      	adds	r5, r3, r2
 800840c:	2310      	movs	r3, #16
 800840e:	5efa      	ldrsh	r2, [r7, r3]
 8008410:	7ff3      	ldrb	r3, [r6, #31]
 8008412:	9905      	ldr	r1, [sp, #20]
 8008414:	9300      	str	r3, [sp, #0]
 8008416:	0028      	movs	r0, r5
 8008418:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800841a:	f004 fc23 	bl	800cc64 <_lv_txt_get_next_line>
 800841e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008420:	0001      	movs	r1, r0
 8008422:	181b      	adds	r3, r3, r0
 8008424:	930a      	str	r3, [sp, #40]	; 0x28
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
 8008426:	7ff2      	ldrb	r2, [r6, #31]
        pos.x = coords->x1;
 8008428:	9b06      	ldr	r3, [sp, #24]
 800842a:	2400      	movs	r4, #0
 800842c:	5f1c      	ldrsh	r4, [r3, r4]
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
 800842e:	0753      	lsls	r3, r2, #29
 8008430:	d400      	bmi.n	8008434 <lv_draw_label+0x4b0>
 8008432:	e368      	b.n	8008b06 <lv_draw_label+0xb82>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8008434:	2010      	movs	r0, #16
 8008436:	5e3b      	ldrsh	r3, [r7, r0]
 8008438:	9200      	str	r2, [sp, #0]
 800843a:	0028      	movs	r0, r5
 800843c:	9a05      	ldr	r2, [sp, #20]
 800843e:	f004 fbc7 	bl	800cbd0 <_lv_txt_get_width>
 8008442:	9b06      	ldr	r3, [sp, #24]
 8008444:	9a06      	ldr	r2, [sp, #24]
 8008446:	889b      	ldrh	r3, [r3, #4]
 8008448:	8812      	ldrh	r2, [r2, #0]
 800844a:	3301      	adds	r3, #1
 800844c:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800844e:	b21b      	sxth	r3, r3
 8008450:	1a18      	subs	r0, r3, r0
 8008452:	0fc3      	lsrs	r3, r0, #31
 8008454:	1818      	adds	r0, r3, r0
 8008456:	1040      	asrs	r0, r0, #1
            pos.x += lv_area_get_width(coords) - line_width;
 8008458:	1904      	adds	r4, r0, r4
 800845a:	b224      	sxth	r4, r4
 800845c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800845e:	9b08      	ldr	r3, [sp, #32]
 8008460:	4694      	mov	ip, r2
 8008462:	4463      	add	r3, ip
 8008464:	b21b      	sxth	r3, r3
 8008466:	9308      	str	r3, [sp, #32]
 8008468:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800846a:	4463      	add	r3, ip
 800846c:	b29b      	uxth	r3, r3
 800846e:	9323      	str	r3, [sp, #140]	; 0x8c
        line_start = line_end;
 8008470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008472:	9307      	str	r3, [sp, #28]
        if(pos.y > mask->y2) return;
 8008474:	9b04      	ldr	r3, [sp, #16]
 8008476:	2206      	movs	r2, #6
 8008478:	5e9b      	ldrsh	r3, [r3, r2]
 800847a:	9a08      	ldr	r2, [sp, #32]
 800847c:	4293      	cmp	r3, r2
 800847e:	da00      	bge.n	8008482 <lv_draw_label+0x4fe>
 8008480:	e663      	b.n	800814a <lv_draw_label+0x1c6>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 8008482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008484:	9309      	str	r3, [sp, #36]	; 0x24
 8008486:	e658      	b.n	800813a <lv_draw_label+0x1b6>
            if(cmd_state == CMD_STATE_IN) color = recolor;
 8008488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            lv_color_t color = dsc->color;
 800848a:	883c      	ldrh	r4, [r7, #0]
            if(cmd_state == CMD_STATE_IN) color = recolor;
 800848c:	2b02      	cmp	r3, #2
 800848e:	d000      	beq.n	8008492 <lv_draw_label+0x50e>
 8008490:	e73f      	b.n	8008312 <lv_draw_label+0x38e>
 8008492:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8008494:	e73d      	b.n	8008312 <lv_draw_label+0x38e>
 8008496:	46c0      	nop			; (mov r8, r8)
 8008498:	00007c18 	.word	0x00007c18
 800849c:	fffffc00 	.word	0xfffffc00
 80084a0:	0800f335 	.word	0x0800f335
 80084a4:	0000ffff 	.word	0x0000ffff
 80084a8:	20000050 	.word	0x20000050
 80084ac:	20000054 	.word	0x20000054
 80084b0:	fffff81f 	.word	0xfffff81f
    switch(bpp) {
 80084b4:	2302      	movs	r3, #2
 80084b6:	930a      	str	r3, [sp, #40]	; 0x28
            bitmask_init  = 0xC0;
 80084b8:	33be      	adds	r3, #190	; 0xbe
 80084ba:	9317      	str	r3, [sp, #92]	; 0x5c
            bpp_opa_table = _lv_bpp2_opa_table;
 80084bc:	4bd8      	ldr	r3, [pc, #864]	; (8008820 <lv_draw_label+0x89c>)
            bpp_opa_table = _lv_bpp1_opa_table;
 80084be:	9318      	str	r3, [sp, #96]	; 0x60
    int32_t box_w = g->box_w;
 80084c0:	ab3e      	add	r3, sp, #248	; 0xf8
 80084c2:	885a      	ldrh	r2, [r3, #2]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 80084c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    int32_t box_w = g->box_w;
 80084c6:	921b      	str	r2, [sp, #108]	; 0x6c
    int32_t box_h = g->box_h;
 80084c8:	889e      	ldrh	r6, [r3, #4]
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
 80084ca:	9b04      	ldr	r3, [sp, #16]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 80084cc:	4354      	muls	r4, r2
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
 80084ce:	2200      	movs	r2, #0
 80084d0:	5e9b      	ldrsh	r3, [r3, r2]
 80084d2:	2200      	movs	r2, #0
 80084d4:	9216      	str	r2, [sp, #88]	; 0x58
 80084d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084d8:	4293      	cmp	r3, r2
 80084da:	dd03      	ble.n	80084e4 <lv_draw_label+0x560>
 80084dc:	1a9b      	subs	r3, r3, r2
 80084de:	2203      	movs	r2, #3
 80084e0:	435a      	muls	r2, r3
 80084e2:	9216      	str	r2, [sp, #88]	; 0x58
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
 80084e4:	9b04      	ldr	r3, [sp, #16]
 80084e6:	2103      	movs	r1, #3
 80084e8:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80084ea:	2504      	movs	r5, #4
 80084ec:	5f5d      	ldrsh	r5, [r3, r5]
 80084ee:	f7f7 fecb 	bl	8000288 <__divsi3>
 80084f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084f4:	18c0      	adds	r0, r0, r3
 80084f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80084f8:	931d      	str	r3, [sp, #116]	; 0x74
 80084fa:	42a8      	cmp	r0, r5
 80084fc:	dd05      	ble.n	800850a <lv_draw_label+0x586>
 80084fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008500:	1aed      	subs	r5, r5, r3
 8008502:	2303      	movs	r3, #3
 8008504:	3501      	adds	r5, #1
 8008506:	436b      	muls	r3, r5
 8008508:	931d      	str	r3, [sp, #116]	; 0x74
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
 800850a:	9b04      	ldr	r3, [sp, #16]
 800850c:	2202      	movs	r2, #2
 800850e:	5e9b      	ldrsh	r3, [r3, r2]
 8008510:	2200      	movs	r2, #0
 8008512:	9213      	str	r2, [sp, #76]	; 0x4c
 8008514:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008516:	4293      	cmp	r3, r2
 8008518:	dd01      	ble.n	800851e <lv_draw_label+0x59a>
 800851a:	1a9b      	subs	r3, r3, r2
 800851c:	9313      	str	r3, [sp, #76]	; 0x4c
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 800851e:	9b04      	ldr	r3, [sp, #16]
 8008520:	2206      	movs	r2, #6
 8008522:	5e9b      	ldrsh	r3, [r3, r2]
 8008524:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008526:	962a      	str	r6, [sp, #168]	; 0xa8
 8008528:	18b2      	adds	r2, r6, r2
 800852a:	429a      	cmp	r2, r3
 800852c:	dd03      	ble.n	8008536 <lv_draw_label+0x5b2>
 800852e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008530:	1a9b      	subs	r3, r3, r2
 8008532:	3301      	adds	r3, #1
 8008534:	932a      	str	r3, [sp, #168]	; 0xa8
    int32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 8008536:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008538:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800853a:	435c      	muls	r4, r3
 800853c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800853e:	4353      	muls	r3, r2
    map_p += bit_ofs >> 3;
 8008540:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    int32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 8008542:	18e4      	adds	r4, r4, r3
    map_p += bit_ofs >> 3;
 8008544:	10e3      	asrs	r3, r4, #3
 8008546:	18d3      	adds	r3, r2, r3
 8008548:	931e      	str	r3, [sp, #120]	; 0x78
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 800854a:	2307      	movs	r3, #7
 800854c:	401c      	ands	r4, r3
    int32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : g->box_w * g->box_h;
 800854e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 8008550:	940f      	str	r4, [sp, #60]	; 0x3c
    int32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : g->box_w * g->box_h;
 8008552:	4373      	muls	r3, r6
 8008554:	931f      	str	r3, [sp, #124]	; 0x7c
 8008556:	2ba0      	cmp	r3, #160	; 0xa0
 8008558:	dd01      	ble.n	800855e <lv_draw_label+0x5da>
 800855a:	23a0      	movs	r3, #160	; 0xa0
 800855c:	931f      	str	r3, [sp, #124]	; 0x7c
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800855e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8008560:	f003 ffd8 	bl	800c514 <_lv_mem_buf_get>
    lv_color_t * color_buf = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 8008564:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 8008566:	901c      	str	r0, [sp, #112]	; 0x70
    lv_color_t * color_buf = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 8008568:	0058      	lsls	r0, r3, #1
 800856a:	f003 ffd3 	bl	800c514 <_lv_mem_buf_get>
 800856e:	9022      	str	r0, [sp, #136]	; 0x88
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 8008570:	f7fd fdca 	bl	8006108 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8008574:	f003 f922 	bl	800b7bc <lv_disp_get_buf>
 8008578:	0005      	movs	r5, r0
    int32_t vdb_width     = lv_area_get_width(&vdb->area);
 800857a:	2310      	movs	r3, #16
 800857c:	5ec6      	ldrsh	r6, [r0, r3]
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 800857e:	6883      	ldr	r3, [r0, #8]
 8008580:	8a84      	ldrh	r4, [r0, #20]
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
 8008582:	2103      	movs	r1, #3
 8008584:	9816      	ldr	r0, [sp, #88]	; 0x58
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 8008586:	932c      	str	r3, [sp, #176]	; 0xb0
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
 8008588:	f7f7 fe7e 	bl	8000288 <__divsi3>
 800858c:	3401      	adds	r4, #1
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 800858e:	2212      	movs	r2, #18
 8008590:	5eab      	ldrsh	r3, [r5, r2]
 8008592:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008594:	1ba4      	subs	r4, r4, r6
 8008596:	b224      	sxth	r4, r4
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	4363      	muls	r3, r4
 800859c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    map_area.x1 = col_start / 3 + pos_x;
 800859e:	ad39      	add	r5, sp, #228	; 0xe4
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 80085a0:	189b      	adds	r3, r3, r2
 80085a2:	1b9e      	subs	r6, r3, r6
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
 80085a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    map_area.x1 = col_start / 3 + pos_x;
 80085a6:	2264      	movs	r2, #100	; 0x64
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
 80085a8:	4363      	muls	r3, r4
 80085aa:	181b      	adds	r3, r3, r0
 80085ac:	18f6      	adds	r6, r6, r3
 80085ae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80085b0:	0076      	lsls	r6, r6, #1
 80085b2:	199b      	adds	r3, r3, r6
 80085b4:	930d      	str	r3, [sp, #52]	; 0x34
    map_area.x1 = col_start / 3 + pos_x;
 80085b6:	466b      	mov	r3, sp
 80085b8:	189b      	adds	r3, r3, r2
 80085ba:	881e      	ldrh	r6, [r3, #0]
    map_area.x2 = col_end / 3  + pos_x - 1;
 80085bc:	2103      	movs	r1, #3
    map_area.x1 = col_start / 3 + pos_x;
 80085be:	1830      	adds	r0, r6, r0
 80085c0:	8028      	strh	r0, [r5, #0]
    map_area.x2 = col_end / 3  + pos_x - 1;
 80085c2:	981d      	ldr	r0, [sp, #116]	; 0x74
 80085c4:	f7f7 fe60 	bl	8000288 <__divsi3>
    map_area.y1 = row_start + pos_y;
 80085c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80085ca:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80085cc:	4694      	mov	ip, r2
    map_area.x2 = col_end / 3  + pos_x - 1;
 80085ce:	3e01      	subs	r6, #1
    map_area.y1 = row_start + pos_y;
 80085d0:	4463      	add	r3, ip
 80085d2:	b21b      	sxth	r3, r3
    map_area.x2 = col_end / 3  + pos_x - 1;
 80085d4:	1986      	adds	r6, r0, r6
    map_area.y1 = row_start + pos_y;
 80085d6:	806b      	strh	r3, [r5, #2]
    map_area.y2 = map_area.y1;
 80085d8:	80eb      	strh	r3, [r5, #6]
    map_area.x2 = col_end / 3  + pos_x - 1;
 80085da:	80ae      	strh	r6, [r5, #4]
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 80085dc:	f001 fbfa 	bl	8009dd4 <lv_draw_mask_get_cnt>
        if((int32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 80085e0:	9a16      	ldr	r2, [sp, #88]	; 0x58
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
 80085e2:	2103      	movs	r1, #3
        col_bit += ((box_w - col_end) + col_start) * bpp;
 80085e4:	4694      	mov	ip, r2
        if((int32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 80085e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 80085e8:	9033      	str	r0, [sp, #204]	; 0xcc
        if((int32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 80085ea:	1a9b      	subs	r3, r3, r2
 80085ec:	931a      	str	r3, [sp, #104]	; 0x68
        col_bit += ((box_w - col_end) + col_start) * bpp;
 80085ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80085f0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80085f2:	4463      	add	r3, ip
 80085f4:	1a9b      	subs	r3, r3, r2
 80085f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
 80085f8:	4249      	negs	r1, r1
        col_bit += ((box_w - col_end) + col_start) * bpp;
 80085fa:	435a      	muls	r2, r3
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
 80085fc:	981a      	ldr	r0, [sp, #104]	; 0x68
        col_bit += ((box_w - col_end) + col_start) * bpp;
 80085fe:	922d      	str	r2, [sp, #180]	; 0xb4
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
 8008600:	f7f7 fe42 	bl	8000288 <__divsi3>
 8008604:	1904      	adds	r4, r0, r4
 8008606:	0063      	lsls	r3, r4, #1
 8008608:	932e      	str	r3, [sp, #184]	; 0xb8
    int32_t mask_p = 0;
 800860a:	2300      	movs	r3, #0
 800860c:	9319      	str	r3, [sp, #100]	; 0x64
    for(row = row_start ; row < row_end; row++) {
 800860e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008610:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8008612:	4293      	cmp	r3, r2
 8008614:	db2c      	blt.n	8008670 <lv_draw_label+0x6ec>
    if(map_area.y1 != map_area.y2) {
 8008616:	a939      	add	r1, sp, #228	; 0xe4
 8008618:	2206      	movs	r2, #6
 800861a:	5e8b      	ldrsh	r3, [r1, r2]
 800861c:	2002      	movs	r0, #2
 800861e:	5e0a      	ldrsh	r2, [r1, r0]
 8008620:	429a      	cmp	r2, r3
 8008622:	d00c      	beq.n	800863e <lv_draw_label+0x6ba>
        map_area.y2--;
 8008624:	3b01      	subs	r3, #1
 8008626:	80cb      	strh	r3, [r1, #6]
        _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
 8008628:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800862a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800862c:	9302      	str	r3, [sp, #8]
 800862e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008630:	9804      	ldr	r0, [sp, #16]
 8008632:	9301      	str	r3, [sp, #4]
 8008634:	2302      	movs	r3, #2
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800863a:	f7fe fe93 	bl	8007364 <_lv_blend_map>
    _lv_mem_buf_release(mask_buf);
 800863e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8008640:	f003 fe70 	bl	800c324 <_lv_mem_buf_release>
    _lv_mem_buf_release(color_buf);
 8008644:	9822      	ldr	r0, [sp, #136]	; 0x88
    _lv_mem_buf_release(mask_buf);
 8008646:	f003 fe6d 	bl	800c324 <_lv_mem_buf_release>
 800864a:	e68f      	b.n	800836c <lv_draw_label+0x3e8>
        case 8:
 800864c:	2308      	movs	r3, #8
 800864e:	930a      	str	r3, [sp, #40]	; 0x28
            bitmask_init  = 0xFF;
 8008650:	33f7      	adds	r3, #247	; 0xf7
 8008652:	9317      	str	r3, [sp, #92]	; 0x5c
            bpp_opa_table = _lv_bpp8_opa_table;
 8008654:	4b73      	ldr	r3, [pc, #460]	; (8008824 <lv_draw_label+0x8a0>)
 8008656:	e732      	b.n	80084be <lv_draw_label+0x53a>
    if(bpp == 3) bpp = 4;
 8008658:	2304      	movs	r3, #4
 800865a:	930a      	str	r3, [sp, #40]	; 0x28
            bitmask_init  = 0xF0;
 800865c:	33ec      	adds	r3, #236	; 0xec
 800865e:	9317      	str	r3, [sp, #92]	; 0x5c
            bpp_opa_table = _lv_bpp4_opa_table;
 8008660:	4b71      	ldr	r3, [pc, #452]	; (8008828 <lv_draw_label+0x8a4>)
 8008662:	e72c      	b.n	80084be <lv_draw_label+0x53a>
    switch(bpp) {
 8008664:	2301      	movs	r3, #1
 8008666:	930a      	str	r3, [sp, #40]	; 0x28
            bitmask_init  = 0x80;
 8008668:	337f      	adds	r3, #127	; 0x7f
 800866a:	9317      	str	r3, [sp, #92]	; 0x5c
            bpp_opa_table = _lv_bpp1_opa_table;
 800866c:	4b6f      	ldr	r3, [pc, #444]	; (800882c <lv_draw_label+0x8a8>)
 800866e:	e726      	b.n	80084be <lv_draw_label+0x53a>
        bitmask = bitmask_init >> col_bit;
 8008670:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008672:	9917      	ldr	r1, [sp, #92]	; 0x5c
        uint32_t subpx_cnt = 0;
 8008674:	2200      	movs	r2, #0
        bitmask = bitmask_init >> col_bit;
 8008676:	40d9      	lsrs	r1, r3
        for(col = col_start; col < col_end; col++) {
 8008678:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800867a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800867c:	930e      	str	r3, [sp, #56]	; 0x38
 800867e:	2308      	movs	r3, #8
        bitmask = bitmask_init >> col_bit;
 8008680:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008682:	1a1b      	subs	r3, r3, r0
 8008684:	931b      	str	r3, [sp, #108]	; 0x6c
        for(col = col_start; col < col_end; col++) {
 8008686:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008688:	980e      	ldr	r0, [sp, #56]	; 0x38
 800868a:	4283      	cmp	r3, r0
 800868c:	dc3c      	bgt.n	8008708 <lv_draw_label+0x784>
        if(other_mask_cnt) {
 800868e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8008690:	2b00      	cmp	r3, #0
 8008692:	d019      	beq.n	80086c8 <lv_draw_label+0x744>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, map_area.x1, map_area.y2,
 8008694:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008696:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008698:	ac39      	add	r4, sp, #228	; 0xe4
 800869a:	189b      	adds	r3, r3, r2
 800869c:	001e      	movs	r6, r3
 800869e:	2300      	movs	r3, #0
 80086a0:	5ee1      	ldrsh	r1, [r4, r3]
 80086a2:	88a3      	ldrh	r3, [r4, #4]
 80086a4:	2006      	movs	r0, #6
 80086a6:	5e22      	ldrsh	r2, [r4, r0]
 80086a8:	3301      	adds	r3, #1
 80086aa:	1a5b      	subs	r3, r3, r1
 80086ac:	b21b      	sxth	r3, r3
 80086ae:	0030      	movs	r0, r6
 80086b0:	f001 fb4e 	bl	8009d50 <lv_draw_mask_apply>
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 80086b4:	2800      	cmp	r0, #0
 80086b6:	d107      	bne.n	80086c8 <lv_draw_label+0x744>
 80086b8:	88a1      	ldrh	r1, [r4, #4]
 80086ba:	8823      	ldrh	r3, [r4, #0]
 80086bc:	3101      	adds	r1, #1
 80086be:	1ac9      	subs	r1, r1, r3
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&map_area));
 80086c0:	b209      	sxth	r1, r1
 80086c2:	0030      	movs	r0, r6
 80086c4:	f003 ffae 	bl	800c624 <_lv_memset_00>
        if((int32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 80086c8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80086ca:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80086cc:	18eb      	adds	r3, r5, r3
 80086ce:	ac39      	add	r4, sp, #228	; 0xe4
 80086d0:	4293      	cmp	r3, r2
 80086d2:	db00      	blt.n	80086d6 <lv_draw_label+0x752>
 80086d4:	e0ae      	b.n	8008834 <lv_draw_label+0x8b0>
            map_area.y2 ++;
 80086d6:	88e3      	ldrh	r3, [r4, #6]
 80086d8:	3301      	adds	r3, #1
 80086da:	80e3      	strh	r3, [r4, #6]
        col_bit += ((box_w - col_end) + col_start) * bpp;
 80086dc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80086de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086e0:	4694      	mov	ip, r2
        map_p += (col_bit >> 3);
 80086e2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
        col_bit += ((box_w - col_end) + col_start) * bpp;
 80086e4:	4463      	add	r3, ip
 80086e6:	001c      	movs	r4, r3
        map_p += (col_bit >> 3);
 80086e8:	10db      	asrs	r3, r3, #3
 80086ea:	18d3      	adds	r3, r2, r3
 80086ec:	931e      	str	r3, [sp, #120]	; 0x78
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
 80086ee:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
        col_bit = col_bit & 0x7;
 80086f0:	2307      	movs	r3, #7
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
 80086f2:	4694      	mov	ip, r2
        col_bit = col_bit & 0x7;
 80086f4:	401c      	ands	r4, r3
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
 80086f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        col_bit = col_bit & 0x7;
 80086f8:	940f      	str	r4, [sp, #60]	; 0x3c
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
 80086fa:	4463      	add	r3, ip
 80086fc:	930d      	str	r3, [sp, #52]	; 0x34
    for(row = row_start ; row < row_end; row++) {
 80086fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008700:	9519      	str	r5, [sp, #100]	; 0x64
 8008702:	3301      	adds	r3, #1
 8008704:	9313      	str	r3, [sp, #76]	; 0x4c
 8008706:	e782      	b.n	800860e <lv_draw_label+0x68a>
            letter_px = (*map_p & bitmask) >> (8 - col_bit - bpp);
 8008708:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800870a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800870c:	7818      	ldrb	r0, [r3, #0]
 800870e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008710:	4008      	ands	r0, r1
 8008712:	1b1b      	subs	r3, r3, r4
 8008714:	40d8      	lsrs	r0, r3
 8008716:	b2c3      	uxtb	r3, r0
            if(letter_px != 0) {
 8008718:	2b00      	cmp	r3, #0
 800871a:	d009      	beq.n	8008730 <lv_draw_label+0x7ac>
                if(opa == LV_OPA_COVER) {
 800871c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800871e:	2cff      	cmp	r4, #255	; 0xff
 8008720:	d165      	bne.n	80087ee <lv_draw_label+0x86a>
                    px_opa = bpp == 8 ? letter_px : bpp_opa_table[letter_px];
 8008722:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008724:	2c08      	cmp	r4, #8
 8008726:	d003      	beq.n	8008730 <lv_draw_label+0x7ac>
 8008728:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800872a:	4018      	ands	r0, r3
 800872c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800872e:	5c1b      	ldrb	r3, [r3, r0]
            font_rgb[subpx_cnt] = px_opa;
 8008730:	ac35      	add	r4, sp, #212	; 0xd4
 8008732:	54a3      	strb	r3, [r4, r2]
            subpx_cnt ++;
 8008734:	3201      	adds	r2, #1
            if(subpx_cnt == 3) {
 8008736:	2a03      	cmp	r2, #3
 8008738:	d14c      	bne.n	80087d4 <lv_draw_label+0x850>
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
 800873a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
 800873c:	7826      	ldrb	r6, [r4, #0]
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
 800873e:	785b      	ldrb	r3, [r3, #1]
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
 8008740:	32fc      	adds	r2, #252	; 0xfc
 8008742:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8008744:	1b92      	subs	r2, r2, r6
 8008746:	08db      	lsrs	r3, r3, #3
 8008748:	4353      	muls	r3, r2
 800874a:	4370      	muls	r0, r6
 800874c:	181b      	adds	r3, r3, r0
 800874e:	201f      	movs	r0, #31
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
 8008750:	22ff      	movs	r2, #255	; 0xff
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
 8008752:	0a1b      	lsrs	r3, r3, #8
 8008754:	4018      	ands	r0, r3
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
 8008756:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
 8008758:	4684      	mov	ip, r0
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
 800875a:	781b      	ldrb	r3, [r3, #0]
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
 800875c:	78a0      	ldrb	r0, [r4, #2]
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
 800875e:	06db      	lsls	r3, r3, #27
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
 8008760:	1a12      	subs	r2, r2, r0
 8008762:	0edb      	lsrs	r3, r3, #27
 8008764:	4353      	muls	r3, r2
 8008766:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8008768:	4342      	muls	r2, r0
 800876a:	189a      	adds	r2, r3, r2
 800876c:	231f      	movs	r3, #31
 800876e:	0a12      	lsrs	r2, r2, #8
 8008770:	4013      	ands	r3, r2
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
 8008772:	22ff      	movs	r2, #255	; 0xff
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
 8008774:	932c      	str	r3, [sp, #176]	; 0xb0
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
 8008776:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
 8008778:	7864      	ldrb	r4, [r4, #1]
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
 800877a:	881b      	ldrh	r3, [r3, #0]
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
 800877c:	1b12      	subs	r2, r2, r4
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
 800877e:	055b      	lsls	r3, r3, #21
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
 8008780:	0e9b      	lsrs	r3, r3, #26
 8008782:	4353      	muls	r3, r2
 8008784:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8008786:	4362      	muls	r2, r4
 8008788:	189b      	adds	r3, r3, r2
 800878a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800878c:	049b      	lsls	r3, r3, #18
 800878e:	0e9b      	lsrs	r3, r3, #26
 8008790:	1952      	adds	r2, r2, r5
                if(font_rgb[0] == 0 && font_rgb[1] == 0 && font_rgb[2] == 0) mask_buf[mask_p] = LV_OPA_TRANSP;
 8008792:	2e00      	cmp	r6, #0
 8008794:	d13a      	bne.n	800880c <lv_draw_label+0x888>
 8008796:	2c00      	cmp	r4, #0
 8008798:	d138      	bne.n	800880c <lv_draw_label+0x888>
 800879a:	2800      	cmp	r0, #0
 800879c:	d136      	bne.n	800880c <lv_draw_label+0x888>
                color_buf[mask_p] = res_color;
 800879e:	261f      	movs	r6, #31
                else mask_buf[mask_p] = LV_OPA_COVER;
 80087a0:	7010      	strb	r0, [r2, #0]
                color_buf[mask_p] = res_color;
 80087a2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80087a4:	0068      	lsls	r0, r5, #1
 80087a6:	1810      	adds	r0, r2, r0
 80087a8:	7804      	ldrb	r4, [r0, #0]
 80087aa:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80087ac:	43b4      	bics	r4, r6
 80087ae:	4314      	orrs	r4, r2
 80087b0:	7004      	strb	r4, [r0, #0]
 80087b2:	8802      	ldrh	r2, [r0, #0]
 80087b4:	4c1e      	ldr	r4, [pc, #120]	; (8008830 <lv_draw_label+0x8ac>)
 80087b6:	015b      	lsls	r3, r3, #5
 80087b8:	4022      	ands	r2, r4
 80087ba:	4313      	orrs	r3, r2
 80087bc:	4662      	mov	r2, ip
 80087be:	00d6      	lsls	r6, r2, #3
                subpx_cnt = 0;
 80087c0:	2200      	movs	r2, #0
                color_buf[mask_p] = res_color;
 80087c2:	8003      	strh	r3, [r0, #0]
 80087c4:	055b      	lsls	r3, r3, #21
 80087c6:	0f5b      	lsrs	r3, r3, #29
 80087c8:	4333      	orrs	r3, r6
 80087ca:	7043      	strb	r3, [r0, #1]
                vdb_buf_tmp++;
 80087cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                mask_p++;
 80087ce:	3501      	adds	r5, #1
                vdb_buf_tmp++;
 80087d0:	3302      	adds	r3, #2
 80087d2:	930d      	str	r3, [sp, #52]	; 0x34
            if(col_bit < (int32_t)(8 - bpp)) {
 80087d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087d6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80087d8:	4283      	cmp	r3, r0
 80087da:	da19      	bge.n	8008810 <lv_draw_label+0x88c>
                col_bit += bpp;
 80087dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80087de:	4684      	mov	ip, r0
                bitmask = bitmask >> bpp;
 80087e0:	40c1      	lsrs	r1, r0
                col_bit += bpp;
 80087e2:	4463      	add	r3, ip
 80087e4:	930f      	str	r3, [sp, #60]	; 0x3c
        for(col = col_start; col < col_end; col++) {
 80087e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087e8:	3301      	adds	r3, #1
 80087ea:	930e      	str	r3, [sp, #56]	; 0x38
 80087ec:	e74b      	b.n	8008686 <lv_draw_label+0x702>
 80087ee:	23ff      	movs	r3, #255	; 0xff
 80087f0:	4018      	ands	r0, r3
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
 80087f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087f4:	2b08      	cmp	r3, #8
 80087f6:	d103      	bne.n	8008800 <lv_draw_label+0x87c>
 80087f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087fa:	4358      	muls	r0, r3
 80087fc:	0a03      	lsrs	r3, r0, #8
 80087fe:	e797      	b.n	8008730 <lv_draw_label+0x7ac>
                             : (uint32_t)((uint32_t)bpp_opa_table[letter_px] * opa) >> 8;
 8008800:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008802:	5c1b      	ldrb	r3, [r3, r0]
 8008804:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008806:	4343      	muls	r3, r0
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
 8008808:	0a1b      	lsrs	r3, r3, #8
 800880a:	e791      	b.n	8008730 <lv_draw_label+0x7ac>
                else mask_buf[mask_p] = LV_OPA_COVER;
 800880c:	20ff      	movs	r0, #255	; 0xff
 800880e:	e7c6      	b.n	800879e <lv_draw_label+0x81a>
                map_p++;
 8008810:	9b1e      	ldr	r3, [sp, #120]	; 0x78
                bitmask = bitmask_init;
 8008812:	9917      	ldr	r1, [sp, #92]	; 0x5c
                map_p++;
 8008814:	3301      	adds	r3, #1
 8008816:	931e      	str	r3, [sp, #120]	; 0x78
                col_bit = 0;
 8008818:	2300      	movs	r3, #0
 800881a:	930f      	str	r3, [sp, #60]	; 0x3c
 800881c:	e7e3      	b.n	80087e6 <lv_draw_label+0x862>
 800881e:	46c0      	nop			; (mov r8, r8)
 8008820:	0800f33e 	.word	0x0800f33e
 8008824:	0800f352 	.word	0x0800f352
 8008828:	0800f342 	.word	0x0800f342
 800882c:	0800f33c 	.word	0x0800f33c
 8008830:	fffff81f 	.word	0xfffff81f
            _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
 8008834:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008836:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008838:	9302      	str	r3, [sp, #8]
 800883a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800883c:	0021      	movs	r1, r4
 800883e:	9301      	str	r3, [sp, #4]
 8008840:	2302      	movs	r3, #2
 8008842:	9804      	ldr	r0, [sp, #16]
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008848:	f7fe fd8c 	bl	8007364 <_lv_blend_map>
            map_area.y1 = map_area.y2 + 1;
 800884c:	88e3      	ldrh	r3, [r4, #6]
            mask_p = 0;
 800884e:	2500      	movs	r5, #0
            map_area.y1 = map_area.y2 + 1;
 8008850:	3301      	adds	r3, #1
 8008852:	b21b      	sxth	r3, r3
 8008854:	8063      	strh	r3, [r4, #2]
            map_area.y2 = map_area.y1;
 8008856:	80e3      	strh	r3, [r4, #6]
 8008858:	e740      	b.n	80086dc <lv_draw_label+0x758>
 800885a:	466b      	mov	r3, sp
 800885c:	2278      	movs	r2, #120	; 0x78
 800885e:	189b      	adds	r3, r3, r2
 8008860:	801c      	strh	r4, [r3, #0]
    if(bpp == 3) bpp = 4;
 8008862:	2803      	cmp	r0, #3
 8008864:	d100      	bne.n	8008868 <lv_draw_label+0x8e4>
 8008866:	e0c0      	b.n	80089ea <lv_draw_label+0xa66>
    switch(bpp) {
 8008868:	3801      	subs	r0, #1
 800886a:	2807      	cmp	r0, #7
 800886c:	d900      	bls.n	8008870 <lv_draw_label+0x8ec>
 800886e:	e57d      	b.n	800836c <lv_draw_label+0x3e8>
 8008870:	f7f7 fc6c 	bl	800014c <__gnu_thumb1_case_shi>
 8008874:	000800c2 	.word	0x000800c2
 8008878:	00bbfd7c 	.word	0x00bbfd7c
 800887c:	fd7cfd7c 	.word	0xfd7cfd7c
 8008880:	00b4fd7c 	.word	0x00b4fd7c
            bitmask_init  = 0xC0;
 8008884:	22c0      	movs	r2, #192	; 0xc0
    switch(bpp) {
 8008886:	2302      	movs	r3, #2
            bitmask_init  = 0xC0;
 8008888:	9216      	str	r2, [sp, #88]	; 0x58
            bpp_opa_table_p = _lv_bpp2_opa_table;
 800888a:	4aa8      	ldr	r2, [pc, #672]	; (8008b2c <lv_draw_label+0xba8>)
    switch(bpp) {
 800888c:	930a      	str	r3, [sp, #40]	; 0x28
            shades = 4;
 800888e:	18db      	adds	r3, r3, r3
            bpp_opa_table_p = _lv_bpp1_opa_table;
 8008890:	920f      	str	r2, [sp, #60]	; 0x3c
    if(opa < LV_OPA_MAX) {
 8008892:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008894:	2afc      	cmp	r2, #252	; 0xfc
 8008896:	d814      	bhi.n	80088c2 <lv_draw_label+0x93e>
        if(prev_opa != opa || prev_bpp != bpp) {
 8008898:	4aa5      	ldr	r2, [pc, #660]	; (8008b30 <lv_draw_label+0xbac>)
 800889a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800889c:	7811      	ldrb	r1, [r2, #0]
 800889e:	2200      	movs	r2, #0
 80088a0:	4281      	cmp	r1, r0
 80088a2:	d000      	beq.n	80088a6 <lv_draw_label+0x922>
 80088a4:	e0af      	b.n	8008a06 <lv_draw_label+0xa82>
 80088a6:	49a3      	ldr	r1, [pc, #652]	; (8008b34 <lv_draw_label+0xbb0>)
 80088a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80088aa:	6809      	ldr	r1, [r1, #0]
 80088ac:	4281      	cmp	r1, r0
 80088ae:	d000      	beq.n	80088b2 <lv_draw_label+0x92e>
 80088b0:	e0a9      	b.n	8008a06 <lv_draw_label+0xa82>
        prev_opa = opa;
 80088b2:	4b9f      	ldr	r3, [pc, #636]	; (8008b30 <lv_draw_label+0xbac>)
 80088b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80088b6:	701a      	strb	r2, [r3, #0]
        prev_bpp = bpp;
 80088b8:	4b9e      	ldr	r3, [pc, #632]	; (8008b34 <lv_draw_label+0xbb0>)
 80088ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088bc:	601a      	str	r2, [r3, #0]
        bpp_opa_table_p = opa_table;
 80088be:	4b9e      	ldr	r3, [pc, #632]	; (8008b38 <lv_draw_label+0xbb4>)
 80088c0:	930f      	str	r3, [sp, #60]	; 0x3c
    int32_t box_w = g->box_w;
 80088c2:	ab3e      	add	r3, sp, #248	; 0xf8
 80088c4:	885d      	ldrh	r5, [r3, #2]
    int32_t box_h = g->box_h;
 80088c6:	889b      	ldrh	r3, [r3, #4]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 80088c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    int32_t box_h = g->box_h;
 80088ca:	931b      	str	r3, [sp, #108]	; 0x6c
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
 80088cc:	9b04      	ldr	r3, [sp, #16]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 80088ce:	436c      	muls	r4, r5
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
 80088d0:	2200      	movs	r2, #0
 80088d2:	5e9b      	ldrsh	r3, [r3, r2]
 80088d4:	2200      	movs	r2, #0
 80088d6:	9213      	str	r2, [sp, #76]	; 0x4c
 80088d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088da:	4293      	cmp	r3, r2
 80088dc:	dd01      	ble.n	80088e2 <lv_draw_label+0x95e>
 80088de:	1a9b      	subs	r3, r3, r2
 80088e0:	9313      	str	r3, [sp, #76]	; 0x4c
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
 80088e2:	9b04      	ldr	r3, [sp, #16]
 80088e4:	2604      	movs	r6, #4
 80088e6:	5f9e      	ldrsh	r6, [r3, r6]
 80088e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088ea:	9517      	str	r5, [sp, #92]	; 0x5c
 80088ec:	18eb      	adds	r3, r5, r3
 80088ee:	42b3      	cmp	r3, r6
 80088f0:	dd03      	ble.n	80088fa <lv_draw_label+0x976>
 80088f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088f4:	1af6      	subs	r6, r6, r3
 80088f6:	1c73      	adds	r3, r6, #1
 80088f8:	9317      	str	r3, [sp, #92]	; 0x5c
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
 80088fa:	9b04      	ldr	r3, [sp, #16]
 80088fc:	2202      	movs	r2, #2
 80088fe:	5e9b      	ldrsh	r3, [r3, r2]
 8008900:	2200      	movs	r2, #0
 8008902:	920e      	str	r2, [sp, #56]	; 0x38
 8008904:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008906:	4293      	cmp	r3, r2
 8008908:	dd01      	ble.n	800890e <lv_draw_label+0x98a>
 800890a:	1a9b      	subs	r3, r3, r2
 800890c:	930e      	str	r3, [sp, #56]	; 0x38
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 800890e:	9b04      	ldr	r3, [sp, #16]
 8008910:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008912:	2206      	movs	r2, #6
 8008914:	5e9b      	ldrsh	r3, [r3, r2]
 8008916:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008918:	1852      	adds	r2, r2, r1
 800891a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800891c:	911d      	str	r1, [sp, #116]	; 0x74
 800891e:	429a      	cmp	r2, r3
 8008920:	dd03      	ble.n	800892a <lv_draw_label+0x9a6>
 8008922:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008924:	1a9b      	subs	r3, r3, r2
 8008926:	3301      	adds	r3, #1
 8008928:	931d      	str	r3, [sp, #116]	; 0x74
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 800892a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800892c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800892e:	435c      	muls	r4, r3
 8008930:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008932:	4353      	muls	r3, r2
    map_p += bit_ofs >> 3;
 8008934:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 8008936:	18e4      	adds	r4, r4, r3
    map_p += bit_ofs >> 3;
 8008938:	08e3      	lsrs	r3, r4, #3
 800893a:	18d3      	adds	r3, r2, r3
 800893c:	9318      	str	r3, [sp, #96]	; 0x60
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 800893e:	2307      	movs	r3, #7
 8008940:	401c      	ands	r4, r3
    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 8008942:	f7fd fbe1 	bl	8006108 <_lv_refr_get_disp_refreshing>
 8008946:	f002 fec7 	bl	800b6d8 <lv_disp_get_hor_res>
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 800894a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800894c:	436b      	muls	r3, r5
 800894e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008950:	4283      	cmp	r3, r0
 8008952:	dd00      	ble.n	8008956 <lv_draw_label+0x9d2>
 8008954:	901b      	str	r0, [sp, #108]	; 0x6c
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 8008956:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008958:	f003 fddc 	bl	800c514 <_lv_mem_buf_get>
    fill_area.x1 = col_start + pos_x;
 800895c:	2264      	movs	r2, #100	; 0x64
 800895e:	466b      	mov	r3, sp
    fill_area.y1 = row_start + pos_y;
 8008960:	990e      	ldr	r1, [sp, #56]	; 0x38
    fill_area.x1 = col_start + pos_x;
 8008962:	189b      	adds	r3, r3, r2
    fill_area.y1 = row_start + pos_y;
 8008964:	468c      	mov	ip, r1
    fill_area.x1 = col_start + pos_x;
 8008966:	881e      	ldrh	r6, [r3, #0]
 8008968:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800896a:	ab39      	add	r3, sp, #228	; 0xe4
 800896c:	18b2      	adds	r2, r6, r2
 800896e:	801a      	strh	r2, [r3, #0]
    fill_area.x2 = col_end  + pos_x - 1;
 8008970:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008972:	3e01      	subs	r6, #1
 8008974:	18b6      	adds	r6, r6, r2
    fill_area.y1 = row_start + pos_y;
 8008976:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    fill_area.x2 = col_end  + pos_x - 1;
 8008978:	809e      	strh	r6, [r3, #4]
    fill_area.y1 = row_start + pos_y;
 800897a:	4462      	add	r2, ip
 800897c:	b212      	sxth	r2, r2
 800897e:	805a      	strh	r2, [r3, #2]
    fill_area.y2 = fill_area.y1;
 8008980:	80da      	strh	r2, [r3, #6]
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 8008982:	900d      	str	r0, [sp, #52]	; 0x34
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 8008984:	f001 fa26 	bl	8009dd4 <lv_draw_mask_get_cnt>
    uint32_t col_bit_max = 8 - bpp;
 8008988:	2308      	movs	r3, #8
 800898a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    int32_t mask_p = 0;
 800898c:	2600      	movs	r6, #0
    uint32_t col_bit_max = 8 - bpp;
 800898e:	1a9b      	subs	r3, r3, r2
 8008990:	9319      	str	r3, [sp, #100]	; 0x64
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 8008992:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 8008994:	901f      	str	r0, [sp, #124]	; 0x7c
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 8008996:	18ed      	adds	r5, r5, r3
 8008998:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800899a:	1aed      	subs	r5, r5, r3
 800899c:	0013      	movs	r3, r2
 800899e:	436b      	muls	r3, r5
 80089a0:	931c      	str	r3, [sp, #112]	; 0x70
    for(row = row_start ; row < row_end; row++) {
 80089a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089a4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80089a6:	4293      	cmp	r3, r2
 80089a8:	db3a      	blt.n	8008a20 <lv_draw_label+0xa9c>
    if(fill_area.y1 != fill_area.y2) {
 80089aa:	a939      	add	r1, sp, #228	; 0xe4
 80089ac:	2206      	movs	r2, #6
 80089ae:	5e8b      	ldrsh	r3, [r1, r2]
 80089b0:	2002      	movs	r0, #2
 80089b2:	5e0a      	ldrsh	r2, [r1, r0]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d00f      	beq.n	80089d8 <lv_draw_label+0xa54>
        fill_area.y2--;
 80089b8:	3b01      	subs	r3, #1
 80089ba:	80cb      	strh	r3, [r1, #6]
        _lv_blend_fill(clip_area, &fill_area,
 80089bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80089be:	2078      	movs	r0, #120	; 0x78
 80089c0:	9302      	str	r3, [sp, #8]
 80089c2:	23ff      	movs	r3, #255	; 0xff
 80089c4:	466a      	mov	r2, sp
 80089c6:	9301      	str	r3, [sp, #4]
 80089c8:	3bfd      	subs	r3, #253	; 0xfd
 80089ca:	9300      	str	r3, [sp, #0]
 80089cc:	1812      	adds	r2, r2, r0
 80089ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089d0:	8812      	ldrh	r2, [r2, #0]
 80089d2:	9804      	ldr	r0, [sp, #16]
 80089d4:	f7fe fa80 	bl	8006ed8 <_lv_blend_fill>
    _lv_mem_buf_release(mask_buf);
 80089d8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80089da:	e634      	b.n	8008646 <lv_draw_label+0x6c2>
        case 8:
 80089dc:	2308      	movs	r3, #8
            bitmask_init  = 0xFF;
 80089de:	22ff      	movs	r2, #255	; 0xff
        case 8:
 80089e0:	930a      	str	r3, [sp, #40]	; 0x28
            bitmask_init  = 0xFF;
 80089e2:	9216      	str	r2, [sp, #88]	; 0x58
            shades = 256;
 80089e4:	33f8      	adds	r3, #248	; 0xf8
            bpp_opa_table_p = _lv_bpp8_opa_table;
 80089e6:	4a55      	ldr	r2, [pc, #340]	; (8008b3c <lv_draw_label+0xbb8>)
 80089e8:	e752      	b.n	8008890 <lv_draw_label+0x90c>
    if(bpp == 3) bpp = 4;
 80089ea:	2304      	movs	r3, #4
            bitmask_init  = 0xF0;
 80089ec:	22f0      	movs	r2, #240	; 0xf0
    if(bpp == 3) bpp = 4;
 80089ee:	930a      	str	r3, [sp, #40]	; 0x28
            bitmask_init  = 0xF0;
 80089f0:	9216      	str	r2, [sp, #88]	; 0x58
            shades = 16;
 80089f2:	330c      	adds	r3, #12
            bpp_opa_table_p = _lv_bpp4_opa_table;
 80089f4:	4a52      	ldr	r2, [pc, #328]	; (8008b40 <lv_draw_label+0xbbc>)
 80089f6:	e74b      	b.n	8008890 <lv_draw_label+0x90c>
    switch(bpp) {
 80089f8:	2301      	movs	r3, #1
            bitmask_init  = 0x80;
 80089fa:	2280      	movs	r2, #128	; 0x80
    switch(bpp) {
 80089fc:	930a      	str	r3, [sp, #40]	; 0x28
            bitmask_init  = 0x80;
 80089fe:	9216      	str	r2, [sp, #88]	; 0x58
            shades = 2;
 8008a00:	18db      	adds	r3, r3, r3
            bpp_opa_table_p = _lv_bpp1_opa_table;
 8008a02:	4a50      	ldr	r2, [pc, #320]	; (8008b44 <lv_draw_label+0xbc0>)
 8008a04:	e744      	b.n	8008890 <lv_draw_label+0x90c>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 8008a06:	484c      	ldr	r0, [pc, #304]	; (8008b38 <lv_draw_label+0xbb4>)
 8008a08:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008a0a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008a0c:	5c89      	ldrb	r1, [r1, r2]
 8008a0e:	29ff      	cmp	r1, #255	; 0xff
 8008a10:	d001      	beq.n	8008a16 <lv_draw_label+0xa92>
 8008a12:	4361      	muls	r1, r4
 8008a14:	0a0c      	lsrs	r4, r1, #8
 8008a16:	5484      	strb	r4, [r0, r2]
            for(i = 0; i < shades; i++) {
 8008a18:	3201      	adds	r2, #1
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d1f4      	bne.n	8008a08 <lv_draw_label+0xa84>
 8008a1e:	e748      	b.n	80088b2 <lv_draw_label+0x92e>
        bitmask = bitmask_init >> col_bit;
 8008a20:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008a22:	0035      	movs	r5, r6
 8008a24:	40e2      	lsrs	r2, r4
        for(col = col_start; col < col_end; col++) {
 8008a26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a28:	1b99      	subs	r1, r3, r6
 8008a2a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008a2c:	194b      	adds	r3, r1, r5
 8008a2e:	4283      	cmp	r3, r0
 8008a30:	db33      	blt.n	8008a9a <lv_draw_label+0xb16>
        if(other_mask_cnt) {
 8008a32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d018      	beq.n	8008a6a <lv_draw_label+0xae6>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
 8008a38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a3a:	199b      	adds	r3, r3, r6
 8008a3c:	ae39      	add	r6, sp, #228	; 0xe4
 8008a3e:	931a      	str	r3, [sp, #104]	; 0x68
 8008a40:	2300      	movs	r3, #0
 8008a42:	5ef1      	ldrsh	r1, [r6, r3]
 8008a44:	88b3      	ldrh	r3, [r6, #4]
 8008a46:	2006      	movs	r0, #6
 8008a48:	5e32      	ldrsh	r2, [r6, r0]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	1a5b      	subs	r3, r3, r1
 8008a4e:	b21b      	sxth	r3, r3
 8008a50:	981a      	ldr	r0, [sp, #104]	; 0x68
 8008a52:	f001 f97d 	bl	8009d50 <lv_draw_mask_apply>
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 8008a56:	2800      	cmp	r0, #0
 8008a58:	d107      	bne.n	8008a6a <lv_draw_label+0xae6>
 8008a5a:	88b1      	ldrh	r1, [r6, #4]
 8008a5c:	8833      	ldrh	r3, [r6, #0]
 8008a5e:	3101      	adds	r1, #1
 8008a60:	1ac9      	subs	r1, r1, r3
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&fill_area));
 8008a62:	b209      	sxth	r1, r1
 8008a64:	981a      	ldr	r0, [sp, #104]	; 0x68
 8008a66:	f003 fddd 	bl	800c624 <_lv_memset_00>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 8008a6a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008a6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a6e:	ae39      	add	r6, sp, #228	; 0xe4
 8008a70:	1a9b      	subs	r3, r3, r2
 8008a72:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008a74:	195b      	adds	r3, r3, r5
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d92f      	bls.n	8008ada <lv_draw_label+0xb56>
            fill_area.y2 ++;
 8008a7a:	88f3      	ldrh	r3, [r6, #6]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	80f3      	strh	r3, [r6, #6]
        col_bit += col_bit_row_ofs;
 8008a80:	9b1c      	ldr	r3, [sp, #112]	; 0x70
        map_p += (col_bit >> 3);
 8008a82:	9a18      	ldr	r2, [sp, #96]	; 0x60
        col_bit += col_bit_row_ofs;
 8008a84:	191c      	adds	r4, r3, r4
        map_p += (col_bit >> 3);
 8008a86:	08e3      	lsrs	r3, r4, #3
 8008a88:	18d3      	adds	r3, r2, r3
 8008a8a:	9318      	str	r3, [sp, #96]	; 0x60
        col_bit = col_bit & 0x7;
 8008a8c:	2307      	movs	r3, #7
 8008a8e:	401c      	ands	r4, r3
    for(row = row_start ; row < row_end; row++) {
 8008a90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a92:	002e      	movs	r6, r5
 8008a94:	3301      	adds	r3, #1
 8008a96:	930e      	str	r3, [sp, #56]	; 0x38
 8008a98:	e783      	b.n	80089a2 <lv_draw_label+0xa1e>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 8008a9a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008a9c:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	1b00      	subs	r0, r0, r4
 8008aa2:	4013      	ands	r3, r2
 8008aa4:	40c3      	lsrs	r3, r0
            if(letter_px) {
 8008aa6:	b2d8      	uxtb	r0, r3
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	d00d      	beq.n	8008ac8 <lv_draw_label+0xb44>
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
 8008aac:	20ff      	movs	r0, #255	; 0xff
 8008aae:	4003      	ands	r3, r0
 8008ab0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008ab2:	5cc3      	ldrb	r3, [r0, r3]
 8008ab4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008ab6:	5543      	strb	r3, [r0, r5]
            if(col_bit < col_bit_max) {
 8008ab8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008aba:	42a3      	cmp	r3, r4
 8008abc:	d907      	bls.n	8008ace <lv_draw_label+0xb4a>
                col_bit += bpp;
 8008abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                bitmask = bitmask >> bpp;
 8008ac0:	40da      	lsrs	r2, r3
                col_bit += bpp;
 8008ac2:	18e4      	adds	r4, r4, r3
            mask_p++;
 8008ac4:	3501      	adds	r5, #1
 8008ac6:	e7b0      	b.n	8008a2a <lv_draw_label+0xaa6>
                mask_buf[mask_p] = 0;
 8008ac8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008aca:	5558      	strb	r0, [r3, r5]
 8008acc:	e7f4      	b.n	8008ab8 <lv_draw_label+0xb34>
                map_p++;
 8008ace:	9b18      	ldr	r3, [sp, #96]	; 0x60
                bitmask = bitmask_init;
 8008ad0:	9a16      	ldr	r2, [sp, #88]	; 0x58
                map_p++;
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	9318      	str	r3, [sp, #96]	; 0x60
                col_bit = 0;
 8008ad6:	2400      	movs	r4, #0
 8008ad8:	e7f4      	b.n	8008ac4 <lv_draw_label+0xb40>
            _lv_blend_fill(clip_area, &fill_area,
 8008ada:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008adc:	2178      	movs	r1, #120	; 0x78
 8008ade:	9302      	str	r3, [sp, #8]
 8008ae0:	23ff      	movs	r3, #255	; 0xff
 8008ae2:	466a      	mov	r2, sp
 8008ae4:	9301      	str	r3, [sp, #4]
 8008ae6:	3bfd      	subs	r3, #253	; 0xfd
 8008ae8:	9300      	str	r3, [sp, #0]
 8008aea:	1852      	adds	r2, r2, r1
 8008aec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008aee:	8812      	ldrh	r2, [r2, #0]
 8008af0:	0031      	movs	r1, r6
 8008af2:	9804      	ldr	r0, [sp, #16]
 8008af4:	f7fe f9f0 	bl	8006ed8 <_lv_blend_fill>
            fill_area.y1 = fill_area.y2 + 1;
 8008af8:	88f3      	ldrh	r3, [r6, #6]
            mask_p = 0;
 8008afa:	2500      	movs	r5, #0
            fill_area.y1 = fill_area.y2 + 1;
 8008afc:	3301      	adds	r3, #1
 8008afe:	b21b      	sxth	r3, r3
 8008b00:	8073      	strh	r3, [r6, #2]
            fill_area.y2 = fill_area.y1;
 8008b02:	80f3      	strh	r3, [r6, #6]
 8008b04:	e7bc      	b.n	8008a80 <lv_draw_label+0xafc>
        else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
 8008b06:	0713      	lsls	r3, r2, #28
 8008b08:	d400      	bmi.n	8008b0c <lv_draw_label+0xb88>
 8008b0a:	e4a7      	b.n	800845c <lv_draw_label+0x4d8>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8008b0c:	2010      	movs	r0, #16
 8008b0e:	5e3b      	ldrsh	r3, [r7, r0]
 8008b10:	9200      	str	r2, [sp, #0]
 8008b12:	0028      	movs	r0, r5
 8008b14:	9a05      	ldr	r2, [sp, #20]
 8008b16:	f004 f85b 	bl	800cbd0 <_lv_txt_get_width>
 8008b1a:	9b06      	ldr	r3, [sp, #24]
 8008b1c:	9a06      	ldr	r2, [sp, #24]
 8008b1e:	889b      	ldrh	r3, [r3, #4]
 8008b20:	8812      	ldrh	r2, [r2, #0]
 8008b22:	3301      	adds	r3, #1
 8008b24:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
 8008b26:	b21b      	sxth	r3, r3
 8008b28:	1a18      	subs	r0, r3, r0
 8008b2a:	e495      	b.n	8008458 <lv_draw_label+0x4d4>
 8008b2c:	0800f33e 	.word	0x0800f33e
 8008b30:	20005e44 	.word	0x20005e44
 8008b34:	20005e40 	.word	0x20005e40
 8008b38:	20005d40 	.word	0x20005d40
 8008b3c:	0800f352 	.word	0x0800f352
 8008b40:	0800f342 	.word	0x0800f342
 8008b44:	0800f33c 	.word	0x0800f33c
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
 8008b48:	1d3b      	adds	r3, r7, #4
 8008b4a:	7fdb      	ldrb	r3, [r3, #31]
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
 8008b4c:	ad3e      	add	r5, sp, #248	; 0xf8
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
 8008b4e:	9320      	str	r3, [sp, #128]	; 0x80
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
 8008b50:	0032      	movs	r2, r6
 8008b52:	2300      	movs	r3, #0
 8008b54:	0029      	movs	r1, r5
 8008b56:	9805      	ldr	r0, [sp, #20]
 8008b58:	f002 fa68 	bl	800b02c <lv_font_get_glyph_dsc>
    if(g_ret == false)  {
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	d101      	bne.n	8008b64 <lv_draw_label+0xbe0>
 8008b60:	f7ff fc04 	bl	800836c <lv_draw_label+0x3e8>
    if((g.box_h == 0) || (g.box_w == 0)) return;
 8008b64:	88aa      	ldrh	r2, [r5, #4]
 8008b66:	2a00      	cmp	r2, #0
 8008b68:	d101      	bne.n	8008b6e <lv_draw_label+0xbea>
 8008b6a:	f7ff fbff 	bl	800836c <lv_draw_label+0x3e8>
 8008b6e:	886b      	ldrh	r3, [r5, #2]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d101      	bne.n	8008b78 <lv_draw_label+0xbf4>
 8008b74:	f7ff fbfa 	bl	800836c <lv_draw_label+0x3e8>
    int32_t pos_x = pos_p->x + g.ofs_x;
 8008b78:	2106      	movs	r1, #6
 8008b7a:	5e68      	ldrsh	r0, [r5, r1]
 8008b7c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008b7e:	1841      	adds	r1, r0, r1
 8008b80:	9119      	str	r1, [sp, #100]	; 0x64
    if(pos_x + g.box_w < clip_area->x1 ||
 8008b82:	185b      	adds	r3, r3, r1
 8008b84:	9904      	ldr	r1, [sp, #16]
 8008b86:	2000      	movs	r0, #0
 8008b88:	5e09      	ldrsh	r1, [r1, r0]
 8008b8a:	428b      	cmp	r3, r1
 8008b8c:	da01      	bge.n	8008b92 <lv_draw_label+0xc0e>
 8008b8e:	f7ff fbed 	bl	800836c <lv_draw_label+0x3e8>
       pos_x > clip_area->x2 ||
 8008b92:	9b04      	ldr	r3, [sp, #16]
 8008b94:	2104      	movs	r1, #4
 8008b96:	5e5b      	ldrsh	r3, [r3, r1]
    if(pos_x + g.box_w < clip_area->x1 ||
 8008b98:	9919      	ldr	r1, [sp, #100]	; 0x64
 8008b9a:	4299      	cmp	r1, r3
 8008b9c:	dd01      	ble.n	8008ba2 <lv_draw_label+0xc1e>
 8008b9e:	f7ff fbe5 	bl	800836c <lv_draw_label+0x3e8>
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 8008ba2:	9b05      	ldr	r3, [sp, #20]
 8008ba4:	2108      	movs	r1, #8
 8008ba6:	5e5b      	ldrsh	r3, [r3, r1]
 8008ba8:	9905      	ldr	r1, [sp, #20]
 8008baa:	200a      	movs	r0, #10
 8008bac:	5e09      	ldrsh	r1, [r1, r0]
 8008bae:	1a5b      	subs	r3, r3, r1
 8008bb0:	9908      	ldr	r1, [sp, #32]
 8008bb2:	185b      	adds	r3, r3, r1
 8008bb4:	2008      	movs	r0, #8
 8008bb6:	5e29      	ldrsh	r1, [r5, r0]
 8008bb8:	1a9b      	subs	r3, r3, r2
 8008bba:	1a5b      	subs	r3, r3, r1
 8008bbc:	931a      	str	r3, [sp, #104]	; 0x68
       pos_y + g.box_h < clip_area->y1 ||
 8008bbe:	18d2      	adds	r2, r2, r3
 8008bc0:	9b04      	ldr	r3, [sp, #16]
 8008bc2:	2102      	movs	r1, #2
 8008bc4:	5e5b      	ldrsh	r3, [r3, r1]
       pos_x > clip_area->x2 ||
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	da01      	bge.n	8008bce <lv_draw_label+0xc4a>
 8008bca:	f7ff fbcf 	bl	800836c <lv_draw_label+0x3e8>
       pos_y > clip_area->y2)  {
 8008bce:	9b04      	ldr	r3, [sp, #16]
 8008bd0:	2206      	movs	r2, #6
 8008bd2:	5e9b      	ldrsh	r3, [r3, r2]
       pos_y + g.box_h < clip_area->y1 ||
 8008bd4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	dd01      	ble.n	8008bde <lv_draw_label+0xc5a>
 8008bda:	f7ff fbc7 	bl	800836c <lv_draw_label+0x3e8>
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 8008bde:	0031      	movs	r1, r6
 8008be0:	9805      	ldr	r0, [sp, #20]
 8008be2:	f002 fa1f 	bl	800b024 <lv_font_get_glyph_bitmap>
 8008be6:	901c      	str	r0, [sp, #112]	; 0x70
    if(map_p == NULL) {
 8008be8:	2800      	cmp	r0, #0
 8008bea:	d101      	bne.n	8008bf0 <lv_draw_label+0xc6c>
 8008bec:	f7ff fbbe 	bl	800836c <lv_draw_label+0x3e8>
 8008bf0:	2264      	movs	r2, #100	; 0x64
 8008bf2:	466b      	mov	r3, sp
 8008bf4:	189b      	adds	r3, r3, r2
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	5e9b      	ldrsh	r3, [r3, r2]
 8008bfa:	2268      	movs	r2, #104	; 0x68
 8008bfc:	930e      	str	r3, [sp, #56]	; 0x38
 8008bfe:	466b      	mov	r3, sp
 8008c00:	189b      	adds	r3, r3, r2
 8008c02:	2200      	movs	r2, #0
 8008c04:	5e9b      	ldrsh	r3, [r3, r2]
    if(font_p->subpx) {
 8008c06:	2203      	movs	r2, #3
 8008c08:	930d      	str	r3, [sp, #52]	; 0x34
 8008c0a:	9b05      	ldr	r3, [sp, #20]
 8008c0c:	7aa8      	ldrb	r0, [r5, #10]
 8008c0e:	7b1b      	ldrb	r3, [r3, #12]
 8008c10:	4213      	tst	r3, r2
 8008c12:	d100      	bne.n	8008c16 <lv_draw_label+0xc92>
 8008c14:	e621      	b.n	800885a <lv_draw_label+0x8d6>
 8008c16:	06e3      	lsls	r3, r4, #27
 8008c18:	0edb      	lsrs	r3, r3, #27
 8008c1a:	9330      	str	r3, [sp, #192]	; 0xc0
 8008c1c:	0563      	lsls	r3, r4, #21
 8008c1e:	0e9b      	lsrs	r3, r3, #26
 8008c20:	0424      	lsls	r4, r4, #16
 8008c22:	9331      	str	r3, [sp, #196]	; 0xc4
 8008c24:	0ee3      	lsrs	r3, r4, #27
 8008c26:	932f      	str	r3, [sp, #188]	; 0xbc
    if(bpp == 3) bpp = 4;
 8008c28:	4290      	cmp	r0, r2
 8008c2a:	d100      	bne.n	8008c2e <lv_draw_label+0xcaa>
 8008c2c:	e514      	b.n	8008658 <lv_draw_label+0x6d4>
    switch(bpp) {
 8008c2e:	3801      	subs	r0, #1
 8008c30:	2807      	cmp	r0, #7
 8008c32:	d901      	bls.n	8008c38 <lv_draw_label+0xcb4>
 8008c34:	f7ff fb9a 	bl	800836c <lv_draw_label+0x3e8>
 8008c38:	f7f7 fa88 	bl	800014c <__gnu_thumb1_case_shi>
 8008c3c:	fc3cfd14 	.word	0xfc3cfd14
 8008c40:	fd0efb98 	.word	0xfd0efb98
 8008c44:	fb98fb98 	.word	0xfb98fb98
 8008c48:	fd08fb98 	.word	0xfd08fb98

08008c4c <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
 8008c4c:	b510      	push	{r4, lr}
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 8008c4e:	210a      	movs	r1, #10
{
 8008c50:	0004      	movs	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 8008c52:	f003 fce7 	bl	800c624 <_lv_memset_00>
    dsc->width = 1;
    dsc->opa = LV_OPA_COVER;
 8008c56:	23ff      	movs	r3, #255	; 0xff
 8008c58:	7223      	strb	r3, [r4, #8]
    dsc->color = LV_COLOR_BLACK;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	8023      	strh	r3, [r4, #0]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	8063      	strh	r3, [r4, #2]
}
 8008c62:	bd10      	pop	{r4, pc}

08008c64 <lv_draw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_line(const lv_point_t * point1, const lv_point_t * point2, const lv_area_t * clip,
                                        const lv_draw_line_dsc_t * dsc)
{
 8008c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c66:	001f      	movs	r7, r3
 8008c68:	b0cd      	sub	sp, #308	; 0x134
 8008c6a:	9008      	str	r0, [sp, #32]
 8008c6c:	9109      	str	r1, [sp, #36]	; 0x24
 8008c6e:	920c      	str	r2, [sp, #48]	; 0x30
    if(dsc->width == 0) return;
 8008c70:	2302      	movs	r3, #2
 8008c72:	5efd      	ldrsh	r5, [r7, r3]
 8008c74:	2d00      	cmp	r5, #0
 8008c76:	d100      	bne.n	8008c7a <lv_draw_line+0x16>
 8008c78:	e0d9      	b.n	8008e2e <lv_draw_line+0x1ca>
    if(dsc->opa <= LV_OPA_MIN) return;
 8008c7a:	7a3b      	ldrb	r3, [r7, #8]
 8008c7c:	2b02      	cmp	r3, #2
 8008c7e:	d800      	bhi.n	8008c82 <lv_draw_line+0x1e>
 8008c80:	e0d5      	b.n	8008e2e <lv_draw_line+0x1ca>

    if(point1->x == point2->x && point1->y == point2->y) return;
 8008c82:	0003      	movs	r3, r0
 8008c84:	2400      	movs	r4, #0
 8008c86:	5f1c      	ldrsh	r4, [r3, r4]
 8008c88:	000b      	movs	r3, r1
 8008c8a:	2000      	movs	r0, #0
 8008c8c:	5e18      	ldrsh	r0, [r3, r0]
 8008c8e:	9b08      	ldr	r3, [sp, #32]
 8008c90:	2102      	movs	r1, #2
 8008c92:	5e59      	ldrsh	r1, [r3, r1]
 8008c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c96:	2202      	movs	r2, #2
 8008c98:	5e9a      	ldrsh	r2, [r3, r2]
 8008c9a:	4284      	cmp	r4, r0
 8008c9c:	d102      	bne.n	8008ca4 <lv_draw_line+0x40>
 8008c9e:	4291      	cmp	r1, r2
 8008ca0:	d100      	bne.n	8008ca4 <lv_draw_line+0x40>
 8008ca2:	e0c4      	b.n	8008e2e <lv_draw_line+0x1ca>

    lv_area_t clip_line;
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
 8008ca4:	0feb      	lsrs	r3, r5, #31
 8008ca6:	195b      	adds	r3, r3, r5
 8008ca8:	105b      	asrs	r3, r3, #1
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	ad10      	add	r5, sp, #64	; 0x40
 8008cae:	1c26      	adds	r6, r4, #0
 8008cb0:	4284      	cmp	r4, r0
 8008cb2:	dd00      	ble.n	8008cb6 <lv_draw_line+0x52>
 8008cb4:	1c06      	adds	r6, r0, #0
 8008cb6:	1af6      	subs	r6, r6, r3
 8008cb8:	802e      	strh	r6, [r5, #0]
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
 8008cba:	1c26      	adds	r6, r4, #0
 8008cbc:	4284      	cmp	r4, r0
 8008cbe:	da00      	bge.n	8008cc2 <lv_draw_line+0x5e>
 8008cc0:	1c06      	adds	r6, r0, #0
 8008cc2:	199e      	adds	r6, r3, r6
 8008cc4:	80ae      	strh	r6, [r5, #4]
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
 8008cc6:	a810      	add	r0, sp, #64	; 0x40
 8008cc8:	1c0c      	adds	r4, r1, #0
 8008cca:	4291      	cmp	r1, r2
 8008ccc:	dd00      	ble.n	8008cd0 <lv_draw_line+0x6c>
 8008cce:	1c14      	adds	r4, r2, #0
 8008cd0:	1ae4      	subs	r4, r4, r3
 8008cd2:	8044      	strh	r4, [r0, #2]
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
 8008cd4:	1c0c      	adds	r4, r1, #0
 8008cd6:	4291      	cmp	r1, r2
 8008cd8:	da00      	bge.n	8008cdc <lv_draw_line+0x78>
 8008cda:	1c14      	adds	r4, r2, #0
 8008cdc:	191b      	adds	r3, r3, r4

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
 8008cde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ce0:	0001      	movs	r1, r0
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
 8008ce2:	80c3      	strh	r3, [r0, #6]
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
 8008ce4:	f002 fe5d 	bl	800b9a2 <_lv_area_intersect>
    if(!is_common) return;
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	d100      	bne.n	8008cee <lv_draw_line+0x8a>
 8008cec:	e09f      	b.n	8008e2e <lv_draw_line+0x1ca>

    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
 8008cee:	9b08      	ldr	r3, [sp, #32]
 8008cf0:	2202      	movs	r2, #2
 8008cf2:	5e9b      	ldrsh	r3, [r3, r2]
 8008cf4:	9306      	str	r3, [sp, #24]
 8008cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cf8:	2202      	movs	r2, #2
 8008cfa:	5e9b      	ldrsh	r3, [r3, r2]
 8008cfc:	9307      	str	r3, [sp, #28]
 8008cfe:	9a07      	ldr	r2, [sp, #28]
 8008d00:	9b06      	ldr	r3, [sp, #24]
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d000      	beq.n	8008d08 <lv_draw_line+0xa4>
 8008d06:	e12c      	b.n	8008f62 <lv_draw_line+0x2fe>

LV_ATTRIBUTE_FAST_MEM static void draw_line_hor(const lv_point_t * point1, const lv_point_t * point2,
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
    lv_opa_t opa = dsc->opa;
 8008d08:	7a3b      	ldrb	r3, [r7, #8]
 8008d0a:	9306      	str	r3, [sp, #24]

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 8008d0c:	f7fd f9fc 	bl	8006108 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8008d10:	f002 fd54 	bl	800b7bc <lv_disp_get_buf>
 8008d14:	9004      	str	r0, [sp, #16]

    const lv_area_t * disp_area = &vdb->area;

    int32_t w = dsc->width - 1;
 8008d16:	2302      	movs	r3, #2
 8008d18:	5efd      	ldrsh	r5, [r7, r3]
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 8008d1a:	2301      	movs	r3, #1
    int32_t w = dsc->width - 1;
 8008d1c:	3d01      	subs	r5, #1
    int32_t w_half0 = w >> 1;
 8008d1e:	106e      	asrs	r6, r5, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 8008d20:	401d      	ands	r5, r3

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 8008d22:	2206      	movs	r2, #6
 8008d24:	5ebb      	ldrsh	r3, [r7, r2]
 8008d26:	2200      	movs	r2, #0
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 8008d28:	19ad      	adds	r5, r5, r6
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 8008d2a:	9205      	str	r2, [sp, #20]
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d005      	beq.n	8008d3c <lv_draw_line+0xd8>
 8008d30:	2204      	movs	r2, #4
 8008d32:	5ebb      	ldrsh	r3, [r7, r2]
 8008d34:	001a      	movs	r2, r3
 8008d36:	1e53      	subs	r3, r2, #1
 8008d38:	419a      	sbcs	r2, r3
 8008d3a:	9205      	str	r2, [sp, #20]

    bool simple_mode = true;
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 8008d3c:	f001 f84a 	bl	8009dd4 <lv_draw_mask_get_cnt>
 8008d40:	2300      	movs	r3, #0
 8008d42:	9307      	str	r3, [sp, #28]
 8008d44:	4298      	cmp	r0, r3
 8008d46:	d104      	bne.n	8008d52 <lv_draw_line+0xee>
    else if(dashed) simple_mode = false;
 8008d48:	2101      	movs	r1, #1
 8008d4a:	9b05      	ldr	r3, [sp, #20]
 8008d4c:	404b      	eors	r3, r1
 8008d4e:	400b      	ands	r3, r1
 8008d50:	9307      	str	r3, [sp, #28]

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
 8008d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d54:	a92c      	add	r1, sp, #176	; 0xb0
 8008d56:	2000      	movs	r0, #0
 8008d58:	5e18      	ldrsh	r0, [r3, r0]
 8008d5a:	9b08      	ldr	r3, [sp, #32]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	5e9a      	ldrsh	r2, [r3, r2]
 8008d60:	1c03      	adds	r3, r0, #0
 8008d62:	4290      	cmp	r0, r2
 8008d64:	dd00      	ble.n	8008d68 <lv_draw_line+0x104>
 8008d66:	1c13      	adds	r3, r2, #0
 8008d68:	800b      	strh	r3, [r1, #0]
    draw_area.x2 = LV_MATH_MAX(point1->x, point2->x)  - 1;
 8008d6a:	1c03      	adds	r3, r0, #0
 8008d6c:	4290      	cmp	r0, r2
 8008d6e:	da00      	bge.n	8008d72 <lv_draw_line+0x10e>
 8008d70:	1c13      	adds	r3, r2, #0
 8008d72:	3b01      	subs	r3, #1
 8008d74:	808b      	strh	r3, [r1, #4]
    draw_area.y1 = point1->y - w_half1;
 8008d76:	9b08      	ldr	r3, [sp, #32]
 8008d78:	ac2c      	add	r4, sp, #176	; 0xb0
 8008d7a:	885b      	ldrh	r3, [r3, #2]
 8008d7c:	1b5d      	subs	r5, r3, r5
    draw_area.y2 = point1->y + w_half0;
 8008d7e:	199e      	adds	r6, r3, r6

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 8008d80:	9b07      	ldr	r3, [sp, #28]
    draw_area.y1 = point1->y - w_half1;
 8008d82:	8065      	strh	r5, [r4, #2]
    draw_area.y2 = point1->y + w_half0;
 8008d84:	80e6      	strh	r6, [r4, #6]
    if(simple_mode) {
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d053      	beq.n	8008e32 <lv_draw_line+0x1ce>
        _lv_blend_fill(clip, &draw_area,
                       dsc->color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
 8008d8a:	7a7b      	ldrb	r3, [r7, #9]
        _lv_blend_fill(clip, &draw_area,
 8008d8c:	0021      	movs	r1, r4
                       dsc->blend_mode);
 8008d8e:	079b      	lsls	r3, r3, #30
        _lv_blend_fill(clip, &draw_area,
 8008d90:	0f9b      	lsrs	r3, r3, #30
 8008d92:	9302      	str	r3, [sp, #8]
 8008d94:	9b06      	ldr	r3, [sp, #24]
 8008d96:	9301      	str	r3, [sp, #4]
 8008d98:	2301      	movs	r3, #1
 8008d9a:	9300      	str	r3, [sp, #0]
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	883a      	ldrh	r2, [r7, #0]
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
        _lv_blend_fill(clip, &draw_area,
 8008da0:	a810      	add	r0, sp, #64	; 0x40
 8008da2:	f7fe f899 	bl	8006ed8 <_lv_blend_fill>
    if(dsc->round_end || dsc->round_start) {
 8008da6:	230c      	movs	r3, #12
 8008da8:	7a7a      	ldrb	r2, [r7, #9]
 8008daa:	421a      	tst	r2, r3
 8008dac:	d03f      	beq.n	8008e2e <lv_draw_line+0x1ca>
 8008dae:	2501      	movs	r5, #1
        lv_draw_rect_dsc_init(&cir_dsc);
 8008db0:	ae37      	add	r6, sp, #220	; 0xdc
 8008db2:	0030      	movs	r0, r6
 8008db4:	f001 f92a 	bl	800a00c <lv_draw_rect_dsc_init>
        cir_dsc.bg_color = dsc->color;
 8008db8:	883b      	ldrh	r3, [r7, #0]
 8008dba:	8073      	strh	r3, [r6, #2]
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 8008dbc:	4bbb      	ldr	r3, [pc, #748]	; (80090ac <lv_draw_line+0x448>)
 8008dbe:	8033      	strh	r3, [r6, #0]
        cir_dsc.bg_opa = dsc->opa;
 8008dc0:	7a3b      	ldrb	r3, [r7, #8]
 8008dc2:	7333      	strb	r3, [r6, #12]
        int32_t r = (dsc->width >> 1);
 8008dc4:	2202      	movs	r2, #2
 8008dc6:	5ebb      	ldrsh	r3, [r7, r2]
 8008dc8:	105c      	asrs	r4, r3, #1
 8008dca:	439d      	bics	r5, r3
        if(dsc->round_start) {
 8008dcc:	7a7b      	ldrb	r3, [r7, #9]
 8008dce:	075b      	lsls	r3, r3, #29
 8008dd0:	d516      	bpl.n	8008e00 <lv_draw_line+0x19c>
            cir_area.x1 = point1->x - r;
 8008dd2:	9b08      	ldr	r3, [sp, #32]
 8008dd4:	a82c      	add	r0, sp, #176	; 0xb0
 8008dd6:	881b      	ldrh	r3, [r3, #0]
 8008dd8:	9304      	str	r3, [sp, #16]
 8008dda:	9a04      	ldr	r2, [sp, #16]
 8008ddc:	b2a3      	uxth	r3, r4
 8008dde:	1ad1      	subs	r1, r2, r3
 8008de0:	8001      	strh	r1, [r0, #0]
            cir_area.y1 = point1->y - r;
 8008de2:	9908      	ldr	r1, [sp, #32]
 8008de4:	8849      	ldrh	r1, [r1, #2]
 8008de6:	1aca      	subs	r2, r1, r3
 8008de8:	8042      	strh	r2, [r0, #2]
            cir_area.x2 = point1->x + r - r_corr;
 8008dea:	9a04      	ldr	r2, [sp, #16]
 8008dec:	18d2      	adds	r2, r2, r3
 8008dee:	1b52      	subs	r2, r2, r5
            cir_area.y2 = point1->y + r - r_corr ;
 8008df0:	185b      	adds	r3, r3, r1
            cir_area.x2 = point1->x + r - r_corr;
 8008df2:	8082      	strh	r2, [r0, #4]
            cir_area.y2 = point1->y + r - r_corr ;
 8008df4:	1b5b      	subs	r3, r3, r5
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 8008df6:	0032      	movs	r2, r6
 8008df8:	990c      	ldr	r1, [sp, #48]	; 0x30
            cir_area.y2 = point1->y + r - r_corr ;
 8008dfa:	80c3      	strh	r3, [r0, #6]
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 8008dfc:	f001 f92e 	bl	800a05c <lv_draw_rect>
        if(dsc->round_end) {
 8008e00:	7a7b      	ldrb	r3, [r7, #9]
 8008e02:	071b      	lsls	r3, r3, #28
 8008e04:	d513      	bpl.n	8008e2e <lv_draw_line+0x1ca>
            cir_area.x1 = point2->x - r;
 8008e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e08:	b2a4      	uxth	r4, r4
 8008e0a:	881b      	ldrh	r3, [r3, #0]
 8008e0c:	a82c      	add	r0, sp, #176	; 0xb0
 8008e0e:	1b1a      	subs	r2, r3, r4
 8008e10:	8002      	strh	r2, [r0, #0]
            cir_area.y1 = point2->y - r;
 8008e12:	9a09      	ldr	r2, [sp, #36]	; 0x24
            cir_area.x2 = point2->x + r - r_corr;
 8008e14:	191b      	adds	r3, r3, r4
            cir_area.y1 = point2->y - r;
 8008e16:	8852      	ldrh	r2, [r2, #2]
            cir_area.x2 = point2->x + r - r_corr;
 8008e18:	1b5b      	subs	r3, r3, r5
            cir_area.y1 = point2->y - r;
 8008e1a:	1b11      	subs	r1, r2, r4
            cir_area.y2 = point2->y + r - r_corr ;
 8008e1c:	18a4      	adds	r4, r4, r2
            cir_area.y1 = point2->y - r;
 8008e1e:	8041      	strh	r1, [r0, #2]
            cir_area.y2 = point2->y + r - r_corr ;
 8008e20:	1b65      	subs	r5, r4, r5
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 8008e22:	aa37      	add	r2, sp, #220	; 0xdc
 8008e24:	990c      	ldr	r1, [sp, #48]	; 0x30
            cir_area.x2 = point2->x + r - r_corr;
 8008e26:	8083      	strh	r3, [r0, #4]
            cir_area.y2 = point2->y + r - r_corr ;
 8008e28:	80c5      	strh	r5, [r0, #6]
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 8008e2a:	f001 f917 	bl	800a05c <lv_draw_rect>
}
 8008e2e:	b04d      	add	sp, #308	; 0x134
 8008e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
 8008e32:	0022      	movs	r2, r4
 8008e34:	a910      	add	r1, sp, #64	; 0x40
 8008e36:	0020      	movs	r0, r4
 8008e38:	f002 fdb3 	bl	800b9a2 <_lv_area_intersect>
        if(!is_common) return;
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	d0b2      	beq.n	8008da6 <lv_draw_line+0x142>
        draw_area.x1 -= disp_area->x1;
 8008e40:	2200      	movs	r2, #0
 8008e42:	5ea3      	ldrsh	r3, [r4, r2]
 8008e44:	930a      	str	r3, [sp, #40]	; 0x28
 8008e46:	9b04      	ldr	r3, [sp, #16]
 8008e48:	2210      	movs	r2, #16
 8008e4a:	5e9b      	ldrsh	r3, [r3, r2]
 8008e4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e50:	466b      	mov	r3, sp
 8008e52:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
        draw_area.y1 -= disp_area->y1;
 8008e54:	2502      	movs	r5, #2
 8008e56:	5f61      	ldrsh	r1, [r4, r5]
        draw_area.x1 -= disp_area->x1;
 8008e58:	1ad2      	subs	r2, r2, r3
 8008e5a:	b292      	uxth	r2, r2
 8008e5c:	b210      	sxth	r0, r2
        draw_area.y1 -= disp_area->y1;
 8008e5e:	9d04      	ldr	r5, [sp, #16]
        draw_area.x1 -= disp_area->x1;
 8008e60:	8020      	strh	r0, [r4, #0]
        draw_area.y1 -= disp_area->y1;
 8008e62:	8a6d      	ldrh	r5, [r5, #18]
 8008e64:	46ac      	mov	ip, r5
 8008e66:	1b4d      	subs	r5, r1, r5
 8008e68:	8065      	strh	r5, [r4, #2]
        draw_area.x2 -= disp_area->x1;
 8008e6a:	2504      	movs	r5, #4
 8008e6c:	5f66      	ldrsh	r6, [r4, r5]
 8008e6e:	1af3      	subs	r3, r6, r3
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	9306      	str	r3, [sp, #24]
 8008e74:	80a3      	strh	r3, [r4, #4]
        draw_area.y2 -= disp_area->y1;
 8008e76:	4663      	mov	r3, ip
 8008e78:	88e5      	ldrh	r5, [r4, #6]
 8008e7a:	1aed      	subs	r5, r5, r3
 8008e7c:	9b06      	ldr	r3, [sp, #24]
 8008e7e:	80e5      	strh	r5, [r4, #6]
 8008e80:	3301      	adds	r3, #1
 8008e82:	1a9b      	subs	r3, r3, r2
 8008e84:	b21b      	sxth	r3, r3
        fill_area.x1 = draw_area.x1 + disp_area->x1;
 8008e86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e88:	9306      	str	r3, [sp, #24]
 8008e8a:	ab37      	add	r3, sp, #220	; 0xdc
 8008e8c:	801a      	strh	r2, [r3, #0]
        fill_area.x2 = draw_area.x2 + disp_area->x1;
 8008e8e:	809e      	strh	r6, [r3, #4]
        fill_area.y1 = draw_area.y1 + disp_area->y1;
 8008e90:	8059      	strh	r1, [r3, #2]
        fill_area.y2 = fill_area.y1;
 8008e92:	80d9      	strh	r1, [r3, #6]
        if(dashed) {
 8008e94:	9b05      	ldr	r3, [sp, #20]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00a      	beq.n	8008eb0 <lv_draw_line+0x24c>
            dash_start = (vdb->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
 8008e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e9c:	1818      	adds	r0, r3, r0
 8008e9e:	2306      	movs	r3, #6
 8008ea0:	5ef9      	ldrsh	r1, [r7, r3]
 8008ea2:	2204      	movs	r2, #4
 8008ea4:	5ebb      	ldrsh	r3, [r7, r2]
 8008ea6:	18c9      	adds	r1, r1, r3
 8008ea8:	f7f7 fad4 	bl	8000454 <__aeabi_idivmod>
 8008eac:	b20b      	sxth	r3, r1
 8008eae:	9307      	str	r3, [sp, #28]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 8008eb0:	9806      	ldr	r0, [sp, #24]
 8008eb2:	f003 fb2f 	bl	800c514 <_lv_mem_buf_get>
 8008eb6:	0004      	movs	r4, r0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8008eb8:	ab2c      	add	r3, sp, #176	; 0xb0
 8008eba:	2602      	movs	r6, #2
 8008ebc:	5f9e      	ldrsh	r6, [r3, r6]
 8008ebe:	ad2c      	add	r5, sp, #176	; 0xb0
 8008ec0:	2206      	movs	r2, #6
 8008ec2:	5eab      	ldrsh	r3, [r5, r2]
 8008ec4:	429e      	cmp	r6, r3
 8008ec6:	dd03      	ble.n	8008ed0 <lv_draw_line+0x26c>
        _lv_mem_buf_release(mask_buf);
 8008ec8:	0020      	movs	r0, r4
                           LV_BLEND_MODE_NORMAL);

            fill_area.y1++;
            fill_area.y2++;
        }
        _lv_mem_buf_release(mask_buf);
 8008eca:	f003 fa2b 	bl	800c324 <_lv_mem_buf_release>
 8008ece:	e76a      	b.n	8008da6 <lv_draw_line+0x142>
            _lv_memset_ff(mask_buf, draw_area_w);
 8008ed0:	9906      	ldr	r1, [sp, #24]
 8008ed2:	0020      	movs	r0, r4
 8008ed4:	f003 fbd0 	bl	800c678 <_lv_memset_ff>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 8008ed8:	9b04      	ldr	r3, [sp, #16]
 8008eda:	0020      	movs	r0, r4
 8008edc:	8a5a      	ldrh	r2, [r3, #18]
 8008ede:	8a19      	ldrh	r1, [r3, #16]
 8008ee0:	882b      	ldrh	r3, [r5, #0]
 8008ee2:	1992      	adds	r2, r2, r6
 8008ee4:	18c9      	adds	r1, r1, r3
 8008ee6:	b212      	sxth	r2, r2
 8008ee8:	9b06      	ldr	r3, [sp, #24]
 8008eea:	b209      	sxth	r1, r1
 8008eec:	f000 ff30 	bl	8009d50 <lv_draw_mask_apply>
            if(dashed) {
 8008ef0:	9b05      	ldr	r3, [sp, #20]
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 8008ef2:	0002      	movs	r2, r0
            if(dashed) {
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d014      	beq.n	8008f22 <lv_draw_line+0x2be>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	d012      	beq.n	8008f22 <lv_draw_line+0x2be>
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
 8008efc:	2200      	movs	r2, #0
                    lv_style_int_t dash_cnt = dash_start;
 8008efe:	9907      	ldr	r1, [sp, #28]
 8008f00:	4694      	mov	ip, r2
 8008f02:	e00a      	b.n	8008f1a <lv_draw_line+0x2b6>
                        if(dash_cnt <= dsc->dash_width) {
 8008f04:	2504      	movs	r5, #4
 8008f06:	5f7b      	ldrsh	r3, [r7, r5]
 8008f08:	428b      	cmp	r3, r1
 8008f0a:	db20      	blt.n	8008f4e <lv_draw_line+0x2ea>
                            i += diff;
 8008f0c:	189a      	adds	r2, r3, r2
 8008f0e:	1a52      	subs	r2, r2, r1
 8008f10:	b212      	sxth	r2, r2
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
 8008f12:	3201      	adds	r2, #1
 8008f14:	3301      	adds	r3, #1
 8008f16:	b212      	sxth	r2, r2
 8008f18:	b219      	sxth	r1, r3
 8008f1a:	9b06      	ldr	r3, [sp, #24]
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	dcf1      	bgt.n	8008f04 <lv_draw_line+0x2a0>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
 8008f20:	2202      	movs	r2, #2
                           dsc->blend_mode);
 8008f22:	7a7b      	ldrb	r3, [r7, #9]
            _lv_blend_fill(clip, &fill_area,
 8008f24:	ad37      	add	r5, sp, #220	; 0xdc
                           dsc->blend_mode);
 8008f26:	079b      	lsls	r3, r3, #30
            _lv_blend_fill(clip, &fill_area,
 8008f28:	0f9b      	lsrs	r3, r3, #30
 8008f2a:	9302      	str	r3, [sp, #8]
 8008f2c:	7a3b      	ldrb	r3, [r7, #8]
 8008f2e:	9200      	str	r2, [sp, #0]
 8008f30:	9301      	str	r3, [sp, #4]
 8008f32:	883a      	ldrh	r2, [r7, #0]
 8008f34:	0023      	movs	r3, r4
 8008f36:	0029      	movs	r1, r5
 8008f38:	a810      	add	r0, sp, #64	; 0x40
 8008f3a:	f7fd ffcd 	bl	8006ed8 <_lv_blend_fill>
            fill_area.y1++;
 8008f3e:	886b      	ldrh	r3, [r5, #2]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8008f40:	3601      	adds	r6, #1
            fill_area.y1++;
 8008f42:	3301      	adds	r3, #1
 8008f44:	806b      	strh	r3, [r5, #2]
            fill_area.y2++;
 8008f46:	88eb      	ldrh	r3, [r5, #6]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	80eb      	strh	r3, [r5, #6]
 8008f4c:	e7b7      	b.n	8008ebe <lv_draw_line+0x25a>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 8008f4e:	2006      	movs	r0, #6
 8008f50:	5e3d      	ldrsh	r5, [r7, r0]
 8008f52:	18ed      	adds	r5, r5, r3
                            dash_cnt = 0;
 8008f54:	2300      	movs	r3, #0
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 8008f56:	42a9      	cmp	r1, r5
 8008f58:	dadb      	bge.n	8008f12 <lv_draw_line+0x2ae>
                            mask_buf[i] = 0x00;
 8008f5a:	4663      	mov	r3, ip
 8008f5c:	54a3      	strb	r3, [r4, r2]
 8008f5e:	000b      	movs	r3, r1
 8008f60:	e7d7      	b.n	8008f12 <lv_draw_line+0x2ae>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
 8008f62:	9b08      	ldr	r3, [sp, #32]
 8008f64:	2200      	movs	r2, #0
 8008f66:	5e9b      	ldrsh	r3, [r3, r2]
 8008f68:	9304      	str	r3, [sp, #16]
 8008f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	5e9b      	ldrsh	r3, [r3, r2]
 8008f70:	9305      	str	r3, [sp, #20]
 8008f72:	9a05      	ldr	r2, [sp, #20]
 8008f74:	9b04      	ldr	r3, [sp, #16]
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d000      	beq.n	8008f7c <lv_draw_line+0x318>
 8008f7a:	e0d2      	b.n	8009122 <lv_draw_line+0x4be>
    lv_opa_t opa = dsc->opa;
 8008f7c:	7a3b      	ldrb	r3, [r7, #8]
 8008f7e:	9306      	str	r3, [sp, #24]
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 8008f80:	f7fd f8c2 	bl	8006108 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8008f84:	f002 fc1a 	bl	800b7bc <lv_disp_get_buf>
 8008f88:	9004      	str	r0, [sp, #16]
    int32_t w = dsc->width - 1;
 8008f8a:	2302      	movs	r3, #2
 8008f8c:	5efc      	ldrsh	r4, [r7, r3]
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 8008f8e:	2301      	movs	r3, #1
    int32_t w = dsc->width - 1;
 8008f90:	3c01      	subs	r4, #1
    int32_t w_half0 = w >> 1;
 8008f92:	1066      	asrs	r6, r4, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 8008f94:	401c      	ands	r4, r3
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 8008f96:	2206      	movs	r2, #6
 8008f98:	5ebb      	ldrsh	r3, [r7, r2]
 8008f9a:	2200      	movs	r2, #0
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 8008f9c:	19a4      	adds	r4, r4, r6
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 8008f9e:	9205      	str	r2, [sp, #20]
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d005      	beq.n	8008fb0 <lv_draw_line+0x34c>
 8008fa4:	2204      	movs	r2, #4
 8008fa6:	5ebb      	ldrsh	r3, [r7, r2]
 8008fa8:	001a      	movs	r2, r3
 8008faa:	1e53      	subs	r3, r2, #1
 8008fac:	419a      	sbcs	r2, r3
 8008fae:	9205      	str	r2, [sp, #20]
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 8008fb0:	f000 ff10 	bl	8009dd4 <lv_draw_mask_get_cnt>
 8008fb4:	2500      	movs	r5, #0
 8008fb6:	42a8      	cmp	r0, r5
 8008fb8:	d103      	bne.n	8008fc2 <lv_draw_line+0x35e>
    else if(dashed) simple_mode = false;
 8008fba:	2101      	movs	r1, #1
 8008fbc:	9d05      	ldr	r5, [sp, #20]
 8008fbe:	404d      	eors	r5, r1
 8008fc0:	400d      	ands	r5, r1
    draw_area.x1 = point1->x - w_half1;
 8008fc2:	9b08      	ldr	r3, [sp, #32]
 8008fc4:	a92c      	add	r1, sp, #176	; 0xb0
 8008fc6:	881b      	ldrh	r3, [r3, #0]
 8008fc8:	1b1c      	subs	r4, r3, r4
    draw_area.x2 = point1->x + w_half0;
 8008fca:	199e      	adds	r6, r3, r6
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
 8008fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    draw_area.x1 = point1->x - w_half1;
 8008fce:	800c      	strh	r4, [r1, #0]
    draw_area.x2 = point1->x + w_half0;
 8008fd0:	808e      	strh	r6, [r1, #4]
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
 8008fd2:	2002      	movs	r0, #2
 8008fd4:	5e18      	ldrsh	r0, [r3, r0]
 8008fd6:	9b08      	ldr	r3, [sp, #32]
 8008fd8:	2202      	movs	r2, #2
 8008fda:	5e9a      	ldrsh	r2, [r3, r2]
 8008fdc:	1c03      	adds	r3, r0, #0
 8008fde:	4290      	cmp	r0, r2
 8008fe0:	dd00      	ble.n	8008fe4 <lv_draw_line+0x380>
 8008fe2:	1c13      	adds	r3, r2, #0
 8008fe4:	804b      	strh	r3, [r1, #2]
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
 8008fe6:	1c03      	adds	r3, r0, #0
 8008fe8:	4290      	cmp	r0, r2
 8008fea:	da00      	bge.n	8008fee <lv_draw_line+0x38a>
 8008fec:	1c13      	adds	r3, r2, #0
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	80cb      	strh	r3, [r1, #6]
    if(simple_mode) {
 8008ff2:	2d00      	cmp	r5, #0
 8008ff4:	d00a      	beq.n	800900c <lv_draw_line+0x3a8>
                       dsc->blend_mode);
 8008ff6:	7a7b      	ldrb	r3, [r7, #9]
 8008ff8:	079b      	lsls	r3, r3, #30
        _lv_blend_fill(clip, &draw_area,
 8008ffa:	0f9b      	lsrs	r3, r3, #30
 8008ffc:	9302      	str	r3, [sp, #8]
 8008ffe:	9b06      	ldr	r3, [sp, #24]
 8009000:	9301      	str	r3, [sp, #4]
 8009002:	2301      	movs	r3, #1
 8009004:	9300      	str	r3, [sp, #0]
 8009006:	883a      	ldrh	r2, [r7, #0]
 8009008:	2300      	movs	r3, #0
 800900a:	e6c9      	b.n	8008da0 <lv_draw_line+0x13c>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
 800900c:	ac2c      	add	r4, sp, #176	; 0xb0
 800900e:	0022      	movs	r2, r4
 8009010:	a910      	add	r1, sp, #64	; 0x40
 8009012:	0020      	movs	r0, r4
 8009014:	f002 fcc5 	bl	800b9a2 <_lv_area_intersect>
        if(!is_common) return;
 8009018:	2800      	cmp	r0, #0
 800901a:	d100      	bne.n	800901e <lv_draw_line+0x3ba>
 800901c:	e6c3      	b.n	8008da6 <lv_draw_line+0x142>
        draw_area.x1 -= vdb->area.x1;
 800901e:	2200      	movs	r2, #0
 8009020:	5ea3      	ldrsh	r3, [r4, r2]
 8009022:	9306      	str	r3, [sp, #24]
 8009024:	9b04      	ldr	r3, [sp, #16]
 8009026:	9a06      	ldr	r2, [sp, #24]
 8009028:	8a1b      	ldrh	r3, [r3, #16]
        draw_area.y1 -= vdb->area.y1;
 800902a:	2002      	movs	r0, #2
 800902c:	5e21      	ldrsh	r1, [r4, r0]
        draw_area.x1 -= vdb->area.x1;
 800902e:	1ad2      	subs	r2, r2, r3
 8009030:	b292      	uxth	r2, r2
        draw_area.y1 -= vdb->area.y1;
 8009032:	9804      	ldr	r0, [sp, #16]
        draw_area.x1 -= vdb->area.x1;
 8009034:	8022      	strh	r2, [r4, #0]
        draw_area.y1 -= vdb->area.y1;
 8009036:	8a40      	ldrh	r0, [r0, #18]
 8009038:	4684      	mov	ip, r0
 800903a:	1a08      	subs	r0, r1, r0
 800903c:	8060      	strh	r0, [r4, #2]
        draw_area.x2 -= vdb->area.x1;
 800903e:	2004      	movs	r0, #4
 8009040:	5e26      	ldrsh	r6, [r4, r0]
 8009042:	1af3      	subs	r3, r6, r3
 8009044:	b29b      	uxth	r3, r3
 8009046:	9307      	str	r3, [sp, #28]
 8009048:	80a3      	strh	r3, [r4, #4]
        draw_area.y2 -= vdb->area.y1;
 800904a:	4663      	mov	r3, ip
 800904c:	88e0      	ldrh	r0, [r4, #6]
 800904e:	1ac0      	subs	r0, r0, r3
 8009050:	9b07      	ldr	r3, [sp, #28]
 8009052:	80e0      	strh	r0, [r4, #6]
 8009054:	3301      	adds	r3, #1
 8009056:	1a9a      	subs	r2, r3, r2
 8009058:	b213      	sxth	r3, r2
 800905a:	9307      	str	r3, [sp, #28]
        fill_area.x1 = draw_area.x1 + disp_area->x1;
 800905c:	9a06      	ldr	r2, [sp, #24]
 800905e:	ab37      	add	r3, sp, #220	; 0xdc
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 8009060:	9807      	ldr	r0, [sp, #28]
        fill_area.x2 = draw_area.x2 + disp_area->x1;
 8009062:	809e      	strh	r6, [r3, #4]
        fill_area.x1 = draw_area.x1 + disp_area->x1;
 8009064:	801a      	strh	r2, [r3, #0]
        fill_area.y1 = draw_area.y1 + disp_area->y1;
 8009066:	8059      	strh	r1, [r3, #2]
        fill_area.y2 = fill_area.y1;
 8009068:	80d9      	strh	r1, [r3, #6]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800906a:	f003 fa53 	bl	800c514 <_lv_mem_buf_get>
        if(dashed) {
 800906e:	9b05      	ldr	r3, [sp, #20]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 8009070:	0006      	movs	r6, r0
        if(dashed) {
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00d      	beq.n	8009092 <lv_draw_line+0x42e>
            dash_start = (vdb->area.y1 + draw_area.y1) % (dsc->dash_gap + dsc->dash_width);
 8009076:	9b04      	ldr	r3, [sp, #16]
 8009078:	2012      	movs	r0, #18
 800907a:	5e18      	ldrsh	r0, [r3, r0]
 800907c:	2202      	movs	r2, #2
 800907e:	5ea3      	ldrsh	r3, [r4, r2]
 8009080:	18c0      	adds	r0, r0, r3
 8009082:	2306      	movs	r3, #6
 8009084:	5ef9      	ldrsh	r1, [r7, r3]
 8009086:	2204      	movs	r2, #4
 8009088:	5ebb      	ldrsh	r3, [r7, r2]
 800908a:	18c9      	adds	r1, r1, r3
 800908c:	f7f7 f9e2 	bl	8000454 <__aeabi_idivmod>
 8009090:	b20d      	sxth	r5, r1
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8009092:	ab2c      	add	r3, sp, #176	; 0xb0
 8009094:	2202      	movs	r2, #2
 8009096:	5e9b      	ldrsh	r3, [r3, r2]
 8009098:	9306      	str	r3, [sp, #24]
 800909a:	ac2c      	add	r4, sp, #176	; 0xb0
 800909c:	2206      	movs	r2, #6
 800909e:	5ea3      	ldrsh	r3, [r4, r2]
 80090a0:	9a06      	ldr	r2, [sp, #24]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	dd04      	ble.n	80090b0 <lv_draw_line+0x44c>
        _lv_mem_buf_release(mask_buf);
 80090a6:	0030      	movs	r0, r6
 80090a8:	e70f      	b.n	8008eca <lv_draw_line+0x266>
 80090aa:	46c0      	nop			; (mov r8, r8)
 80090ac:	00007fff 	.word	0x00007fff
            _lv_memset_ff(mask_buf, draw_area_w);
 80090b0:	9907      	ldr	r1, [sp, #28]
 80090b2:	0030      	movs	r0, r6
 80090b4:	f003 fae0 	bl	800c678 <_lv_memset_ff>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 80090b8:	9b04      	ldr	r3, [sp, #16]
 80090ba:	0030      	movs	r0, r6
 80090bc:	8a5a      	ldrh	r2, [r3, #18]
 80090be:	9b06      	ldr	r3, [sp, #24]
 80090c0:	18d2      	adds	r2, r2, r3
 80090c2:	9b04      	ldr	r3, [sp, #16]
 80090c4:	b212      	sxth	r2, r2
 80090c6:	8a19      	ldrh	r1, [r3, #16]
 80090c8:	8823      	ldrh	r3, [r4, #0]
 80090ca:	18c9      	adds	r1, r1, r3
 80090cc:	b209      	sxth	r1, r1
 80090ce:	9b07      	ldr	r3, [sp, #28]
 80090d0:	f000 fe3e 	bl	8009d50 <lv_draw_mask_apply>
            if(dashed) {
 80090d4:	9b05      	ldr	r3, [sp, #20]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d00e      	beq.n	80090f8 <lv_draw_line+0x494>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
 80090da:	2800      	cmp	r0, #0
 80090dc:	d00a      	beq.n	80090f4 <lv_draw_line+0x490>
                    if(dash_cnt > dsc->dash_width) {
 80090de:	2304      	movs	r3, #4
 80090e0:	5efa      	ldrsh	r2, [r7, r3]
 80090e2:	42aa      	cmp	r2, r5
 80090e4:	da00      	bge.n	80090e8 <lv_draw_line+0x484>
                        mask_res = LV_DRAW_MASK_RES_TRANSP;
 80090e6:	2000      	movs	r0, #0
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 80090e8:	2106      	movs	r1, #6
 80090ea:	5e7b      	ldrsh	r3, [r7, r1]
 80090ec:	189b      	adds	r3, r3, r2
 80090ee:	429d      	cmp	r5, r3
 80090f0:	db00      	blt.n	80090f4 <lv_draw_line+0x490>
                        dash_cnt = 0;
 80090f2:	2500      	movs	r5, #0
                dash_cnt ++;
 80090f4:	3501      	adds	r5, #1
 80090f6:	b22d      	sxth	r5, r5
            _lv_blend_fill(clip, &fill_area,
 80090f8:	2300      	movs	r3, #0
 80090fa:	9302      	str	r3, [sp, #8]
 80090fc:	7a3b      	ldrb	r3, [r7, #8]
 80090fe:	ac37      	add	r4, sp, #220	; 0xdc
 8009100:	9301      	str	r3, [sp, #4]
 8009102:	9000      	str	r0, [sp, #0]
 8009104:	0033      	movs	r3, r6
 8009106:	883a      	ldrh	r2, [r7, #0]
 8009108:	0021      	movs	r1, r4
 800910a:	a810      	add	r0, sp, #64	; 0x40
 800910c:	f7fd fee4 	bl	8006ed8 <_lv_blend_fill>
            fill_area.y1++;
 8009110:	8863      	ldrh	r3, [r4, #2]
 8009112:	3301      	adds	r3, #1
 8009114:	8063      	strh	r3, [r4, #2]
            fill_area.y2++;
 8009116:	88e3      	ldrh	r3, [r4, #6]
 8009118:	3301      	adds	r3, #1
 800911a:	80e3      	strh	r3, [r4, #6]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800911c:	9b06      	ldr	r3, [sp, #24]
 800911e:	3301      	adds	r3, #1
 8009120:	e7ba      	b.n	8009098 <lv_draw_line+0x434>
                                                 const lv_draw_line_dsc_t * dsc)
{
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
 8009122:	9b06      	ldr	r3, [sp, #24]
 8009124:	9a07      	ldr	r2, [sp, #28]
 8009126:	4293      	cmp	r3, r2
 8009128:	da07      	bge.n	800913a <lv_draw_line+0x4d6>
 800912a:	0013      	movs	r3, r2
 800912c:	9a06      	ldr	r2, [sp, #24]
 800912e:	9306      	str	r3, [sp, #24]
 8009130:	9207      	str	r2, [sp, #28]
 8009132:	9b05      	ldr	r3, [sp, #20]
 8009134:	9a04      	ldr	r2, [sp, #16]
 8009136:	9304      	str	r3, [sp, #16]
 8009138:	9205      	str	r2, [sp, #20]
        p2.y = point1->y;
        p1.x = point2->x;
        p2.x = point1->x;
    }

    int32_t xdiff = p2.x - p1.x;
 800913a:	9a05      	ldr	r2, [sp, #20]
 800913c:	9b04      	ldr	r3, [sp, #16]
 800913e:	1a9b      	subs	r3, r3, r2
 8009140:	930b      	str	r3, [sp, #44]	; 0x2c
    int32_t ydiff = p2.y - p1.y;
 8009142:	9a07      	ldr	r2, [sp, #28]
 8009144:	9b06      	ldr	r3, [sp, #24]
 8009146:	1a9b      	subs	r3, r3, r2
 8009148:	930d      	str	r3, [sp, #52]	; 0x34
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
 800914a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800914c:	17da      	asrs	r2, r3, #31
 800914e:	189b      	adds	r3, r3, r2
 8009150:	4053      	eors	r3, r2
 8009152:	930a      	str	r3, [sp, #40]	; 0x28
 8009154:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009156:	17da      	asrs	r2, r3, #31
 8009158:	189e      	adds	r6, r3, r2
        143, 145, 147, 149, 151, 153, 155, 158,
        160, 162, 165, 167, 170, 173, 175, 178,
        181,
    };

    int32_t w = dsc->width;
 800915a:	2302      	movs	r3, #2
 800915c:	5efd      	ldrsh	r5, [r7, r3]
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
 800915e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
 8009160:	4056      	eors	r6, r2
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
 8009162:	42b3      	cmp	r3, r6
 8009164:	dc00      	bgt.n	8009168 <lv_draw_line+0x504>
 8009166:	e11f      	b.n	80093a8 <lv_draw_line+0x744>
 8009168:	0019      	movs	r1, r3
 800916a:	0170      	lsls	r0, r6, #5
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
 800916c:	f7f7 f88c 	bl	8000288 <__divsi3>

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 8009170:	4bc2      	ldr	r3, [pc, #776]	; (800947c <lv_draw_line+0x818>)
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
 8009172:	466a      	mov	r2, sp
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 8009174:	5c19      	ldrb	r1, [r3, r0]
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
 8009176:	9804      	ldr	r0, [sp, #16]
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 8009178:	434d      	muls	r5, r1
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
 800917a:	4684      	mov	ip, r0
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800917c:	353f      	adds	r5, #63	; 0x3f
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
 800917e:	9805      	ldr	r0, [sp, #20]
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 8009180:	11ec      	asrs	r4, r5, #7
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
 8009182:	b2a3      	uxth	r3, r4
 8009184:	a912      	add	r1, sp, #72	; 0x48
 8009186:	8a12      	ldrh	r2, [r2, #16]
 8009188:	4584      	cmp	ip, r0
 800918a:	dd01      	ble.n	8009190 <lv_draw_line+0x52c>
 800918c:	466a      	mov	r2, sp
 800918e:	8a92      	ldrh	r2, [r2, #20]
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
 8009190:	9804      	ldr	r0, [sp, #16]
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
 8009192:	1ad2      	subs	r2, r2, r3
 8009194:	800a      	strh	r2, [r1, #0]
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
 8009196:	4684      	mov	ip, r0
 8009198:	466a      	mov	r2, sp
 800919a:	9805      	ldr	r0, [sp, #20]
 800919c:	8a12      	ldrh	r2, [r2, #16]
 800919e:	4584      	cmp	ip, r0
 80091a0:	da01      	bge.n	80091a6 <lv_draw_line+0x542>
 80091a2:	466a      	mov	r2, sp
 80091a4:	8a92      	ldrh	r2, [r2, #20]
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
 80091a6:	9806      	ldr	r0, [sp, #24]
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
 80091a8:	189a      	adds	r2, r3, r2
 80091aa:	808a      	strh	r2, [r1, #4]
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
 80091ac:	4684      	mov	ip, r0
 80091ae:	466a      	mov	r2, sp
 80091b0:	9807      	ldr	r0, [sp, #28]
 80091b2:	a912      	add	r1, sp, #72	; 0x48
 80091b4:	8b12      	ldrh	r2, [r2, #24]
 80091b6:	4584      	cmp	ip, r0
 80091b8:	dd01      	ble.n	80091be <lv_draw_line+0x55a>
 80091ba:	466a      	mov	r2, sp
 80091bc:	8b92      	ldrh	r2, [r2, #28]
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
 80091be:	9806      	ldr	r0, [sp, #24]
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
 80091c0:	1ad2      	subs	r2, r2, r3
 80091c2:	804a      	strh	r2, [r1, #2]
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
 80091c4:	4684      	mov	ip, r0
 80091c6:	466a      	mov	r2, sp
 80091c8:	9807      	ldr	r0, [sp, #28]
 80091ca:	8b12      	ldrh	r2, [r2, #24]
 80091cc:	4584      	cmp	ip, r0
 80091ce:	da01      	bge.n	80091d4 <lv_draw_line+0x570>
 80091d0:	466a      	mov	r2, sp
 80091d2:	8b92      	ldrh	r2, [r2, #28]
 80091d4:	189b      	adds	r3, r3, r2
 80091d6:	80cb      	strh	r3, [r1, #6]

    /* Get the union of `coords` and `clip`*/
    /* `clip` is already truncated to the `vdb` size
     * in 'lv_refr_area' function */
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
 80091d8:	a912      	add	r1, sp, #72	; 0x48
 80091da:	aa10      	add	r2, sp, #64	; 0x40
 80091dc:	0008      	movs	r0, r1
 80091de:	f002 fbe0 	bl	800b9a2 <_lv_area_intersect>
    if(is_common == false) return;
 80091e2:	2800      	cmp	r0, #0
 80091e4:	d100      	bne.n	80091e8 <lv_draw_line+0x584>
 80091e6:	e5de      	b.n	8008da6 <lv_draw_line+0x142>
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 80091e8:	2301      	movs	r3, #1
    int32_t w_half0 = w >> 1;
 80091ea:	122d      	asrs	r5, r5, #8
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 80091ec:	401c      	ands	r4, r3
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
 80091ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 80091f0:	1964      	adds	r4, r4, r5
 80091f2:	b2a4      	uxth	r4, r4
 80091f4:	b2ad      	uxth	r5, r5
 80091f6:	466b      	mov	r3, sp
    if(flat) {
 80091f8:	42b2      	cmp	r2, r6
 80091fa:	dc00      	bgt.n	80091fe <lv_draw_line+0x59a>
 80091fc:	e0e5      	b.n	80093ca <lv_draw_line+0x766>
 80091fe:	8b9e      	ldrh	r6, [r3, #28]
 8009200:	19a3      	adds	r3, r4, r6
 8009202:	b21a      	sxth	r2, r3
 8009204:	466b      	mov	r3, sp
 8009206:	8b1b      	ldrh	r3, [r3, #24]
 8009208:	1b76      	subs	r6, r6, r5
 800920a:	18e4      	adds	r4, r4, r3
 800920c:	1b5d      	subs	r5, r3, r5
 800920e:	2300      	movs	r3, #0
 8009210:	920a      	str	r2, [sp, #40]	; 0x28
        if(xdiff > 0) {
 8009212:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009214:	b224      	sxth	r4, r4
 8009216:	b236      	sxth	r6, r6
 8009218:	b22d      	sxth	r5, r5
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800921a:	9301      	str	r3, [sp, #4]
        if(xdiff > 0) {
 800921c:	429a      	cmp	r2, r3
 800921e:	dc00      	bgt.n	8009222 <lv_draw_line+0x5be>
 8009220:	e0c6      	b.n	80093b0 <lv_draw_line+0x74c>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 8009222:	9b04      	ldr	r3, [sp, #16]
 8009224:	0032      	movs	r2, r6
 8009226:	9500      	str	r5, [sp, #0]
 8009228:	9905      	ldr	r1, [sp, #20]
 800922a:	a816      	add	r0, sp, #88	; 0x58
 800922c:	f000 fde2 	bl	8009df4 <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 8009230:	2301      	movs	r3, #1
 8009232:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009234:	9301      	str	r3, [sp, #4]
 8009236:	9b04      	ldr	r3, [sp, #16]
 8009238:	9400      	str	r4, [sp, #0]
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
        else {
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800923a:	9905      	ldr	r1, [sp, #20]
        }
    }
    else {
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
                                      LV_DRAW_MASK_LINE_SIDE_LEFT);
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 800923c:	a821      	add	r0, sp, #132	; 0x84
 800923e:	f000 fdd9 	bl	8009df4 <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 8009242:	2100      	movs	r1, #0
 8009244:	a816      	add	r0, sp, #88	; 0x58
 8009246:	f000 fd6d 	bl	8009d24 <lv_draw_mask_add>
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800924a:	2100      	movs	r1, #0
    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 800924c:	900e      	str	r0, [sp, #56]	; 0x38
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800924e:	a821      	add	r0, sp, #132	; 0x84
 8009250:	f000 fd68 	bl	8009d24 <lv_draw_mask_add>
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
 8009254:	2310      	movs	r3, #16
 8009256:	7a7e      	ldrb	r6, [r7, #9]
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 8009258:	900f      	str	r0, [sp, #60]	; 0x3c
    if(!dsc->raw_end) {
 800925a:	401e      	ands	r6, r3
 800925c:	d000      	beq.n	8009260 <lv_draw_line+0x5fc>
 800925e:	e0ce      	b.n	80093fe <lv_draw_line+0x79a>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
 8009260:	466b      	mov	r3, sp
 8009262:	2203      	movs	r2, #3
 8009264:	8e9d      	ldrh	r5, [r3, #52]	; 0x34
 8009266:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
 8009268:	9201      	str	r2, [sp, #4]
 800926a:	9a07      	ldr	r2, [sp, #28]
 800926c:	9b05      	ldr	r3, [sp, #20]
 800926e:	18a2      	adds	r2, r4, r2
 8009270:	b212      	sxth	r2, r2
 8009272:	1b5b      	subs	r3, r3, r5
 8009274:	b21b      	sxth	r3, r3
 8009276:	9200      	str	r2, [sp, #0]
 8009278:	9905      	ldr	r1, [sp, #20]
 800927a:	9a07      	ldr	r2, [sp, #28]
 800927c:	a82c      	add	r0, sp, #176	; 0xb0
 800927e:	f000 fdb9 	bl	8009df4 <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
 8009282:	2202      	movs	r2, #2
 8009284:	9201      	str	r2, [sp, #4]
 8009286:	9a06      	ldr	r2, [sp, #24]
 8009288:	9b04      	ldr	r3, [sp, #16]
 800928a:	18a4      	adds	r4, r4, r2
 800928c:	1b5b      	subs	r3, r3, r5
 800928e:	b224      	sxth	r4, r4
 8009290:	b21b      	sxth	r3, r3
 8009292:	9904      	ldr	r1, [sp, #16]
 8009294:	a837      	add	r0, sp, #220	; 0xdc
 8009296:	9400      	str	r4, [sp, #0]
 8009298:	f000 fdac 	bl	8009df4 <lv_draw_mask_line_points_init>
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 800929c:	0031      	movs	r1, r6
 800929e:	a82c      	add	r0, sp, #176	; 0xb0
 80092a0:	f000 fd40 	bl	8009d24 <lv_draw_mask_add>
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 80092a4:	0031      	movs	r1, r6
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 80092a6:	900b      	str	r0, [sp, #44]	; 0x2c
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 80092a8:	a837      	add	r0, sp, #220	; 0xdc
 80092aa:	f000 fd3b 	bl	8009d24 <lv_draw_mask_add>
 80092ae:	900d      	str	r0, [sp, #52]	; 0x34
    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 80092b0:	f7fc ff2a 	bl	8006108 <_lv_refr_get_disp_refreshing>
 80092b4:	0005      	movs	r5, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80092b6:	f002 fa81 	bl	800b7bc <lv_disp_get_buf>

    const lv_area_t * disp_area = &vdb->area;

    /*Store the coordinates of the `draw_a` relative to the VDB */
    draw_area.x1 -= disp_area->x1;
 80092ba:	ac12      	add	r4, sp, #72	; 0x48
 80092bc:	8a06      	ldrh	r6, [r0, #16]
 80092be:	8823      	ldrh	r3, [r4, #0]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80092c0:	9004      	str	r0, [sp, #16]
    draw_area.x1 -= disp_area->x1;
 80092c2:	1b9b      	subs	r3, r3, r6
 80092c4:	b29a      	uxth	r2, r3
 80092c6:	8022      	strh	r2, [r4, #0]
    draw_area.y1 -= disp_area->y1;
    draw_area.x2 -= disp_area->x1;
 80092c8:	88a3      	ldrh	r3, [r4, #4]
    draw_area.y1 -= disp_area->y1;
 80092ca:	8a41      	ldrh	r1, [r0, #18]
 80092cc:	8860      	ldrh	r0, [r4, #2]
    draw_area.x2 -= disp_area->x1;
 80092ce:	1b9b      	subs	r3, r3, r6
    draw_area.y1 -= disp_area->y1;
 80092d0:	1a40      	subs	r0, r0, r1
    draw_area.x2 -= disp_area->x1;
 80092d2:	b29b      	uxth	r3, r3
    draw_area.y1 -= disp_area->y1;
 80092d4:	8060      	strh	r0, [r4, #2]
    draw_area.x2 -= disp_area->x1;
 80092d6:	80a3      	strh	r3, [r4, #4]
    draw_area.y2 -= disp_area->y1;
 80092d8:	88e0      	ldrh	r0, [r4, #6]
 80092da:	3301      	adds	r3, #1
 80092dc:	1a9b      	subs	r3, r3, r2
 80092de:	1a41      	subs	r1, r0, r1
 80092e0:	b21b      	sxth	r3, r3
     * So deal with it only with steep lines. */
    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(disp);
 80092e2:	0028      	movs	r0, r5
    draw_area.y2 -= disp_area->y1;
 80092e4:	80e1      	strh	r1, [r4, #6]
 80092e6:	9306      	str	r3, [sp, #24]
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(disp);
 80092e8:	f002 f9f6 	bl	800b6d8 <lv_disp_get_hor_res>
 80092ec:	0005      	movs	r5, r0
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), hor_res);
 80092ee:	0020      	movs	r0, r4
 80092f0:	f002 fb49 	bl	800b986 <lv_area_get_size>
 80092f4:	4285      	cmp	r5, r0
 80092f6:	d903      	bls.n	8009300 <lv_draw_line+0x69c>
 80092f8:	0020      	movs	r0, r4
 80092fa:	f002 fb44 	bl	800b986 <lv_area_get_size>
 80092fe:	0005      	movs	r5, r0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 8009300:	0028      	movs	r0, r5
 8009302:	f003 f907 	bl	800c514 <_lv_mem_buf_get>

    lv_area_t fill_area;
    fill_area.x1 = draw_area.x1 + disp_area->x1;
 8009306:	9b04      	ldr	r3, [sp, #16]
 8009308:	ae12      	add	r6, sp, #72	; 0x48
 800930a:	8a1b      	ldrh	r3, [r3, #16]
 800930c:	8832      	ldrh	r2, [r6, #0]
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800930e:	0004      	movs	r4, r0
    fill_area.x1 = draw_area.x1 + disp_area->x1;
 8009310:	189a      	adds	r2, r3, r2
 8009312:	b212      	sxth	r2, r2
 8009314:	920a      	str	r2, [sp, #40]	; 0x28
 8009316:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009318:	aa14      	add	r2, sp, #80	; 0x50
 800931a:	8011      	strh	r1, [r2, #0]
    fill_area.x2 = draw_area.x2 + disp_area->x1;
 800931c:	88b1      	ldrh	r1, [r6, #4]
 800931e:	185b      	adds	r3, r3, r1
    fill_area.y1 = draw_area.y1 + disp_area->y1;
 8009320:	9904      	ldr	r1, [sp, #16]
    fill_area.x2 = draw_area.x2 + disp_area->x1;
 8009322:	8093      	strh	r3, [r2, #4]
    fill_area.y1 = draw_area.y1 + disp_area->y1;
 8009324:	8a49      	ldrh	r1, [r1, #18]
 8009326:	8873      	ldrh	r3, [r6, #2]
 8009328:	185b      	adds	r3, r3, r1
 800932a:	b21b      	sxth	r3, r3

    int32_t x = vdb->area.x1 + draw_area.x1;

    uint32_t mask_p = 0;

    _lv_memset_ff(mask_buf, mask_buf_size);
 800932c:	0029      	movs	r1, r5
    fill_area.y1 = draw_area.y1 + disp_area->y1;
 800932e:	8053      	strh	r3, [r2, #2]
    fill_area.y2 = fill_area.y1;
 8009330:	80d3      	strh	r3, [r2, #6]
    _lv_memset_ff(mask_buf, mask_buf_size);
 8009332:	f003 f9a1 	bl	800c678 <_lv_memset_ff>
    /*Fill the first row with 'color'*/
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
 8009336:	2302      	movs	r3, #2
 8009338:	5ef2      	ldrsh	r2, [r6, r3]
 800933a:	9b04      	ldr	r3, [sp, #16]
 800933c:	2112      	movs	r1, #18
 800933e:	5e5b      	ldrsh	r3, [r3, r1]
 8009340:	18d3      	adds	r3, r2, r3
 8009342:	9307      	str	r3, [sp, #28]
    uint32_t mask_p = 0;
 8009344:	2300      	movs	r3, #0
 8009346:	9305      	str	r3, [sp, #20]
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
 8009348:	ab12      	add	r3, sp, #72	; 0x48
 800934a:	2206      	movs	r2, #6
 800934c:	5e9b      	ldrsh	r3, [r3, r2]
 800934e:	9a04      	ldr	r2, [sp, #16]
 8009350:	2112      	movs	r1, #18
 8009352:	5e52      	ldrsh	r2, [r2, r1]
 8009354:	189b      	adds	r3, r3, r2
 8009356:	9a07      	ldr	r2, [sp, #28]
 8009358:	429a      	cmp	r2, r3
 800935a:	dd55      	ble.n	8009408 <lv_draw_line+0x7a4>
            _lv_memset_ff(mask_buf, mask_buf_size);
        }
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
 800935c:	a814      	add	r0, sp, #80	; 0x50
 800935e:	2206      	movs	r2, #6
 8009360:	5e83      	ldrsh	r3, [r0, r2]
 8009362:	2102      	movs	r1, #2
 8009364:	5e42      	ldrsh	r2, [r0, r1]
 8009366:	429a      	cmp	r2, r3
 8009368:	d00e      	beq.n	8009388 <lv_draw_line+0x724>
        fill_area.y2--;
 800936a:	3b01      	subs	r3, #1
 800936c:	80c3      	strh	r3, [r0, #6]
        _lv_blend_fill(&fill_area, clip,
                       dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                       dsc->blend_mode);
 800936e:	7a7b      	ldrb	r3, [r7, #9]
        _lv_blend_fill(&fill_area, clip,
 8009370:	a910      	add	r1, sp, #64	; 0x40
                       dsc->blend_mode);
 8009372:	079b      	lsls	r3, r3, #30
        _lv_blend_fill(&fill_area, clip,
 8009374:	0f9b      	lsrs	r3, r3, #30
 8009376:	9302      	str	r3, [sp, #8]
 8009378:	7a3b      	ldrb	r3, [r7, #8]
 800937a:	9301      	str	r3, [sp, #4]
 800937c:	2302      	movs	r3, #2
 800937e:	9300      	str	r3, [sp, #0]
 8009380:	883a      	ldrh	r2, [r7, #0]
 8009382:	0023      	movs	r3, r4
 8009384:	f7fd fda8 	bl	8006ed8 <_lv_blend_fill>

    }

    _lv_mem_buf_release(mask_buf);
 8009388:	0020      	movs	r0, r4
 800938a:	f002 ffcb 	bl	800c324 <_lv_mem_buf_release>

    lv_draw_mask_remove_id(mask_left_id);
 800938e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009390:	f000 fcfe 	bl	8009d90 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_right_id);
 8009394:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009396:	f000 fcfb 	bl	8009d90 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_top_id);
 800939a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800939c:	f000 fcf8 	bl	8009d90 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bottom_id);
 80093a0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80093a2:	f000 fcf5 	bl	8009d90 <lv_draw_mask_remove_id>
 80093a6:	e4fe      	b.n	8008da6 <lv_draw_line+0x142>
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
 80093a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093aa:	0031      	movs	r1, r6
 80093ac:	0158      	lsls	r0, r3, #5
 80093ae:	e6dd      	b.n	800916c <lv_draw_line+0x508>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 80093b0:	9b04      	ldr	r3, [sp, #16]
 80093b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093b4:	9400      	str	r4, [sp, #0]
 80093b6:	9905      	ldr	r1, [sp, #20]
 80093b8:	a816      	add	r0, sp, #88	; 0x58
 80093ba:	f000 fd1b 	bl	8009df4 <lv_draw_mask_line_points_init>
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 80093be:	2301      	movs	r3, #1
 80093c0:	9500      	str	r5, [sp, #0]
 80093c2:	9301      	str	r3, [sp, #4]
 80093c4:	0032      	movs	r2, r6
 80093c6:	9b04      	ldr	r3, [sp, #16]
 80093c8:	e737      	b.n	800923a <lv_draw_line+0x5d6>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
 80093ca:	2200      	movs	r2, #0
 80093cc:	8a9e      	ldrh	r6, [r3, #20]
 80093ce:	8a1b      	ldrh	r3, [r3, #16]
 80093d0:	9201      	str	r2, [sp, #4]
 80093d2:	9a06      	ldr	r2, [sp, #24]
 80093d4:	930a      	str	r3, [sp, #40]	; 0x28
 80093d6:	191b      	adds	r3, r3, r4
 80093d8:	1934      	adds	r4, r6, r4
 80093da:	b21b      	sxth	r3, r3
 80093dc:	b221      	sxth	r1, r4
 80093de:	9200      	str	r2, [sp, #0]
 80093e0:	a816      	add	r0, sp, #88	; 0x58
 80093e2:	9a07      	ldr	r2, [sp, #28]
 80093e4:	f000 fd06 	bl	8009df4 <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 80093e8:	2201      	movs	r2, #1
 80093ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093ec:	9201      	str	r2, [sp, #4]
 80093ee:	9a06      	ldr	r2, [sp, #24]
 80093f0:	1b5b      	subs	r3, r3, r5
 80093f2:	1b75      	subs	r5, r6, r5
 80093f4:	9200      	str	r2, [sp, #0]
 80093f6:	b21b      	sxth	r3, r3
 80093f8:	b229      	sxth	r1, r5
 80093fa:	9a07      	ldr	r2, [sp, #28]
 80093fc:	e71e      	b.n	800923c <lv_draw_line+0x5d8>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
 80093fe:	2301      	movs	r3, #1
 8009400:	425b      	negs	r3, r3
 8009402:	930d      	str	r3, [sp, #52]	; 0x34
    int16_t mask_top_id = LV_MASK_ID_INV;
 8009404:	930b      	str	r3, [sp, #44]	; 0x2c
 8009406:	e753      	b.n	80092b0 <lv_draw_line+0x64c>
        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
 8009408:	9b05      	ldr	r3, [sp, #20]
 800940a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800940c:	18e6      	adds	r6, r4, r3
 800940e:	466b      	mov	r3, sp
 8009410:	0030      	movs	r0, r6
 8009412:	221c      	movs	r2, #28
 8009414:	5e9a      	ldrsh	r2, [r3, r2]
 8009416:	9b06      	ldr	r3, [sp, #24]
 8009418:	f000 fc9a 	bl	8009d50 <lv_draw_mask_apply>
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800941c:	2800      	cmp	r0, #0
 800941e:	d103      	bne.n	8009428 <lv_draw_line+0x7c4>
            _lv_memset_00(&mask_buf[mask_p], draw_area_w);
 8009420:	9906      	ldr	r1, [sp, #24]
 8009422:	0030      	movs	r0, r6
 8009424:	f003 f8fe 	bl	800c624 <_lv_memset_00>
        mask_p += draw_area_w;
 8009428:	9a06      	ldr	r2, [sp, #24]
 800942a:	9b05      	ldr	r3, [sp, #20]
 800942c:	4694      	mov	ip, r2
 800942e:	4463      	add	r3, ip
 8009430:	9305      	str	r3, [sp, #20]
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
 8009432:	189b      	adds	r3, r3, r2
 8009434:	ae14      	add	r6, sp, #80	; 0x50
 8009436:	429d      	cmp	r5, r3
 8009438:	d906      	bls.n	8009448 <lv_draw_line+0x7e4>
            fill_area.y2 ++;
 800943a:	88f3      	ldrh	r3, [r6, #6]
 800943c:	3301      	adds	r3, #1
 800943e:	80f3      	strh	r3, [r6, #6]
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
 8009440:	9b07      	ldr	r3, [sp, #28]
 8009442:	3301      	adds	r3, #1
 8009444:	9307      	str	r3, [sp, #28]
 8009446:	e77f      	b.n	8009348 <lv_draw_line+0x6e4>
                           dsc->blend_mode);
 8009448:	7a7b      	ldrb	r3, [r7, #9]
            _lv_blend_fill(&fill_area, clip,
 800944a:	a910      	add	r1, sp, #64	; 0x40
                           dsc->blend_mode);
 800944c:	079b      	lsls	r3, r3, #30
            _lv_blend_fill(&fill_area, clip,
 800944e:	0f9b      	lsrs	r3, r3, #30
 8009450:	9302      	str	r3, [sp, #8]
 8009452:	7a3b      	ldrb	r3, [r7, #8]
 8009454:	0030      	movs	r0, r6
 8009456:	9301      	str	r3, [sp, #4]
 8009458:	2302      	movs	r3, #2
 800945a:	9300      	str	r3, [sp, #0]
 800945c:	883a      	ldrh	r2, [r7, #0]
 800945e:	0023      	movs	r3, r4
 8009460:	f7fd fd3a 	bl	8006ed8 <_lv_blend_fill>
            fill_area.y1 = fill_area.y2 + 1;
 8009464:	88f3      	ldrh	r3, [r6, #6]
            _lv_memset_ff(mask_buf, mask_buf_size);
 8009466:	0029      	movs	r1, r5
            fill_area.y1 = fill_area.y2 + 1;
 8009468:	3301      	adds	r3, #1
 800946a:	b21b      	sxth	r3, r3
            _lv_memset_ff(mask_buf, mask_buf_size);
 800946c:	0020      	movs	r0, r4
            fill_area.y1 = fill_area.y2 + 1;
 800946e:	8073      	strh	r3, [r6, #2]
            fill_area.y2 = fill_area.y1;
 8009470:	80f3      	strh	r3, [r6, #6]
            _lv_memset_ff(mask_buf, mask_buf_size);
 8009472:	f003 f901 	bl	800c678 <_lv_memset_ff>
            mask_p = 0;
 8009476:	2300      	movs	r3, #0
 8009478:	9305      	str	r3, [sp, #20]
 800947a:	e7e1      	b.n	8009440 <lv_draw_line+0x7dc>
 800947c:	0800f452 	.word	0x0800f452

08009480 <mask_mix>:
    return LV_DRAW_MASK_RES_CHANGED;
}

LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
 8009480:	29fc      	cmp	r1, #252	; 0xfc
 8009482:	d806      	bhi.n	8009492 <mask_mix+0x12>
    if(mask_new <= LV_OPA_MIN) return 0;
 8009484:	2902      	cmp	r1, #2
 8009486:	d905      	bls.n	8009494 <mask_mix+0x14>

    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
 8009488:	4341      	muls	r1, r0
 800948a:	4803      	ldr	r0, [pc, #12]	; (8009498 <mask_mix+0x18>)
 800948c:	4348      	muls	r0, r1
 800948e:	0dc0      	lsrs	r0, r0, #23
 8009490:	b2c0      	uxtb	r0, r0
}
 8009492:	4770      	bx	lr
    if(mask_new <= LV_OPA_MIN) return 0;
 8009494:	2000      	movs	r0, #0
 8009496:	e7fc      	b.n	8009492 <mask_mix+0x12>
 8009498:	00008081 	.word	0x00008081

0800949c <lv_draw_mask_line>:
{
 800949c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800949e:	b087      	sub	sp, #28
 80094a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80094a2:	9301      	str	r3, [sp, #4]
 80094a4:	002b      	movs	r3, r5
 80094a6:	9002      	str	r0, [sp, #8]
    abs_y -= p->origo.y;
 80094a8:	8aa8      	ldrh	r0, [r5, #20]
 80094aa:	3328      	adds	r3, #40	; 0x28
 80094ac:	1a12      	subs	r2, r2, r0
 80094ae:	7818      	ldrb	r0, [r3, #0]
    abs_x -= p->origo.x;
 80094b0:	8a6f      	ldrh	r7, [r5, #18]
 80094b2:	0004      	movs	r4, r0
 80094b4:	9303      	str	r3, [sp, #12]
 80094b6:	2301      	movs	r3, #1
 80094b8:	1bcf      	subs	r7, r1, r7
    if(p->steep == 0) {
 80094ba:	6a29      	ldr	r1, [r5, #32]
    abs_y -= p->origo.y;
 80094bc:	b212      	sxth	r2, r2
    abs_x -= p->origo.x;
 80094be:	b23f      	sxth	r7, r7
 80094c0:	401c      	ands	r4, r3
    if(p->steep == 0) {
 80094c2:	2900      	cmp	r1, #0
 80094c4:	d133      	bne.n	800952e <lv_draw_mask_line+0x92>
 80094c6:	2003      	movs	r0, #3
 80094c8:	7c2d      	ldrb	r5, [r5, #16]
 80094ca:	4028      	ands	r0, r5
        if(p->flat) {
 80094cc:	2c00      	cmp	r4, #0
 80094ce:	d00f      	beq.n	80094f0 <lv_draw_mask_line+0x54>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 80094d0:	001d      	movs	r5, r3
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 80094d2:	4298      	cmp	r0, r3
 80094d4:	d905      	bls.n	80094e2 <lv_draw_mask_line+0x46>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 80094d6:	2802      	cmp	r0, #2
 80094d8:	d106      	bne.n	80094e8 <lv_draw_mask_line+0x4c>
 80094da:	3201      	adds	r2, #1
 80094dc:	db00      	blt.n	80094e0 <lv_draw_mask_line+0x44>
 80094de:	1c0b      	adds	r3, r1, #0
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 80094e0:	b2dd      	uxtb	r5, r3
}
 80094e2:	0028      	movs	r0, r5
 80094e4:	b007      	add	sp, #28
 80094e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 80094e8:	17d5      	asrs	r5, r2, #31
 80094ea:	1aad      	subs	r5, r5, r2
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 80094ec:	0fed      	lsrs	r5, r5, #31
 80094ee:	e7f8      	b.n	80094e2 <lv_draw_mask_line+0x46>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 80094f0:	1e82      	subs	r2, r0, #2
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 80094f2:	001d      	movs	r5, r3
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 80094f4:	2a01      	cmp	r2, #1
 80094f6:	d9f4      	bls.n	80094e2 <lv_draw_mask_line+0x46>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 80094f8:	2801      	cmp	r0, #1
 80094fa:	d10a      	bne.n	8009512 <lv_draw_mask_line+0x76>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 80094fc:	0005      	movs	r5, r0
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 80094fe:	2f00      	cmp	r7, #0
 8009500:	dcef      	bgt.n	80094e2 <lv_draw_mask_line+0x46>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 8009502:	9b01      	ldr	r3, [sp, #4]
 8009504:	42df      	cmn	r7, r3
 8009506:	d409      	bmi.n	800951c <lv_draw_mask_line+0x80>
                    int32_t k = - abs_x;
 8009508:	4279      	negs	r1, r7
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 800950a:	428b      	cmp	r3, r1
 800950c:	dd06      	ble.n	800951c <lv_draw_mask_line+0x80>
                else if(k > 0) _lv_memset_00(&mask_buf[0],  k);
 800950e:	9802      	ldr	r0, [sp, #8]
 8009510:	e125      	b.n	800975e <lv_draw_mask_line+0x2c2>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 8009512:	9b01      	ldr	r3, [sp, #4]
 8009514:	19d9      	adds	r1, r3, r7
 8009516:	d4e4      	bmi.n	80094e2 <lv_draw_mask_line+0x46>
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
 8009518:	2f00      	cmp	r7, #0
 800951a:	dd01      	ble.n	8009520 <lv_draw_mask_line+0x84>
 800951c:	2500      	movs	r5, #0
 800951e:	e7e0      	b.n	80094e2 <lv_draw_mask_line+0x46>
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
 8009520:	9b01      	ldr	r3, [sp, #4]
                    int32_t k = - abs_x;
 8009522:	4278      	negs	r0, r7
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
 8009524:	4298      	cmp	r0, r3
 8009526:	da00      	bge.n	800952a <lv_draw_mask_line+0x8e>
 8009528:	e117      	b.n	800975a <lv_draw_mask_line+0x2be>
                    return LV_DRAW_MASK_RES_CHANGED;
 800952a:	2502      	movs	r5, #2
 800952c:	e7d9      	b.n	80094e2 <lv_draw_mask_line+0x46>
 800952e:	2302      	movs	r3, #2
 8009530:	4018      	ands	r0, r3
    if(p->flat) {
 8009532:	2c00      	cmp	r4, #0
 8009534:	d100      	bne.n	8009538 <lv_draw_mask_line+0x9c>
 8009536:	e09b      	b.n	8009670 <lv_draw_mask_line+0x1d4>
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 8009538:	003b      	movs	r3, r7
 800953a:	69e9      	ldr	r1, [r5, #28]
 800953c:	434b      	muls	r3, r1
 800953e:	129b      	asrs	r3, r3, #10
    if(p->yx_steep > 0) {
 8009540:	2900      	cmp	r1, #0
 8009542:	dd05      	ble.n	8009550 <lv_draw_mask_line+0xb4>
        if(y_at_x > abs_y) {
 8009544:	4293      	cmp	r3, r2
 8009546:	dd05      	ble.n	8009554 <lv_draw_mask_line+0xb8>
        if(p->inv) {
 8009548:	1e45      	subs	r5, r0, #1
 800954a:	41a8      	sbcs	r0, r5
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800954c:	b2c5      	uxtb	r5, r0
 800954e:	e7c8      	b.n	80094e2 <lv_draw_mask_line+0x46>
        if(y_at_x < abs_y) {
 8009550:	4293      	cmp	r3, r2
 8009552:	dbf9      	blt.n	8009548 <lv_draw_mask_line+0xac>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 8009554:	9b01      	ldr	r3, [sp, #4]
 8009556:	19db      	adds	r3, r3, r7
 8009558:	434b      	muls	r3, r1
 800955a:	129b      	asrs	r3, r3, #10
    if(p->yx_steep > 0) {
 800955c:	2900      	cmp	r1, #0
 800955e:	dd05      	ble.n	800956c <lv_draw_mask_line+0xd0>
        if(y_at_x < abs_y) {
 8009560:	4293      	cmp	r3, r2
 8009562:	da06      	bge.n	8009572 <lv_draw_mask_line+0xd6>
        if(p->inv) {
 8009564:	4245      	negs	r5, r0
 8009566:	4145      	adcs	r5, r0
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 8009568:	b2ed      	uxtb	r5, r5
 800956a:	e7ba      	b.n	80094e2 <lv_draw_mask_line+0x46>
        if(y_at_x > abs_y) {
 800956c:	4293      	cmp	r3, r2
 800956e:	dcf9      	bgt.n	8009564 <lv_draw_mask_line+0xc8>
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
 8009570:	3201      	adds	r2, #1
    int32_t xef = xe & 0xFF;
 8009572:	24ff      	movs	r4, #255	; 0xff
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
 8009574:	69ab      	ldr	r3, [r5, #24]
 8009576:	0212      	lsls	r2, r2, #8
 8009578:	435a      	muls	r2, r3
 800957a:	1292      	asrs	r2, r2, #10
    int32_t xei = xe >> 8;
 800957c:	1216      	asrs	r6, r2, #8
    int32_t xef = xe & 0xFF;
 800957e:	4022      	ands	r2, r4
    if(xef == 0) px_h = 255;
 8009580:	d004      	beq.n	800958c <lv_draw_mask_line+0xf0>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 8009582:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8009584:	1aa3      	subs	r3, r4, r2
 8009586:	434b      	muls	r3, r1
 8009588:	121b      	asrs	r3, r3, #8
 800958a:	1ae4      	subs	r4, r4, r3
    int32_t k = xei - abs_x;
 800958c:	1bf7      	subs	r7, r6, r7
 800958e:	003e      	movs	r6, r7
    if(xef) {
 8009590:	2a00      	cmp	r2, #0
 8009592:	d015      	beq.n	80095c0 <lv_draw_mask_line+0x124>
        if(k >= 0 && k < len) {
 8009594:	2f00      	cmp	r7, #0
 8009596:	db12      	blt.n	80095be <lv_draw_mask_line+0x122>
 8009598:	9b01      	ldr	r3, [sp, #4]
 800959a:	42bb      	cmp	r3, r7
 800959c:	dd0f      	ble.n	80095be <lv_draw_mask_line+0x122>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 800959e:	21ff      	movs	r1, #255	; 0xff
 80095a0:	1a8a      	subs	r2, r1, r2
 80095a2:	1b09      	subs	r1, r1, r4
 80095a4:	4351      	muls	r1, r2
 80095a6:	1249      	asrs	r1, r1, #9
 80095a8:	b2c9      	uxtb	r1, r1
            if(p->inv) m = 255 - m;
 80095aa:	2800      	cmp	r0, #0
 80095ac:	d101      	bne.n	80095b2 <lv_draw_mask_line+0x116>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 80095ae:	43c9      	mvns	r1, r1
 80095b0:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 80095b2:	9b02      	ldr	r3, [sp, #8]
 80095b4:	19de      	adds	r6, r3, r7
 80095b6:	7830      	ldrb	r0, [r6, #0]
 80095b8:	f7ff ff62 	bl	8009480 <mask_mix>
 80095bc:	7030      	strb	r0, [r6, #0]
        k++;
 80095be:	1c7e      	adds	r6, r7, #1
 80095c0:	002b      	movs	r3, r5
 80095c2:	3328      	adds	r3, #40	; 0x28
 80095c4:	9303      	str	r3, [sp, #12]
 80095c6:	2202      	movs	r2, #2
 80095c8:	9b03      	ldr	r3, [sp, #12]
    while(px_h > p->spx) {
 80095ca:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	4013      	ands	r3, r2
 80095d0:	428c      	cmp	r4, r1
 80095d2:	dc1a      	bgt.n	800960a <lv_draw_mask_line+0x16e>
    if(k < len && k >= 0) {
 80095d4:	9a01      	ldr	r2, [sp, #4]
 80095d6:	42b2      	cmp	r2, r6
 80095d8:	dd2f      	ble.n	800963a <lv_draw_mask_line+0x19e>
 80095da:	2e00      	cmp	r6, #0
 80095dc:	db2d      	blt.n	800963a <lv_draw_mask_line+0x19e>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 80095de:	69a9      	ldr	r1, [r5, #24]
        if(p->yx_steep < 0) m = 255 - m;
 80095e0:	69ea      	ldr	r2, [r5, #28]
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 80095e2:	4361      	muls	r1, r4
 80095e4:	1289      	asrs	r1, r1, #10
        m = (x_inters * px_h) >> 9;
 80095e6:	434c      	muls	r4, r1
 80095e8:	1264      	asrs	r4, r4, #9
 80095ea:	b2e1      	uxtb	r1, r4
        if(p->yx_steep < 0) m = 255 - m;
 80095ec:	2a00      	cmp	r2, #0
 80095ee:	da01      	bge.n	80095f4 <lv_draw_mask_line+0x158>
 80095f0:	43c9      	mvns	r1, r1
 80095f2:	b2c9      	uxtb	r1, r1
        if(p->inv) m = 255 - m;
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d001      	beq.n	80095fc <lv_draw_mask_line+0x160>
 80095f8:	43c9      	mvns	r1, r1
 80095fa:	b2c9      	uxtb	r1, r1
        mask_buf[k] = mask_mix(mask_buf[k], m);
 80095fc:	9b02      	ldr	r3, [sp, #8]
 80095fe:	199d      	adds	r5, r3, r6
 8009600:	7828      	ldrb	r0, [r5, #0]
 8009602:	f7ff ff3d 	bl	8009480 <mask_mix>
 8009606:	7028      	strb	r0, [r5, #0]
 8009608:	e017      	b.n	800963a <lv_draw_mask_line+0x19e>
        if(k >= 0 && k < len) {
 800960a:	2e00      	cmp	r6, #0
 800960c:	db0f      	blt.n	800962e <lv_draw_mask_line+0x192>
 800960e:	9a01      	ldr	r2, [sp, #4]
 8009610:	42b2      	cmp	r2, r6
 8009612:	dd0c      	ble.n	800962e <lv_draw_mask_line+0x192>
            m = px_h - (p->spx >> 1);
 8009614:	1049      	asrs	r1, r1, #1
 8009616:	1a61      	subs	r1, r4, r1
 8009618:	b2c9      	uxtb	r1, r1
            if(p->inv) m = 255 - m;
 800961a:	2b00      	cmp	r3, #0
 800961c:	d001      	beq.n	8009622 <lv_draw_mask_line+0x186>
 800961e:	43c9      	mvns	r1, r1
 8009620:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 8009622:	9b02      	ldr	r3, [sp, #8]
 8009624:	5d98      	ldrb	r0, [r3, r6]
 8009626:	f7ff ff2b 	bl	8009480 <mask_mix>
 800962a:	9b02      	ldr	r3, [sp, #8]
 800962c:	5598      	strb	r0, [r3, r6]
        px_h -= p->spx;
 800962e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
        k++;
 8009630:	3601      	adds	r6, #1
        px_h -= p->spx;
 8009632:	1ae4      	subs	r4, r4, r3
        if(k >= len) break;
 8009634:	9b01      	ldr	r3, [sp, #4]
 8009636:	42b3      	cmp	r3, r6
 8009638:	dcc5      	bgt.n	80095c6 <lv_draw_mask_line+0x12a>
    if(p->inv) {
 800963a:	2502      	movs	r5, #2
 800963c:	9b03      	ldr	r3, [sp, #12]
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	422b      	tst	r3, r5
 8009642:	d008      	beq.n	8009656 <lv_draw_mask_line+0x1ba>
        if(k > len) {
 8009644:	9b01      	ldr	r3, [sp, #4]
 8009646:	42bb      	cmp	r3, r7
 8009648:	da00      	bge.n	800964c <lv_draw_mask_line+0x1b0>
 800964a:	e767      	b.n	800951c <lv_draw_mask_line+0x80>
            _lv_memset_00(&mask_buf[0], k);
 800964c:	1e39      	subs	r1, r7, #0
        if(k >= 0) {
 800964e:	da00      	bge.n	8009652 <lv_draw_mask_line+0x1b6>
 8009650:	e76b      	b.n	800952a <lv_draw_mask_line+0x8e>
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
 8009652:	9802      	ldr	r0, [sp, #8]
 8009654:	e009      	b.n	800966a <lv_draw_mask_line+0x1ce>
        if(k < 0) {
 8009656:	1c70      	adds	r0, r6, #1
 8009658:	d500      	bpl.n	800965c <lv_draw_mask_line+0x1c0>
 800965a:	e75f      	b.n	800951c <lv_draw_mask_line+0x80>
        if(k <= len) {
 800965c:	9b01      	ldr	r3, [sp, #4]
 800965e:	4283      	cmp	r3, r0
 8009660:	da00      	bge.n	8009664 <lv_draw_mask_line+0x1c8>
 8009662:	e762      	b.n	800952a <lv_draw_mask_line+0x8e>
            _lv_memset_00(&mask_buf[k], len - k);
 8009664:	1a19      	subs	r1, r3, r0
 8009666:	9b02      	ldr	r3, [sp, #8]
 8009668:	1818      	adds	r0, r3, r0
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
 800966a:	f002 ffdb 	bl	800c624 <_lv_memset_00>
 800966e:	e738      	b.n	80094e2 <lv_draw_mask_line+0x46>
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 8009670:	0014      	movs	r4, r2
 8009672:	69ab      	ldr	r3, [r5, #24]
 8009674:	435c      	muls	r4, r3
    if(p->xy_steep > 0) x_at_y++;
 8009676:	17d9      	asrs	r1, r3, #31
 8009678:	1ac9      	subs	r1, r1, r3
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 800967a:	12a4      	asrs	r4, r4, #10
    if(p->xy_steep > 0) x_at_y++;
 800967c:	0fc9      	lsrs	r1, r1, #31
 800967e:	1861      	adds	r1, r4, r1
    if(x_at_y < abs_x) {
 8009680:	42b9      	cmp	r1, r7
 8009682:	da00      	bge.n	8009686 <lv_draw_mask_line+0x1ea>
 8009684:	e760      	b.n	8009548 <lv_draw_mask_line+0xac>
    if(x_at_y > abs_x + len) {
 8009686:	9901      	ldr	r1, [sp, #4]
 8009688:	19c9      	adds	r1, r1, r7
 800968a:	428c      	cmp	r4, r1
 800968c:	dd00      	ble.n	8009690 <lv_draw_mask_line+0x1f4>
 800968e:	e769      	b.n	8009564 <lv_draw_mask_line+0xc8>
    int32_t xsf = xs & 0xFF;
 8009690:	24ff      	movs	r4, #255	; 0xff
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
 8009692:	0211      	lsls	r1, r2, #8
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
 8009694:	3201      	adds	r2, #1
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
 8009696:	4359      	muls	r1, r3
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
 8009698:	0212      	lsls	r2, r2, #8
 800969a:	435a      	muls	r2, r3
    int32_t xsi = xs >> 8;
 800969c:	148e      	asrs	r6, r1, #18
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
 800969e:	1289      	asrs	r1, r1, #10
    int32_t xsf = xs & 0xFF;
 80096a0:	46a4      	mov	ip, r4
 80096a2:	4021      	ands	r1, r4
    int32_t xei = xe >> 8;
 80096a4:	1494      	asrs	r4, r2, #18
 80096a6:	9405      	str	r4, [sp, #20]
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
 80096a8:	9204      	str	r2, [sp, #16]
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 80096aa:	9a05      	ldr	r2, [sp, #20]
    k = xsi - abs_x;
 80096ac:	1bf4      	subs	r4, r6, r7
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 80096ae:	4296      	cmp	r6, r2
 80096b0:	d100      	bne.n	80096b4 <lv_draw_mask_line+0x218>
 80096b2:	e0a8      	b.n	8009806 <lv_draw_mask_line+0x36a>
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	da62      	bge.n	800977e <lv_draw_mask_line+0x2e2>
 80096b8:	1e66      	subs	r6, r4, #1
 80096ba:	2900      	cmp	r1, #0
 80096bc:	d100      	bne.n	80096c0 <lv_draw_mask_line+0x224>
 80096be:	e0c6      	b.n	800984e <lv_draw_mask_line+0x3b2>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 80096c0:	69eb      	ldr	r3, [r5, #28]
 80096c2:	425b      	negs	r3, r3
 80096c4:	434b      	muls	r3, r1
 80096c6:	129b      	asrs	r3, r3, #10
 80096c8:	9304      	str	r3, [sp, #16]
            if(k >= 0 && k < len) {
 80096ca:	2c00      	cmp	r4, #0
 80096cc:	db10      	blt.n	80096f0 <lv_draw_mask_line+0x254>
 80096ce:	9b01      	ldr	r3, [sp, #4]
 80096d0:	42a3      	cmp	r3, r4
 80096d2:	dd0d      	ble.n	80096f0 <lv_draw_mask_line+0x254>
                m = (y_inters * xsf) >> 9;
 80096d4:	9b04      	ldr	r3, [sp, #16]
 80096d6:	4359      	muls	r1, r3
 80096d8:	1249      	asrs	r1, r1, #9
 80096da:	b2c9      	uxtb	r1, r1
                if(p->inv) m = 255 - m;
 80096dc:	2800      	cmp	r0, #0
 80096de:	d001      	beq.n	80096e4 <lv_draw_mask_line+0x248>
 80096e0:	43c9      	mvns	r1, r1
 80096e2:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 80096e4:	9b02      	ldr	r3, [sp, #8]
 80096e6:	191f      	adds	r7, r3, r4
 80096e8:	7838      	ldrb	r0, [r7, #0]
 80096ea:	f7ff fec9 	bl	8009480 <mask_mix>
 80096ee:	7038      	strb	r0, [r7, #0]
            if(k >= 0 && k < len) {
 80096f0:	2e00      	cmp	r6, #0
 80096f2:	db18      	blt.n	8009726 <lv_draw_mask_line+0x28a>
 80096f4:	9b01      	ldr	r3, [sp, #4]
 80096f6:	42b3      	cmp	r3, r6
 80096f8:	dd15      	ble.n	8009726 <lv_draw_mask_line+0x28a>
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 80096fa:	21ff      	movs	r1, #255	; 0xff
 80096fc:	9b04      	ldr	r3, [sp, #16]
 80096fe:	1ac9      	subs	r1, r1, r3
 8009700:	69ab      	ldr	r3, [r5, #24]
 8009702:	425b      	negs	r3, r3
 8009704:	434b      	muls	r3, r1
 8009706:	129b      	asrs	r3, r3, #10
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 8009708:	4359      	muls	r1, r3
                if(p->inv) m = 255 - m;
 800970a:	9b03      	ldr	r3, [sp, #12]
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 800970c:	1249      	asrs	r1, r1, #9
                if(p->inv) m = 255 - m;
 800970e:	781b      	ldrb	r3, [r3, #0]
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 8009710:	b2c9      	uxtb	r1, r1
                if(p->inv) m = 255 - m;
 8009712:	079b      	lsls	r3, r3, #30
 8009714:	d401      	bmi.n	800971a <lv_draw_mask_line+0x27e>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 8009716:	43c9      	mvns	r1, r1
 8009718:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800971a:	9b02      	ldr	r3, [sp, #8]
 800971c:	199d      	adds	r5, r3, r6
 800971e:	7828      	ldrb	r0, [r5, #0]
 8009720:	f7ff feae 	bl	8009480 <mask_mix>
 8009724:	7028      	strb	r0, [r5, #0]
            if(p->inv) {
 8009726:	2702      	movs	r7, #2
 8009728:	9b03      	ldr	r3, [sp, #12]
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	423b      	tst	r3, r7
 800972e:	d019      	beq.n	8009764 <lv_draw_mask_line+0x2c8>
                if(k > len) k = len;
 8009730:	9b01      	ldr	r3, [sp, #4]
 8009732:	42b3      	cmp	r3, r6
 8009734:	da00      	bge.n	8009738 <lv_draw_mask_line+0x29c>
 8009736:	e6f8      	b.n	800952a <lv_draw_mask_line+0x8e>
                else if(k > 0) _lv_memset_00(&mask_buf[0],  k);
 8009738:	2e00      	cmp	r6, #0
 800973a:	dc00      	bgt.n	800973e <lv_draw_mask_line+0x2a2>
 800973c:	e6f5      	b.n	800952a <lv_draw_mask_line+0x8e>
 800973e:	0031      	movs	r1, r6
 8009740:	e6e5      	b.n	800950e <lv_draw_mask_line+0x72>
 8009742:	9801      	ldr	r0, [sp, #4]
        k++;
 8009744:	3601      	adds	r6, #1
 8009746:	42b0      	cmp	r0, r6
 8009748:	dd00      	ble.n	800974c <lv_draw_mask_line+0x2b0>
 800974a:	0030      	movs	r0, r6
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 800974c:	2800      	cmp	r0, #0
 800974e:	d100      	bne.n	8009752 <lv_draw_mask_line+0x2b6>
 8009750:	e6e4      	b.n	800951c <lv_draw_mask_line+0x80>
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
 8009752:	dc00      	bgt.n	8009756 <lv_draw_mask_line+0x2ba>
 8009754:	e6e9      	b.n	800952a <lv_draw_mask_line+0x8e>
 8009756:	9b01      	ldr	r3, [sp, #4]
 8009758:	1a19      	subs	r1, r3, r0
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
 800975a:	9b02      	ldr	r3, [sp, #8]
 800975c:	1818      	adds	r0, r3, r0
 800975e:	f002 ff61 	bl	800c624 <_lv_memset_00>
 8009762:	e6e2      	b.n	800952a <lv_draw_mask_line+0x8e>
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 8009764:	9b01      	ldr	r3, [sp, #4]
            k += 2;
 8009766:	3401      	adds	r4, #1
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 8009768:	2501      	movs	r5, #1
 800976a:	42a3      	cmp	r3, r4
 800976c:	da00      	bge.n	8009770 <lv_draw_mask_line+0x2d4>
 800976e:	e6b8      	b.n	80094e2 <lv_draw_mask_line+0x46>
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
 8009770:	2c00      	cmp	r4, #0
 8009772:	da00      	bge.n	8009776 <lv_draw_mask_line+0x2da>
 8009774:	e6d9      	b.n	800952a <lv_draw_mask_line+0x8e>
 8009776:	1b19      	subs	r1, r3, r4
 8009778:	9b02      	ldr	r3, [sp, #8]
 800977a:	1918      	adds	r0, r3, r4
 800977c:	e7ef      	b.n	800975e <lv_draw_mask_line+0x2c2>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 800977e:	4663      	mov	r3, ip
 8009780:	69ee      	ldr	r6, [r5, #28]
 8009782:	1a59      	subs	r1, r3, r1
 8009784:	434e      	muls	r6, r1
 8009786:	12b6      	asrs	r6, r6, #10
            if(k >= 0 && k < len) {
 8009788:	2c00      	cmp	r4, #0
 800978a:	db0f      	blt.n	80097ac <lv_draw_mask_line+0x310>
 800978c:	9b01      	ldr	r3, [sp, #4]
 800978e:	42a3      	cmp	r3, r4
 8009790:	dd0c      	ble.n	80097ac <lv_draw_mask_line+0x310>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 8009792:	4371      	muls	r1, r6
 8009794:	1249      	asrs	r1, r1, #9
 8009796:	b2c9      	uxtb	r1, r1
                if(p->inv) m = 255 - m;
 8009798:	2800      	cmp	r0, #0
 800979a:	d101      	bne.n	80097a0 <lv_draw_mask_line+0x304>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 800979c:	43c9      	mvns	r1, r1
 800979e:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 80097a0:	9b02      	ldr	r3, [sp, #8]
 80097a2:	191f      	adds	r7, r3, r4
 80097a4:	7838      	ldrb	r0, [r7, #0]
 80097a6:	f7ff fe6b 	bl	8009480 <mask_mix>
 80097aa:	7038      	strb	r0, [r7, #0]
            if(k >= 0 && k < len) {
 80097ac:	1c63      	adds	r3, r4, #1
 80097ae:	d416      	bmi.n	80097de <lv_draw_mask_line+0x342>
 80097b0:	9a01      	ldr	r2, [sp, #4]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	dd13      	ble.n	80097de <lv_draw_mask_line+0x342>
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 80097b6:	21ff      	movs	r1, #255	; 0xff
 80097b8:	1b8e      	subs	r6, r1, r6
 80097ba:	69a9      	ldr	r1, [r5, #24]
                if(p->inv) m = 255 - m;
 80097bc:	9a03      	ldr	r2, [sp, #12]
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 80097be:	4371      	muls	r1, r6
 80097c0:	1289      	asrs	r1, r1, #10
                m = ((255 - y_inters) * x_inters) >> 9;
 80097c2:	434e      	muls	r6, r1
                if(p->inv) m = 255 - m;
 80097c4:	7812      	ldrb	r2, [r2, #0]
                m = ((255 - y_inters) * x_inters) >> 9;
 80097c6:	1276      	asrs	r6, r6, #9
 80097c8:	b2f1      	uxtb	r1, r6
                if(p->inv) m = 255 - m;
 80097ca:	0792      	lsls	r2, r2, #30
 80097cc:	d501      	bpl.n	80097d2 <lv_draw_mask_line+0x336>
 80097ce:	43c9      	mvns	r1, r1
 80097d0:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 80097d2:	9a02      	ldr	r2, [sp, #8]
 80097d4:	18d5      	adds	r5, r2, r3
 80097d6:	7828      	ldrb	r0, [r5, #0]
 80097d8:	f7ff fe52 	bl	8009480 <mask_mix>
 80097dc:	7028      	strb	r0, [r5, #0]
            if(p->inv) {
 80097de:	2502      	movs	r5, #2
 80097e0:	9b03      	ldr	r3, [sp, #12]
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	422b      	tst	r3, r5
 80097e6:	d008      	beq.n	80097fa <lv_draw_mask_line+0x35e>
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
 80097e8:	9b01      	ldr	r3, [sp, #4]
 80097ea:	42a3      	cmp	r3, r4
 80097ec:	da00      	bge.n	80097f0 <lv_draw_mask_line+0x354>
 80097ee:	e695      	b.n	800951c <lv_draw_mask_line+0x80>
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
 80097f0:	2c00      	cmp	r4, #0
 80097f2:	da00      	bge.n	80097f6 <lv_draw_mask_line+0x35a>
 80097f4:	e699      	b.n	800952a <lv_draw_mask_line+0x8e>
 80097f6:	0021      	movs	r1, r4
 80097f8:	e72b      	b.n	8009652 <lv_draw_mask_line+0x1b6>
 80097fa:	9801      	ldr	r0, [sp, #4]
            k++;
 80097fc:	3402      	adds	r4, #2
 80097fe:	42a0      	cmp	r0, r4
 8009800:	dda4      	ble.n	800974c <lv_draw_mask_line+0x2b0>
 8009802:	0020      	movs	r0, r4
 8009804:	e7a2      	b.n	800974c <lv_draw_mask_line+0x2b0>
    k = xsi - abs_x;
 8009806:	0026      	movs	r6, r4
        if(k >= 0 && k < len) {
 8009808:	2e00      	cmp	r6, #0
 800980a:	db11      	blt.n	8009830 <lv_draw_mask_line+0x394>
 800980c:	9b01      	ldr	r3, [sp, #4]
 800980e:	42b3      	cmp	r3, r6
 8009810:	dd0e      	ble.n	8009830 <lv_draw_mask_line+0x394>
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
 8009812:	9b04      	ldr	r3, [sp, #16]
 8009814:	129a      	asrs	r2, r3, #10
    int32_t xef = xe & 0xFF;
 8009816:	b2d2      	uxtb	r2, r2
            m = (xsf + xef) >> 1;
 8009818:	1851      	adds	r1, r2, r1
 800981a:	0849      	lsrs	r1, r1, #1
            if(p->inv) m = 255 - m;
 800981c:	2800      	cmp	r0, #0
 800981e:	d001      	beq.n	8009824 <lv_draw_mask_line+0x388>
 8009820:	43c9      	mvns	r1, r1
 8009822:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 8009824:	9b02      	ldr	r3, [sp, #8]
 8009826:	199c      	adds	r4, r3, r6
 8009828:	7820      	ldrb	r0, [r4, #0]
 800982a:	f7ff fe29 	bl	8009480 <mask_mix>
 800982e:	7020      	strb	r0, [r4, #0]
        if(p->inv) {
 8009830:	3528      	adds	r5, #40	; 0x28
 8009832:	782b      	ldrb	r3, [r5, #0]
 8009834:	2502      	movs	r5, #2
 8009836:	422b      	tst	r3, r5
 8009838:	d083      	beq.n	8009742 <lv_draw_mask_line+0x2a6>
            k = xsi - abs_x;
 800983a:	9b05      	ldr	r3, [sp, #20]
 800983c:	1bd9      	subs	r1, r3, r7
            if(k >= len) {
 800983e:	9b01      	ldr	r3, [sp, #4]
 8009840:	428b      	cmp	r3, r1
 8009842:	dc00      	bgt.n	8009846 <lv_draw_mask_line+0x3aa>
 8009844:	e66a      	b.n	800951c <lv_draw_mask_line+0x80>
            if(k >= 0) _lv_memset_00(&mask_buf[0], k);
 8009846:	2900      	cmp	r1, #0
 8009848:	da00      	bge.n	800984c <lv_draw_mask_line+0x3b0>
 800984a:	e66e      	b.n	800952a <lv_draw_mask_line+0x8e>
 800984c:	e701      	b.n	8009652 <lv_draw_mask_line+0x1b6>
        xsf = 0xFF;
 800984e:	4661      	mov	r1, ip
 8009850:	e7da      	b.n	8009808 <lv_draw_mask_line+0x36c>

08009852 <_lv_memcpy_small.constprop.4>:
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
 8009852:	2300      	movs	r3, #0
        *d8 = *s8;
 8009854:	5cca      	ldrb	r2, [r1, r3]
 8009856:	54c2      	strb	r2, [r0, r3]
 8009858:	3301      	adds	r3, #1
    while(len) {
 800985a:	2b08      	cmp	r3, #8
 800985c:	d1fa      	bne.n	8009854 <_lv_memcpy_small.constprop.4+0x2>
        s8++;
        len--;
    }

    return dst;
}
 800985e:	4770      	bx	lr

08009860 <lv_draw_mask_radius>:
{
 8009860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009862:	b08f      	sub	sp, #60	; 0x3c
 8009864:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8009866:	000c      	movs	r4, r1
    lv_area_copy(&rect, &p->cfg.rect);
 8009868:	0031      	movs	r1, r6
{
 800986a:	9300      	str	r3, [sp, #0]
    bool outer = p->cfg.outer;
 800986c:	7cb3      	ldrb	r3, [r6, #18]
{
 800986e:	9001      	str	r0, [sp, #4]
    bool outer = p->cfg.outer;
 8009870:	07db      	lsls	r3, r3, #31
 8009872:	0fdb      	lsrs	r3, r3, #31
 8009874:	9303      	str	r3, [sp, #12]
{
 8009876:	0015      	movs	r5, r2
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
 8009878:	af0c      	add	r7, sp, #48	; 0x30
    int32_t radius = p->cfg.radius;
 800987a:	2210      	movs	r2, #16
 800987c:	5eb3      	ldrsh	r3, [r6, r2]
    lv_area_copy(&rect, &p->cfg.rect);
 800987e:	3108      	adds	r1, #8
 8009880:	0038      	movs	r0, r7
    int32_t radius = p->cfg.radius;
 8009882:	9302      	str	r3, [sp, #8]
 8009884:	f7ff ffe5 	bl	8009852 <_lv_memcpy_small.constprop.4>
 8009888:	2202      	movs	r2, #2
 800988a:	5ebb      	ldrsh	r3, [r7, r2]
    if(outer == false) {
 800988c:	9a03      	ldr	r2, [sp, #12]
 800988e:	2a00      	cmp	r2, #0
 8009890:	d13b      	bne.n	800990a <lv_draw_mask_radius+0xaa>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 8009892:	42ab      	cmp	r3, r5
 8009894:	dd01      	ble.n	800989a <lv_draw_mask_radius+0x3a>
                    return LV_DRAW_MASK_RES_TRANSP;
 8009896:	2000      	movs	r0, #0
 8009898:	e03a      	b.n	8009910 <lv_draw_mask_radius+0xb0>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 800989a:	2206      	movs	r2, #6
 800989c:	5ebb      	ldrsh	r3, [r7, r2]
 800989e:	42ab      	cmp	r3, r5
 80098a0:	dbf9      	blt.n	8009896 <lv_draw_mask_radius+0x36>
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 80098a2:	2300      	movs	r3, #0
 80098a4:	5efa      	ldrsh	r2, [r7, r3]
 80098a6:	9b02      	ldr	r3, [sp, #8]
 80098a8:	18d3      	adds	r3, r2, r3
 80098aa:	429c      	cmp	r4, r3
 80098ac:	db07      	blt.n	80098be <lv_draw_mask_radius+0x5e>
 80098ae:	9b00      	ldr	r3, [sp, #0]
 80098b0:	1919      	adds	r1, r3, r4
 80098b2:	2004      	movs	r0, #4
 80098b4:	5e3b      	ldrsh	r3, [r7, r0]
 80098b6:	9802      	ldr	r0, [sp, #8]
 80098b8:	1a1b      	subs	r3, r3, r0
 80098ba:	4299      	cmp	r1, r3
 80098bc:	dd0c      	ble.n	80098d8 <lv_draw_mask_radius+0x78>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 80098be:	a90c      	add	r1, sp, #48	; 0x30
 80098c0:	2002      	movs	r0, #2
 80098c2:	5e0b      	ldrsh	r3, [r1, r0]
 80098c4:	2706      	movs	r7, #6
 80098c6:	5fc8      	ldrsh	r0, [r1, r7]
 80098c8:	9f02      	ldr	r7, [sp, #8]
 80098ca:	19df      	adds	r7, r3, r7
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 80098cc:	42bd      	cmp	r5, r7
 80098ce:	db45      	blt.n	800995c <lv_draw_mask_radius+0xfc>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 80098d0:	9f02      	ldr	r7, [sp, #8]
 80098d2:	1bc7      	subs	r7, r0, r7
 80098d4:	42bd      	cmp	r5, r7
 80098d6:	dc41      	bgt.n	800995c <lv_draw_mask_radius+0xfc>
        if(outer == false) {
 80098d8:	9b03      	ldr	r3, [sp, #12]
 80098da:	1b16      	subs	r6, r2, r4
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d125      	bne.n	800992c <lv_draw_mask_radius+0xcc>
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
 80098e0:	9b00      	ldr	r3, [sp, #0]
 80098e2:	42b3      	cmp	r3, r6
 80098e4:	dbd7      	blt.n	8009896 <lv_draw_mask_radius+0x36>
            if(last >= 0) {
 80098e6:	2e00      	cmp	r6, #0
 80098e8:	db03      	blt.n	80098f2 <lv_draw_mask_radius+0x92>
                _lv_memset_00(&mask_buf[0], last);
 80098ea:	0031      	movs	r1, r6
 80098ec:	9801      	ldr	r0, [sp, #4]
 80098ee:	f002 fe99 	bl	800c624 <_lv_memset_00>
            int32_t first = rect.x2 - abs_x + 1;
 80098f2:	ab0c      	add	r3, sp, #48	; 0x30
 80098f4:	2004      	movs	r0, #4
 80098f6:	5e18      	ldrsh	r0, [r3, r0]
 80098f8:	1b00      	subs	r0, r0, r4
 80098fa:	3001      	adds	r0, #1
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
 80098fc:	2800      	cmp	r0, #0
 80098fe:	ddca      	ble.n	8009896 <lv_draw_mask_radius+0x36>
            else if(first < len) {
 8009900:	9b00      	ldr	r3, [sp, #0]
 8009902:	4298      	cmp	r0, r3
 8009904:	da0b      	bge.n	800991e <lv_draw_mask_radius+0xbe>
                    _lv_memset_00(&mask_buf[kr], len - kr);
 8009906:	1a19      	subs	r1, r3, r0
 8009908:	e023      	b.n	8009952 <lv_draw_mask_radius+0xf2>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 800990a:	42ab      	cmp	r3, r5
 800990c:	dd02      	ble.n	8009914 <lv_draw_mask_radius+0xb4>
            return LV_DRAW_MASK_RES_FULL_COVER;
 800990e:	2001      	movs	r0, #1
}
 8009910:	b00f      	add	sp, #60	; 0x3c
 8009912:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 8009914:	2206      	movs	r2, #6
 8009916:	5ebb      	ldrsh	r3, [r7, r2]
 8009918:	42ab      	cmp	r3, r5
 800991a:	dac2      	bge.n	80098a2 <lv_draw_mask_radius+0x42>
 800991c:	e7f7      	b.n	800990e <lv_draw_mask_radius+0xae>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
 800991e:	2e00      	cmp	r6, #0
 8009920:	d102      	bne.n	8009928 <lv_draw_mask_radius+0xc8>
 8009922:	9b00      	ldr	r3, [sp, #0]
 8009924:	4298      	cmp	r0, r3
 8009926:	d0f2      	beq.n	800990e <lv_draw_mask_radius+0xae>
    return LV_DRAW_MASK_RES_CHANGED;
 8009928:	2002      	movs	r0, #2
 800992a:	e7f1      	b.n	8009910 <lv_draw_mask_radius+0xb0>
 800992c:	43f0      	mvns	r0, r6
            if(first <= len) {
 800992e:	9b00      	ldr	r3, [sp, #0]
 8009930:	17c0      	asrs	r0, r0, #31
 8009932:	4030      	ands	r0, r6
 8009934:	4298      	cmp	r0, r3
 8009936:	dcf7      	bgt.n	8009928 <lv_draw_mask_radius+0xc8>
                int32_t last =  rect.x2 - abs_x - first + 1;
 8009938:	ab0c      	add	r3, sp, #48	; 0x30
 800993a:	2104      	movs	r1, #4
 800993c:	5e59      	ldrsh	r1, [r3, r1]
                if(first + last > len) last = len - first;
 800993e:	9a00      	ldr	r2, [sp, #0]
                int32_t last =  rect.x2 - abs_x - first + 1;
 8009940:	1b09      	subs	r1, r1, r4
 8009942:	1a09      	subs	r1, r1, r0
 8009944:	3101      	adds	r1, #1
                if(first + last > len) last = len - first;
 8009946:	180b      	adds	r3, r1, r0
 8009948:	4293      	cmp	r3, r2
 800994a:	dd00      	ble.n	800994e <lv_draw_mask_radius+0xee>
 800994c:	1a11      	subs	r1, r2, r0
                if(last >= 0) {
 800994e:	2900      	cmp	r1, #0
 8009950:	dbea      	blt.n	8009928 <lv_draw_mask_radius+0xc8>
                    _lv_memset_00(&mask_buf[kr], len - kr);
 8009952:	9b01      	ldr	r3, [sp, #4]
 8009954:	1818      	adds	r0, r3, r0
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
 8009956:	f002 fe65 	bl	800c624 <_lv_memset_00>
 800995a:	e7e5      	b.n	8009928 <lv_draw_mask_radius+0xc8>
    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
 800995c:	1b14      	subs	r4, r2, r4
 800995e:	9405      	str	r4, [sp, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009960:	888c      	ldrh	r4, [r1, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009962:	b29b      	uxth	r3, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009964:	3401      	adds	r4, #1
 8009966:	1aa4      	subs	r4, r4, r2
    int32_t w = lv_area_get_width(&rect);
 8009968:	b222      	sxth	r2, r4
 800996a:	9206      	str	r2, [sp, #24]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800996c:	3001      	adds	r0, #1
 800996e:	1ac0      	subs	r0, r0, r3
    abs_y -= rect.y1;
 8009970:	1aed      	subs	r5, r5, r3
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
 8009972:	2210      	movs	r2, #16
 8009974:	5eb3      	ldrsh	r3, [r6, r2]
    abs_y -= rect.y1;
 8009976:	b22d      	sxth	r5, r5
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
 8009978:	435b      	muls	r3, r3
 800997a:	9304      	str	r3, [sp, #16]
    if(abs_y < radius || abs_y > h - radius - 1) {
 800997c:	9b02      	ldr	r3, [sp, #8]
    int32_t h = lv_area_get_height(&rect);
 800997e:	b200      	sxth	r0, r0
    if(abs_y < radius || abs_y > h - radius - 1) {
 8009980:	42ab      	cmp	r3, r5
 8009982:	dd00      	ble.n	8009986 <lv_draw_mask_radius+0x126>
 8009984:	e1c5      	b.n	8009d12 <lv_draw_mask_radius+0x4b2>
 8009986:	1ac3      	subs	r3, r0, r3
 8009988:	429d      	cmp	r5, r3
 800998a:	dbcd      	blt.n	8009928 <lv_draw_mask_radius+0xc8>
        if(radius <= 256) sqrt_mask = 0x800;
 800998c:	2380      	movs	r3, #128	; 0x80
 800998e:	2780      	movs	r7, #128	; 0x80
 8009990:	9a02      	ldr	r2, [sp, #8]
 8009992:	005b      	lsls	r3, r3, #1
 8009994:	013f      	lsls	r7, r7, #4
 8009996:	429a      	cmp	r2, r3
 8009998:	dd01      	ble.n	800999e <lv_draw_mask_radius+0x13e>
        else sqrt_mask = 0x8000;
 800999a:	2780      	movs	r7, #128	; 0x80
 800999c:	023f      	lsls	r7, r7, #8
            y = radius - (h - abs_y) + 1;
 800999e:	9b02      	ldr	r3, [sp, #8]
 80099a0:	1b40      	subs	r0, r0, r5
 80099a2:	1a18      	subs	r0, r3, r0
            if((y - 1) == p->y_prev) {
 80099a4:	6973      	ldr	r3, [r6, #20]
            y = radius - (h - abs_y) + 1;
 80099a6:	1c45      	adds	r5, r0, #1
 80099a8:	a909      	add	r1, sp, #36	; 0x24
            if((y - 1) == p->y_prev) {
 80099aa:	4298      	cmp	r0, r3
 80099ac:	d000      	beq.n	80099b0 <lv_draw_mask_radius+0x150>
 80099ae:	e086      	b.n	8009abe <lv_draw_mask_radius+0x25e>
                x1.f = p->y_prev_x.f;
 80099b0:	8b73      	ldrh	r3, [r6, #26]
 80099b2:	804b      	strh	r3, [r1, #2]
                x1.i = p->y_prev_x.i;
 80099b4:	8b33      	ldrh	r3, [r6, #24]
 80099b6:	800b      	strh	r3, [r1, #0]
            _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
 80099b8:	0028      	movs	r0, r5
 80099ba:	4368      	muls	r0, r5
 80099bc:	9b04      	ldr	r3, [sp, #16]
 80099be:	003a      	movs	r2, r7
 80099c0:	1a18      	subs	r0, r3, r0
 80099c2:	a908      	add	r1, sp, #32
 80099c4:	f002 fbd0 	bl	800c168 <_lv_sqrt>
            p->y_prev = y;
 80099c8:	6175      	str	r5, [r6, #20]
            p->y_prev_x.f = x0.f;
 80099ca:	ab08      	add	r3, sp, #32
 80099cc:	885b      	ldrh	r3, [r3, #2]
 80099ce:	8373      	strh	r3, [r6, #26]
            p->y_prev_x.i = x0.i;
 80099d0:	ab08      	add	r3, sp, #32
 80099d2:	881b      	ldrh	r3, [r3, #0]
 80099d4:	e019      	b.n	8009a0a <lv_draw_mask_radius+0x1aa>
        else sqrt_mask = 0x8000;
 80099d6:	023f      	lsls	r7, r7, #8
            y = radius - abs_y;
 80099d8:	9b02      	ldr	r3, [sp, #8]
 80099da:	1b5d      	subs	r5, r3, r5
            if(y == p->y_prev) {
 80099dc:	6973      	ldr	r3, [r6, #20]
 80099de:	42ab      	cmp	r3, r5
 80099e0:	d164      	bne.n	8009aac <lv_draw_mask_radius+0x24c>
                x0.f = p->y_prev_x.f;
 80099e2:	8b73      	ldrh	r3, [r6, #26]
 80099e4:	aa08      	add	r2, sp, #32
 80099e6:	8053      	strh	r3, [r2, #2]
                x0.i = p->y_prev_x.i;
 80099e8:	8b33      	ldrh	r3, [r6, #24]
 80099ea:	8013      	strh	r3, [r2, #0]
            _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
 80099ec:	1e6c      	subs	r4, r5, #1
 80099ee:	0020      	movs	r0, r4
 80099f0:	4360      	muls	r0, r4
 80099f2:	9b04      	ldr	r3, [sp, #16]
 80099f4:	003a      	movs	r2, r7
 80099f6:	1a18      	subs	r0, r3, r0
 80099f8:	a909      	add	r1, sp, #36	; 0x24
 80099fa:	f002 fbb5 	bl	800c168 <_lv_sqrt>
            p->y_prev = y - 1;
 80099fe:	6174      	str	r4, [r6, #20]
            p->y_prev_x.f = x1.f;
 8009a00:	ab08      	add	r3, sp, #32
 8009a02:	88db      	ldrh	r3, [r3, #6]
 8009a04:	8373      	strh	r3, [r6, #26]
            p->y_prev_x.i = x1.i;
 8009a06:	ab08      	add	r3, sp, #32
 8009a08:	889b      	ldrh	r3, [r3, #4]
            p->y_prev_x.i = x0.i;
 8009a0a:	8333      	strh	r3, [r6, #24]
        if(x0.i == x1.i - 1 && x1.f == 0) {
 8009a0c:	ab08      	add	r3, sp, #32
 8009a0e:	881c      	ldrh	r4, [r3, #0]
 8009a10:	ab09      	add	r3, sp, #36	; 0x24
 8009a12:	881a      	ldrh	r2, [r3, #0]
 8009a14:	3a01      	subs	r2, #1
 8009a16:	4294      	cmp	r4, r2
 8009a18:	d105      	bne.n	8009a26 <lv_draw_mask_radius+0x1c6>
 8009a1a:	885a      	ldrh	r2, [r3, #2]
 8009a1c:	2a00      	cmp	r2, #0
 8009a1e:	d102      	bne.n	8009a26 <lv_draw_mask_radius+0x1c6>
            x1.f = 0xFF;
 8009a20:	32ff      	adds	r2, #255	; 0xff
            x1.i--;
 8009a22:	801c      	strh	r4, [r3, #0]
            x1.f = 0xFF;
 8009a24:	805a      	strh	r2, [r3, #2]
        if(x0.i == x1.i) {
 8009a26:	881a      	ldrh	r2, [r3, #0]
 8009a28:	42a2      	cmp	r2, r4
 8009a2a:	d162      	bne.n	8009af2 <lv_draw_mask_radius+0x292>
            lv_opa_t m = (x0.f + x1.f) >> 1;
 8009a2c:	aa08      	add	r2, sp, #32
 8009a2e:	885b      	ldrh	r3, [r3, #2]
 8009a30:	8856      	ldrh	r6, [r2, #2]
 8009a32:	18f6      	adds	r6, r6, r3
            if(outer) m = 255 - m;
 8009a34:	9b03      	ldr	r3, [sp, #12]
            lv_opa_t m = (x0.f + x1.f) >> 1;
 8009a36:	1076      	asrs	r6, r6, #1
 8009a38:	b2f6      	uxtb	r6, r6
            if(outer) m = 255 - m;
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d001      	beq.n	8009a42 <lv_draw_mask_radius+0x1e2>
 8009a3e:	43f6      	mvns	r6, r6
 8009a40:	b2f6      	uxtb	r6, r6
            int32_t ofs = radius - x0.i - 1;
 8009a42:	9b02      	ldr	r3, [sp, #8]
 8009a44:	1b1c      	subs	r4, r3, r4
            if(kl >= 0 && kl < len) {
 8009a46:	9b05      	ldr	r3, [sp, #20]
            int32_t ofs = radius - x0.i - 1;
 8009a48:	3c01      	subs	r4, #1
            if(kl >= 0 && kl < len) {
 8009a4a:	191d      	adds	r5, r3, r4
 8009a4c:	d409      	bmi.n	8009a62 <lv_draw_mask_radius+0x202>
 8009a4e:	9b00      	ldr	r3, [sp, #0]
 8009a50:	429d      	cmp	r5, r3
 8009a52:	da06      	bge.n	8009a62 <lv_draw_mask_radius+0x202>
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
 8009a54:	9b01      	ldr	r3, [sp, #4]
 8009a56:	0031      	movs	r1, r6
 8009a58:	195f      	adds	r7, r3, r5
 8009a5a:	7838      	ldrb	r0, [r7, #0]
 8009a5c:	f7ff fd10 	bl	8009480 <mask_mix>
 8009a60:	7038      	strb	r0, [r7, #0]
            int32_t kr = k + (w - ofs - 1);
 8009a62:	9b06      	ldr	r3, [sp, #24]
 8009a64:	1b1c      	subs	r4, r3, r4
            if(kr >= 0 && kr < len) {
 8009a66:	9b05      	ldr	r3, [sp, #20]
            int32_t kr = k + (w - ofs - 1);
 8009a68:	3c01      	subs	r4, #1
            if(kr >= 0 && kr < len) {
 8009a6a:	18e4      	adds	r4, r4, r3
 8009a6c:	d409      	bmi.n	8009a82 <lv_draw_mask_radius+0x222>
 8009a6e:	9b00      	ldr	r3, [sp, #0]
 8009a70:	429c      	cmp	r4, r3
 8009a72:	da06      	bge.n	8009a82 <lv_draw_mask_radius+0x222>
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
 8009a74:	9b01      	ldr	r3, [sp, #4]
 8009a76:	0031      	movs	r1, r6
 8009a78:	191f      	adds	r7, r3, r4
 8009a7a:	7838      	ldrb	r0, [r7, #0]
 8009a7c:	f7ff fd00 	bl	8009480 <mask_mix>
 8009a80:	7038      	strb	r0, [r7, #0]
            if(outer == false) {
 8009a82:	9b03      	ldr	r3, [sp, #12]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d121      	bne.n	8009acc <lv_draw_mask_radius+0x26c>
                if(kl > len)  {
 8009a88:	9b00      	ldr	r3, [sp, #0]
 8009a8a:	429d      	cmp	r5, r3
 8009a8c:	dd00      	ble.n	8009a90 <lv_draw_mask_radius+0x230>
 8009a8e:	e702      	b.n	8009896 <lv_draw_mask_radius+0x36>
                if(kl >= 0) {
 8009a90:	2d00      	cmp	r5, #0
 8009a92:	db03      	blt.n	8009a9c <lv_draw_mask_radius+0x23c>
                    _lv_memset_00(&mask_buf[0], kl);
 8009a94:	0029      	movs	r1, r5
 8009a96:	9801      	ldr	r0, [sp, #4]
 8009a98:	f002 fdc4 	bl	800c624 <_lv_memset_00>
                if(kr < 0) {
 8009a9c:	1c60      	adds	r0, r4, #1
 8009a9e:	d500      	bpl.n	8009aa2 <lv_draw_mask_radius+0x242>
 8009aa0:	e6f9      	b.n	8009896 <lv_draw_mask_radius+0x36>
                if(kr <= len) {
 8009aa2:	9b00      	ldr	r3, [sp, #0]
 8009aa4:	4298      	cmp	r0, r3
 8009aa6:	dd00      	ble.n	8009aaa <lv_draw_mask_radius+0x24a>
 8009aa8:	e73e      	b.n	8009928 <lv_draw_mask_radius+0xc8>
 8009aaa:	e72c      	b.n	8009906 <lv_draw_mask_radius+0xa6>
                _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
 8009aac:	0028      	movs	r0, r5
 8009aae:	4368      	muls	r0, r5
 8009ab0:	9b04      	ldr	r3, [sp, #16]
 8009ab2:	003a      	movs	r2, r7
 8009ab4:	1a18      	subs	r0, r3, r0
 8009ab6:	a908      	add	r1, sp, #32
 8009ab8:	f002 fb56 	bl	800c168 <_lv_sqrt>
 8009abc:	e796      	b.n	80099ec <lv_draw_mask_radius+0x18c>
                _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
 8009abe:	4340      	muls	r0, r0
 8009ac0:	9b04      	ldr	r3, [sp, #16]
 8009ac2:	003a      	movs	r2, r7
 8009ac4:	1a18      	subs	r0, r3, r0
 8009ac6:	f002 fb4f 	bl	800c168 <_lv_sqrt>
 8009aca:	e775      	b.n	80099b8 <lv_draw_mask_radius+0x158>
                kl++;
 8009acc:	3501      	adds	r5, #1
 8009ace:	43eb      	mvns	r3, r5
 8009ad0:	17db      	asrs	r3, r3, #31
 8009ad2:	401d      	ands	r5, r3
                if(len_tmp + first > len) len_tmp = len - first;
 8009ad4:	9b00      	ldr	r3, [sp, #0]
 8009ad6:	1b59      	subs	r1, r3, r5
 8009ad8:	429c      	cmp	r4, r3
 8009ada:	dc00      	bgt.n	8009ade <lv_draw_mask_radius+0x27e>
                int32_t len_tmp = kr - first;
 8009adc:	1b61      	subs	r1, r4, r5
                if(first < len && len_tmp >= 0) {
 8009ade:	9b00      	ldr	r3, [sp, #0]
 8009ae0:	429d      	cmp	r5, r3
 8009ae2:	db00      	blt.n	8009ae6 <lv_draw_mask_radius+0x286>
 8009ae4:	e720      	b.n	8009928 <lv_draw_mask_radius+0xc8>
 8009ae6:	2900      	cmp	r1, #0
 8009ae8:	da00      	bge.n	8009aec <lv_draw_mask_radius+0x28c>
 8009aea:	e71d      	b.n	8009928 <lv_draw_mask_radius+0xc8>
                    _lv_memset_00(&mask_buf[first], len_tmp);
 8009aec:	9b01      	ldr	r3, [sp, #4]
 8009aee:	1958      	adds	r0, r3, r5
 8009af0:	e731      	b.n	8009956 <lv_draw_mask_radius+0xf6>
            int32_t ofs = radius - (x0.i + 1);
 8009af2:	9b02      	ldr	r3, [sp, #8]
 8009af4:	3401      	adds	r4, #1
 8009af6:	1b1c      	subs	r4, r3, r4
            int32_t kl = k + ofs;
 8009af8:	9b05      	ldr	r3, [sp, #20]
 8009afa:	191b      	adds	r3, r3, r4
 8009afc:	9302      	str	r3, [sp, #8]
            int32_t kr = k + (w - ofs - 1);
 8009afe:	9b06      	ldr	r3, [sp, #24]
 8009b00:	1b1c      	subs	r4, r3, r4
 8009b02:	9b05      	ldr	r3, [sp, #20]
 8009b04:	3c01      	subs	r4, #1
 8009b06:	18e4      	adds	r4, r4, r3
            if(outer) {
 8009b08:	9b03      	ldr	r3, [sp, #12]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d012      	beq.n	8009b34 <lv_draw_mask_radius+0x2d4>
                int32_t first = kl + 1;
 8009b0e:	9b02      	ldr	r3, [sp, #8]
 8009b10:	1c58      	adds	r0, r3, #1
 8009b12:	43c3      	mvns	r3, r0
 8009b14:	17db      	asrs	r3, r3, #31
 8009b16:	4018      	ands	r0, r3
                if(len_tmp + first > len) len_tmp = len - first;
 8009b18:	9b00      	ldr	r3, [sp, #0]
 8009b1a:	1a19      	subs	r1, r3, r0
 8009b1c:	42a3      	cmp	r3, r4
 8009b1e:	db00      	blt.n	8009b22 <lv_draw_mask_radius+0x2c2>
                int32_t len_tmp = kr - first;
 8009b20:	1a21      	subs	r1, r4, r0
                if(first < len && len_tmp >= 0) {
 8009b22:	9b00      	ldr	r3, [sp, #0]
 8009b24:	4283      	cmp	r3, r0
 8009b26:	dd05      	ble.n	8009b34 <lv_draw_mask_radius+0x2d4>
 8009b28:	2900      	cmp	r1, #0
 8009b2a:	db03      	blt.n	8009b34 <lv_draw_mask_radius+0x2d4>
                    _lv_memset_00(&mask_buf[first], len_tmp);
 8009b2c:	9b01      	ldr	r3, [sp, #4]
 8009b2e:	1818      	adds	r0, r3, r0
 8009b30:	f002 fd78 	bl	800c624 <_lv_memset_00>
            uint32_t i = x0.i + 1;
 8009b34:	ab08      	add	r3, sp, #32
 8009b36:	8818      	ldrh	r0, [r3, #0]
            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
 8009b38:	ae0a      	add	r6, sp, #40	; 0x28
            uint32_t i = x0.i + 1;
 8009b3a:	1c43      	adds	r3, r0, #1
            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
 8009b3c:	4340      	muls	r0, r0
            uint32_t i = x0.i + 1;
 8009b3e:	9305      	str	r3, [sp, #20]
            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
 8009b40:	9b04      	ldr	r3, [sp, #16]
 8009b42:	003a      	movs	r2, r7
 8009b44:	1a18      	subs	r0, r3, r0
 8009b46:	0031      	movs	r1, r6
 8009b48:	f002 fb0e 	bl	800c168 <_lv_sqrt>
            if(y_prev.f == 0) {
 8009b4c:	8873      	ldrh	r3, [r6, #2]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d104      	bne.n	8009b5c <lv_draw_mask_radius+0x2fc>
                y_prev.i--;
 8009b52:	8833      	ldrh	r3, [r6, #0]
 8009b54:	3b01      	subs	r3, #1
 8009b56:	8033      	strh	r3, [r6, #0]
                y_prev.f = 0xFF;
 8009b58:	23ff      	movs	r3, #255	; 0xff
 8009b5a:	8073      	strh	r3, [r6, #2]
            if(y_prev.i >= y) {
 8009b5c:	ab0a      	add	r3, sp, #40	; 0x28
 8009b5e:	881b      	ldrh	r3, [r3, #0]
 8009b60:	42ab      	cmp	r3, r5
 8009b62:	db39      	blt.n	8009bd8 <lv_draw_mask_radius+0x378>
                _lv_sqrt(r2 - (i * i), &y_next, sqrt_mask);
 8009b64:	9805      	ldr	r0, [sp, #20]
 8009b66:	9b04      	ldr	r3, [sp, #16]
 8009b68:	4340      	muls	r0, r0
 8009b6a:	ad0b      	add	r5, sp, #44	; 0x2c
 8009b6c:	1a18      	subs	r0, r3, r0
 8009b6e:	003a      	movs	r2, r7
 8009b70:	0029      	movs	r1, r5
 8009b72:	f002 faf9 	bl	800c168 <_lv_sqrt>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
 8009b76:	ab08      	add	r3, sp, #32
 8009b78:	885a      	ldrh	r2, [r3, #2]
 8009b7a:	23ff      	movs	r3, #255	; 0xff
 8009b7c:	886e      	ldrh	r6, [r5, #2]
 8009b7e:	1a9a      	subs	r2, r3, r2
 8009b80:	1b9d      	subs	r5, r3, r6
 8009b82:	4355      	muls	r5, r2
                if(outer) m = 255 - m;
 8009b84:	9b03      	ldr	r3, [sp, #12]
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
 8009b86:	126d      	asrs	r5, r5, #9
 8009b88:	b2ed      	uxtb	r5, r5
                if(outer) m = 255 - m;
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d101      	bne.n	8009b92 <lv_draw_mask_radius+0x332>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
 8009b8e:	43ed      	mvns	r5, r5
 8009b90:	b2ed      	uxtb	r5, r5
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 8009b92:	9b02      	ldr	r3, [sp, #8]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	db0a      	blt.n	8009bae <lv_draw_mask_radius+0x34e>
 8009b98:	9b00      	ldr	r3, [sp, #0]
 8009b9a:	9a02      	ldr	r2, [sp, #8]
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	dd06      	ble.n	8009bae <lv_draw_mask_radius+0x34e>
 8009ba0:	9b01      	ldr	r3, [sp, #4]
 8009ba2:	0029      	movs	r1, r5
 8009ba4:	189f      	adds	r7, r3, r2
 8009ba6:	7838      	ldrb	r0, [r7, #0]
 8009ba8:	f7ff fc6a 	bl	8009480 <mask_mix>
 8009bac:	7038      	strb	r0, [r7, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 8009bae:	2c00      	cmp	r4, #0
 8009bb0:	db09      	blt.n	8009bc6 <lv_draw_mask_radius+0x366>
 8009bb2:	9b00      	ldr	r3, [sp, #0]
 8009bb4:	42a3      	cmp	r3, r4
 8009bb6:	dd06      	ble.n	8009bc6 <lv_draw_mask_radius+0x366>
 8009bb8:	9b01      	ldr	r3, [sp, #4]
 8009bba:	0029      	movs	r1, r5
 8009bbc:	191f      	adds	r7, r3, r4
 8009bbe:	7838      	ldrb	r0, [r7, #0]
 8009bc0:	f7ff fc5e 	bl	8009480 <mask_mix>
 8009bc4:	7038      	strb	r0, [r7, #0]
                kl--;
 8009bc6:	9b02      	ldr	r3, [sp, #8]
                kr++;
 8009bc8:	3401      	adds	r4, #1
                kl--;
 8009bca:	3b01      	subs	r3, #1
 8009bcc:	9302      	str	r3, [sp, #8]
                y_prev.f = y_next.f;
 8009bce:	ab0a      	add	r3, sp, #40	; 0x28
 8009bd0:	805e      	strh	r6, [r3, #2]
                i++;
 8009bd2:	9b05      	ldr	r3, [sp, #20]
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	9305      	str	r3, [sp, #20]
            for(; i <= x1.i; i++) {
 8009bd8:	ab09      	add	r3, sp, #36	; 0x24
 8009bda:	881b      	ldrh	r3, [r3, #0]
 8009bdc:	9306      	str	r3, [sp, #24]
 */
LV_ATTRIBUTE_FAST_MEM static inline void sqrt_approx(lv_sqrt_res_t * q, lv_sqrt_res_t * ref, uint32_t x)
{
    x = x << 8; /*Upscale for extra precision*/

    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
 8009bde:	ab0a      	add	r3, sp, #40	; 0x28
 8009be0:	881a      	ldrh	r2, [r3, #0]
 8009be2:	0112      	lsls	r2, r2, #4
 8009be4:	9207      	str	r2, [sp, #28]
 8009be6:	885d      	ldrh	r5, [r3, #2]
 8009be8:	9b05      	ldr	r3, [sp, #20]
 8009bea:	aa0b      	add	r2, sp, #44	; 0x2c
 8009bec:	1b1b      	subs	r3, r3, r4
 8009bee:	8856      	ldrh	r6, [r2, #2]
 8009bf0:	8817      	ldrh	r7, [r2, #0]
 8009bf2:	9305      	str	r3, [sp, #20]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	e03b      	b.n	8009c70 <lv_draw_mask_radius+0x410>
 8009bf8:	9a07      	ldr	r2, [sp, #28]
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
 8009bfa:	435b      	muls	r3, r3
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
 8009bfc:	092e      	lsrs	r6, r5, #4
 8009bfe:	18b6      	adds	r6, r6, r2
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
 8009c00:	9a04      	ldr	r2, [sp, #16]
    uint32_t raw2 = raw * raw;

    int32_t d = x - raw2;
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
 8009c02:	0071      	lsls	r1, r6, #1
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
 8009c04:	1ad0      	subs	r0, r2, r3
    uint32_t raw2 = raw * raw;
 8009c06:	0033      	movs	r3, r6
 8009c08:	4373      	muls	r3, r6
    x = x << 8; /*Upscale for extra precision*/
 8009c0a:	0200      	lsls	r0, r0, #8
    int32_t d = x - raw2;
 8009c0c:	1ac0      	subs	r0, r0, r3
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
 8009c0e:	f7f6 fb3b 	bl	8000288 <__divsi3>

    q->i = d >> 4;
    q->f = (d & 0xF) << 4;
 8009c12:	23ff      	movs	r3, #255	; 0xff
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
 8009c14:	1986      	adds	r6, r0, r6
    q->i = d >> 4;
 8009c16:	1137      	asrs	r7, r6, #4
    q->f = (d & 0xF) << 4;
 8009c18:	0136      	lsls	r6, r6, #4
 8009c1a:	401e      	ands	r6, r3
                m = (y_prev.f + y_next.f) >> 1;
 8009c1c:	19ad      	adds	r5, r5, r6
                if(outer) m = 255 - m;
 8009c1e:	9b03      	ldr	r3, [sp, #12]
                m = (y_prev.f + y_next.f) >> 1;
 8009c20:	106d      	asrs	r5, r5, #1
    q->i = d >> 4;
 8009c22:	b2bf      	uxth	r7, r7
                m = (y_prev.f + y_next.f) >> 1;
 8009c24:	b2ed      	uxtb	r5, r5
                if(outer) m = 255 - m;
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d001      	beq.n	8009c2e <lv_draw_mask_radius+0x3ce>
 8009c2a:	43ed      	mvns	r5, r5
 8009c2c:	b2ed      	uxtb	r5, r5
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 8009c2e:	9b02      	ldr	r3, [sp, #8]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	db0b      	blt.n	8009c4c <lv_draw_mask_radius+0x3ec>
 8009c34:	9b00      	ldr	r3, [sp, #0]
 8009c36:	9a02      	ldr	r2, [sp, #8]
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	dd07      	ble.n	8009c4c <lv_draw_mask_radius+0x3ec>
 8009c3c:	9b01      	ldr	r3, [sp, #4]
 8009c3e:	0029      	movs	r1, r5
 8009c40:	5c98      	ldrb	r0, [r3, r2]
 8009c42:	f7ff fc1d 	bl	8009480 <mask_mix>
 8009c46:	9b01      	ldr	r3, [sp, #4]
 8009c48:	9a02      	ldr	r2, [sp, #8]
 8009c4a:	5498      	strb	r0, [r3, r2]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 8009c4c:	2c00      	cmp	r4, #0
 8009c4e:	db09      	blt.n	8009c64 <lv_draw_mask_radius+0x404>
 8009c50:	9b00      	ldr	r3, [sp, #0]
 8009c52:	42a3      	cmp	r3, r4
 8009c54:	dd06      	ble.n	8009c64 <lv_draw_mask_radius+0x404>
 8009c56:	9b01      	ldr	r3, [sp, #4]
 8009c58:	0029      	movs	r1, r5
 8009c5a:	5d18      	ldrb	r0, [r3, r4]
 8009c5c:	f7ff fc10 	bl	8009480 <mask_mix>
 8009c60:	9b01      	ldr	r3, [sp, #4]
 8009c62:	5518      	strb	r0, [r3, r4]
 8009c64:	2201      	movs	r2, #1
                y_prev.f = y_next.f;
 8009c66:	0035      	movs	r5, r6
                kl--;
 8009c68:	9b02      	ldr	r3, [sp, #8]
                kr++;
 8009c6a:	3401      	adds	r4, #1
                kl--;
 8009c6c:	3b01      	subs	r3, #1
 8009c6e:	9302      	str	r3, [sp, #8]
 8009c70:	9b05      	ldr	r3, [sp, #20]
            for(; i <= x1.i; i++) {
 8009c72:	9906      	ldr	r1, [sp, #24]
 8009c74:	191b      	adds	r3, r3, r4
 8009c76:	4299      	cmp	r1, r3
 8009c78:	d2be      	bcs.n	8009bf8 <lv_draw_mask_radius+0x398>
 8009c7a:	ab0a      	add	r3, sp, #40	; 0x28
 8009c7c:	2a00      	cmp	r2, #0
 8009c7e:	d003      	beq.n	8009c88 <lv_draw_mask_radius+0x428>
 8009c80:	aa0b      	add	r2, sp, #44	; 0x2c
 8009c82:	805d      	strh	r5, [r3, #2]
 8009c84:	8017      	strh	r7, [r2, #0]
 8009c86:	8056      	strh	r6, [r2, #2]
            if(y_prev.f) {
 8009c88:	885d      	ldrh	r5, [r3, #2]
 8009c8a:	2d00      	cmp	r5, #0
 8009c8c:	d027      	beq.n	8009cde <lv_draw_mask_radius+0x47e>
                m = (y_prev.f * x1.f) >> 9;
 8009c8e:	ab09      	add	r3, sp, #36	; 0x24
 8009c90:	885b      	ldrh	r3, [r3, #2]
 8009c92:	435d      	muls	r5, r3
                if(outer) m = 255 - m;
 8009c94:	9b03      	ldr	r3, [sp, #12]
                m = (y_prev.f * x1.f) >> 9;
 8009c96:	126d      	asrs	r5, r5, #9
 8009c98:	b2ed      	uxtb	r5, r5
                if(outer) m = 255 - m;
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d001      	beq.n	8009ca2 <lv_draw_mask_radius+0x442>
 8009c9e:	43ed      	mvns	r5, r5
 8009ca0:	b2ed      	uxtb	r5, r5
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 8009ca2:	9b02      	ldr	r3, [sp, #8]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	db0a      	blt.n	8009cbe <lv_draw_mask_radius+0x45e>
 8009ca8:	9b00      	ldr	r3, [sp, #0]
 8009caa:	9a02      	ldr	r2, [sp, #8]
 8009cac:	4293      	cmp	r3, r2
 8009cae:	dd06      	ble.n	8009cbe <lv_draw_mask_radius+0x45e>
 8009cb0:	9b01      	ldr	r3, [sp, #4]
 8009cb2:	0029      	movs	r1, r5
 8009cb4:	189e      	adds	r6, r3, r2
 8009cb6:	7830      	ldrb	r0, [r6, #0]
 8009cb8:	f7ff fbe2 	bl	8009480 <mask_mix>
 8009cbc:	7030      	strb	r0, [r6, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 8009cbe:	2c00      	cmp	r4, #0
 8009cc0:	db09      	blt.n	8009cd6 <lv_draw_mask_radius+0x476>
 8009cc2:	9b00      	ldr	r3, [sp, #0]
 8009cc4:	42a3      	cmp	r3, r4
 8009cc6:	dd06      	ble.n	8009cd6 <lv_draw_mask_radius+0x476>
 8009cc8:	9b01      	ldr	r3, [sp, #4]
 8009cca:	0029      	movs	r1, r5
 8009ccc:	191e      	adds	r6, r3, r4
 8009cce:	7830      	ldrb	r0, [r6, #0]
 8009cd0:	f7ff fbd6 	bl	8009480 <mask_mix>
 8009cd4:	7030      	strb	r0, [r6, #0]
                kl--;
 8009cd6:	9b02      	ldr	r3, [sp, #8]
                kr++;
 8009cd8:	3401      	adds	r4, #1
                kl--;
 8009cda:	3b01      	subs	r3, #1
 8009cdc:	9302      	str	r3, [sp, #8]
            if(outer == 0) {
 8009cde:	9b03      	ldr	r3, [sp, #12]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d000      	beq.n	8009ce6 <lv_draw_mask_radius+0x486>
 8009ce4:	e620      	b.n	8009928 <lv_draw_mask_radius+0xc8>
                kl++;
 8009ce6:	9902      	ldr	r1, [sp, #8]
                if(kl > len) {
 8009ce8:	9b00      	ldr	r3, [sp, #0]
                kl++;
 8009cea:	3101      	adds	r1, #1
                if(kl > len) {
 8009cec:	428b      	cmp	r3, r1
 8009cee:	da00      	bge.n	8009cf2 <lv_draw_mask_radius+0x492>
 8009cf0:	e5d1      	b.n	8009896 <lv_draw_mask_radius+0x36>
                if(kl >= 0) _lv_memset_00(&mask_buf[0], kl);
 8009cf2:	2900      	cmp	r1, #0
 8009cf4:	db02      	blt.n	8009cfc <lv_draw_mask_radius+0x49c>
 8009cf6:	9801      	ldr	r0, [sp, #4]
 8009cf8:	f002 fc94 	bl	800c624 <_lv_memset_00>
                if(kr < 0) {
 8009cfc:	2c00      	cmp	r4, #0
 8009cfe:	da00      	bge.n	8009d02 <lv_draw_mask_radius+0x4a2>
 8009d00:	e5c9      	b.n	8009896 <lv_draw_mask_radius+0x36>
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
 8009d02:	9b00      	ldr	r3, [sp, #0]
 8009d04:	42a3      	cmp	r3, r4
 8009d06:	dc00      	bgt.n	8009d0a <lv_draw_mask_radius+0x4aa>
 8009d08:	e60e      	b.n	8009928 <lv_draw_mask_radius+0xc8>
 8009d0a:	1b19      	subs	r1, r3, r4
 8009d0c:	9b01      	ldr	r3, [sp, #4]
 8009d0e:	1918      	adds	r0, r3, r4
 8009d10:	e621      	b.n	8009956 <lv_draw_mask_radius+0xf6>
        if(radius <= 256) sqrt_mask = 0x800;
 8009d12:	2380      	movs	r3, #128	; 0x80
 8009d14:	9a02      	ldr	r2, [sp, #8]
 8009d16:	005b      	lsls	r3, r3, #1
 8009d18:	2780      	movs	r7, #128	; 0x80
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	dd00      	ble.n	8009d20 <lv_draw_mask_radius+0x4c0>
 8009d1e:	e65a      	b.n	80099d6 <lv_draw_mask_radius+0x176>
 8009d20:	013f      	lsls	r7, r7, #4
 8009d22:	e659      	b.n	80099d8 <lv_draw_mask_radius+0x178>

08009d24 <lv_draw_mask_add>:
{
 8009d24:	2300      	movs	r3, #0
 8009d26:	b5f0      	push	{r4, r5, r6, r7, lr}
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 8009d28:	4d08      	ldr	r5, [pc, #32]	; (8009d4c <lv_draw_mask_add+0x28>)
 8009d2a:	00de      	lsls	r6, r3, #3
 8009d2c:	1974      	adds	r4, r6, r5
 8009d2e:	6827      	ldr	r7, [r4, #0]
 8009d30:	b2da      	uxtb	r2, r3
 8009d32:	2f00      	cmp	r7, #0
 8009d34:	d005      	beq.n	8009d42 <lv_draw_mask_add+0x1e>
 8009d36:	3301      	adds	r3, #1
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8009d38:	2b10      	cmp	r3, #16
 8009d3a:	d1f6      	bne.n	8009d2a <lv_draw_mask_add+0x6>
        return LV_MASK_ID_INV;
 8009d3c:	2001      	movs	r0, #1
 8009d3e:	4240      	negs	r0, r0
}
 8009d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
 8009d42:	5170      	str	r0, [r6, r5]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
 8009d44:	6061      	str	r1, [r4, #4]
    return i;
 8009d46:	b210      	sxth	r0, r2
 8009d48:	e7fa      	b.n	8009d40 <lv_draw_mask_add+0x1c>
 8009d4a:	46c0      	nop			; (mov r8, r8)
 8009d4c:	200071d8 	.word	0x200071d8

08009d50 <lv_draw_mask_apply>:
{
 8009d50:	b5f0      	push	{r4, r5, r6, r7, lr}
    while(m->param) {
 8009d52:	2400      	movs	r4, #0
{
 8009d54:	001e      	movs	r6, r3
    bool changed = false;
 8009d56:	0025      	movs	r5, r4
{
 8009d58:	b087      	sub	sp, #28
 8009d5a:	9003      	str	r0, [sp, #12]
 8009d5c:	9104      	str	r1, [sp, #16]
 8009d5e:	9205      	str	r2, [sp, #20]
    while(m->param) {
 8009d60:	4b0a      	ldr	r3, [pc, #40]	; (8009d8c <lv_draw_mask_apply+0x3c>)
 8009d62:	591b      	ldr	r3, [r3, r4]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d102      	bne.n	8009d6e <lv_draw_mask_apply+0x1e>
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 8009d68:	1c68      	adds	r0, r5, #1
}
 8009d6a:	b007      	add	sp, #28
 8009d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
 8009d6e:	9300      	str	r3, [sp, #0]
 8009d70:	681f      	ldr	r7, [r3, #0]
 8009d72:	9a05      	ldr	r2, [sp, #20]
 8009d74:	0033      	movs	r3, r6
 8009d76:	9904      	ldr	r1, [sp, #16]
 8009d78:	9803      	ldr	r0, [sp, #12]
 8009d7a:	47b8      	blx	r7
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	d0f4      	beq.n	8009d6a <lv_draw_mask_apply+0x1a>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
 8009d80:	2802      	cmp	r0, #2
 8009d82:	d100      	bne.n	8009d86 <lv_draw_mask_apply+0x36>
 8009d84:	2501      	movs	r5, #1
 8009d86:	3408      	adds	r4, #8
 8009d88:	e7ea      	b.n	8009d60 <lv_draw_mask_apply+0x10>
 8009d8a:	46c0      	nop			; (mov r8, r8)
 8009d8c:	200071d8 	.word	0x200071d8

08009d90 <lv_draw_mask_remove_id>:
{
 8009d90:	0003      	movs	r3, r0
 8009d92:	2100      	movs	r1, #0
    void * p = NULL;
 8009d94:	0008      	movs	r0, r1
    if(id != LV_MASK_ID_INV) {
 8009d96:	1c5a      	adds	r2, r3, #1
 8009d98:	d005      	beq.n	8009da6 <lv_draw_mask_remove_id+0x16>
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
 8009d9a:	4a03      	ldr	r2, [pc, #12]	; (8009da8 <lv_draw_mask_remove_id+0x18>)
 8009d9c:	00db      	lsls	r3, r3, #3
 8009d9e:	5898      	ldr	r0, [r3, r2]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
 8009da0:	5099      	str	r1, [r3, r2]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
 8009da2:	18d3      	adds	r3, r2, r3
 8009da4:	6059      	str	r1, [r3, #4]
}
 8009da6:	4770      	bx	lr
 8009da8:	200071d8 	.word	0x200071d8

08009dac <lv_draw_mask_remove_custom>:
{
 8009dac:	2300      	movs	r3, #0
 8009dae:	b570      	push	{r4, r5, r6, lr}
    void * p = NULL;
 8009db0:	0019      	movs	r1, r3
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 8009db2:	001c      	movs	r4, r3
 8009db4:	4d06      	ldr	r5, [pc, #24]	; (8009dd0 <lv_draw_mask_remove_custom+0x24>)
 8009db6:	195a      	adds	r2, r3, r5
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 8009db8:	6856      	ldr	r6, [r2, #4]
 8009dba:	4286      	cmp	r6, r0
 8009dbc:	d102      	bne.n	8009dc4 <lv_draw_mask_remove_custom+0x18>
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 8009dbe:	6811      	ldr	r1, [r2, #0]
            LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = NULL;
 8009dc0:	6054      	str	r4, [r2, #4]
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 8009dc2:	6014      	str	r4, [r2, #0]
 8009dc4:	3308      	adds	r3, #8
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8009dc6:	2b80      	cmp	r3, #128	; 0x80
 8009dc8:	d1f5      	bne.n	8009db6 <lv_draw_mask_remove_custom+0xa>
}
 8009dca:	0008      	movs	r0, r1
 8009dcc:	bd70      	pop	{r4, r5, r6, pc}
 8009dce:	46c0      	nop			; (mov r8, r8)
 8009dd0:	200071d8 	.word	0x200071d8

08009dd4 <lv_draw_mask_get_cnt>:
{
 8009dd4:	2300      	movs	r3, #0
    uint8_t cnt = 0;
 8009dd6:	0018      	movs	r0, r3
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
 8009dd8:	4a05      	ldr	r2, [pc, #20]	; (8009df0 <lv_draw_mask_get_cnt+0x1c>)
 8009dda:	00d9      	lsls	r1, r3, #3
 8009ddc:	5851      	ldr	r1, [r2, r1]
 8009dde:	2900      	cmp	r1, #0
 8009de0:	d001      	beq.n	8009de6 <lv_draw_mask_get_cnt+0x12>
 8009de2:	3001      	adds	r0, #1
 8009de4:	b2c0      	uxtb	r0, r0
 8009de6:	3301      	adds	r3, #1
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8009de8:	2b10      	cmp	r3, #16
 8009dea:	d1f6      	bne.n	8009dda <lv_draw_mask_get_cnt+0x6>
}
 8009dec:	4770      	bx	lr
 8009dee:	46c0      	nop			; (mov r8, r8)
 8009df0:	200071d8 	.word	0x200071d8

08009df4 <lv_draw_mask_line_points_init>:
{
 8009df4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009df6:	001e      	movs	r6, r3
 8009df8:	ab08      	add	r3, sp, #32
 8009dfa:	2500      	movs	r5, #0
 8009dfc:	5f5d      	ldrsh	r5, [r3, r5]
 8009dfe:	ab09      	add	r3, sp, #36	; 0x24
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	9100      	str	r1, [sp, #0]
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 8009e04:	212c      	movs	r1, #44	; 0x2c
{
 8009e06:	0017      	movs	r7, r2
 8009e08:	0004      	movs	r4, r0
 8009e0a:	9301      	str	r3, [sp, #4]
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 8009e0c:	f002 fc0a 	bl	800c624 <_lv_memset_00>
    if(p1y > p2y) {
 8009e10:	42af      	cmp	r7, r5
 8009e12:	dc05      	bgt.n	8009e20 <lv_draw_mask_line_points_init+0x2c>
 8009e14:	002b      	movs	r3, r5
 8009e16:	003d      	movs	r5, r7
 8009e18:	001f      	movs	r7, r3
 8009e1a:	0033      	movs	r3, r6
 8009e1c:	9e00      	ldr	r6, [sp, #0]
 8009e1e:	9300      	str	r3, [sp, #0]
    param->cfg.side = side;
 8009e20:	2103      	movs	r1, #3
    param->cfg.p2.x = p2x;
 8009e22:	9b00      	ldr	r3, [sp, #0]
    param->cfg.side = side;
 8009e24:	9a01      	ldr	r2, [sp, #4]
    param->cfg.p2.x = p2x;
 8009e26:	81a3      	strh	r3, [r4, #12]
    param->cfg.side = side;
 8009e28:	7c23      	ldrb	r3, [r4, #16]
 8009e2a:	400a      	ands	r2, r1
 8009e2c:	438b      	bics	r3, r1
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	7423      	strb	r3, [r4, #16]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 8009e32:	9b00      	ldr	r3, [sp, #0]
    param->cfg.p1.x = p1x;
 8009e34:	8126      	strh	r6, [r4, #8]
    param->origo.x = p1x;
 8009e36:	8266      	strh	r6, [r4, #18]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 8009e38:	1b9e      	subs	r6, r3, r6
 8009e3a:	17f3      	asrs	r3, r6, #31
 8009e3c:	18f1      	adds	r1, r6, r3
    param->cfg.p1.y = p1y;
 8009e3e:	8165      	strh	r5, [r4, #10]
    param->origo.y = p1y;
 8009e40:	82a5      	strh	r5, [r4, #20]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 8009e42:	1b7d      	subs	r5, r7, r5
 8009e44:	4059      	eors	r1, r3
 8009e46:	17eb      	asrs	r3, r5, #31
 8009e48:	18ea      	adds	r2, r5, r3
 8009e4a:	405a      	eors	r2, r3
    param->cfg.p2.y = p2y;
 8009e4c:	81e7      	strh	r7, [r4, #14]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	4291      	cmp	r1, r2
 8009e52:	dc00      	bgt.n	8009e56 <lv_draw_mask_line_points_init+0x62>
 8009e54:	2300      	movs	r3, #0
 8009e56:	0027      	movs	r7, r4
 8009e58:	2201      	movs	r2, #1
 8009e5a:	0019      	movs	r1, r3
 8009e5c:	3728      	adds	r7, #40	; 0x28
 8009e5e:	783b      	ldrb	r3, [r7, #0]
 8009e60:	4011      	ands	r1, r2
 8009e62:	4393      	bics	r3, r2
 8009e64:	430b      	orrs	r3, r1
    param->yx_steep = 0;
 8009e66:	2100      	movs	r1, #0
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 8009e68:	4828      	ldr	r0, [pc, #160]	; (8009f0c <lv_draw_mask_line_points_init+0x118>)
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 8009e6a:	703b      	strb	r3, [r7, #0]
    param->yx_steep = 0;
 8009e6c:	61e1      	str	r1, [r4, #28]
    param->xy_steep = 0;
 8009e6e:	61a1      	str	r1, [r4, #24]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 8009e70:	6020      	str	r0, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
 8009e72:	7121      	strb	r1, [r4, #4]
    if(param->flat) {
 8009e74:	4213      	tst	r3, r2
 8009e76:	d023      	beq.n	8009ec0 <lv_draw_mask_line_points_init+0xcc>
        if(dx) {
 8009e78:	428e      	cmp	r6, r1
 8009e7a:	d007      	beq.n	8009e8c <lv_draw_mask_line_points_init+0x98>
            m = (1 << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
 8009e7c:	2080      	movs	r0, #128	; 0x80
 8009e7e:	0031      	movs	r1, r6
 8009e80:	0340      	lsls	r0, r0, #13
 8009e82:	f7f6 fa01 	bl	8000288 <__divsi3>
            param->yx_steep = (m * dy) >> 10;
 8009e86:	4368      	muls	r0, r5
 8009e88:	1280      	asrs	r0, r0, #10
 8009e8a:	61e0      	str	r0, [r4, #28]
        if(dy) {
 8009e8c:	2d00      	cmp	r5, #0
 8009e8e:	d007      	beq.n	8009ea0 <lv_draw_mask_line_points_init+0xac>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8009e90:	2080      	movs	r0, #128	; 0x80
 8009e92:	0029      	movs	r1, r5
 8009e94:	0340      	lsls	r0, r0, #13
 8009e96:	f7f6 f9f7 	bl	8000288 <__divsi3>
            param->xy_steep = (m * dx) >> 10;
 8009e9a:	4346      	muls	r6, r0
 8009e9c:	12b6      	asrs	r6, r6, #10
 8009e9e:	61a6      	str	r6, [r4, #24]
        param->steep = param->yx_steep;
 8009ea0:	69e3      	ldr	r3, [r4, #28]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 8009ea2:	2203      	movs	r2, #3
        param->steep = param->xy_steep;
 8009ea4:	6223      	str	r3, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 8009ea6:	7c23      	ldrb	r3, [r4, #16]
 8009ea8:	4013      	ands	r3, r2
 8009eaa:	6a22      	ldr	r2, [r4, #32]
 8009eac:	d11e      	bne.n	8009eec <lv_draw_mask_line_points_init+0xf8>
 8009eae:	2102      	movs	r1, #2
 8009eb0:	783b      	ldrb	r3, [r7, #0]
 8009eb2:	438b      	bics	r3, r1
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 8009eb4:	703b      	strb	r3, [r7, #0]
    param->spx = param->steep >> 2;
 8009eb6:	1093      	asrs	r3, r2, #2
    if(param->steep < 0) param->spx = -param->spx;
 8009eb8:	2a00      	cmp	r2, #0
 8009eba:	db25      	blt.n	8009f08 <lv_draw_mask_line_points_init+0x114>
 8009ebc:	6263      	str	r3, [r4, #36]	; 0x24
}
 8009ebe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        if(dy) {
 8009ec0:	2d00      	cmp	r5, #0
 8009ec2:	d007      	beq.n	8009ed4 <lv_draw_mask_line_points_init+0xe0>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8009ec4:	2080      	movs	r0, #128	; 0x80
 8009ec6:	0029      	movs	r1, r5
 8009ec8:	0340      	lsls	r0, r0, #13
 8009eca:	f7f6 f9dd 	bl	8000288 <__divsi3>
            param->xy_steep = (m * dx) >> 10;
 8009ece:	4370      	muls	r0, r6
 8009ed0:	1280      	asrs	r0, r0, #10
 8009ed2:	61a0      	str	r0, [r4, #24]
        if(dx) {
 8009ed4:	2e00      	cmp	r6, #0
 8009ed6:	d007      	beq.n	8009ee8 <lv_draw_mask_line_points_init+0xf4>
            m = (1 << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8009ed8:	2080      	movs	r0, #128	; 0x80
 8009eda:	0031      	movs	r1, r6
 8009edc:	0340      	lsls	r0, r0, #13
 8009ede:	f7f6 f9d3 	bl	8000288 <__divsi3>
            param->yx_steep = (m * dy) >> 10;
 8009ee2:	4345      	muls	r5, r0
 8009ee4:	12ad      	asrs	r5, r5, #10
 8009ee6:	61e5      	str	r5, [r4, #28]
        param->steep = param->xy_steep;
 8009ee8:	69a3      	ldr	r3, [r4, #24]
 8009eea:	e7da      	b.n	8009ea2 <lv_draw_mask_line_points_init+0xae>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d103      	bne.n	8009ef8 <lv_draw_mask_line_points_init+0x104>
 8009ef0:	2302      	movs	r3, #2
 8009ef2:	7839      	ldrb	r1, [r7, #0]
 8009ef4:	430b      	orrs	r3, r1
 8009ef6:	e7dd      	b.n	8009eb4 <lv_draw_mask_line_points_init+0xc0>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
 8009ef8:	2b02      	cmp	r3, #2
 8009efa:	d102      	bne.n	8009f02 <lv_draw_mask_line_points_init+0x10e>
        if(param->steep > 0) param->inv = 1;
 8009efc:	2a00      	cmp	r2, #0
 8009efe:	dcf7      	bgt.n	8009ef0 <lv_draw_mask_line_points_init+0xfc>
 8009f00:	e7d5      	b.n	8009eae <lv_draw_mask_line_points_init+0xba>
        if(param->steep > 0) param->inv = 0;
 8009f02:	2a00      	cmp	r2, #0
 8009f04:	dcd3      	bgt.n	8009eae <lv_draw_mask_line_points_init+0xba>
 8009f06:	e7f3      	b.n	8009ef0 <lv_draw_mask_line_points_init+0xfc>
    if(param->steep < 0) param->spx = -param->spx;
 8009f08:	425b      	negs	r3, r3
 8009f0a:	e7d7      	b.n	8009ebc <lv_draw_mask_line_points_init+0xc8>
 8009f0c:	0800949d 	.word	0x0800949d

08009f10 <lv_draw_mask_radius_init>:
{
 8009f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f12:	001d      	movs	r5, r3
 8009f14:	88cb      	ldrh	r3, [r1, #6]
 8009f16:	0016      	movs	r6, r2
 8009f18:	884a      	ldrh	r2, [r1, #2]
 8009f1a:	0004      	movs	r4, r0
 8009f1c:	3301      	adds	r3, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009f1e:	8888      	ldrh	r0, [r1, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009f20:	1a9b      	subs	r3, r3, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009f22:	880a      	ldrh	r2, [r1, #0]
 8009f24:	3001      	adds	r0, #1
 8009f26:	1a80      	subs	r0, r0, r2
    int32_t short_side = LV_MATH_MIN(w, h);
 8009f28:	b207      	sxth	r7, r0
 8009f2a:	1c1a      	adds	r2, r3, #0
 8009f2c:	b21b      	sxth	r3, r3
 8009f2e:	42bb      	cmp	r3, r7
 8009f30:	dd00      	ble.n	8009f34 <lv_draw_mask_radius_init+0x24>
 8009f32:	1c02      	adds	r2, r0, #0
 8009f34:	b213      	sxth	r3, r2
    if(radius > short_side >> 1) radius = short_side >> 1;
 8009f36:	105b      	asrs	r3, r3, #1
 8009f38:	429e      	cmp	r6, r3
 8009f3a:	dd00      	ble.n	8009f3e <lv_draw_mask_radius_init+0x2e>
 8009f3c:	b21e      	sxth	r6, r3
    lv_area_copy(&param->cfg.rect, rect);
 8009f3e:	0020      	movs	r0, r4
 8009f40:	3008      	adds	r0, #8
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
 8009f42:	f7ff fc86 	bl	8009852 <_lv_memcpy_small.constprop.4>
    param->cfg.outer = inv ? 1 : 0;
 8009f46:	2201      	movs	r2, #1
 8009f48:	002b      	movs	r3, r5
 8009f4a:	7ca5      	ldrb	r5, [r4, #18]
 8009f4c:	4013      	ands	r3, r2
 8009f4e:	4395      	bics	r5, r2
 8009f50:	431d      	orrs	r5, r3
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
 8009f52:	4b06      	ldr	r3, [pc, #24]	; (8009f6c <lv_draw_mask_radius_init+0x5c>)
    param->cfg.radius = radius;
 8009f54:	8226      	strh	r6, [r4, #16]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
 8009f56:	6023      	str	r3, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 8009f58:	2302      	movs	r3, #2
 8009f5a:	7123      	strb	r3, [r4, #4]
    param->y_prev = INT32_MIN;
 8009f5c:	2380      	movs	r3, #128	; 0x80
 8009f5e:	061b      	lsls	r3, r3, #24
 8009f60:	6163      	str	r3, [r4, #20]
 8009f62:	2300      	movs	r3, #0
    param->cfg.outer = inv ? 1 : 0;
 8009f64:	74a5      	strb	r5, [r4, #18]
    param->y_prev = INT32_MIN;
 8009f66:	61a3      	str	r3, [r4, #24]
}
 8009f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f6a:	46c0      	nop			; (mov r8, r8)
 8009f6c:	08009861 	.word	0x08009861

08009f70 <grad_get>:
        _lv_mem_buf_release(mask_buf);
    }
}

LV_ATTRIBUTE_FAST_MEM static inline lv_color_t grad_get(const lv_draw_rect_dsc_t * dsc, lv_coord_t s, lv_coord_t i)
{
 8009f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f72:	0004      	movs	r4, r0
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
 8009f74:	2308      	movs	r3, #8
 8009f76:	5ec6      	ldrsh	r6, [r0, r3]
 8009f78:	0008      	movs	r0, r1
 8009f7a:	4370      	muls	r0, r6
 8009f7c:	1200      	asrs	r0, r0, #8
    if(i <= min) return dsc->bg_color;
 8009f7e:	4282      	cmp	r2, r0
 8009f80:	dc01      	bgt.n	8009f86 <grad_get+0x16>
 8009f82:	8860      	ldrh	r0, [r4, #2]
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
    d = (s * d) >> 8;
    i -= min;
    lv_opa_t mix = (i * 255) / d;
    return lv_color_mix(dsc->bg_grad_color, dsc->bg_color, mix);
}
 8009f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
 8009f86:	250a      	movs	r5, #10
 8009f88:	5f63      	ldrsh	r3, [r4, r5]
 8009f8a:	001d      	movs	r5, r3
 8009f8c:	434d      	muls	r5, r1
 8009f8e:	122d      	asrs	r5, r5, #8
    if(i >= max) return dsc->bg_grad_color;
 8009f90:	42aa      	cmp	r2, r5
 8009f92:	db01      	blt.n	8009f98 <grad_get+0x28>
 8009f94:	88a0      	ldrh	r0, [r4, #4]
 8009f96:	e7f5      	b.n	8009f84 <grad_get+0x14>
    lv_opa_t mix = (i * 255) / d;
 8009f98:	25ff      	movs	r5, #255	; 0xff
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
 8009f9a:	1b9b      	subs	r3, r3, r6
    d = (s * d) >> 8;
 8009f9c:	4359      	muls	r1, r3
    i -= min;
 8009f9e:	1a10      	subs	r0, r2, r0
    lv_opa_t mix = (i * 255) / d;
 8009fa0:	b200      	sxth	r0, r0
 8009fa2:	4368      	muls	r0, r5
    d = (s * d) >> 8;
 8009fa4:	1209      	asrs	r1, r1, #8
    lv_opa_t mix = (i * 255) / d;
 8009fa6:	f7f6 f96f 	bl	8000288 <__divsi3>
 8009faa:	0001      	movs	r1, r0
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009fac:	88a6      	ldrh	r6, [r4, #4]
 8009fae:	8867      	ldrh	r7, [r4, #2]
 8009fb0:	4029      	ands	r1, r5
 8009fb2:	0576      	lsls	r6, r6, #21
 8009fb4:	057f      	lsls	r7, r7, #21
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009fb6:	1a6a      	subs	r2, r5, r1
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009fb8:	0eb6      	lsrs	r6, r6, #26
 8009fba:	0ebf      	lsrs	r7, r7, #26
 8009fbc:	4357      	muls	r7, r2
 8009fbe:	434e      	muls	r6, r1
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009fc0:	7963      	ldrb	r3, [r4, #5]
 8009fc2:	78e0      	ldrb	r0, [r4, #3]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009fc4:	19f6      	adds	r6, r6, r7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009fc6:	7927      	ldrb	r7, [r4, #4]
 8009fc8:	78a4      	ldrb	r4, [r4, #2]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009fca:	08db      	lsrs	r3, r3, #3
 8009fcc:	08c0      	lsrs	r0, r0, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009fce:	06ff      	lsls	r7, r7, #27
 8009fd0:	06e4      	lsls	r4, r4, #27
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009fd2:	4350      	muls	r0, r2
 8009fd4:	434b      	muls	r3, r1
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009fd6:	0eff      	lsrs	r7, r7, #27
 8009fd8:	0ee4      	lsrs	r4, r4, #27
 8009fda:	4379      	muls	r1, r7
 8009fdc:	4362      	muls	r2, r4
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009fde:	181b      	adds	r3, r3, r0
 8009fe0:	4809      	ldr	r0, [pc, #36]	; (800a008 <grad_get+0x98>)
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009fe2:	3680      	adds	r6, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009fe4:	188a      	adds	r2, r1, r2
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009fe6:	4346      	muls	r6, r0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009fe8:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009fea:	3280      	adds	r2, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009fec:	4343      	muls	r3, r0
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009fee:	4350      	muls	r0, r2
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009ff0:	00f6      	lsls	r6, r6, #3
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009ff2:	3de0      	subs	r5, #224	; 0xe0
 8009ff4:	0ddb      	lsrs	r3, r3, #23
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009ff6:	0dc0      	lsrs	r0, r0, #23
 8009ff8:	0eb6      	lsrs	r6, r6, #26
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009ffa:	402b      	ands	r3, r5
 8009ffc:	0176      	lsls	r6, r6, #5
 8009ffe:	4028      	ands	r0, r5
 800a000:	02db      	lsls	r3, r3, #11
 800a002:	4330      	orrs	r0, r6
 800a004:	4318      	orrs	r0, r3
 800a006:	e7bd      	b.n	8009f84 <grad_get+0x14>
 800a008:	00008081 	.word	0x00008081

0800a00c <lv_draw_rect_dsc_init>:
{
 800a00c:	b510      	push	{r4, lr}
 800a00e:	0004      	movs	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 800a010:	2154      	movs	r1, #84	; 0x54
 800a012:	f002 fb07 	bl	800c624 <_lv_memset_00>
    dsc->bg_color = LV_COLOR_WHITE;
 800a016:	4b0f      	ldr	r3, [pc, #60]	; (800a054 <lv_draw_rect_dsc_init+0x48>)
    dsc->bg_grad_color = LV_COLOR_BLACK;
 800a018:	2200      	movs	r2, #0
    dsc->bg_color = LV_COLOR_WHITE;
 800a01a:	881b      	ldrh	r3, [r3, #0]
    dsc->bg_grad_color = LV_COLOR_BLACK;
 800a01c:	80a2      	strh	r2, [r4, #4]
    dsc->bg_color = LV_COLOR_WHITE;
 800a01e:	8063      	strh	r3, [r4, #2]
    dsc->value_color = LV_COLOR_BLACK;
 800a020:	0023      	movs	r3, r4
 800a022:	3308      	adds	r3, #8
    dsc->border_color = LV_COLOR_BLACK;
 800a024:	81e2      	strh	r2, [r4, #14]
    dsc->value_color = LV_COLOR_BLACK;
 800a026:	87da      	strh	r2, [r3, #62]	; 0x3e
    dsc->shadow_color = LV_COLOR_BLACK;
 800a028:	8422      	strh	r2, [r4, #32]
    dsc->pattern_recolor = LV_COLOR_BLACK;
 800a02a:	86a2      	strh	r2, [r4, #52]	; 0x34
 800a02c:	0022      	movs	r2, r4
    dsc->bg_grad_color_stop = 0xFF;
 800a02e:	23ff      	movs	r3, #255	; 0xff
    dsc->value_opa = LV_OPA_COVER;
 800a030:	0021      	movs	r1, r4
    dsc->pattern_recolor = LV_COLOR_BLACK;
 800a032:	3236      	adds	r2, #54	; 0x36
    dsc->bg_grad_color_stop = 0xFF;
 800a034:	8163      	strh	r3, [r4, #10]
    dsc->bg_opa = LV_OPA_COVER;
 800a036:	7323      	strb	r3, [r4, #12]
    dsc->outline_opa = LV_OPA_COVER;
 800a038:	77a3      	strb	r3, [r4, #30]
    dsc->border_opa = LV_OPA_COVER;
 800a03a:	7523      	strb	r3, [r4, #20]
    dsc->pattern_recolor = LV_COLOR_BLACK;
 800a03c:	7013      	strb	r3, [r2, #0]
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
 800a03e:	4a06      	ldr	r2, [pc, #24]	; (800a058 <lv_draw_rect_dsc_init+0x4c>)
    dsc->value_opa = LV_OPA_COVER;
 800a040:	3144      	adds	r1, #68	; 0x44
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
 800a042:	6322      	str	r2, [r4, #48]	; 0x30
    dsc->value_opa = LV_OPA_COVER;
 800a044:	700b      	strb	r3, [r1, #0]
    dsc->value_font = LV_THEME_DEFAULT_FONT_NORMAL;
 800a046:	6422      	str	r2, [r4, #64]	; 0x40
    dsc->shadow_opa = LV_OPA_COVER;
 800a048:	0022      	movs	r2, r4
 800a04a:	322a      	adds	r2, #42	; 0x2a
 800a04c:	7013      	strb	r3, [r2, #0]
    dsc->border_side = LV_BORDER_SIDE_FULL;
 800a04e:	3bf0      	subs	r3, #240	; 0xf0
 800a050:	8263      	strh	r3, [r4, #18]
}
 800a052:	bd10      	pop	{r4, pc}
 800a054:	0800f024 	.word	0x0800f024
 800a058:	20000028 	.word	0x20000028

0800a05c <lv_draw_rect>:
{
 800a05c:	b5f0      	push	{r4, r5, r6, r7, lr}
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800a05e:	88c3      	ldrh	r3, [r0, #6]
 800a060:	0016      	movs	r6, r2
 800a062:	8842      	ldrh	r2, [r0, #2]
 800a064:	3301      	adds	r3, #1
 800a066:	1a9b      	subs	r3, r3, r2
 800a068:	b0ad      	sub	sp, #180	; 0xb4
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800a06a:	b21b      	sxth	r3, r3
{
 800a06c:	0007      	movs	r7, r0
 800a06e:	9104      	str	r1, [sp, #16]
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800a070:	2b00      	cmp	r3, #0
 800a072:	dc00      	bgt.n	800a076 <lv_draw_rect+0x1a>
 800a074:	e1fe      	b.n	800a474 <lv_draw_rect+0x418>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a076:	8883      	ldrh	r3, [r0, #4]
 800a078:	8802      	ldrh	r2, [r0, #0]
 800a07a:	3301      	adds	r3, #1
 800a07c:	1a9b      	subs	r3, r3, r2
 800a07e:	b21b      	sxth	r3, r3
 800a080:	2b00      	cmp	r3, #0
 800a082:	dc00      	bgt.n	800a086 <lv_draw_rect+0x2a>
 800a084:	e1f6      	b.n	800a474 <lv_draw_rect+0x418>
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 800a086:	7b33      	ldrb	r3, [r6, #12]
 800a088:	9305      	str	r3, [sp, #20]
 800a08a:	2b02      	cmp	r3, #2
 800a08c:	d800      	bhi.n	800a090 <lv_draw_rect+0x34>
 800a08e:	e09e      	b.n	800a1ce <lv_draw_rect+0x172>
 800a090:	2300      	movs	r3, #0
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
 800a092:	aa18      	add	r2, sp, #96	; 0x60
 800a094:	5cf9      	ldrb	r1, [r7, r3]
 800a096:	5499      	strb	r1, [r3, r2]
 800a098:	3301      	adds	r3, #1
    while(len) {
 800a09a:	2b08      	cmp	r3, #8
 800a09c:	d1fa      	bne.n	800a094 <lv_draw_rect+0x38>
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
 800a09e:	2110      	movs	r1, #16
 800a0a0:	5e73      	ldrsh	r3, [r6, r1]
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	dd1b      	ble.n	800a0de <lv_draw_rect+0x82>
 800a0a6:	7d33      	ldrb	r3, [r6, #20]
 800a0a8:	2bfc      	cmp	r3, #252	; 0xfc
 800a0aa:	d918      	bls.n	800a0de <lv_draw_rect+0x82>
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	5e73      	ldrsh	r3, [r6, r1]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d014      	beq.n	800a0de <lv_draw_rect+0x82>
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 800a0b4:	2001      	movs	r0, #1
 800a0b6:	8a73      	ldrh	r3, [r6, #18]
 800a0b8:	8814      	ldrh	r4, [r2, #0]
 800a0ba:	1099      	asrs	r1, r3, #2
 800a0bc:	4001      	ands	r1, r0
 800a0be:	1909      	adds	r1, r1, r4
 800a0c0:	8011      	strh	r1, [r2, #0]
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 800a0c2:	8854      	ldrh	r4, [r2, #2]
 800a0c4:	1059      	asrs	r1, r3, #1
 800a0c6:	4001      	ands	r1, r0
 800a0c8:	1909      	adds	r1, r1, r4
 800a0ca:	8051      	strh	r1, [r2, #2]
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 800a0cc:	10dc      	asrs	r4, r3, #3
 800a0ce:	8891      	ldrh	r1, [r2, #4]
 800a0d0:	4004      	ands	r4, r0
 800a0d2:	1b09      	subs	r1, r1, r4
 800a0d4:	8091      	strh	r1, [r2, #4]
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 800a0d6:	88d1      	ldrh	r1, [r2, #6]
 800a0d8:	4003      	ands	r3, r0
 800a0da:	1acb      	subs	r3, r1, r3
 800a0dc:	80d3      	strh	r3, [r2, #6]
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800a0de:	9b05      	ldr	r3, [sp, #20]
 800a0e0:	2bfd      	cmp	r3, #253	; 0xfd
 800a0e2:	d901      	bls.n	800a0e8 <lv_draw_rect+0x8c>
 800a0e4:	23ff      	movs	r3, #255	; 0xff
 800a0e6:	9305      	str	r3, [sp, #20]
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 800a0e8:	f7fc f80e 	bl	8006108 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800a0ec:	f001 fb66 	bl	800b7bc <lv_disp_get_buf>
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
 800a0f0:	ac1a      	add	r4, sp, #104	; 0x68
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800a0f2:	9009      	str	r0, [sp, #36]	; 0x24
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
 800a0f4:	9a04      	ldr	r2, [sp, #16]
 800a0f6:	a918      	add	r1, sp, #96	; 0x60
 800a0f8:	0020      	movs	r0, r4
 800a0fa:	f001 fc52 	bl	800b9a2 <_lv_area_intersect>
    if(is_common == false) return;
 800a0fe:	2800      	cmp	r0, #0
 800a100:	d065      	beq.n	800a1ce <lv_draw_rect+0x172>
    draw_area.x1 -= disp_area->x1;
 800a102:	9b09      	ldr	r3, [sp, #36]	; 0x24
    draw_area.y1 -= disp_area->y1;
 800a104:	8860      	ldrh	r0, [r4, #2]
    draw_area.x1 -= disp_area->x1;
 800a106:	8a1d      	ldrh	r5, [r3, #16]
 800a108:	8823      	ldrh	r3, [r4, #0]
 800a10a:	1b5b      	subs	r3, r3, r5
 800a10c:	b29a      	uxth	r2, r3
    draw_area.y1 -= disp_area->y1;
 800a10e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    draw_area.x1 -= disp_area->x1;
 800a110:	8022      	strh	r2, [r4, #0]
    draw_area.y1 -= disp_area->y1;
 800a112:	8a59      	ldrh	r1, [r3, #18]
    draw_area.x2 -= disp_area->x1;
 800a114:	88a3      	ldrh	r3, [r4, #4]
    draw_area.y1 -= disp_area->y1;
 800a116:	1a40      	subs	r0, r0, r1
    draw_area.x2 -= disp_area->x1;
 800a118:	1b5b      	subs	r3, r3, r5
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	80a3      	strh	r3, [r4, #4]
 800a11e:	3301      	adds	r3, #1
 800a120:	1a9b      	subs	r3, r3, r2
    draw_area.y1 -= disp_area->y1;
 800a122:	8060      	strh	r0, [r4, #2]
    draw_area.y2 -= disp_area->y1;
 800a124:	88e0      	ldrh	r0, [r4, #6]
 800a126:	b21b      	sxth	r3, r3
 800a128:	1a41      	subs	r1, r0, r1
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800a12a:	0018      	movs	r0, r3
 800a12c:	930d      	str	r3, [sp, #52]	; 0x34
    draw_area.y2 -= disp_area->y1;
 800a12e:	80e1      	strh	r1, [r4, #6]
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800a130:	f002 f9f0 	bl	800c514 <_lv_mem_buf_get>
 800a134:	9008      	str	r0, [sp, #32]
    lv_grad_dir_t grad_dir = dsc->bg_grad_dir;
 800a136:	79b3      	ldrb	r3, [r6, #6]
 800a138:	9306      	str	r3, [sp, #24]
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
 800a13a:	8872      	ldrh	r2, [r6, #2]
 800a13c:	88b3      	ldrh	r3, [r6, #4]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d101      	bne.n	800a146 <lv_draw_rect+0xea>
 800a142:	2300      	movs	r3, #0
 800a144:	9306      	str	r3, [sp, #24]
    uint16_t other_mask_cnt = lv_draw_mask_get_cnt();
 800a146:	f7ff fe45 	bl	8009dd4 <lv_draw_mask_get_cnt>
 800a14a:	b283      	uxth	r3, r0
 800a14c:	9310      	str	r3, [sp, #64]	; 0x40
    if(other_mask_cnt) simple_mode = false;
 800a14e:	2300      	movs	r3, #0
 800a150:	930e      	str	r3, [sp, #56]	; 0x38
 800a152:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a154:	2b00      	cmp	r3, #0
 800a156:	d105      	bne.n	800a164 <lv_draw_rect+0x108>
    else if(grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
 800a158:	9b06      	ldr	r3, [sp, #24]
 800a15a:	3b02      	subs	r3, #2
 800a15c:	1e5a      	subs	r2, r3, #1
 800a15e:	4193      	sbcs	r3, r2
 800a160:	b2db      	uxtb	r3, r3
 800a162:	930e      	str	r3, [sp, #56]	; 0x38
    int32_t coords_w = lv_area_get_width(&coords_bg);
 800a164:	a918      	add	r1, sp, #96	; 0x60
 800a166:	888c      	ldrh	r4, [r1, #4]
 800a168:	880b      	ldrh	r3, [r1, #0]
 800a16a:	3401      	adds	r4, #1
 800a16c:	1ae4      	subs	r4, r4, r3
    int32_t rout = dsc->radius;
 800a16e:	2300      	movs	r3, #0
 800a170:	5ef2      	ldrsh	r2, [r6, r3]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800a172:	88cb      	ldrh	r3, [r1, #6]
 800a174:	8848      	ldrh	r0, [r1, #2]
 800a176:	3301      	adds	r3, #1
 800a178:	1a1b      	subs	r3, r3, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a17a:	b224      	sxth	r4, r4
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
 800a17c:	b21b      	sxth	r3, r3
 800a17e:	42a3      	cmp	r3, r4
 800a180:	dd00      	ble.n	800a184 <lv_draw_rect+0x128>
 800a182:	0023      	movs	r3, r4
    if(rout > short_side >> 1) rout = short_side >> 1;
 800a184:	105b      	asrs	r3, r3, #1
 800a186:	9307      	str	r3, [sp, #28]
 800a188:	4293      	cmp	r3, r2
 800a18a:	dd00      	ble.n	800a18e <lv_draw_rect+0x132>
 800a18c:	9207      	str	r2, [sp, #28]
    if(simple_mode && rout == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 800a18e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a190:	2b00      	cmp	r3, #0
 800a192:	d100      	bne.n	800a196 <lv_draw_rect+0x13a>
 800a194:	e170      	b.n	800a478 <lv_draw_rect+0x41c>
 800a196:	9b07      	ldr	r3, [sp, #28]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d000      	beq.n	800a19e <lv_draw_rect+0x142>
 800a19c:	e16c      	b.n	800a478 <lv_draw_rect+0x41c>
 800a19e:	9b06      	ldr	r3, [sp, #24]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d000      	beq.n	800a1a6 <lv_draw_rect+0x14a>
 800a1a4:	e208      	b.n	800a5b8 <lv_draw_rect+0x55c>
        _lv_blend_fill(clip, &coords_bg,
 800a1a6:	7b73      	ldrb	r3, [r6, #13]
 800a1a8:	9804      	ldr	r0, [sp, #16]
 800a1aa:	9302      	str	r3, [sp, #8]
 800a1ac:	9b05      	ldr	r3, [sp, #20]
 800a1ae:	9301      	str	r3, [sp, #4]
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	9300      	str	r3, [sp, #0]
 800a1b4:	8872      	ldrh	r2, [r6, #2]
 800a1b6:	9b06      	ldr	r3, [sp, #24]
 800a1b8:	f7fc fe8e 	bl	8006ed8 <_lv_blend_fill>
    int16_t mask_rout_id = LV_MASK_ID_INV;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	425b      	negs	r3, r3
 800a1c0:	9312      	str	r3, [sp, #72]	; 0x48
    lv_draw_mask_remove_id(mask_rout_id);
 800a1c2:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a1c4:	f7ff fde4 	bl	8009d90 <lv_draw_mask_remove_id>
    _lv_mem_buf_release(mask_buf);
 800a1c8:	9808      	ldr	r0, [sp, #32]
 800a1ca:	f002 f8ab 	bl	800c324 <_lv_mem_buf_release>
    if(dsc->border_opa <= LV_OPA_MIN) return;
 800a1ce:	7d33      	ldrb	r3, [r6, #20]
 800a1d0:	9305      	str	r3, [sp, #20]
 800a1d2:	2b02      	cmp	r3, #2
 800a1d4:	d800      	bhi.n	800a1d8 <lv_draw_rect+0x17c>
 800a1d6:	e14d      	b.n	800a474 <lv_draw_rect+0x418>
    if(dsc->border_width == 0) return;
 800a1d8:	2210      	movs	r2, #16
 800a1da:	5eb3      	ldrsh	r3, [r6, r2]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d100      	bne.n	800a1e2 <lv_draw_rect+0x186>
 800a1e0:	e148      	b.n	800a474 <lv_draw_rect+0x418>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 800a1e2:	2112      	movs	r1, #18
 800a1e4:	5e72      	ldrsh	r2, [r6, r1]
 800a1e6:	4694      	mov	ip, r2
 800a1e8:	2a00      	cmp	r2, #0
 800a1ea:	d100      	bne.n	800a1ee <lv_draw_rect+0x192>
 800a1ec:	e142      	b.n	800a474 <lv_draw_rect+0x418>
    if(dsc->border_post) return;
 800a1ee:	7db2      	ldrb	r2, [r6, #22]
 800a1f0:	07d2      	lsls	r2, r2, #31
 800a1f2:	d500      	bpl.n	800a1f6 <lv_draw_rect+0x19a>
 800a1f4:	e13e      	b.n	800a474 <lv_draw_rect+0x418>
    int32_t rout = dsc->radius;
 800a1f6:	2100      	movs	r1, #0
 800a1f8:	5e72      	ldrsh	r2, [r6, r1]
 800a1fa:	88bc      	ldrh	r4, [r7, #4]
 800a1fc:	9207      	str	r2, [sp, #28]
 800a1fe:	883a      	ldrh	r2, [r7, #0]
 800a200:	3401      	adds	r4, #1
 800a202:	1aa4      	subs	r4, r4, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800a204:	88fa      	ldrh	r2, [r7, #6]
 800a206:	8879      	ldrh	r1, [r7, #2]
 800a208:	3201      	adds	r2, #1
 800a20a:	1a52      	subs	r2, r2, r1
    int32_t coords_h = lv_area_get_height(coords);
 800a20c:	b212      	sxth	r2, r2
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
 800a20e:	b224      	sxth	r4, r4
 800a210:	4294      	cmp	r4, r2
 800a212:	dd00      	ble.n	800a216 <lv_draw_rect+0x1ba>
 800a214:	0014      	movs	r4, r2
 800a216:	9a07      	ldr	r2, [sp, #28]
    if(rout > short_side >> 1) rout = short_side >> 1;
 800a218:	1064      	asrs	r4, r4, #1
 800a21a:	4294      	cmp	r4, r2
 800a21c:	dd00      	ble.n	800a220 <lv_draw_rect+0x1c4>
 800a21e:	0014      	movs	r4, r2
 800a220:	2200      	movs	r2, #0
        *d8 = *s8;
 800a222:	a916      	add	r1, sp, #88	; 0x58
 800a224:	5cb8      	ldrb	r0, [r7, r2]
 800a226:	5450      	strb	r0, [r2, r1]
 800a228:	3201      	adds	r2, #1
    while(len) {
 800a22a:	2a08      	cmp	r2, #8
 800a22c:	d1fa      	bne.n	800a224 <lv_draw_rect+0x1c8>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 800a22e:	4662      	mov	r2, ip
 800a230:	880d      	ldrh	r5, [r1, #0]
 800a232:	b29b      	uxth	r3, r3
 800a234:	b291      	uxth	r1, r2
 800a236:	001a      	movs	r2, r3
 800a238:	0748      	lsls	r0, r1, #29
 800a23a:	d402      	bmi.n	800a242 <lv_draw_rect+0x1e6>
 800a23c:	191a      	adds	r2, r3, r4
 800a23e:	4252      	negs	r2, r2
 800a240:	b292      	uxth	r2, r2
 800a242:	a816      	add	r0, sp, #88	; 0x58
 800a244:	18aa      	adds	r2, r5, r2
 800a246:	8002      	strh	r2, [r0, #0]
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 800a248:	8882      	ldrh	r2, [r0, #4]
 800a24a:	9206      	str	r2, [sp, #24]
 800a24c:	001a      	movs	r2, r3
 800a24e:	070d      	lsls	r5, r1, #28
 800a250:	d402      	bmi.n	800a258 <lv_draw_rect+0x1fc>
 800a252:	191a      	adds	r2, r3, r4
 800a254:	4252      	negs	r2, r2
 800a256:	b292      	uxth	r2, r2
 800a258:	9d06      	ldr	r5, [sp, #24]
 800a25a:	1aaa      	subs	r2, r5, r2
 800a25c:	8082      	strh	r2, [r0, #4]
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800a25e:	8840      	ldrh	r0, [r0, #2]
 800a260:	001a      	movs	r2, r3
 800a262:	078d      	lsls	r5, r1, #30
 800a264:	d402      	bmi.n	800a26c <lv_draw_rect+0x210>
 800a266:	191a      	adds	r2, r3, r4
 800a268:	4252      	negs	r2, r2
 800a26a:	b292      	uxth	r2, r2
 800a26c:	ad16      	add	r5, sp, #88	; 0x58
 800a26e:	1882      	adds	r2, r0, r2
 800a270:	806a      	strh	r2, [r5, #2]
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800a272:	88ea      	ldrh	r2, [r5, #6]
 800a274:	07c9      	lsls	r1, r1, #31
 800a276:	d402      	bmi.n	800a27e <lv_draw_rect+0x222>
 800a278:	191b      	adds	r3, r3, r4
 800a27a:	425b      	negs	r3, r3
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	1ad3      	subs	r3, r2, r3
 800a280:	80eb      	strh	r3, [r5, #6]
    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
 800a282:	4663      	mov	r3, ip
 800a284:	2b0f      	cmp	r3, #15
 800a286:	d001      	beq.n	800a28c <lv_draw_rect+0x230>
 800a288:	f000 fbb1 	bl	800a9ee <lv_draw_rect+0x992>
 800a28c:	466a      	mov	r2, sp
        draw_full_border(&area_inner, coords, clip, dsc->radius, false, dsc->border_color, dsc->border_opa,
 800a28e:	7d73      	ldrb	r3, [r6, #21]
 800a290:	9309      	str	r3, [sp, #36]	; 0x24
 800a292:	89f3      	ldrh	r3, [r6, #14]
 800a294:	8593      	strh	r3, [r2, #44]	; 0x2c
 800a296:	9310      	str	r3, [sp, #64]	; 0x40
#endif

static void draw_full_border(const lv_area_t * area_inner, const lv_area_t * area_outer, const lv_area_t * clip,
                             lv_coord_t radius, bool radius_is_in, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800a298:	f7ff fd9c 	bl	8009dd4 <lv_draw_mask_get_cnt>
 800a29c:	900f      	str	r0, [sp, #60]	; 0x3c
    bool simple_mode = true;
    if(other_mask_cnt) simple_mode = false;

    int32_t inner_w = lv_area_get_width(area_inner);
    int32_t inner_h = lv_area_get_height(area_inner);
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
 800a29e:	2304      	movs	r3, #4
 800a2a0:	5efc      	ldrsh	r4, [r7, r3]
    int32_t inner_w = lv_area_get_width(area_inner);
 800a2a2:	2304      	movs	r3, #4
 800a2a4:	5eee      	ldrsh	r6, [r5, r3]

    int32_t coords_out_w = lv_area_get_width(area_outer);
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	5ebb      	ldrsh	r3, [r7, r2]
 800a2aa:	9308      	str	r3, [sp, #32]
    int32_t coords_out_h = lv_area_get_height(area_outer);
 800a2ac:	2202      	movs	r2, #2
 800a2ae:	5ebb      	ldrsh	r3, [r7, r2]
 800a2b0:	930a      	str	r3, [sp, #40]	; 0x28
 800a2b2:	2306      	movs	r3, #6
 800a2b4:	5efd      	ldrsh	r5, [r7, r3]
        rin = rout - border_width;
        if(rin < 0) rin = 0;

    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 800a2b6:	f7fb ff27 	bl	8006108 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800a2ba:	f001 fa7f 	bl	800b7bc <lv_disp_get_buf>

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
 800a2be:	9a04      	ldr	r2, [sp, #16]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800a2c0:	9006      	str	r0, [sp, #24]
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
 800a2c2:	0039      	movs	r1, r7
 800a2c4:	a818      	add	r0, sp, #96	; 0x60
 800a2c6:	f001 fb6c 	bl	800b9a2 <_lv_area_intersect>
    if(is_common == false) return;
 800a2ca:	2800      	cmp	r0, #0
 800a2cc:	d100      	bne.n	800a2d0 <lv_draw_rect+0x274>
 800a2ce:	e0d1      	b.n	800a474 <lv_draw_rect+0x418>
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
 800a2d0:	b2a4      	uxth	r4, r4
 800a2d2:	1ba6      	subs	r6, r4, r6
 800a2d4:	b2b3      	uxth	r3, r6
 800a2d6:	930e      	str	r3, [sp, #56]	; 0x38
 800a2d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a2da:	9b08      	ldr	r3, [sp, #32]
 800a2dc:	3401      	adds	r4, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800a2de:	3501      	adds	r5, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a2e0:	1ae3      	subs	r3, r4, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800a2e2:	1aad      	subs	r5, r5, r2
    int32_t coords_out_h = lv_area_get_height(area_outer);
 800a2e4:	b22d      	sxth	r5, r5
        int32_t short_side = LV_MATH_MIN(coords_out_w, coords_out_h);
 800a2e6:	b21b      	sxth	r3, r3
 800a2e8:	42ab      	cmp	r3, r5
 800a2ea:	dd00      	ble.n	800a2ee <lv_draw_rect+0x292>
 800a2ec:	002b      	movs	r3, r5
 800a2ee:	9a07      	ldr	r2, [sp, #28]
        if(rout > short_side >> 1) rout = short_side >> 1;
 800a2f0:	105b      	asrs	r3, r3, #1
 800a2f2:	9308      	str	r3, [sp, #32]
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	dd00      	ble.n	800a2fa <lv_draw_rect+0x29e>
 800a2f8:	9208      	str	r2, [sp, #32]
        rin = rout - border_width;
 800a2fa:	466b      	mov	r3, sp
 800a2fc:	2238      	movs	r2, #56	; 0x38
 800a2fe:	5e9b      	ldrsh	r3, [r3, r2]

    const lv_area_t * disp_area = &vdb->area;

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
 800a300:	aa18      	add	r2, sp, #96	; 0x60
        rin = rout - border_width;
 800a302:	930c      	str	r3, [sp, #48]	; 0x30
    draw_area.x1 -= disp_area->x1;
 800a304:	9b06      	ldr	r3, [sp, #24]
 800a306:	8a18      	ldrh	r0, [r3, #16]
 800a308:	8813      	ldrh	r3, [r2, #0]
 800a30a:	1a1b      	subs	r3, r3, r0
 800a30c:	b299      	uxth	r1, r3
    draw_area.y1 -= disp_area->y1;
 800a30e:	9b06      	ldr	r3, [sp, #24]
    draw_area.x1 -= disp_area->x1;
 800a310:	8011      	strh	r1, [r2, #0]
    draw_area.y1 -= disp_area->y1;
 800a312:	8a5c      	ldrh	r4, [r3, #18]
 800a314:	8853      	ldrh	r3, [r2, #2]
 800a316:	1b1b      	subs	r3, r3, r4
 800a318:	8053      	strh	r3, [r2, #2]
    draw_area.x2 -= disp_area->x1;
 800a31a:	8893      	ldrh	r3, [r2, #4]
 800a31c:	1a1b      	subs	r3, r3, r0
 800a31e:	b29b      	uxth	r3, r3
    draw_area.y2 -= disp_area->y1;
 800a320:	88d0      	ldrh	r0, [r2, #6]
    draw_area.x2 -= disp_area->x1;
 800a322:	8093      	strh	r3, [r2, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a324:	3301      	adds	r3, #1
 800a326:	1a5b      	subs	r3, r3, r1
    draw_area.y2 -= disp_area->y1;
 800a328:	1b00      	subs	r0, r0, r4
 800a32a:	b21b      	sxth	r3, r3
 800a32c:	80d0      	strh	r0, [r2, #6]
 800a32e:	930a      	str	r3, [sp, #40]	; 0x28
        rin = rout - border_width;
 800a330:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a332:	9b08      	ldr	r3, [sp, #32]

    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Create inner the mask*/
    lv_draw_mask_radius_param_t mask_rin_param;
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
 800a334:	a916      	add	r1, sp, #88	; 0x58
        rin = rout - border_width;
 800a336:	1a9a      	subs	r2, r3, r2
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
 800a338:	43d3      	mvns	r3, r2
 800a33a:	17db      	asrs	r3, r3, #31
 800a33c:	401a      	ands	r2, r3
 800a33e:	b212      	sxth	r2, r2
 800a340:	2301      	movs	r3, #1
 800a342:	a81e      	add	r0, sp, #120	; 0x78
 800a344:	f7ff fde4 	bl	8009f10 <lv_draw_mask_radius_init>
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800a348:	2100      	movs	r1, #0
 800a34a:	a81e      	add	r0, sp, #120	; 0x78
 800a34c:	f7ff fcea 	bl	8009d24 <lv_draw_mask_add>

    lv_draw_mask_radius_param_t mask_rout_param;
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
 800a350:	466b      	mov	r3, sp
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800a352:	9012      	str	r0, [sp, #72]	; 0x48
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
 800a354:	2220      	movs	r2, #32
 800a356:	5e9a      	ldrsh	r2, [r3, r2]
 800a358:	0039      	movs	r1, r7
 800a35a:	2300      	movs	r3, #0
 800a35c:	a825      	add	r0, sp, #148	; 0x94
 800a35e:	f7ff fdd7 	bl	8009f10 <lv_draw_mask_radius_init>
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800a362:	2100      	movs	r1, #0
 800a364:	a825      	add	r0, sp, #148	; 0x94
 800a366:	f7ff fcdd 	bl	8009d24 <lv_draw_mask_add>
 800a36a:	9013      	str	r0, [sp, #76]	; 0x4c

    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800a36c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a36e:	f002 f8d1 	bl	800c514 <_lv_mem_buf_get>

    int32_t corner_size = LV_MATH_MAX(rout, border_width - 1);
 800a372:	9b08      	ldr	r3, [sp, #32]
 800a374:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800a376:	9007      	str	r0, [sp, #28]
    int32_t corner_size = LV_MATH_MAX(rout, border_width - 1);
 800a378:	930d      	str	r3, [sp, #52]	; 0x34
 800a37a:	4293      	cmp	r3, r2
 800a37c:	da02      	bge.n	800a384 <lv_draw_rect+0x328>
 800a37e:	0013      	movs	r3, r2
 800a380:	3b01      	subs	r3, #1
 800a382:	930d      	str	r3, [sp, #52]	; 0x34
 800a384:	2304      	movs	r3, #4
 800a386:	5efa      	ldrsh	r2, [r7, r3]
 800a388:	2300      	movs	r3, #0
 800a38a:	5efd      	ldrsh	r5, [r7, r3]
 800a38c:	9b06      	ldr	r3, [sp, #24]
    int32_t h;
    lv_draw_mask_res_t mask_res;
    lv_area_t fill_area;

    /*Apply some optimization if there is no other mask*/
    if(simple_mode) {
 800a38e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a390:	2612      	movs	r6, #18
 800a392:	5f9e      	ldrsh	r6, [r3, r6]
 800a394:	ab18      	add	r3, sp, #96	; 0x60
 800a396:	2402      	movs	r4, #2
 800a398:	5f1c      	ldrsh	r4, [r3, r4]
 800a39a:	4694      	mov	ip, r2
 800a39c:	1932      	adds	r2, r6, r4
 800a39e:	b212      	sxth	r2, r2
 800a3a0:	ab1a      	add	r3, sp, #104	; 0x68
 800a3a2:	2900      	cmp	r1, #0
 800a3a4:	d000      	beq.n	800a3a8 <lv_draw_rect+0x34c>
 800a3a6:	e2f2      	b.n	800a98e <lv_draw_rect+0x932>
        /*Draw the upper corner area*/
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
 800a3a8:	2002      	movs	r0, #2
 800a3aa:	5e39      	ldrsh	r1, [r7, r0]

        fill_area.x1 = area_outer->x1;
 800a3ac:	801d      	strh	r5, [r3, #0]
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
 800a3ae:	1b89      	subs	r1, r1, r6
 800a3b0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
        fill_area.x2 = area_outer->x2;
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800a3b2:	805a      	strh	r2, [r3, #2]
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
 800a3b4:	1989      	adds	r1, r1, r6
 800a3b6:	910f      	str	r1, [sp, #60]	; 0x3c
        fill_area.x2 = area_outer->x2;
 800a3b8:	4661      	mov	r1, ip
        fill_area.y2 = fill_area.y1;
 800a3ba:	80da      	strh	r2, [r3, #6]
        fill_area.x2 = area_outer->x2;
 800a3bc:	8099      	strh	r1, [r3, #4]
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
 800a3be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3c0:	42a3      	cmp	r3, r4
 800a3c2:	db00      	blt.n	800a3c6 <lv_draw_rect+0x36a>
 800a3c4:	e201      	b.n	800a7ca <lv_draw_rect+0x76e>
            fill_area.y1++;
            fill_area.y2++;
        }

        /*Draw the lower corner area */
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
 800a3c6:	9b06      	ldr	r3, [sp, #24]
 800a3c8:	2206      	movs	r2, #6
 800a3ca:	5ebc      	ldrsh	r4, [r7, r2]
 800a3cc:	2212      	movs	r2, #18
 800a3ce:	5e9b      	ldrsh	r3, [r3, r2]
 800a3d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a3d2:	1ae4      	subs	r4, r4, r3
 800a3d4:	1aa4      	subs	r4, r4, r2
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
 800a3d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a3d8:	42a2      	cmp	r2, r4
 800a3da:	db01      	blt.n	800a3e0 <lv_draw_rect+0x384>
 800a3dc:	0014      	movs	r4, r2
 800a3de:	3401      	adds	r4, #1
        fill_area.y1 = disp_area->y1 + lower_corner_end;
 800a3e0:	191b      	adds	r3, r3, r4
 800a3e2:	b21b      	sxth	r3, r3
 800a3e4:	aa1a      	add	r2, sp, #104	; 0x68
 800a3e6:	8053      	strh	r3, [r2, #2]
        fill_area.y2 = fill_area.y1;
 800a3e8:	80d3      	strh	r3, [r2, #6]
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
 800a3ea:	ad18      	add	r5, sp, #96	; 0x60
 800a3ec:	2206      	movs	r2, #6
 800a3ee:	5eab      	ldrsh	r3, [r5, r2]
 800a3f0:	429c      	cmp	r4, r3
 800a3f2:	dc00      	bgt.n	800a3f6 <lv_draw_rect+0x39a>
 800a3f4:	e25a      	b.n	800a8ac <lv_draw_rect+0x850>
            fill_area.y1++;
            fill_area.y2++;
        }

        /*Draw the left vertical part*/
        fill_area.y1 = area_outer->y1 + corner_size + 1;
 800a3f6:	466b      	mov	r3, sp
 800a3f8:	887a      	ldrh	r2, [r7, #2]
 800a3fa:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 800a3fc:	3201      	adds	r2, #1
 800a3fe:	ac1a      	add	r4, sp, #104	; 0x68
 800a400:	188a      	adds	r2, r1, r2
 800a402:	8062      	strh	r2, [r4, #2]
        fill_area.y2 = area_outer->y2 - corner_size - 1;
 800a404:	88fb      	ldrh	r3, [r7, #6]

        fill_area.x1 = area_outer->x1;
        fill_area.x2 = area_outer->x1 + border_width - 1;
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800a406:	2501      	movs	r5, #1
        fill_area.y2 = area_outer->y2 - corner_size - 1;
 800a408:	3b01      	subs	r3, #1
 800a40a:	1a5b      	subs	r3, r3, r1
 800a40c:	80e3      	strh	r3, [r4, #6]
        fill_area.x1 = area_outer->x1;
 800a40e:	2200      	movs	r2, #0
 800a410:	5ebb      	ldrsh	r3, [r7, r2]
        fill_area.x2 = area_outer->x1 + border_width - 1;
 800a412:	9a0e      	ldr	r2, [sp, #56]	; 0x38
        fill_area.x1 = area_outer->x1;
 800a414:	8023      	strh	r3, [r4, #0]
        fill_area.x2 = area_outer->x1 + border_width - 1;
 800a416:	3b01      	subs	r3, #1
 800a418:	18d3      	adds	r3, r2, r3
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800a41a:	2140      	movs	r1, #64	; 0x40
 800a41c:	466a      	mov	r2, sp
        fill_area.x2 = area_outer->x1 + border_width - 1;
 800a41e:	80a3      	strh	r3, [r4, #4]
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800a420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a422:	9500      	str	r5, [sp, #0]
 800a424:	9302      	str	r3, [sp, #8]
 800a426:	9b05      	ldr	r3, [sp, #20]
 800a428:	1852      	adds	r2, r2, r1
 800a42a:	9301      	str	r3, [sp, #4]
 800a42c:	8812      	ldrh	r2, [r2, #0]
 800a42e:	2300      	movs	r3, #0
 800a430:	0021      	movs	r1, r4
 800a432:	9804      	ldr	r0, [sp, #16]
 800a434:	f7fc fd50 	bl	8006ed8 <_lv_blend_fill>

        /*Draw the right vertical border*/
        fill_area.x1 = area_outer->x2 - border_width + 1;
 800a438:	2204      	movs	r2, #4
 800a43a:	5ebb      	ldrsh	r3, [r7, r2]
 800a43c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a43e:	195e      	adds	r6, r3, r5
 800a440:	1ab6      	subs	r6, r6, r2
        fill_area.x2 = area_outer->x2;

        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800a442:	2140      	movs	r1, #64	; 0x40
 800a444:	466a      	mov	r2, sp
        fill_area.x2 = area_outer->x2;
 800a446:	80a3      	strh	r3, [r4, #4]
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800a448:	9b09      	ldr	r3, [sp, #36]	; 0x24
        fill_area.x1 = area_outer->x2 - border_width + 1;
 800a44a:	8026      	strh	r6, [r4, #0]
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800a44c:	9302      	str	r3, [sp, #8]
 800a44e:	9b05      	ldr	r3, [sp, #20]
 800a450:	1852      	adds	r2, r2, r1
 800a452:	9301      	str	r3, [sp, #4]
 800a454:	9500      	str	r5, [sp, #0]
 800a456:	2300      	movs	r3, #0
 800a458:	8812      	ldrh	r2, [r2, #0]
 800a45a:	0021      	movs	r1, r4
 800a45c:	9804      	ldr	r0, [sp, #16]
 800a45e:	f7fc fd3b 	bl	8006ed8 <_lv_blend_fill>
            fill_area.y1++;
            fill_area.y2++;

        }
    }
    lv_draw_mask_remove_id(mask_rin_id);
 800a462:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a464:	f7ff fc94 	bl	8009d90 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_rout_id);
 800a468:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800a46a:	f7ff fc91 	bl	8009d90 <lv_draw_mask_remove_id>
    _lv_mem_buf_release(mask_buf);
 800a46e:	9807      	ldr	r0, [sp, #28]
        _lv_mem_buf_release(mask_buf);
 800a470:	f001 ff58 	bl	800c324 <_lv_mem_buf_release>
}
 800a474:	b02d      	add	sp, #180	; 0xb4
 800a476:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(rout > 0) {
 800a478:	9b07      	ldr	r3, [sp, #28]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	dc00      	bgt.n	800a480 <lv_draw_rect+0x424>
 800a47e:	e09b      	b.n	800a5b8 <lv_draw_rect+0x55c>
            lv_draw_mask_radius_init(&mask_rout_param, &coords_bg, rout, false);
 800a480:	466b      	mov	r3, sp
 800a482:	a918      	add	r1, sp, #96	; 0x60
 800a484:	221c      	movs	r2, #28
 800a486:	5e9a      	ldrsh	r2, [r3, r2]
 800a488:	a825      	add	r0, sp, #148	; 0x94
 800a48a:	2300      	movs	r3, #0
 800a48c:	f7ff fd40 	bl	8009f10 <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800a490:	2100      	movs	r1, #0
 800a492:	a825      	add	r0, sp, #148	; 0x94
 800a494:	f7ff fc46 	bl	8009d24 <lv_draw_mask_add>
 800a498:	9012      	str	r0, [sp, #72]	; 0x48
        lv_color_t grad_color = dsc->bg_color;
 800a49a:	466a      	mov	r2, sp
 800a49c:	8873      	ldrh	r3, [r6, #2]
 800a49e:	8613      	strh	r3, [r2, #48]	; 0x30
        lv_color_t * grad_map = NULL;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	930f      	str	r3, [sp, #60]	; 0x3c
        if(grad_dir == LV_GRAD_DIR_HOR) {
 800a4a4:	9b06      	ldr	r3, [sp, #24]
 800a4a6:	2b02      	cmp	r3, #2
 800a4a8:	d107      	bne.n	800a4ba <lv_draw_rect+0x45e>
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
 800a4aa:	0060      	lsls	r0, r4, #1
 800a4ac:	f002 f832 	bl	800c514 <_lv_mem_buf_get>
            for(i = 0; i < coords_w; i++) {
 800a4b0:	2500      	movs	r5, #0
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
 800a4b2:	900f      	str	r0, [sp, #60]	; 0x3c
            for(i = 0; i < coords_w; i++) {
 800a4b4:	42ac      	cmp	r4, r5
 800a4b6:	dd00      	ble.n	800a4ba <lv_draw_rect+0x45e>
 800a4b8:	e082      	b.n	800a5c0 <lv_draw_rect+0x564>
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
 800a4ba:	ab18      	add	r3, sp, #96	; 0x60
 800a4bc:	2200      	movs	r2, #0
 800a4be:	5e98      	ldrsh	r0, [r3, r2]
 800a4c0:	2104      	movs	r1, #4
 800a4c2:	5e59      	ldrsh	r1, [r3, r1]
 800a4c4:	9a07      	ldr	r2, [sp, #28]
 800a4c6:	1c4b      	adds	r3, r1, #1
 800a4c8:	1a1b      	subs	r3, r3, r0
 800a4ca:	0052      	lsls	r2, r2, #1
 800a4cc:	b21b      	sxth	r3, r3
 800a4ce:	1a9b      	subs	r3, r3, r2
        fill_area.x1 = coords_bg.x1;
 800a4d0:	aa1c      	add	r2, sp, #112	; 0x70
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
 800a4d2:	9313      	str	r3, [sp, #76]	; 0x4c
        fill_area.x1 = coords_bg.x1;
 800a4d4:	8010      	strh	r0, [r2, #0]
        fill_area.x2 = coords_bg.x2;
 800a4d6:	8091      	strh	r1, [r2, #4]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800a4d8:	ab1a      	add	r3, sp, #104	; 0x68
 800a4da:	2102      	movs	r1, #2
 800a4dc:	5e59      	ldrsh	r1, [r3, r1]
 800a4de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4e0:	8a5b      	ldrh	r3, [r3, #18]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800a4e2:	910b      	str	r1, [sp, #44]	; 0x2c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800a4e4:	185b      	adds	r3, r3, r1
 800a4e6:	b21b      	sxth	r3, r3
 800a4e8:	8053      	strh	r3, [r2, #2]
        fill_area.y2 = fill_area.y1;
 800a4ea:	80d3      	strh	r3, [r2, #6]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800a4ec:	ac1a      	add	r4, sp, #104	; 0x68
 800a4ee:	2206      	movs	r2, #6
 800a4f0:	5ea3      	ldrsh	r3, [r4, r2]
 800a4f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	dd6d      	ble.n	800a5d4 <lv_draw_rect+0x578>
        if(grad_dir == LV_GRAD_DIR_NONE && other_mask_cnt == 0 && split) {
 800a4f8:	9b06      	ldr	r3, [sp, #24]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d154      	bne.n	800a5a8 <lv_draw_rect+0x54c>
 800a4fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a500:	2b00      	cmp	r3, #0
 800a502:	d151      	bne.n	800a5a8 <lv_draw_rect+0x54c>
 800a504:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a506:	2b32      	cmp	r3, #50	; 0x32
 800a508:	dd4e      	ble.n	800a5a8 <lv_draw_rect+0x54c>
            fill_area.x1 = coords_bg.x1 + rout;
 800a50a:	466b      	mov	r3, sp
 800a50c:	8b9d      	ldrh	r5, [r3, #28]
 800a50e:	ab10      	add	r3, sp, #64	; 0x40
 800a510:	8c1b      	ldrh	r3, [r3, #32]
 800a512:	ac1c      	add	r4, sp, #112	; 0x70
 800a514:	18eb      	adds	r3, r5, r3
 800a516:	8023      	strh	r3, [r4, #0]
            fill_area.x2 = coords_bg.x2 - rout;
 800a518:	ab10      	add	r3, sp, #64	; 0x40
 800a51a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
            _lv_blend_fill(clip, &fill_area,
 800a51c:	0021      	movs	r1, r4
            fill_area.x2 = coords_bg.x2 - rout;
 800a51e:	1b5b      	subs	r3, r3, r5
 800a520:	80a3      	strh	r3, [r4, #4]
            fill_area.y1 = coords_bg.y1;
 800a522:	ab10      	add	r3, sp, #64	; 0x40
 800a524:	2222      	movs	r2, #34	; 0x22
 800a526:	5e9b      	ldrsh	r3, [r3, r2]
            _lv_blend_fill(clip, &fill_area,
 800a528:	9804      	ldr	r0, [sp, #16]
            fill_area.y1 = coords_bg.y1;
 800a52a:	8063      	strh	r3, [r4, #2]
            fill_area.y2 = coords_bg.y1 + rout;
 800a52c:	18eb      	adds	r3, r5, r3
 800a52e:	80e3      	strh	r3, [r4, #6]
            _lv_blend_fill(clip, &fill_area,
 800a530:	7b73      	ldrb	r3, [r6, #13]
 800a532:	9302      	str	r3, [sp, #8]
 800a534:	9b05      	ldr	r3, [sp, #20]
 800a536:	9301      	str	r3, [sp, #4]
 800a538:	2301      	movs	r3, #1
 800a53a:	9300      	str	r3, [sp, #0]
 800a53c:	8872      	ldrh	r2, [r6, #2]
 800a53e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a540:	f7fc fcca 	bl	8006ed8 <_lv_blend_fill>
            fill_area.y1 = coords_bg.y2 - rout;
 800a544:	ab10      	add	r3, sp, #64	; 0x40
 800a546:	2126      	movs	r1, #38	; 0x26
 800a548:	5e59      	ldrsh	r1, [r3, r1]
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
 800a54a:	2006      	movs	r0, #6
 800a54c:	5e23      	ldrsh	r3, [r4, r0]
            fill_area.y1 = coords_bg.y2 - rout;
 800a54e:	1b4a      	subs	r2, r1, r5
 800a550:	b212      	sxth	r2, r2
 800a552:	8062      	strh	r2, [r4, #2]
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
 800a554:	429a      	cmp	r2, r3
 800a556:	dc01      	bgt.n	800a55c <lv_draw_rect+0x500>
 800a558:	3301      	adds	r3, #1
 800a55a:	8063      	strh	r3, [r4, #2]
            fill_area.y2 = coords_bg.y2;
 800a55c:	80e1      	strh	r1, [r4, #6]
            _lv_blend_fill(clip, &fill_area,
 800a55e:	7b73      	ldrb	r3, [r6, #13]
 800a560:	0021      	movs	r1, r4
 800a562:	9302      	str	r3, [sp, #8]
 800a564:	9b05      	ldr	r3, [sp, #20]
 800a566:	9804      	ldr	r0, [sp, #16]
 800a568:	9301      	str	r3, [sp, #4]
 800a56a:	2301      	movs	r3, #1
 800a56c:	9300      	str	r3, [sp, #0]
 800a56e:	8872      	ldrh	r2, [r6, #2]
 800a570:	2300      	movs	r3, #0
 800a572:	f7fc fcb1 	bl	8006ed8 <_lv_blend_fill>
            fill_area.x1 = coords_bg.x1;
 800a576:	aa18      	add	r2, sp, #96	; 0x60
 800a578:	8813      	ldrh	r3, [r2, #0]
            _lv_blend_fill(clip, &fill_area,
 800a57a:	0021      	movs	r1, r4
            fill_area.x1 = coords_bg.x1;
 800a57c:	8023      	strh	r3, [r4, #0]
            fill_area.x2 = coords_bg.x2;
 800a57e:	8893      	ldrh	r3, [r2, #4]
            _lv_blend_fill(clip, &fill_area,
 800a580:	9804      	ldr	r0, [sp, #16]
            fill_area.x2 = coords_bg.x2;
 800a582:	80a3      	strh	r3, [r4, #4]
            fill_area.y1 = coords_bg.y1 + rout + 1;
 800a584:	8853      	ldrh	r3, [r2, #2]
 800a586:	3301      	adds	r3, #1
 800a588:	18eb      	adds	r3, r5, r3
 800a58a:	8063      	strh	r3, [r4, #2]
            fill_area.y2 = coords_bg.y2 - rout - 1;
 800a58c:	88d3      	ldrh	r3, [r2, #6]
            _lv_blend_fill(clip, &fill_area,
 800a58e:	9a05      	ldr	r2, [sp, #20]
            fill_area.y2 = coords_bg.y2 - rout - 1;
 800a590:	3b01      	subs	r3, #1
 800a592:	1b5d      	subs	r5, r3, r5
 800a594:	80e5      	strh	r5, [r4, #6]
            _lv_blend_fill(clip, &fill_area,
 800a596:	7b73      	ldrb	r3, [r6, #13]
 800a598:	9201      	str	r2, [sp, #4]
 800a59a:	9302      	str	r3, [sp, #8]
 800a59c:	2301      	movs	r3, #1
 800a59e:	9300      	str	r3, [sp, #0]
 800a5a0:	8872      	ldrh	r2, [r6, #2]
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	f7fc fc98 	bl	8006ed8 <_lv_blend_fill>
        if(grad_map) _lv_mem_buf_release(grad_map);
 800a5a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d100      	bne.n	800a5b0 <lv_draw_rect+0x554>
 800a5ae:	e608      	b.n	800a1c2 <lv_draw_rect+0x166>
 800a5b0:	0018      	movs	r0, r3
 800a5b2:	f001 feb7 	bl	800c324 <_lv_mem_buf_release>
 800a5b6:	e604      	b.n	800a1c2 <lv_draw_rect+0x166>
    int16_t mask_rout_id = LV_MASK_ID_INV;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	425b      	negs	r3, r3
 800a5bc:	9312      	str	r3, [sp, #72]	; 0x48
 800a5be:	e76c      	b.n	800a49a <lv_draw_rect+0x43e>
                grad_map[i] = grad_get(dsc, coords_w, i);
 800a5c0:	b22a      	sxth	r2, r5
 800a5c2:	0021      	movs	r1, r4
 800a5c4:	0030      	movs	r0, r6
 800a5c6:	f7ff fcd3 	bl	8009f70 <grad_get>
 800a5ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a5cc:	006b      	lsls	r3, r5, #1
 800a5ce:	5298      	strh	r0, [r3, r2]
            for(i = 0; i < coords_w; i++) {
 800a5d0:	3501      	adds	r5, #1
 800a5d2:	e76f      	b.n	800a4b4 <lv_draw_rect+0x458>
            int32_t y = h + vdb->area.y1;
 800a5d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
            if(y > coords_bg.y1 + rout + 1 &&
 800a5d6:	aa18      	add	r2, sp, #96	; 0x60
            int32_t y = h + vdb->area.y1;
 800a5d8:	2512      	movs	r5, #18
 800a5da:	5f5d      	ldrsh	r5, [r3, r5]
 800a5dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5de:	18ed      	adds	r5, r5, r3
            if(y > coords_bg.y1 + rout + 1 &&
 800a5e0:	2102      	movs	r1, #2
 800a5e2:	5e53      	ldrsh	r3, [r2, r1]
 800a5e4:	9907      	ldr	r1, [sp, #28]
 800a5e6:	185b      	adds	r3, r3, r1
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	429d      	cmp	r5, r3
 800a5ec:	dc00      	bgt.n	800a5f0 <lv_draw_rect+0x594>
 800a5ee:	e0a5      	b.n	800a73c <lv_draw_rect+0x6e0>
               y < coords_bg.y2 - rout - 1) {
 800a5f0:	2306      	movs	r3, #6
 800a5f2:	5ed3      	ldrsh	r3, [r2, r3]
 800a5f4:	1a5b      	subs	r3, r3, r1
 800a5f6:	3b01      	subs	r3, #1
            if(y > coords_bg.y1 + rout + 1 &&
 800a5f8:	429d      	cmp	r5, r3
 800a5fa:	db00      	blt.n	800a5fe <lv_draw_rect+0x5a2>
 800a5fc:	e09e      	b.n	800a73c <lv_draw_rect+0x6e0>
                if(simple_mode == false) {
 800a5fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a600:	2b00      	cmp	r3, #0
 800a602:	d000      	beq.n	800a606 <lv_draw_rect+0x5aa>
 800a604:	e2e5      	b.n	800abd2 <lv_draw_rect+0xb76>
                    _lv_memset(mask_buf, opa, draw_area_w);
 800a606:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a608:	9905      	ldr	r1, [sp, #20]
 800a60a:	9808      	ldr	r0, [sp, #32]
 800a60c:	f001 ffde 	bl	800c5cc <_lv_memset>
                    mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800a610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a612:	8a5a      	ldrh	r2, [r3, #18]
 800a614:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a616:	18d2      	adds	r2, r2, r3
 800a618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a61a:	b212      	sxth	r2, r2
 800a61c:	8a19      	ldrh	r1, [r3, #16]
 800a61e:	8823      	ldrh	r3, [r4, #0]
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800a620:	18c9      	adds	r1, r1, r3
 800a622:	b209      	sxth	r1, r1
 800a624:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a626:	9808      	ldr	r0, [sp, #32]
 800a628:	f7ff fb92 	bl	8009d50 <lv_draw_mask_apply>
                opa2 = LV_OPA_COVER;
 800a62c:	23ff      	movs	r3, #255	; 0xff
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800a62e:	0004      	movs	r4, r0
                opa2 = LV_OPA_COVER;
 800a630:	930a      	str	r3, [sp, #40]	; 0x28
            if(mask_res == LV_DRAW_MASK_RES_CHANGED) {
 800a632:	2802      	cmp	r0, #2
 800a634:	d001      	beq.n	800a63a <lv_draw_rect+0x5de>
            opa2 = opa;
 800a636:	9b05      	ldr	r3, [sp, #20]
 800a638:	930a      	str	r3, [sp, #40]	; 0x28
            if(grad_dir == LV_GRAD_DIR_VER) {
 800a63a:	9b06      	ldr	r3, [sp, #24]
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d000      	beq.n	800a642 <lv_draw_rect+0x5e6>
 800a640:	e08f      	b.n	800a762 <lv_draw_rect+0x706>
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
 800a642:	a918      	add	r1, sp, #96	; 0x60
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800a644:	884b      	ldrh	r3, [r1, #2]
 800a646:	88c9      	ldrh	r1, [r1, #6]
 800a648:	1aea      	subs	r2, r5, r3
 800a64a:	3101      	adds	r1, #1
 800a64c:	1ac9      	subs	r1, r1, r3
 800a64e:	b212      	sxth	r2, r2
 800a650:	b209      	sxth	r1, r1
 800a652:	0030      	movs	r0, r6
 800a654:	f7ff fc8c 	bl	8009f70 <grad_get>
 800a658:	466b      	mov	r3, sp
 800a65a:	8618      	strh	r0, [r3, #48]	; 0x30
            if(simple_mode && split &&
 800a65c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d100      	bne.n	800a664 <lv_draw_rect+0x608>
 800a662:	e0a8      	b.n	800a7b6 <lv_draw_rect+0x75a>
 800a664:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a666:	2b32      	cmp	r3, #50	; 0x32
 800a668:	dc00      	bgt.n	800a66c <lv_draw_rect+0x610>
 800a66a:	e088      	b.n	800a77e <lv_draw_rect+0x722>
               (y < coords_bg.y1 + rout + 1 ||
 800a66c:	ab10      	add	r3, sp, #64	; 0x40
 800a66e:	2222      	movs	r2, #34	; 0x22
 800a670:	5e9b      	ldrsh	r3, [r3, r2]
 800a672:	9a07      	ldr	r2, [sp, #28]
 800a674:	189b      	adds	r3, r3, r2
            if(simple_mode && split &&
 800a676:	429d      	cmp	r5, r3
 800a678:	dd07      	ble.n	800a68a <lv_draw_rect+0x62e>
                y > coords_bg.y2 - rout - 1)) {
 800a67a:	ab10      	add	r3, sp, #64	; 0x40
 800a67c:	2226      	movs	r2, #38	; 0x26
 800a67e:	5e9b      	ldrsh	r3, [r3, r2]
 800a680:	9a07      	ldr	r2, [sp, #28]
 800a682:	1a9b      	subs	r3, r3, r2
               (y < coords_bg.y1 + rout + 1 ||
 800a684:	429d      	cmp	r5, r3
 800a686:	da00      	bge.n	800a68a <lv_draw_rect+0x62e>
 800a688:	e079      	b.n	800a77e <lv_draw_rect+0x722>
                fill_area2.x1 = coords_bg.x1;
 800a68a:	ab10      	add	r3, sp, #64	; 0x40
 800a68c:	2220      	movs	r2, #32
 800a68e:	5e9b      	ldrsh	r3, [r3, r2]
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 800a690:	466a      	mov	r2, sp
                fill_area2.x1 = coords_bg.x1;
 800a692:	ad1e      	add	r5, sp, #120	; 0x78
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 800a694:	8b92      	ldrh	r2, [r2, #28]
                fill_area2.x1 = coords_bg.x1;
 800a696:	802b      	strh	r3, [r5, #0]
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 800a698:	3b01      	subs	r3, #1
 800a69a:	18d3      	adds	r3, r2, r3
 800a69c:	80ab      	strh	r3, [r5, #4]
 800a69e:	9211      	str	r2, [sp, #68]	; 0x44
                fill_area2.y1 = fill_area.y1;
 800a6a0:	ab1c      	add	r3, sp, #112	; 0x70
 800a6a2:	885a      	ldrh	r2, [r3, #2]
                _lv_blend_fill(clip, &fill_area2,
 800a6a4:	0029      	movs	r1, r5
                fill_area2.y1 = fill_area.y1;
 800a6a6:	806a      	strh	r2, [r5, #2]
                _lv_blend_fill(clip, &fill_area2,
 800a6a8:	466a      	mov	r2, sp
                fill_area2.y2 = fill_area.y2;
 800a6aa:	88db      	ldrh	r3, [r3, #6]
                _lv_blend_fill(clip, &fill_area2,
 800a6ac:	9804      	ldr	r0, [sp, #16]
                fill_area2.y2 = fill_area.y2;
 800a6ae:	80eb      	strh	r3, [r5, #6]
                _lv_blend_fill(clip, &fill_area2,
 800a6b0:	7b73      	ldrb	r3, [r6, #13]
 800a6b2:	9400      	str	r4, [sp, #0]
 800a6b4:	9302      	str	r3, [sp, #8]
 800a6b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6b8:	9301      	str	r3, [sp, #4]
 800a6ba:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800a6bc:	9b08      	ldr	r3, [sp, #32]
 800a6be:	f7fc fc0b 	bl	8006ed8 <_lv_blend_fill>
                if(grad_dir == LV_GRAD_DIR_VER) {
 800a6c2:	9b06      	ldr	r3, [sp, #24]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d115      	bne.n	800a6f4 <lv_draw_rect+0x698>
                    fill_area2.x1 = coords_bg.x1 + rout;
 800a6c8:	ab10      	add	r3, sp, #64	; 0x40
 800a6ca:	8c1b      	ldrh	r3, [r3, #32]
 800a6cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
                    _lv_blend_fill(clip, &fill_area2,
 800a6ce:	0029      	movs	r1, r5
                    fill_area2.x1 = coords_bg.x1 + rout;
 800a6d0:	18d3      	adds	r3, r2, r3
 800a6d2:	802b      	strh	r3, [r5, #0]
                    fill_area2.x2 = coords_bg.x2 - rout;
 800a6d4:	ab10      	add	r3, sp, #64	; 0x40
 800a6d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
                    _lv_blend_fill(clip, &fill_area2,
 800a6d8:	9804      	ldr	r0, [sp, #16]
                    fill_area2.x2 = coords_bg.x2 - rout;
 800a6da:	1a9b      	subs	r3, r3, r2
                    _lv_blend_fill(clip, &fill_area2,
 800a6dc:	466a      	mov	r2, sp
                    fill_area2.x2 = coords_bg.x2 - rout;
 800a6de:	80ab      	strh	r3, [r5, #4]
                    _lv_blend_fill(clip, &fill_area2,
 800a6e0:	7b73      	ldrb	r3, [r6, #13]
 800a6e2:	9302      	str	r3, [sp, #8]
 800a6e4:	9b05      	ldr	r3, [sp, #20]
 800a6e6:	9301      	str	r3, [sp, #4]
 800a6e8:	9b06      	ldr	r3, [sp, #24]
 800a6ea:	9300      	str	r3, [sp, #0]
 800a6ec:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	f7fc fbf2 	bl	8006ed8 <_lv_blend_fill>
                fill_area2.x1 = coords_bg.x2 - rout + 1;
 800a6f4:	ab18      	add	r3, sp, #96	; 0x60
 800a6f6:	2204      	movs	r2, #4
 800a6f8:	5e9b      	ldrsh	r3, [r3, r2]
 800a6fa:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a6fc:	1c5a      	adds	r2, r3, #1
 800a6fe:	1a12      	subs	r2, r2, r0
 800a700:	a91e      	add	r1, sp, #120	; 0x78
 800a702:	800a      	strh	r2, [r1, #0]
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800a704:	9a07      	ldr	r2, [sp, #28]
                fill_area2.x2 = coords_bg.x2;
 800a706:	808b      	strh	r3, [r1, #4]
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800a708:	1a9a      	subs	r2, r3, r2
 800a70a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a70c:	3201      	adds	r2, #1
 800a70e:	2010      	movs	r0, #16
 800a710:	5e1b      	ldrsh	r3, [r3, r0]
 800a712:	a81a      	add	r0, sp, #104	; 0x68
 800a714:	2500      	movs	r5, #0
 800a716:	5f40      	ldrsh	r0, [r0, r5]
 800a718:	181b      	adds	r3, r3, r0
 800a71a:	1ad3      	subs	r3, r2, r3
                _lv_blend_fill(clip, &fill_area2,
 800a71c:	43da      	mvns	r2, r3
 800a71e:	17d2      	asrs	r2, r2, #31
 800a720:	4013      	ands	r3, r2
 800a722:	9a08      	ldr	r2, [sp, #32]
 800a724:	18d3      	adds	r3, r2, r3
 800a726:	7b72      	ldrb	r2, [r6, #13]
 800a728:	9400      	str	r4, [sp, #0]
 800a72a:	9202      	str	r2, [sp, #8]
 800a72c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a72e:	9201      	str	r2, [sp, #4]
 800a730:	466a      	mov	r2, sp
 800a732:	8e12      	ldrh	r2, [r2, #48]	; 0x30
                    _lv_blend_fill(clip, &fill_area,
 800a734:	9804      	ldr	r0, [sp, #16]
 800a736:	f7fc fbcf 	bl	8006ed8 <_lv_blend_fill>
 800a73a:	e02e      	b.n	800a79a <lv_draw_rect+0x73e>
                _lv_memset(mask_buf, opa, draw_area_w);
 800a73c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a73e:	9905      	ldr	r1, [sp, #20]
 800a740:	9808      	ldr	r0, [sp, #32]
 800a742:	f001 ff43 	bl	800c5cc <_lv_memset>
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800a746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a748:	8a5a      	ldrh	r2, [r3, #18]
 800a74a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a74c:	18d2      	adds	r2, r2, r3
 800a74e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a750:	b212      	sxth	r2, r2
 800a752:	8a19      	ldrh	r1, [r3, #16]
 800a754:	ab1a      	add	r3, sp, #104	; 0x68
 800a756:	881b      	ldrh	r3, [r3, #0]
 800a758:	e762      	b.n	800a620 <lv_draw_rect+0x5c4>
            opa2 = opa;
 800a75a:	9b05      	ldr	r3, [sp, #20]
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 800a75c:	2401      	movs	r4, #1
            opa2 = opa;
 800a75e:	930a      	str	r3, [sp, #40]	; 0x28
 800a760:	e76f      	b.n	800a642 <lv_draw_rect+0x5e6>
            if(simple_mode && split &&
 800a762:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a764:	2b00      	cmp	r3, #0
 800a766:	d000      	beq.n	800a76a <lv_draw_rect+0x70e>
 800a768:	e77c      	b.n	800a664 <lv_draw_rect+0x608>
                if(grad_dir == LV_GRAD_DIR_HOR) {
 800a76a:	9b06      	ldr	r3, [sp, #24]
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	d009      	beq.n	800a784 <lv_draw_rect+0x728>
                else if(other_mask_cnt != 0 || !split) {
 800a770:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a772:	2b00      	cmp	r3, #0
 800a774:	d11f      	bne.n	800a7b6 <lv_draw_rect+0x75a>
 800a776:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a778:	2b32      	cmp	r3, #50	; 0x32
 800a77a:	dc0e      	bgt.n	800a79a <lv_draw_rect+0x73e>
 800a77c:	e01b      	b.n	800a7b6 <lv_draw_rect+0x75a>
                if(grad_dir == LV_GRAD_DIR_HOR) {
 800a77e:	9b06      	ldr	r3, [sp, #24]
 800a780:	2b02      	cmp	r3, #2
 800a782:	d115      	bne.n	800a7b0 <lv_draw_rect+0x754>
                    _lv_blend_map(clip, &fill_area, grad_map, mask_buf, mask_res, opa2, dsc->bg_blend_mode);
 800a784:	7b73      	ldrb	r3, [r6, #13]
 800a786:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a788:	9302      	str	r3, [sp, #8]
 800a78a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a78c:	9400      	str	r4, [sp, #0]
 800a78e:	9301      	str	r3, [sp, #4]
 800a790:	a91c      	add	r1, sp, #112	; 0x70
 800a792:	9b08      	ldr	r3, [sp, #32]
 800a794:	9804      	ldr	r0, [sp, #16]
 800a796:	f7fc fde5 	bl	8007364 <_lv_blend_map>
            fill_area.y1++;
 800a79a:	ab1c      	add	r3, sp, #112	; 0x70
 800a79c:	885a      	ldrh	r2, [r3, #2]
 800a79e:	3201      	adds	r2, #1
 800a7a0:	805a      	strh	r2, [r3, #2]
            fill_area.y2++;
 800a7a2:	88da      	ldrh	r2, [r3, #6]
 800a7a4:	3201      	adds	r2, #1
 800a7a6:	80da      	strh	r2, [r3, #6]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800a7a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7ae:	e69d      	b.n	800a4ec <lv_draw_rect+0x490>
                else if(grad_dir == LV_GRAD_DIR_VER) {
 800a7b0:	9b06      	ldr	r3, [sp, #24]
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d1dc      	bne.n	800a770 <lv_draw_rect+0x714>
                    _lv_blend_fill(clip, &fill_area,
 800a7b6:	466a      	mov	r2, sp
 800a7b8:	7b73      	ldrb	r3, [r6, #13]
 800a7ba:	9400      	str	r4, [sp, #0]
 800a7bc:	9302      	str	r3, [sp, #8]
 800a7be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7c0:	a91c      	add	r1, sp, #112	; 0x70
 800a7c2:	9301      	str	r3, [sp, #4]
 800a7c4:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800a7c6:	9b08      	ldr	r3, [sp, #32]
 800a7c8:	e7b4      	b.n	800a734 <lv_draw_rect+0x6d8>
            _lv_memset_ff(mask_buf, draw_area_w);
 800a7ca:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a7cc:	9807      	ldr	r0, [sp, #28]
 800a7ce:	f001 ff53 	bl	800c678 <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800a7d2:	9b06      	ldr	r3, [sp, #24]
 800a7d4:	9807      	ldr	r0, [sp, #28]
 800a7d6:	8a5a      	ldrh	r2, [r3, #18]
 800a7d8:	8a19      	ldrh	r1, [r3, #16]
 800a7da:	ab18      	add	r3, sp, #96	; 0x60
 800a7dc:	881b      	ldrh	r3, [r3, #0]
 800a7de:	1912      	adds	r2, r2, r4
 800a7e0:	18c9      	adds	r1, r1, r3
 800a7e2:	b212      	sxth	r2, r2
 800a7e4:	b209      	sxth	r1, r1
 800a7e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7e8:	f7ff fab2 	bl	8009d50 <lv_draw_mask_apply>
            fill_area2.y1 = fill_area.y1;
 800a7ec:	ab1a      	add	r3, sp, #104	; 0x68
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800a7ee:	9011      	str	r0, [sp, #68]	; 0x44
            fill_area2.y1 = fill_area.y1;
 800a7f0:	885a      	ldrh	r2, [r3, #2]
 800a7f2:	ad1c      	add	r5, sp, #112	; 0x70
 800a7f4:	806a      	strh	r2, [r5, #2]
            fill_area2.y2 = fill_area.y2;
 800a7f6:	88db      	ldrh	r3, [r3, #6]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800a7f8:	0029      	movs	r1, r5
            fill_area2.y2 = fill_area.y2;
 800a7fa:	80eb      	strh	r3, [r5, #6]
            fill_area2.x1 = area_outer->x1;
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	5ebb      	ldrsh	r3, [r7, r2]
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800a800:	466a      	mov	r2, sp
 800a802:	8c16      	ldrh	r6, [r2, #32]
            fill_area2.x1 = area_outer->x1;
 800a804:	802b      	strh	r3, [r5, #0]
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800a806:	3b01      	subs	r3, #1
 800a808:	18f3      	adds	r3, r6, r3
 800a80a:	80ab      	strh	r3, [r5, #4]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800a80c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a80e:	9000      	str	r0, [sp, #0]
 800a810:	9302      	str	r3, [sp, #8]
 800a812:	9b05      	ldr	r3, [sp, #20]
 800a814:	9804      	ldr	r0, [sp, #16]
 800a816:	9301      	str	r3, [sp, #4]
 800a818:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800a81a:	9b07      	ldr	r3, [sp, #28]
 800a81c:	f7fc fb5c 	bl	8006ed8 <_lv_blend_fill>
            if(fill_area2.y2 < area_outer->y1 + border_width) {
 800a820:	2306      	movs	r3, #6
 800a822:	5eea      	ldrsh	r2, [r5, r3]
 800a824:	2102      	movs	r1, #2
 800a826:	5e7b      	ldrsh	r3, [r7, r1]
 800a828:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a82a:	185b      	adds	r3, r3, r1
 800a82c:	429a      	cmp	r2, r3
 800a82e:	da12      	bge.n	800a856 <lv_draw_rect+0x7fa>
                fill_area2.x1 = area_outer->x1 + rout;
 800a830:	883b      	ldrh	r3, [r7, #0]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800a832:	466a      	mov	r2, sp
                fill_area2.x1 = area_outer->x1 + rout;
 800a834:	18f3      	adds	r3, r6, r3
 800a836:	802b      	strh	r3, [r5, #0]
                fill_area2.x2 = area_outer->x2 - rout;
 800a838:	88bb      	ldrh	r3, [r7, #4]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800a83a:	0029      	movs	r1, r5
                fill_area2.x2 = area_outer->x2 - rout;
 800a83c:	1b9b      	subs	r3, r3, r6
 800a83e:	80ab      	strh	r3, [r5, #4]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800a840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a842:	9804      	ldr	r0, [sp, #16]
 800a844:	9302      	str	r3, [sp, #8]
 800a846:	9b05      	ldr	r3, [sp, #20]
 800a848:	9301      	str	r3, [sp, #4]
 800a84a:	2301      	movs	r3, #1
 800a84c:	9300      	str	r3, [sp, #0]
 800a84e:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800a850:	2300      	movs	r3, #0
 800a852:	f7fc fb41 	bl	8006ed8 <_lv_blend_fill>
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800a856:	2204      	movs	r2, #4
 800a858:	5ebb      	ldrsh	r3, [r7, r2]
 800a85a:	a91c      	add	r1, sp, #112	; 0x70
 800a85c:	1c5a      	adds	r2, r3, #1
 800a85e:	1b96      	subs	r6, r2, r6
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800a860:	9a08      	ldr	r2, [sp, #32]
            fill_area2.x2 = area_outer->x2;
 800a862:	808b      	strh	r3, [r1, #4]
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800a864:	1a9a      	subs	r2, r3, r2
 800a866:	9b06      	ldr	r3, [sp, #24]
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800a868:	800e      	strh	r6, [r1, #0]
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800a86a:	2010      	movs	r0, #16
 800a86c:	5e1b      	ldrsh	r3, [r3, r0]
 800a86e:	a818      	add	r0, sp, #96	; 0x60
 800a870:	2500      	movs	r5, #0
 800a872:	5f40      	ldrsh	r0, [r0, r5]
 800a874:	3201      	adds	r2, #1
 800a876:	181b      	adds	r3, r3, r0
 800a878:	1ad3      	subs	r3, r2, r3
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800a87a:	43da      	mvns	r2, r3
 800a87c:	17d2      	asrs	r2, r2, #31
 800a87e:	4013      	ands	r3, r2
 800a880:	9a07      	ldr	r2, [sp, #28]
 800a882:	9804      	ldr	r0, [sp, #16]
 800a884:	18d3      	adds	r3, r2, r3
 800a886:	9a09      	ldr	r2, [sp, #36]	; 0x24
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
 800a888:	3401      	adds	r4, #1
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800a88a:	9202      	str	r2, [sp, #8]
 800a88c:	9a05      	ldr	r2, [sp, #20]
 800a88e:	9201      	str	r2, [sp, #4]
 800a890:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a892:	9200      	str	r2, [sp, #0]
 800a894:	466a      	mov	r2, sp
 800a896:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800a898:	f7fc fb1e 	bl	8006ed8 <_lv_blend_fill>
            fill_area.y1++;
 800a89c:	ab1a      	add	r3, sp, #104	; 0x68
 800a89e:	885a      	ldrh	r2, [r3, #2]
 800a8a0:	3201      	adds	r2, #1
 800a8a2:	805a      	strh	r2, [r3, #2]
            fill_area.y2++;
 800a8a4:	88da      	ldrh	r2, [r3, #6]
 800a8a6:	3201      	adds	r2, #1
 800a8a8:	80da      	strh	r2, [r3, #6]
 800a8aa:	e588      	b.n	800a3be <lv_draw_rect+0x362>
            _lv_memset_ff(mask_buf, draw_area_w);
 800a8ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a8ae:	9807      	ldr	r0, [sp, #28]
 800a8b0:	f001 fee2 	bl	800c678 <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800a8b4:	9b06      	ldr	r3, [sp, #24]
 800a8b6:	9807      	ldr	r0, [sp, #28]
 800a8b8:	8a5a      	ldrh	r2, [r3, #18]
 800a8ba:	8a19      	ldrh	r1, [r3, #16]
 800a8bc:	882b      	ldrh	r3, [r5, #0]
 800a8be:	1912      	adds	r2, r2, r4
 800a8c0:	18c9      	adds	r1, r1, r3
 800a8c2:	b212      	sxth	r2, r2
 800a8c4:	b209      	sxth	r1, r1
 800a8c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8c8:	f7ff fa42 	bl	8009d50 <lv_draw_mask_apply>
            fill_area2.x1 = area_outer->x1;
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	5ebb      	ldrsh	r3, [r7, r2]
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800a8d0:	466a      	mov	r2, sp
            fill_area2.x1 = area_outer->x1;
 800a8d2:	ad1c      	add	r5, sp, #112	; 0x70
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800a8d4:	8c16      	ldrh	r6, [r2, #32]
            fill_area2.x1 = area_outer->x1;
 800a8d6:	802b      	strh	r3, [r5, #0]
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	18f3      	adds	r3, r6, r3
 800a8dc:	80ab      	strh	r3, [r5, #4]
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800a8de:	900f      	str	r0, [sp, #60]	; 0x3c
            fill_area2.y1 = fill_area.y1;
 800a8e0:	ab1a      	add	r3, sp, #104	; 0x68
 800a8e2:	885a      	ldrh	r2, [r3, #2]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800a8e4:	0029      	movs	r1, r5
            fill_area2.y1 = fill_area.y1;
 800a8e6:	806a      	strh	r2, [r5, #2]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800a8e8:	466a      	mov	r2, sp
            fill_area2.y2 = fill_area.y2;
 800a8ea:	88db      	ldrh	r3, [r3, #6]
 800a8ec:	80eb      	strh	r3, [r5, #6]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800a8ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8f0:	9000      	str	r0, [sp, #0]
 800a8f2:	9302      	str	r3, [sp, #8]
 800a8f4:	9b05      	ldr	r3, [sp, #20]
 800a8f6:	9804      	ldr	r0, [sp, #16]
 800a8f8:	9301      	str	r3, [sp, #4]
 800a8fa:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800a8fc:	9b07      	ldr	r3, [sp, #28]
 800a8fe:	f7fc faeb 	bl	8006ed8 <_lv_blend_fill>
            if(fill_area2.y2 > area_outer->y2 - border_width) {
 800a902:	2306      	movs	r3, #6
 800a904:	5eea      	ldrsh	r2, [r5, r3]
 800a906:	2106      	movs	r1, #6
 800a908:	5e7b      	ldrsh	r3, [r7, r1]
 800a90a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a90c:	1a5b      	subs	r3, r3, r1
 800a90e:	429a      	cmp	r2, r3
 800a910:	dd12      	ble.n	800a938 <lv_draw_rect+0x8dc>
                fill_area2.x1 = area_outer->x1 + rout;
 800a912:	883b      	ldrh	r3, [r7, #0]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800a914:	466a      	mov	r2, sp
                fill_area2.x1 = area_outer->x1 + rout;
 800a916:	18f3      	adds	r3, r6, r3
 800a918:	802b      	strh	r3, [r5, #0]
                fill_area2.x2 = area_outer->x2 - rout;
 800a91a:	88bb      	ldrh	r3, [r7, #4]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800a91c:	0029      	movs	r1, r5
                fill_area2.x2 = area_outer->x2 - rout;
 800a91e:	1b9b      	subs	r3, r3, r6
 800a920:	80ab      	strh	r3, [r5, #4]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800a922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a924:	9804      	ldr	r0, [sp, #16]
 800a926:	9302      	str	r3, [sp, #8]
 800a928:	9b05      	ldr	r3, [sp, #20]
 800a92a:	9301      	str	r3, [sp, #4]
 800a92c:	2301      	movs	r3, #1
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800a932:	2300      	movs	r3, #0
 800a934:	f7fc fad0 	bl	8006ed8 <_lv_blend_fill>
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800a938:	2204      	movs	r2, #4
 800a93a:	5ebb      	ldrsh	r3, [r7, r2]
 800a93c:	a91c      	add	r1, sp, #112	; 0x70
 800a93e:	1c5a      	adds	r2, r3, #1
 800a940:	1b96      	subs	r6, r2, r6
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800a942:	9a08      	ldr	r2, [sp, #32]
            fill_area2.x2 = area_outer->x2;
 800a944:	808b      	strh	r3, [r1, #4]
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800a946:	1a9a      	subs	r2, r3, r2
 800a948:	9b06      	ldr	r3, [sp, #24]
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800a94a:	800e      	strh	r6, [r1, #0]
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800a94c:	2010      	movs	r0, #16
 800a94e:	5e1b      	ldrsh	r3, [r3, r0]
 800a950:	a818      	add	r0, sp, #96	; 0x60
 800a952:	2500      	movs	r5, #0
 800a954:	5f40      	ldrsh	r0, [r0, r5]
 800a956:	3201      	adds	r2, #1
 800a958:	181b      	adds	r3, r3, r0
 800a95a:	1ad3      	subs	r3, r2, r3
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800a95c:	43da      	mvns	r2, r3
 800a95e:	17d2      	asrs	r2, r2, #31
 800a960:	4013      	ands	r3, r2
 800a962:	9a07      	ldr	r2, [sp, #28]
 800a964:	9804      	ldr	r0, [sp, #16]
 800a966:	18d3      	adds	r3, r2, r3
 800a968:	9a09      	ldr	r2, [sp, #36]	; 0x24
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
 800a96a:	3401      	adds	r4, #1
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800a96c:	9202      	str	r2, [sp, #8]
 800a96e:	9a05      	ldr	r2, [sp, #20]
 800a970:	9201      	str	r2, [sp, #4]
 800a972:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a974:	9200      	str	r2, [sp, #0]
 800a976:	466a      	mov	r2, sp
 800a978:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800a97a:	f7fc faad 	bl	8006ed8 <_lv_blend_fill>
            fill_area.y1++;
 800a97e:	ab1a      	add	r3, sp, #104	; 0x68
 800a980:	885a      	ldrh	r2, [r3, #2]
 800a982:	3201      	adds	r2, #1
 800a984:	805a      	strh	r2, [r3, #2]
            fill_area.y2++;
 800a986:	88da      	ldrh	r2, [r3, #6]
 800a988:	3201      	adds	r2, #1
 800a98a:	80da      	strh	r2, [r3, #6]
 800a98c:	e52d      	b.n	800a3ea <lv_draw_rect+0x38e>
        fill_area.x2 = area_outer->x2;
 800a98e:	4661      	mov	r1, ip
        fill_area.x1 = area_outer->x1;
 800a990:	801d      	strh	r5, [r3, #0]
        fill_area.x2 = area_outer->x2;
 800a992:	8099      	strh	r1, [r3, #4]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800a994:	805a      	strh	r2, [r3, #2]
        fill_area.y2 = fill_area.y1;
 800a996:	80da      	strh	r2, [r3, #6]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800a998:	ad18      	add	r5, sp, #96	; 0x60
 800a99a:	2206      	movs	r2, #6
 800a99c:	5eab      	ldrsh	r3, [r5, r2]
 800a99e:	429c      	cmp	r4, r3
 800a9a0:	dd00      	ble.n	800a9a4 <lv_draw_rect+0x948>
 800a9a2:	e55e      	b.n	800a462 <lv_draw_rect+0x406>
            _lv_memset_ff(mask_buf, draw_area_w);
 800a9a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a9a6:	9807      	ldr	r0, [sp, #28]
 800a9a8:	f001 fe66 	bl	800c678 <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800a9ac:	9b06      	ldr	r3, [sp, #24]
 800a9ae:	9807      	ldr	r0, [sp, #28]
 800a9b0:	8a5a      	ldrh	r2, [r3, #18]
 800a9b2:	8a19      	ldrh	r1, [r3, #16]
 800a9b4:	882b      	ldrh	r3, [r5, #0]
 800a9b6:	1912      	adds	r2, r2, r4
 800a9b8:	18c9      	adds	r1, r1, r3
 800a9ba:	b212      	sxth	r2, r2
 800a9bc:	b209      	sxth	r1, r1
 800a9be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9c0:	f7ff f9c6 	bl	8009d50 <lv_draw_mask_apply>
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
 800a9c4:	466a      	mov	r2, sp
 800a9c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9c8:	ad1a      	add	r5, sp, #104	; 0x68
 800a9ca:	9302      	str	r3, [sp, #8]
 800a9cc:	9b05      	ldr	r3, [sp, #20]
 800a9ce:	9000      	str	r0, [sp, #0]
 800a9d0:	9301      	str	r3, [sp, #4]
 800a9d2:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800a9d4:	9b07      	ldr	r3, [sp, #28]
 800a9d6:	0029      	movs	r1, r5
 800a9d8:	9804      	ldr	r0, [sp, #16]
 800a9da:	f7fc fa7d 	bl	8006ed8 <_lv_blend_fill>
            fill_area.y1++;
 800a9de:	886b      	ldrh	r3, [r5, #2]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800a9e0:	3401      	adds	r4, #1
            fill_area.y1++;
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	806b      	strh	r3, [r5, #2]
            fill_area.y2++;
 800a9e6:	88eb      	ldrh	r3, [r5, #6]
 800a9e8:	3301      	adds	r3, #1
 800a9ea:	80eb      	strh	r3, [r5, #6]
 800a9ec:	e7d4      	b.n	800a998 <lv_draw_rect+0x93c>
        if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800a9ee:	9b05      	ldr	r3, [sp, #20]
 800a9f0:	2bfd      	cmp	r3, #253	; 0xfd
 800a9f2:	d901      	bls.n	800a9f8 <lv_draw_rect+0x99c>
 800a9f4:	23ff      	movs	r3, #255	; 0xff
 800a9f6:	9305      	str	r3, [sp, #20]
        lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 800a9f8:	f7fb fb86 	bl	8006108 <_lv_refr_get_disp_refreshing>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800a9fc:	f000 fede 	bl	800b7bc <lv_disp_get_buf>
        is_common = _lv_area_intersect(&draw_area, coords, clip);
 800aa00:	ad1a      	add	r5, sp, #104	; 0x68
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800aa02:	9006      	str	r0, [sp, #24]
        is_common = _lv_area_intersect(&draw_area, coords, clip);
 800aa04:	9a04      	ldr	r2, [sp, #16]
 800aa06:	0039      	movs	r1, r7
 800aa08:	0028      	movs	r0, r5
 800aa0a:	f000 ffca 	bl	800b9a2 <_lv_area_intersect>
        if(is_common == false) return;
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	d100      	bne.n	800aa14 <lv_draw_rect+0x9b8>
 800aa12:	e52f      	b.n	800a474 <lv_draw_rect+0x418>
        draw_area.x1 -= disp_area->x1;
 800aa14:	9b06      	ldr	r3, [sp, #24]
        draw_area.y1 -= disp_area->y1;
 800aa16:	8868      	ldrh	r0, [r5, #2]
        draw_area.x1 -= disp_area->x1;
 800aa18:	8a1b      	ldrh	r3, [r3, #16]
 800aa1a:	469c      	mov	ip, r3
 800aa1c:	4662      	mov	r2, ip
 800aa1e:	882b      	ldrh	r3, [r5, #0]
 800aa20:	1a9b      	subs	r3, r3, r2
 800aa22:	b29a      	uxth	r2, r3
        draw_area.y1 -= disp_area->y1;
 800aa24:	9b06      	ldr	r3, [sp, #24]
        draw_area.x1 -= disp_area->x1;
 800aa26:	802a      	strh	r2, [r5, #0]
        draw_area.y1 -= disp_area->y1;
 800aa28:	8a59      	ldrh	r1, [r3, #18]
        draw_area.x2 -= disp_area->x1;
 800aa2a:	88ab      	ldrh	r3, [r5, #4]
        draw_area.y1 -= disp_area->y1;
 800aa2c:	1a40      	subs	r0, r0, r1
 800aa2e:	8068      	strh	r0, [r5, #2]
        draw_area.x2 -= disp_area->x1;
 800aa30:	4660      	mov	r0, ip
 800aa32:	1a1b      	subs	r3, r3, r0
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	80ab      	strh	r3, [r5, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800aa38:	3301      	adds	r3, #1
        draw_area.y2 -= disp_area->y1;
 800aa3a:	88e8      	ldrh	r0, [r5, #6]
 800aa3c:	1a9b      	subs	r3, r3, r2
 800aa3e:	b21b      	sxth	r3, r3
 800aa40:	1a41      	subs	r1, r0, r1
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800aa42:	0018      	movs	r0, r3
        draw_area.y2 -= disp_area->y1;
 800aa44:	80e9      	strh	r1, [r5, #6]
 800aa46:	9307      	str	r3, [sp, #28]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800aa48:	f001 fd64 	bl	800c514 <_lv_mem_buf_get>
 800aa4c:	0005      	movs	r5, r0
        if(rout > 0) {
 800aa4e:	2c00      	cmp	r4, #0
 800aa50:	dd64      	ble.n	800ab1c <lv_draw_rect+0xac0>
            lv_draw_mask_radius_init(&mask_rout_param, coords, rout, false);
 800aa52:	b222      	sxth	r2, r4
 800aa54:	2300      	movs	r3, #0
 800aa56:	0039      	movs	r1, r7
 800aa58:	a81e      	add	r0, sp, #120	; 0x78
 800aa5a:	f7ff fa59 	bl	8009f10 <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800aa5e:	2100      	movs	r1, #0
 800aa60:	a81e      	add	r0, sp, #120	; 0x78
 800aa62:	f7ff f95f 	bl	8009d24 <lv_draw_mask_add>
 800aa66:	900a      	str	r0, [sp, #40]	; 0x28
        lv_draw_mask_radius_init(&mask_rin_param, &area_inner, rout - dsc->border_width, true);
 800aa68:	8a32      	ldrh	r2, [r6, #16]
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	1aa2      	subs	r2, r4, r2
 800aa6e:	b212      	sxth	r2, r2
 800aa70:	a916      	add	r1, sp, #88	; 0x58
 800aa72:	a825      	add	r0, sp, #148	; 0x94
 800aa74:	f7ff fa4c 	bl	8009f10 <lv_draw_mask_radius_init>
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800aa78:	2100      	movs	r1, #0
 800aa7a:	a825      	add	r0, sp, #148	; 0x94
 800aa7c:	f7ff f952 	bl	8009d24 <lv_draw_mask_add>
 800aa80:	900d      	str	r0, [sp, #52]	; 0x34
        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
 800aa82:	2210      	movs	r2, #16
 800aa84:	5eb3      	ldrsh	r3, [r6, r2]
 800aa86:	42a3      	cmp	r3, r4
 800aa88:	dd00      	ble.n	800aa8c <lv_draw_rect+0xa30>
 800aa8a:	1e5c      	subs	r4, r3, #1
        lv_color_t color = dsc->border_color;
 800aa8c:	466a      	mov	r2, sp
 800aa8e:	89f3      	ldrh	r3, [r6, #14]
        fill_area.x1 = coords->x1;
 800aa90:	a91c      	add	r1, sp, #112	; 0x70
        lv_color_t color = dsc->border_color;
 800aa92:	8613      	strh	r3, [r2, #48]	; 0x30
        lv_blend_mode_t blend_mode = dsc->border_blend_mode;
 800aa94:	7d73      	ldrb	r3, [r6, #21]
 800aa96:	930b      	str	r3, [sp, #44]	; 0x2c
        fill_area.x1 = coords->x1;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	5ef8      	ldrsh	r0, [r7, r3]
 800aa9c:	8008      	strh	r0, [r1, #0]
        fill_area.x2 = coords->x2;
 800aa9e:	2204      	movs	r2, #4
 800aaa0:	5ebb      	ldrsh	r3, [r7, r2]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800aaa2:	aa1a      	add	r2, sp, #104	; 0x68
        fill_area.x2 = coords->x2;
 800aaa4:	9309      	str	r3, [sp, #36]	; 0x24
 800aaa6:	808b      	strh	r3, [r1, #4]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800aaa8:	2302      	movs	r3, #2
 800aaaa:	5ed2      	ldrsh	r2, [r2, r3]
 800aaac:	4694      	mov	ip, r2
 800aaae:	9a06      	ldr	r2, [sp, #24]
 800aab0:	8a52      	ldrh	r2, [r2, #18]
 800aab2:	4462      	add	r2, ip
 800aab4:	b212      	sxth	r2, r2
 800aab6:	804a      	strh	r2, [r1, #2]
        fill_area.y2 = fill_area.y1;
 800aab8:	80ca      	strh	r2, [r1, #6]
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
 800aaba:	2312      	movs	r3, #18
 800aabc:	5ef2      	ldrsh	r2, [r6, r3]
 800aabe:	2a04      	cmp	r2, #4
 800aac0:	d130      	bne.n	800ab24 <lv_draw_rect+0xac8>
        uint32_t buf_ofs = 0;
 800aac2:	2300      	movs	r3, #0
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
 800aac4:	1900      	adds	r0, r0, r4
 800aac6:	8088      	strh	r0, [r1, #4]
            buf_ofs = fill_area.x1 - coords->x1;
 800aac8:	9308      	str	r3, [sp, #32]
        volatile bool top_only = false;
 800aaca:	2316      	movs	r3, #22
 800aacc:	a910      	add	r1, sp, #64	; 0x40
 800aace:	185b      	adds	r3, r3, r1
        volatile bool bottom_only = false;
 800aad0:	2117      	movs	r1, #23
        volatile bool top_only = false;
 800aad2:	2000      	movs	r0, #0
        volatile bool bottom_only = false;
 800aad4:	ae10      	add	r6, sp, #64	; 0x40
 800aad6:	1989      	adds	r1, r1, r6
        volatile bool top_only = false;
 800aad8:	7018      	strb	r0, [r3, #0]
        volatile bool bottom_only = false;
 800aada:	7008      	strb	r0, [r1, #0]
 800aadc:	3001      	adds	r0, #1
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
 800aade:	2a02      	cmp	r2, #2
 800aae0:	d12a      	bne.n	800ab38 <lv_draw_rect+0xadc>
 800aae2:	7018      	strb	r0, [r3, #0]
        volatile bool normal = !top_only && !bottom_only ? true : false;
 800aae4:	781a      	ldrb	r2, [r3, #0]
 800aae6:	2300      	movs	r3, #0
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d105      	bne.n	800aaf8 <lv_draw_rect+0xa9c>
 800aaec:	aa10      	add	r2, sp, #64	; 0x40
 800aaee:	3317      	adds	r3, #23
 800aaf0:	189b      	adds	r3, r3, r2
 800aaf2:	781a      	ldrb	r2, [r3, #0]
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	4053      	eors	r3, r2
 800aaf8:	2201      	movs	r2, #1
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800aafa:	4666      	mov	r6, ip
        volatile bool normal = !top_only && !bottom_only ? true : false;
 800aafc:	4013      	ands	r3, r2
 800aafe:	aa18      	add	r2, sp, #96	; 0x60
 800ab00:	7013      	strb	r3, [r2, #0]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800ab02:	ab1a      	add	r3, sp, #104	; 0x68
 800ab04:	2206      	movs	r2, #6
 800ab06:	5e9b      	ldrsh	r3, [r3, r2]
 800ab08:	429e      	cmp	r6, r3
 800ab0a:	dd1e      	ble.n	800ab4a <lv_draw_rect+0xaee>
        lv_draw_mask_remove_id(mask_rin_id);
 800ab0c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ab0e:	f7ff f93f 	bl	8009d90 <lv_draw_mask_remove_id>
        lv_draw_mask_remove_id(mask_rout_id);
 800ab12:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ab14:	f7ff f93c 	bl	8009d90 <lv_draw_mask_remove_id>
        _lv_mem_buf_release(mask_buf);
 800ab18:	0028      	movs	r0, r5
 800ab1a:	e4a9      	b.n	800a470 <lv_draw_rect+0x414>
        int16_t mask_rout_id = LV_MASK_ID_INV;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	425b      	negs	r3, r3
 800ab20:	930a      	str	r3, [sp, #40]	; 0x28
 800ab22:	e7a1      	b.n	800aa68 <lv_draw_rect+0xa0c>
        uint32_t buf_ofs = 0;
 800ab24:	2600      	movs	r6, #0
 800ab26:	9608      	str	r6, [sp, #32]
        else if(dsc->border_side == LV_BORDER_SIDE_RIGHT) {
 800ab28:	2a08      	cmp	r2, #8
 800ab2a:	d1ce      	bne.n	800aaca <lv_draw_rect+0xa6e>
            fill_area.x1 = coords->x2 - corner_size;
 800ab2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab2e:	1b1b      	subs	r3, r3, r4
 800ab30:	b21b      	sxth	r3, r3
 800ab32:	800b      	strh	r3, [r1, #0]
            buf_ofs = fill_area.x1 - coords->x1;
 800ab34:	1a1b      	subs	r3, r3, r0
 800ab36:	e7c7      	b.n	800aac8 <lv_draw_rect+0xa6c>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
 800ab38:	2a01      	cmp	r2, #1
 800ab3a:	d101      	bne.n	800ab40 <lv_draw_rect+0xae4>
 800ab3c:	700a      	strb	r2, [r1, #0]
 800ab3e:	e7d1      	b.n	800aae4 <lv_draw_rect+0xa88>
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
 800ab40:	2a03      	cmp	r2, #3
 800ab42:	d1cf      	bne.n	800aae4 <lv_draw_rect+0xa88>
            top_only = true;
 800ab44:	7018      	strb	r0, [r3, #0]
            bottom_only = true;
 800ab46:	7008      	strb	r0, [r1, #0]
 800ab48:	e7cc      	b.n	800aae4 <lv_draw_rect+0xa88>
            if(normal ||
 800ab4a:	ab18      	add	r3, sp, #96	; 0x60
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d118      	bne.n	800ab84 <lv_draw_rect+0xb28>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 800ab52:	aa10      	add	r2, sp, #64	; 0x40
 800ab54:	3316      	adds	r3, #22
 800ab56:	189b      	adds	r3, r3, r2
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	aa1c      	add	r2, sp, #112	; 0x70
 800ab5c:	2102      	movs	r1, #2
 800ab5e:	5e52      	ldrsh	r2, [r2, r1]
            if(normal ||
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d004      	beq.n	800ab6e <lv_draw_rect+0xb12>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 800ab64:	2102      	movs	r1, #2
 800ab66:	5e7b      	ldrsh	r3, [r7, r1]
 800ab68:	191b      	adds	r3, r3, r4
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	dd0a      	ble.n	800ab84 <lv_draw_rect+0xb28>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
 800ab6e:	2317      	movs	r3, #23
 800ab70:	a910      	add	r1, sp, #64	; 0x40
 800ab72:	185b      	adds	r3, r3, r1
 800ab74:	781b      	ldrb	r3, [r3, #0]
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d022      	beq.n	800abc0 <lv_draw_rect+0xb64>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
 800ab7a:	2106      	movs	r1, #6
 800ab7c:	5e7b      	ldrsh	r3, [r7, r1]
 800ab7e:	1b1b      	subs	r3, r3, r4
 800ab80:	429a      	cmp	r2, r3
 800ab82:	db1d      	blt.n	800abc0 <lv_draw_rect+0xb64>
                _lv_memset_ff(mask_buf, draw_area_w);
 800ab84:	9907      	ldr	r1, [sp, #28]
 800ab86:	0028      	movs	r0, r5
 800ab88:	f001 fd76 	bl	800c678 <_lv_memset_ff>
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800ab8c:	9b06      	ldr	r3, [sp, #24]
 800ab8e:	0028      	movs	r0, r5
 800ab90:	8a5a      	ldrh	r2, [r3, #18]
 800ab92:	8a19      	ldrh	r1, [r3, #16]
 800ab94:	ab1a      	add	r3, sp, #104	; 0x68
 800ab96:	881b      	ldrh	r3, [r3, #0]
 800ab98:	1992      	adds	r2, r2, r6
 800ab9a:	18c9      	adds	r1, r1, r3
 800ab9c:	b212      	sxth	r2, r2
 800ab9e:	b209      	sxth	r1, r1
 800aba0:	9b07      	ldr	r3, [sp, #28]
 800aba2:	f7ff f8d5 	bl	8009d50 <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fill_area, color, mask_buf + buf_ofs, mask_res, opa, blend_mode);
 800aba6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aba8:	9b08      	ldr	r3, [sp, #32]
 800abaa:	9202      	str	r2, [sp, #8]
 800abac:	9a05      	ldr	r2, [sp, #20]
 800abae:	9000      	str	r0, [sp, #0]
 800abb0:	9201      	str	r2, [sp, #4]
 800abb2:	466a      	mov	r2, sp
 800abb4:	18eb      	adds	r3, r5, r3
 800abb6:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800abb8:	a91c      	add	r1, sp, #112	; 0x70
 800abba:	9804      	ldr	r0, [sp, #16]
 800abbc:	f7fc f98c 	bl	8006ed8 <_lv_blend_fill>
            fill_area.y1++;
 800abc0:	ab1c      	add	r3, sp, #112	; 0x70
 800abc2:	885a      	ldrh	r2, [r3, #2]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800abc4:	3601      	adds	r6, #1
            fill_area.y1++;
 800abc6:	3201      	adds	r2, #1
 800abc8:	805a      	strh	r2, [r3, #2]
            fill_area.y2++;
 800abca:	88da      	ldrh	r2, [r3, #6]
 800abcc:	3201      	adds	r2, #1
 800abce:	80da      	strh	r2, [r3, #6]
 800abd0:	e797      	b.n	800ab02 <lv_draw_rect+0xaa6>
            if(grad_dir == LV_GRAD_DIR_VER) {
 800abd2:	9b06      	ldr	r3, [sp, #24]
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	d100      	bne.n	800abda <lv_draw_rect+0xb7e>
 800abd8:	e5bf      	b.n	800a75a <lv_draw_rect+0x6fe>
            opa2 = opa;
 800abda:	9b05      	ldr	r3, [sp, #20]
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 800abdc:	2401      	movs	r4, #1
            opa2 = opa;
 800abde:	930a      	str	r3, [sp, #40]	; 0x28
 800abe0:	e540      	b.n	800a664 <lv_draw_rect+0x608>

0800abe2 <_lv_img_buf_get_transformed_area>:
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
#else
    LV_UNUSED(angle);
    LV_UNUSED(zoom);
    LV_UNUSED(pivot);
    res->x1 = 0;
 800abe2:	2300      	movs	r3, #0
    res->y1 = 0;
    res->x2 = w - 1;
 800abe4:	3901      	subs	r1, #1
    res->y2 = h - 1;
 800abe6:	3a01      	subs	r2, #1
    res->x1 = 0;
 800abe8:	8003      	strh	r3, [r0, #0]
    res->y1 = 0;
 800abea:	8043      	strh	r3, [r0, #2]
    res->x2 = w - 1;
 800abec:	8081      	strh	r1, [r0, #4]
    res->y2 = h - 1;
 800abee:	80c2      	strh	r2, [r0, #6]
#endif
}
 800abf0:	4770      	bx	lr

0800abf2 <lv_img_cache_match>:
 *   STATIC FUNCTIONS
 **********************/

#if LV_IMG_CACHE_DEF_SIZE
static bool lv_img_cache_match(const void * src1, const void * src2)
{
 800abf2:	b570      	push	{r4, r5, r6, lr}
 800abf4:	0004      	movs	r4, r0
 800abf6:	000d      	movs	r5, r1
    lv_img_src_t src_type = lv_img_src_get_type(src1);
 800abf8:	f7fd f98a 	bl	8007f10 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE)
 800abfc:	2800      	cmp	r0, #0
 800abfe:	d104      	bne.n	800ac0a <lv_img_cache_match+0x18>
        return src1 == src2;
 800ac00:	1b64      	subs	r4, r4, r5
 800ac02:	4260      	negs	r0, r4
 800ac04:	4160      	adcs	r0, r4
    if(src_type != LV_IMG_SRC_FILE)
        return false;
    if(lv_img_src_get_type(src2) != LV_IMG_SRC_FILE)
        return false;
    return strcmp(src1, src2) == 0;
 800ac06:	b2c0      	uxtb	r0, r0
 800ac08:	e002      	b.n	800ac10 <lv_img_cache_match+0x1e>
    if(src_type != LV_IMG_SRC_FILE)
 800ac0a:	2801      	cmp	r0, #1
 800ac0c:	d001      	beq.n	800ac12 <lv_img_cache_match+0x20>
        return false;
 800ac0e:	2000      	movs	r0, #0
}
 800ac10:	bd70      	pop	{r4, r5, r6, pc}
    if(lv_img_src_get_type(src2) != LV_IMG_SRC_FILE)
 800ac12:	0028      	movs	r0, r5
 800ac14:	f7fd f97c 	bl	8007f10 <lv_img_src_get_type>
 800ac18:	2801      	cmp	r0, #1
 800ac1a:	d1f8      	bne.n	800ac0e <lv_img_cache_match+0x1c>
    return strcmp(src1, src2) == 0;
 800ac1c:	0020      	movs	r0, r4
 800ac1e:	0029      	movs	r1, r5
 800ac20:	f7f5 fa6e 	bl	8000100 <strcmp>
 800ac24:	4244      	negs	r4, r0
 800ac26:	4160      	adcs	r0, r4
 800ac28:	e7ed      	b.n	800ac06 <lv_img_cache_match+0x14>
	...

0800ac2c <_lv_img_cache_open>:
{
 800ac2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac2e:	466b      	mov	r3, sp
 800ac30:	80d9      	strh	r1, [r3, #6]
    if(entry_cnt == 0) {
 800ac32:	4b39      	ldr	r3, [pc, #228]	; (800ad18 <_lv_img_cache_open+0xec>)
{
 800ac34:	0007      	movs	r7, r0
    if(entry_cnt == 0) {
 800ac36:	8819      	ldrh	r1, [r3, #0]
        return NULL;
 800ac38:	1e0c      	subs	r4, r1, #0
    if(entry_cnt == 0) {
 800ac3a:	d04b      	beq.n	800acd4 <_lv_img_cache_open+0xa8>
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 800ac3c:	4b37      	ldr	r3, [pc, #220]	; (800ad1c <_lv_img_cache_open+0xf0>)
 800ac3e:	2224      	movs	r2, #36	; 0x24
 800ac40:	681e      	ldr	r6, [r3, #0]
 800ac42:	434a      	muls	r2, r1
 800ac44:	0033      	movs	r3, r6
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
 800ac46:	4836      	ldr	r0, [pc, #216]	; (800ad20 <_lv_img_cache_open+0xf4>)
 800ac48:	3320      	adds	r3, #32
 800ac4a:	189a      	adds	r2, r3, r2
    for(i = 0; i < entry_cnt; i++) {
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d124      	bne.n	800ac9a <_lv_img_cache_open+0x6e>
    for(i = 0; i < entry_cnt; i++) {
 800ac50:	2500      	movs	r5, #0
 800ac52:	4b31      	ldr	r3, [pc, #196]	; (800ad18 <_lv_img_cache_open+0xec>)
 800ac54:	8819      	ldrh	r1, [r3, #0]
 800ac56:	42a9      	cmp	r1, r5
 800ac58:	d826      	bhi.n	800aca8 <_lv_img_cache_open+0x7c>
 800ac5a:	0032      	movs	r2, r6
    cached_src = &cache[0];
 800ac5c:	0034      	movs	r4, r6
    for(i = 1; i < entry_cnt; i++) {
 800ac5e:	2301      	movs	r3, #1
 800ac60:	3224      	adds	r2, #36	; 0x24
 800ac62:	4299      	cmp	r1, r3
 800ac64:	d83d      	bhi.n	800ace2 <_lv_img_cache_open+0xb6>
    if(cached_src->dec_dsc.src) {
 800ac66:	6863      	ldr	r3, [r4, #4]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d002      	beq.n	800ac72 <_lv_img_cache_open+0x46>
        lv_img_decoder_close(&cached_src->dec_dsc);
 800ac6c:	0020      	movs	r0, r4
 800ac6e:	f000 f99c 	bl	800afaa <lv_img_decoder_close>
    uint32_t t_start  = lv_tick_get();
 800ac72:	f000 fe49 	bl	800b908 <lv_tick_get>
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
 800ac76:	466b      	mov	r3, sp
    uint32_t t_start  = lv_tick_get();
 800ac78:	0005      	movs	r5, r0
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
 800ac7a:	88da      	ldrh	r2, [r3, #6]
 800ac7c:	0039      	movs	r1, r7
 800ac7e:	0020      	movs	r0, r4
 800ac80:	f000 f930 	bl	800aee4 <lv_img_decoder_open>
 800ac84:	1e06      	subs	r6, r0, #0
    if(open_res == LV_RES_INV) {
 800ac86:	d137      	bne.n	800acf8 <_lv_img_cache_open+0xcc>
        _lv_memset_00(cached_src, sizeof(lv_img_cache_entry_t));
 800ac88:	0020      	movs	r0, r4
 800ac8a:	2124      	movs	r1, #36	; 0x24
 800ac8c:	f001 fcca 	bl	800c624 <_lv_memset_00>
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
 800ac90:	2380      	movs	r3, #128	; 0x80
 800ac92:	061b      	lsls	r3, r3, #24
 800ac94:	6223      	str	r3, [r4, #32]
        return NULL;
 800ac96:	0034      	movs	r4, r6
 800ac98:	e01c      	b.n	800acd4 <_lv_img_cache_open+0xa8>
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
 800ac9a:	6819      	ldr	r1, [r3, #0]
 800ac9c:	4281      	cmp	r1, r0
 800ac9e:	db01      	blt.n	800aca4 <_lv_img_cache_open+0x78>
            cache[i].life -= LV_IMG_CACHE_AGING;
 800aca0:	3901      	subs	r1, #1
 800aca2:	6019      	str	r1, [r3, #0]
 800aca4:	3324      	adds	r3, #36	; 0x24
 800aca6:	e7d1      	b.n	800ac4c <_lv_img_cache_open+0x20>
        if(color.full == cache[i].dec_dsc.color.full &&
 800aca8:	2424      	movs	r4, #36	; 0x24
 800acaa:	466b      	mov	r3, sp
 800acac:	436c      	muls	r4, r5
 800acae:	1934      	adds	r4, r6, r4
 800acb0:	88db      	ldrh	r3, [r3, #6]
 800acb2:	8922      	ldrh	r2, [r4, #8]
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d111      	bne.n	800acdc <_lv_img_cache_open+0xb0>
           lv_img_cache_match(src, cache[i].dec_dsc.src)) {
 800acb8:	6861      	ldr	r1, [r4, #4]
 800acba:	0038      	movs	r0, r7
 800acbc:	f7ff ff99 	bl	800abf2 <lv_img_cache_match>
        if(color.full == cache[i].dec_dsc.color.full &&
 800acc0:	2800      	cmp	r0, #0
 800acc2:	d00b      	beq.n	800acdc <_lv_img_cache_open+0xb0>
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
 800acc4:	6962      	ldr	r2, [r4, #20]
 800acc6:	6a23      	ldr	r3, [r4, #32]
 800acc8:	189b      	adds	r3, r3, r2
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
 800acca:	22fa      	movs	r2, #250	; 0xfa
 800accc:	0092      	lsls	r2, r2, #2
 800acce:	4293      	cmp	r3, r2
 800acd0:	dc02      	bgt.n	800acd8 <_lv_img_cache_open+0xac>
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
 800acd2:	6223      	str	r3, [r4, #32]
}
 800acd4:	0020      	movs	r0, r4
 800acd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
 800acd8:	6222      	str	r2, [r4, #32]
 800acda:	e7fb      	b.n	800acd4 <_lv_img_cache_open+0xa8>
    for(i = 0; i < entry_cnt; i++) {
 800acdc:	3501      	adds	r5, #1
 800acde:	b2ad      	uxth	r5, r5
 800ace0:	e7b7      	b.n	800ac52 <_lv_img_cache_open+0x26>
        if(cache[i].life < cached_src->life) {
 800ace2:	6a15      	ldr	r5, [r2, #32]
 800ace4:	6a26      	ldr	r6, [r4, #32]
 800ace6:	0010      	movs	r0, r2
 800ace8:	42b5      	cmp	r5, r6
 800acea:	db00      	blt.n	800acee <_lv_img_cache_open+0xc2>
 800acec:	0020      	movs	r0, r4
    for(i = 1; i < entry_cnt; i++) {
 800acee:	3301      	adds	r3, #1
 800acf0:	b29b      	uxth	r3, r3
 800acf2:	3224      	adds	r2, #36	; 0x24
 800acf4:	0004      	movs	r4, r0
 800acf6:	e7b4      	b.n	800ac62 <_lv_img_cache_open+0x36>
    cached_src->life = 0;
 800acf8:	2300      	movs	r3, #0
 800acfa:	6223      	str	r3, [r4, #32]
    if(cached_src->dec_dsc.time_to_open == 0) {
 800acfc:	6963      	ldr	r3, [r4, #20]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d103      	bne.n	800ad0a <_lv_img_cache_open+0xde>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 800ad02:	0028      	movs	r0, r5
 800ad04:	f000 fe0e 	bl	800b924 <lv_tick_elaps>
 800ad08:	6160      	str	r0, [r4, #20]
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 800ad0a:	6963      	ldr	r3, [r4, #20]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d1e1      	bne.n	800acd4 <_lv_img_cache_open+0xa8>
 800ad10:	3301      	adds	r3, #1
 800ad12:	6163      	str	r3, [r4, #20]
 800ad14:	e7de      	b.n	800acd4 <_lv_img_cache_open+0xa8>
 800ad16:	46c0      	nop			; (mov r8, r8)
 800ad18:	20005e46 	.word	0x20005e46
 800ad1c:	200071c4 	.word	0x200071c4
 800ad20:	80000002 	.word	0x80000002

0800ad24 <lv_img_cache_invalidate_src>:
{
 800ad24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad26:	0006      	movs	r6, r0
    for(i = 0; i < entry_cnt; i++) {
 800ad28:	2400      	movs	r4, #0
 800ad2a:	2724      	movs	r7, #36	; 0x24
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 800ad2c:	4b11      	ldr	r3, [pc, #68]	; (800ad74 <lv_img_cache_invalidate_src+0x50>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	9301      	str	r3, [sp, #4]
    for(i = 0; i < entry_cnt; i++) {
 800ad32:	4b11      	ldr	r3, [pc, #68]	; (800ad78 <lv_img_cache_invalidate_src+0x54>)
 800ad34:	881b      	ldrh	r3, [r3, #0]
 800ad36:	42a3      	cmp	r3, r4
 800ad38:	d800      	bhi.n	800ad3c <lv_img_cache_invalidate_src+0x18>
}
 800ad3a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ad3c:	003d      	movs	r5, r7
 800ad3e:	4365      	muls	r5, r4
 800ad40:	9b01      	ldr	r3, [sp, #4]
 800ad42:	195d      	adds	r5, r3, r5
        if(src == NULL || lv_img_cache_match(src, cache[i].dec_dsc.src)) {
 800ad44:	2e00      	cmp	r6, #0
 800ad46:	d107      	bne.n	800ad58 <lv_img_cache_invalidate_src+0x34>
            if(cache[i].dec_dsc.src != NULL) {
 800ad48:	686b      	ldr	r3, [r5, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d10d      	bne.n	800ad6a <lv_img_cache_invalidate_src+0x46>
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
 800ad4e:	0039      	movs	r1, r7
 800ad50:	0028      	movs	r0, r5
 800ad52:	f001 fc67 	bl	800c624 <_lv_memset_00>
 800ad56:	e005      	b.n	800ad64 <lv_img_cache_invalidate_src+0x40>
        if(src == NULL || lv_img_cache_match(src, cache[i].dec_dsc.src)) {
 800ad58:	6869      	ldr	r1, [r5, #4]
 800ad5a:	0030      	movs	r0, r6
 800ad5c:	f7ff ff49 	bl	800abf2 <lv_img_cache_match>
 800ad60:	2800      	cmp	r0, #0
 800ad62:	d1f1      	bne.n	800ad48 <lv_img_cache_invalidate_src+0x24>
    for(i = 0; i < entry_cnt; i++) {
 800ad64:	3401      	adds	r4, #1
 800ad66:	b2a4      	uxth	r4, r4
 800ad68:	e7e3      	b.n	800ad32 <lv_img_cache_invalidate_src+0xe>
                lv_img_decoder_close(&cache[i].dec_dsc);
 800ad6a:	0028      	movs	r0, r5
 800ad6c:	f000 f91d 	bl	800afaa <lv_img_decoder_close>
 800ad70:	e7ed      	b.n	800ad4e <lv_img_cache_invalidate_src+0x2a>
 800ad72:	46c0      	nop			; (mov r8, r8)
 800ad74:	200071c4 	.word	0x200071c4
 800ad78:	20005e46 	.word	0x20005e46

0800ad7c <lv_img_cache_set_size>:
{
 800ad7c:	b570      	push	{r4, r5, r6, lr}
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 800ad7e:	4d0d      	ldr	r5, [pc, #52]	; (800adb4 <lv_img_cache_set_size+0x38>)
{
 800ad80:	0006      	movs	r6, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 800ad82:	682b      	ldr	r3, [r5, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d005      	beq.n	800ad94 <lv_img_cache_set_size+0x18>
        lv_img_cache_invalidate_src(NULL);
 800ad88:	2000      	movs	r0, #0
 800ad8a:	f7ff ffcb 	bl	800ad24 <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
 800ad8e:	6828      	ldr	r0, [r5, #0]
 800ad90:	f001 fa8e 	bl	800c2b0 <lv_mem_free>
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
 800ad94:	2424      	movs	r4, #36	; 0x24
 800ad96:	4374      	muls	r4, r6
 800ad98:	0020      	movs	r0, r4
 800ad9a:	f001 fa35 	bl	800c208 <lv_mem_alloc>
 800ad9e:	4b06      	ldr	r3, [pc, #24]	; (800adb8 <lv_img_cache_set_size+0x3c>)
 800ada0:	6028      	str	r0, [r5, #0]
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
 800ada2:	2800      	cmp	r0, #0
 800ada4:	d101      	bne.n	800adaa <lv_img_cache_set_size+0x2e>
        entry_cnt = 0;
 800ada6:	8018      	strh	r0, [r3, #0]
}
 800ada8:	bd70      	pop	{r4, r5, r6, pc}
    _lv_memset_00(LV_GC_ROOT(_lv_img_cache_array), entry_cnt * sizeof(lv_img_cache_entry_t));
 800adaa:	0021      	movs	r1, r4
    entry_cnt = new_entry_cnt;
 800adac:	801e      	strh	r6, [r3, #0]
    _lv_memset_00(LV_GC_ROOT(_lv_img_cache_array), entry_cnt * sizeof(lv_img_cache_entry_t));
 800adae:	f001 fc39 	bl	800c624 <_lv_memset_00>
 800adb2:	e7f9      	b.n	800ada8 <lv_img_cache_set_size+0x2c>
 800adb4:	200071c4 	.word	0x200071c4
 800adb8:	20005e46 	.word	0x20005e46

0800adbc <lv_img_decoder_built_in_read_line>:
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
        return LV_RES_INV;
    }

    return res;
}
 800adbc:	2000      	movs	r0, #0
 800adbe:	4770      	bx	lr

0800adc0 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 800adc0:	b570      	push	{r4, r5, r6, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800adc2:	69cc      	ldr	r4, [r1, #28]
{
 800adc4:	000d      	movs	r5, r1
    if(user_data) {
 800adc6:	2c00      	cmp	r4, #0
 800adc8:	d00e      	beq.n	800ade8 <lv_img_decoder_built_in_close+0x28>
#if LV_USE_FILESYSTEM
        if(dsc->src_type == LV_IMG_SRC_FILE)
            lv_fs_close(&user_data->f);
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
 800adca:	6820      	ldr	r0, [r4, #0]
 800adcc:	2800      	cmp	r0, #0
 800adce:	d001      	beq.n	800add4 <lv_img_decoder_built_in_close+0x14>
 800add0:	f001 fa6e 	bl	800c2b0 <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 800add4:	6860      	ldr	r0, [r4, #4]
 800add6:	2800      	cmp	r0, #0
 800add8:	d001      	beq.n	800adde <lv_img_decoder_built_in_close+0x1e>
 800adda:	f001 fa69 	bl	800c2b0 <lv_mem_free>

        lv_mem_free(user_data);
 800adde:	0020      	movs	r0, r4
 800ade0:	f001 fa66 	bl	800c2b0 <lv_mem_free>
        dsc->user_data = NULL;
 800ade4:	2300      	movs	r3, #0
 800ade6:	61eb      	str	r3, [r5, #28]
    }
}
 800ade8:	bd70      	pop	{r4, r5, r6, pc}

0800adea <lv_img_decoder_built_in_open>:
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800adea:	7a8a      	ldrb	r2, [r1, #10]
{
 800adec:	b510      	push	{r4, lr}
        return LV_RES_INV;
 800adee:	2300      	movs	r3, #0
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800adf0:	2a01      	cmp	r2, #1
 800adf2:	d011      	beq.n	800ae18 <lv_img_decoder_built_in_open+0x2e>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d103      	bne.n	800ae00 <lv_img_decoder_built_in_open+0x16>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
 800adf8:	684b      	ldr	r3, [r1, #4]
 800adfa:	689c      	ldr	r4, [r3, #8]
        return LV_RES_INV;
 800adfc:	1e23      	subs	r3, r4, #0
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
 800adfe:	d00b      	beq.n	800ae18 <lv_img_decoder_built_in_open+0x2e>
    lv_img_cf_t cf = dsc->header.cf;
 800ae00:	7b0b      	ldrb	r3, [r1, #12]
 800ae02:	06db      	lsls	r3, r3, #27
 800ae04:	0edb      	lsrs	r3, r3, #27
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800ae06:	3b04      	subs	r3, #4
 800ae08:	2b02      	cmp	r3, #2
 800ae0a:	d807      	bhi.n	800ae1c <lv_img_decoder_built_in_open+0x32>
            return LV_RES_OK;
 800ae0c:	2301      	movs	r3, #1
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800ae0e:	2a00      	cmp	r2, #0
 800ae10:	d102      	bne.n	800ae18 <lv_img_decoder_built_in_open+0x2e>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 800ae12:	684a      	ldr	r2, [r1, #4]
 800ae14:	6892      	ldr	r2, [r2, #8]
 800ae16:	610a      	str	r2, [r1, #16]
}
 800ae18:	0018      	movs	r0, r3
 800ae1a:	bd10      	pop	{r4, pc}
        lv_img_decoder_built_in_close(decoder, dsc);
 800ae1c:	f7ff ffd0 	bl	800adc0 <lv_img_decoder_built_in_close>
        return LV_RES_INV;
 800ae20:	2300      	movs	r3, #0
 800ae22:	e7f9      	b.n	800ae18 <lv_img_decoder_built_in_open+0x2e>

0800ae24 <lv_img_decoder_built_in_info>:
{
 800ae24:	b570      	push	{r4, r5, r6, lr}
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800ae26:	0008      	movs	r0, r1
{
 800ae28:	000d      	movs	r5, r1
 800ae2a:	0014      	movs	r4, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800ae2c:	f7fd f870 	bl	8007f10 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 800ae30:	2800      	cmp	r0, #0
 800ae32:	d11e      	bne.n	800ae72 <lv_img_decoder_built_in_info+0x4e>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 800ae34:	782a      	ldrb	r2, [r5, #0]
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800ae36:	0003      	movs	r3, r0
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 800ae38:	06d2      	lsls	r2, r2, #27
 800ae3a:	0ed2      	lsrs	r2, r2, #27
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800ae3c:	1f11      	subs	r1, r2, #4
 800ae3e:	290a      	cmp	r1, #10
 800ae40:	d815      	bhi.n	800ae6e <lv_img_decoder_built_in_info+0x4a>
        header->w  = ((lv_img_dsc_t *)src)->header.w;
 800ae42:	6820      	ldr	r0, [r4, #0]
 800ae44:	4914      	ldr	r1, [pc, #80]	; (800ae98 <lv_img_decoder_built_in_info+0x74>)
 800ae46:	682b      	ldr	r3, [r5, #0]
 800ae48:	4001      	ands	r1, r0
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800ae4a:	201f      	movs	r0, #31
        header->w  = ((lv_img_dsc_t *)src)->header.w;
 800ae4c:	02db      	lsls	r3, r3, #11
 800ae4e:	0d5b      	lsrs	r3, r3, #21
 800ae50:	029b      	lsls	r3, r3, #10
 800ae52:	430b      	orrs	r3, r1
 800ae54:	6023      	str	r3, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800ae56:	886b      	ldrh	r3, [r5, #2]
 800ae58:	095b      	lsrs	r3, r3, #5
 800ae5a:	0159      	lsls	r1, r3, #5
 800ae5c:	8863      	ldrh	r3, [r4, #2]
 800ae5e:	4003      	ands	r3, r0
 800ae60:	430b      	orrs	r3, r1
 800ae62:	8063      	strh	r3, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 800ae64:	7823      	ldrb	r3, [r4, #0]
 800ae66:	4383      	bics	r3, r0
 800ae68:	431a      	orrs	r2, r3
 800ae6a:	7022      	strb	r2, [r4, #0]
    return LV_RES_OK;
 800ae6c:	2301      	movs	r3, #1
}
 800ae6e:	0018      	movs	r0, r3
 800ae70:	bd70      	pop	{r4, r5, r6, pc}
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800ae72:	2300      	movs	r3, #0
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 800ae74:	2802      	cmp	r0, #2
 800ae76:	d1fa      	bne.n	800ae6e <lv_img_decoder_built_in_info+0x4a>
        header->w = 1;
 800ae78:	6823      	ldr	r3, [r4, #0]
 800ae7a:	4a07      	ldr	r2, [pc, #28]	; (800ae98 <lv_img_decoder_built_in_info+0x74>)
 800ae7c:	401a      	ands	r2, r3
 800ae7e:	2380      	movs	r3, #128	; 0x80
 800ae80:	00db      	lsls	r3, r3, #3
 800ae82:	4313      	orrs	r3, r2
        header->h = 1;
 800ae84:	2220      	movs	r2, #32
        header->w = 1;
 800ae86:	6023      	str	r3, [r4, #0]
        header->h = 1;
 800ae88:	8062      	strh	r2, [r4, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 800ae8a:	32c0      	adds	r2, #192	; 0xc0
 800ae8c:	4013      	ands	r3, r2
 800ae8e:	3ad5      	subs	r2, #213	; 0xd5
 800ae90:	4313      	orrs	r3, r2
 800ae92:	7023      	strb	r3, [r4, #0]
 800ae94:	e7ea      	b.n	800ae6c <lv_img_decoder_built_in_info+0x48>
 800ae96:	46c0      	nop			; (mov r8, r8)
 800ae98:	ffe003ff 	.word	0xffe003ff

0800ae9c <lv_img_decoder_get_info>:
{
 800ae9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae9e:	000e      	movs	r6, r1
 800aea0:	9001      	str	r0, [sp, #4]
   _lv_memset_00(header, sizeof(lv_img_header_t));
 800aea2:	2104      	movs	r1, #4
 800aea4:	0030      	movs	r0, r6
 800aea6:	f001 fbbd 	bl	800c624 <_lv_memset_00>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 800aeaa:	4f0d      	ldr	r7, [pc, #52]	; (800aee0 <lv_img_decoder_get_info+0x44>)
    lv_res_t res = LV_RES_INV;
 800aeac:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 800aeae:	0038      	movs	r0, r7
 800aeb0:	f001 f85d 	bl	800bf6e <_lv_ll_get_head>
 800aeb4:	0004      	movs	r4, r0
 800aeb6:	2c00      	cmp	r4, #0
 800aeb8:	d101      	bne.n	800aebe <lv_img_decoder_get_info+0x22>
}
 800aeba:	0028      	movs	r0, r5
 800aebc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if(d->info_cb) {
 800aebe:	6823      	ldr	r3, [r4, #0]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d006      	beq.n	800aed2 <lv_img_decoder_get_info+0x36>
            res = d->info_cb(d, src, header);
 800aec4:	0032      	movs	r2, r6
 800aec6:	9901      	ldr	r1, [sp, #4]
 800aec8:	0020      	movs	r0, r4
 800aeca:	4798      	blx	r3
 800aecc:	0005      	movs	r5, r0
            if(res == LV_RES_OK) break;
 800aece:	2801      	cmp	r0, #1
 800aed0:	d0f3      	beq.n	800aeba <lv_img_decoder_get_info+0x1e>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 800aed2:	0021      	movs	r1, r4
 800aed4:	0038      	movs	r0, r7
 800aed6:	f001 f852 	bl	800bf7e <_lv_ll_get_next>
 800aeda:	0004      	movs	r4, r0
 800aedc:	e7eb      	b.n	800aeb6 <lv_img_decoder_get_info+0x1a>
 800aede:	46c0      	nop			; (mov r8, r8)
 800aee0:	20007110 	.word	0x20007110

0800aee4 <lv_img_decoder_open>:
{
 800aee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aee6:	0004      	movs	r4, r0
 800aee8:	000f      	movs	r7, r1
 800aeea:	1c15      	adds	r5, r2, #0
    _lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
 800aeec:	2120      	movs	r1, #32
 800aeee:	f001 fb99 	bl	800c624 <_lv_memset_00>
    dsc->color    = color;
 800aef2:	8125      	strh	r5, [r4, #8]
    dsc->src_type = lv_img_src_get_type(src);
 800aef4:	0038      	movs	r0, r7
 800aef6:	f7fd f80b 	bl	8007f10 <lv_img_src_get_type>
 800aefa:	72a0      	strb	r0, [r4, #10]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800aefc:	2801      	cmp	r0, #1
 800aefe:	d11b      	bne.n	800af38 <lv_img_decoder_open+0x54>
        size_t fnlen = strlen(src);
 800af00:	0038      	movs	r0, r7
 800af02:	f7f5 f907 	bl	8000114 <strlen>
        dsc->src = lv_mem_alloc(fnlen + 1);
 800af06:	3001      	adds	r0, #1
 800af08:	f001 f97e 	bl	800c208 <lv_mem_alloc>
            return LV_RES_INV;
 800af0c:	2600      	movs	r6, #0
        dsc->src = lv_mem_alloc(fnlen + 1);
 800af0e:	6060      	str	r0, [r4, #4]
        if(dsc->src == NULL) {
 800af10:	42b0      	cmp	r0, r6
 800af12:	d00f      	beq.n	800af34 <lv_img_decoder_open+0x50>
        strcpy((char *)dsc->src, src);
 800af14:	0039      	movs	r1, r7
 800af16:	f004 f86f 	bl	800eff8 <strcpy>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 800af1a:	481b      	ldr	r0, [pc, #108]	; (800af88 <lv_img_decoder_open+0xa4>)
 800af1c:	f001 f827 	bl	800bf6e <_lv_ll_get_head>
    lv_res_t res = LV_RES_INV;
 800af20:	2600      	movs	r6, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 800af22:	0005      	movs	r5, r0
 800af24:	2d00      	cmp	r5, #0
 800af26:	d109      	bne.n	800af3c <lv_img_decoder_open+0x58>
    if(dsc->src_type == LV_IMG_SRC_FILE)
 800af28:	7aa3      	ldrb	r3, [r4, #10]
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d102      	bne.n	800af34 <lv_img_decoder_open+0x50>
        lv_mem_free(dsc->src);
 800af2e:	6860      	ldr	r0, [r4, #4]
 800af30:	f001 f9be 	bl	800c2b0 <lv_mem_free>
}
 800af34:	0030      	movs	r0, r6
 800af36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        dsc->src = src;
 800af38:	6067      	str	r7, [r4, #4]
 800af3a:	e7ee      	b.n	800af1a <lv_img_decoder_open+0x36>
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
 800af3c:	682b      	ldr	r3, [r5, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d01c      	beq.n	800af7c <lv_img_decoder_open+0x98>
 800af42:	686a      	ldr	r2, [r5, #4]
 800af44:	2a00      	cmp	r2, #0
 800af46:	d019      	beq.n	800af7c <lv_img_decoder_open+0x98>
        res = d->info_cb(d, src, &dsc->header);
 800af48:	0022      	movs	r2, r4
 800af4a:	0039      	movs	r1, r7
 800af4c:	320c      	adds	r2, #12
 800af4e:	0028      	movs	r0, r5
 800af50:	9201      	str	r2, [sp, #4]
 800af52:	4798      	blx	r3
 800af54:	0006      	movs	r6, r0
        if(res != LV_RES_OK) continue;
 800af56:	2801      	cmp	r0, #1
 800af58:	d110      	bne.n	800af7c <lv_img_decoder_open+0x98>
        dsc->decoder = d;
 800af5a:	6025      	str	r5, [r4, #0]
        res = d->open_cb(d, dsc);
 800af5c:	0021      	movs	r1, r4
 800af5e:	0028      	movs	r0, r5
 800af60:	686b      	ldr	r3, [r5, #4]
 800af62:	4798      	blx	r3
 800af64:	0006      	movs	r6, r0
        if(res == LV_RES_OK) return res;
 800af66:	2801      	cmp	r0, #1
 800af68:	d0e4      	beq.n	800af34 <lv_img_decoder_open+0x50>
        _lv_memset_00(&dsc->header, sizeof(lv_img_header_t));
 800af6a:	2104      	movs	r1, #4
 800af6c:	9801      	ldr	r0, [sp, #4]
 800af6e:	f001 fb59 	bl	800c624 <_lv_memset_00>
        dsc->error_msg = NULL;
 800af72:	2300      	movs	r3, #0
 800af74:	61a3      	str	r3, [r4, #24]
        dsc->img_data  = NULL;
 800af76:	6123      	str	r3, [r4, #16]
        dsc->user_data = NULL;
 800af78:	61e3      	str	r3, [r4, #28]
        dsc->time_to_open = 0;
 800af7a:	6163      	str	r3, [r4, #20]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 800af7c:	0029      	movs	r1, r5
 800af7e:	4802      	ldr	r0, [pc, #8]	; (800af88 <lv_img_decoder_open+0xa4>)
 800af80:	f000 fffd 	bl	800bf7e <_lv_ll_get_next>
 800af84:	0005      	movs	r5, r0
 800af86:	e7cd      	b.n	800af24 <lv_img_decoder_open+0x40>
 800af88:	20007110 	.word	0x20007110

0800af8c <lv_img_decoder_read_line>:
{
 800af8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 800af8e:	6805      	ldr	r5, [r0, #0]
{
 800af90:	0006      	movs	r6, r0
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 800af92:	68ac      	ldr	r4, [r5, #8]
    lv_res_t res = LV_RES_INV;
 800af94:	1e20      	subs	r0, r4, #0
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 800af96:	d007      	beq.n	800afa8 <lv_img_decoder_read_line+0x1c>
 800af98:	9806      	ldr	r0, [sp, #24]
 800af9a:	9300      	str	r3, [sp, #0]
 800af9c:	9001      	str	r0, [sp, #4]
 800af9e:	0013      	movs	r3, r2
 800afa0:	0028      	movs	r0, r5
 800afa2:	000a      	movs	r2, r1
 800afa4:	0031      	movs	r1, r6
 800afa6:	47a0      	blx	r4
}
 800afa8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

0800afaa <lv_img_decoder_close>:
{
 800afaa:	b510      	push	{r4, lr}
 800afac:	0004      	movs	r4, r0
    if(dsc->decoder) {
 800afae:	6800      	ldr	r0, [r0, #0]
 800afb0:	2800      	cmp	r0, #0
 800afb2:	d00c      	beq.n	800afce <lv_img_decoder_close+0x24>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 800afb4:	68c3      	ldr	r3, [r0, #12]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d001      	beq.n	800afbe <lv_img_decoder_close+0x14>
 800afba:	0021      	movs	r1, r4
 800afbc:	4798      	blx	r3
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800afbe:	7aa3      	ldrb	r3, [r4, #10]
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d104      	bne.n	800afce <lv_img_decoder_close+0x24>
            lv_mem_free(dsc->src);
 800afc4:	6860      	ldr	r0, [r4, #4]
 800afc6:	f001 f973 	bl	800c2b0 <lv_mem_free>
            dsc->src = NULL;
 800afca:	2300      	movs	r3, #0
 800afcc:	6063      	str	r3, [r4, #4]
}
 800afce:	bd10      	pop	{r4, pc}

0800afd0 <lv_img_decoder_create>:
{
 800afd0:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
 800afd2:	4805      	ldr	r0, [pc, #20]	; (800afe8 <lv_img_decoder_create+0x18>)
 800afd4:	f000 ff8b 	bl	800beee <_lv_ll_ins_head>
 800afd8:	1e04      	subs	r4, r0, #0
    if(decoder == NULL) return NULL;
 800afda:	d002      	beq.n	800afe2 <lv_img_decoder_create+0x12>
    _lv_memset_00(decoder, sizeof(lv_img_decoder_t));
 800afdc:	2110      	movs	r1, #16
 800afde:	f001 fb21 	bl	800c624 <_lv_memset_00>
}
 800afe2:	0020      	movs	r0, r4
 800afe4:	bd10      	pop	{r4, pc}
 800afe6:	46c0      	nop			; (mov r8, r8)
 800afe8:	20007110 	.word	0x20007110

0800afec <_lv_img_decoder_init>:
{
 800afec:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
 800afee:	2110      	movs	r1, #16
 800aff0:	4807      	ldr	r0, [pc, #28]	; (800b010 <_lv_img_decoder_init+0x24>)
 800aff2:	f000 ff74 	bl	800bede <_lv_ll_init>
    decoder = lv_img_decoder_create();
 800aff6:	f7ff ffeb 	bl	800afd0 <lv_img_decoder_create>
    if(decoder == NULL) {
 800affa:	2800      	cmp	r0, #0
 800affc:	d007      	beq.n	800b00e <_lv_img_decoder_init+0x22>
    decoder->info_cb = info_cb;
 800affe:	4b05      	ldr	r3, [pc, #20]	; (800b014 <_lv_img_decoder_init+0x28>)
 800b000:	6003      	str	r3, [r0, #0]
    decoder->open_cb = open_cb;
 800b002:	4b05      	ldr	r3, [pc, #20]	; (800b018 <_lv_img_decoder_init+0x2c>)
 800b004:	6043      	str	r3, [r0, #4]
    decoder->read_line_cb = read_line_cb;
 800b006:	4b05      	ldr	r3, [pc, #20]	; (800b01c <_lv_img_decoder_init+0x30>)
 800b008:	6083      	str	r3, [r0, #8]
    decoder->close_cb = close_cb;
 800b00a:	4b05      	ldr	r3, [pc, #20]	; (800b020 <_lv_img_decoder_init+0x34>)
 800b00c:	60c3      	str	r3, [r0, #12]
}
 800b00e:	bd10      	pop	{r4, pc}
 800b010:	20007110 	.word	0x20007110
 800b014:	0800ae25 	.word	0x0800ae25
 800b018:	0800adeb 	.word	0x0800adeb
 800b01c:	0800adbd 	.word	0x0800adbd
 800b020:	0800adc1 	.word	0x0800adc1

0800b024 <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter an UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
 800b024:	b510      	push	{r4, lr}
    return font_p->get_glyph_bitmap(font_p, letter);
 800b026:	6843      	ldr	r3, [r0, #4]
 800b028:	4798      	blx	r3
}
 800b02a:	bd10      	pop	{r4, pc}

0800b02c <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
 800b02c:	b510      	push	{r4, lr}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 800b02e:	6804      	ldr	r4, [r0, #0]
 800b030:	47a0      	blx	r4
}
 800b032:	bd10      	pop	{r4, pc}

0800b034 <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 800b034:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 800b036:	ac01      	add	r4, sp, #4
{
 800b038:	0013      	movs	r3, r2
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 800b03a:	000a      	movs	r2, r1
 800b03c:	0021      	movs	r1, r4
 800b03e:	f7ff fff5 	bl	800b02c <lv_font_get_glyph_dsc>
    if(ret) return g.adv_w;
    else return 0;
 800b042:	2300      	movs	r3, #0
    if(ret) return g.adv_w;
 800b044:	4298      	cmp	r0, r3
 800b046:	d000      	beq.n	800b04a <lv_font_get_glyph_width+0x16>
 800b048:	8823      	ldrh	r3, [r4, #0]
}
 800b04a:	0018      	movs	r0, r3
 800b04c:	b004      	add	sp, #16
 800b04e:	bd10      	pop	{r4, pc}

0800b050 <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 800b050:	7803      	ldrb	r3, [r0, #0]
 800b052:	780a      	ldrb	r2, [r1, #0]
 800b054:	4293      	cmp	r3, r2
 800b056:	d001      	beq.n	800b05c <kern_pair_8_compare+0xc>
 800b058:	1a98      	subs	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];

}
 800b05a:	4770      	bx	lr
    else return (int32_t) ref8_p[1] - element8_p[1];
 800b05c:	7840      	ldrb	r0, [r0, #1]
 800b05e:	784b      	ldrb	r3, [r1, #1]
 800b060:	1ac0      	subs	r0, r0, r3
 800b062:	e7fa      	b.n	800b05a <kern_pair_8_compare+0xa>

0800b064 <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 800b064:	8803      	ldrh	r3, [r0, #0]
 800b066:	880a      	ldrh	r2, [r1, #0]
 800b068:	4293      	cmp	r3, r2
 800b06a:	d001      	beq.n	800b070 <kern_pair_16_compare+0xc>
 800b06c:	1a98      	subs	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
}
 800b06e:	4770      	bx	lr
    else return (int32_t) ref16_p[1] - element16_p[1];
 800b070:	8840      	ldrh	r0, [r0, #2]
 800b072:	884b      	ldrh	r3, [r1, #2]
 800b074:	1ac0      	subs	r0, r0, r3
 800b076:	e7fa      	b.n	800b06e <kern_pair_16_compare+0xa>

0800b078 <get_bits>:
 * @param bit_pos index of the first bit to read.
 * @param len number of bits to read (must be <= 8).
 * @return the read bits
 */
static inline uint8_t get_bits(const uint8_t * in, uint32_t bit_pos, uint8_t len)
{
 800b078:	b570      	push	{r4, r5, r6, lr}
 800b07a:	0005      	movs	r5, r0
    uint8_t bit_mask;
    switch(len) {
 800b07c:	1e50      	subs	r0, r2, #1
 800b07e:	2807      	cmp	r0, #7
 800b080:	d820      	bhi.n	800b0c4 <get_bits+0x4c>
 800b082:	f7f5 f859 	bl	8000138 <__gnu_thumb1_case_uqi>
 800b086:	2404      	.short	0x2404
 800b088:	1f1f1b19 	.word	0x1f1f1b19
 800b08c:	1d1f      	.short	0x1d1f
        case 1:
            bit_mask = 0x1;
 800b08e:	0013      	movs	r3, r2
        default:
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    }

    uint32_t byte_pos = bit_pos >> 3;
    bit_pos = bit_pos & 0x7;
 800b090:	2007      	movs	r0, #7
    uint32_t byte_pos = bit_pos >> 3;
 800b092:	08ce      	lsrs	r6, r1, #3
    bit_pos = bit_pos & 0x7;
 800b094:	4001      	ands	r1, r0
 800b096:	b25c      	sxtb	r4, r3

    if(bit_pos + len >= 8) {
 800b098:	1853      	adds	r3, r2, r1
 800b09a:	5da8      	ldrb	r0, [r5, r6]
 800b09c:	2b07      	cmp	r3, #7
 800b09e:	d918      	bls.n	800b0d2 <get_bits+0x5a>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 800b0a0:	19ad      	adds	r5, r5, r6
 800b0a2:	786b      	ldrb	r3, [r5, #1]
 800b0a4:	0200      	lsls	r0, r0, #8
 800b0a6:	181b      	adds	r3, r3, r0
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 800b0a8:	2010      	movs	r0, #16
 800b0aa:	1a41      	subs	r1, r0, r1
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	1a8a      	subs	r2, r1, r2
 800b0b0:	4113      	asrs	r3, r2
 800b0b2:	4023      	ands	r3, r4
 800b0b4:	b2d8      	uxtb	r0, r3
    }
    else {
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    }
}
 800b0b6:	bd70      	pop	{r4, r5, r6, pc}
            bit_mask = 0x7;
 800b0b8:	2307      	movs	r3, #7
            break;
 800b0ba:	e7e9      	b.n	800b090 <get_bits+0x18>
            bit_mask = 0xF;
 800b0bc:	230f      	movs	r3, #15
            break;
 800b0be:	e7e7      	b.n	800b090 <get_bits+0x18>
            bit_mask = 0xFF;
 800b0c0:	23ff      	movs	r3, #255	; 0xff
            break;
 800b0c2:	e7e5      	b.n	800b090 <get_bits+0x18>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	4093      	lsls	r3, r2
 800b0c8:	3b01      	subs	r3, #1
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	e7e0      	b.n	800b090 <get_bits+0x18>
            bit_mask = 0x3;
 800b0ce:	2303      	movs	r3, #3
 800b0d0:	e7de      	b.n	800b090 <get_bits+0x18>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
 800b0d2:	2308      	movs	r3, #8
 800b0d4:	1a59      	subs	r1, r3, r1
 800b0d6:	1a8a      	subs	r2, r1, r2
 800b0d8:	4110      	asrs	r0, r2
 800b0da:	4020      	ands	r0, r4
 800b0dc:	b2c0      	uxtb	r0, r0
 800b0de:	e7ea      	b.n	800b0b6 <get_bits+0x3e>

0800b0e0 <bits_write>:
 * @param val value to write
 * @param len length of bits to write from `val`. (Counted from the LSB).
 * @note `len == 3` will be converted to `len = 4` and `val` will be upscaled too
 */
static inline void bits_write(uint8_t * out, uint32_t bit_pos, uint8_t val, uint8_t len)
{
 800b0e0:	b530      	push	{r4, r5, lr}
 800b0e2:	0005      	movs	r5, r0
    if(len == 3) {
 800b0e4:	2b03      	cmp	r3, #3
 800b0e6:	d10b      	bne.n	800b100 <bits_write+0x20>
        len = 4;
        switch(val) {
 800b0e8:	1e50      	subs	r0, r2, #1
        len = 4;
 800b0ea:	3301      	adds	r3, #1
        switch(val) {
 800b0ec:	2806      	cmp	r0, #6
 800b0ee:	d807      	bhi.n	800b100 <bits_write+0x20>
 800b0f0:	f7f5 f822 	bl	8000138 <__gnu_thumb1_case_uqi>
 800b0f4:	211e1b04 	.word	0x211e1b04
 800b0f8:	2724      	.short	0x2724
 800b0fa:	2a          	.byte	0x2a
 800b0fb:	00          	.byte	0x00
        len = 4;
 800b0fc:	2304      	movs	r3, #4
            case 0:
                val = 0;
                break;
            case 1:
                val = 2;
 800b0fe:	2202      	movs	r2, #2
                break;
        }
    }

    uint16_t byte_pos = bit_pos >> 3;
    bit_pos = bit_pos & 0x7;
 800b100:	2007      	movs	r0, #7
 800b102:	2408      	movs	r4, #8
 800b104:	4008      	ands	r0, r1
    uint16_t byte_pos = bit_pos >> 3;
 800b106:	08c9      	lsrs	r1, r1, #3
 800b108:	1a24      	subs	r4, r4, r0
    bit_pos = 8 - bit_pos - len;

    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 800b10a:	b288      	uxth	r0, r1
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
 800b10c:	2101      	movs	r1, #1
 800b10e:	4099      	lsls	r1, r3
    bit_pos = 8 - bit_pos - len;
 800b110:	1ae4      	subs	r4, r4, r3
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
 800b112:	000b      	movs	r3, r1
 800b114:	3b01      	subs	r3, #1
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 800b116:	b2db      	uxtb	r3, r3
 800b118:	43db      	mvns	r3, r3
 800b11a:	40a3      	lsls	r3, r4
    out[byte_pos] |= (val << bit_pos);
 800b11c:	40a2      	lsls	r2, r4
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 800b11e:	1828      	adds	r0, r5, r0
 800b120:	7801      	ldrb	r1, [r0, #0]
 800b122:	400b      	ands	r3, r1
    out[byte_pos] |= (val << bit_pos);
 800b124:	431a      	orrs	r2, r3
 800b126:	7002      	strb	r2, [r0, #0]
}
 800b128:	bd30      	pop	{r4, r5, pc}
        len = 4;
 800b12a:	2304      	movs	r3, #4
                val = 4;
 800b12c:	001a      	movs	r2, r3
                break;
 800b12e:	e7e7      	b.n	800b100 <bits_write+0x20>
        len = 4;
 800b130:	2304      	movs	r3, #4
                val = 6;
 800b132:	2206      	movs	r2, #6
                break;
 800b134:	e7e4      	b.n	800b100 <bits_write+0x20>
        len = 4;
 800b136:	0013      	movs	r3, r2
                val = 9;
 800b138:	2209      	movs	r2, #9
                break;
 800b13a:	e7e1      	b.n	800b100 <bits_write+0x20>
        len = 4;
 800b13c:	2304      	movs	r3, #4
                val = 11;
 800b13e:	220b      	movs	r2, #11
                break;
 800b140:	e7de      	b.n	800b100 <bits_write+0x20>
        len = 4;
 800b142:	2304      	movs	r3, #4
                val = 13;
 800b144:	220d      	movs	r2, #13
                break;
 800b146:	e7db      	b.n	800b100 <bits_write+0x20>
        len = 4;
 800b148:	2304      	movs	r3, #4
                val = 15;
 800b14a:	220f      	movs	r2, #15
                break;
 800b14c:	e7d8      	b.n	800b100 <bits_write+0x20>
	...

0800b150 <decompress_line>:
{
 800b150:	b5f0      	push	{r4, r5, r6, r7, lr}
    }
    else if(rle_state == RLE_STATE_COUNTER) {
        ret = rle_prev_v;
        rle_cnt--;
        if(rle_cnt == 0) {
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 800b152:	4b46      	ldr	r3, [pc, #280]	; (800b26c <decompress_line+0x11c>)
{
 800b154:	b085      	sub	sp, #20
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	9002      	str	r0, [sp, #8]
 800b15a:	9301      	str	r3, [sp, #4]
 800b15c:	4b44      	ldr	r3, [pc, #272]	; (800b270 <decompress_line+0x120>)
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	9300      	str	r3, [sp, #0]
 800b162:	1843      	adds	r3, r0, r1
 800b164:	9303      	str	r3, [sp, #12]
    for(i = 0; i < w; i++) {
 800b166:	9b03      	ldr	r3, [sp, #12]
 800b168:	9a02      	ldr	r2, [sp, #8]
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d101      	bne.n	800b172 <decompress_line+0x22>
}
 800b16e:	b005      	add	sp, #20
 800b170:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(rle_state == RLE_STATE_SINGLE) {
 800b172:	4b40      	ldr	r3, [pc, #256]	; (800b274 <decompress_line+0x124>)
 800b174:	781d      	ldrb	r5, [r3, #0]
 800b176:	2d00      	cmp	r5, #0
 800b178:	d11c      	bne.n	800b1b4 <decompress_line+0x64>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
 800b17a:	4f3f      	ldr	r7, [pc, #252]	; (800b278 <decompress_line+0x128>)
 800b17c:	9a00      	ldr	r2, [sp, #0]
 800b17e:	683e      	ldr	r6, [r7, #0]
 800b180:	9801      	ldr	r0, [sp, #4]
 800b182:	0031      	movs	r1, r6
 800b184:	f7ff ff78 	bl	800b078 <get_bits>
 800b188:	0004      	movs	r4, r0
        if(rle_rdp != 0 && rle_prev_v == ret) {
 800b18a:	2e00      	cmp	r6, #0
 800b18c:	d008      	beq.n	800b1a0 <decompress_line+0x50>
 800b18e:	4b3b      	ldr	r3, [pc, #236]	; (800b27c <decompress_line+0x12c>)
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	4283      	cmp	r3, r0
 800b194:	d104      	bne.n	800b1a0 <decompress_line+0x50>
            rle_cnt = 0;
 800b196:	4b3a      	ldr	r3, [pc, #232]	; (800b280 <decompress_line+0x130>)
            rle_state = RLE_STATE_REPEATE;
 800b198:	4a36      	ldr	r2, [pc, #216]	; (800b274 <decompress_line+0x124>)
            rle_cnt = 0;
 800b19a:	701d      	strb	r5, [r3, #0]
            rle_state = RLE_STATE_REPEATE;
 800b19c:	2301      	movs	r3, #1
 800b19e:	7013      	strb	r3, [r2, #0]
        rle_prev_v = ret;
 800b1a0:	4b36      	ldr	r3, [pc, #216]	; (800b27c <decompress_line+0x12c>)
 800b1a2:	7018      	strb	r0, [r3, #0]
        rle_rdp += rle_bpp;
 800b1a4:	9b00      	ldr	r3, [sp, #0]
 800b1a6:	18f6      	adds	r6, r6, r3
 800b1a8:	603e      	str	r6, [r7, #0]
        out[i] = rle_next();
 800b1aa:	9b02      	ldr	r3, [sp, #8]
 800b1ac:	701c      	strb	r4, [r3, #0]
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	9302      	str	r3, [sp, #8]
 800b1b2:	e7d8      	b.n	800b166 <decompress_line+0x16>
    else if(rle_state == RLE_STATE_REPEATE) {
 800b1b4:	2d01      	cmp	r5, #1
 800b1b6:	d13f      	bne.n	800b238 <decompress_line+0xe8>
        v = get_bits(rle_in, rle_rdp, 1);
 800b1b8:	4e2f      	ldr	r6, [pc, #188]	; (800b278 <decompress_line+0x128>)
 800b1ba:	002a      	movs	r2, r5
 800b1bc:	6837      	ldr	r7, [r6, #0]
 800b1be:	9801      	ldr	r0, [sp, #4]
 800b1c0:	0039      	movs	r1, r7
 800b1c2:	f7ff ff59 	bl	800b078 <get_bits>
        rle_cnt++;
 800b1c6:	4b2e      	ldr	r3, [pc, #184]	; (800b280 <decompress_line+0x130>)
 800b1c8:	4a2d      	ldr	r2, [pc, #180]	; (800b280 <decompress_line+0x130>)
 800b1ca:	781b      	ldrb	r3, [r3, #0]
        rle_rdp += 1;
 800b1cc:	1c7d      	adds	r5, r7, #1
        rle_cnt++;
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	7013      	strb	r3, [r2, #0]
        rle_rdp += 1;
 800b1d4:	6035      	str	r5, [r6, #0]
        if(v == 1) {
 800b1d6:	2801      	cmp	r0, #1
 800b1d8:	d120      	bne.n	800b21c <decompress_line+0xcc>
            ret = rle_prev_v;
 800b1da:	4a28      	ldr	r2, [pc, #160]	; (800b27c <decompress_line+0x12c>)
 800b1dc:	7814      	ldrb	r4, [r2, #0]
            if(rle_cnt == 11) {
 800b1de:	2b0b      	cmp	r3, #11
 800b1e0:	d1e3      	bne.n	800b1aa <decompress_line+0x5a>
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
 800b1e2:	0029      	movs	r1, r5
 800b1e4:	2206      	movs	r2, #6
 800b1e6:	9801      	ldr	r0, [sp, #4]
 800b1e8:	f7ff ff46 	bl	800b078 <get_bits>
 800b1ec:	4b24      	ldr	r3, [pc, #144]	; (800b280 <decompress_line+0x130>)
                rle_rdp += 6;
 800b1ee:	3707      	adds	r7, #7
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
 800b1f0:	1e05      	subs	r5, r0, #0
 800b1f2:	7018      	strb	r0, [r3, #0]
                rle_rdp += 6;
 800b1f4:	6037      	str	r7, [r6, #0]
                if(rle_cnt != 0) {
 800b1f6:	d003      	beq.n	800b200 <decompress_line+0xb0>
                    rle_state = RLE_STATE_COUNTER;
 800b1f8:	2202      	movs	r2, #2
 800b1fa:	4b1e      	ldr	r3, [pc, #120]	; (800b274 <decompress_line+0x124>)
            rle_state = RLE_STATE_SINGLE;
 800b1fc:	701a      	strb	r2, [r3, #0]
 800b1fe:	e7d4      	b.n	800b1aa <decompress_line+0x5a>
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
 800b200:	0039      	movs	r1, r7
 800b202:	9a00      	ldr	r2, [sp, #0]
 800b204:	9801      	ldr	r0, [sp, #4]
 800b206:	f7ff ff37 	bl	800b078 <get_bits>
 800b20a:	0004      	movs	r4, r0
                    rle_prev_v = ret;
 800b20c:	4b1b      	ldr	r3, [pc, #108]	; (800b27c <decompress_line+0x12c>)
 800b20e:	7018      	strb	r0, [r3, #0]
                    rle_rdp += rle_bpp;
 800b210:	9b00      	ldr	r3, [sp, #0]
 800b212:	18ff      	adds	r7, r7, r3
 800b214:	6037      	str	r7, [r6, #0]
            rle_prev_v = ret;
            rle_rdp += rle_bpp;
            rle_state = RLE_STATE_SINGLE;
 800b216:	4b17      	ldr	r3, [pc, #92]	; (800b274 <decompress_line+0x124>)
 800b218:	701d      	strb	r5, [r3, #0]
 800b21a:	e7c6      	b.n	800b1aa <decompress_line+0x5a>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 800b21c:	9a00      	ldr	r2, [sp, #0]
 800b21e:	0029      	movs	r1, r5
 800b220:	9801      	ldr	r0, [sp, #4]
 800b222:	f7ff ff29 	bl	800b078 <get_bits>
            rle_prev_v = ret;
 800b226:	4b15      	ldr	r3, [pc, #84]	; (800b27c <decompress_line+0x12c>)
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 800b228:	0004      	movs	r4, r0
            rle_prev_v = ret;
 800b22a:	7018      	strb	r0, [r3, #0]
            rle_rdp += rle_bpp;
 800b22c:	9b00      	ldr	r3, [sp, #0]
            rle_state = RLE_STATE_SINGLE;
 800b22e:	2200      	movs	r2, #0
            rle_rdp += rle_bpp;
 800b230:	18ed      	adds	r5, r5, r3
 800b232:	6035      	str	r5, [r6, #0]
            rle_state = RLE_STATE_SINGLE;
 800b234:	4b0f      	ldr	r3, [pc, #60]	; (800b274 <decompress_line+0x124>)
 800b236:	e7e1      	b.n	800b1fc <decompress_line+0xac>
    uint8_t ret = 0;
 800b238:	2400      	movs	r4, #0
    else if(rle_state == RLE_STATE_COUNTER) {
 800b23a:	2d02      	cmp	r5, #2
 800b23c:	d1b5      	bne.n	800b1aa <decompress_line+0x5a>
        ret = rle_prev_v;
 800b23e:	4b0f      	ldr	r3, [pc, #60]	; (800b27c <decompress_line+0x12c>)
 800b240:	781c      	ldrb	r4, [r3, #0]
        rle_cnt--;
 800b242:	4b0f      	ldr	r3, [pc, #60]	; (800b280 <decompress_line+0x130>)
 800b244:	781d      	ldrb	r5, [r3, #0]
 800b246:	3d01      	subs	r5, #1
 800b248:	b2ed      	uxtb	r5, r5
 800b24a:	701d      	strb	r5, [r3, #0]
        if(rle_cnt == 0) {
 800b24c:	2d00      	cmp	r5, #0
 800b24e:	d1ac      	bne.n	800b1aa <decompress_line+0x5a>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 800b250:	4f09      	ldr	r7, [pc, #36]	; (800b278 <decompress_line+0x128>)
 800b252:	9a00      	ldr	r2, [sp, #0]
 800b254:	683e      	ldr	r6, [r7, #0]
 800b256:	9801      	ldr	r0, [sp, #4]
 800b258:	0031      	movs	r1, r6
 800b25a:	f7ff ff0d 	bl	800b078 <get_bits>
            rle_prev_v = ret;
 800b25e:	4b07      	ldr	r3, [pc, #28]	; (800b27c <decompress_line+0x12c>)
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 800b260:	0004      	movs	r4, r0
            rle_prev_v = ret;
 800b262:	7018      	strb	r0, [r3, #0]
            rle_rdp += rle_bpp;
 800b264:	9b00      	ldr	r3, [sp, #0]
 800b266:	18f6      	adds	r6, r6, r3
 800b268:	603e      	str	r6, [r7, #0]
 800b26a:	e7d4      	b.n	800b216 <decompress_line+0xc6>
 800b26c:	20005e4c 	.word	0x20005e4c
 800b270:	20005e48 	.word	0x20005e48
 800b274:	20005e58 	.word	0x20005e58
 800b278:	20005e54 	.word	0x20005e54
 800b27c:	20005e50 	.word	0x20005e50
 800b280:	20005e49 	.word	0x20005e49

0800b284 <unicode_list_compare>:
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
 800b284:	8800      	ldrh	r0, [r0, #0]
 800b286:	880b      	ldrh	r3, [r1, #0]
 800b288:	1ac0      	subs	r0, r0, r3
}
 800b28a:	4770      	bx	lr

0800b28c <get_glyph_dsc_id.isra.0.part.1>:
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 800b28c:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800b28e:	6805      	ldr	r5, [r0, #0]
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 800b290:	b085      	sub	sp, #20
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800b292:	696b      	ldr	r3, [r5, #20]
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 800b294:	000e      	movs	r6, r1
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800b296:	428b      	cmp	r3, r1
 800b298:	d009      	beq.n	800b2ae <get_glyph_dsc_id.isra.0.part.1+0x22>
    for(i = 0; i < fdsc->cmap_num; i++) {
 800b29a:	2000      	movs	r0, #0
 800b29c:	8a6a      	ldrh	r2, [r5, #18]
 800b29e:	05d2      	lsls	r2, r2, #23
 800b2a0:	0dd2      	lsrs	r2, r2, #23
 800b2a2:	b283      	uxth	r3, r0
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d806      	bhi.n	800b2b6 <get_glyph_dsc_id.isra.0.part.1+0x2a>
    fdsc->last_letter = letter;
 800b2a8:	616e      	str	r6, [r5, #20]
    fdsc->last_glyph_id = 0;
 800b2aa:	2400      	movs	r4, #0
 800b2ac:	e013      	b.n	800b2d6 <get_glyph_dsc_id.isra.0.part.1+0x4a>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800b2ae:	69ac      	ldr	r4, [r5, #24]
}
 800b2b0:	0020      	movs	r0, r4
 800b2b2:	b005      	add	sp, #20
 800b2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2b6:	2714      	movs	r7, #20
 800b2b8:	4347      	muls	r7, r0
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800b2ba:	68ab      	ldr	r3, [r5, #8]
 800b2bc:	3001      	adds	r0, #1
 800b2be:	19d9      	adds	r1, r3, r7
 800b2c0:	680b      	ldr	r3, [r1, #0]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 800b2c2:	888c      	ldrh	r4, [r1, #4]
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800b2c4:	1af3      	subs	r3, r6, r3
        if(rcp > fdsc->cmaps[i].range_length) continue;
 800b2c6:	42a3      	cmp	r3, r4
 800b2c8:	d8eb      	bhi.n	800b2a2 <get_glyph_dsc_id.isra.0.part.1+0x16>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 800b2ca:	7c8a      	ldrb	r2, [r1, #18]
 800b2cc:	2a02      	cmp	r2, #2
 800b2ce:	d104      	bne.n	800b2da <get_glyph_dsc_id.isra.0.part.1+0x4e>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 800b2d0:	88cc      	ldrh	r4, [r1, #6]
 800b2d2:	18e4      	adds	r4, r4, r3
        fdsc->last_letter = letter;
 800b2d4:	616e      	str	r6, [r5, #20]
    fdsc->last_glyph_id = 0;
 800b2d6:	61ac      	str	r4, [r5, #24]
 800b2d8:	e7ea      	b.n	800b2b0 <get_glyph_dsc_id.isra.0.part.1+0x24>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 800b2da:	2a00      	cmp	r2, #0
 800b2dc:	d104      	bne.n	800b2e8 <get_glyph_dsc_id.isra.0.part.1+0x5c>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 800b2de:	68ca      	ldr	r2, [r1, #12]
 800b2e0:	88c8      	ldrh	r0, [r1, #6]
 800b2e2:	5cd4      	ldrb	r4, [r2, r3]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800b2e4:	1824      	adds	r4, r4, r0
 800b2e6:	e7f5      	b.n	800b2d4 <get_glyph_dsc_id.isra.0.part.1+0x48>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 800b2e8:	2a03      	cmp	r2, #3
 800b2ea:	d112      	bne.n	800b312 <get_glyph_dsc_id.isra.0.part.1+0x86>
            uint16_t key = rcp;
 800b2ec:	200e      	movs	r0, #14
 800b2ee:	4468      	add	r0, sp
 800b2f0:	8003      	strh	r3, [r0, #0]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 800b2f2:	4b13      	ldr	r3, [pc, #76]	; (800b340 <get_glyph_dsc_id.isra.0.part.1+0xb4>)
 800b2f4:	8a0a      	ldrh	r2, [r1, #16]
 800b2f6:	9300      	str	r3, [sp, #0]
 800b2f8:	6889      	ldr	r1, [r1, #8]
 800b2fa:	2302      	movs	r3, #2
 800b2fc:	f001 fe00 	bl	800cf00 <_lv_utils_bsearch>
        uint32_t glyph_id = 0;
 800b300:	1e04      	subs	r4, r0, #0
            if(p) {
 800b302:	d0e7      	beq.n	800b2d4 <get_glyph_dsc_id.isra.0.part.1+0x48>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 800b304:	68ab      	ldr	r3, [r5, #8]
 800b306:	19df      	adds	r7, r3, r7
 800b308:	68bb      	ldr	r3, [r7, #8]
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 800b30a:	88fc      	ldrh	r4, [r7, #6]
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 800b30c:	1ac0      	subs	r0, r0, r3
 800b30e:	1040      	asrs	r0, r0, #1
 800b310:	e7e8      	b.n	800b2e4 <get_glyph_dsc_id.isra.0.part.1+0x58>
        uint32_t glyph_id = 0;
 800b312:	2400      	movs	r4, #0
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 800b314:	2a01      	cmp	r2, #1
 800b316:	d1dd      	bne.n	800b2d4 <get_glyph_dsc_id.isra.0.part.1+0x48>
            uint16_t key = rcp;
 800b318:	200e      	movs	r0, #14
 800b31a:	4468      	add	r0, sp
 800b31c:	8003      	strh	r3, [r0, #0]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 800b31e:	4b08      	ldr	r3, [pc, #32]	; (800b340 <get_glyph_dsc_id.isra.0.part.1+0xb4>)
 800b320:	8a0a      	ldrh	r2, [r1, #16]
 800b322:	9300      	str	r3, [sp, #0]
 800b324:	6889      	ldr	r1, [r1, #8]
 800b326:	2302      	movs	r3, #2
 800b328:	f001 fdea 	bl	800cf00 <_lv_utils_bsearch>
            if(p) {
 800b32c:	42a0      	cmp	r0, r4
 800b32e:	d0d1      	beq.n	800b2d4 <get_glyph_dsc_id.isra.0.part.1+0x48>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 800b330:	68ab      	ldr	r3, [r5, #8]
 800b332:	19df      	adds	r7, r3, r7
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	1ac0      	subs	r0, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	5a1c      	ldrh	r4, [r3, r0]
 800b33c:	88f8      	ldrh	r0, [r7, #6]
 800b33e:	e7d1      	b.n	800b2e4 <get_glyph_dsc_id.isra.0.part.1+0x58>
 800b340:	0800b285 	.word	0x0800b285

0800b344 <lv_font_get_bitmap_fmt_txt>:
{
 800b344:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b346:	b08d      	sub	sp, #52	; 0x34
    if(unicode_letter == '\t') unicode_letter = ' ';
 800b348:	2909      	cmp	r1, #9
 800b34a:	d004      	beq.n	800b356 <lv_font_get_bitmap_fmt_txt+0x12>
    if(letter == '\0') return 0;
 800b34c:	2900      	cmp	r1, #0
 800b34e:	d103      	bne.n	800b358 <lv_font_get_bitmap_fmt_txt+0x14>
    if(!gid) return NULL;
 800b350:	2000      	movs	r0, #0
}
 800b352:	b00d      	add	sp, #52	; 0x34
 800b354:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(unicode_letter == '\t') unicode_letter = ' ';
 800b356:	2120      	movs	r1, #32
 800b358:	6905      	ldr	r5, [r0, #16]
 800b35a:	3010      	adds	r0, #16
 800b35c:	f7ff ff96 	bl	800b28c <get_glyph_dsc_id.isra.0.part.1>
    if(!gid) return NULL;
 800b360:	2800      	cmp	r0, #0
 800b362:	d0f5      	beq.n	800b350 <lv_font_get_bitmap_fmt_txt+0xc>
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 800b364:	686b      	ldr	r3, [r5, #4]
 800b366:	00c0      	lsls	r0, r0, #3
 800b368:	181c      	adds	r4, r3, r0
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 800b36a:	7ce8      	ldrb	r0, [r5, #19]
 800b36c:	233f      	movs	r3, #63	; 0x3f
 800b36e:	0002      	movs	r2, r0
 800b370:	439a      	bics	r2, r3
 800b372:	d105      	bne.n	800b380 <lv_font_get_bitmap_fmt_txt+0x3c>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 800b374:	6820      	ldr	r0, [r4, #0]
 800b376:	0300      	lsls	r0, r0, #12
 800b378:	0b03      	lsrs	r3, r0, #12
 800b37a:	6828      	ldr	r0, [r5, #0]
 800b37c:	18c0      	adds	r0, r0, r3
 800b37e:	e7e8      	b.n	800b352 <lv_font_get_bitmap_fmt_txt+0xe>
        uint32_t gsize = gdsc->box_w * gdsc->box_h;
 800b380:	7923      	ldrb	r3, [r4, #4]
 800b382:	7967      	ldrb	r7, [r4, #5]
 800b384:	435f      	muls	r7, r3
        if(gsize == 0) return NULL;
 800b386:	2f00      	cmp	r7, #0
 800b388:	d0e2      	beq.n	800b350 <lv_font_get_bitmap_fmt_txt+0xc>
        switch(fdsc->bpp) {
 800b38a:	06c0      	lsls	r0, r0, #27
 800b38c:	0f00      	lsrs	r0, r0, #28
 800b38e:	3801      	subs	r0, #1
 800b390:	2803      	cmp	r0, #3
 800b392:	d805      	bhi.n	800b3a0 <lv_font_get_bitmap_fmt_txt+0x5c>
 800b394:	f7f4 fed0 	bl	8000138 <__gnu_thumb1_case_uqi>
 800b398:	66666302 	.word	0x66666302
                buf_size = (gsize + 7) >> 3;
 800b39c:	3707      	adds	r7, #7
 800b39e:	08ff      	lsrs	r7, r7, #3
        if(_lv_mem_get_size(LV_GC_ROOT(_lv_font_decompr_buf)) < buf_size) {
 800b3a0:	4e52      	ldr	r6, [pc, #328]	; (800b4ec <lv_font_get_bitmap_fmt_txt+0x1a8>)
 800b3a2:	6830      	ldr	r0, [r6, #0]
 800b3a4:	f000 ffb2 	bl	800c30c <_lv_mem_get_size>
 800b3a8:	42b8      	cmp	r0, r7
 800b3aa:	d206      	bcs.n	800b3ba <lv_font_get_bitmap_fmt_txt+0x76>
            uint8_t * tmp = lv_mem_realloc(LV_GC_ROOT(_lv_font_decompr_buf), buf_size);
 800b3ac:	0039      	movs	r1, r7
 800b3ae:	6830      	ldr	r0, [r6, #0]
 800b3b0:	f001 f87e 	bl	800c4b0 <lv_mem_realloc>
            if(tmp == NULL) return NULL;
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	d0cb      	beq.n	800b350 <lv_font_get_bitmap_fmt_txt+0xc>
            LV_GC_ROOT(_lv_font_decompr_buf) = tmp;
 800b3b8:	6030      	str	r0, [r6, #0]
        bool prefilter = fdsc->bitmap_format == LV_FONT_FMT_TXT_COMPRESSED ? true : false;
 800b3ba:	7ceb      	ldrb	r3, [r5, #19]
 800b3bc:	223f      	movs	r2, #63	; 0x3f
 800b3be:	0019      	movs	r1, r3
 800b3c0:	4391      	bics	r1, r2
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 800b3c2:	6822      	ldr	r2, [r4, #0]
        bool prefilter = fdsc->bitmap_format == LV_FONT_FMT_TXT_COMPRESSED ? true : false;
 800b3c4:	910a      	str	r1, [sp, #40]	; 0x28
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 800b3c6:	0312      	lsls	r2, r2, #12
 800b3c8:	6829      	ldr	r1, [r5, #0]
 800b3ca:	0b12      	lsrs	r2, r2, #12
 800b3cc:	188a      	adds	r2, r1, r2
 800b3ce:	6831      	ldr	r1, [r6, #0]
                   (uint8_t)fdsc->bpp, prefilter);
 800b3d0:	06db      	lsls	r3, r3, #27
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 800b3d2:	9104      	str	r1, [sp, #16]
 800b3d4:	7925      	ldrb	r5, [r4, #4]
                   (uint8_t)fdsc->bpp, prefilter);
 800b3d6:	0f1b      	lsrs	r3, r3, #28
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 800b3d8:	b229      	sxth	r1, r5
 800b3da:	9105      	str	r1, [sp, #20]
 800b3dc:	7961      	ldrb	r1, [r4, #5]
    if(bpp == 3) wr_size = 4;
 800b3de:	2704      	movs	r7, #4
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 800b3e0:	910b      	str	r1, [sp, #44]	; 0x2c
 800b3e2:	b2d9      	uxtb	r1, r3
 800b3e4:	9106      	str	r1, [sp, #24]
    if(bpp == 3) wr_size = 4;
 800b3e6:	2903      	cmp	r1, #3
 800b3e8:	d000      	beq.n	800b3ec <lv_font_get_bitmap_fmt_txt+0xa8>
 800b3ea:	b2df      	uxtb	r7, r3
    rle_state = RLE_STATE_SINGLE;
 800b3ec:	2600      	movs	r6, #0
    rle_in = in;
 800b3ee:	4940      	ldr	r1, [pc, #256]	; (800b4f0 <lv_font_get_bitmap_fmt_txt+0x1ac>)
    uint8_t * line_buf1 = _lv_mem_buf_get(w);
 800b3f0:	0028      	movs	r0, r5
    rle_in = in;
 800b3f2:	600a      	str	r2, [r1, #0]
    rle_bpp = bpp;
 800b3f4:	4a3f      	ldr	r2, [pc, #252]	; (800b4f4 <lv_font_get_bitmap_fmt_txt+0x1b0>)
 800b3f6:	7013      	strb	r3, [r2, #0]
    rle_state = RLE_STATE_SINGLE;
 800b3f8:	4b3f      	ldr	r3, [pc, #252]	; (800b4f8 <lv_font_get_bitmap_fmt_txt+0x1b4>)
 800b3fa:	701e      	strb	r6, [r3, #0]
    rle_rdp = 0;
 800b3fc:	4b3f      	ldr	r3, [pc, #252]	; (800b4fc <lv_font_get_bitmap_fmt_txt+0x1b8>)
 800b3fe:	601e      	str	r6, [r3, #0]
    rle_prev_v = 0;
 800b400:	4b3f      	ldr	r3, [pc, #252]	; (800b500 <lv_font_get_bitmap_fmt_txt+0x1bc>)
 800b402:	701e      	strb	r6, [r3, #0]
    rle_cnt = 0;
 800b404:	4b3f      	ldr	r3, [pc, #252]	; (800b504 <lv_font_get_bitmap_fmt_txt+0x1c0>)
 800b406:	701e      	strb	r6, [r3, #0]
    uint8_t * line_buf1 = _lv_mem_buf_get(w);
 800b408:	f001 f884 	bl	800c514 <_lv_mem_buf_get>
    if(prefilter) {
 800b40c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    uint8_t * line_buf1 = _lv_mem_buf_get(w);
 800b40e:	0004      	movs	r4, r0
    uint8_t * line_buf2 = NULL;
 800b410:	9603      	str	r6, [sp, #12]
    if(prefilter) {
 800b412:	2b40      	cmp	r3, #64	; 0x40
 800b414:	d103      	bne.n	800b41e <lv_font_get_bitmap_fmt_txt+0xda>
        line_buf2 = _lv_mem_buf_get(w);
 800b416:	0028      	movs	r0, r5
 800b418:	f001 f87c 	bl	800c514 <_lv_mem_buf_get>
 800b41c:	9003      	str	r0, [sp, #12]
    decompress_line(line_buf1, w);
 800b41e:	003e      	movs	r6, r7
 800b420:	9905      	ldr	r1, [sp, #20]
 800b422:	0020      	movs	r0, r4
 800b424:	f7ff fe94 	bl	800b150 <decompress_line>
 800b428:	1963      	adds	r3, r4, r5
 800b42a:	9301      	str	r3, [sp, #4]
 800b42c:	9402      	str	r4, [sp, #8]
    for(x = 0; x < w; x++) {
 800b42e:	9b02      	ldr	r3, [sp, #8]
 800b430:	9a01      	ldr	r2, [sp, #4]
 800b432:	1bf1      	subs	r1, r6, r7
 800b434:	19f6      	adds	r6, r6, r7
 800b436:	4293      	cmp	r3, r2
 800b438:	d117      	bne.n	800b46a <lv_font_get_bitmap_fmt_txt+0x126>
    for(y = 1; y < h; y++) {
 800b43a:	2301      	movs	r3, #1
 800b43c:	437d      	muls	r5, r7
 800b43e:	9508      	str	r5, [sp, #32]
    for(x = 0; x < w; x++) {
 800b440:	9501      	str	r5, [sp, #4]
 800b442:	9309      	str	r3, [sp, #36]	; 0x24
    for(y = 1; y < h; y++) {
 800b444:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b448:	4293      	cmp	r3, r2
 800b44a:	dc18      	bgt.n	800b47e <lv_font_get_bitmap_fmt_txt+0x13a>
    _lv_mem_buf_release(line_buf1);
 800b44c:	0020      	movs	r0, r4
 800b44e:	f000 ff69 	bl	800c324 <_lv_mem_buf_release>
    _lv_mem_buf_release(line_buf2);
 800b452:	9803      	ldr	r0, [sp, #12]
 800b454:	f000 ff66 	bl	800c324 <_lv_mem_buf_release>
        return LV_GC_ROOT(_lv_font_decompr_buf);
 800b458:	4b24      	ldr	r3, [pc, #144]	; (800b4ec <lv_font_get_bitmap_fmt_txt+0x1a8>)
 800b45a:	6818      	ldr	r0, [r3, #0]
 800b45c:	e779      	b.n	800b352 <lv_font_get_bitmap_fmt_txt+0xe>
                buf_size = (gsize + 3) >> 2;
 800b45e:	3703      	adds	r7, #3
 800b460:	08bf      	lsrs	r7, r7, #2
                break;
 800b462:	e79d      	b.n	800b3a0 <lv_font_get_bitmap_fmt_txt+0x5c>
                buf_size = (gsize + 1) >> 1;
 800b464:	3701      	adds	r7, #1
 800b466:	087f      	lsrs	r7, r7, #1
                break;
 800b468:	e79a      	b.n	800b3a0 <lv_font_get_bitmap_fmt_txt+0x5c>
        bits_write(out, wrp, line_buf1[x], bpp);
 800b46a:	9b02      	ldr	r3, [sp, #8]
 800b46c:	9804      	ldr	r0, [sp, #16]
 800b46e:	781a      	ldrb	r2, [r3, #0]
 800b470:	9b06      	ldr	r3, [sp, #24]
 800b472:	f7ff fe35 	bl	800b0e0 <bits_write>
 800b476:	9b02      	ldr	r3, [sp, #8]
 800b478:	3301      	adds	r3, #1
 800b47a:	9302      	str	r3, [sp, #8]
 800b47c:	e7d7      	b.n	800b42e <lv_font_get_bitmap_fmt_txt+0xea>
        if(prefilter) {
 800b47e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            decompress_line(line_buf2, w);
 800b480:	9905      	ldr	r1, [sp, #20]
        if(prefilter) {
 800b482:	2b40      	cmp	r3, #64	; 0x40
 800b484:	d121      	bne.n	800b4ca <lv_font_get_bitmap_fmt_txt+0x186>
            decompress_line(line_buf2, w);
 800b486:	0025      	movs	r5, r4
 800b488:	9803      	ldr	r0, [sp, #12]
 800b48a:	f7ff fe61 	bl	800b150 <decompress_line>
 800b48e:	9b01      	ldr	r3, [sp, #4]
 800b490:	9e03      	ldr	r6, [sp, #12]
 800b492:	9307      	str	r3, [sp, #28]
            for(x = 0; x < w; x++) {
 800b494:	9b02      	ldr	r3, [sp, #8]
 800b496:	429d      	cmp	r5, r3
 800b498:	d108      	bne.n	800b4ac <lv_font_get_bitmap_fmt_txt+0x168>
 800b49a:	9a08      	ldr	r2, [sp, #32]
 800b49c:	9b01      	ldr	r3, [sp, #4]
 800b49e:	4694      	mov	ip, r2
 800b4a0:	4463      	add	r3, ip
 800b4a2:	9301      	str	r3, [sp, #4]
 800b4a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	b21b      	sxth	r3, r3
 800b4aa:	e7ca      	b.n	800b442 <lv_font_get_bitmap_fmt_txt+0xfe>
                line_buf1[x] = line_buf2[x] ^ line_buf1[x];
 800b4ac:	782b      	ldrb	r3, [r5, #0]
 800b4ae:	7832      	ldrb	r2, [r6, #0]
                bits_write(out, wrp, line_buf1[x], bpp);
 800b4b0:	9907      	ldr	r1, [sp, #28]
                line_buf1[x] = line_buf2[x] ^ line_buf1[x];
 800b4b2:	405a      	eors	r2, r3
 800b4b4:	702a      	strb	r2, [r5, #0]
                bits_write(out, wrp, line_buf1[x], bpp);
 800b4b6:	9b06      	ldr	r3, [sp, #24]
 800b4b8:	9804      	ldr	r0, [sp, #16]
 800b4ba:	f7ff fe11 	bl	800b0e0 <bits_write>
                wrp += wr_size;
 800b4be:	9b07      	ldr	r3, [sp, #28]
 800b4c0:	3601      	adds	r6, #1
 800b4c2:	19db      	adds	r3, r3, r7
 800b4c4:	9307      	str	r3, [sp, #28]
 800b4c6:	3501      	adds	r5, #1
 800b4c8:	e7e4      	b.n	800b494 <lv_font_get_bitmap_fmt_txt+0x150>
            decompress_line(line_buf1, w);
 800b4ca:	0025      	movs	r5, r4
 800b4cc:	0020      	movs	r0, r4
 800b4ce:	f7ff fe3f 	bl	800b150 <decompress_line>
 800b4d2:	9e01      	ldr	r6, [sp, #4]
            for(x = 0; x < w; x++) {
 800b4d4:	9b02      	ldr	r3, [sp, #8]
 800b4d6:	429d      	cmp	r5, r3
 800b4d8:	d0df      	beq.n	800b49a <lv_font_get_bitmap_fmt_txt+0x156>
                bits_write(out, wrp, line_buf1[x], bpp);
 800b4da:	782a      	ldrb	r2, [r5, #0]
 800b4dc:	0031      	movs	r1, r6
 800b4de:	9b06      	ldr	r3, [sp, #24]
 800b4e0:	9804      	ldr	r0, [sp, #16]
 800b4e2:	f7ff fdfd 	bl	800b0e0 <bits_write>
                wrp += wr_size;
 800b4e6:	19f6      	adds	r6, r6, r7
 800b4e8:	3501      	adds	r5, #1
 800b4ea:	e7f3      	b.n	800b4d4 <lv_font_get_bitmap_fmt_txt+0x190>
 800b4ec:	200070f4 	.word	0x200070f4
 800b4f0:	20005e4c 	.word	0x20005e4c
 800b4f4:	20005e48 	.word	0x20005e48
 800b4f8:	20005e58 	.word	0x20005e58
 800b4fc:	20005e54 	.word	0x20005e54
 800b500:	20005e50 	.word	0x20005e50
 800b504:	20005e49 	.word	0x20005e49

0800b508 <lv_font_get_glyph_dsc_fmt_txt>:
{
 800b508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b50a:	b089      	sub	sp, #36	; 0x24
 800b50c:	0005      	movs	r5, r0
 800b50e:	000f      	movs	r7, r1
 800b510:	9305      	str	r3, [sp, #20]
    if(unicode_letter == '\t') {
 800b512:	2a09      	cmp	r2, #9
 800b514:	d004      	beq.n	800b520 <lv_font_get_glyph_dsc_fmt_txt+0x18>
    if(letter == '\0') return 0;
 800b516:	2a00      	cmp	r2, #0
 800b518:	d13b      	bne.n	800b592 <lv_font_get_glyph_dsc_fmt_txt+0x8a>
    if(!gid) return false;
 800b51a:	2300      	movs	r3, #0
    return true;
 800b51c:	9303      	str	r3, [sp, #12]
 800b51e:	e035      	b.n	800b58c <lv_font_get_glyph_dsc_fmt_txt+0x84>
        is_tab = true;
 800b520:	2301      	movs	r3, #1
        unicode_letter = ' ';
 800b522:	2220      	movs	r2, #32
        is_tab = true;
 800b524:	9303      	str	r3, [sp, #12]
 800b526:	002e      	movs	r6, r5
 800b528:	3610      	adds	r6, #16
 800b52a:	0011      	movs	r1, r2
 800b52c:	0030      	movs	r0, r6
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800b52e:	692c      	ldr	r4, [r5, #16]
 800b530:	f7ff feac 	bl	800b28c <get_glyph_dsc_id.isra.0.part.1>
 800b534:	9004      	str	r0, [sp, #16]
    if(!gid) return false;
 800b536:	2800      	cmp	r0, #0
 800b538:	d0ef      	beq.n	800b51a <lv_font_get_glyph_dsc_fmt_txt+0x12>
    if(fdsc->kern_dsc) {
 800b53a:	68e3      	ldr	r3, [r4, #12]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d12b      	bne.n	800b598 <lv_font_get_glyph_dsc_fmt_txt+0x90>
    int8_t kvalue = 0;
 800b540:	2300      	movs	r3, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 800b542:	9a04      	ldr	r2, [sp, #16]
 800b544:	00d1      	lsls	r1, r2, #3
 800b546:	6862      	ldr	r2, [r4, #4]
 800b548:	1851      	adds	r1, r2, r1
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 800b54a:	8a22      	ldrh	r2, [r4, #16]
    uint32_t adv_w = gdsc->adv_w;
 800b54c:	8848      	ldrh	r0, [r1, #2]
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 800b54e:	435a      	muls	r2, r3
    if(is_tab) adv_w *= 2;
 800b550:	9b03      	ldr	r3, [sp, #12]
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 800b552:	1112      	asrs	r2, r2, #4
    uint32_t adv_w = gdsc->adv_w;
 800b554:	0900      	lsrs	r0, r0, #4
    if(is_tab) adv_w *= 2;
 800b556:	2b00      	cmp	r3, #0
 800b558:	d000      	beq.n	800b55c <lv_font_get_glyph_dsc_fmt_txt+0x54>
 800b55a:	0040      	lsls	r0, r0, #1
    adv_w  = (adv_w + (1 << 3)) >> 4;
 800b55c:	0013      	movs	r3, r2
 800b55e:	3308      	adds	r3, #8
 800b560:	181b      	adds	r3, r3, r0
 800b562:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
 800b564:	803b      	strh	r3, [r7, #0]
    dsc_out->box_h = gdsc->box_h;
 800b566:	794b      	ldrb	r3, [r1, #5]
 800b568:	80bb      	strh	r3, [r7, #4]
    dsc_out->ofs_x = gdsc->ofs_x;
 800b56a:	2306      	movs	r3, #6
    dsc_out->box_w = gdsc->box_w;
 800b56c:	790a      	ldrb	r2, [r1, #4]
 800b56e:	807a      	strh	r2, [r7, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
 800b570:	56cb      	ldrsb	r3, [r1, r3]
 800b572:	80fb      	strh	r3, [r7, #6]
    dsc_out->ofs_y = gdsc->ofs_y;
 800b574:	2307      	movs	r3, #7
 800b576:	56cb      	ldrsb	r3, [r1, r3]
 800b578:	813b      	strh	r3, [r7, #8]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 800b57a:	7ce3      	ldrb	r3, [r4, #19]
 800b57c:	06db      	lsls	r3, r3, #27
 800b57e:	0f1b      	lsrs	r3, r3, #28
 800b580:	72bb      	strb	r3, [r7, #10]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 800b582:	9b03      	ldr	r3, [sp, #12]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d05e      	beq.n	800b646 <lv_font_get_glyph_dsc_fmt_txt+0x13e>
 800b588:	0052      	lsls	r2, r2, #1
 800b58a:	807a      	strh	r2, [r7, #2]
}
 800b58c:	9803      	ldr	r0, [sp, #12]
 800b58e:	b009      	add	sp, #36	; 0x24
 800b590:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bool is_tab = false;
 800b592:	2300      	movs	r3, #0
 800b594:	9303      	str	r3, [sp, #12]
 800b596:	e7c6      	b.n	800b526 <lv_font_get_glyph_dsc_fmt_txt+0x1e>
    if(letter == '\0') return 0;
 800b598:	9b05      	ldr	r3, [sp, #20]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d0d0      	beq.n	800b540 <lv_font_get_glyph_dsc_fmt_txt+0x38>
 800b59e:	0019      	movs	r1, r3
 800b5a0:	0030      	movs	r0, r6
 800b5a2:	f7ff fe73 	bl	800b28c <get_glyph_dsc_id.isra.0.part.1>
        if(gid_next) {
 800b5a6:	2800      	cmp	r0, #0
 800b5a8:	d0ca      	beq.n	800b540 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            kvalue = get_kern_value(font, gid, gid_next);
 800b5aa:	692b      	ldr	r3, [r5, #16]
 800b5ac:	68dd      	ldr	r5, [r3, #12]
    if(fdsc->kern_classes == 0) {
 800b5ae:	7cdb      	ldrb	r3, [r3, #19]
 800b5b0:	069b      	lsls	r3, r3, #26
 800b5b2:	d433      	bmi.n	800b61c <lv_font_get_glyph_dsc_fmt_txt+0x114>
        if(kdsc->glyph_ids_size == 0) {
 800b5b4:	223f      	movs	r2, #63	; 0x3f
 800b5b6:	7aeb      	ldrb	r3, [r5, #11]
 800b5b8:	4393      	bics	r3, r2
 800b5ba:	d118      	bne.n	800b5ee <lv_font_get_glyph_dsc_fmt_txt+0xe6>
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 800b5bc:	ab07      	add	r3, sp, #28
 800b5be:	469c      	mov	ip, r3
 800b5c0:	9b04      	ldr	r3, [sp, #16]
 800b5c2:	0200      	lsls	r0, r0, #8
 800b5c4:	18c0      	adds	r0, r0, r3
 800b5c6:	4663      	mov	r3, ip
            const uint16_t * g_ids = kdsc->glyph_ids;
 800b5c8:	682e      	ldr	r6, [r5, #0]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 800b5ca:	8018      	strh	r0, [r3, #0]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 800b5cc:	68ab      	ldr	r3, [r5, #8]
 800b5ce:	0031      	movs	r1, r6
 800b5d0:	009a      	lsls	r2, r3, #2
 800b5d2:	4b1e      	ldr	r3, [pc, #120]	; (800b64c <lv_font_get_glyph_dsc_fmt_txt+0x144>)
 800b5d4:	0892      	lsrs	r2, r2, #2
 800b5d6:	9300      	str	r3, [sp, #0]
 800b5d8:	4660      	mov	r0, ip
 800b5da:	2302      	movs	r3, #2
 800b5dc:	f001 fc90 	bl	800cf00 <_lv_utils_bsearch>
    int8_t value = 0;
 800b5e0:	1e03      	subs	r3, r0, #0
            if(kid_p) {
 800b5e2:	d0ae      	beq.n	800b542 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
                lv_uintptr_t ofs = kid_p - g_ids;
 800b5e4:	1b80      	subs	r0, r0, r6
 800b5e6:	1040      	asrs	r0, r0, #1
                value = kdsc->values[ofs];
 800b5e8:	686b      	ldr	r3, [r5, #4]
 800b5ea:	561b      	ldrsb	r3, [r3, r0]
 800b5ec:	e7a9      	b.n	800b542 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
        else if(kdsc->glyph_ids_size == 1) {
 800b5ee:	2b40      	cmp	r3, #64	; 0x40
 800b5f0:	d1a6      	bne.n	800b540 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 800b5f2:	9b04      	ldr	r3, [sp, #16]
 800b5f4:	0400      	lsls	r0, r0, #16
 800b5f6:	18c0      	adds	r0, r0, r3
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 800b5f8:	68ab      	ldr	r3, [r5, #8]
            const uint32_t * g_ids = kdsc->glyph_ids;
 800b5fa:	682e      	ldr	r6, [r5, #0]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 800b5fc:	009a      	lsls	r2, r3, #2
 800b5fe:	4b14      	ldr	r3, [pc, #80]	; (800b650 <lv_font_get_glyph_dsc_fmt_txt+0x148>)
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 800b600:	9007      	str	r0, [sp, #28]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 800b602:	9300      	str	r3, [sp, #0]
 800b604:	0892      	lsrs	r2, r2, #2
 800b606:	2304      	movs	r3, #4
 800b608:	0031      	movs	r1, r6
 800b60a:	a807      	add	r0, sp, #28
 800b60c:	f001 fc78 	bl	800cf00 <_lv_utils_bsearch>
    int8_t value = 0;
 800b610:	1e03      	subs	r3, r0, #0
            if(kid_p) {
 800b612:	d100      	bne.n	800b616 <lv_font_get_glyph_dsc_fmt_txt+0x10e>
 800b614:	e795      	b.n	800b542 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
                lv_uintptr_t ofs = kid_p - g_ids;
 800b616:	1b80      	subs	r0, r0, r6
 800b618:	1080      	asrs	r0, r0, #2
 800b61a:	e7e5      	b.n	800b5e8 <lv_font_get_glyph_dsc_fmt_txt+0xe0>
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 800b61c:	686b      	ldr	r3, [r5, #4]
 800b61e:	9a04      	ldr	r2, [sp, #16]
 800b620:	5c9a      	ldrb	r2, [r3, r2]
        if(left_class > 0 && right_class > 0) {
 800b622:	2a00      	cmp	r2, #0
 800b624:	d100      	bne.n	800b628 <lv_font_get_glyph_dsc_fmt_txt+0x120>
 800b626:	e78b      	b.n	800b540 <lv_font_get_glyph_dsc_fmt_txt+0x38>
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 800b628:	68ab      	ldr	r3, [r5, #8]
 800b62a:	5c19      	ldrb	r1, [r3, r0]
        if(left_class > 0 && right_class > 0) {
 800b62c:	2900      	cmp	r1, #0
 800b62e:	d100      	bne.n	800b632 <lv_font_get_glyph_dsc_fmt_txt+0x12a>
 800b630:	e786      	b.n	800b540 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
 800b632:	7b6b      	ldrb	r3, [r5, #13]
 800b634:	3a01      	subs	r2, #1
 800b636:	435a      	muls	r2, r3
 800b638:	682b      	ldr	r3, [r5, #0]
 800b63a:	185b      	adds	r3, r3, r1
 800b63c:	189b      	adds	r3, r3, r2
 800b63e:	3b01      	subs	r3, #1
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	b25b      	sxtb	r3, r3
 800b644:	e77d      	b.n	800b542 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    return true;
 800b646:	2301      	movs	r3, #1
 800b648:	e768      	b.n	800b51c <lv_font_get_glyph_dsc_fmt_txt+0x14>
 800b64a:	46c0      	nop			; (mov r8, r8)
 800b64c:	0800b051 	.word	0x0800b051
 800b650:	0800b065 	.word	0x0800b065

0800b654 <_lv_font_clean_up_fmt_txt>:
{
 800b654:	b510      	push	{r4, lr}
    if(LV_GC_ROOT(_lv_font_decompr_buf)) {
 800b656:	4c04      	ldr	r4, [pc, #16]	; (800b668 <_lv_font_clean_up_fmt_txt+0x14>)
 800b658:	6820      	ldr	r0, [r4, #0]
 800b65a:	2800      	cmp	r0, #0
 800b65c:	d003      	beq.n	800b666 <_lv_font_clean_up_fmt_txt+0x12>
        lv_mem_free(LV_GC_ROOT(_lv_font_decompr_buf));
 800b65e:	f000 fe27 	bl	800c2b0 <lv_mem_free>
        LV_GC_ROOT(_lv_font_decompr_buf) = NULL;
 800b662:	2300      	movs	r3, #0
 800b664:	6023      	str	r3, [r4, #0]
}
 800b666:	bd10      	pop	{r4, pc}
 800b668:	200070f4 	.word	0x200070f4

0800b66c <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 800b66c:	b510      	push	{r4, lr}
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
 800b66e:	212c      	movs	r1, #44	; 0x2c
{
 800b670:	0004      	movs	r4, r0
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
 800b672:	f000 ffd7 	bl	800c624 <_lv_memset_00>

    driver->flush_cb         = NULL;
    driver->hor_res          = LV_HOR_RES_MAX;
 800b676:	23a0      	movs	r3, #160	; 0xa0
    driver->ver_res          = LV_VER_RES_MAX;
    driver->buffer           = NULL;
    driver->rotated          = LV_DISP_ROT_NONE;
    driver->sw_rotate        = 0;
 800b678:	21f1      	movs	r1, #241	; 0xf1
    driver->hor_res          = LV_HOR_RES_MAX;
 800b67a:	8023      	strh	r3, [r4, #0]
    driver->ver_res          = LV_VER_RES_MAX;
 800b67c:	3b20      	subs	r3, #32
 800b67e:	8063      	strh	r3, [r4, #2]
    driver->rotated          = LV_DISP_ROT_NONE;
 800b680:	7a23      	ldrb	r3, [r4, #8]
    driver->flush_cb         = NULL;
 800b682:	2200      	movs	r2, #0
    driver->sw_rotate        = 0;
 800b684:	400b      	ands	r3, r1
 800b686:	7223      	strb	r3, [r4, #8]
    driver->color_chroma_key = LV_COLOR_TRANSP;
 800b688:	23fc      	movs	r3, #252	; 0xfc
 800b68a:	00db      	lsls	r3, r3, #3
 800b68c:	8523      	strh	r3, [r4, #40]	; 0x28
    driver->dpi = LV_DPI;
 800b68e:	4907      	ldr	r1, [pc, #28]	; (800b6ac <lv_disp_drv_init+0x40>)
 800b690:	8923      	ldrh	r3, [r4, #8]
    driver->flush_cb         = NULL;
 800b692:	60e2      	str	r2, [r4, #12]
    driver->dpi = LV_DPI;
 800b694:	4019      	ands	r1, r3
 800b696:	2382      	movs	r3, #130	; 0x82
 800b698:	011b      	lsls	r3, r3, #4
 800b69a:	430b      	orrs	r3, r1

#if LV_ANTIALIAS
    driver->antialiasing = true;
 800b69c:	2101      	movs	r1, #1
    driver->dpi = LV_DPI;
 800b69e:	8123      	strh	r3, [r4, #8]
    driver->antialiasing = true;
 800b6a0:	430b      	orrs	r3, r1
    driver->buffer           = NULL;
 800b6a2:	6062      	str	r2, [r4, #4]
    driver->antialiasing = true;
 800b6a4:	7223      	strb	r3, [r4, #8]

#if LV_USE_USER_DATA
    driver->user_data = NULL;
#endif

    driver->set_px_cb = NULL;
 800b6a6:	6162      	str	r2, [r4, #20]
}
 800b6a8:	bd10      	pop	{r4, pc}
 800b6aa:	46c0      	nop			; (mov r8, r8)
 800b6ac:	ffffc00f 	.word	0xffffc00f

0800b6b0 <lv_disp_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 800b6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6b2:	0004      	movs	r4, r0
 800b6b4:	000d      	movs	r5, r1
 800b6b6:	0017      	movs	r7, r2
 800b6b8:	001e      	movs	r6, r3
    _lv_memset_00(disp_buf, sizeof(lv_disp_buf_t));
 800b6ba:	2124      	movs	r1, #36	; 0x24
 800b6bc:	f000 ffb2 	bl	800c624 <_lv_memset_00>

    disp_buf->buf1    = buf1;
 800b6c0:	6025      	str	r5, [r4, #0]
    disp_buf->buf2    = buf2;
 800b6c2:	6067      	str	r7, [r4, #4]
    disp_buf->buf_act = disp_buf->buf1;
 800b6c4:	60a5      	str	r5, [r4, #8]
    disp_buf->size    = size_in_px_cnt;
 800b6c6:	60e6      	str	r6, [r4, #12]
}
 800b6c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b6cc <lv_disp_get_default>:
 * Get the default display
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
 800b6cc:	4b01      	ldr	r3, [pc, #4]	; (800b6d4 <lv_disp_get_default+0x8>)
 800b6ce:	6818      	ldr	r0, [r3, #0]
}
 800b6d0:	4770      	bx	lr
 800b6d2:	46c0      	nop			; (mov r8, r8)
 800b6d4:	20005e5c 	.word	0x20005e5c

0800b6d8 <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
 800b6d8:	1e03      	subs	r3, r0, #0
    if(disp == NULL) disp = lv_disp_get_default();
 800b6da:	d104      	bne.n	800b6e6 <lv_disp_get_hor_res+0xe>
    return disp_def;
 800b6dc:	4b08      	ldr	r3, [pc, #32]	; (800b700 <lv_disp_get_hor_res+0x28>)

    if(disp == NULL)
        return LV_HOR_RES_MAX;
 800b6de:	20a0      	movs	r0, #160	; 0xa0
    return disp_def;
 800b6e0:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL)
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d008      	beq.n	800b6f8 <lv_disp_get_hor_res+0x20>
    else {
        switch(disp->driver.rotated) {
 800b6e6:	7a1a      	ldrb	r2, [r3, #8]
 800b6e8:	0752      	lsls	r2, r2, #29
 800b6ea:	0f92      	lsrs	r2, r2, #30
 800b6ec:	2a01      	cmp	r2, #1
 800b6ee:	d001      	beq.n	800b6f4 <lv_disp_get_hor_res+0x1c>
 800b6f0:	2a03      	cmp	r2, #3
 800b6f2:	d102      	bne.n	800b6fa <lv_disp_get_hor_res+0x22>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver.ver_res;
 800b6f4:	2002      	movs	r0, #2
 800b6f6:	5e18      	ldrsh	r0, [r3, r0]
            default:
                return disp->driver.hor_res;
        }
    }
}
 800b6f8:	4770      	bx	lr
                return disp->driver.hor_res;
 800b6fa:	2000      	movs	r0, #0
 800b6fc:	5e18      	ldrsh	r0, [r3, r0]
 800b6fe:	e7fb      	b.n	800b6f8 <lv_disp_get_hor_res+0x20>
 800b700:	20005e5c 	.word	0x20005e5c

0800b704 <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
 800b704:	1e03      	subs	r3, r0, #0
    if(disp == NULL) disp = lv_disp_get_default();
 800b706:	d104      	bne.n	800b712 <lv_disp_get_ver_res+0xe>
    return disp_def;
 800b708:	4b08      	ldr	r3, [pc, #32]	; (800b72c <lv_disp_get_ver_res+0x28>)

    if(disp == NULL)
        return LV_VER_RES_MAX;
 800b70a:	2080      	movs	r0, #128	; 0x80
    return disp_def;
 800b70c:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL)
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d008      	beq.n	800b724 <lv_disp_get_ver_res+0x20>
    else {
        switch(disp->driver.rotated) {
 800b712:	7a1a      	ldrb	r2, [r3, #8]
 800b714:	0752      	lsls	r2, r2, #29
 800b716:	0f92      	lsrs	r2, r2, #30
 800b718:	2a01      	cmp	r2, #1
 800b71a:	d001      	beq.n	800b720 <lv_disp_get_ver_res+0x1c>
 800b71c:	2a03      	cmp	r2, #3
 800b71e:	d102      	bne.n	800b726 <lv_disp_get_ver_res+0x22>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver.hor_res;
 800b720:	2000      	movs	r0, #0
 800b722:	5e18      	ldrsh	r0, [r3, r0]
            default:
                return disp->driver.ver_res;
        }
    }
}
 800b724:	4770      	bx	lr
                return disp->driver.ver_res;
 800b726:	2002      	movs	r0, #2
 800b728:	5e18      	ldrsh	r0, [r3, r0]
 800b72a:	e7fb      	b.n	800b724 <lv_disp_get_ver_res+0x20>
 800b72c:	20005e5c 	.word	0x20005e5c

0800b730 <lv_disp_get_dpi>:
 * Get the DPI of the display
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(lv_disp_t * disp)
{
 800b730:	1e03      	subs	r3, r0, #0
    if(disp == NULL) disp = lv_disp_get_default();
 800b732:	d104      	bne.n	800b73e <lv_disp_get_dpi+0xe>
    return disp_def;
 800b734:	4b04      	ldr	r3, [pc, #16]	; (800b748 <lv_disp_get_dpi+0x18>)
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
 800b736:	2082      	movs	r0, #130	; 0x82
    return disp_def;
 800b738:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d002      	beq.n	800b744 <lv_disp_get_dpi+0x14>
    return disp->driver.dpi;
 800b73e:	8918      	ldrh	r0, [r3, #8]
 800b740:	0480      	lsls	r0, r0, #18
 800b742:	0d80      	lsrs	r0, r0, #22
}
 800b744:	4770      	bx	lr
 800b746:	46c0      	nop			; (mov r8, r8)
 800b748:	20005e5c 	.word	0x20005e5c

0800b74c <lv_disp_get_size_category>:
 * Get the size category of the display based on it's hor. res. and dpi.
 * @param disp pointer to a display (NULL to use the default display)
 * @return LV_DISP_SIZE_SMALL/MEDIUM/LARGE/EXTRA_LARGE
 */
lv_disp_size_t lv_disp_get_size_category(lv_disp_t * disp)
{
 800b74c:	b570      	push	{r4, r5, r6, lr}
 800b74e:	1e04      	subs	r4, r0, #0
    if(disp == NULL) disp = lv_disp_get_default();
 800b750:	d104      	bne.n	800b75c <lv_disp_get_size_category+0x10>
    return disp_def;
 800b752:	4b0f      	ldr	r3, [pc, #60]	; (800b790 <lv_disp_get_size_category+0x44>)

    uint32_t w;
    if(disp == NULL) w = LV_HOR_RES_MAX;
 800b754:	25a0      	movs	r5, #160	; 0xa0
    return disp_def;
 800b756:	681c      	ldr	r4, [r3, #0]
    if(disp == NULL) w = LV_HOR_RES_MAX;
 800b758:	2c00      	cmp	r4, #0
 800b75a:	d003      	beq.n	800b764 <lv_disp_get_size_category+0x18>
    else w = lv_disp_get_hor_res(disp);
 800b75c:	0020      	movs	r0, r4
 800b75e:	f7ff ffbb 	bl	800b6d8 <lv_disp_get_hor_res>
 800b762:	0005      	movs	r5, r0

    uint32_t dpi = lv_disp_get_dpi(disp);
 800b764:	0020      	movs	r0, r4
 800b766:	f7ff ffe3 	bl	800b730 <lv_disp_get_dpi>
 800b76a:	0001      	movs	r1, r0

    w = w * 10 / dpi;
 800b76c:	200a      	movs	r0, #10
 800b76e:	4368      	muls	r0, r5
 800b770:	f7f4 fd00 	bl	8000174 <__udivsi3>
 800b774:	0002      	movs	r2, r0

    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
 800b776:	2000      	movs	r0, #0
 800b778:	2a1d      	cmp	r2, #29
 800b77a:	d907      	bls.n	800b78c <lv_disp_get_size_category+0x40>
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
 800b77c:	3001      	adds	r0, #1
 800b77e:	2a31      	cmp	r2, #49	; 0x31
 800b780:	d904      	bls.n	800b78c <lv_disp_get_size_category+0x40>
    if(w < LV_DISP_LARGE_LIMIT) return LV_DISP_SIZE_LARGE;
    else return LV_DISP_SIZE_EXTRA_LARGE;
 800b782:	3044      	adds	r0, #68	; 0x44
 800b784:	4290      	cmp	r0, r2
 800b786:	4180      	sbcs	r0, r0
 800b788:	4240      	negs	r0, r0
 800b78a:	3002      	adds	r0, #2
}
 800b78c:	bd70      	pop	{r4, r5, r6, pc}
 800b78e:	46c0      	nop			; (mov r8, r8)
 800b790:	20005e5c 	.word	0x20005e5c

0800b794 <lv_disp_flush_ready>:
    if(disp_drv->screen_transp) {
        _lv_memset_00(disp_drv->buffer->buf_act, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->buffer->flushing = 0;
 800b794:	2200      	movs	r2, #0
 800b796:	6843      	ldr	r3, [r0, #4]
 800b798:	619a      	str	r2, [r3, #24]
    disp_drv->buffer->flushing_last = 0;
 800b79a:	61da      	str	r2, [r3, #28]
}
 800b79c:	4770      	bx	lr
	...

0800b7a0 <lv_disp_get_next>:
 * Get the next display.
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
 800b7a0:	0001      	movs	r1, r0
 800b7a2:	b510      	push	{r4, lr}
 800b7a4:	4804      	ldr	r0, [pc, #16]	; (800b7b8 <lv_disp_get_next+0x18>)
    if(disp == NULL)
 800b7a6:	2900      	cmp	r1, #0
 800b7a8:	d102      	bne.n	800b7b0 <lv_disp_get_next+0x10>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
 800b7aa:	f000 fbe0 	bl	800bf6e <_lv_ll_get_head>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
}
 800b7ae:	bd10      	pop	{r4, pc}
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
 800b7b0:	f000 fbe5 	bl	800bf7e <_lv_ll_get_next>
 800b7b4:	e7fb      	b.n	800b7ae <lv_disp_get_next+0xe>
 800b7b6:	46c0      	nop			; (mov r8, r8)
 800b7b8:	20007104 	.word	0x20007104

0800b7bc <lv_disp_get_buf>:
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
 800b7bc:	6840      	ldr	r0, [r0, #4]
}
 800b7be:	4770      	bx	lr

0800b7c0 <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
 800b7c0:	6843      	ldr	r3, [r0, #4]
        return true;
    else
        return false;
 800b7c2:	6818      	ldr	r0, [r3, #0]
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	d003      	beq.n	800b7d0 <lv_disp_is_double_buf+0x10>
 800b7c8:	6858      	ldr	r0, [r3, #4]
 800b7ca:	1e43      	subs	r3, r0, #1
 800b7cc:	4198      	sbcs	r0, r3
 800b7ce:	b2c0      	uxtb	r0, r0
}
 800b7d0:	4770      	bx	lr

0800b7d2 <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
 800b7d2:	b510      	push	{r4, lr}
 800b7d4:	0004      	movs	r4, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 800b7d6:	f7ff fff3 	bl	800b7c0 <lv_disp_is_double_buf>
 800b7da:	2800      	cmp	r0, #0
 800b7dc:	d00a      	beq.n	800b7f4 <lv_disp_is_true_double_buf+0x22>
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
 800b7de:	2200      	movs	r2, #0
 800b7e0:	5ea3      	ldrsh	r3, [r4, r2]
 800b7e2:	2202      	movs	r2, #2
 800b7e4:	5ea0      	ldrsh	r0, [r4, r2]
 800b7e6:	4358      	muls	r0, r3
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 800b7e8:	6863      	ldr	r3, [r4, #4]
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	1ac0      	subs	r0, r0, r3
 800b7ee:	4243      	negs	r3, r0
 800b7f0:	4158      	adcs	r0, r3
 800b7f2:	b2c0      	uxtb	r0, r0
        return true;
    }
    else {
        return false;
    }
}
 800b7f4:	bd10      	pop	{r4, pc}
	...

0800b7f8 <lv_disp_drv_register>:
{
 800b7f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7fa:	0005      	movs	r5, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 800b7fc:	4831      	ldr	r0, [pc, #196]	; (800b8c4 <lv_disp_drv_register+0xcc>)
 800b7fe:	f000 fb76 	bl	800beee <_lv_ll_ins_head>
 800b802:	1e04      	subs	r4, r0, #0
    if(!disp) {
 800b804:	d102      	bne.n	800b80c <lv_disp_drv_register+0x14>
        return NULL;
 800b806:	2400      	movs	r4, #0
}
 800b808:	0020      	movs	r0, r4
 800b80a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    _lv_memset_00(disp, sizeof(lv_disp_t));
 800b80c:	21be      	movs	r1, #190	; 0xbe
 800b80e:	0049      	lsls	r1, r1, #1
 800b810:	f000 ff08 	bl	800c624 <_lv_memset_00>
    _lv_memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
 800b814:	222c      	movs	r2, #44	; 0x2c
 800b816:	0029      	movs	r1, r5
 800b818:	0020      	movs	r0, r4
 800b81a:	f000 fdc3 	bl	800c3a4 <_lv_memcpy>
    _lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
 800b81e:	0020      	movs	r0, r4
 800b820:	214c      	movs	r1, #76	; 0x4c
 800b822:	3030      	adds	r0, #48	; 0x30
    disp->last_activity_time = 0;
 800b824:	0027      	movs	r7, r4
    _lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
 800b826:	f000 fb5a 	bl	800bede <_lv_ll_init>
    disp->last_activity_time = 0;
 800b82a:	2300      	movs	r3, #0
    if(disp_def == NULL) disp_def = disp;
 800b82c:	4e26      	ldr	r6, [pc, #152]	; (800b8c8 <lv_disp_drv_register+0xd0>)
    disp->last_activity_time = 0;
 800b82e:	37fc      	adds	r7, #252	; 0xfc
 800b830:	67fb      	str	r3, [r7, #124]	; 0x7c
    if(disp_def == NULL) disp_def = disp;
 800b832:	6833      	ldr	r3, [r6, #0]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d100      	bne.n	800b83a <lv_disp_drv_register+0x42>
 800b838:	6034      	str	r4, [r6, #0]
    lv_disp_t * disp_def_tmp = disp_def;
 800b83a:	6833      	ldr	r3, [r6, #0]
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
 800b83c:	2203      	movs	r2, #3
    lv_disp_t * disp_def_tmp = disp_def;
 800b83e:	9301      	str	r3, [sp, #4]
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
 800b840:	211e      	movs	r1, #30
 800b842:	0023      	movs	r3, r4
 800b844:	4821      	ldr	r0, [pc, #132]	; (800b8cc <lv_disp_drv_register+0xd4>)
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 800b846:	6034      	str	r4, [r6, #0]
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
 800b848:	f000 ff50 	bl	800c6ec <lv_task_create>
 800b84c:	62e0      	str	r0, [r4, #44]	; 0x2c
    if(disp->refr_task == NULL) return NULL;
 800b84e:	2800      	cmp	r0, #0
 800b850:	d0d9      	beq.n	800b806 <lv_disp_drv_register+0xe>
    disp->inv_p = 0;
 800b852:	22bb      	movs	r2, #187	; 0xbb
 800b854:	0052      	lsls	r2, r2, #1
 800b856:	5aa3      	ldrh	r3, [r4, r2]
    disp->last_activity_time = 0;
 800b858:	2500      	movs	r5, #0
    disp->inv_p = 0;
 800b85a:	0a9b      	lsrs	r3, r3, #10
 800b85c:	029b      	lsls	r3, r3, #10
 800b85e:	52a3      	strh	r3, [r4, r2]
    disp->bg_color = LV_COLOR_WHITE;
 800b860:	4b1b      	ldr	r3, [pc, #108]	; (800b8d0 <lv_disp_drv_register+0xd8>)
    disp->last_activity_time = 0;
 800b862:	67fd      	str	r5, [r7, #124]	; 0x7c
    disp->bg_color = LV_COLOR_WHITE;
 800b864:	881a      	ldrh	r2, [r3, #0]
 800b866:	0023      	movs	r3, r4
 800b868:	334e      	adds	r3, #78	; 0x4e
 800b86a:	801a      	strh	r2, [r3, #0]
    disp->bg_opa = LV_OPA_COVER;
 800b86c:	22ff      	movs	r2, #255	; 0xff
    disp->bg_img = NULL;
 800b86e:	6525      	str	r5, [r4, #80]	; 0x50
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800b870:	0029      	movs	r1, r5
    disp->bg_opa = LV_OPA_COVER;
 800b872:	719a      	strb	r2, [r3, #6]
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800b874:	0028      	movs	r0, r5
    disp->prev_scr  = NULL;
 800b876:	6425      	str	r5, [r4, #64]	; 0x40
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800b878:	f7f8 fbbc 	bl	8003ff4 <lv_obj_create>
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800b87c:	0029      	movs	r1, r5
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800b87e:	63e0      	str	r0, [r4, #60]	; 0x3c
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800b880:	0028      	movs	r0, r5
 800b882:	f7f8 fbb7 	bl	8003ff4 <lv_obj_create>
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
 800b886:	0029      	movs	r1, r5
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800b888:	6460      	str	r0, [r4, #68]	; 0x44
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
 800b88a:	0028      	movs	r0, r5
 800b88c:	f7f8 fbb2 	bl	8003ff4 <lv_obj_create>
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
 800b890:	0029      	movs	r1, r5
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
 800b892:	64a0      	str	r0, [r4, #72]	; 0x48
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
 800b894:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800b896:	f7f9 f9f9 	bl	8004c8c <lv_obj_reset_style_list>
    lv_obj_reset_style_list(disp->sys_layer, LV_OBJ_PART_MAIN);
 800b89a:	0029      	movs	r1, r5
 800b89c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b89e:	f7f9 f9f5 	bl	8004c8c <lv_obj_reset_style_list>
    lv_obj_set_click(disp->top_layer, false);
 800b8a2:	0029      	movs	r1, r5
 800b8a4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800b8a6:	f7f7 ffc7 	bl	8003838 <lv_obj_set_click>
    lv_obj_set_click(disp->sys_layer, false);
 800b8aa:	0029      	movs	r1, r5
 800b8ac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b8ae:	f7f7 ffc3 	bl	8003838 <lv_obj_set_click>
    lv_obj_invalidate(disp->act_scr);
 800b8b2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b8b4:	f7f8 f8d3 	bl	8003a5e <lv_obj_invalidate>
    disp_def = disp_def_tmp; /*Revert the default display*/
 800b8b8:	9b01      	ldr	r3, [sp, #4]
    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
 800b8ba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    disp_def = disp_def_tmp; /*Revert the default display*/
 800b8bc:	6033      	str	r3, [r6, #0]
    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
 800b8be:	f001 f875 	bl	800c9ac <lv_task_ready>
 800b8c2:	e7a1      	b.n	800b808 <lv_disp_drv_register+0x10>
 800b8c4:	20007104 	.word	0x20007104
 800b8c8:	20005e5c 	.word	0x20005e5c
 800b8cc:	08006115 	.word	0x08006115
 800b8d0:	0800f026 	.word	0x0800f026

0800b8d4 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
 800b8d4:	0001      	movs	r1, r0
 800b8d6:	b510      	push	{r4, lr}
 800b8d8:	4804      	ldr	r0, [pc, #16]	; (800b8ec <lv_indev_get_next+0x18>)
    if(indev == NULL)
 800b8da:	2900      	cmp	r1, #0
 800b8dc:	d102      	bne.n	800b8e4 <lv_indev_get_next+0x10>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 800b8de:	f000 fb46 	bl	800bf6e <_lv_ll_get_head>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
}
 800b8e2:	bd10      	pop	{r4, pc}
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 800b8e4:	f000 fb4b 	bl	800bf7e <_lv_ll_get_next>
 800b8e8:	e7fb      	b.n	800b8e2 <lv_indev_get_next+0xe>
 800b8ea:	46c0      	nop			; (mov r8, r8)
 800b8ec:	200070f8 	.word	0x200070f8

0800b8f0 <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	4b03      	ldr	r3, [pc, #12]	; (800b900 <lv_tick_inc+0x10>)
 800b8f4:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 800b8f6:	4b03      	ldr	r3, [pc, #12]	; (800b904 <lv_tick_inc+0x14>)
 800b8f8:	681a      	ldr	r2, [r3, #0]
 800b8fa:	1810      	adds	r0, r2, r0
 800b8fc:	6018      	str	r0, [r3, #0]
}
 800b8fe:	4770      	bx	lr
 800b900:	20005e64 	.word	0x20005e64
 800b904:	20005e60 	.word	0x20005e60

0800b908 <lv_tick_get>:
     * This loop detects if `lv_tick_inc` was called while reading `sys_time`.
     * If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     * until `tick_irq_flag` remains `1`. */
    uint32_t result;
    do {
        tick_irq_flag = 1;
 800b908:	2101      	movs	r1, #1
        result        = sys_time;
 800b90a:	4b04      	ldr	r3, [pc, #16]	; (800b91c <lv_tick_get+0x14>)
 800b90c:	6818      	ldr	r0, [r3, #0]
        tick_irq_flag = 1;
 800b90e:	4b04      	ldr	r3, [pc, #16]	; (800b920 <lv_tick_get+0x18>)
 800b910:	7019      	strb	r1, [r3, #0]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle */
 800b912:	781a      	ldrb	r2, [r3, #0]
 800b914:	2a00      	cmp	r2, #0
 800b916:	d0fb      	beq.n	800b910 <lv_tick_get+0x8>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 800b918:	4770      	bx	lr
 800b91a:	46c0      	nop			; (mov r8, r8)
 800b91c:	20005e60 	.word	0x20005e60
 800b920:	20005e64 	.word	0x20005e64

0800b924 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 800b924:	b510      	push	{r4, lr}
 800b926:	0004      	movs	r4, r0
    uint32_t act_time = lv_tick_get();
 800b928:	f7ff ffee 	bl	800b908 <lv_tick_get>
    else {
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
 800b92c:	1b00      	subs	r0, r0, r4
}
 800b92e:	bd10      	pop	{r4, pc}

0800b930 <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
 800b930:	b570      	push	{r4, r5, r6, lr}
 800b932:	000d      	movs	r5, r1
    lv_coord_t r = (area->x2 - area->x1) / 2;
 800b934:	2300      	movs	r3, #0
 800b936:	5ec6      	ldrsh	r6, [r0, r3]
 800b938:	2304      	movs	r3, #4
 800b93a:	5ec2      	ldrsh	r2, [r0, r3]
    lv_coord_t cx = area->x1 + r;
    lv_coord_t cy = area->y1 + r;

    /*Simplify the code by moving everything to (0, 0) */
    lv_coord_t px = p->x - cx;
    lv_coord_t py = p->y - cy;
 800b93c:	8840      	ldrh	r0, [r0, #2]
    lv_coord_t r = (area->x2 - area->x1) / 2;
 800b93e:	1b92      	subs	r2, r2, r6
 800b940:	0fd1      	lsrs	r1, r2, #31
 800b942:	1889      	adds	r1, r1, r2
    lv_coord_t py = p->y - cy;
 800b944:	886a      	ldrh	r2, [r5, #2]
    lv_coord_t px = p->x - cx;
 800b946:	882b      	ldrh	r3, [r5, #0]
    lv_coord_t py = p->y - cy;
 800b948:	1a12      	subs	r2, r2, r0

    uint32_t r_sqrd = r * r;
    uint32_t dist = (px * px) + (py * py);

    if(dist <= r_sqrd)
 800b94a:	2000      	movs	r0, #0
    lv_coord_t r = (area->x2 - area->x1) / 2;
 800b94c:	1049      	asrs	r1, r1, #1
    lv_coord_t cx = area->x1 + r;
 800b94e:	b28c      	uxth	r4, r1
    lv_coord_t px = p->x - cx;
 800b950:	1b9b      	subs	r3, r3, r6
 800b952:	1b1b      	subs	r3, r3, r4
    lv_coord_t py = p->y - cy;
 800b954:	1b12      	subs	r2, r2, r4
    uint32_t dist = (px * px) + (py * py);
 800b956:	b21b      	sxth	r3, r3
 800b958:	b212      	sxth	r2, r2
 800b95a:	435b      	muls	r3, r3
 800b95c:	4352      	muls	r2, r2
    uint32_t r_sqrd = r * r;
 800b95e:	4349      	muls	r1, r1
    uint32_t dist = (px * px) + (py * py);
 800b960:	189a      	adds	r2, r3, r2
    if(dist <= r_sqrd)
 800b962:	4291      	cmp	r1, r2
 800b964:	4140      	adcs	r0, r0
        return true;
    else
        return false;
}
 800b966:	b2c0      	uxtb	r0, r0
 800b968:	bd70      	pop	{r4, r5, r6, pc}

0800b96a <lv_area_set>:
{
 800b96a:	b530      	push	{r4, r5, lr}
 800b96c:	ac03      	add	r4, sp, #12
 800b96e:	2500      	movs	r5, #0
 800b970:	5f64      	ldrsh	r4, [r4, r5]
    area_p->x1 = x1;
 800b972:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
 800b974:	8042      	strh	r2, [r0, #2]
    area_p->x2 = x2;
 800b976:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
 800b978:	80c4      	strh	r4, [r0, #6]
}
 800b97a:	bd30      	pop	{r4, r5, pc}

0800b97c <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
 800b97c:	1e4b      	subs	r3, r1, #1
 800b97e:	8841      	ldrh	r1, [r0, #2]
 800b980:	18c9      	adds	r1, r1, r3
 800b982:	80c1      	strh	r1, [r0, #6]
}
 800b984:	4770      	bx	lr

0800b986 <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 800b986:	2304      	movs	r3, #4
 800b988:	5ec2      	ldrsh	r2, [r0, r3]
 800b98a:	2100      	movs	r1, #0
 800b98c:	5e43      	ldrsh	r3, [r0, r1]
 800b98e:	1ad2      	subs	r2, r2, r3
 800b990:	2106      	movs	r1, #6
 800b992:	5e43      	ldrsh	r3, [r0, r1]
 800b994:	2102      	movs	r1, #2
 800b996:	5e40      	ldrsh	r0, [r0, r1]
 800b998:	3201      	adds	r2, #1
 800b99a:	1a18      	subs	r0, r3, r0
 800b99c:	3001      	adds	r0, #1
 800b99e:	4350      	muls	r0, r2
}
 800b9a0:	4770      	bx	lr

0800b9a2 <_lv_area_intersect>:
{
 800b9a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800b9a4:	8813      	ldrh	r3, [r2, #0]
 800b9a6:	880d      	ldrh	r5, [r1, #0]
 800b9a8:	1c1c      	adds	r4, r3, #0
 800b9aa:	b22e      	sxth	r6, r5
 800b9ac:	b21b      	sxth	r3, r3
 800b9ae:	42b3      	cmp	r3, r6
 800b9b0:	da00      	bge.n	800b9b4 <_lv_area_intersect+0x12>
 800b9b2:	1c2c      	adds	r4, r5, #0
 800b9b4:	8004      	strh	r4, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800b9b6:	8853      	ldrh	r3, [r2, #2]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800b9b8:	b225      	sxth	r5, r4
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800b9ba:	884c      	ldrh	r4, [r1, #2]
 800b9bc:	1c1e      	adds	r6, r3, #0
 800b9be:	b227      	sxth	r7, r4
 800b9c0:	b21b      	sxth	r3, r3
 800b9c2:	42bb      	cmp	r3, r7
 800b9c4:	da00      	bge.n	800b9c8 <_lv_area_intersect+0x26>
 800b9c6:	1c26      	adds	r6, r4, #0
 800b9c8:	8046      	strh	r6, [r0, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800b9ca:	8893      	ldrh	r3, [r2, #4]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800b9cc:	b234      	sxth	r4, r6
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800b9ce:	888e      	ldrh	r6, [r1, #4]
 800b9d0:	1c1f      	adds	r7, r3, #0
 800b9d2:	b21b      	sxth	r3, r3
 800b9d4:	9301      	str	r3, [sp, #4]
 800b9d6:	b233      	sxth	r3, r6
 800b9d8:	469c      	mov	ip, r3
 800b9da:	9b01      	ldr	r3, [sp, #4]
 800b9dc:	4563      	cmp	r3, ip
 800b9de:	dd00      	ble.n	800b9e2 <_lv_area_intersect+0x40>
 800b9e0:	1c37      	adds	r7, r6, #0
 800b9e2:	8087      	strh	r7, [r0, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800b9e4:	88d3      	ldrh	r3, [r2, #6]
 800b9e6:	88c9      	ldrh	r1, [r1, #6]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800b9e8:	b23e      	sxth	r6, r7
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800b9ea:	1c1a      	adds	r2, r3, #0
 800b9ec:	b20f      	sxth	r7, r1
 800b9ee:	b21b      	sxth	r3, r3
 800b9f0:	42bb      	cmp	r3, r7
 800b9f2:	dd00      	ble.n	800b9f6 <_lv_area_intersect+0x54>
 800b9f4:	1c0a      	adds	r2, r1, #0
 800b9f6:	80c2      	strh	r2, [r0, #6]
 800b9f8:	b213      	sxth	r3, r2
        union_ok = false;
 800b9fa:	2000      	movs	r0, #0
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 800b9fc:	42b5      	cmp	r5, r6
 800b9fe:	dc04      	bgt.n	800ba0a <_lv_area_intersect+0x68>
 800ba00:	0fe0      	lsrs	r0, r4, #31
 800ba02:	17da      	asrs	r2, r3, #31
 800ba04:	42a3      	cmp	r3, r4
 800ba06:	4150      	adcs	r0, r2
 800ba08:	b2c0      	uxtb	r0, r0
}
 800ba0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800ba0c <_lv_area_join>:
{
 800ba0c:	b570      	push	{r4, r5, r6, lr}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 800ba0e:	8813      	ldrh	r3, [r2, #0]
 800ba10:	880d      	ldrh	r5, [r1, #0]
 800ba12:	1c1c      	adds	r4, r3, #0
 800ba14:	b22e      	sxth	r6, r5
 800ba16:	b21b      	sxth	r3, r3
 800ba18:	42b3      	cmp	r3, r6
 800ba1a:	dd00      	ble.n	800ba1e <_lv_area_join+0x12>
 800ba1c:	1c2c      	adds	r4, r5, #0
 800ba1e:	8004      	strh	r4, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 800ba20:	8853      	ldrh	r3, [r2, #2]
 800ba22:	884d      	ldrh	r5, [r1, #2]
 800ba24:	1c1c      	adds	r4, r3, #0
 800ba26:	b22e      	sxth	r6, r5
 800ba28:	b21b      	sxth	r3, r3
 800ba2a:	42b3      	cmp	r3, r6
 800ba2c:	dd00      	ble.n	800ba30 <_lv_area_join+0x24>
 800ba2e:	1c2c      	adds	r4, r5, #0
 800ba30:	8044      	strh	r4, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 800ba32:	8893      	ldrh	r3, [r2, #4]
 800ba34:	888d      	ldrh	r5, [r1, #4]
 800ba36:	1c1c      	adds	r4, r3, #0
 800ba38:	b22e      	sxth	r6, r5
 800ba3a:	b21b      	sxth	r3, r3
 800ba3c:	42b3      	cmp	r3, r6
 800ba3e:	da00      	bge.n	800ba42 <_lv_area_join+0x36>
 800ba40:	1c2c      	adds	r4, r5, #0
 800ba42:	8084      	strh	r4, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 800ba44:	88d3      	ldrh	r3, [r2, #6]
 800ba46:	88c9      	ldrh	r1, [r1, #6]
 800ba48:	1c1a      	adds	r2, r3, #0
 800ba4a:	b20c      	sxth	r4, r1
 800ba4c:	b21b      	sxth	r3, r3
 800ba4e:	42a3      	cmp	r3, r4
 800ba50:	da00      	bge.n	800ba54 <_lv_area_join+0x48>
 800ba52:	1c0a      	adds	r2, r1, #0
 800ba54:	80c2      	strh	r2, [r0, #6]
}
 800ba56:	bd70      	pop	{r4, r5, r6, pc}

0800ba58 <_lv_area_is_point_on>:
{
 800ba58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba5a:	0004      	movs	r4, r0
 800ba5c:	000e      	movs	r6, r1
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 800ba5e:	2300      	movs	r3, #0
 800ba60:	5ec9      	ldrsh	r1, [r1, r3]
 800ba62:	2000      	movs	r0, #0
 800ba64:	5e23      	ldrsh	r3, [r4, r0]
{
 800ba66:	b089      	sub	sp, #36	; 0x24
        return false;
 800ba68:	2000      	movs	r0, #0
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 800ba6a:	4299      	cmp	r1, r3
 800ba6c:	db13      	blt.n	800ba96 <_lv_area_is_point_on+0x3e>
 800ba6e:	2704      	movs	r7, #4
 800ba70:	5fe5      	ldrsh	r5, [r4, r7]
 800ba72:	9501      	str	r5, [sp, #4]
 800ba74:	42a9      	cmp	r1, r5
 800ba76:	dc0e      	bgt.n	800ba96 <_lv_area_is_point_on+0x3e>
 800ba78:	2502      	movs	r5, #2
 800ba7a:	5f71      	ldrsh	r1, [r6, r5]
 800ba7c:	2702      	movs	r7, #2
 800ba7e:	5fe5      	ldrsh	r5, [r4, r7]
 800ba80:	9500      	str	r5, [sp, #0]
 800ba82:	42a9      	cmp	r1, r5
 800ba84:	db07      	blt.n	800ba96 <_lv_area_is_point_on+0x3e>
 800ba86:	2506      	movs	r5, #6
 800ba88:	5f64      	ldrsh	r4, [r4, r5]
 800ba8a:	9402      	str	r4, [sp, #8]
 800ba8c:	42a1      	cmp	r1, r4
 800ba8e:	dc02      	bgt.n	800ba96 <_lv_area_is_point_on+0x3e>
    if(radius <= 0) {
 800ba90:	4282      	cmp	r2, r0
 800ba92:	dc02      	bgt.n	800ba9a <_lv_area_is_point_on+0x42>
        return true;
 800ba94:	2001      	movs	r0, #1
}
 800ba96:	b009      	add	sp, #36	; 0x24
 800ba98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ba9a:	4669      	mov	r1, sp
 800ba9c:	8889      	ldrh	r1, [r1, #4]
 800ba9e:	b29d      	uxth	r5, r3
 800baa0:	9105      	str	r1, [sp, #20]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800baa2:	4669      	mov	r1, sp
 800baa4:	8808      	ldrh	r0, [r1, #0]
 800baa6:	890f      	ldrh	r7, [r1, #8]
    corner_area.x1 = a_p->x1;
 800baa8:	a906      	add	r1, sp, #24
 800baaa:	800b      	strh	r3, [r1, #0]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800baac:	9b05      	ldr	r3, [sp, #20]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800baae:	1c7c      	adds	r4, r7, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800bab0:	1c59      	adds	r1, r3, #1
 800bab2:	1b49      	subs	r1, r1, r5
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 800bab4:	b209      	sxth	r1, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800bab6:	1a24      	subs	r4, r4, r0
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 800bab8:	b224      	sxth	r4, r4
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 800baba:	0fcb      	lsrs	r3, r1, #31
 800babc:	1859      	adds	r1, r3, r1
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 800babe:	0fe3      	lsrs	r3, r4, #31
 800bac0:	191b      	adds	r3, r3, r4
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 800bac2:	1049      	asrs	r1, r1, #1
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 800bac4:	105b      	asrs	r3, r3, #1
    lv_coord_t max_radius = LV_MATH_MIN(w, h);
 800bac6:	1c0c      	adds	r4, r1, #0
 800bac8:	4299      	cmp	r1, r3
 800baca:	dd00      	ble.n	800bace <_lv_area_is_point_on+0x76>
 800bacc:	1c1c      	adds	r4, r3, #0
    corner_area.x2 = a_p->x1 + radius;
 800bace:	b223      	sxth	r3, r4
 800bad0:	4293      	cmp	r3, r2
 800bad2:	dd00      	ble.n	800bad6 <_lv_area_is_point_on+0x7e>
 800bad4:	1c14      	adds	r4, r2, #0
 800bad6:	b2a4      	uxth	r4, r4
    corner_area.y1 = a_p->y1;
 800bad8:	9a00      	ldr	r2, [sp, #0]
    corner_area.x2 = a_p->x1 + radius;
 800bada:	1965      	adds	r5, r4, r5
 800badc:	ab06      	add	r3, sp, #24
    corner_area.y2 = a_p->y1 + radius;
 800bade:	1820      	adds	r0, r4, r0
    corner_area.x2 = a_p->x1 + radius;
 800bae0:	b2ad      	uxth	r5, r5
    corner_area.y1 = a_p->y1;
 800bae2:	805a      	strh	r2, [r3, #2]
    corner_area.x2 = a_p->x1 + radius;
 800bae4:	809d      	strh	r5, [r3, #4]
    corner_area.y2 = a_p->y1 + radius;
 800bae6:	b283      	uxth	r3, r0
 800bae8:	9303      	str	r3, [sp, #12]
 800baea:	466b      	mov	r3, sp
 800baec:	220c      	movs	r2, #12
 800baee:	5e9b      	ldrsh	r3, [r3, r2]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800baf0:	0031      	movs	r1, r6
    corner_area.y2 = a_p->y1 + radius;
 800baf2:	9304      	str	r3, [sp, #16]
 800baf4:	9a04      	ldr	r2, [sp, #16]
 800baf6:	ab06      	add	r3, sp, #24
 800baf8:	80da      	strh	r2, [r3, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800bafa:	0018      	movs	r0, r3
 800bafc:	2200      	movs	r2, #0
 800bafe:	f7ff ffab 	bl	800ba58 <_lv_area_is_point_on>
 800bb02:	1e02      	subs	r2, r0, #0
 800bb04:	d007      	beq.n	800bb16 <_lv_area_is_point_on+0xbe>
        corner_area.x2 += radius;
 800bb06:	1965      	adds	r5, r4, r5
 800bb08:	ab06      	add	r3, sp, #24
 800bb0a:	809d      	strh	r5, [r3, #4]
        corner_area.y2 += radius;
 800bb0c:	9b03      	ldr	r3, [sp, #12]
 800bb0e:	18e4      	adds	r4, r4, r3
 800bb10:	ab06      	add	r3, sp, #24
 800bb12:	80dc      	strh	r4, [r3, #6]
 800bb14:	e010      	b.n	800bb38 <_lv_area_is_point_on+0xe0>
    corner_area.y2 = a_p->y2;
 800bb16:	9902      	ldr	r1, [sp, #8]
    corner_area.y1 = a_p->y2 - radius;
 800bb18:	ab06      	add	r3, sp, #24
 800bb1a:	1b3f      	subs	r7, r7, r4
    corner_area.y2 = a_p->y2;
 800bb1c:	80d9      	strh	r1, [r3, #6]
    corner_area.y1 = a_p->y2 - radius;
 800bb1e:	b2bf      	uxth	r7, r7
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800bb20:	0031      	movs	r1, r6
 800bb22:	0018      	movs	r0, r3
    corner_area.y1 = a_p->y2 - radius;
 800bb24:	805f      	strh	r7, [r3, #2]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800bb26:	f7ff ff97 	bl	800ba58 <_lv_area_is_point_on>
 800bb2a:	1e02      	subs	r2, r0, #0
 800bb2c:	d009      	beq.n	800bb42 <_lv_area_is_point_on+0xea>
        corner_area.x2 += radius;
 800bb2e:	1965      	adds	r5, r4, r5
 800bb30:	ab06      	add	r3, sp, #24
 800bb32:	809d      	strh	r5, [r3, #4]
        corner_area.y1 -= radius;
 800bb34:	1b3c      	subs	r4, r7, r4
 800bb36:	805c      	strh	r4, [r3, #2]
        return lv_point_within_circle(&corner_area, p_p);
 800bb38:	0031      	movs	r1, r6
 800bb3a:	0018      	movs	r0, r3
 800bb3c:	f7ff fef8 	bl	800b930 <lv_point_within_circle>
 800bb40:	e7a9      	b.n	800ba96 <_lv_area_is_point_on+0x3e>
    corner_area.x1 = a_p->x2 - radius;
 800bb42:	9b05      	ldr	r3, [sp, #20]
    corner_area.x2 = a_p->x2;
 800bb44:	9901      	ldr	r1, [sp, #4]
    corner_area.x1 = a_p->x2 - radius;
 800bb46:	1b1d      	subs	r5, r3, r4
 800bb48:	ab06      	add	r3, sp, #24
    corner_area.x2 = a_p->x2;
 800bb4a:	8099      	strh	r1, [r3, #4]
    corner_area.x1 = a_p->x2 - radius;
 800bb4c:	b2ad      	uxth	r5, r5
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800bb4e:	0031      	movs	r1, r6
 800bb50:	0018      	movs	r0, r3
    corner_area.x1 = a_p->x2 - radius;
 800bb52:	801d      	strh	r5, [r3, #0]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800bb54:	f7ff ff80 	bl	800ba58 <_lv_area_is_point_on>
 800bb58:	1e02      	subs	r2, r0, #0
 800bb5a:	d003      	beq.n	800bb64 <_lv_area_is_point_on+0x10c>
        corner_area.x1 -= radius;
 800bb5c:	1b2d      	subs	r5, r5, r4
 800bb5e:	ab06      	add	r3, sp, #24
 800bb60:	801d      	strh	r5, [r3, #0]
 800bb62:	e7e7      	b.n	800bb34 <_lv_area_is_point_on+0xdc>
    corner_area.y1 = a_p->y1;
 800bb64:	9900      	ldr	r1, [sp, #0]
 800bb66:	ab06      	add	r3, sp, #24
 800bb68:	8059      	strh	r1, [r3, #2]
    corner_area.y2 = a_p->y1 + radius;
 800bb6a:	9904      	ldr	r1, [sp, #16]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800bb6c:	0018      	movs	r0, r3
    corner_area.y2 = a_p->y1 + radius;
 800bb6e:	80d9      	strh	r1, [r3, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800bb70:	0031      	movs	r1, r6
 800bb72:	f7ff ff71 	bl	800ba58 <_lv_area_is_point_on>
 800bb76:	2800      	cmp	r0, #0
 800bb78:	d100      	bne.n	800bb7c <_lv_area_is_point_on+0x124>
 800bb7a:	e78b      	b.n	800ba94 <_lv_area_is_point_on+0x3c>
        corner_area.x1 -= radius;
 800bb7c:	1b2d      	subs	r5, r5, r4
 800bb7e:	ab06      	add	r3, sp, #24
 800bb80:	801d      	strh	r5, [r3, #0]
 800bb82:	e7c3      	b.n	800bb0c <_lv_area_is_point_on+0xb4>

0800bb84 <_lv_area_is_on>:
{
 800bb84:	b530      	push	{r4, r5, lr}
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 800bb86:	2304      	movs	r3, #4
 800bb88:	5eca      	ldrsh	r2, [r1, r3]
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	5ec4      	ldrsh	r4, [r0, r3]
        return false;
 800bb8e:	2300      	movs	r3, #0
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 800bb90:	4294      	cmp	r4, r2
 800bb92:	dc14      	bgt.n	800bbbe <_lv_area_is_on+0x3a>
 800bb94:	2204      	movs	r2, #4
 800bb96:	5e84      	ldrsh	r4, [r0, r2]
 800bb98:	2500      	movs	r5, #0
 800bb9a:	5f4a      	ldrsh	r2, [r1, r5]
 800bb9c:	4294      	cmp	r4, r2
 800bb9e:	db0e      	blt.n	800bbbe <_lv_area_is_on+0x3a>
 800bba0:	2202      	movs	r2, #2
 800bba2:	5e84      	ldrsh	r4, [r0, r2]
 800bba4:	2506      	movs	r5, #6
 800bba6:	5f4a      	ldrsh	r2, [r1, r5]
 800bba8:	4294      	cmp	r4, r2
 800bbaa:	dc08      	bgt.n	800bbbe <_lv_area_is_on+0x3a>
 800bbac:	2306      	movs	r3, #6
 800bbae:	5ec4      	ldrsh	r4, [r0, r3]
 800bbb0:	2302      	movs	r3, #2
 800bbb2:	5eca      	ldrsh	r2, [r1, r3]
 800bbb4:	17e3      	asrs	r3, r4, #31
 800bbb6:	0fd0      	lsrs	r0, r2, #31
 800bbb8:	4294      	cmp	r4, r2
 800bbba:	4143      	adcs	r3, r0
 800bbbc:	b2db      	uxtb	r3, r3
}
 800bbbe:	0018      	movs	r0, r3
 800bbc0:	bd30      	pop	{r4, r5, pc}

0800bbc2 <_lv_area_is_in>:
{
 800bbc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbc4:	0016      	movs	r6, r2
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	5ec7      	ldrsh	r7, [r0, r3]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	5e8b      	ldrsh	r3, [r1, r2]
{
 800bbce:	b085      	sub	sp, #20
 800bbd0:	000d      	movs	r5, r1
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 800bbd2:	42bb      	cmp	r3, r7
 800bbd4:	dd02      	ble.n	800bbdc <_lv_area_is_in+0x1a>
    if(!is_in) return false;
 800bbd6:	2000      	movs	r0, #0
}
 800bbd8:	b005      	add	sp, #20
 800bbda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 800bbdc:	2202      	movs	r2, #2
 800bbde:	5e83      	ldrsh	r3, [r0, r2]
 800bbe0:	2102      	movs	r1, #2
 800bbe2:	5e6a      	ldrsh	r2, [r5, r1]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	dcf6      	bgt.n	800bbd6 <_lv_area_is_in+0x14>
 800bbe8:	2104      	movs	r1, #4
 800bbea:	5e42      	ldrsh	r2, [r0, r1]
 800bbec:	9200      	str	r2, [sp, #0]
 800bbee:	2104      	movs	r1, #4
 800bbf0:	5e6a      	ldrsh	r2, [r5, r1]
 800bbf2:	9900      	ldr	r1, [sp, #0]
 800bbf4:	428a      	cmp	r2, r1
 800bbf6:	dbee      	blt.n	800bbd6 <_lv_area_is_in+0x14>
       ain_p->y2 <= aholder_p->y2) {
 800bbf8:	2106      	movs	r1, #6
 800bbfa:	5e42      	ldrsh	r2, [r0, r1]
 800bbfc:	9201      	str	r2, [sp, #4]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 800bbfe:	2106      	movs	r1, #6
 800bc00:	5e6a      	ldrsh	r2, [r5, r1]
 800bc02:	9901      	ldr	r1, [sp, #4]
 800bc04:	428a      	cmp	r2, r1
 800bc06:	dbe6      	blt.n	800bbd6 <_lv_area_is_in+0x14>
    if(radius == 0) return true;
 800bc08:	2001      	movs	r0, #1
 800bc0a:	2e00      	cmp	r6, #0
 800bc0c:	d0e4      	beq.n	800bbd8 <_lv_area_is_in+0x16>
    p.x = ain_p->x1;
 800bc0e:	ac03      	add	r4, sp, #12
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800bc10:	0032      	movs	r2, r6
 800bc12:	0021      	movs	r1, r4
 800bc14:	0028      	movs	r0, r5
    p.x = ain_p->x1;
 800bc16:	8027      	strh	r7, [r4, #0]
    p.y = ain_p->y1;
 800bc18:	8063      	strh	r3, [r4, #2]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800bc1a:	f7ff ff1d 	bl	800ba58 <_lv_area_is_point_on>
 800bc1e:	2800      	cmp	r0, #0
 800bc20:	d0d9      	beq.n	800bbd6 <_lv_area_is_in+0x14>
    p.x = ain_p->x2;
 800bc22:	9b00      	ldr	r3, [sp, #0]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800bc24:	0032      	movs	r2, r6
 800bc26:	0021      	movs	r1, r4
 800bc28:	0028      	movs	r0, r5
    p.x = ain_p->x2;
 800bc2a:	8023      	strh	r3, [r4, #0]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800bc2c:	f7ff ff14 	bl	800ba58 <_lv_area_is_point_on>
 800bc30:	2800      	cmp	r0, #0
 800bc32:	d0d0      	beq.n	800bbd6 <_lv_area_is_in+0x14>
    p.y = ain_p->y2;
 800bc34:	9b01      	ldr	r3, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800bc36:	0032      	movs	r2, r6
 800bc38:	0021      	movs	r1, r4
 800bc3a:	0028      	movs	r0, r5
    p.x = ain_p->x1;
 800bc3c:	8027      	strh	r7, [r4, #0]
    p.y = ain_p->y2;
 800bc3e:	8063      	strh	r3, [r4, #2]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800bc40:	f7ff ff0a 	bl	800ba58 <_lv_area_is_point_on>
 800bc44:	2800      	cmp	r0, #0
 800bc46:	d0c6      	beq.n	800bbd6 <_lv_area_is_in+0x14>
    p.x = ain_p->x2;
 800bc48:	9b00      	ldr	r3, [sp, #0]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800bc4a:	0032      	movs	r2, r6
 800bc4c:	0021      	movs	r1, r4
 800bc4e:	0028      	movs	r0, r5
    p.x = ain_p->x2;
 800bc50:	8023      	strh	r3, [r4, #0]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800bc52:	f7ff ff01 	bl	800ba58 <_lv_area_is_point_on>
 800bc56:	e7bf      	b.n	800bbd8 <_lv_area_is_in+0x16>

0800bc58 <_lv_area_align>:
{
 800bc58:	b570      	push	{r4, r5, r6, lr}
 800bc5a:	0004      	movs	r4, r0
 800bc5c:	8805      	ldrh	r5, [r0, #0]
    switch(align) {
 800bc5e:	2a14      	cmp	r2, #20
 800bc60:	d83d      	bhi.n	800bcde <_lv_area_align+0x86>
 800bc62:	0010      	movs	r0, r2
 800bc64:	f7f4 fa7c 	bl	8000160 <__gnu_thumb1_case_uhi>
 800bc68:	00380015 	.word	0x00380015
 800bc6c:	00560043 	.word	0x00560043
 800bc70:	0065005d 	.word	0x0065005d
 800bc74:	007d0076 	.word	0x007d0076
 800bc78:	0086007f 	.word	0x0086007f
 800bc7c:	009e008d 	.word	0x009e008d
 800bc80:	00ac00a5 	.word	0x00ac00a5
 800bc84:	00c400bd 	.word	0x00c400bd
 800bc88:	00ce00c9 	.word	0x00ce00c9
 800bc8c:	00d600d3 	.word	0x00d600d3
 800bc90:	00d9      	.short	0x00d9
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800bc92:	88a2      	ldrh	r2, [r4, #4]
 800bc94:	880e      	ldrh	r6, [r1, #0]
 800bc96:	3201      	adds	r2, #1
 800bc98:	1b52      	subs	r2, r2, r5
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 800bc9a:	b212      	sxth	r2, r2
 800bc9c:	0fd0      	lsrs	r0, r2, #31
 800bc9e:	1880      	adds	r0, r0, r2
 800bca0:	888a      	ldrh	r2, [r1, #4]
 800bca2:	1040      	asrs	r0, r0, #1
 800bca4:	3201      	adds	r2, #1
 800bca6:	1b92      	subs	r2, r2, r6
 800bca8:	b212      	sxth	r2, r2
 800bcaa:	0fd6      	lsrs	r6, r2, #31
 800bcac:	18b2      	adds	r2, r6, r2
 800bcae:	1052      	asrs	r2, r2, #1
 800bcb0:	1a82      	subs	r2, r0, r2
            res->x = lv_area_get_width(base);
 800bcb2:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800bcb4:	88e2      	ldrh	r2, [r4, #6]
 800bcb6:	8860      	ldrh	r0, [r4, #2]
 800bcb8:	3201      	adds	r2, #1
 800bcba:	1a12      	subs	r2, r2, r0
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 800bcbc:	b212      	sxth	r2, r2
 800bcbe:	0fd0      	lsrs	r0, r2, #31
 800bcc0:	1880      	adds	r0, r0, r2
 800bcc2:	88ca      	ldrh	r2, [r1, #6]
 800bcc4:	8849      	ldrh	r1, [r1, #2]
 800bcc6:	3201      	adds	r2, #1
 800bcc8:	1a52      	subs	r2, r2, r1
 800bcca:	b212      	sxth	r2, r2
 800bccc:	0fd1      	lsrs	r1, r2, #31
 800bcce:	188a      	adds	r2, r1, r2
 800bcd0:	1040      	asrs	r0, r0, #1
 800bcd2:	1052      	asrs	r2, r2, #1
 800bcd4:	1a82      	subs	r2, r0, r2
 800bcd6:	e001      	b.n	800bcdc <_lv_area_align+0x84>
            res->x = 0;
 800bcd8:	2200      	movs	r2, #0
 800bcda:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 800bcdc:	805a      	strh	r2, [r3, #2]
    res->x += base->x1;
 800bcde:	881a      	ldrh	r2, [r3, #0]
 800bce0:	18ad      	adds	r5, r5, r2
 800bce2:	801d      	strh	r5, [r3, #0]
    res->y += base->y1;
 800bce4:	885a      	ldrh	r2, [r3, #2]
 800bce6:	8861      	ldrh	r1, [r4, #2]
 800bce8:	1852      	adds	r2, r2, r1
 800bcea:	805a      	strh	r2, [r3, #2]
}
 800bcec:	bd70      	pop	{r4, r5, r6, pc}
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800bcee:	88a2      	ldrh	r2, [r4, #4]
 800bcf0:	3201      	adds	r2, #1
 800bcf2:	1b52      	subs	r2, r2, r5
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 800bcf4:	b212      	sxth	r2, r2
 800bcf6:	0fd0      	lsrs	r0, r2, #31
 800bcf8:	1880      	adds	r0, r0, r2
 800bcfa:	888a      	ldrh	r2, [r1, #4]
 800bcfc:	8809      	ldrh	r1, [r1, #0]
 800bcfe:	3201      	adds	r2, #1
 800bd00:	1a52      	subs	r2, r2, r1
 800bd02:	b212      	sxth	r2, r2
 800bd04:	0fd1      	lsrs	r1, r2, #31
 800bd06:	188a      	adds	r2, r1, r2
 800bd08:	1040      	asrs	r0, r0, #1
 800bd0a:	1052      	asrs	r2, r2, #1
 800bd0c:	1a82      	subs	r2, r0, r2
            res->x = lv_area_get_width(base);
 800bd0e:	801a      	strh	r2, [r3, #0]
            res->y = 0;
 800bd10:	2200      	movs	r2, #0
 800bd12:	e7e3      	b.n	800bcdc <_lv_area_align+0x84>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 800bd14:	880a      	ldrh	r2, [r1, #0]
 800bd16:	8889      	ldrh	r1, [r1, #4]
 800bd18:	1a52      	subs	r2, r2, r1
 800bd1a:	88a1      	ldrh	r1, [r4, #4]
 800bd1c:	1852      	adds	r2, r2, r1
 800bd1e:	1b52      	subs	r2, r2, r5
 800bd20:	e7f5      	b.n	800bd0e <_lv_area_align+0xb6>
            res->x = 0;
 800bd22:	2200      	movs	r2, #0
            res->x = lv_area_get_width(base);
 800bd24:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 800bd26:	884a      	ldrh	r2, [r1, #2]
 800bd28:	88c9      	ldrh	r1, [r1, #6]
 800bd2a:	1a52      	subs	r2, r2, r1
 800bd2c:	88e1      	ldrh	r1, [r4, #6]
 800bd2e:	1852      	adds	r2, r2, r1
 800bd30:	e043      	b.n	800bdba <_lv_area_align+0x162>
 800bd32:	88a2      	ldrh	r2, [r4, #4]
 800bd34:	880e      	ldrh	r6, [r1, #0]
 800bd36:	3201      	adds	r2, #1
 800bd38:	1b52      	subs	r2, r2, r5
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 800bd3a:	b212      	sxth	r2, r2
 800bd3c:	0fd0      	lsrs	r0, r2, #31
 800bd3e:	1880      	adds	r0, r0, r2
 800bd40:	888a      	ldrh	r2, [r1, #4]
 800bd42:	1040      	asrs	r0, r0, #1
 800bd44:	3201      	adds	r2, #1
 800bd46:	1b92      	subs	r2, r2, r6
 800bd48:	b212      	sxth	r2, r2
 800bd4a:	0fd6      	lsrs	r6, r2, #31
 800bd4c:	18b2      	adds	r2, r6, r2
 800bd4e:	1052      	asrs	r2, r2, #1
 800bd50:	1a82      	subs	r2, r0, r2
 800bd52:	e7e7      	b.n	800bd24 <_lv_area_align+0xcc>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 800bd54:	8888      	ldrh	r0, [r1, #4]
 800bd56:	880a      	ldrh	r2, [r1, #0]
 800bd58:	1a12      	subs	r2, r2, r0
 800bd5a:	88a0      	ldrh	r0, [r4, #4]
 800bd5c:	1812      	adds	r2, r2, r0
 800bd5e:	1b52      	subs	r2, r2, r5
 800bd60:	e7e0      	b.n	800bd24 <_lv_area_align+0xcc>
            res->x = 0;
 800bd62:	2200      	movs	r2, #0
 800bd64:	e7a5      	b.n	800bcb2 <_lv_area_align+0x5a>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 800bd66:	8888      	ldrh	r0, [r1, #4]
 800bd68:	880a      	ldrh	r2, [r1, #0]
 800bd6a:	1a12      	subs	r2, r2, r0
 800bd6c:	88a0      	ldrh	r0, [r4, #4]
 800bd6e:	1812      	adds	r2, r2, r0
 800bd70:	1b52      	subs	r2, r2, r5
 800bd72:	e79e      	b.n	800bcb2 <_lv_area_align+0x5a>
            res->x = 0;
 800bd74:	2200      	movs	r2, #0
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 800bd76:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800bd78:	88ca      	ldrh	r2, [r1, #6]
 800bd7a:	8849      	ldrh	r1, [r1, #2]
 800bd7c:	1a52      	subs	r2, r2, r1
            res->y = -lv_area_get_height(to_align);
 800bd7e:	43d2      	mvns	r2, r2
 800bd80:	e7ac      	b.n	800bcdc <_lv_area_align+0x84>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800bd82:	88a2      	ldrh	r2, [r4, #4]
 800bd84:	880e      	ldrh	r6, [r1, #0]
 800bd86:	3201      	adds	r2, #1
 800bd88:	1b52      	subs	r2, r2, r5
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 800bd8a:	b212      	sxth	r2, r2
 800bd8c:	0fd0      	lsrs	r0, r2, #31
 800bd8e:	1880      	adds	r0, r0, r2
 800bd90:	888a      	ldrh	r2, [r1, #4]
 800bd92:	1040      	asrs	r0, r0, #1
 800bd94:	3201      	adds	r2, #1
 800bd96:	1b92      	subs	r2, r2, r6
 800bd98:	b212      	sxth	r2, r2
 800bd9a:	0fd6      	lsrs	r6, r2, #31
 800bd9c:	18b2      	adds	r2, r6, r2
 800bd9e:	1052      	asrs	r2, r2, #1
 800bda0:	1a82      	subs	r2, r0, r2
 800bda2:	e7e8      	b.n	800bd76 <_lv_area_align+0x11e>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 800bda4:	8888      	ldrh	r0, [r1, #4]
 800bda6:	880a      	ldrh	r2, [r1, #0]
 800bda8:	1a12      	subs	r2, r2, r0
 800bdaa:	88a0      	ldrh	r0, [r4, #4]
 800bdac:	1812      	adds	r2, r2, r0
 800bdae:	1b52      	subs	r2, r2, r5
 800bdb0:	e7e1      	b.n	800bd76 <_lv_area_align+0x11e>
            res->x = 0;
 800bdb2:	2200      	movs	r2, #0
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 800bdb4:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800bdb6:	88e2      	ldrh	r2, [r4, #6]
 800bdb8:	3201      	adds	r2, #1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 800bdba:	8861      	ldrh	r1, [r4, #2]
 800bdbc:	1a52      	subs	r2, r2, r1
 800bdbe:	e78d      	b.n	800bcdc <_lv_area_align+0x84>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800bdc0:	88a2      	ldrh	r2, [r4, #4]
 800bdc2:	3201      	adds	r2, #1
 800bdc4:	1b52      	subs	r2, r2, r5
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 800bdc6:	b212      	sxth	r2, r2
 800bdc8:	0fd0      	lsrs	r0, r2, #31
 800bdca:	1880      	adds	r0, r0, r2
 800bdcc:	888a      	ldrh	r2, [r1, #4]
 800bdce:	8809      	ldrh	r1, [r1, #0]
 800bdd0:	3201      	adds	r2, #1
 800bdd2:	1a52      	subs	r2, r2, r1
 800bdd4:	b212      	sxth	r2, r2
 800bdd6:	0fd1      	lsrs	r1, r2, #31
 800bdd8:	188a      	adds	r2, r1, r2
 800bdda:	1040      	asrs	r0, r0, #1
 800bddc:	1052      	asrs	r2, r2, #1
 800bdde:	1a82      	subs	r2, r0, r2
 800bde0:	e7e8      	b.n	800bdb4 <_lv_area_align+0x15c>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 800bde2:	880a      	ldrh	r2, [r1, #0]
 800bde4:	8889      	ldrh	r1, [r1, #4]
 800bde6:	1a52      	subs	r2, r2, r1
 800bde8:	88a1      	ldrh	r1, [r4, #4]
 800bdea:	1852      	adds	r2, r2, r1
 800bdec:	1b52      	subs	r2, r2, r5
 800bdee:	e7e1      	b.n	800bdb4 <_lv_area_align+0x15c>
 800bdf0:	888a      	ldrh	r2, [r1, #4]
 800bdf2:	8809      	ldrh	r1, [r1, #0]
 800bdf4:	1a52      	subs	r2, r2, r1
            res->x = -lv_area_get_width(to_align);
 800bdf6:	43d2      	mvns	r2, r2
 800bdf8:	e789      	b.n	800bd0e <_lv_area_align+0xb6>
 800bdfa:	888a      	ldrh	r2, [r1, #4]
 800bdfc:	8808      	ldrh	r0, [r1, #0]
 800bdfe:	1a12      	subs	r2, r2, r0
            res->x = -lv_area_get_width(to_align);
 800be00:	43d2      	mvns	r2, r2
 800be02:	e756      	b.n	800bcb2 <_lv_area_align+0x5a>
 800be04:	888a      	ldrh	r2, [r1, #4]
 800be06:	8808      	ldrh	r0, [r1, #0]
 800be08:	1a12      	subs	r2, r2, r0
            res->x = -lv_area_get_width(to_align);
 800be0a:	43d2      	mvns	r2, r2
 800be0c:	e78a      	b.n	800bd24 <_lv_area_align+0xcc>
 800be0e:	88a2      	ldrh	r2, [r4, #4]
 800be10:	3201      	adds	r2, #1
 800be12:	e784      	b.n	800bd1e <_lv_area_align+0xc6>
 800be14:	88a2      	ldrh	r2, [r4, #4]
 800be16:	3201      	adds	r2, #1
 800be18:	e7aa      	b.n	800bd70 <_lv_area_align+0x118>
 800be1a:	88a2      	ldrh	r2, [r4, #4]
 800be1c:	3201      	adds	r2, #1
 800be1e:	e79e      	b.n	800bd5e <_lv_area_align+0x106>

0800be20 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 800be20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800be22:	26ff      	movs	r6, #255	; 0xff
 800be24:	271f      	movs	r7, #31
 800be26:	0403      	lsls	r3, r0, #16
 800be28:	040c      	lsls	r4, r1, #16
 800be2a:	1ab6      	subs	r6, r6, r2
 800be2c:	0edb      	lsrs	r3, r3, #27
 800be2e:	0ee4      	lsrs	r4, r4, #27
 800be30:	4374      	muls	r4, r6
 800be32:	4353      	muls	r3, r2
 800be34:	4d11      	ldr	r5, [pc, #68]	; (800be7c <lv_color_mix+0x5c>)
 800be36:	191b      	adds	r3, r3, r4
 800be38:	3380      	adds	r3, #128	; 0x80
 800be3a:	436b      	muls	r3, r5
 800be3c:	0ddb      	lsrs	r3, r3, #23
 800be3e:	403b      	ands	r3, r7
 800be40:	9301      	str	r3, [sp, #4]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800be42:	054b      	lsls	r3, r1, #21
 800be44:	0e9b      	lsrs	r3, r3, #26
 800be46:	4373      	muls	r3, r6
 800be48:	469c      	mov	ip, r3
 800be4a:	0544      	lsls	r4, r0, #21
 800be4c:	0ea4      	lsrs	r4, r4, #26
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800be4e:	06c0      	lsls	r0, r0, #27
 800be50:	06c9      	lsls	r1, r1, #27
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800be52:	4354      	muls	r4, r2
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800be54:	0ec0      	lsrs	r0, r0, #27
 800be56:	0ec9      	lsrs	r1, r1, #27
 800be58:	4371      	muls	r1, r6
 800be5a:	4350      	muls	r0, r2
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800be5c:	4464      	add	r4, ip
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800be5e:	1840      	adds	r0, r0, r1
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800be60:	3480      	adds	r4, #128	; 0x80
 800be62:	436c      	muls	r4, r5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800be64:	3080      	adds	r0, #128	; 0x80
 800be66:	4368      	muls	r0, r5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800be68:	00e4      	lsls	r4, r4, #3
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 800be6a:	9b01      	ldr	r3, [sp, #4]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800be6c:	0dc0      	lsrs	r0, r0, #23
    return ret;
 800be6e:	0ea4      	lsrs	r4, r4, #26
 800be70:	4038      	ands	r0, r7
 800be72:	0164      	lsls	r4, r4, #5
 800be74:	02db      	lsls	r3, r3, #11
 800be76:	4320      	orrs	r0, r4
 800be78:	4318      	orrs	r0, r3
}
 800be7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800be7c:	00008081 	.word	0x00008081

0800be80 <lv_color_fill>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
 800be80:	b510      	push	{r4, lr}
 800be82:	b28c      	uxth	r4, r1
#if LV_COLOR_DEPTH == 16
    uintptr_t buf_int = (uintptr_t) buf;
    if(buf_int & 0x3) {
 800be84:	0783      	lsls	r3, r0, #30
 800be86:	d002      	beq.n	800be8e <lv_color_fill+0xe>
        *buf = color;
 800be88:	8001      	strh	r1, [r0, #0]
        buf++;
        px_num--;
 800be8a:	3a01      	subs	r2, #1
        buf++;
 800be8c:	3002      	adds	r0, #2
    }

    uint32_t c32 = color.full + (color.full << 16);
 800be8e:	0423      	lsls	r3, r4, #16
 800be90:	191b      	adds	r3, r3, r4
    uint32_t * buf32 = (uint32_t *)buf;

    while(px_num > 16) {
 800be92:	2a10      	cmp	r2, #16
 800be94:	d802      	bhi.n	800be9c <lv_color_fill+0x1c>
        px_num -= 16;
    }

    buf = (lv_color_t *)buf32;

    while(px_num) {
 800be96:	2a00      	cmp	r2, #0
 800be98:	d10b      	bne.n	800beb2 <lv_color_fill+0x32>
        *buf = color;
        buf++;
        px_num --;
    }
#endif
}
 800be9a:	bd10      	pop	{r4, pc}
        *buf32 = c32;
 800be9c:	6003      	str	r3, [r0, #0]
        *buf32 = c32;
 800be9e:	6043      	str	r3, [r0, #4]
        *buf32 = c32;
 800bea0:	6083      	str	r3, [r0, #8]
        *buf32 = c32;
 800bea2:	60c3      	str	r3, [r0, #12]
        *buf32 = c32;
 800bea4:	6103      	str	r3, [r0, #16]
        *buf32 = c32;
 800bea6:	6143      	str	r3, [r0, #20]
        *buf32 = c32;
 800bea8:	6183      	str	r3, [r0, #24]
        *buf32 = c32;
 800beaa:	61c3      	str	r3, [r0, #28]
        px_num -= 16;
 800beac:	3a10      	subs	r2, #16
 800beae:	3020      	adds	r0, #32
 800beb0:	e7ef      	b.n	800be92 <lv_color_fill+0x12>
        *buf = color;
 800beb2:	8004      	strh	r4, [r0, #0]
        px_num --;
 800beb4:	3a01      	subs	r2, #1
        buf++;
 800beb6:	3002      	adds	r0, #2
 800beb8:	e7ed      	b.n	800be96 <lv_color_fill+0x16>

0800beba <lv_color_darken>:
{
    return lv_color_mix(LV_COLOR_WHITE, c, lvl);
}

lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl)
{
 800beba:	b510      	push	{r4, lr}
 800bebc:	000a      	movs	r2, r1
    return lv_color_mix(LV_COLOR_BLACK, c, lvl);
 800bebe:	1c01      	adds	r1, r0, #0
 800bec0:	2000      	movs	r0, #0
 800bec2:	f7ff ffad 	bl	800be20 <lv_color_mix>
}
 800bec6:	bd10      	pop	{r4, pc}

0800bec8 <node_set_prev.isra.0>:
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 800bec8:	2900      	cmp	r1, #0
 800beca:	d001      	beq.n	800bed0 <node_set_prev.isra.0+0x8>
    act8 += LL_PREV_P_OFFSET(ll_p);

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;

    *act_node_p = *prev_node_p;
 800becc:	6803      	ldr	r3, [r0, #0]
 800bece:	50ca      	str	r2, [r1, r3]
}
 800bed0:	4770      	bx	lr

0800bed2 <node_set_next.isra.1>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 800bed2:	2900      	cmp	r1, #0
 800bed4:	d002      	beq.n	800bedc <node_set_next.isra.1+0xa>

    act8 += LL_NEXT_P_OFFSET(ll_p);
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;

    *act_node_p = *next_node_p;
 800bed6:	6803      	ldr	r3, [r0, #0]
 800bed8:	18c9      	adds	r1, r1, r3
 800beda:	604a      	str	r2, [r1, #4]
}
 800bedc:	4770      	bx	lr

0800bede <_lv_ll_init>:
    ll_p->head = NULL;
 800bede:	2300      	movs	r3, #0
    node_size = (node_size + 3) & (~0x3);
 800bee0:	3103      	adds	r1, #3
    ll_p->head = NULL;
 800bee2:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
 800bee4:	6083      	str	r3, [r0, #8]
    node_size = (node_size + 3) & (~0x3);
 800bee6:	3303      	adds	r3, #3
 800bee8:	4399      	bics	r1, r3
    ll_p->n_size = node_size;
 800beea:	6001      	str	r1, [r0, #0]
}
 800beec:	4770      	bx	lr

0800beee <_lv_ll_ins_head>:
{
 800beee:	b570      	push	{r4, r5, r6, lr}
 800bef0:	0004      	movs	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800bef2:	6800      	ldr	r0, [r0, #0]
 800bef4:	3008      	adds	r0, #8
 800bef6:	f000 f987 	bl	800c208 <lv_mem_alloc>
 800befa:	1e05      	subs	r5, r0, #0
    if(n_new != NULL) {
 800befc:	d015      	beq.n	800bf2a <_lv_ll_ins_head+0x3c>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 800befe:	0001      	movs	r1, r0
 800bf00:	2200      	movs	r2, #0
 800bf02:	0020      	movs	r0, r4
 800bf04:	f7ff ffe0 	bl	800bec8 <node_set_prev.isra.0>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 800bf08:	0029      	movs	r1, r5
 800bf0a:	6862      	ldr	r2, [r4, #4]
 800bf0c:	0020      	movs	r0, r4
 800bf0e:	f7ff ffe0 	bl	800bed2 <node_set_next.isra.1>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 800bf12:	6861      	ldr	r1, [r4, #4]
 800bf14:	2900      	cmp	r1, #0
 800bf16:	d003      	beq.n	800bf20 <_lv_ll_ins_head+0x32>
            node_set_prev(ll_p, ll_p->head, n_new);
 800bf18:	002a      	movs	r2, r5
 800bf1a:	0020      	movs	r0, r4
 800bf1c:	f7ff ffd4 	bl	800bec8 <node_set_prev.isra.0>
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 800bf20:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 800bf22:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d100      	bne.n	800bf2a <_lv_ll_ins_head+0x3c>
            ll_p->tail = n_new;
 800bf28:	60a5      	str	r5, [r4, #8]
}
 800bf2a:	0028      	movs	r0, r5
 800bf2c:	bd70      	pop	{r4, r5, r6, pc}

0800bf2e <_lv_ll_ins_tail>:
{
 800bf2e:	b570      	push	{r4, r5, r6, lr}
 800bf30:	0004      	movs	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800bf32:	6800      	ldr	r0, [r0, #0]
 800bf34:	3008      	adds	r0, #8
 800bf36:	f000 f967 	bl	800c208 <lv_mem_alloc>
 800bf3a:	1e05      	subs	r5, r0, #0
    if(n_new != NULL) {
 800bf3c:	d015      	beq.n	800bf6a <_lv_ll_ins_tail+0x3c>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 800bf3e:	0001      	movs	r1, r0
 800bf40:	2200      	movs	r2, #0
 800bf42:	0020      	movs	r0, r4
 800bf44:	f7ff ffc5 	bl	800bed2 <node_set_next.isra.1>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
 800bf48:	0029      	movs	r1, r5
 800bf4a:	68a2      	ldr	r2, [r4, #8]
 800bf4c:	0020      	movs	r0, r4
 800bf4e:	f7ff ffbb 	bl	800bec8 <node_set_prev.isra.0>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 800bf52:	68a1      	ldr	r1, [r4, #8]
 800bf54:	2900      	cmp	r1, #0
 800bf56:	d003      	beq.n	800bf60 <_lv_ll_ins_tail+0x32>
            node_set_next(ll_p, ll_p->tail, n_new);
 800bf58:	002a      	movs	r2, r5
 800bf5a:	0020      	movs	r0, r4
 800bf5c:	f7ff ffb9 	bl	800bed2 <node_set_next.isra.1>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 800bf60:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 800bf62:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d100      	bne.n	800bf6a <_lv_ll_ins_tail+0x3c>
            ll_p->head = n_new;
 800bf68:	6065      	str	r5, [r4, #4]
}
 800bf6a:	0028      	movs	r0, r5
 800bf6c:	bd70      	pop	{r4, r5, r6, pc}

0800bf6e <_lv_ll_get_head>:
    if(ll_p != NULL) {
 800bf6e:	2800      	cmp	r0, #0
 800bf70:	d000      	beq.n	800bf74 <_lv_ll_get_head+0x6>
        head = ll_p->head;
 800bf72:	6840      	ldr	r0, [r0, #4]
}
 800bf74:	4770      	bx	lr

0800bf76 <_lv_ll_get_tail>:
    if(ll_p != NULL) {
 800bf76:	2800      	cmp	r0, #0
 800bf78:	d000      	beq.n	800bf7c <_lv_ll_get_tail+0x6>
        tail = ll_p->tail;
 800bf7a:	6880      	ldr	r0, [r0, #8]
}
 800bf7c:	4770      	bx	lr

0800bf7e <_lv_ll_get_next>:
    if(ll_p == NULL) return NULL;
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	d002      	beq.n	800bf88 <_lv_ll_get_next+0xa>
    return *((lv_ll_node_t **)n_act_d);
 800bf82:	6803      	ldr	r3, [r0, #0]
 800bf84:	18c9      	adds	r1, r1, r3
 800bf86:	6848      	ldr	r0, [r1, #4]
}
 800bf88:	4770      	bx	lr

0800bf8a <_lv_ll_get_prev>:
    if(ll_p == NULL) return NULL;
 800bf8a:	2800      	cmp	r0, #0
 800bf8c:	d001      	beq.n	800bf92 <_lv_ll_get_prev+0x8>
    return *((lv_ll_node_t **)n_act_d);
 800bf8e:	6803      	ldr	r3, [r0, #0]
 800bf90:	58c8      	ldr	r0, [r1, r3]
}
 800bf92:	4770      	bx	lr

0800bf94 <_lv_ll_ins_prev>:
{
 800bf94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf96:	0004      	movs	r4, r0
 800bf98:	000e      	movs	r6, r1
    if(NULL == ll_p || NULL == n_act) return NULL;
 800bf9a:	1e05      	subs	r5, r0, #0
 800bf9c:	d007      	beq.n	800bfae <_lv_ll_ins_prev+0x1a>
 800bf9e:	1e0d      	subs	r5, r1, #0
 800bfa0:	d005      	beq.n	800bfae <_lv_ll_ins_prev+0x1a>
    if(_lv_ll_get_head(ll_p) == n_act) {
 800bfa2:	6843      	ldr	r3, [r0, #4]
 800bfa4:	4299      	cmp	r1, r3
 800bfa6:	d104      	bne.n	800bfb2 <_lv_ll_ins_prev+0x1e>
        n_new = _lv_ll_ins_head(ll_p);
 800bfa8:	f7ff ffa1 	bl	800beee <_lv_ll_ins_head>
 800bfac:	0005      	movs	r5, r0
}
 800bfae:	0028      	movs	r0, r5
 800bfb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800bfb2:	6800      	ldr	r0, [r0, #0]
 800bfb4:	3008      	adds	r0, #8
 800bfb6:	f000 f927 	bl	800c208 <lv_mem_alloc>
 800bfba:	1e05      	subs	r5, r0, #0
        if(n_new == NULL) return NULL;
 800bfbc:	d0f7      	beq.n	800bfae <_lv_ll_ins_prev+0x1a>
        n_prev = _lv_ll_get_prev(ll_p, n_act);
 800bfbe:	0031      	movs	r1, r6
 800bfc0:	0020      	movs	r0, r4
 800bfc2:	f7ff ffe2 	bl	800bf8a <_lv_ll_get_prev>
 800bfc6:	0007      	movs	r7, r0
        node_set_next(ll_p, n_prev, n_new);
 800bfc8:	002a      	movs	r2, r5
 800bfca:	0001      	movs	r1, r0
 800bfcc:	0020      	movs	r0, r4
 800bfce:	f7ff ff80 	bl	800bed2 <node_set_next.isra.1>
        node_set_prev(ll_p, n_new, n_prev);
 800bfd2:	003a      	movs	r2, r7
 800bfd4:	0029      	movs	r1, r5
 800bfd6:	0020      	movs	r0, r4
 800bfd8:	f7ff ff76 	bl	800bec8 <node_set_prev.isra.0>
        node_set_prev(ll_p, n_act, n_new);
 800bfdc:	002a      	movs	r2, r5
 800bfde:	0031      	movs	r1, r6
 800bfe0:	0020      	movs	r0, r4
 800bfe2:	f7ff ff71 	bl	800bec8 <node_set_prev.isra.0>
        node_set_next(ll_p, n_new, n_act);
 800bfe6:	0032      	movs	r2, r6
 800bfe8:	0029      	movs	r1, r5
 800bfea:	0020      	movs	r0, r4
 800bfec:	f7ff ff71 	bl	800bed2 <node_set_next.isra.1>
 800bff0:	e7dd      	b.n	800bfae <_lv_ll_ins_prev+0x1a>

0800bff2 <_lv_ll_remove>:
{
 800bff2:	b570      	push	{r4, r5, r6, lr}
 800bff4:	0004      	movs	r4, r0
 800bff6:	000d      	movs	r5, r1
    if(ll_p != NULL) {
 800bff8:	2800      	cmp	r0, #0
 800bffa:	d01c      	beq.n	800c036 <_lv_ll_remove+0x44>
    if(_lv_ll_get_head(ll_p) == node_p) {
 800bffc:	6843      	ldr	r3, [r0, #4]
 800bffe:	4299      	cmp	r1, r3
 800c000:	d109      	bne.n	800c016 <_lv_ll_remove+0x24>
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 800c002:	0029      	movs	r1, r5
 800c004:	0020      	movs	r0, r4
 800c006:	f7ff ffba 	bl	800bf7e <_lv_ll_get_next>
            node_set_prev(ll_p, ll_p->head, NULL);
 800c00a:	2200      	movs	r2, #0
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 800c00c:	1e01      	subs	r1, r0, #0
 800c00e:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
 800c010:	d124      	bne.n	800c05c <_lv_ll_remove+0x6a>
            ll_p->tail = NULL;
 800c012:	60a0      	str	r0, [r4, #8]
}
 800c014:	bd70      	pop	{r4, r5, r6, pc}
 800c016:	f7ff ffb8 	bl	800bf8a <_lv_ll_get_prev>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 800c01a:	68a3      	ldr	r3, [r4, #8]
 800c01c:	0001      	movs	r1, r0
 800c01e:	429d      	cmp	r5, r3
 800c020:	d10b      	bne.n	800c03a <_lv_ll_remove+0x48>
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
 800c022:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
 800c024:	2800      	cmp	r0, #0
 800c026:	d101      	bne.n	800c02c <_lv_ll_remove+0x3a>
            ll_p->head = NULL;
 800c028:	6060      	str	r0, [r4, #4]
 800c02a:	e7f3      	b.n	800c014 <_lv_ll_remove+0x22>
            node_set_next(ll_p, ll_p->tail, NULL);
 800c02c:	2200      	movs	r2, #0
 800c02e:	0020      	movs	r0, r4
 800c030:	f7ff ff4f 	bl	800bed2 <node_set_next.isra.1>
 800c034:	e7ee      	b.n	800c014 <_lv_ll_remove+0x22>
    if(_lv_ll_get_head(ll_p) == node_p) {
 800c036:	2900      	cmp	r1, #0
 800c038:	d0e3      	beq.n	800c002 <_lv_ll_remove+0x10>
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
 800c03a:	0029      	movs	r1, r5
 800c03c:	0020      	movs	r0, r4
 800c03e:	f7ff ffa4 	bl	800bf8a <_lv_ll_get_prev>
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
 800c042:	0029      	movs	r1, r5
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
 800c044:	0006      	movs	r6, r0
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
 800c046:	0020      	movs	r0, r4
 800c048:	f7ff ff99 	bl	800bf7e <_lv_ll_get_next>
 800c04c:	0005      	movs	r5, r0
        node_set_next(ll_p, n_prev, n_next);
 800c04e:	0002      	movs	r2, r0
 800c050:	0031      	movs	r1, r6
 800c052:	0020      	movs	r0, r4
 800c054:	f7ff ff3d 	bl	800bed2 <node_set_next.isra.1>
        node_set_prev(ll_p, n_next, n_prev);
 800c058:	0032      	movs	r2, r6
 800c05a:	0029      	movs	r1, r5
 800c05c:	0020      	movs	r0, r4
 800c05e:	f7ff ff33 	bl	800bec8 <node_set_prev.isra.0>
}
 800c062:	e7d7      	b.n	800c014 <_lv_ll_remove+0x22>

0800c064 <_lv_ll_chg_list>:
{
 800c064:	b570      	push	{r4, r5, r6, lr}
 800c066:	000c      	movs	r4, r1
    _lv_ll_remove(ll_ori_p, node);
 800c068:	0011      	movs	r1, r2
{
 800c06a:	001e      	movs	r6, r3
 800c06c:	0015      	movs	r5, r2
    _lv_ll_remove(ll_ori_p, node);
 800c06e:	f7ff ffc0 	bl	800bff2 <_lv_ll_remove>
    if(head) {
 800c072:	2e00      	cmp	r6, #0
 800c074:	d016      	beq.n	800c0a4 <_lv_ll_chg_list+0x40>
        node_set_prev(ll_new_p, node, NULL);
 800c076:	2200      	movs	r2, #0
 800c078:	0029      	movs	r1, r5
 800c07a:	0020      	movs	r0, r4
 800c07c:	f7ff ff24 	bl	800bec8 <node_set_prev.isra.0>
        node_set_next(ll_new_p, node, ll_new_p->head);
 800c080:	0029      	movs	r1, r5
 800c082:	6862      	ldr	r2, [r4, #4]
 800c084:	0020      	movs	r0, r4
 800c086:	f7ff ff24 	bl	800bed2 <node_set_next.isra.1>
        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
 800c08a:	6861      	ldr	r1, [r4, #4]
 800c08c:	2900      	cmp	r1, #0
 800c08e:	d003      	beq.n	800c098 <_lv_ll_chg_list+0x34>
            node_set_prev(ll_new_p, ll_new_p->head, node);
 800c090:	002a      	movs	r2, r5
 800c092:	0020      	movs	r0, r4
 800c094:	f7ff ff18 	bl	800bec8 <node_set_prev.isra.0>
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 800c098:	68a3      	ldr	r3, [r4, #8]
        ll_new_p->head = node;       /*Set the new head in the dsc.*/
 800c09a:	6065      	str	r5, [r4, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d100      	bne.n	800c0a2 <_lv_ll_chg_list+0x3e>
            ll_new_p->tail = node;
 800c0a0:	60a5      	str	r5, [r4, #8]
}
 800c0a2:	bd70      	pop	{r4, r5, r6, pc}
        node_set_prev(ll_new_p, node, ll_new_p->tail);
 800c0a4:	68a2      	ldr	r2, [r4, #8]
 800c0a6:	0029      	movs	r1, r5
 800c0a8:	0020      	movs	r0, r4
 800c0aa:	f7ff ff0d 	bl	800bec8 <node_set_prev.isra.0>
        node_set_next(ll_new_p, node, NULL);
 800c0ae:	0029      	movs	r1, r5
 800c0b0:	0032      	movs	r2, r6
 800c0b2:	0020      	movs	r0, r4
 800c0b4:	f7ff ff0d 	bl	800bed2 <node_set_next.isra.1>
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
 800c0b8:	68a1      	ldr	r1, [r4, #8]
 800c0ba:	2900      	cmp	r1, #0
 800c0bc:	d003      	beq.n	800c0c6 <_lv_ll_chg_list+0x62>
            node_set_next(ll_new_p, ll_new_p->tail, node);
 800c0be:	002a      	movs	r2, r5
 800c0c0:	0020      	movs	r0, r4
 800c0c2:	f7ff ff06 	bl	800bed2 <node_set_next.isra.1>
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 800c0c6:	6863      	ldr	r3, [r4, #4]
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
 800c0c8:	60a5      	str	r5, [r4, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d1e9      	bne.n	800c0a2 <_lv_ll_chg_list+0x3e>
            ll_new_p->head = node;
 800c0ce:	6065      	str	r5, [r4, #4]
}
 800c0d0:	e7e7      	b.n	800c0a2 <_lv_ll_chg_list+0x3e>

0800c0d2 <_lv_ll_move_before>:
{
 800c0d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0d4:	0004      	movs	r4, r0
 800c0d6:	000d      	movs	r5, r1
 800c0d8:	0016      	movs	r6, r2
    if(n_act == n_after) return; /*Can't move before itself*/
 800c0da:	4291      	cmp	r1, r2
 800c0dc:	d007      	beq.n	800c0ee <_lv_ll_move_before+0x1c>
    if(n_after != NULL)
 800c0de:	2a00      	cmp	r2, #0
 800c0e0:	d006      	beq.n	800c0f0 <_lv_ll_move_before+0x1e>
        n_before = _lv_ll_get_prev(ll_p, n_after);
 800c0e2:	0011      	movs	r1, r2
 800c0e4:	f7ff ff51 	bl	800bf8a <_lv_ll_get_prev>
 800c0e8:	0007      	movs	r7, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
 800c0ea:	4285      	cmp	r5, r0
 800c0ec:	d122      	bne.n	800c134 <_lv_ll_move_before+0x62>
}
 800c0ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ll_p != NULL) {
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	d000      	beq.n	800c0f6 <_lv_ll_move_before+0x24>
        tail = ll_p->tail;
 800c0f4:	6886      	ldr	r6, [r0, #8]
    if(n_act == n_before) return; /*Already before `n_after`*/
 800c0f6:	42ae      	cmp	r6, r5
 800c0f8:	d0f9      	beq.n	800c0ee <_lv_ll_move_before+0x1c>
    _lv_ll_remove(ll_p, n_act);
 800c0fa:	0029      	movs	r1, r5
 800c0fc:	0020      	movs	r0, r4
 800c0fe:	f7ff ff78 	bl	800bff2 <_lv_ll_remove>
    node_set_next(ll_p, n_before, n_act);
 800c102:	002a      	movs	r2, r5
 800c104:	0031      	movs	r1, r6
 800c106:	0020      	movs	r0, r4
 800c108:	f7ff fee3 	bl	800bed2 <node_set_next.isra.1>
    node_set_prev(ll_p, n_act, n_before);
 800c10c:	0032      	movs	r2, r6
 800c10e:	0029      	movs	r1, r5
 800c110:	0020      	movs	r0, r4
 800c112:	f7ff fed9 	bl	800bec8 <node_set_prev.isra.0>
    node_set_prev(ll_p, n_after, n_act);
 800c116:	002a      	movs	r2, r5
 800c118:	2100      	movs	r1, #0
 800c11a:	0020      	movs	r0, r4
 800c11c:	f7ff fed4 	bl	800bec8 <node_set_prev.isra.0>
    node_set_next(ll_p, n_act, n_after);
 800c120:	2200      	movs	r2, #0
 800c122:	0029      	movs	r1, r5
 800c124:	0020      	movs	r0, r4
 800c126:	f7ff fed4 	bl	800bed2 <node_set_next.isra.1>
    if(n_after == NULL) ll_p->tail = n_act;
 800c12a:	60a5      	str	r5, [r4, #8]
    if(n_before == NULL) ll_p->head = n_act;
 800c12c:	2e00      	cmp	r6, #0
 800c12e:	d1de      	bne.n	800c0ee <_lv_ll_move_before+0x1c>
 800c130:	6065      	str	r5, [r4, #4]
 800c132:	e7dc      	b.n	800c0ee <_lv_ll_move_before+0x1c>
    _lv_ll_remove(ll_p, n_act);
 800c134:	0029      	movs	r1, r5
 800c136:	0020      	movs	r0, r4
 800c138:	f7ff ff5b 	bl	800bff2 <_lv_ll_remove>
    node_set_next(ll_p, n_before, n_act);
 800c13c:	002a      	movs	r2, r5
 800c13e:	0039      	movs	r1, r7
 800c140:	0020      	movs	r0, r4
 800c142:	f7ff fec6 	bl	800bed2 <node_set_next.isra.1>
    node_set_prev(ll_p, n_act, n_before);
 800c146:	003a      	movs	r2, r7
 800c148:	0029      	movs	r1, r5
 800c14a:	0020      	movs	r0, r4
 800c14c:	f7ff febc 	bl	800bec8 <node_set_prev.isra.0>
    node_set_prev(ll_p, n_after, n_act);
 800c150:	0031      	movs	r1, r6
 800c152:	002a      	movs	r2, r5
 800c154:	0020      	movs	r0, r4
 800c156:	f7ff feb7 	bl	800bec8 <node_set_prev.isra.0>
    node_set_next(ll_p, n_act, n_after);
 800c15a:	0032      	movs	r2, r6
 800c15c:	0029      	movs	r1, r5
 800c15e:	0020      	movs	r0, r4
 800c160:	f7ff feb7 	bl	800bed2 <node_set_next.isra.1>
 800c164:	003e      	movs	r6, r7
 800c166:	e7e1      	b.n	800c12c <_lv_ll_move_before+0x5a>

0800c168 <_lv_sqrt>:
 */
LV_ATTRIBUTE_FAST_MEM void _lv_sqrt(uint32_t x, lv_sqrt_res_t * q, uint32_t mask)
{
    x = x << 8; /*To get 4 bit precision. (sqrt(256) = 16 = 4 bit)*/

    uint32_t root = 0;
 800c168:	2300      	movs	r3, #0
{
 800c16a:	b530      	push	{r4, r5, lr}
    x = x << 8; /*To get 4 bit precision. (sqrt(256) = 16 = 4 bit)*/
 800c16c:	0200      	lsls	r0, r0, #8
    uint32_t trial;
    // http://ww1.microchip.com/...en/AppNotes/91040a.pdf
    do {
        trial = root + mask;
 800c16e:	18d4      	adds	r4, r2, r3
        if(trial * trial <= x) root = trial;
 800c170:	0025      	movs	r5, r4
 800c172:	4365      	muls	r5, r4
 800c174:	4285      	cmp	r5, r0
 800c176:	d800      	bhi.n	800c17a <_lv_sqrt+0x12>
 800c178:	0023      	movs	r3, r4
        mask = mask >> 1;
 800c17a:	0852      	lsrs	r2, r2, #1
    } while(mask);
 800c17c:	d1f7      	bne.n	800c16e <_lv_sqrt+0x6>

    q->i = root >> 4;
 800c17e:	091a      	lsrs	r2, r3, #4
 800c180:	800a      	strh	r2, [r1, #0]
    q->f = (root & 0xf) << 4;
 800c182:	22ff      	movs	r2, #255	; 0xff
 800c184:	011b      	lsls	r3, r3, #4
 800c186:	4013      	ands	r3, r2
 800c188:	804b      	strh	r3, [r1, #2]
}
 800c18a:	bd30      	pop	{r4, r5, pc}

0800c18c <ent_get_next>:
 * Give the next entry after 'act_e'
 * @param act_e pointer to an entry
 * @return pointer to an entry after 'act_e'
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
 800c18c:	4b08      	ldr	r3, [pc, #32]	; (800c1b0 <ent_get_next+0x24>)
 800c18e:	681b      	ldr	r3, [r3, #0]
    lv_mem_ent_t * next_e = NULL;

    if(act_e == NULL) { /*NULL means: get the first entry*/
 800c190:	2800      	cmp	r0, #0
 800c192:	d00b      	beq.n	800c1ac <ent_get_next+0x20>
        next_e = (lv_mem_ent_t *)work_mem;
    }
    else {   /*Get the next entry */
        uint8_t * data = &act_e->first_data;
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 800c194:	6801      	ldr	r1, [r0, #0]
        uint8_t * data = &act_e->first_data;
 800c196:	1d02      	adds	r2, r0, #4
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 800c198:	0849      	lsrs	r1, r1, #1
 800c19a:	1852      	adds	r2, r2, r1

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 800c19c:	2180      	movs	r1, #128	; 0x80
 800c19e:	0149      	lsls	r1, r1, #5
 800c1a0:	1859      	adds	r1, r3, r1
 800c1a2:	1d10      	adds	r0, r2, #4
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	4288      	cmp	r0, r1
 800c1a8:	d200      	bcs.n	800c1ac <ent_get_next+0x20>
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 800c1aa:	0013      	movs	r3, r2
    }

    return next_e;
}
 800c1ac:	0018      	movs	r0, r3
 800c1ae:	4770      	bx	lr
 800c1b0:	20005e8c 	.word	0x20005e8c

0800c1b4 <ent_trunc>:
 * @param size new size in bytes
 */
static void ent_trunc(lv_mem_ent_t * e, size_t size)
{
    /*Round the size up to ALIGN_MASK*/
    size = (size + ALIGN_MASK) & (~ALIGN_MASK);
 800c1b4:	2303      	movs	r3, #3
 800c1b6:	3103      	adds	r1, #3
 800c1b8:	4399      	bics	r1, r3

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 800c1ba:	6803      	ldr	r3, [r0, #0]
 800c1bc:	1d0a      	adds	r2, r1, #4
{
 800c1be:	b530      	push	{r4, r5, lr}
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 800c1c0:	085b      	lsrs	r3, r3, #1
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d013      	beq.n	800c1ee <ent_trunc+0x3a>
        size = e->header.s.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
 800c1c6:	428b      	cmp	r3, r1
 800c1c8:	d011      	beq.n	800c1ee <ent_trunc+0x3a>
        uint8_t * e_data             = &e->first_data;
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.s.used   = 0;
 800c1ca:	2401      	movs	r4, #1
        after_new_e->header.s.d_size = (uint32_t)e->header.s.d_size - size - sizeof(lv_mem_header_t);
 800c1cc:	3b04      	subs	r3, #4
 800c1ce:	1a5b      	subs	r3, r3, r1
 800c1d0:	40a3      	lsls	r3, r4
        uint8_t * e_data             = &e->first_data;
 800c1d2:	1d02      	adds	r2, r0, #4
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
 800c1d4:	1852      	adds	r2, r2, r1

        /* Set the new size for the original entry */
        e->header.s.d_size = (uint32_t)size;
 800c1d6:	40a1      	lsls	r1, r4
        after_new_e->header.s.used   = 0;
 800c1d8:	7815      	ldrb	r5, [r2, #0]
 800c1da:	43a5      	bics	r5, r4
 800c1dc:	7015      	strb	r5, [r2, #0]
        after_new_e->header.s.d_size = (uint32_t)e->header.s.d_size - size - sizeof(lv_mem_header_t);
 800c1de:	6815      	ldr	r5, [r2, #0]
 800c1e0:	4025      	ands	r5, r4
 800c1e2:	432b      	orrs	r3, r5
 800c1e4:	6013      	str	r3, [r2, #0]
        e->header.s.d_size = (uint32_t)size;
 800c1e6:	6803      	ldr	r3, [r0, #0]
 800c1e8:	401c      	ands	r4, r3
 800c1ea:	4321      	orrs	r1, r4
 800c1ec:	6001      	str	r1, [r0, #0]
    }
}
 800c1ee:	bd30      	pop	{r4, r5, pc}

0800c1f0 <_lv_mem_init>:
    work_mem = (uint8_t *)work_mem_int;
 800c1f0:	4b02      	ldr	r3, [pc, #8]	; (800c1fc <_lv_mem_init+0xc>)
 800c1f2:	4a03      	ldr	r2, [pc, #12]	; (800c200 <_lv_mem_init+0x10>)
 800c1f4:	6013      	str	r3, [r2, #0]
    full->header.s.used = 0;
 800c1f6:	4a03      	ldr	r2, [pc, #12]	; (800c204 <_lv_mem_init+0x14>)
 800c1f8:	601a      	str	r2, [r3, #0]
}
 800c1fa:	4770      	bx	lr
 800c1fc:	20005e90 	.word	0x20005e90
 800c200:	20005e8c 	.word	0x20005e8c
 800c204:	00001ff8 	.word	0x00001ff8

0800c208 <lv_mem_alloc>:
{
 800c208:	b570      	push	{r4, r5, r6, lr}
        return &zero_mem;
 800c20a:	4c14      	ldr	r4, [pc, #80]	; (800c25c <lv_mem_alloc+0x54>)
    if(size == 0) {
 800c20c:	2800      	cmp	r0, #0
 800c20e:	d023      	beq.n	800c258 <lv_mem_alloc+0x50>
    size = (size + ALIGN_MASK) & (~ALIGN_MASK);
 800c210:	2303      	movs	r3, #3
 800c212:	3003      	adds	r0, #3
 800c214:	4398      	bics	r0, r3
 800c216:	0005      	movs	r5, r0
    lv_mem_ent_t * e = NULL;
 800c218:	2400      	movs	r4, #0
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
 800c21a:	2601      	movs	r6, #1
        e = ent_get_next(e);
 800c21c:	0020      	movs	r0, r4
 800c21e:	f7ff ffb5 	bl	800c18c <ent_get_next>
 800c222:	1e04      	subs	r4, r0, #0
        if(e != NULL) {
 800c224:	d018      	beq.n	800c258 <lv_mem_alloc+0x50>
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
 800c226:	7803      	ldrb	r3, [r0, #0]
 800c228:	4233      	tst	r3, r6
 800c22a:	d1f7      	bne.n	800c21c <lv_mem_alloc+0x14>
 800c22c:	6803      	ldr	r3, [r0, #0]
 800c22e:	085b      	lsrs	r3, r3, #1
 800c230:	429d      	cmp	r5, r3
 800c232:	d8f3      	bhi.n	800c21c <lv_mem_alloc+0x14>
        ent_trunc(e, size);
 800c234:	0029      	movs	r1, r5
 800c236:	f7ff ffbd 	bl	800c1b4 <ent_trunc>
        e->header.s.used = 1;
 800c23a:	7823      	ldrb	r3, [r4, #0]
 800c23c:	431e      	orrs	r6, r3
        if((uintptr_t) alloc > (uintptr_t) work_mem) {
 800c23e:	4b08      	ldr	r3, [pc, #32]	; (800c260 <lv_mem_alloc+0x58>)
        e->header.s.used = 1;
 800c240:	7026      	strb	r6, [r4, #0]
        if((uintptr_t) alloc > (uintptr_t) work_mem) {
 800c242:	6818      	ldr	r0, [r3, #0]
        alloc = &e->first_data;
 800c244:	3404      	adds	r4, #4
        if((uintptr_t) alloc > (uintptr_t) work_mem) {
 800c246:	4284      	cmp	r4, r0
 800c248:	d906      	bls.n	800c258 <lv_mem_alloc+0x50>
            if((((uintptr_t) alloc - (uintptr_t) work_mem) + size) > mem_max_size) {
 800c24a:	4b06      	ldr	r3, [pc, #24]	; (800c264 <lv_mem_alloc+0x5c>)
 800c24c:	1a2d      	subs	r5, r5, r0
 800c24e:	681a      	ldr	r2, [r3, #0]
 800c250:	192d      	adds	r5, r5, r4
 800c252:	4295      	cmp	r5, r2
 800c254:	d900      	bls.n	800c258 <lv_mem_alloc+0x50>
                mem_max_size = ((uintptr_t) alloc - (uintptr_t) work_mem) + size;
 800c256:	601d      	str	r5, [r3, #0]
}
 800c258:	0020      	movs	r0, r4
 800c25a:	bd70      	pop	{r4, r5, r6, pc}
 800c25c:	20006e90 	.word	0x20006e90
 800c260:	20005e8c 	.word	0x20005e8c
 800c264:	20005e88 	.word	0x20005e88

0800c268 <lv_mem_defrag>:
{
 800c268:	b570      	push	{r4, r5, r6, lr}
            if(e_free->header.s.used != 0) {
 800c26a:	2501      	movs	r5, #1
        next_e = (lv_mem_ent_t *)work_mem;
 800c26c:	4b0f      	ldr	r3, [pc, #60]	; (800c2ac <lv_mem_defrag+0x44>)
 800c26e:	681c      	ldr	r4, [r3, #0]
        while(e_free != NULL) {
 800c270:	2c00      	cmp	r4, #0
 800c272:	d100      	bne.n	800c276 <lv_mem_defrag+0xe>
}
 800c274:	bd70      	pop	{r4, r5, r6, pc}
 800c276:	0020      	movs	r0, r4
 800c278:	f7ff ff88 	bl	800c18c <ent_get_next>
            if(e_free->header.s.used != 0) {
 800c27c:	7823      	ldrb	r3, [r4, #0]
 800c27e:	422b      	tst	r3, r5
 800c280:	d010      	beq.n	800c2a4 <lv_mem_defrag+0x3c>
{
 800c282:	0004      	movs	r4, r0
 800c284:	e7f4      	b.n	800c270 <lv_mem_defrag+0x8>
            if(e_next->header.s.used == 0) {
 800c286:	7803      	ldrb	r3, [r0, #0]
 800c288:	422b      	tst	r3, r5
 800c28a:	d1fa      	bne.n	800c282 <lv_mem_defrag+0x1a>
                e_free->header.s.d_size += e_next->header.s.d_size + sizeof(e_next->header);
 800c28c:	6822      	ldr	r2, [r4, #0]
 800c28e:	6801      	ldr	r1, [r0, #0]
 800c290:	0853      	lsrs	r3, r2, #1
 800c292:	3304      	adds	r3, #4
 800c294:	0849      	lsrs	r1, r1, #1
 800c296:	185b      	adds	r3, r3, r1
 800c298:	005b      	lsls	r3, r3, #1
 800c29a:	402a      	ands	r2, r5
 800c29c:	4313      	orrs	r3, r2
 800c29e:	6023      	str	r3, [r4, #0]
            e_next = ent_get_next(e_next);
 800c2a0:	f7ff ff74 	bl	800c18c <ent_get_next>
        while(e_next != NULL) {
 800c2a4:	2800      	cmp	r0, #0
 800c2a6:	d1ee      	bne.n	800c286 <lv_mem_defrag+0x1e>
 800c2a8:	e7e4      	b.n	800c274 <lv_mem_defrag+0xc>
 800c2aa:	46c0      	nop			; (mov r8, r8)
 800c2ac:	20005e8c 	.word	0x20005e8c

0800c2b0 <lv_mem_free>:
    if(data == &zero_mem) return;
 800c2b0:	4b14      	ldr	r3, [pc, #80]	; (800c304 <lv_mem_free+0x54>)
{
 800c2b2:	b570      	push	{r4, r5, r6, lr}
    if(data == &zero_mem) return;
 800c2b4:	4298      	cmp	r0, r3
 800c2b6:	d024      	beq.n	800c302 <lv_mem_free+0x52>
    if(data == NULL) return;
 800c2b8:	2800      	cmp	r0, #0
 800c2ba:	d022      	beq.n	800c302 <lv_mem_free+0x52>
    e->header.s.used = 0;
 800c2bc:	2501      	movs	r5, #1
 800c2be:	1f04      	subs	r4, r0, #4
 800c2c0:	7823      	ldrb	r3, [r4, #0]
    full_defrag_cnt++;
 800c2c2:	4a11      	ldr	r2, [pc, #68]	; (800c308 <lv_mem_free+0x58>)
    e->header.s.used = 0;
 800c2c4:	43ab      	bics	r3, r5
 800c2c6:	7023      	strb	r3, [r4, #0]
    full_defrag_cnt++;
 800c2c8:	8813      	ldrh	r3, [r2, #0]
        e_next = ent_get_next(e);
 800c2ca:	0020      	movs	r0, r4
    full_defrag_cnt++;
 800c2cc:	195b      	adds	r3, r3, r5
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	8013      	strh	r3, [r2, #0]
    if(full_defrag_cnt < LV_MEM_FULL_DEFRAG_CNT) {
 800c2d2:	2b0f      	cmp	r3, #15
 800c2d4:	d911      	bls.n	800c2fa <lv_mem_free+0x4a>
        full_defrag_cnt = 0;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	8013      	strh	r3, [r2, #0]
        lv_mem_defrag();
 800c2da:	f7ff ffc5 	bl	800c268 <lv_mem_defrag>
 800c2de:	e010      	b.n	800c302 <lv_mem_free+0x52>
            if(e_next->header.s.used == 0) {
 800c2e0:	7803      	ldrb	r3, [r0, #0]
 800c2e2:	422b      	tst	r3, r5
 800c2e4:	d10d      	bne.n	800c302 <lv_mem_free+0x52>
                e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
 800c2e6:	6822      	ldr	r2, [r4, #0]
 800c2e8:	6801      	ldr	r1, [r0, #0]
 800c2ea:	0853      	lsrs	r3, r2, #1
 800c2ec:	3304      	adds	r3, #4
 800c2ee:	0849      	lsrs	r1, r1, #1
 800c2f0:	185b      	adds	r3, r3, r1
 800c2f2:	005b      	lsls	r3, r3, #1
 800c2f4:	402a      	ands	r2, r5
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	6023      	str	r3, [r4, #0]
            e_next = ent_get_next(e_next);
 800c2fa:	f7ff ff47 	bl	800c18c <ent_get_next>
        while(e_next != NULL) {
 800c2fe:	2800      	cmp	r0, #0
 800c300:	d1ee      	bne.n	800c2e0 <lv_mem_free+0x30>
}
 800c302:	bd70      	pop	{r4, r5, r6, pc}
 800c304:	20006e90 	.word	0x20006e90
 800c308:	20005e66 	.word	0x20005e66

0800c30c <_lv_mem_get_size>:
{
 800c30c:	1e03      	subs	r3, r0, #0
    if(data == NULL) return 0;
 800c30e:	d006      	beq.n	800c31e <_lv_mem_get_size+0x12>
    if(data == &zero_mem) return 0;
 800c310:	4a03      	ldr	r2, [pc, #12]	; (800c320 <_lv_mem_get_size+0x14>)
    if(data == NULL) return 0;
 800c312:	2000      	movs	r0, #0
    if(data == &zero_mem) return 0;
 800c314:	4293      	cmp	r3, r2
 800c316:	d002      	beq.n	800c31e <_lv_mem_get_size+0x12>
    return e->header.s.d_size;
 800c318:	3b04      	subs	r3, #4
 800c31a:	6818      	ldr	r0, [r3, #0]
 800c31c:	0840      	lsrs	r0, r0, #1
}
 800c31e:	4770      	bx	lr
 800c320:	20006e90 	.word	0x20006e90

0800c324 <_lv_mem_buf_release>:
        if(mem_buf_small[i].p == p) {
 800c324:	4b0d      	ldr	r3, [pc, #52]	; (800c35c <_lv_mem_buf_release+0x38>)
 800c326:	681a      	ldr	r2, [r3, #0]
 800c328:	4290      	cmp	r0, r2
 800c32a:	d00b      	beq.n	800c344 <_lv_mem_buf_release+0x20>
 800c32c:	6899      	ldr	r1, [r3, #8]
 800c32e:	2200      	movs	r2, #0
 800c330:	4288      	cmp	r0, r1
 800c332:	d109      	bne.n	800c348 <_lv_mem_buf_release+0x24>
 800c334:	3201      	adds	r2, #1
            mem_buf_small[i].used = 0;
 800c336:	00d2      	lsls	r2, r2, #3
 800c338:	189b      	adds	r3, r3, r2
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
 800c33a:	2101      	movs	r1, #1
 800c33c:	799a      	ldrb	r2, [r3, #6]
 800c33e:	438a      	bics	r2, r1
 800c340:	719a      	strb	r2, [r3, #6]
}
 800c342:	4770      	bx	lr
        if(mem_buf_small[i].p == p) {
 800c344:	2200      	movs	r2, #0
 800c346:	e7f6      	b.n	800c336 <_lv_mem_buf_release+0x12>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
 800c348:	4905      	ldr	r1, [pc, #20]	; (800c360 <_lv_mem_buf_release+0x3c>)
 800c34a:	00d3      	lsls	r3, r2, #3
 800c34c:	185b      	adds	r3, r3, r1
 800c34e:	6819      	ldr	r1, [r3, #0]
 800c350:	4281      	cmp	r1, r0
 800c352:	d0f2      	beq.n	800c33a <_lv_mem_buf_release+0x16>
 800c354:	3201      	adds	r2, #1
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 800c356:	2a10      	cmp	r2, #16
 800c358:	d1f6      	bne.n	800c348 <_lv_mem_buf_release+0x24>
 800c35a:	e7f2      	b.n	800c342 <_lv_mem_buf_release+0x1e>
 800c35c:	2000003c 	.word	0x2000003c
 800c360:	2000711c 	.word	0x2000711c

0800c364 <_lv_mem_buf_free_all>:
{
 800c364:	b570      	push	{r4, r5, r6, lr}
        mem_buf_small[i].used = 0;
 800c366:	2501      	movs	r5, #1
 800c368:	2600      	movs	r6, #0
 800c36a:	4b0c      	ldr	r3, [pc, #48]	; (800c39c <_lv_mem_buf_free_all+0x38>)
 800c36c:	799a      	ldrb	r2, [r3, #6]
 800c36e:	43aa      	bics	r2, r5
 800c370:	719a      	strb	r2, [r3, #6]
 800c372:	7b9a      	ldrb	r2, [r3, #14]
 800c374:	43aa      	bics	r2, r5
 800c376:	739a      	strb	r2, [r3, #14]
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
 800c378:	4b09      	ldr	r3, [pc, #36]	; (800c3a0 <_lv_mem_buf_free_all+0x3c>)
 800c37a:	00f4      	lsls	r4, r6, #3
 800c37c:	18e4      	adds	r4, r4, r3
 800c37e:	6820      	ldr	r0, [r4, #0]
 800c380:	2800      	cmp	r0, #0
 800c382:	d007      	beq.n	800c394 <_lv_mem_buf_free_all+0x30>
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
 800c384:	f7ff ff94 	bl	800c2b0 <lv_mem_free>
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
 800c388:	2200      	movs	r2, #0
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
 800c38a:	79a3      	ldrb	r3, [r4, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
 800c38c:	6022      	str	r2, [r4, #0]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
 800c38e:	43ab      	bics	r3, r5
 800c390:	71a3      	strb	r3, [r4, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = 0;
 800c392:	80a2      	strh	r2, [r4, #4]
 800c394:	3601      	adds	r6, #1
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 800c396:	2e10      	cmp	r6, #16
 800c398:	d1ee      	bne.n	800c378 <_lv_mem_buf_free_all+0x14>
}
 800c39a:	bd70      	pop	{r4, r5, r6, pc}
 800c39c:	2000003c 	.word	0x2000003c
 800c3a0:	2000711c 	.word	0x2000711c

0800c3a4 <_lv_memcpy>:
{
 800c3a4:	b530      	push	{r4, r5, lr}
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 800c3a6:	2503      	movs	r5, #3
 800c3a8:	0004      	movs	r4, r0
    uint8_t * d8 = dst;
 800c3aa:	0003      	movs	r3, r0
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 800c3ac:	402c      	ands	r4, r5
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 800c3ae:	400d      	ands	r5, r1
    if(s_align != d_align) {
 800c3b0:	42ac      	cmp	r4, r5
 800c3b2:	d15b      	bne.n	800c46c <_lv_memcpy+0xc8>
    if(d_align) {
 800c3b4:	2c00      	cmp	r4, #0
 800c3b6:	d00b      	beq.n	800c3d0 <_lv_memcpy+0x2c>
        d_align = ALIGN_MASK + 1 - d_align;
 800c3b8:	1b03      	subs	r3, r0, r4
    uint8_t * d8 = dst;
 800c3ba:	0004      	movs	r4, r0
 800c3bc:	3304      	adds	r3, #4
        while(d_align && len) {
 800c3be:	2a00      	cmp	r2, #0
 800c3c0:	d059      	beq.n	800c476 <_lv_memcpy+0xd2>
            COPY8;
 800c3c2:	780d      	ldrb	r5, [r1, #0]
            len--;
 800c3c4:	3a01      	subs	r2, #1
            COPY8;
 800c3c6:	7025      	strb	r5, [r4, #0]
 800c3c8:	3401      	adds	r4, #1
 800c3ca:	3101      	adds	r1, #1
        while(d_align && len) {
 800c3cc:	429c      	cmp	r4, r3
 800c3ce:	d1f6      	bne.n	800c3be <_lv_memcpy+0x1a>
    while(len > 32) {
 800c3d0:	2a20      	cmp	r2, #32
 800c3d2:	d855      	bhi.n	800c480 <_lv_memcpy+0xdc>
    while(len > 4) {
 800c3d4:	2a04      	cmp	r2, #4
 800c3d6:	d867      	bhi.n	800c4a8 <_lv_memcpy+0x104>
 800c3d8:	2400      	movs	r4, #0
    while(len) {
 800c3da:	42a2      	cmp	r2, r4
 800c3dc:	d04b      	beq.n	800c476 <_lv_memcpy+0xd2>
        COPY8
 800c3de:	5d0d      	ldrb	r5, [r1, r4]
 800c3e0:	551d      	strb	r5, [r3, r4]
 800c3e2:	3401      	adds	r4, #1
 800c3e4:	e7f9      	b.n	800c3da <_lv_memcpy+0x36>
            REPEAT8(COPY8);
 800c3e6:	780c      	ldrb	r4, [r1, #0]
            len -= 32;
 800c3e8:	3a20      	subs	r2, #32
            REPEAT8(COPY8);
 800c3ea:	701c      	strb	r4, [r3, #0]
 800c3ec:	784c      	ldrb	r4, [r1, #1]
 800c3ee:	705c      	strb	r4, [r3, #1]
 800c3f0:	788c      	ldrb	r4, [r1, #2]
 800c3f2:	709c      	strb	r4, [r3, #2]
 800c3f4:	78cc      	ldrb	r4, [r1, #3]
 800c3f6:	70dc      	strb	r4, [r3, #3]
 800c3f8:	790c      	ldrb	r4, [r1, #4]
 800c3fa:	711c      	strb	r4, [r3, #4]
 800c3fc:	794c      	ldrb	r4, [r1, #5]
 800c3fe:	715c      	strb	r4, [r3, #5]
 800c400:	798c      	ldrb	r4, [r1, #6]
 800c402:	719c      	strb	r4, [r3, #6]
 800c404:	79cc      	ldrb	r4, [r1, #7]
 800c406:	71dc      	strb	r4, [r3, #7]
            REPEAT8(COPY8);
 800c408:	7a0c      	ldrb	r4, [r1, #8]
 800c40a:	721c      	strb	r4, [r3, #8]
 800c40c:	7a4c      	ldrb	r4, [r1, #9]
 800c40e:	725c      	strb	r4, [r3, #9]
 800c410:	7a8c      	ldrb	r4, [r1, #10]
 800c412:	729c      	strb	r4, [r3, #10]
 800c414:	7acc      	ldrb	r4, [r1, #11]
 800c416:	72dc      	strb	r4, [r3, #11]
 800c418:	7b0c      	ldrb	r4, [r1, #12]
 800c41a:	731c      	strb	r4, [r3, #12]
 800c41c:	7b4c      	ldrb	r4, [r1, #13]
 800c41e:	735c      	strb	r4, [r3, #13]
 800c420:	7b8c      	ldrb	r4, [r1, #14]
 800c422:	739c      	strb	r4, [r3, #14]
 800c424:	7bcc      	ldrb	r4, [r1, #15]
 800c426:	73dc      	strb	r4, [r3, #15]
            REPEAT8(COPY8);
 800c428:	7c0c      	ldrb	r4, [r1, #16]
 800c42a:	741c      	strb	r4, [r3, #16]
 800c42c:	7c4c      	ldrb	r4, [r1, #17]
 800c42e:	745c      	strb	r4, [r3, #17]
 800c430:	7c8c      	ldrb	r4, [r1, #18]
 800c432:	749c      	strb	r4, [r3, #18]
 800c434:	7ccc      	ldrb	r4, [r1, #19]
 800c436:	74dc      	strb	r4, [r3, #19]
 800c438:	7d0c      	ldrb	r4, [r1, #20]
 800c43a:	751c      	strb	r4, [r3, #20]
 800c43c:	7d4c      	ldrb	r4, [r1, #21]
 800c43e:	755c      	strb	r4, [r3, #21]
 800c440:	7d8c      	ldrb	r4, [r1, #22]
 800c442:	759c      	strb	r4, [r3, #22]
 800c444:	7dcc      	ldrb	r4, [r1, #23]
 800c446:	75dc      	strb	r4, [r3, #23]
            REPEAT8(COPY8);
 800c448:	7e0c      	ldrb	r4, [r1, #24]
 800c44a:	761c      	strb	r4, [r3, #24]
 800c44c:	7e4c      	ldrb	r4, [r1, #25]
 800c44e:	765c      	strb	r4, [r3, #25]
 800c450:	7e8c      	ldrb	r4, [r1, #26]
 800c452:	769c      	strb	r4, [r3, #26]
 800c454:	7ecc      	ldrb	r4, [r1, #27]
 800c456:	76dc      	strb	r4, [r3, #27]
 800c458:	7f0c      	ldrb	r4, [r1, #28]
 800c45a:	771c      	strb	r4, [r3, #28]
 800c45c:	7f4c      	ldrb	r4, [r1, #29]
 800c45e:	775c      	strb	r4, [r3, #29]
 800c460:	7f8c      	ldrb	r4, [r1, #30]
 800c462:	779c      	strb	r4, [r3, #30]
 800c464:	7fcc      	ldrb	r4, [r1, #31]
 800c466:	3120      	adds	r1, #32
 800c468:	77dc      	strb	r4, [r3, #31]
 800c46a:	3320      	adds	r3, #32
        while(len > 32) {
 800c46c:	2a20      	cmp	r2, #32
 800c46e:	d8ba      	bhi.n	800c3e6 <_lv_memcpy+0x42>
 800c470:	2400      	movs	r4, #0
        while(len) {
 800c472:	42a2      	cmp	r2, r4
 800c474:	d100      	bne.n	800c478 <_lv_memcpy+0xd4>
}
 800c476:	bd30      	pop	{r4, r5, pc}
            COPY8
 800c478:	5d0d      	ldrb	r5, [r1, r4]
 800c47a:	551d      	strb	r5, [r3, r4]
 800c47c:	3401      	adds	r4, #1
 800c47e:	e7f8      	b.n	800c472 <_lv_memcpy+0xce>
        REPEAT8(COPY32)
 800c480:	680c      	ldr	r4, [r1, #0]
        len -= 32;
 800c482:	3a20      	subs	r2, #32
        REPEAT8(COPY32)
 800c484:	601c      	str	r4, [r3, #0]
 800c486:	684c      	ldr	r4, [r1, #4]
 800c488:	605c      	str	r4, [r3, #4]
 800c48a:	688c      	ldr	r4, [r1, #8]
 800c48c:	609c      	str	r4, [r3, #8]
 800c48e:	68cc      	ldr	r4, [r1, #12]
 800c490:	60dc      	str	r4, [r3, #12]
 800c492:	690c      	ldr	r4, [r1, #16]
 800c494:	611c      	str	r4, [r3, #16]
 800c496:	694c      	ldr	r4, [r1, #20]
 800c498:	615c      	str	r4, [r3, #20]
 800c49a:	698c      	ldr	r4, [r1, #24]
 800c49c:	619c      	str	r4, [r3, #24]
 800c49e:	69cc      	ldr	r4, [r1, #28]
 800c4a0:	3120      	adds	r1, #32
 800c4a2:	61dc      	str	r4, [r3, #28]
 800c4a4:	3320      	adds	r3, #32
 800c4a6:	e793      	b.n	800c3d0 <_lv_memcpy+0x2c>
        COPY32;
 800c4a8:	c910      	ldmia	r1!, {r4}
        len -= 4;
 800c4aa:	3a04      	subs	r2, #4
        COPY32;
 800c4ac:	c310      	stmia	r3!, {r4}
 800c4ae:	e791      	b.n	800c3d4 <_lv_memcpy+0x30>

0800c4b0 <lv_mem_realloc>:
{
 800c4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    new_size = (new_size + ALIGN_MASK) & (~ALIGN_MASK);
 800c4b2:	2303      	movs	r3, #3
 800c4b4:	1ccc      	adds	r4, r1, #3
{
 800c4b6:	0005      	movs	r5, r0
    new_size = (new_size + ALIGN_MASK) & (~ALIGN_MASK);
 800c4b8:	439c      	bics	r4, r3
    if(data_p != NULL) {
 800c4ba:	2800      	cmp	r0, #0
 800c4bc:	d004      	beq.n	800c4c8 <lv_mem_realloc+0x18>
        if(e->header.s.used == 0) {
 800c4be:	1f03      	subs	r3, r0, #4
 800c4c0:	781b      	ldrb	r3, [r3, #0]
            data_p = NULL;
 800c4c2:	07db      	lsls	r3, r3, #31
 800c4c4:	17db      	asrs	r3, r3, #31
 800c4c6:	401d      	ands	r5, r3
    uint32_t old_size = _lv_mem_get_size(data_p);
 800c4c8:	0028      	movs	r0, r5
 800c4ca:	f7ff ff1f 	bl	800c30c <_lv_mem_get_size>
 800c4ce:	002e      	movs	r6, r5
 800c4d0:	0007      	movs	r7, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 800c4d2:	4284      	cmp	r4, r0
 800c4d4:	d004      	beq.n	800c4e0 <lv_mem_realloc+0x30>
    if(new_size < old_size) {
 800c4d6:	d205      	bcs.n	800c4e4 <lv_mem_realloc+0x34>
        lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data_p - sizeof(lv_mem_header_t));
 800c4d8:	1f28      	subs	r0, r5, #4
        ent_trunc(e, new_size);
 800c4da:	0021      	movs	r1, r4
 800c4dc:	f7ff fe6a 	bl	800c1b4 <ent_trunc>
}
 800c4e0:	0030      	movs	r0, r6
 800c4e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    new_p = lv_mem_alloc(new_size);
 800c4e4:	0020      	movs	r0, r4
 800c4e6:	f7ff fe8f 	bl	800c208 <lv_mem_alloc>
 800c4ea:	1e06      	subs	r6, r0, #0
    if(new_p == NULL) {
 800c4ec:	d0f8      	beq.n	800c4e0 <lv_mem_realloc+0x30>
    if(data_p != NULL) {
 800c4ee:	2d00      	cmp	r5, #0
 800c4f0:	d0f6      	beq.n	800c4e0 <lv_mem_realloc+0x30>
        if(old_size != 0 && new_size != 0) {
 800c4f2:	2f00      	cmp	r7, #0
 800c4f4:	d009      	beq.n	800c50a <lv_mem_realloc+0x5a>
 800c4f6:	2c00      	cmp	r4, #0
 800c4f8:	d007      	beq.n	800c50a <lv_mem_realloc+0x5a>
            _lv_memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
 800c4fa:	0022      	movs	r2, r4
 800c4fc:	42bc      	cmp	r4, r7
 800c4fe:	d900      	bls.n	800c502 <lv_mem_realloc+0x52>
 800c500:	003a      	movs	r2, r7
 800c502:	0029      	movs	r1, r5
 800c504:	0030      	movs	r0, r6
 800c506:	f7ff ff4d 	bl	800c3a4 <_lv_memcpy>
        lv_mem_free(data_p);
 800c50a:	0028      	movs	r0, r5
 800c50c:	f7ff fed0 	bl	800c2b0 <lv_mem_free>
 800c510:	e7e6      	b.n	800c4e0 <lv_mem_realloc+0x30>
	...

0800c514 <_lv_mem_buf_get>:
{
 800c514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c516:	1e04      	subs	r4, r0, #0
    if(size == 0) return NULL;
 800c518:	d011      	beq.n	800c53e <_lv_mem_buf_get+0x2a>
    if(size <= MEM_BUF_SMALL_SIZE) {
 800c51a:	2810      	cmp	r0, #16
 800c51c:	d810      	bhi.n	800c540 <_lv_mem_buf_get+0x2c>
            if(mem_buf_small[i].used == 0) {
 800c51e:	4a29      	ldr	r2, [pc, #164]	; (800c5c4 <_lv_mem_buf_get+0xb0>)
 800c520:	7993      	ldrb	r3, [r2, #6]
 800c522:	07db      	lsls	r3, r3, #31
 800c524:	0fdb      	lsrs	r3, r3, #31
 800c526:	d003      	beq.n	800c530 <_lv_mem_buf_get+0x1c>
 800c528:	7b93      	ldrb	r3, [r2, #14]
 800c52a:	07db      	lsls	r3, r3, #31
 800c52c:	d408      	bmi.n	800c540 <_lv_mem_buf_get+0x2c>
 800c52e:	2301      	movs	r3, #1
                mem_buf_small[i].used = 1;
 800c530:	2101      	movs	r1, #1
 800c532:	00db      	lsls	r3, r3, #3
 800c534:	18d0      	adds	r0, r2, r3
 800c536:	7984      	ldrb	r4, [r0, #6]
 800c538:	4321      	orrs	r1, r4
 800c53a:	7181      	strb	r1, [r0, #6]
                return mem_buf_small[i].p;
 800c53c:	58d0      	ldr	r0, [r2, r3]
}
 800c53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(mem_buf_small[i].used == 0) {
 800c540:	2301      	movs	r3, #1
 800c542:	2200      	movs	r2, #0
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
 800c544:	4d20      	ldr	r5, [pc, #128]	; (800c5c8 <_lv_mem_buf_get+0xb4>)
            if(mem_buf_small[i].used == 0) {
 800c546:	425b      	negs	r3, r3
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
 800c548:	00d6      	lsls	r6, r2, #3
 800c54a:	19a8      	adds	r0, r5, r6
 800c54c:	7981      	ldrb	r1, [r0, #6]
 800c54e:	1c0f      	adds	r7, r1, #0
 800c550:	07c9      	lsls	r1, r1, #31
 800c552:	d411      	bmi.n	800c578 <_lv_mem_buf_get+0x64>
 800c554:	8881      	ldrh	r1, [r0, #4]
 800c556:	42a1      	cmp	r1, r4
 800c558:	d30e      	bcc.n	800c578 <_lv_mem_buf_get+0x64>
            if(LV_GC_ROOT(_lv_mem_buf[i]).size == size) {
 800c55a:	d104      	bne.n	800c566 <_lv_mem_buf_get+0x52>
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
 800c55c:	2301      	movs	r3, #1
 800c55e:	433b      	orrs	r3, r7
 800c560:	7183      	strb	r3, [r0, #6]
                return LV_GC_ROOT(_lv_mem_buf[i]).p;
 800c562:	5970      	ldr	r0, [r6, r5]
 800c564:	e7eb      	b.n	800c53e <_lv_mem_buf_get+0x2a>
            else if(i_guess < 0) {
 800c566:	1c58      	adds	r0, r3, #1
 800c568:	d101      	bne.n	800c56e <_lv_mem_buf_get+0x5a>
                i_guess = i;
 800c56a:	b253      	sxtb	r3, r2
 800c56c:	e004      	b.n	800c578 <_lv_mem_buf_get+0x64>
            else if(LV_GC_ROOT(_lv_mem_buf[i]).size < LV_GC_ROOT(_lv_mem_buf[i_guess]).size) {
 800c56e:	00d8      	lsls	r0, r3, #3
 800c570:	1828      	adds	r0, r5, r0
 800c572:	8880      	ldrh	r0, [r0, #4]
 800c574:	4288      	cmp	r0, r1
 800c576:	d8f8      	bhi.n	800c56a <_lv_mem_buf_get+0x56>
 800c578:	3201      	adds	r2, #1
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 800c57a:	2a10      	cmp	r2, #16
 800c57c:	d1e4      	bne.n	800c548 <_lv_mem_buf_get+0x34>
    if(i_guess >= 0) {
 800c57e:	1c5a      	adds	r2, r3, #1
 800c580:	d007      	beq.n	800c592 <_lv_mem_buf_get+0x7e>
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
 800c582:	2201      	movs	r2, #1
 800c584:	00db      	lsls	r3, r3, #3
 800c586:	18e9      	adds	r1, r5, r3
 800c588:	7988      	ldrb	r0, [r1, #6]
 800c58a:	4302      	orrs	r2, r0
 800c58c:	718a      	strb	r2, [r1, #6]
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
 800c58e:	58e8      	ldr	r0, [r5, r3]
 800c590:	e7d5      	b.n	800c53e <_lv_mem_buf_get+0x2a>
 800c592:	2300      	movs	r3, #0
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0) {
 800c594:	00df      	lsls	r7, r3, #3
 800c596:	19ee      	adds	r6, r5, r7
 800c598:	79b2      	ldrb	r2, [r6, #6]
 800c59a:	07d2      	lsls	r2, r2, #31
 800c59c:	d40c      	bmi.n	800c5b8 <_lv_mem_buf_get+0xa4>
            void * buf = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
 800c59e:	0021      	movs	r1, r4
 800c5a0:	59e8      	ldr	r0, [r5, r7]
 800c5a2:	f7ff ff85 	bl	800c4b0 <lv_mem_realloc>
            if(buf == NULL) {
 800c5a6:	2800      	cmp	r0, #0
 800c5a8:	d0c9      	beq.n	800c53e <_lv_mem_buf_get+0x2a>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	79b2      	ldrb	r2, [r6, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = size;
 800c5ae:	80b4      	strh	r4, [r6, #4]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
 800c5b0:	4313      	orrs	r3, r2
 800c5b2:	71b3      	strb	r3, [r6, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).p    = buf;
 800c5b4:	51e8      	str	r0, [r5, r7]
            return LV_GC_ROOT(_lv_mem_buf[i]).p;
 800c5b6:	e7c2      	b.n	800c53e <_lv_mem_buf_get+0x2a>
 800c5b8:	3301      	adds	r3, #1
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 800c5ba:	2b10      	cmp	r3, #16
 800c5bc:	d1ea      	bne.n	800c594 <_lv_mem_buf_get+0x80>
    if(size == 0) return NULL;
 800c5be:	2000      	movs	r0, #0
 800c5c0:	e7bd      	b.n	800c53e <_lv_mem_buf_get+0x2a>
 800c5c2:	46c0      	nop			; (mov r8, r8)
 800c5c4:	2000003c 	.word	0x2000003c
 800c5c8:	2000711c 	.word	0x2000711c

0800c5cc <_lv_memset>:
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 800c5cc:	2303      	movs	r3, #3
{
 800c5ce:	b510      	push	{r4, lr}
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 800c5d0:	4003      	ands	r3, r0
    if(d_align) {
 800c5d2:	d008      	beq.n	800c5e6 <_lv_memset+0x1a>
        d_align = ALIGN_MASK + 1 - d_align;
 800c5d4:	1ac3      	subs	r3, r0, r3
 800c5d6:	3304      	adds	r3, #4
        while(d_align && len) {
 800c5d8:	2a00      	cmp	r2, #0
 800c5da:	d004      	beq.n	800c5e6 <_lv_memset+0x1a>
            SET8(v);
 800c5dc:	7001      	strb	r1, [r0, #0]
 800c5de:	3001      	adds	r0, #1
            len--;
 800c5e0:	3a01      	subs	r2, #1
        while(d_align && len) {
 800c5e2:	4283      	cmp	r3, r0
 800c5e4:	d1f8      	bne.n	800c5d8 <_lv_memset+0xc>
    uint32_t v32 = v + (v << 8) + (v << 16) + (v << 24);
 800c5e6:	020b      	lsls	r3, r1, #8
 800c5e8:	040c      	lsls	r4, r1, #16
 800c5ea:	185b      	adds	r3, r3, r1
 800c5ec:	191b      	adds	r3, r3, r4
 800c5ee:	060c      	lsls	r4, r1, #24
 800c5f0:	191b      	adds	r3, r3, r4
    while(len > 32) {
 800c5f2:	2a20      	cmp	r2, #32
 800c5f4:	d805      	bhi.n	800c602 <_lv_memset+0x36>
    while(len > 4) {
 800c5f6:	2a04      	cmp	r2, #4
 800c5f8:	d80e      	bhi.n	800c618 <_lv_memset+0x4c>
 800c5fa:	1882      	adds	r2, r0, r2
    while(len) {
 800c5fc:	4290      	cmp	r0, r2
 800c5fe:	d10e      	bne.n	800c61e <_lv_memset+0x52>
}
 800c600:	bd10      	pop	{r4, pc}
        REPEAT8(SET32(v32));
 800c602:	6003      	str	r3, [r0, #0]
 800c604:	6043      	str	r3, [r0, #4]
 800c606:	6083      	str	r3, [r0, #8]
 800c608:	60c3      	str	r3, [r0, #12]
 800c60a:	6103      	str	r3, [r0, #16]
 800c60c:	6143      	str	r3, [r0, #20]
 800c60e:	6183      	str	r3, [r0, #24]
 800c610:	61c3      	str	r3, [r0, #28]
        len -= 32;
 800c612:	3a20      	subs	r2, #32
 800c614:	3020      	adds	r0, #32
 800c616:	e7ec      	b.n	800c5f2 <_lv_memset+0x26>
        SET32(v32);
 800c618:	c008      	stmia	r0!, {r3}
        len -= 4;
 800c61a:	3a04      	subs	r2, #4
 800c61c:	e7eb      	b.n	800c5f6 <_lv_memset+0x2a>
        SET8(v);
 800c61e:	7001      	strb	r1, [r0, #0]
 800c620:	3001      	adds	r0, #1
 800c622:	e7eb      	b.n	800c5fc <_lv_memset+0x30>

0800c624 <_lv_memset_00>:
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 800c624:	2303      	movs	r3, #3
 800c626:	4003      	ands	r3, r0
    if(d_align) {
 800c628:	d108      	bne.n	800c63c <_lv_memset_00+0x18>
        REPEAT8(SET32(0));
 800c62a:	2300      	movs	r3, #0
    while(len > 32) {
 800c62c:	2920      	cmp	r1, #32
 800c62e:	d813      	bhi.n	800c658 <_lv_memset_00+0x34>
        SET32(0);
 800c630:	2300      	movs	r3, #0
    while(len > 4) {
 800c632:	2904      	cmp	r1, #4
 800c634:	d907      	bls.n	800c646 <_lv_memset_00+0x22>
        SET32(0);
 800c636:	c008      	stmia	r0!, {r3}
        len -= 4;
 800c638:	3904      	subs	r1, #4
 800c63a:	e7fa      	b.n	800c632 <_lv_memset_00+0xe>
            SET8(0);
 800c63c:	2200      	movs	r2, #0
        d_align = ALIGN_MASK + 1 - d_align;
 800c63e:	1ac3      	subs	r3, r0, r3
 800c640:	3304      	adds	r3, #4
        while(d_align && len) {
 800c642:	2900      	cmp	r1, #0
 800c644:	d102      	bne.n	800c64c <_lv_memset_00+0x28>
 800c646:	1841      	adds	r1, r0, r1
        SET8(0);
 800c648:	2300      	movs	r3, #0
 800c64a:	e012      	b.n	800c672 <_lv_memset_00+0x4e>
            SET8(0);
 800c64c:	7002      	strb	r2, [r0, #0]
 800c64e:	3001      	adds	r0, #1
            len--;
 800c650:	3901      	subs	r1, #1
        while(d_align && len) {
 800c652:	4298      	cmp	r0, r3
 800c654:	d1f5      	bne.n	800c642 <_lv_memset_00+0x1e>
 800c656:	e7e8      	b.n	800c62a <_lv_memset_00+0x6>
        REPEAT8(SET32(0));
 800c658:	6003      	str	r3, [r0, #0]
 800c65a:	6043      	str	r3, [r0, #4]
 800c65c:	6083      	str	r3, [r0, #8]
 800c65e:	60c3      	str	r3, [r0, #12]
 800c660:	6103      	str	r3, [r0, #16]
 800c662:	6143      	str	r3, [r0, #20]
 800c664:	6183      	str	r3, [r0, #24]
 800c666:	61c3      	str	r3, [r0, #28]
        len -= 32;
 800c668:	3920      	subs	r1, #32
 800c66a:	3020      	adds	r0, #32
 800c66c:	e7de      	b.n	800c62c <_lv_memset_00+0x8>
        SET8(0);
 800c66e:	7003      	strb	r3, [r0, #0]
 800c670:	3001      	adds	r0, #1
    while(len) {
 800c672:	4288      	cmp	r0, r1
 800c674:	d1fb      	bne.n	800c66e <_lv_memset_00+0x4a>
}
 800c676:	4770      	bx	lr

0800c678 <_lv_memset_ff>:
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 800c678:	2303      	movs	r3, #3
 800c67a:	4003      	ands	r3, r0
    if(d_align) {
 800c67c:	d10a      	bne.n	800c694 <_lv_memset_ff+0x1c>
        REPEAT8(SET32(0xFFFFFFFF));
 800c67e:	2301      	movs	r3, #1
 800c680:	425b      	negs	r3, r3
    while(len > 32) {
 800c682:	2920      	cmp	r1, #32
 800c684:	d814      	bhi.n	800c6b0 <_lv_memset_ff+0x38>
        SET32(0xFFFFFFFF);
 800c686:	2301      	movs	r3, #1
 800c688:	425b      	negs	r3, r3
    while(len > 4) {
 800c68a:	2904      	cmp	r1, #4
 800c68c:	d907      	bls.n	800c69e <_lv_memset_ff+0x26>
        SET32(0xFFFFFFFF);
 800c68e:	c008      	stmia	r0!, {r3}
        len -= 4;
 800c690:	3904      	subs	r1, #4
 800c692:	e7fa      	b.n	800c68a <_lv_memset_ff+0x12>
            SET8(0xFF);
 800c694:	22ff      	movs	r2, #255	; 0xff
        d_align = ALIGN_MASK + 1 - d_align;
 800c696:	1ac3      	subs	r3, r0, r3
 800c698:	3304      	adds	r3, #4
        while(d_align && len) {
 800c69a:	2900      	cmp	r1, #0
 800c69c:	d102      	bne.n	800c6a4 <_lv_memset_ff+0x2c>
 800c69e:	1841      	adds	r1, r0, r1
        SET8(0xFF);
 800c6a0:	23ff      	movs	r3, #255	; 0xff
 800c6a2:	e012      	b.n	800c6ca <_lv_memset_ff+0x52>
            SET8(0xFF);
 800c6a4:	7002      	strb	r2, [r0, #0]
 800c6a6:	3001      	adds	r0, #1
            len--;
 800c6a8:	3901      	subs	r1, #1
        while(d_align && len) {
 800c6aa:	4298      	cmp	r0, r3
 800c6ac:	d1f5      	bne.n	800c69a <_lv_memset_ff+0x22>
 800c6ae:	e7e6      	b.n	800c67e <_lv_memset_ff+0x6>
        REPEAT8(SET32(0xFFFFFFFF));
 800c6b0:	6003      	str	r3, [r0, #0]
 800c6b2:	6043      	str	r3, [r0, #4]
 800c6b4:	6083      	str	r3, [r0, #8]
 800c6b6:	60c3      	str	r3, [r0, #12]
 800c6b8:	6103      	str	r3, [r0, #16]
 800c6ba:	6143      	str	r3, [r0, #20]
 800c6bc:	6183      	str	r3, [r0, #24]
 800c6be:	61c3      	str	r3, [r0, #28]
        len -= 32;
 800c6c0:	3920      	subs	r1, #32
 800c6c2:	3020      	adds	r0, #32
 800c6c4:	e7dd      	b.n	800c682 <_lv_memset_ff+0xa>
        SET8(0xFF);
 800c6c6:	7003      	strb	r3, [r0, #0]
 800c6c8:	3001      	adds	r0, #1
    while(len) {
 800c6ca:	4288      	cmp	r0, r1
 800c6cc:	d1fb      	bne.n	800c6c6 <_lv_memset_ff+0x4e>
}
 800c6ce:	4770      	bx	lr

0800c6d0 <_lv_task_core_init>:

/**
 * Init the lv_task module
 */
void _lv_task_core_init(void)
{
 800c6d0:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
 800c6d2:	2118      	movs	r1, #24
 800c6d4:	4803      	ldr	r0, [pc, #12]	; (800c6e4 <_lv_task_core_init+0x14>)
 800c6d6:	f7ff fc02 	bl	800bede <_lv_ll_init>
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
 800c6da:	2201      	movs	r2, #1
 800c6dc:	4b02      	ldr	r3, [pc, #8]	; (800c6e8 <_lv_task_core_init+0x18>)
 800c6de:	701a      	strb	r2, [r3, #0]
}
 800c6e0:	bd10      	pop	{r4, pc}
 800c6e2:	46c0      	nop			; (mov r8, r8)
 800c6e4:	200070e8 	.word	0x200070e8
 800c6e8:	20006ea4 	.word	0x20006ea4

0800c6ec <lv_task_create>:
{
 800c6ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800c6ee:	4c1d      	ldr	r4, [pc, #116]	; (800c764 <lv_task_create+0x78>)
{
 800c6f0:	9000      	str	r0, [sp, #0]
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800c6f2:	0020      	movs	r0, r4
{
 800c6f4:	000f      	movs	r7, r1
 800c6f6:	0015      	movs	r5, r2
 800c6f8:	9301      	str	r3, [sp, #4]
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800c6fa:	f7ff fc38 	bl	800bf6e <_lv_ll_get_head>
 800c6fe:	1e01      	subs	r1, r0, #0
    if(NULL == tmp) {
 800c700:	d107      	bne.n	800c712 <lv_task_create+0x26>
        new_task = _lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
 800c702:	0020      	movs	r0, r4
 800c704:	f7ff fbf3 	bl	800beee <_lv_ll_ins_head>
 800c708:	1e04      	subs	r4, r0, #0
        if(new_task == NULL) return NULL;
 800c70a:	d113      	bne.n	800c734 <lv_task_create+0x48>
 800c70c:	2400      	movs	r4, #0
}
 800c70e:	0020      	movs	r0, r4
 800c710:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            if(tmp->prio <= prio) {
 800c712:	7d0b      	ldrb	r3, [r1, #20]
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 800c714:	0020      	movs	r0, r4
            if(tmp->prio <= prio) {
 800c716:	075b      	lsls	r3, r3, #29
 800c718:	0f5b      	lsrs	r3, r3, #29
 800c71a:	42ab      	cmp	r3, r5
 800c71c:	dc02      	bgt.n	800c724 <lv_task_create+0x38>
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 800c71e:	f7ff fc39 	bl	800bf94 <_lv_ll_ins_prev>
 800c722:	e7f1      	b.n	800c708 <lv_task_create+0x1c>
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 800c724:	f7ff fc2b 	bl	800bf7e <_lv_ll_get_next>
 800c728:	1e01      	subs	r1, r0, #0
        } while(tmp != NULL);
 800c72a:	d1f2      	bne.n	800c712 <lv_task_create+0x26>
            new_task = _lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
 800c72c:	0020      	movs	r0, r4
 800c72e:	f7ff fbfe 	bl	800bf2e <_lv_ll_ins_tail>
 800c732:	e7e9      	b.n	800c708 <lv_task_create+0x1c>
    task_list_changed = true;
 800c734:	2601      	movs	r6, #1
 800c736:	4b0c      	ldr	r3, [pc, #48]	; (800c768 <lv_task_create+0x7c>)
    new_task->prio    = prio;
 800c738:	002a      	movs	r2, r5
    task_list_changed = true;
 800c73a:	701e      	strb	r6, [r3, #0]
    new_task->task_cb = task_xcb;
 800c73c:	9b00      	ldr	r3, [sp, #0]
    new_task->prio    = prio;
 800c73e:	7d05      	ldrb	r5, [r0, #20]
    new_task->task_cb = task_xcb;
 800c740:	6083      	str	r3, [r0, #8]
    new_task->prio    = prio;
 800c742:	2307      	movs	r3, #7
 800c744:	401a      	ands	r2, r3
 800c746:	439d      	bics	r5, r3
 800c748:	4315      	orrs	r5, r2
    new_task->repeat_count = -1;
 800c74a:	3b08      	subs	r3, #8
 800c74c:	6103      	str	r3, [r0, #16]
    new_task->period  = period;
 800c74e:	6007      	str	r7, [r0, #0]
    new_task->prio    = prio;
 800c750:	7505      	strb	r5, [r0, #20]
    new_task->last_run = lv_tick_get();
 800c752:	f7ff f8d9 	bl	800b908 <lv_tick_get>
    new_task->user_data = user_data;
 800c756:	9b01      	ldr	r3, [sp, #4]
    new_task->last_run = lv_tick_get();
 800c758:	6060      	str	r0, [r4, #4]
    new_task->user_data = user_data;
 800c75a:	60e3      	str	r3, [r4, #12]
    task_created = true;
 800c75c:	4b03      	ldr	r3, [pc, #12]	; (800c76c <lv_task_create+0x80>)
 800c75e:	701e      	strb	r6, [r3, #0]
    return new_task;
 800c760:	e7d5      	b.n	800c70e <lv_task_create+0x22>
 800c762:	46c0      	nop			; (mov r8, r8)
 800c764:	200070e8 	.word	0x200070e8
 800c768:	20006ea7 	.word	0x20006ea7
 800c76c:	20006ea5 	.word	0x20006ea5

0800c770 <lv_task_del>:
{
 800c770:	b570      	push	{r4, r5, r6, lr}
 800c772:	0004      	movs	r4, r0
    task_list_changed = true;
 800c774:	2501      	movs	r5, #1
    _lv_ll_remove(&LV_GC_ROOT(_lv_task_ll), task);
 800c776:	0001      	movs	r1, r0
 800c778:	4807      	ldr	r0, [pc, #28]	; (800c798 <lv_task_del+0x28>)
 800c77a:	f7ff fc3a 	bl	800bff2 <_lv_ll_remove>
    task_list_changed = true;
 800c77e:	4b07      	ldr	r3, [pc, #28]	; (800c79c <lv_task_del+0x2c>)
    lv_mem_free(task);
 800c780:	0020      	movs	r0, r4
    task_list_changed = true;
 800c782:	701d      	strb	r5, [r3, #0]
    lv_mem_free(task);
 800c784:	f7ff fd94 	bl	800c2b0 <lv_mem_free>
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
 800c788:	4b05      	ldr	r3, [pc, #20]	; (800c7a0 <lv_task_del+0x30>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	42a3      	cmp	r3, r4
 800c78e:	d101      	bne.n	800c794 <lv_task_del+0x24>
 800c790:	4b04      	ldr	r3, [pc, #16]	; (800c7a4 <lv_task_del+0x34>)
 800c792:	701d      	strb	r5, [r3, #0]
}
 800c794:	bd70      	pop	{r4, r5, r6, pc}
 800c796:	46c0      	nop			; (mov r8, r8)
 800c798:	200070e8 	.word	0x200070e8
 800c79c:	20006ea7 	.word	0x20006ea7
 800c7a0:	200071b8 	.word	0x200071b8
 800c7a4:	20006ea6 	.word	0x20006ea6

0800c7a8 <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
 800c7a8:	b510      	push	{r4, lr}
 800c7aa:	0004      	movs	r4, r0
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_task_time_remaining(lv_task_t * task)
{
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
 800c7ac:	6840      	ldr	r0, [r0, #4]
 800c7ae:	f7ff f8b9 	bl	800b924 <lv_tick_elaps>
    if(elp >= task->period)
 800c7b2:	6822      	ldr	r2, [r4, #0]
    bool exec = false;
 800c7b4:	2300      	movs	r3, #0
    if(elp >= task->period)
 800c7b6:	4290      	cmp	r0, r2
 800c7b8:	d30c      	bcc.n	800c7d4 <lv_task_exec+0x2c>
        task->last_run = lv_tick_get();
 800c7ba:	f7ff f8a5 	bl	800b908 <lv_tick_get>
        if(task->task_cb) task->task_cb(task);
 800c7be:	68a3      	ldr	r3, [r4, #8]
        task->last_run = lv_tick_get();
 800c7c0:	6060      	str	r0, [r4, #4]
        if(task->task_cb) task->task_cb(task);
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d001      	beq.n	800c7ca <lv_task_exec+0x22>
 800c7c6:	0020      	movs	r0, r4
 800c7c8:	4798      	blx	r3
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
 800c7ca:	4b09      	ldr	r3, [pc, #36]	; (800c7f0 <lv_task_exec+0x48>)
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d002      	beq.n	800c7d8 <lv_task_exec+0x30>
                lv_task_del(task);
 800c7d2:	2301      	movs	r3, #1
}
 800c7d4:	0018      	movs	r0, r3
 800c7d6:	bd10      	pop	{r4, pc}
            if(task->repeat_count > 0) {
 800c7d8:	6923      	ldr	r3, [r4, #16]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	dd01      	ble.n	800c7e2 <lv_task_exec+0x3a>
                task->repeat_count--;
 800c7de:	3b01      	subs	r3, #1
 800c7e0:	6123      	str	r3, [r4, #16]
            if(task->repeat_count == 0) {
 800c7e2:	6923      	ldr	r3, [r4, #16]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d1f4      	bne.n	800c7d2 <lv_task_exec+0x2a>
                lv_task_del(task);
 800c7e8:	0020      	movs	r0, r4
 800c7ea:	f7ff ffc1 	bl	800c770 <lv_task_del>
 800c7ee:	e7f0      	b.n	800c7d2 <lv_task_exec+0x2a>
 800c7f0:	20006ea6 	.word	0x20006ea6

0800c7f4 <lv_task_handler>:
    if(already_running) return 1;
 800c7f4:	4b4c      	ldr	r3, [pc, #304]	; (800c928 <lv_task_handler+0x134>)
{
 800c7f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(already_running) return 1;
 800c7f8:	781c      	ldrb	r4, [r3, #0]
 800c7fa:	2501      	movs	r5, #1
 800c7fc:	2c00      	cmp	r4, #0
 800c7fe:	d106      	bne.n	800c80e <lv_task_handler+0x1a>
    already_running = true;
 800c800:	701d      	strb	r5, [r3, #0]
    if(lv_task_run == false) {
 800c802:	4b4a      	ldr	r3, [pc, #296]	; (800c92c <lv_task_handler+0x138>)
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d103      	bne.n	800c812 <lv_task_handler+0x1e>
    already_running = false; /*Release the mutex*/
 800c80a:	4a47      	ldr	r2, [pc, #284]	; (800c928 <lv_task_handler+0x134>)
 800c80c:	7013      	strb	r3, [r2, #0]
}
 800c80e:	0028      	movs	r0, r5
 800c810:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    uint32_t handler_start = lv_tick_get();
 800c812:	f7ff f879 	bl	800b908 <lv_tick_get>
 800c816:	9001      	str	r0, [sp, #4]
        task_deleted             = false;
 800c818:	2300      	movs	r3, #0
        task_created             = false;
 800c81a:	4a45      	ldr	r2, [pc, #276]	; (800c930 <lv_task_handler+0x13c>)
        task_deleted             = false;
 800c81c:	4e45      	ldr	r6, [pc, #276]	; (800c934 <lv_task_handler+0x140>)
        task_created             = false;
 800c81e:	7013      	strb	r3, [r2, #0]
        task_list_changed        = false;
 800c820:	4a45      	ldr	r2, [pc, #276]	; (800c938 <lv_task_handler+0x144>)
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800c822:	4846      	ldr	r0, [pc, #280]	; (800c93c <lv_task_handler+0x148>)
        task_deleted             = false;
 800c824:	7033      	strb	r3, [r6, #0]
        task_list_changed        = false;
 800c826:	7013      	strb	r3, [r2, #0]
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800c828:	f7ff fba1 	bl	800bf6e <_lv_ll_get_head>
 800c82c:	4b44      	ldr	r3, [pc, #272]	; (800c940 <lv_task_handler+0x14c>)
 800c82e:	6018      	str	r0, [r3, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
 800c830:	4d43      	ldr	r5, [pc, #268]	; (800c940 <lv_task_handler+0x14c>)
 800c832:	6829      	ldr	r1, [r5, #0]
 800c834:	2900      	cmp	r1, #0
 800c836:	d10a      	bne.n	800c84e <lv_task_handler+0x5a>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800c838:	4e40      	ldr	r6, [pc, #256]	; (800c93c <lv_task_handler+0x148>)
    uint32_t time_till_next = LV_NO_TASK_READY;
 800c83a:	2501      	movs	r5, #1
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800c83c:	0030      	movs	r0, r6
 800c83e:	f7ff fb96 	bl	800bf6e <_lv_ll_get_head>
    uint32_t time_till_next = LV_NO_TASK_READY;
 800c842:	426d      	negs	r5, r5
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800c844:	0004      	movs	r4, r0
    while(next && next->prio != LV_TASK_PRIO_OFF) {
 800c846:	2707      	movs	r7, #7
 800c848:	e045      	b.n	800c8d6 <lv_task_handler+0xe2>
                task_interrupter = NULL;
 800c84a:	001c      	movs	r4, r3
 800c84c:	e7e4      	b.n	800c818 <lv_task_handler+0x24>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 800c84e:	483b      	ldr	r0, [pc, #236]	; (800c93c <lv_task_handler+0x148>)
 800c850:	f7ff fb95 	bl	800bf7e <_lv_ll_get_next>
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_OFF) {
 800c854:	2207      	movs	r2, #7
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 800c856:	0007      	movs	r7, r0
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_OFF) {
 800c858:	6828      	ldr	r0, [r5, #0]
 800c85a:	7d03      	ldrb	r3, [r0, #20]
 800c85c:	401a      	ands	r2, r3
 800c85e:	d0eb      	beq.n	800c838 <lv_task_handler+0x44>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
 800c860:	42a0      	cmp	r0, r4
 800c862:	d102      	bne.n	800c86a <lv_task_handler+0x76>
                LV_GC_ROOT(_lv_task_act) = next;
 800c864:	602f      	str	r7, [r5, #0]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
 800c866:	2400      	movs	r4, #0
                continue; /*Load the next task*/
 800c868:	e7e2      	b.n	800c830 <lv_task_handler+0x3c>
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_HIGHEST) {
 800c86a:	2a05      	cmp	r2, #5
 800c86c:	d10f      	bne.n	800c88e <lv_task_handler+0x9a>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
 800c86e:	f7ff ff9b 	bl	800c7a8 <lv_task_exec>
            if(task_created || task_deleted) {
 800c872:	4b2f      	ldr	r3, [pc, #188]	; (800c930 <lv_task_handler+0x13c>)
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d1de      	bne.n	800c838 <lv_task_handler+0x44>
 800c87a:	7833      	ldrb	r3, [r6, #0]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d1db      	bne.n	800c838 <lv_task_handler+0x44>
            if(task_list_changed) {
 800c880:	4a2d      	ldr	r2, [pc, #180]	; (800c938 <lv_task_handler+0x144>)
 800c882:	7812      	ldrb	r2, [r2, #0]
 800c884:	2a00      	cmp	r2, #0
 800c886:	d1e0      	bne.n	800c84a <lv_task_handler+0x56>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
 800c888:	4b2d      	ldr	r3, [pc, #180]	; (800c940 <lv_task_handler+0x14c>)
 800c88a:	601f      	str	r7, [r3, #0]
 800c88c:	e7d0      	b.n	800c830 <lv_task_handler+0x3c>
            else if(task_interrupter) {
 800c88e:	2c00      	cmp	r4, #0
 800c890:	d004      	beq.n	800c89c <lv_task_handler+0xa8>
                if(LV_GC_ROOT(_lv_task_act)->prio > task_interrupter->prio) {
 800c892:	7d22      	ldrb	r2, [r4, #20]
 800c894:	075b      	lsls	r3, r3, #29
 800c896:	0752      	lsls	r2, r2, #29
 800c898:	429a      	cmp	r2, r3
 800c89a:	d2ea      	bcs.n	800c872 <lv_task_handler+0x7e>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 800c89c:	f7ff ff84 	bl	800c7a8 <lv_task_exec>
 800c8a0:	2800      	cmp	r0, #0
 800c8a2:	d0e6      	beq.n	800c872 <lv_task_handler+0x7e>
                    if(!task_created && !task_deleted) {
 800c8a4:	4b22      	ldr	r3, [pc, #136]	; (800c930 <lv_task_handler+0x13c>)
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d1c5      	bne.n	800c838 <lv_task_handler+0x44>
 800c8ac:	7833      	ldrb	r3, [r6, #0]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d1e3      	bne.n	800c87a <lv_task_handler+0x86>
                        task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
 800c8b2:	682c      	ldr	r4, [r5, #0]
 800c8b4:	e7b0      	b.n	800c818 <lv_task_handler+0x24>
    uint32_t elp = lv_tick_elaps(task->last_run);
 800c8b6:	6860      	ldr	r0, [r4, #4]
 800c8b8:	f7ff f834 	bl	800b924 <lv_tick_elaps>
    if(elp >= task->period)
 800c8bc:	6822      	ldr	r2, [r4, #0]
        return 0;
 800c8be:	2300      	movs	r3, #0
    if(elp >= task->period)
 800c8c0:	4290      	cmp	r0, r2
 800c8c2:	d200      	bcs.n	800c8c6 <lv_task_handler+0xd2>
    return task->period - elp;
 800c8c4:	1a13      	subs	r3, r2, r0
 800c8c6:	429d      	cmp	r5, r3
 800c8c8:	d900      	bls.n	800c8cc <lv_task_handler+0xd8>
 800c8ca:	001d      	movs	r5, r3
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
 800c8cc:	0021      	movs	r1, r4
 800c8ce:	0030      	movs	r0, r6
 800c8d0:	f7ff fb55 	bl	800bf7e <_lv_ll_get_next>
 800c8d4:	0004      	movs	r4, r0
    while(next && next->prio != LV_TASK_PRIO_OFF) {
 800c8d6:	2c00      	cmp	r4, #0
 800c8d8:	d002      	beq.n	800c8e0 <lv_task_handler+0xec>
 800c8da:	7d23      	ldrb	r3, [r4, #20]
 800c8dc:	423b      	tst	r3, r7
 800c8de:	d1ea      	bne.n	800c8b6 <lv_task_handler+0xc2>
    busy_time += lv_tick_elaps(handler_start);
 800c8e0:	9801      	ldr	r0, [sp, #4]
 800c8e2:	f7ff f81f 	bl	800b924 <lv_tick_elaps>
 800c8e6:	4c17      	ldr	r4, [pc, #92]	; (800c944 <lv_task_handler+0x150>)
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 800c8e8:	4f17      	ldr	r7, [pc, #92]	; (800c948 <lv_task_handler+0x154>)
    busy_time += lv_tick_elaps(handler_start);
 800c8ea:	6823      	ldr	r3, [r4, #0]
 800c8ec:	1818      	adds	r0, r3, r0
 800c8ee:	6020      	str	r0, [r4, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 800c8f0:	6838      	ldr	r0, [r7, #0]
 800c8f2:	f7ff f817 	bl	800b924 <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 800c8f6:	23f4      	movs	r3, #244	; 0xf4
 800c8f8:	33ff      	adds	r3, #255	; 0xff
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 800c8fa:	0001      	movs	r1, r0
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 800c8fc:	4298      	cmp	r0, r3
 800c8fe:	d911      	bls.n	800c924 <lv_task_handler+0x130>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
 800c900:	2664      	movs	r6, #100	; 0x64
 800c902:	6820      	ldr	r0, [r4, #0]
 800c904:	4370      	muls	r0, r6
 800c906:	f7f3 fc35 	bl	8000174 <__udivsi3>
 800c90a:	b2c0      	uxtb	r0, r0
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
 800c90c:	2300      	movs	r3, #0
 800c90e:	42b0      	cmp	r0, r6
 800c910:	d801      	bhi.n	800c916 <lv_task_handler+0x122>
 800c912:	1a36      	subs	r6, r6, r0
 800c914:	b2f3      	uxtb	r3, r6
 800c916:	4a0d      	ldr	r2, [pc, #52]	; (800c94c <lv_task_handler+0x158>)
 800c918:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 800c91a:	2300      	movs	r3, #0
 800c91c:	6023      	str	r3, [r4, #0]
        idle_period_start = lv_tick_get();
 800c91e:	f7fe fff3 	bl	800b908 <lv_tick_get>
 800c922:	6038      	str	r0, [r7, #0]
    already_running = false; /*Release the mutex*/
 800c924:	2300      	movs	r3, #0
 800c926:	e770      	b.n	800c80a <lv_task_handler+0x16>
 800c928:	20006e94 	.word	0x20006e94
 800c92c:	20006ea4 	.word	0x20006ea4
 800c930:	20006ea5 	.word	0x20006ea5
 800c934:	20006ea6 	.word	0x20006ea6
 800c938:	20006ea7 	.word	0x20006ea7
 800c93c:	200070e8 	.word	0x200070e8
 800c940:	200071b8 	.word	0x200071b8
 800c944:	20006e98 	.word	0x20006e98
 800c948:	20006ea0 	.word	0x20006ea0
 800c94c:	20006e9c 	.word	0x20006e9c

0800c950 <lv_task_set_prio>:
    if(task->prio == prio) return;
 800c950:	7d03      	ldrb	r3, [r0, #20]
{
 800c952:	b570      	push	{r4, r5, r6, lr}
    if(task->prio == prio) return;
 800c954:	075b      	lsls	r3, r3, #29
{
 800c956:	0004      	movs	r4, r0
 800c958:	000d      	movs	r5, r1
    if(task->prio == prio) return;
 800c95a:	0f5b      	lsrs	r3, r3, #29
 800c95c:	428b      	cmp	r3, r1
 800c95e:	d01a      	beq.n	800c996 <lv_task_set_prio+0x46>
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
 800c960:	4e10      	ldr	r6, [pc, #64]	; (800c9a4 <lv_task_set_prio+0x54>)
 800c962:	0030      	movs	r0, r6
 800c964:	f7ff fb03 	bl	800bf6e <_lv_ll_get_head>
 800c968:	1e02      	subs	r2, r0, #0
 800c96a:	d006      	beq.n	800c97a <lv_task_set_prio+0x2a>
        if(i->prio <= prio) {
 800c96c:	7d13      	ldrb	r3, [r2, #20]
 800c96e:	075b      	lsls	r3, r3, #29
 800c970:	0f5b      	lsrs	r3, r3, #29
 800c972:	429d      	cmp	r5, r3
 800c974:	db10      	blt.n	800c998 <lv_task_set_prio+0x48>
            if(i != task) _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
 800c976:	42a2      	cmp	r2, r4
 800c978:	d003      	beq.n	800c982 <lv_task_set_prio+0x32>
        _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
 800c97a:	0021      	movs	r1, r4
 800c97c:	0030      	movs	r0, r6
 800c97e:	f7ff fba8 	bl	800c0d2 <_lv_ll_move_before>
    task_list_changed = true;
 800c982:	2201      	movs	r2, #1
 800c984:	4b08      	ldr	r3, [pc, #32]	; (800c9a8 <lv_task_set_prio+0x58>)
 800c986:	701a      	strb	r2, [r3, #0]
    task->prio = prio;
 800c988:	2307      	movs	r3, #7
 800c98a:	002a      	movs	r2, r5
 800c98c:	7d25      	ldrb	r5, [r4, #20]
 800c98e:	401a      	ands	r2, r3
 800c990:	439d      	bics	r5, r3
 800c992:	4315      	orrs	r5, r2
 800c994:	7525      	strb	r5, [r4, #20]
}
 800c996:	bd70      	pop	{r4, r5, r6, pc}
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
 800c998:	0011      	movs	r1, r2
 800c99a:	0030      	movs	r0, r6
 800c99c:	f7ff faef 	bl	800bf7e <_lv_ll_get_next>
 800c9a0:	e7e2      	b.n	800c968 <lv_task_set_prio+0x18>
 800c9a2:	46c0      	nop			; (mov r8, r8)
 800c9a4:	200070e8 	.word	0x200070e8
 800c9a8:	20006ea7 	.word	0x20006ea7

0800c9ac <lv_task_ready>:
{
 800c9ac:	b510      	push	{r4, lr}
 800c9ae:	0004      	movs	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
 800c9b0:	f7fe ffaa 	bl	800b908 <lv_tick_get>
 800c9b4:	6823      	ldr	r3, [r4, #0]
 800c9b6:	43db      	mvns	r3, r3
 800c9b8:	1818      	adds	r0, r3, r0
 800c9ba:	6060      	str	r0, [r4, #4]
}
 800c9bc:	bd10      	pop	{r4, pc}

0800c9be <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if((str[0] & 0x80) == 0)
 800c9be:	7803      	ldrb	r3, [r0, #0]
        return 1;
 800c9c0:	2001      	movs	r0, #1
    if((str[0] & 0x80) == 0)
 800c9c2:	b25a      	sxtb	r2, r3
 800c9c4:	2a00      	cmp	r2, #0
 800c9c6:	da11      	bge.n	800c9ec <lv_txt_utf8_size+0x2e>
    else if((str[0] & 0xE0) == 0xC0)
 800c9c8:	221f      	movs	r2, #31
 800c9ca:	0019      	movs	r1, r3
        return 2;
 800c9cc:	1800      	adds	r0, r0, r0
    else if((str[0] & 0xE0) == 0xC0)
 800c9ce:	4391      	bics	r1, r2
 800c9d0:	29c0      	cmp	r1, #192	; 0xc0
 800c9d2:	d00b      	beq.n	800c9ec <lv_txt_utf8_size+0x2e>
    else if((str[0] & 0xF0) == 0xE0)
 800c9d4:	220f      	movs	r2, #15
 800c9d6:	0019      	movs	r1, r3
        return 3;
 800c9d8:	3001      	adds	r0, #1
    else if((str[0] & 0xF0) == 0xE0)
 800c9da:	4391      	bics	r1, r2
 800c9dc:	29e0      	cmp	r1, #224	; 0xe0
 800c9de:	d005      	beq.n	800c9ec <lv_txt_utf8_size+0x2e>
    else if((str[0] & 0xF8) == 0xF0)
 800c9e0:	2207      	movs	r2, #7
 800c9e2:	4393      	bics	r3, r2
        return 4;
    return 0; /*If the char was invalid tell it's 1 byte long*/
 800c9e4:	3bf0      	subs	r3, #240	; 0xf0
 800c9e6:	4258      	negs	r0, r3
 800c9e8:	4158      	adcs	r0, r3
 800c9ea:	0080      	lsls	r0, r0, #2
}
 800c9ec:	4770      	bx	lr

0800c9ee <lv_txt_utf8_next>:
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 800c9ee:	2300      	movs	r3, #0
{
 800c9f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t i_tmp = 0;
 800c9f2:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
 800c9f4:	4299      	cmp	r1, r3
 800c9f6:	d100      	bne.n	800c9fa <lv_txt_utf8_next+0xc>
 800c9f8:	a901      	add	r1, sp, #4

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
 800c9fa:	680a      	ldr	r2, [r1, #0]
 800c9fc:	5c84      	ldrb	r4, [r0, r2]
 800c9fe:	1c53      	adds	r3, r2, #1
 800ca00:	b265      	sxtb	r5, r4
 800ca02:	2d00      	cmp	r5, #0
 800ca04:	db02      	blt.n	800ca0c <lv_txt_utf8_next+0x1e>
        result = txt[*i];
 800ca06:	0020      	movs	r0, r4
        (*i)++;
 800ca08:	600b      	str	r3, [r1, #0]
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
 800ca0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if((txt[*i] & 0xE0) == 0xC0) {
 800ca0c:	251f      	movs	r5, #31
 800ca0e:	0026      	movs	r6, r4
 800ca10:	43ae      	bics	r6, r5
 800ca12:	0035      	movs	r5, r6
 800ca14:	2ec0      	cmp	r6, #192	; 0xc0
 800ca16:	d111      	bne.n	800ca3c <lv_txt_utf8_next+0x4e>
            (*i)++;
 800ca18:	600b      	str	r3, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800ca1a:	5cc3      	ldrb	r3, [r0, r3]
 800ca1c:	3d81      	subs	r5, #129	; 0x81
 800ca1e:	0018      	movs	r0, r3
 800ca20:	43a8      	bics	r0, r5
 800ca22:	2880      	cmp	r0, #128	; 0x80
 800ca24:	d001      	beq.n	800ca2a <lv_txt_utf8_next+0x3c>
    uint32_t result = 0;
 800ca26:	2000      	movs	r0, #0
 800ca28:	e7ef      	b.n	800ca0a <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 800ca2a:	01a0      	lsls	r0, r4, #6
 800ca2c:	24f8      	movs	r4, #248	; 0xf8
 800ca2e:	00e4      	lsls	r4, r4, #3
 800ca30:	4004      	ands	r4, r0
            result += (txt[*i] & 0x3F);
 800ca32:	402b      	ands	r3, r5
 800ca34:	1918      	adds	r0, r3, r4
            (*i)++;
 800ca36:	3202      	adds	r2, #2
            (*i)++;
 800ca38:	600a      	str	r2, [r1, #0]
 800ca3a:	e7e6      	b.n	800ca0a <lv_txt_utf8_next+0x1c>
        else if((txt[*i] & 0xF0) == 0xE0) {
 800ca3c:	250f      	movs	r5, #15
 800ca3e:	0026      	movs	r6, r4
 800ca40:	43ae      	bics	r6, r5
 800ca42:	2ee0      	cmp	r6, #224	; 0xe0
 800ca44:	d119      	bne.n	800ca7a <lv_txt_utf8_next+0x8c>
            (*i)++;
 800ca46:	600b      	str	r3, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800ca48:	5cc3      	ldrb	r3, [r0, r3]
 800ca4a:	263f      	movs	r6, #63	; 0x3f
 800ca4c:	001d      	movs	r5, r3
 800ca4e:	43b5      	bics	r5, r6
 800ca50:	2d80      	cmp	r5, #128	; 0x80
 800ca52:	d1e8      	bne.n	800ca26 <lv_txt_utf8_next+0x38>
            (*i)++;
 800ca54:	1c95      	adds	r5, r2, #2
 800ca56:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800ca58:	5d45      	ldrb	r5, [r0, r5]
 800ca5a:	0028      	movs	r0, r5
 800ca5c:	43b0      	bics	r0, r6
 800ca5e:	2880      	cmp	r0, #128	; 0x80
 800ca60:	d1e1      	bne.n	800ca26 <lv_txt_utf8_next+0x38>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 800ca62:	0720      	lsls	r0, r4, #28
            result += (txt[*i] & 0x3F);
 800ca64:	002c      	movs	r4, r5
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 800ca66:	0c00      	lsrs	r0, r0, #16
            result += (txt[*i] & 0x3F);
 800ca68:	4034      	ands	r4, r6
 800ca6a:	1904      	adds	r4, r0, r4
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 800ca6c:	0198      	lsls	r0, r3, #6
 800ca6e:	23fc      	movs	r3, #252	; 0xfc
 800ca70:	011b      	lsls	r3, r3, #4
 800ca72:	4018      	ands	r0, r3
            result += (txt[*i] & 0x3F);
 800ca74:	1900      	adds	r0, r0, r4
            (*i)++;
 800ca76:	3203      	adds	r2, #3
 800ca78:	e7de      	b.n	800ca38 <lv_txt_utf8_next+0x4a>
        else if((txt[*i] & 0xF8) == 0xF0) {
 800ca7a:	2507      	movs	r5, #7
 800ca7c:	0026      	movs	r6, r4
            (*i)++;
 800ca7e:	600b      	str	r3, [r1, #0]
        else if((txt[*i] & 0xF8) == 0xF0) {
 800ca80:	43ae      	bics	r6, r5
 800ca82:	2ef0      	cmp	r6, #240	; 0xf0
 800ca84:	d1cf      	bne.n	800ca26 <lv_txt_utf8_next+0x38>
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800ca86:	5cc7      	ldrb	r7, [r0, r3]
 800ca88:	263f      	movs	r6, #63	; 0x3f
 800ca8a:	003b      	movs	r3, r7
 800ca8c:	43b3      	bics	r3, r6
 800ca8e:	2b80      	cmp	r3, #128	; 0x80
 800ca90:	d1c9      	bne.n	800ca26 <lv_txt_utf8_next+0x38>
            (*i)++;
 800ca92:	1c93      	adds	r3, r2, #2
 800ca94:	600b      	str	r3, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800ca96:	5cc3      	ldrb	r3, [r0, r3]
 800ca98:	001d      	movs	r5, r3
 800ca9a:	43b5      	bics	r5, r6
 800ca9c:	2d80      	cmp	r5, #128	; 0x80
 800ca9e:	d1c2      	bne.n	800ca26 <lv_txt_utf8_next+0x38>
            (*i)++;
 800caa0:	1cd5      	adds	r5, r2, #3
 800caa2:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800caa4:	5d45      	ldrb	r5, [r0, r5]
 800caa6:	0028      	movs	r0, r5
 800caa8:	43b0      	bics	r0, r6
 800caaa:	2880      	cmp	r0, #128	; 0x80
 800caac:	d1bb      	bne.n	800ca26 <lv_txt_utf8_next+0x38>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 800caae:	20e0      	movs	r0, #224	; 0xe0
 800cab0:	04a4      	lsls	r4, r4, #18
 800cab2:	0340      	lsls	r0, r0, #13
 800cab4:	4004      	ands	r4, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 800cab6:	20fc      	movs	r0, #252	; 0xfc
 800cab8:	033f      	lsls	r7, r7, #12
 800caba:	0280      	lsls	r0, r0, #10
 800cabc:	4038      	ands	r0, r7
 800cabe:	4304      	orrs	r4, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 800cac0:	20fc      	movs	r0, #252	; 0xfc
 800cac2:	019b      	lsls	r3, r3, #6
 800cac4:	0100      	lsls	r0, r0, #4
 800cac6:	4018      	ands	r0, r3
            result += txt[*i] & 0x3F;
 800cac8:	4035      	ands	r5, r6
 800caca:	1940      	adds	r0, r0, r5
 800cacc:	1900      	adds	r0, r0, r4
            (*i)++;
 800cace:	3204      	adds	r2, #4
 800cad0:	e7b2      	b.n	800ca38 <lv_txt_utf8_next+0x4a>
	...

0800cad4 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 800cad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
 800cad6:	2400      	movs	r4, #0
{
 800cad8:	0006      	movs	r6, r0
    for(i = 0; i < utf8_id; i++) {
 800cada:	0025      	movs	r5, r4
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
        byte_cnt += c_size > 0 ? c_size : 1;
 800cadc:	2701      	movs	r7, #1
{
 800cade:	9101      	str	r1, [sp, #4]
    for(i = 0; i < utf8_id; i++) {
 800cae0:	9b01      	ldr	r3, [sp, #4]
 800cae2:	429d      	cmp	r5, r3
 800cae4:	d101      	bne.n	800caea <lv_txt_utf8_get_byte_id+0x16>
    }

    return byte_cnt;
}
 800cae6:	0020      	movs	r0, r4
 800cae8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 800caea:	4b05      	ldr	r3, [pc, #20]	; (800cb00 <lv_txt_utf8_get_byte_id+0x2c>)
 800caec:	1930      	adds	r0, r6, r4
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	4798      	blx	r3
        byte_cnt += c_size > 0 ? c_size : 1;
 800caf2:	2800      	cmp	r0, #0
 800caf4:	d100      	bne.n	800caf8 <lv_txt_utf8_get_byte_id+0x24>
 800caf6:	0038      	movs	r0, r7
 800caf8:	1824      	adds	r4, r4, r0
    for(i = 0; i < utf8_id; i++) {
 800cafa:	3501      	adds	r5, #1
 800cafc:	e7f0      	b.n	800cae0 <lv_txt_utf8_get_byte_id+0xc>
 800cafe:	46c0      	nop			; (mov r8, r8)
 800cb00:	2000005c 	.word	0x2000005c

0800cb04 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 800cb04:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t i        = 0;
 800cb06:	2400      	movs	r4, #0
{
 800cb08:	0006      	movs	r6, r0
 800cb0a:	000d      	movs	r5, r1
    uint32_t i        = 0;
 800cb0c:	9401      	str	r4, [sp, #4]
    uint32_t char_cnt = 0;

    while(i < byte_id) {
 800cb0e:	9b01      	ldr	r3, [sp, #4]
 800cb10:	42ab      	cmp	r3, r5
 800cb12:	d301      	bcc.n	800cb18 <lv_txt_utf8_get_char_id+0x14>
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
        char_cnt++;
    }

    return char_cnt;
}
 800cb14:	0020      	movs	r0, r4
 800cb16:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 800cb18:	4b03      	ldr	r3, [pc, #12]	; (800cb28 <lv_txt_utf8_get_char_id+0x24>)
 800cb1a:	a901      	add	r1, sp, #4
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	0030      	movs	r0, r6
 800cb20:	4798      	blx	r3
        char_cnt++;
 800cb22:	3401      	adds	r4, #1
 800cb24:	e7f3      	b.n	800cb0e <lv_txt_utf8_get_char_id+0xa>
 800cb26:	46c0      	nop			; (mov r8, r8)
 800cb28:	20000054 	.word	0x20000054

0800cb2c <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 800cb2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t len = 0;
    uint32_t i   = 0;
 800cb2e:	2400      	movs	r4, #0
{
 800cb30:	0005      	movs	r5, r0
    uint32_t i   = 0;
 800cb32:	9401      	str	r4, [sp, #4]

    while(txt[i] != '\0') {
 800cb34:	9b01      	ldr	r3, [sp, #4]
 800cb36:	5ceb      	ldrb	r3, [r5, r3]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d101      	bne.n	800cb40 <lv_txt_utf8_get_length+0x14>
        _lv_txt_encoded_next(txt, &i);
        len++;
    }

    return len;
}
 800cb3c:	0020      	movs	r0, r4
 800cb3e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        _lv_txt_encoded_next(txt, &i);
 800cb40:	4b03      	ldr	r3, [pc, #12]	; (800cb50 <lv_txt_utf8_get_length+0x24>)
 800cb42:	a901      	add	r1, sp, #4
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	0028      	movs	r0, r5
 800cb48:	4798      	blx	r3
        len++;
 800cb4a:	3401      	adds	r4, #1
 800cb4c:	e7f2      	b.n	800cb34 <lv_txt_utf8_get_length+0x8>
 800cb4e:	46c0      	nop			; (mov r8, r8)
 800cb50:	20000054 	.word	0x20000054

0800cb54 <lv_txt_utf8_prev>:
{
 800cb54:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb56:	0006      	movs	r6, r0
 800cb58:	000d      	movs	r5, r1
    (*i)--;
 800cb5a:	2404      	movs	r4, #4
 800cb5c:	680b      	ldr	r3, [r1, #0]
 800cb5e:	3b01      	subs	r3, #1
 800cb60:	600b      	str	r3, [r1, #0]
        c_size = _lv_txt_encoded_size(&txt[*i]);
 800cb62:	682b      	ldr	r3, [r5, #0]
 800cb64:	18f0      	adds	r0, r6, r3
 800cb66:	4b0b      	ldr	r3, [pc, #44]	; (800cb94 <lv_txt_utf8_prev+0x40>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	4798      	blx	r3
 800cb6c:	682b      	ldr	r3, [r5, #0]
        if(c_size == 0) {
 800cb6e:	2800      	cmp	r0, #0
 800cb70:	d109      	bne.n	800cb86 <lv_txt_utf8_prev+0x32>
            if(*i != 0)
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d005      	beq.n	800cb82 <lv_txt_utf8_prev+0x2e>
 800cb76:	3c01      	subs	r4, #1
                (*i)--;
 800cb78:	3b01      	subs	r3, #1
 800cb7a:	b2e4      	uxtb	r4, r4
 800cb7c:	602b      	str	r3, [r5, #0]
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 800cb7e:	2c00      	cmp	r4, #0
 800cb80:	d1ef      	bne.n	800cb62 <lv_txt_utf8_prev+0xe>
 800cb82:	2000      	movs	r0, #0
}
 800cb84:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    uint32_t i_tmp  = *i;
 800cb86:	9301      	str	r3, [sp, #4]
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 800cb88:	4b03      	ldr	r3, [pc, #12]	; (800cb98 <lv_txt_utf8_prev+0x44>)
 800cb8a:	a901      	add	r1, sp, #4
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	0030      	movs	r0, r6
 800cb90:	4798      	blx	r3
 800cb92:	e7f7      	b.n	800cb84 <lv_txt_utf8_prev+0x30>
 800cb94:	2000005c 	.word	0x2000005c
 800cb98:	20000054 	.word	0x20000054

0800cb9c <_lv_txt_is_cmd>:
{
 800cb9c:	0002      	movs	r2, r0
    bool ret = false;
 800cb9e:	2000      	movs	r0, #0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800cba0:	2923      	cmp	r1, #35	; 0x23
 800cba2:	d104      	bne.n	800cbae <_lv_txt_is_cmd+0x12>
 800cba4:	7813      	ldrb	r3, [r2, #0]
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 800cba6:	4283      	cmp	r3, r0
 800cba8:	d10a      	bne.n	800cbc0 <_lv_txt_is_cmd+0x24>
            *state = LV_TXT_CMD_STATE_PAR;
 800cbaa:	3001      	adds	r0, #1
            *state = LV_TXT_CMD_STATE_WAIT;
 800cbac:	7010      	strb	r0, [r2, #0]
    if(*state == LV_TXT_CMD_STATE_PAR) {
 800cbae:	7813      	ldrb	r3, [r2, #0]
 800cbb0:	2b01      	cmp	r3, #1
 800cbb2:	d104      	bne.n	800cbbe <_lv_txt_is_cmd+0x22>
        ret = true;
 800cbb4:	0018      	movs	r0, r3
        if(c == ' ') {
 800cbb6:	2920      	cmp	r1, #32
 800cbb8:	d101      	bne.n	800cbbe <_lv_txt_is_cmd+0x22>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 800cbba:	3301      	adds	r3, #1
 800cbbc:	7013      	strb	r3, [r2, #0]
}
 800cbbe:	4770      	bx	lr
        else if(*state == LV_TXT_CMD_STATE_PAR) {
 800cbc0:	2b01      	cmp	r3, #1
 800cbc2:	d0f3      	beq.n	800cbac <_lv_txt_is_cmd+0x10>
        else if(*state == LV_TXT_CMD_STATE_IN) {
 800cbc4:	2b02      	cmp	r3, #2
 800cbc6:	d1f2      	bne.n	800cbae <_lv_txt_is_cmd+0x12>
            *state = LV_TXT_CMD_STATE_WAIT;
 800cbc8:	7010      	strb	r0, [r2, #0]
            ret    = true;
 800cbca:	2001      	movs	r0, #1
 800cbcc:	e7ef      	b.n	800cbae <_lv_txt_is_cmd+0x12>
	...

0800cbd0 <_lv_txt_get_width>:
{
 800cbd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbd2:	b087      	sub	sp, #28
 800cbd4:	9302      	str	r3, [sp, #8]
 800cbd6:	ab0c      	add	r3, sp, #48	; 0x30
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	0005      	movs	r5, r0
 800cbdc:	9101      	str	r1, [sp, #4]
 800cbde:	0016      	movs	r6, r2
 800cbe0:	9303      	str	r3, [sp, #12]
    if(txt == NULL) return 0;
 800cbe2:	1e04      	subs	r4, r0, #0
 800cbe4:	d00a      	beq.n	800cbfc <_lv_txt_get_width+0x2c>
 800cbe6:	1e14      	subs	r4, r2, #0
    if(font == NULL) return 0;
 800cbe8:	d008      	beq.n	800cbfc <_lv_txt_get_width+0x2c>
    if(txt == NULL) return 0;
 800cbea:	2400      	movs	r4, #0
    if(txt[0] == '\0') return 0;
 800cbec:	7803      	ldrb	r3, [r0, #0]
 800cbee:	42a3      	cmp	r3, r4
 800cbf0:	d004      	beq.n	800cbfc <_lv_txt_get_width+0x2c>
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 800cbf2:	ab04      	add	r3, sp, #16
    uint32_t i                   = 0;
 800cbf4:	9405      	str	r4, [sp, #20]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 800cbf6:	70dc      	strb	r4, [r3, #3]
    if(length != 0) {
 800cbf8:	42a1      	cmp	r1, r4
 800cbfa:	d11a      	bne.n	800cc32 <_lv_txt_get_width+0x62>
}
 800cbfc:	0020      	movs	r0, r4
 800cbfe:	b007      	add	sp, #28
 800cc00:	bdf0      	pop	{r4, r5, r6, r7, pc}
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
 800cc02:	4f17      	ldr	r7, [pc, #92]	; (800cc60 <_lv_txt_get_width+0x90>)
 800cc04:	a905      	add	r1, sp, #20
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	0028      	movs	r0, r5
 800cc0a:	4798      	blx	r3
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
 800cc0c:	9b05      	ldr	r3, [sp, #20]
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
 800cc0e:	9000      	str	r0, [sp, #0]
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
 800cc10:	2100      	movs	r1, #0
 800cc12:	18e8      	adds	r0, r5, r3
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	4798      	blx	r3
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800cc18:	2201      	movs	r2, #1
 800cc1a:	9b03      	ldr	r3, [sp, #12]
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
 800cc1c:	0007      	movs	r7, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800cc1e:	4213      	tst	r3, r2
 800cc20:	d111      	bne.n	800cc46 <_lv_txt_get_width+0x76>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 800cc22:	003a      	movs	r2, r7
 800cc24:	9900      	ldr	r1, [sp, #0]
 800cc26:	0030      	movs	r0, r6
 800cc28:	f7fe fa04 	bl	800b034 <lv_font_get_glyph_width>
            if(char_width > 0) {
 800cc2c:	b203      	sxth	r3, r0
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	dc11      	bgt.n	800cc56 <_lv_txt_get_width+0x86>
        while(i < length) {
 800cc32:	9b01      	ldr	r3, [sp, #4]
 800cc34:	9a05      	ldr	r2, [sp, #20]
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d8e3      	bhi.n	800cc02 <_lv_txt_get_width+0x32>
        if(width > 0) {
 800cc3a:	2c00      	cmp	r4, #0
 800cc3c:	ddde      	ble.n	800cbfc <_lv_txt_get_width+0x2c>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 800cc3e:	9b02      	ldr	r3, [sp, #8]
 800cc40:	1ae4      	subs	r4, r4, r3
 800cc42:	b224      	sxth	r4, r4
 800cc44:	e7da      	b.n	800cbfc <_lv_txt_get_width+0x2c>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
 800cc46:	ab04      	add	r3, sp, #16
 800cc48:	9900      	ldr	r1, [sp, #0]
 800cc4a:	1cd8      	adds	r0, r3, #3
 800cc4c:	f7ff ffa6 	bl	800cb9c <_lv_txt_is_cmd>
 800cc50:	2800      	cmp	r0, #0
 800cc52:	d0e6      	beq.n	800cc22 <_lv_txt_get_width+0x52>
 800cc54:	e7ed      	b.n	800cc32 <_lv_txt_get_width+0x62>
                width += letter_space;
 800cc56:	9b02      	ldr	r3, [sp, #8]
 800cc58:	18e4      	adds	r4, r4, r3
 800cc5a:	1904      	adds	r4, r0, r4
 800cc5c:	b224      	sxth	r4, r4
 800cc5e:	e7e8      	b.n	800cc32 <_lv_txt_get_width+0x62>
 800cc60:	20000054 	.word	0x20000054

0800cc64 <_lv_txt_get_next_line>:
{
 800cc64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc66:	b093      	sub	sp, #76	; 0x4c
 800cc68:	9303      	str	r3, [sp, #12]
 800cc6a:	ab18      	add	r3, sp, #96	; 0x60
 800cc6c:	781b      	ldrb	r3, [r3, #0]
 800cc6e:	1e06      	subs	r6, r0, #0
 800cc70:	9107      	str	r1, [sp, #28]
 800cc72:	920c      	str	r2, [sp, #48]	; 0x30
 800cc74:	9308      	str	r3, [sp, #32]
    if(txt == NULL) return 0;
 800cc76:	d011      	beq.n	800cc9c <_lv_txt_get_next_line+0x38>
 800cc78:	1e08      	subs	r0, r1, #0
    if(font == NULL) return 0;
 800cc7a:	d00f      	beq.n	800cc9c <_lv_txt_get_next_line+0x38>
    if((flag & LV_TXT_FLAG_EXPAND) || (flag & LV_TXT_FLAG_FIT)) {
 800cc7c:	2312      	movs	r3, #18
 800cc7e:	9a08      	ldr	r2, [sp, #32]
 800cc80:	421a      	tst	r2, r3
 800cc82:	d00d      	beq.n	800cca0 <_lv_txt_get_next_line+0x3c>
 800cc84:	0033      	movs	r3, r6
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 800cc86:	781a      	ldrb	r2, [r3, #0]
 800cc88:	1b98      	subs	r0, r3, r6
 800cc8a:	2a0a      	cmp	r2, #10
 800cc8c:	d100      	bne.n	800cc90 <_lv_txt_get_next_line+0x2c>
 800cc8e:	e0c4      	b.n	800ce1a <_lv_txt_get_next_line+0x1b6>
 800cc90:	2a0d      	cmp	r2, #13
 800cc92:	d100      	bne.n	800cc96 <_lv_txt_get_next_line+0x32>
 800cc94:	e0c1      	b.n	800ce1a <_lv_txt_get_next_line+0x1b6>
 800cc96:	3301      	adds	r3, #1
 800cc98:	2a00      	cmp	r2, #0
 800cc9a:	d1f4      	bne.n	800cc86 <_lv_txt_get_next_line+0x22>
}
 800cc9c:	b013      	add	sp, #76	; 0x4c
 800cc9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cca0:	2302      	movs	r3, #2
 800cca2:	9a08      	ldr	r2, [sp, #32]
 800cca4:	401a      	ands	r2, r3
 800cca6:	9209      	str	r2, [sp, #36]	; 0x24
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 800cca8:	d001      	beq.n	800ccae <_lv_txt_get_next_line+0x4a>
 800ccaa:	4b5d      	ldr	r3, [pc, #372]	; (800ce20 <_lv_txt_get_next_line+0x1bc>)
 800ccac:	9303      	str	r3, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	aa0e      	add	r2, sp, #56	; 0x38
 800ccb2:	70d3      	strb	r3, [r2, #3]
    uint32_t i = 0;                                        /* Iterating index into txt */
 800ccb4:	930f      	str	r3, [sp, #60]	; 0x3c
    while(txt[i] != '\0' && max_width > 0) {
 800ccb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ccb8:	930a      	str	r3, [sp, #40]	; 0x28
 800ccba:	18f3      	adds	r3, r6, r3
 800ccbc:	9304      	str	r3, [sp, #16]
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d100      	bne.n	800ccc6 <_lv_txt_get_next_line+0x62>
 800ccc4:	e08f      	b.n	800cde6 <_lv_txt_get_next_line+0x182>
 800ccc6:	9b03      	ldr	r3, [sp, #12]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	dc00      	bgt.n	800ccce <_lv_txt_get_next_line+0x6a>
 800cccc:	e08b      	b.n	800cde6 <_lv_txt_get_next_line+0x182>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 800ccce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d121      	bne.n	800cd18 <_lv_txt_get_next_line+0xb4>
 800ccd4:	9b03      	ldr	r3, [sp, #12]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
 800ccd6:	2500      	movs	r5, #0
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 800ccd8:	930b      	str	r3, [sp, #44]	; 0x2c
    letter = _lv_txt_encoded_next(txt, &i_next);
 800ccda:	4b52      	ldr	r3, [pc, #328]	; (800ce24 <_lv_txt_get_next_line+0x1c0>)
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
 800ccdc:	9510      	str	r5, [sp, #64]	; 0x40
    letter = _lv_txt_encoded_next(txt, &i_next);
 800ccde:	681b      	ldr	r3, [r3, #0]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
 800cce0:	9511      	str	r5, [sp, #68]	; 0x44
    letter = _lv_txt_encoded_next(txt, &i_next);
 800cce2:	a910      	add	r1, sp, #64	; 0x40
 800cce4:	9804      	ldr	r0, [sp, #16]
 800cce6:	4798      	blx	r3
    i_next_next = i_next;
 800cce8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    letter = _lv_txt_encoded_next(txt, &i_next);
 800ccea:	0007      	movs	r7, r0
    i_next_next = i_next;
 800ccec:	9311      	str	r3, [sp, #68]	; 0x44
    uint32_t break_index = NO_BREAK_FOUND; /* only used for "long" words */
 800ccee:	2301      	movs	r3, #1
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
 800ccf0:	002c      	movs	r4, r5
    uint32_t break_index = NO_BREAK_FOUND; /* only used for "long" words */
 800ccf2:	425b      	negs	r3, r3
 800ccf4:	9301      	str	r3, [sp, #4]
    uint32_t word_len = 0;   /* Number of characters in the transversed word */
 800ccf6:	9506      	str	r5, [sp, #24]
    lv_coord_t cur_w = 0;  /* Pixel Width of transversed string */
 800ccf8:	9502      	str	r5, [sp, #8]
    uint32_t letter_next = 0; /* Letter at i_next */
 800ccfa:	9505      	str	r5, [sp, #20]
    while(txt[i] != '\0') {
 800ccfc:	9b04      	ldr	r3, [sp, #16]
 800ccfe:	5d1b      	ldrb	r3, [r3, r4]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d10b      	bne.n	800cd1c <_lv_txt_get_next_line+0xb8>
    if(break_index == NO_BREAK_FOUND) {
 800cd04:	9b01      	ldr	r3, [sp, #4]
 800cd06:	3301      	adds	r3, #1
 800cd08:	d056      	beq.n	800cdb8 <_lv_txt_get_next_line+0x154>
    if(force) return break_index;
 800cd0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd0c:	9c01      	ldr	r4, [sp, #4]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d05b      	beq.n	800cdca <_lv_txt_get_next_line+0x166>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /* Return no word */
 800cd12:	2500      	movs	r5, #0
    return 0;
 800cd14:	002c      	movs	r4, r5
 800cd16:	e058      	b.n	800cdca <_lv_txt_get_next_line+0x166>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 800cd18:	4b41      	ldr	r3, [pc, #260]	; (800ce20 <_lv_txt_get_next_line+0x1bc>)
 800cd1a:	e7dc      	b.n	800ccd6 <_lv_txt_get_next_line+0x72>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 800cd1c:	4b41      	ldr	r3, [pc, #260]	; (800ce24 <_lv_txt_get_next_line+0x1c0>)
 800cd1e:	a911      	add	r1, sp, #68	; 0x44
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	9804      	ldr	r0, [sp, #16]
 800cd24:	4798      	blx	r3
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800cd26:	2201      	movs	r2, #1
        word_len++;
 800cd28:	9b06      	ldr	r3, [sp, #24]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 800cd2a:	9005      	str	r0, [sp, #20]
        word_len++;
 800cd2c:	3301      	adds	r3, #1
 800cd2e:	930d      	str	r3, [sp, #52]	; 0x34
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800cd30:	9b08      	ldr	r3, [sp, #32]
 800cd32:	4213      	tst	r3, r2
 800cd34:	d00d      	beq.n	800cd52 <_lv_txt_get_next_line+0xee>
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
 800cd36:	ab0e      	add	r3, sp, #56	; 0x38
 800cd38:	0039      	movs	r1, r7
 800cd3a:	1cd8      	adds	r0, r3, #3
 800cd3c:	f7ff ff2e 	bl	800cb9c <_lv_txt_is_cmd>
 800cd40:	2800      	cmp	r0, #0
 800cd42:	d006      	beq.n	800cd52 <_lv_txt_get_next_line+0xee>
        i_next = i_next_next;
 800cd44:	9b11      	ldr	r3, [sp, #68]	; 0x44
        i = i_next;
 800cd46:	9c10      	ldr	r4, [sp, #64]	; 0x40
        i_next = i_next_next;
 800cd48:	9310      	str	r3, [sp, #64]	; 0x40
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 800cd4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd4c:	9f05      	ldr	r7, [sp, #20]
 800cd4e:	9306      	str	r3, [sp, #24]
 800cd50:	e7d4      	b.n	800ccfc <_lv_txt_get_next_line+0x98>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800cd52:	9a05      	ldr	r2, [sp, #20]
 800cd54:	0039      	movs	r1, r7
 800cd56:	9807      	ldr	r0, [sp, #28]
 800cd58:	f7fe f96c 	bl	800b034 <lv_font_get_glyph_width>
        cur_w += letter_w;
 800cd5c:	9b02      	ldr	r3, [sp, #8]
 800cd5e:	18c3      	adds	r3, r0, r3
        if(letter_w > 0) {
 800cd60:	b200      	sxth	r0, r0
        cur_w += letter_w;
 800cd62:	b29b      	uxth	r3, r3
        if(letter_w > 0) {
 800cd64:	2800      	cmp	r0, #0
 800cd66:	dd02      	ble.n	800cd6e <_lv_txt_get_next_line+0x10a>
            cur_w += letter_space;
 800cd68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd6a:	189b      	adds	r3, r3, r2
 800cd6c:	b29b      	uxth	r3, r3
 800cd6e:	b21b      	sxth	r3, r3
 800cd70:	9302      	str	r3, [sp, #8]
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 800cd72:	9b01      	ldr	r3, [sp, #4]
 800cd74:	3301      	adds	r3, #1
 800cd76:	d106      	bne.n	800cd86 <_lv_txt_get_next_line+0x122>
 800cd78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd7a:	9b02      	ldr	r3, [sp, #8]
 800cd7c:	1a9b      	subs	r3, r3, r2
 800cd7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cd80:	4293      	cmp	r3, r2
 800cd82:	dd00      	ble.n	800cd86 <_lv_txt_get_next_line+0x122>
 800cd84:	9401      	str	r4, [sp, #4]
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
 800cd86:	2f0a      	cmp	r7, #10
 800cd88:	d010      	beq.n	800cdac <_lv_txt_get_next_line+0x148>
 800cd8a:	2f0d      	cmp	r7, #13
 800cd8c:	d00e      	beq.n	800cdac <_lv_txt_get_next_line+0x148>
{
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 800cd8e:	2300      	movs	r3, #0
 800cd90:	4925      	ldr	r1, [pc, #148]	; (800ce28 <_lv_txt_get_next_line+0x1c4>)
 800cd92:	5cca      	ldrb	r2, [r1, r3]
 800cd94:	2a00      	cmp	r2, #0
 800cd96:	d104      	bne.n	800cda2 <_lv_txt_get_next_line+0x13e>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
 800cd98:	9b01      	ldr	r3, [sp, #4]
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	d1d2      	bne.n	800cd44 <_lv_txt_get_next_line+0xe0>
 800cd9e:	9d02      	ldr	r5, [sp, #8]
 800cda0:	e7d0      	b.n	800cd44 <_lv_txt_get_next_line+0xe0>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 800cda2:	4297      	cmp	r7, r2
 800cda4:	d002      	beq.n	800cdac <_lv_txt_get_next_line+0x148>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 800cda6:	3301      	adds	r3, #1
 800cda8:	b2db      	uxtb	r3, r3
 800cdaa:	e7f2      	b.n	800cd92 <_lv_txt_get_next_line+0x12e>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
 800cdac:	2c00      	cmp	r4, #0
 800cdae:	d1a9      	bne.n	800cd04 <_lv_txt_get_next_line+0xa0>
 800cdb0:	9b01      	ldr	r3, [sp, #4]
 800cdb2:	3301      	adds	r3, #1
 800cdb4:	d1a9      	bne.n	800cd0a <_lv_txt_get_next_line+0xa6>
 800cdb6:	9d02      	ldr	r5, [sp, #8]
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 800cdb8:	9b06      	ldr	r3, [sp, #24]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d004      	beq.n	800cdc8 <_lv_txt_get_next_line+0x164>
 800cdbe:	2f0d      	cmp	r7, #13
 800cdc0:	d103      	bne.n	800cdca <_lv_txt_get_next_line+0x166>
 800cdc2:	9b05      	ldr	r3, [sp, #20]
 800cdc4:	2b0a      	cmp	r3, #10
 800cdc6:	d100      	bne.n	800cdca <_lv_txt_get_next_line+0x166>
 800cdc8:	9c10      	ldr	r4, [sp, #64]	; 0x40
        max_width -= word_w;
 800cdca:	9b03      	ldr	r3, [sp, #12]
 800cdcc:	1b5d      	subs	r5, r3, r5
 800cdce:	b22b      	sxth	r3, r5
 800cdd0:	9303      	str	r3, [sp, #12]
 800cdd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        if(advance == 0) {
 800cdd4:	2c00      	cmp	r4, #0
 800cdd6:	d110      	bne.n	800cdfa <_lv_txt_get_next_line+0x196>
            if(i == 0) _lv_txt_encoded_next(txt, &i); // prevent inf loops
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d10c      	bne.n	800cdf6 <_lv_txt_get_next_line+0x192>
 800cddc:	4b11      	ldr	r3, [pc, #68]	; (800ce24 <_lv_txt_get_next_line+0x1c0>)
 800cdde:	a90f      	add	r1, sp, #60	; 0x3c
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	0030      	movs	r0, r6
 800cde4:	4798      	blx	r3
    if(i == 0) {
 800cde6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d104      	bne.n	800cdf6 <_lv_txt_get_next_line+0x192>
        _lv_txt_encoded_next(txt, &i);
 800cdec:	4b0d      	ldr	r3, [pc, #52]	; (800ce24 <_lv_txt_get_next_line+0x1c0>)
 800cdee:	a90f      	add	r1, sp, #60	; 0x3c
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	0030      	movs	r0, r6
 800cdf4:	4798      	blx	r3
    return i;
 800cdf6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800cdf8:	e750      	b.n	800cc9c <_lv_txt_get_next_line+0x38>
        i += advance;
 800cdfa:	18e4      	adds	r4, r4, r3
        if(txt[0] == '\n' || txt[0] == '\r') break;
 800cdfc:	7833      	ldrb	r3, [r6, #0]
        i += advance;
 800cdfe:	940f      	str	r4, [sp, #60]	; 0x3c
        if(txt[0] == '\n' || txt[0] == '\r') break;
 800ce00:	2b0a      	cmp	r3, #10
 800ce02:	d0f0      	beq.n	800cde6 <_lv_txt_get_next_line+0x182>
 800ce04:	2b0d      	cmp	r3, #13
 800ce06:	d0ee      	beq.n	800cde6 <_lv_txt_get_next_line+0x182>
        if(txt[i] == '\n' || txt[i] == '\r') {
 800ce08:	5d33      	ldrb	r3, [r6, r4]
 800ce0a:	2b0a      	cmp	r3, #10
 800ce0c:	d002      	beq.n	800ce14 <_lv_txt_get_next_line+0x1b0>
 800ce0e:	2b0d      	cmp	r3, #13
 800ce10:	d000      	beq.n	800ce14 <_lv_txt_get_next_line+0x1b0>
 800ce12:	e750      	b.n	800ccb6 <_lv_txt_get_next_line+0x52>
            i++;  /* Include the following newline in the current line */
 800ce14:	3401      	adds	r4, #1
 800ce16:	940f      	str	r4, [sp, #60]	; 0x3c
 800ce18:	e7e5      	b.n	800cde6 <_lv_txt_get_next_line+0x182>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
 800ce1a:	3001      	adds	r0, #1
 800ce1c:	e73e      	b.n	800cc9c <_lv_txt_get_next_line+0x38>
 800ce1e:	46c0      	nop			; (mov r8, r8)
 800ce20:	00007c18 	.word	0x00007c18
 800ce24:	20000054 	.word	0x20000054
 800ce28:	08012878 	.word	0x08012878

0800ce2c <_lv_txt_get_size>:
{
 800ce2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce2e:	b08b      	sub	sp, #44	; 0x2c
 800ce30:	9308      	str	r3, [sp, #32]
 800ce32:	ab10      	add	r3, sp, #64	; 0x40
 800ce34:	0016      	movs	r6, r2
 800ce36:	2200      	movs	r2, #0
 800ce38:	5e9b      	ldrsh	r3, [r3, r2]
 800ce3a:	0004      	movs	r4, r0
 800ce3c:	9303      	str	r3, [sp, #12]
 800ce3e:	ab11      	add	r3, sp, #68	; 0x44
 800ce40:	2200      	movs	r2, #0
 800ce42:	5e9b      	ldrsh	r3, [r3, r2]
 800ce44:	9107      	str	r1, [sp, #28]
 800ce46:	9309      	str	r3, [sp, #36]	; 0x24
 800ce48:	ab12      	add	r3, sp, #72	; 0x48
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	9304      	str	r3, [sp, #16]
    size_res->x = 0;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	8003      	strh	r3, [r0, #0]
    size_res->y = 0;
 800ce52:	8043      	strh	r3, [r0, #2]
    if(text == NULL) return;
 800ce54:	2900      	cmp	r1, #0
 800ce56:	d027      	beq.n	800cea8 <_lv_txt_get_size+0x7c>
    if(font == NULL) return;
 800ce58:	2e00      	cmp	r6, #0
 800ce5a:	d025      	beq.n	800cea8 <_lv_txt_get_size+0x7c>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 800ce5c:	9b04      	ldr	r3, [sp, #16]
 800ce5e:	079b      	lsls	r3, r3, #30
 800ce60:	d501      	bpl.n	800ce66 <_lv_txt_get_size+0x3a>
 800ce62:	4b25      	ldr	r3, [pc, #148]	; (800cef8 <_lv_txt_get_size+0xcc>)
 800ce64:	9309      	str	r3, [sp, #36]	; 0x24
    uint16_t letter_height = lv_font_get_line_height(font);
 800ce66:	2208      	movs	r2, #8
 800ce68:	5eb3      	ldrsh	r3, [r6, r2]
    uint32_t line_start     = 0;
 800ce6a:	2700      	movs	r7, #0
    uint16_t letter_height = lv_font_get_line_height(font);
 800ce6c:	9306      	str	r3, [sp, #24]
 800ce6e:	466b      	mov	r3, sp
 800ce70:	8b1b      	ldrh	r3, [r3, #24]
 800ce72:	9305      	str	r3, [sp, #20]
    while(text[line_start] != '\0') {
 800ce74:	9b07      	ldr	r3, [sp, #28]
 800ce76:	19dd      	adds	r5, r3, r7
 800ce78:	782b      	ldrb	r3, [r5, #0]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d116      	bne.n	800ceac <_lv_txt_get_size+0x80>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 800ce7e:	2f00      	cmp	r7, #0
 800ce80:	d00c      	beq.n	800ce9c <_lv_txt_get_size+0x70>
 800ce82:	3d01      	subs	r5, #1
 800ce84:	782b      	ldrb	r3, [r5, #0]
 800ce86:	2b0a      	cmp	r3, #10
 800ce88:	d001      	beq.n	800ce8e <_lv_txt_get_size+0x62>
 800ce8a:	2b0d      	cmp	r3, #13
 800ce8c:	d106      	bne.n	800ce9c <_lv_txt_get_size+0x70>
        size_res->y += letter_height + line_space;
 800ce8e:	9a03      	ldr	r2, [sp, #12]
 800ce90:	9b05      	ldr	r3, [sp, #20]
 800ce92:	4694      	mov	ip, r2
 800ce94:	8862      	ldrh	r2, [r4, #2]
 800ce96:	4463      	add	r3, ip
 800ce98:	18d3      	adds	r3, r2, r3
 800ce9a:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
 800ce9c:	2202      	movs	r2, #2
 800ce9e:	5ea3      	ldrsh	r3, [r4, r2]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d126      	bne.n	800cef2 <_lv_txt_get_size+0xc6>
        size_res->y = letter_height;
 800cea4:	9b06      	ldr	r3, [sp, #24]
        size_res->y -= line_space;
 800cea6:	8063      	strh	r3, [r4, #2]
}
 800cea8:	b00b      	add	sp, #44	; 0x2c
 800ceaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 800ceac:	9b04      	ldr	r3, [sp, #16]
 800ceae:	9a08      	ldr	r2, [sp, #32]
 800ceb0:	9300      	str	r3, [sp, #0]
 800ceb2:	0031      	movs	r1, r6
 800ceb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceb6:	0028      	movs	r0, r5
 800ceb8:	f7ff fed4 	bl	800cc64 <_lv_txt_get_next_line>
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 800cebc:	2302      	movs	r3, #2
 800cebe:	5ee2      	ldrsh	r2, [r4, r3]
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 800cec0:	0001      	movs	r1, r0
 800cec2:	183f      	adds	r7, r7, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 800cec4:	9b05      	ldr	r3, [sp, #20]
 800cec6:	9803      	ldr	r0, [sp, #12]
 800cec8:	181b      	adds	r3, r3, r0
 800ceca:	189b      	adds	r3, r3, r2
 800cecc:	4a0b      	ldr	r2, [pc, #44]	; (800cefc <_lv_txt_get_size+0xd0>)
 800cece:	4293      	cmp	r3, r2
 800ced0:	d8ea      	bhi.n	800cea8 <_lv_txt_get_size+0x7c>
            size_res->y += line_space;
 800ced2:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = _lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
 800ced4:	9b04      	ldr	r3, [sp, #16]
 800ced6:	0032      	movs	r2, r6
 800ced8:	9300      	str	r3, [sp, #0]
 800ceda:	0028      	movs	r0, r5
 800cedc:	9b08      	ldr	r3, [sp, #32]
 800cede:	f7ff fe77 	bl	800cbd0 <_lv_txt_get_width>
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
 800cee2:	8823      	ldrh	r3, [r4, #0]
 800cee4:	1c1a      	adds	r2, r3, #0
 800cee6:	b21b      	sxth	r3, r3
 800cee8:	4283      	cmp	r3, r0
 800ceea:	da00      	bge.n	800ceee <_lv_txt_get_size+0xc2>
 800ceec:	1c02      	adds	r2, r0, #0
 800ceee:	8022      	strh	r2, [r4, #0]
 800cef0:	e7c0      	b.n	800ce74 <_lv_txt_get_size+0x48>
        size_res->y -= line_space;
 800cef2:	9a03      	ldr	r2, [sp, #12]
 800cef4:	1a9b      	subs	r3, r3, r2
 800cef6:	e7d6      	b.n	800cea6 <_lv_txt_get_size+0x7a>
 800cef8:	00007c18 	.word	0x00007c18
 800cefc:	00007fff 	.word	0x00007fff

0800cf00 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
 800cf00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf02:	000f      	movs	r7, r1
 800cf04:	0015      	movs	r5, r2
 800cf06:	9001      	str	r0, [sp, #4]
 800cf08:	9300      	str	r3, [sp, #0]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 800cf0a:	2d00      	cmp	r5, #0
 800cf0c:	d101      	bne.n	800cf12 <_lv_utils_bsearch+0x12>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
 800cf0e:	002c      	movs	r4, r5
 800cf10:	e012      	b.n	800cf38 <_lv_utils_bsearch+0x38>
        middle += (n / 2) * size;
 800cf12:	9c00      	ldr	r4, [sp, #0]
 800cf14:	086e      	lsrs	r6, r5, #1
 800cf16:	4374      	muls	r4, r6
 800cf18:	193c      	adds	r4, r7, r4
        if((c = (*cmp)(key, middle)) > 0) {
 800cf1a:	0021      	movs	r1, r4
 800cf1c:	9801      	ldr	r0, [sp, #4]
 800cf1e:	9b08      	ldr	r3, [sp, #32]
 800cf20:	4798      	blx	r3
 800cf22:	2800      	cmp	r0, #0
 800cf24:	dd06      	ble.n	800cf34 <_lv_utils_bsearch+0x34>
 800cf26:	2301      	movs	r3, #1
 800cf28:	43ab      	bics	r3, r5
            n    = (n / 2) - ((n & 1) == 0);
 800cf2a:	1af6      	subs	r6, r6, r3
            base = (middle += size);
 800cf2c:	9b00      	ldr	r3, [sp, #0]
 800cf2e:	18e7      	adds	r7, r4, r3
{
 800cf30:	0035      	movs	r5, r6
 800cf32:	e7ea      	b.n	800cf0a <_lv_utils_bsearch+0xa>
        else if(c < 0) {
 800cf34:	2800      	cmp	r0, #0
 800cf36:	d1fb      	bne.n	800cf30 <_lv_utils_bsearch+0x30>
}
 800cf38:	0020      	movs	r0, r4
 800cf3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800cf3c <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
 800cf3c:	b570      	push	{r4, r5, r6, lr}
 800cf3e:	0006      	movs	r6, r0
    if(th->base) {
 800cf40:	6880      	ldr	r0, [r0, #8]
{
 800cf42:	000c      	movs	r4, r1
 800cf44:	0015      	movs	r5, r2
    if(th->base) {
 800cf46:	2800      	cmp	r0, #0
 800cf48:	d001      	beq.n	800cf4e <apply_theme+0x12>
        apply_theme(th->base, obj, name);
 800cf4a:	f7ff fff7 	bl	800cf3c <apply_theme>
    }

    /*apply_xcb is deprecated, use apply_cb instead*/
    if(th->apply_xcb) {
 800cf4e:	6873      	ldr	r3, [r6, #4]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d003      	beq.n	800cf5c <apply_theme+0x20>
        th->apply_xcb(obj, name);
 800cf54:	0029      	movs	r1, r5
 800cf56:	0020      	movs	r0, r4
 800cf58:	4798      	blx	r3
    }
    else if(th->apply_cb) {
        th->apply_cb(act_theme, obj, name);
    }
}
 800cf5a:	bd70      	pop	{r4, r5, r6, pc}
    else if(th->apply_cb) {
 800cf5c:	6833      	ldr	r3, [r6, #0]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d0fb      	beq.n	800cf5a <apply_theme+0x1e>
        th->apply_cb(act_theme, obj, name);
 800cf62:	4803      	ldr	r0, [pc, #12]	; (800cf70 <apply_theme+0x34>)
 800cf64:	002a      	movs	r2, r5
 800cf66:	0021      	movs	r1, r4
 800cf68:	6800      	ldr	r0, [r0, #0]
 800cf6a:	4798      	blx	r3
}
 800cf6c:	e7f5      	b.n	800cf5a <apply_theme+0x1e>
 800cf6e:	46c0      	nop			; (mov r8, r8)
 800cf70:	20006ea8 	.word	0x20006ea8

0800cf74 <lv_theme_set_act>:
    act_theme = th;
 800cf74:	4b01      	ldr	r3, [pc, #4]	; (800cf7c <lv_theme_set_act+0x8>)
 800cf76:	6018      	str	r0, [r3, #0]
}
 800cf78:	4770      	bx	lr
 800cf7a:	46c0      	nop			; (mov r8, r8)
 800cf7c:	20006ea8 	.word	0x20006ea8

0800cf80 <lv_theme_apply>:
{
 800cf80:	b570      	push	{r4, r5, r6, lr}
 800cf82:	0004      	movs	r4, r0

static void clear_styles(lv_obj_t * obj, lv_theme_style_t name)
{
    switch(name) {
 800cf84:	1e48      	subs	r0, r1, #1
{
 800cf86:	000d      	movs	r5, r1
    switch(name) {
 800cf88:	280a      	cmp	r0, #10
 800cf8a:	d80f      	bhi.n	800cfac <lv_theme_apply+0x2c>
            break;
#endif

#if LV_USE_BTNMATRIX
        case LV_THEME_BTNMATRIX:
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BG);
 800cf8c:	2100      	movs	r1, #0
    switch(name) {
 800cf8e:	f7f3 f8d3 	bl	8000138 <__gnu_thumb1_case_uqi>
 800cf92:	0a0a      	.short	0x0a0a
 800cf94:	060a0606 	.word	0x060a0606
 800cf98:	0a0a060a 	.word	0x0a0a060a
 800cf9c:	0a          	.byte	0x0a
 800cf9d:	00          	.byte	0x00
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BG);
 800cf9e:	0020      	movs	r0, r4
 800cfa0:	f7f7 f9cf 	bl	8004342 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BTN);
 800cfa4:	2101      	movs	r1, #1
 800cfa6:	0020      	movs	r0, r4
 800cfa8:	f7f7 f9cb 	bl	8004342 <lv_obj_clean_style_list>
    apply_theme(act_theme, obj, name);
 800cfac:	4b03      	ldr	r3, [pc, #12]	; (800cfbc <lv_theme_apply+0x3c>)
 800cfae:	002a      	movs	r2, r5
 800cfb0:	0021      	movs	r1, r4
 800cfb2:	6818      	ldr	r0, [r3, #0]
 800cfb4:	f7ff ffc2 	bl	800cf3c <apply_theme>
}
 800cfb8:	bd70      	pop	{r4, r5, r6, pc}
 800cfba:	46c0      	nop			; (mov r8, r8)
 800cfbc:	20006ea8 	.word	0x20006ea8

0800cfc0 <lv_theme_get_font_normal>:
    return act_theme->font_normal;
 800cfc0:	4b01      	ldr	r3, [pc, #4]	; (800cfc8 <lv_theme_get_font_normal+0x8>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	6958      	ldr	r0, [r3, #20]
}
 800cfc6:	4770      	bx	lr
 800cfc8:	20006ea8 	.word	0x20006ea8

0800cfcc <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 800cfcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800cfce:	26ff      	movs	r6, #255	; 0xff
 800cfd0:	271f      	movs	r7, #31
 800cfd2:	0403      	lsls	r3, r0, #16
 800cfd4:	040c      	lsls	r4, r1, #16
 800cfd6:	1ab6      	subs	r6, r6, r2
 800cfd8:	0edb      	lsrs	r3, r3, #27
 800cfda:	0ee4      	lsrs	r4, r4, #27
 800cfdc:	4374      	muls	r4, r6
 800cfde:	4353      	muls	r3, r2
 800cfe0:	4d11      	ldr	r5, [pc, #68]	; (800d028 <lv_color_mix+0x5c>)
 800cfe2:	191b      	adds	r3, r3, r4
 800cfe4:	3380      	adds	r3, #128	; 0x80
 800cfe6:	436b      	muls	r3, r5
 800cfe8:	0ddb      	lsrs	r3, r3, #23
 800cfea:	403b      	ands	r3, r7
 800cfec:	9301      	str	r3, [sp, #4]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800cfee:	054b      	lsls	r3, r1, #21
 800cff0:	0e9b      	lsrs	r3, r3, #26
 800cff2:	4373      	muls	r3, r6
 800cff4:	469c      	mov	ip, r3
 800cff6:	0544      	lsls	r4, r0, #21
 800cff8:	0ea4      	lsrs	r4, r4, #26
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800cffa:	06c0      	lsls	r0, r0, #27
 800cffc:	06c9      	lsls	r1, r1, #27
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800cffe:	4354      	muls	r4, r2
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800d000:	0ec0      	lsrs	r0, r0, #27
 800d002:	0ec9      	lsrs	r1, r1, #27
 800d004:	4371      	muls	r1, r6
 800d006:	4350      	muls	r0, r2
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800d008:	4464      	add	r4, ip
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800d00a:	1840      	adds	r0, r0, r1
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800d00c:	3480      	adds	r4, #128	; 0x80
 800d00e:	436c      	muls	r4, r5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800d010:	3080      	adds	r0, #128	; 0x80
 800d012:	4368      	muls	r0, r5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800d014:	00e4      	lsls	r4, r4, #3
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 800d016:	9b01      	ldr	r3, [sp, #4]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800d018:	0dc0      	lsrs	r0, r0, #23
    return ret;
 800d01a:	0ea4      	lsrs	r4, r4, #26
 800d01c:	4038      	ands	r0, r7
 800d01e:	0164      	lsls	r4, r4, #5
 800d020:	02db      	lsls	r3, r3, #11
 800d022:	4320      	orrs	r0, r4
 800d024:	4318      	orrs	r0, r3
}
 800d026:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d028:	00008081 	.word	0x00008081

0800d02c <lv_color_hex3>:
    return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xFF));
}

static inline lv_color_t lv_color_hex3(uint32_t c)
{
    return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((c & 0xF0) >> 4)),
 800d02c:	b2c2      	uxtb	r2, r0
{
 800d02e:	b530      	push	{r4, r5, lr}
                         (uint8_t)((c & 0xF) | ((c & 0xF) << 4)));
 800d030:	0011      	movs	r1, r2
 800d032:	240f      	movs	r4, #15
    return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((c & 0xF0) >> 4)),
 800d034:	0903      	lsrs	r3, r0, #4
                         (uint8_t)((c & 0xF) | ((c & 0xF) << 4)));
 800d036:	0115      	lsls	r5, r2, #4
    return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((c & 0xF0) >> 4)),
 800d038:	b2db      	uxtb	r3, r3
                         (uint8_t)((c & 0xF) | ((c & 0xF) << 4)));
 800d03a:	4021      	ands	r1, r4
    return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((c & 0xF0) >> 4)),
 800d03c:	4329      	orrs	r1, r5
 800d03e:	001d      	movs	r5, r3
 800d040:	43a2      	bics	r2, r4
 800d042:	4025      	ands	r5, r4
 800d044:	43a3      	bics	r3, r4
 800d046:	0a00      	lsrs	r0, r0, #8
    return LV_COLOR_MAKE(r, g, b);
 800d048:	432a      	orrs	r2, r5
    return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((c & 0xF0) >> 4)),
 800d04a:	4318      	orrs	r0, r3
 800d04c:	0609      	lsls	r1, r1, #24
 800d04e:	0892      	lsrs	r2, r2, #2
    return LV_COLOR_MAKE(r, g, b);
 800d050:	b2c0      	uxtb	r0, r0
 800d052:	0ec9      	lsrs	r1, r1, #27
 800d054:	0152      	lsls	r2, r2, #5
 800d056:	08c0      	lsrs	r0, r0, #3
 800d058:	430a      	orrs	r2, r1
 800d05a:	02c0      	lsls	r0, r0, #11
 800d05c:	4310      	orrs	r0, r2
}
 800d05e:	bd30      	pop	{r4, r5, pc}

0800d060 <theme_apply>:
{
    LV_UNUSED(th);

    lv_style_list_t * list;

    switch(name) {
 800d060:	1e50      	subs	r0, r2, #1
{
 800d062:	b570      	push	{r4, r5, r6, lr}
 800d064:	000c      	movs	r4, r1
    switch(name) {
 800d066:	280a      	cmp	r0, #10
 800d068:	d878      	bhi.n	800d15c <theme_apply+0xfc>
 800d06a:	f7f3 f865 	bl	8000138 <__gnu_thumb1_case_uqi>
 800d06e:	0f06      	.short	0x0f06
 800d070:	1f173b4b 	.word	0x1f173b4b
 800d074:	77777d0f 	.word	0x77777d0f
 800d078:	73          	.byte	0x73
 800d079:	00          	.byte	0x00
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
 800d07a:	2100      	movs	r1, #0
 800d07c:	0020      	movs	r0, r4
 800d07e:	f7f7 f94d 	bl	800431c <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->scr);
 800d082:	4b41      	ldr	r3, [pc, #260]	; (800d188 <theme_apply+0x128>)
 800d084:	6819      	ldr	r1, [r3, #0]
        case LV_THEME_CPICKER:
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_MAIN);
            _lv_style_list_add_style(list, &styles->cpicker_bg);

            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_KNOB);
            _lv_style_list_add_style(list, &styles->cpicker_indic);
 800d086:	f7f9 fb4d 	bl	8006724 <_lv_style_list_add_style>
            break;
 800d08a:	e067      	b.n	800d15c <theme_apply+0xfc>
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
 800d08c:	2100      	movs	r1, #0
 800d08e:	0020      	movs	r0, r4
 800d090:	f7f7 f944 	bl	800431c <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 800d094:	4b3c      	ldr	r3, [pc, #240]	; (800d188 <theme_apply+0x128>)
 800d096:	6819      	ldr	r1, [r3, #0]
 800d098:	3104      	adds	r1, #4
 800d09a:	e7f4      	b.n	800d086 <theme_apply+0x26>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
 800d09c:	2100      	movs	r1, #0
 800d09e:	0020      	movs	r0, r4
 800d0a0:	f7f7 f93c 	bl	800431c <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->btn);
 800d0a4:	4b38      	ldr	r3, [pc, #224]	; (800d188 <theme_apply+0x128>)
 800d0a6:	6819      	ldr	r1, [r3, #0]
 800d0a8:	3110      	adds	r1, #16
 800d0aa:	e7ec      	b.n	800d086 <theme_apply+0x26>
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BG);
 800d0ac:	2100      	movs	r1, #0
 800d0ae:	0020      	movs	r0, r4
 800d0b0:	f7f7 f934 	bl	800431c <lv_obj_get_style_list>
 800d0b4:	0006      	movs	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 800d0b6:	4d34      	ldr	r5, [pc, #208]	; (800d188 <theme_apply+0x128>)
 800d0b8:	682b      	ldr	r3, [r5, #0]
 800d0ba:	1d19      	adds	r1, r3, #4
 800d0bc:	f7f9 fb32 	bl	8006724 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->pad_small);
 800d0c0:	6829      	ldr	r1, [r5, #0]
 800d0c2:	0030      	movs	r0, r6
 800d0c4:	3118      	adds	r1, #24
 800d0c6:	f7f9 fb2d 	bl	8006724 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BTN);
 800d0ca:	2101      	movs	r1, #1
 800d0cc:	0020      	movs	r0, r4
 800d0ce:	f7f7 f925 	bl	800431c <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 800d0d2:	682b      	ldr	r3, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BTN);
 800d0d4:	0006      	movs	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 800d0d6:	1d19      	adds	r1, r3, #4
 800d0d8:	f7f9 fb24 	bl	8006724 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->bg_click);
 800d0dc:	6829      	ldr	r1, [r5, #0]
 800d0de:	3108      	adds	r1, #8
            _lv_style_list_add_style(list, &styles->arc_knob);
 800d0e0:	0030      	movs	r0, r6
 800d0e2:	e7d0      	b.n	800d086 <theme_apply+0x26>
            list = lv_obj_get_style_list(obj, LV_BAR_PART_BG);
 800d0e4:	2100      	movs	r1, #0
 800d0e6:	0020      	movs	r0, r4
 800d0e8:	f7f7 f918 	bl	800431c <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bar_bg);
 800d0ec:	4d26      	ldr	r5, [pc, #152]	; (800d188 <theme_apply+0x128>)
 800d0ee:	6829      	ldr	r1, [r5, #0]
 800d0f0:	3128      	adds	r1, #40	; 0x28
 800d0f2:	f7f9 fb17 	bl	8006724 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_BAR_PART_INDIC);
 800d0f6:	2101      	movs	r1, #1
 800d0f8:	0020      	movs	r0, r4
 800d0fa:	f7f7 f90f 	bl	800431c <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bar_indic);
 800d0fe:	6829      	ldr	r1, [r5, #0]
 800d100:	312c      	adds	r1, #44	; 0x2c
 800d102:	e7c0      	b.n	800d086 <theme_apply+0x26>
            list = lv_obj_get_style_list(obj, LV_ARC_PART_BG);
 800d104:	2100      	movs	r1, #0
 800d106:	0020      	movs	r0, r4
 800d108:	f7f7 f908 	bl	800431c <lv_obj_get_style_list>
 800d10c:	0006      	movs	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 800d10e:	4d1e      	ldr	r5, [pc, #120]	; (800d188 <theme_apply+0x128>)
 800d110:	682b      	ldr	r3, [r5, #0]
 800d112:	1d19      	adds	r1, r3, #4
 800d114:	f7f9 fb06 	bl	8006724 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->arc_bg);
 800d118:	6829      	ldr	r1, [r5, #0]
 800d11a:	0030      	movs	r0, r6
 800d11c:	3120      	adds	r1, #32
 800d11e:	f7f9 fb01 	bl	8006724 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_ARC_PART_INDIC);
 800d122:	2101      	movs	r1, #1
 800d124:	0020      	movs	r0, r4
 800d126:	f7f7 f8f9 	bl	800431c <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->arc_indic);
 800d12a:	6829      	ldr	r1, [r5, #0]
 800d12c:	311c      	adds	r1, #28
 800d12e:	f7f9 faf9 	bl	8006724 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_ARC_PART_KNOB);
 800d132:	2102      	movs	r1, #2
 800d134:	0020      	movs	r0, r4
 800d136:	f7f7 f8f1 	bl	800431c <lv_obj_get_style_list>
 800d13a:	0006      	movs	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 800d13c:	682b      	ldr	r3, [r5, #0]
 800d13e:	1d19      	adds	r1, r3, #4
 800d140:	f7f9 faf0 	bl	8006724 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->bg_click);
 800d144:	6829      	ldr	r1, [r5, #0]
 800d146:	0030      	movs	r0, r6
 800d148:	3108      	adds	r1, #8
 800d14a:	f7f9 faeb 	bl	8006724 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->arc_knob);
 800d14e:	6829      	ldr	r1, [r5, #0]
 800d150:	3124      	adds	r1, #36	; 0x24
 800d152:	e7c5      	b.n	800d0e0 <theme_apply+0x80>
            list = lv_obj_get_style_list(obj, LV_OBJMASK_PART_MAIN);
 800d154:	2100      	movs	r1, #0
 800d156:	0020      	movs	r0, r4
 800d158:	f7f7 f8e0 	bl	800431c <lv_obj_get_style_list>
#endif
        default:
            break;
    }

    lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 800d15c:	22ff      	movs	r2, #255	; 0xff
 800d15e:	0020      	movs	r0, r4
 800d160:	0011      	movs	r1, r2
 800d162:	f7f7 fd01 	bl	8004b68 <lv_obj_refresh_style>
}
 800d166:	bd70      	pop	{r4, r5, r6, pc}
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_MAIN);
 800d168:	2100      	movs	r1, #0
 800d16a:	0020      	movs	r0, r4
 800d16c:	f7f7 f8d6 	bl	800431c <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->cpicker_bg);
 800d170:	4d05      	ldr	r5, [pc, #20]	; (800d188 <theme_apply+0x128>)
 800d172:	6829      	ldr	r1, [r5, #0]
 800d174:	3130      	adds	r1, #48	; 0x30
 800d176:	f7f9 fad5 	bl	8006724 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_KNOB);
 800d17a:	2101      	movs	r1, #1
 800d17c:	0020      	movs	r0, r4
 800d17e:	f7f7 f8cd 	bl	800431c <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->cpicker_indic);
 800d182:	6829      	ldr	r1, [r5, #0]
 800d184:	3134      	adds	r1, #52	; 0x34
 800d186:	e77e      	b.n	800d086 <theme_apply+0x26>
 800d188:	20006eac 	.word	0x20006eac

0800d18c <lv_color_hex>:
    return LV_COLOR_MAKE(r, g, b);
 800d18c:	0402      	lsls	r2, r0, #16
 800d18e:	0603      	lsls	r3, r0, #24
 800d190:	0e92      	lsrs	r2, r2, #26
 800d192:	0200      	lsls	r0, r0, #8
 800d194:	0152      	lsls	r2, r2, #5
 800d196:	0edb      	lsrs	r3, r3, #27
 800d198:	0ec0      	lsrs	r0, r0, #27
 800d19a:	4313      	orrs	r3, r2
 800d19c:	02c0      	lsls	r0, r0, #11
 800d19e:	4318      	orrs	r0, r3
}
 800d1a0:	4770      	bx	lr
	...

0800d1a4 <lv_theme_material_init>:
{
 800d1a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(styles == NULL) {
 800d1a6:	4ce8      	ldr	r4, [pc, #928]	; (800d548 <lv_theme_material_init+0x3a4>)
{
 800d1a8:	9301      	str	r3, [sp, #4]
    if(styles == NULL) {
 800d1aa:	6823      	ldr	r3, [r4, #0]
{
 800d1ac:	1c07      	adds	r7, r0, #0
 800d1ae:	1c0e      	adds	r6, r1, #0
 800d1b0:	9200      	str	r2, [sp, #0]
    if(styles == NULL) {
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d10d      	bne.n	800d1d2 <lv_theme_material_init+0x2e>
        styles = lv_mem_alloc(sizeof(theme_styles_t));
 800d1b6:	2038      	movs	r0, #56	; 0x38
 800d1b8:	f7ff f826 	bl	800c208 <lv_mem_alloc>
 800d1bc:	6020      	str	r0, [r4, #0]
        if(styles == NULL) return NULL;
 800d1be:	1e05      	subs	r5, r0, #0
 800d1c0:	d101      	bne.n	800d1c6 <lv_theme_material_init+0x22>
 800d1c2:	f001 f804 	bl	800e1ce <lv_theme_material_init+0x102a>
        _lv_memset_00(styles, sizeof(theme_styles_t));
 800d1c6:	2138      	movs	r1, #56	; 0x38
 800d1c8:	f7ff fa2c 	bl	800c624 <_lv_memset_00>
        LV_GC_ROOT(_lv_theme_material_styles) = styles;
 800d1cc:	4bdf      	ldr	r3, [pc, #892]	; (800d54c <lv_theme_material_init+0x3a8>)
 800d1ce:	6822      	ldr	r2, [r4, #0]
 800d1d0:	601a      	str	r2, [r3, #0]
    theme.color_primary = color_primary;
 800d1d2:	4ddf      	ldr	r5, [pc, #892]	; (800d550 <lv_theme_material_init+0x3ac>)
    theme.font_small = font_small;
 800d1d4:	9b01      	ldr	r3, [sp, #4]
    lv_style_reset(&styles->scr);
 800d1d6:	6820      	ldr	r0, [r4, #0]
    theme.font_small = font_small;
 800d1d8:	612b      	str	r3, [r5, #16]
    theme.font_normal = font_normal;
 800d1da:	9b08      	ldr	r3, [sp, #32]
    theme.color_secondary = color_secondary;
 800d1dc:	81ee      	strh	r6, [r5, #14]
    theme.font_normal = font_normal;
 800d1de:	616b      	str	r3, [r5, #20]
    theme.font_subtitle = font_subtitle;
 800d1e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    theme.color_primary = color_primary;
 800d1e2:	81af      	strh	r7, [r5, #12]
    theme.font_subtitle = font_subtitle;
 800d1e4:	61ab      	str	r3, [r5, #24]
    theme.font_title = font_title;
 800d1e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1e8:	61eb      	str	r3, [r5, #28]
    theme.flags = flags;
 800d1ea:	9b00      	ldr	r3, [sp, #0]
 800d1ec:	622b      	str	r3, [r5, #32]
    lv_style_reset(&styles->scr);
 800d1ee:	f7f9 fae7 	bl	80067c0 <lv_style_reset>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 800d1f2:	22ff      	movs	r2, #255	; 0xff
 800d1f4:	212c      	movs	r1, #44	; 0x2c
 800d1f6:	6820      	ldr	r0, [r4, #0]
 800d1f8:	f7f9 fba0 	bl	800693c <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR);
 800d1fc:	6a2b      	ldr	r3, [r5, #32]
 800d1fe:	6826      	ldr	r6, [r4, #0]
 800d200:	079b      	lsls	r3, r3, #30
 800d202:	d401      	bmi.n	800d208 <lv_theme_material_init+0x64>
 800d204:	f000 ffe5 	bl	800e1d2 <lv_theme_material_init+0x102e>
 800d208:	48d2      	ldr	r0, [pc, #840]	; (800d554 <lv_theme_material_init+0x3b0>)
 800d20a:	f7ff ffbf 	bl	800d18c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 800d20e:	2129      	movs	r1, #41	; 0x29
 800d210:	1c02      	adds	r2, r0, #0
 800d212:	0030      	movs	r0, r6
 800d214:	f7f9 fb4d 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_text_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 800d218:	6a2b      	ldr	r3, [r5, #32]
 800d21a:	6826      	ldr	r6, [r4, #0]
 800d21c:	079b      	lsls	r3, r3, #30
 800d21e:	d401      	bmi.n	800d224 <lv_theme_material_init+0x80>
 800d220:	f000 ffda 	bl	800e1d8 <lv_theme_material_init+0x1034>
 800d224:	48cc      	ldr	r0, [pc, #816]	; (800d558 <lv_theme_material_init+0x3b4>)
 800d226:	f7ff ffb1 	bl	800d18c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
 800d22a:	49cc      	ldr	r1, [pc, #816]	; (800d55c <lv_theme_material_init+0x3b8>)
 800d22c:	1c02      	adds	r2, r0, #0
 800d22e:	0030      	movs	r0, r6
 800d230:	f7f9 fb3f 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_value_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 800d234:	6a2b      	ldr	r3, [r5, #32]
 800d236:	6826      	ldr	r6, [r4, #0]
 800d238:	079b      	lsls	r3, r3, #30
 800d23a:	d401      	bmi.n	800d240 <lv_theme_material_init+0x9c>
 800d23c:	f000 ffcf 	bl	800e1de <lv_theme_material_init+0x103a>
 800d240:	48c5      	ldr	r0, [pc, #788]	; (800d558 <lv_theme_material_init+0x3b4>)
 800d242:	f7ff ffa3 	bl	800d18c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color)
 800d246:	2179      	movs	r1, #121	; 0x79
 800d248:	1c02      	adds	r2, r0, #0
 800d24a:	0030      	movs	r0, r6
 800d24c:	f7f9 fb31 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_text_sel_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 800d250:	6a2b      	ldr	r3, [r5, #32]
 800d252:	6826      	ldr	r6, [r4, #0]
 800d254:	079b      	lsls	r3, r3, #30
 800d256:	d401      	bmi.n	800d25c <lv_theme_material_init+0xb8>
 800d258:	f000 ffe0 	bl	800e21c <lv_theme_material_init+0x1078>
 800d25c:	48be      	ldr	r0, [pc, #760]	; (800d558 <lv_theme_material_init+0x3b4>)
 800d25e:	f7ff ff95 	bl	800d18c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color)
 800d262:	49bf      	ldr	r1, [pc, #764]	; (800d560 <lv_theme_material_init+0x3bc>)
 800d264:	1c02      	adds	r2, r0, #0
 800d266:	0030      	movs	r0, r6
 800d268:	f7f9 fb23 	bl	80068b2 <_lv_style_set_color>
 800d26c:	89aa      	ldrh	r2, [r5, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color)
 800d26e:	49bd      	ldr	r1, [pc, #756]	; (800d564 <lv_theme_material_init+0x3c0>)
 800d270:	6820      	ldr	r0, [r4, #0]
 800d272:	f7f9 fb1e 	bl	80068b2 <_lv_style_set_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr)
 800d276:	696a      	ldr	r2, [r5, #20]
 800d278:	217e      	movs	r1, #126	; 0x7e
 800d27a:	6820      	ldr	r0, [r4, #0]
 800d27c:	f7f9 fba3 	bl	80069c6 <_lv_style_set_ptr>
    lv_style_reset(&styles->bg);
 800d280:	6823      	ldr	r3, [r4, #0]
 800d282:	1d18      	adds	r0, r3, #4
 800d284:	f7f9 fa9c 	bl	80067c0 <lv_style_reset>
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
 800d288:	6823      	ldr	r3, [r4, #0]
 800d28a:	2000      	movs	r0, #0
 800d28c:	1d1e      	adds	r6, r3, #4
 800d28e:	f7fe fa4f 	bl	800b730 <lv_disp_get_dpi>
 800d292:	2201      	movs	r2, #1
 800d294:	281d      	cmp	r0, #29
 800d296:	dd07      	ble.n	800d2a8 <lv_theme_material_init+0x104>
 800d298:	2000      	movs	r0, #0
 800d29a:	f7fe fa49 	bl	800b730 <lv_disp_get_dpi>
 800d29e:	2114      	movs	r1, #20
 800d2a0:	300a      	adds	r0, #10
 800d2a2:	f7f2 fff1 	bl	8000288 <__divsi3>
 800d2a6:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 800d2a8:	0030      	movs	r0, r6
 800d2aa:	2101      	movs	r1, #1
 800d2ac:	f7f9 fabc 	bl	8006828 <_lv_style_set_int>
    lv_style_set_bg_opa(&styles->bg, LV_STATE_DEFAULT, LV_OPA_COVER);
 800d2b0:	6823      	ldr	r3, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 800d2b2:	22ff      	movs	r2, #255	; 0xff
 800d2b4:	1d18      	adds	r0, r3, #4
 800d2b6:	212c      	movs	r1, #44	; 0x2c
 800d2b8:	f7f9 fb40 	bl	800693c <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG);
 800d2bc:	6823      	ldr	r3, [r4, #0]
 800d2be:	1d1e      	adds	r6, r3, #4
 800d2c0:	6a2b      	ldr	r3, [r5, #32]
 800d2c2:	079b      	lsls	r3, r3, #30
 800d2c4:	d401      	bmi.n	800d2ca <lv_theme_material_init+0x126>
 800d2c6:	f000 ffac 	bl	800e222 <lv_theme_material_init+0x107e>
 800d2ca:	48a7      	ldr	r0, [pc, #668]	; (800d568 <lv_theme_material_init+0x3c4>)
 800d2cc:	f7ff ff5e 	bl	800d18c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 800d2d0:	2129      	movs	r1, #41	; 0x29
 800d2d2:	1c02      	adds	r2, r0, #0
 800d2d4:	0030      	movs	r0, r6
 800d2d6:	f7f9 faec 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
 800d2da:	6823      	ldr	r3, [r4, #0]
 800d2dc:	1d1e      	adds	r6, r3, #4
 800d2de:	6a2b      	ldr	r3, [r5, #32]
 800d2e0:	079b      	lsls	r3, r3, #30
 800d2e2:	d401      	bmi.n	800d2e8 <lv_theme_material_init+0x144>
 800d2e4:	f000 ffa0 	bl	800e228 <lv_theme_material_init+0x1084>
 800d2e8:	48a0      	ldr	r0, [pc, #640]	; (800d56c <lv_theme_material_init+0x3c8>)
 800d2ea:	f7ff ff4f 	bl	800d18c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color)
 800d2ee:	2139      	movs	r1, #57	; 0x39
 800d2f0:	1c02      	adds	r2, r0, #0
 800d2f2:	0030      	movs	r0, r6
 800d2f4:	f7f9 fadd 	bl	80068b2 <_lv_style_set_color>
    if((theme.flags & LV_THEME_MATERIAL_FLAG_NO_FOCUS) == 0)lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED,
 800d2f8:	6a2b      	ldr	r3, [r5, #32]
 800d2fa:	069b      	lsls	r3, r3, #26
 800d2fc:	d405      	bmi.n	800d30a <lv_theme_material_init+0x166>
 800d2fe:	6823      	ldr	r3, [r4, #0]
 800d300:	89aa      	ldrh	r2, [r5, #12]
 800d302:	1d18      	adds	r0, r3, #4
 800d304:	499a      	ldr	r1, [pc, #616]	; (800d570 <lv_theme_material_init+0x3cc>)
 800d306:	f7f9 fad4 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg, LV_STATE_EDITED, theme.color_secondary);
 800d30a:	6823      	ldr	r3, [r4, #0]
 800d30c:	89ea      	ldrh	r2, [r5, #14]
 800d30e:	1d18      	adds	r0, r3, #4
 800d310:	4998      	ldr	r1, [pc, #608]	; (800d574 <lv_theme_material_init+0x3d0>)
 800d312:	f7f9 face 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
 800d316:	6823      	ldr	r3, [r4, #0]
 800d318:	2000      	movs	r0, #0
 800d31a:	1d1e      	adds	r6, r3, #4
 800d31c:	f7fe fa08 	bl	800b730 <lv_disp_get_dpi>
 800d320:	2201      	movs	r2, #1
 800d322:	2877      	cmp	r0, #119	; 0x77
 800d324:	dd07      	ble.n	800d336 <lv_theme_material_init+0x192>
 800d326:	2000      	movs	r0, #0
 800d328:	f7fe fa02 	bl	800b730 <lv_disp_get_dpi>
 800d32c:	2150      	movs	r1, #80	; 0x50
 800d32e:	3028      	adds	r0, #40	; 0x28
 800d330:	f7f2 ffaa 	bl	8000288 <__divsi3>
 800d334:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int)
 800d336:	0030      	movs	r0, r6
 800d338:	2130      	movs	r1, #48	; 0x30
 800d33a:	f7f9 fa75 	bl	8006828 <_lv_style_set_int>
    lv_style_set_border_post(&styles->bg, LV_STATE_DEFAULT, true);
 800d33e:	6823      	ldr	r3, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int)
 800d340:	2201      	movs	r2, #1
 800d342:	1d18      	adds	r0, r3, #4
 800d344:	2133      	movs	r1, #51	; 0x33
 800d346:	f7f9 fa6f 	bl	8006828 <_lv_style_set_int>
    lv_style_set_text_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 800d34a:	6823      	ldr	r3, [r4, #0]
 800d34c:	1d1e      	adds	r6, r3, #4
 800d34e:	6a2b      	ldr	r3, [r5, #32]
 800d350:	079b      	lsls	r3, r3, #30
 800d352:	d401      	bmi.n	800d358 <lv_theme_material_init+0x1b4>
 800d354:	f000 ff6b 	bl	800e22e <lv_theme_material_init+0x108a>
 800d358:	487f      	ldr	r0, [pc, #508]	; (800d558 <lv_theme_material_init+0x3b4>)
 800d35a:	f7ff ff17 	bl	800d18c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
 800d35e:	497f      	ldr	r1, [pc, #508]	; (800d55c <lv_theme_material_init+0x3b8>)
 800d360:	1c02      	adds	r2, r0, #0
 800d362:	0030      	movs	r0, r6
 800d364:	f7f9 faa5 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_value_font(&styles->bg, LV_STATE_DEFAULT, theme.font_normal);
 800d368:	6823      	ldr	r3, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr)
 800d36a:	696a      	ldr	r2, [r5, #20]
 800d36c:	1d18      	adds	r0, r3, #4
 800d36e:	217e      	movs	r1, #126	; 0x7e
 800d370:	f7f9 fb29 	bl	80069c6 <_lv_style_set_ptr>
    lv_style_set_value_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 800d374:	6823      	ldr	r3, [r4, #0]
 800d376:	1d1e      	adds	r6, r3, #4
 800d378:	6a2b      	ldr	r3, [r5, #32]
 800d37a:	079b      	lsls	r3, r3, #30
 800d37c:	d401      	bmi.n	800d382 <lv_theme_material_init+0x1de>
 800d37e:	f000 ff59 	bl	800e234 <lv_theme_material_init+0x1090>
 800d382:	4875      	ldr	r0, [pc, #468]	; (800d558 <lv_theme_material_init+0x3b4>)
 800d384:	f7ff ff02 	bl	800d18c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color)
 800d388:	2179      	movs	r1, #121	; 0x79
 800d38a:	1c02      	adds	r2, r0, #0
 800d38c:	0030      	movs	r0, r6
 800d38e:	f7f9 fa90 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 800d392:	6823      	ldr	r3, [r4, #0]
 800d394:	1d1e      	adds	r6, r3, #4
 800d396:	6a2b      	ldr	r3, [r5, #32]
 800d398:	079b      	lsls	r3, r3, #30
 800d39a:	d401      	bmi.n	800d3a0 <lv_theme_material_init+0x1fc>
 800d39c:	f000 ff4d 	bl	800e23a <lv_theme_material_init+0x1096>
 800d3a0:	486d      	ldr	r0, [pc, #436]	; (800d558 <lv_theme_material_init+0x3b4>)
 800d3a2:	f7ff fef3 	bl	800d18c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color)
 800d3a6:	4974      	ldr	r1, [pc, #464]	; (800d578 <lv_theme_material_init+0x3d4>)
 800d3a8:	1c02      	adds	r2, r0, #0
 800d3aa:	0030      	movs	r0, r6
 800d3ac:	f7f9 fa81 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_line_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 800d3b0:	6823      	ldr	r3, [r4, #0]
 800d3b2:	1d1e      	adds	r6, r3, #4
 800d3b4:	6a2b      	ldr	r3, [r5, #32]
 800d3b6:	079b      	lsls	r3, r3, #30
 800d3b8:	d401      	bmi.n	800d3be <lv_theme_material_init+0x21a>
 800d3ba:	f000 ff41 	bl	800e240 <lv_theme_material_init+0x109c>
 800d3be:	4866      	ldr	r0, [pc, #408]	; (800d558 <lv_theme_material_init+0x3b4>)
 800d3c0:	f7ff fee4 	bl	800d18c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color)
 800d3c4:	2199      	movs	r1, #153	; 0x99
 800d3c6:	1c02      	adds	r2, r0, #0
 800d3c8:	0030      	movs	r0, r6
 800d3ca:	f7f9 fa72 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_line_width(&styles->bg, LV_STATE_DEFAULT, 1);
 800d3ce:	6823      	ldr	r3, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int)
 800d3d0:	2201      	movs	r2, #1
 800d3d2:	1d18      	adds	r0, r3, #4
 800d3d4:	2190      	movs	r1, #144	; 0x90
 800d3d6:	f7f9 fa27 	bl	8006828 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 800d3da:	6823      	ldr	r3, [r4, #0]
 800d3dc:	2000      	movs	r0, #0
 800d3de:	1d1f      	adds	r7, r3, #4
 800d3e0:	f7fe f9b4 	bl	800b74c <lv_disp_get_size_category>
 800d3e4:	2801      	cmp	r0, #1
 800d3e6:	d901      	bls.n	800d3ec <lv_theme_material_init+0x248>
 800d3e8:	f000 ff2d 	bl	800e246 <lv_theme_material_init+0x10a2>
 800d3ec:	2000      	movs	r0, #0
 800d3ee:	f7fe f99f 	bl	800b730 <lv_disp_get_dpi>
 800d3f2:	260f      	movs	r6, #15
 800d3f4:	4370      	muls	r0, r6
 800d3f6:	28ef      	cmp	r0, #239	; 0xef
 800d3f8:	dd01      	ble.n	800d3fe <lv_theme_material_init+0x25a>
 800d3fa:	f000 ff2a 	bl	800e252 <lv_theme_material_init+0x10ae>
 800d3fe:	2601      	movs	r6, #1
 800d400:	2000      	movs	r0, #0
 800d402:	f7fe f995 	bl	800b730 <lv_disp_get_dpi>
 800d406:	2201      	movs	r2, #1
 800d408:	2877      	cmp	r0, #119	; 0x77
 800d40a:	dd07      	ble.n	800d41c <lv_theme_material_init+0x278>
 800d40c:	2000      	movs	r0, #0
 800d40e:	f7fe f98f 	bl	800b730 <lv_disp_get_dpi>
 800d412:	2150      	movs	r1, #80	; 0x50
 800d414:	3028      	adds	r0, #40	; 0x28
 800d416:	f7f2 ff37 	bl	8000288 <__divsi3>
 800d41a:	b282      	uxth	r2, r0
 800d41c:	18b2      	adds	r2, r6, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 800d41e:	0038      	movs	r0, r7
 800d420:	b212      	sxth	r2, r2
 800d422:	2112      	movs	r1, #18
 800d424:	f7f9 fa00 	bl	8006828 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 800d428:	6823      	ldr	r3, [r4, #0]
 800d42a:	2000      	movs	r0, #0
 800d42c:	1d1f      	adds	r7, r3, #4
 800d42e:	f7fe f98d 	bl	800b74c <lv_disp_get_size_category>
 800d432:	2801      	cmp	r0, #1
 800d434:	d901      	bls.n	800d43a <lv_theme_material_init+0x296>
 800d436:	f000 ff17 	bl	800e268 <lv_theme_material_init+0x10c4>
 800d43a:	2000      	movs	r0, #0
 800d43c:	f7fe f978 	bl	800b730 <lv_disp_get_dpi>
 800d440:	260f      	movs	r6, #15
 800d442:	4370      	muls	r0, r6
 800d444:	28ef      	cmp	r0, #239	; 0xef
 800d446:	dd01      	ble.n	800d44c <lv_theme_material_init+0x2a8>
 800d448:	f000 ff14 	bl	800e274 <lv_theme_material_init+0x10d0>
 800d44c:	2601      	movs	r6, #1
 800d44e:	2000      	movs	r0, #0
 800d450:	f7fe f96e 	bl	800b730 <lv_disp_get_dpi>
 800d454:	2201      	movs	r2, #1
 800d456:	2877      	cmp	r0, #119	; 0x77
 800d458:	dd07      	ble.n	800d46a <lv_theme_material_init+0x2c6>
 800d45a:	2000      	movs	r0, #0
 800d45c:	f7fe f968 	bl	800b730 <lv_disp_get_dpi>
 800d460:	2150      	movs	r1, #80	; 0x50
 800d462:	3028      	adds	r0, #40	; 0x28
 800d464:	f7f2 ff10 	bl	8000288 <__divsi3>
 800d468:	b282      	uxth	r2, r0
 800d46a:	18b2      	adds	r2, r6, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 800d46c:	0038      	movs	r0, r7
 800d46e:	b212      	sxth	r2, r2
 800d470:	2113      	movs	r1, #19
 800d472:	f7f9 f9d9 	bl	8006828 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 800d476:	6823      	ldr	r3, [r4, #0]
 800d478:	2000      	movs	r0, #0
 800d47a:	1d1f      	adds	r7, r3, #4
 800d47c:	f7fe f966 	bl	800b74c <lv_disp_get_size_category>
 800d480:	2801      	cmp	r0, #1
 800d482:	d901      	bls.n	800d488 <lv_theme_material_init+0x2e4>
 800d484:	f000 ff01 	bl	800e28a <lv_theme_material_init+0x10e6>
 800d488:	2000      	movs	r0, #0
 800d48a:	f7fe f951 	bl	800b730 <lv_disp_get_dpi>
 800d48e:	260f      	movs	r6, #15
 800d490:	4370      	muls	r0, r6
 800d492:	28ef      	cmp	r0, #239	; 0xef
 800d494:	dd01      	ble.n	800d49a <lv_theme_material_init+0x2f6>
 800d496:	f000 fefe 	bl	800e296 <lv_theme_material_init+0x10f2>
 800d49a:	2601      	movs	r6, #1
 800d49c:	2000      	movs	r0, #0
 800d49e:	f7fe f947 	bl	800b730 <lv_disp_get_dpi>
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	2877      	cmp	r0, #119	; 0x77
 800d4a6:	dd07      	ble.n	800d4b8 <lv_theme_material_init+0x314>
 800d4a8:	2000      	movs	r0, #0
 800d4aa:	f7fe f941 	bl	800b730 <lv_disp_get_dpi>
 800d4ae:	2150      	movs	r1, #80	; 0x50
 800d4b0:	3028      	adds	r0, #40	; 0x28
 800d4b2:	f7f2 fee9 	bl	8000288 <__divsi3>
 800d4b6:	b282      	uxth	r2, r0
 800d4b8:	18b2      	adds	r2, r6, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 800d4ba:	0038      	movs	r0, r7
 800d4bc:	b212      	sxth	r2, r2
 800d4be:	2110      	movs	r1, #16
 800d4c0:	f7f9 f9b2 	bl	8006828 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 800d4c4:	6823      	ldr	r3, [r4, #0]
 800d4c6:	2000      	movs	r0, #0
 800d4c8:	1d1f      	adds	r7, r3, #4
 800d4ca:	f7fe f93f 	bl	800b74c <lv_disp_get_size_category>
 800d4ce:	2801      	cmp	r0, #1
 800d4d0:	d901      	bls.n	800d4d6 <lv_theme_material_init+0x332>
 800d4d2:	f000 feeb 	bl	800e2ac <lv_theme_material_init+0x1108>
 800d4d6:	2000      	movs	r0, #0
 800d4d8:	f7fe f92a 	bl	800b730 <lv_disp_get_dpi>
 800d4dc:	260f      	movs	r6, #15
 800d4de:	4370      	muls	r0, r6
 800d4e0:	28ef      	cmp	r0, #239	; 0xef
 800d4e2:	dd01      	ble.n	800d4e8 <lv_theme_material_init+0x344>
 800d4e4:	f000 fee8 	bl	800e2b8 <lv_theme_material_init+0x1114>
 800d4e8:	2601      	movs	r6, #1
 800d4ea:	2000      	movs	r0, #0
 800d4ec:	f7fe f920 	bl	800b730 <lv_disp_get_dpi>
 800d4f0:	2201      	movs	r2, #1
 800d4f2:	2877      	cmp	r0, #119	; 0x77
 800d4f4:	dd07      	ble.n	800d506 <lv_theme_material_init+0x362>
 800d4f6:	2000      	movs	r0, #0
 800d4f8:	f7fe f91a 	bl	800b730 <lv_disp_get_dpi>
 800d4fc:	2150      	movs	r1, #80	; 0x50
 800d4fe:	3028      	adds	r0, #40	; 0x28
 800d500:	f7f2 fec2 	bl	8000288 <__divsi3>
 800d504:	b282      	uxth	r2, r0
 800d506:	18b2      	adds	r2, r6, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 800d508:	0038      	movs	r0, r7
 800d50a:	b212      	sxth	r2, r2
 800d50c:	2111      	movs	r1, #17
 800d50e:	f7f9 f98b 	bl	8006828 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
 800d512:	6823      	ldr	r3, [r4, #0]
 800d514:	2000      	movs	r0, #0
 800d516:	1d1e      	adds	r6, r3, #4
 800d518:	f7fe f918 	bl	800b74c <lv_disp_get_size_category>
 800d51c:	2801      	cmp	r0, #1
 800d51e:	d901      	bls.n	800d524 <lv_theme_material_init+0x380>
 800d520:	f000 fed5 	bl	800e2ce <lv_theme_material_init+0x112a>
 800d524:	2000      	movs	r0, #0
 800d526:	f7fe f903 	bl	800b730 <lv_disp_get_dpi>
 800d52a:	270f      	movs	r7, #15
 800d52c:	4378      	muls	r0, r7
 800d52e:	2201      	movs	r2, #1
 800d530:	28ef      	cmp	r0, #239	; 0xef
 800d532:	dd23      	ble.n	800d57c <lv_theme_material_init+0x3d8>
 800d534:	2000      	movs	r0, #0
 800d536:	f7fe f8fb 	bl	800b730 <lv_disp_get_dpi>
 800d53a:	4378      	muls	r0, r7
 800d53c:	21a0      	movs	r1, #160	; 0xa0
 800d53e:	3050      	adds	r0, #80	; 0x50
 800d540:	f7f2 fea2 	bl	8000288 <__divsi3>
 800d544:	b202      	sxth	r2, r0
 800d546:	e019      	b.n	800d57c <lv_theme_material_init+0x3d8>
 800d548:	20006eac 	.word	0x20006eac
 800d54c:	200071b4 	.word	0x200071b4
 800d550:	20006eb0 	.word	0x20006eb0
 800d554:	00eaeff3 	.word	0x00eaeff3
 800d558:	003b3e42 	.word	0x003b3e42
 800d55c:	00008089 	.word	0x00008089
 800d560:	0000808a 	.word	0x0000808a
 800d564:	0000808b 	.word	0x0000808b
 800d568:	00ffffff 	.word	0x00ffffff
 800d56c:	00d6dde3 	.word	0x00d6dde3
 800d570:	00000239 	.word	0x00000239
 800d574:	00000439 	.word	0x00000439
 800d578:	000080a9 	.word	0x000080a9
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 800d57c:	0030      	movs	r0, r6
 800d57e:	2114      	movs	r1, #20
 800d580:	f7f9 f952 	bl	8006828 <_lv_style_set_int>
    lv_style_set_transition_time(&styles->bg, LV_STATE_DEFAULT, TRANSITION_TIME);
 800d584:	6823      	ldr	r3, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int)
 800d586:	2200      	movs	r2, #0
 800d588:	1d18      	adds	r0, r3, #4
 800d58a:	21b0      	movs	r1, #176	; 0xb0
 800d58c:	f7f9 f94c 	bl	8006828 <_lv_style_set_int>
    lv_style_set_transition_prop_6(&styles->bg, LV_STATE_DEFAULT, LV_STYLE_BORDER_COLOR);
 800d590:	6823      	ldr	r3, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int)
 800d592:	2239      	movs	r2, #57	; 0x39
 800d594:	1d18      	adds	r0, r3, #4
 800d596:	21b7      	movs	r1, #183	; 0xb7
 800d598:	f7f9 f946 	bl	8006828 <_lv_style_set_int>
    lv_style_reset(&styles->bg_sec);
 800d59c:	6820      	ldr	r0, [r4, #0]
 800d59e:	300c      	adds	r0, #12
 800d5a0:	f7f9 f90e 	bl	80067c0 <lv_style_reset>
    lv_style_copy(&styles->bg_sec, &styles->bg);
 800d5a4:	6820      	ldr	r0, [r4, #0]
 800d5a6:	1d01      	adds	r1, r0, #4
 800d5a8:	300c      	adds	r0, #12
 800d5aa:	f7f9 f92b 	bl	8006804 <lv_style_copy>
    lv_style_set_bg_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC);
 800d5ae:	6826      	ldr	r6, [r4, #0]
 800d5b0:	6a2b      	ldr	r3, [r5, #32]
 800d5b2:	360c      	adds	r6, #12
 800d5b4:	079b      	lsls	r3, r3, #30
 800d5b6:	d401      	bmi.n	800d5bc <lv_theme_material_init+0x418>
 800d5b8:	f000 fe8f 	bl	800e2da <lv_theme_material_init+0x1136>
 800d5bc:	48f9      	ldr	r0, [pc, #996]	; (800d9a4 <lv_theme_material_init+0x800>)
 800d5be:	f7ff fde5 	bl	800d18c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 800d5c2:	2129      	movs	r1, #41	; 0x29
 800d5c4:	1c02      	adds	r2, r0, #0
 800d5c6:	0030      	movs	r0, r6
 800d5c8:	f7f9 f973 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_BORDER);
 800d5cc:	6826      	ldr	r6, [r4, #0]
 800d5ce:	6a2b      	ldr	r3, [r5, #32]
 800d5d0:	360c      	adds	r6, #12
 800d5d2:	079b      	lsls	r3, r3, #30
 800d5d4:	d401      	bmi.n	800d5da <lv_theme_material_init+0x436>
 800d5d6:	f000 fe83 	bl	800e2e0 <lv_theme_material_init+0x113c>
 800d5da:	48f3      	ldr	r0, [pc, #972]	; (800d9a8 <lv_theme_material_init+0x804>)
 800d5dc:	f7ff fdd6 	bl	800d18c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color)
 800d5e0:	2139      	movs	r1, #57	; 0x39
 800d5e2:	1c02      	adds	r2, r0, #0
 800d5e4:	0030      	movs	r0, r6
 800d5e6:	f7f9 f964 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 800d5ea:	6826      	ldr	r6, [r4, #0]
 800d5ec:	6a2b      	ldr	r3, [r5, #32]
 800d5ee:	360c      	adds	r6, #12
 800d5f0:	079b      	lsls	r3, r3, #30
 800d5f2:	d401      	bmi.n	800d5f8 <lv_theme_material_init+0x454>
 800d5f4:	f000 fe77 	bl	800e2e6 <lv_theme_material_init+0x1142>
 800d5f8:	48ec      	ldr	r0, [pc, #944]	; (800d9ac <lv_theme_material_init+0x808>)
 800d5fa:	f7ff fdc7 	bl	800d18c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
 800d5fe:	49ec      	ldr	r1, [pc, #944]	; (800d9b0 <lv_theme_material_init+0x80c>)
 800d600:	1c02      	adds	r2, r0, #0
 800d602:	0030      	movs	r0, r6
 800d604:	f7f9 f955 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_value_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 800d608:	6826      	ldr	r6, [r4, #0]
 800d60a:	6a2b      	ldr	r3, [r5, #32]
 800d60c:	360c      	adds	r6, #12
 800d60e:	079b      	lsls	r3, r3, #30
 800d610:	d401      	bmi.n	800d616 <lv_theme_material_init+0x472>
 800d612:	f000 fe6b 	bl	800e2ec <lv_theme_material_init+0x1148>
 800d616:	48e5      	ldr	r0, [pc, #916]	; (800d9ac <lv_theme_material_init+0x808>)
 800d618:	f7ff fdb8 	bl	800d18c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color)
 800d61c:	2179      	movs	r1, #121	; 0x79
 800d61e:	1c02      	adds	r2, r0, #0
 800d620:	0030      	movs	r0, r6
 800d622:	f7f9 f946 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 800d626:	6826      	ldr	r6, [r4, #0]
 800d628:	6a2b      	ldr	r3, [r5, #32]
 800d62a:	360c      	adds	r6, #12
 800d62c:	079b      	lsls	r3, r3, #30
 800d62e:	d401      	bmi.n	800d634 <lv_theme_material_init+0x490>
 800d630:	f000 fe5f 	bl	800e2f2 <lv_theme_material_init+0x114e>
 800d634:	48dd      	ldr	r0, [pc, #884]	; (800d9ac <lv_theme_material_init+0x808>)
 800d636:	f7ff fda9 	bl	800d18c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color)
 800d63a:	49de      	ldr	r1, [pc, #888]	; (800d9b4 <lv_theme_material_init+0x810>)
 800d63c:	1c02      	adds	r2, r0, #0
 800d63e:	0030      	movs	r0, r6
 800d640:	f7f9 f937 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_line_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 800d644:	6826      	ldr	r6, [r4, #0]
 800d646:	6a2b      	ldr	r3, [r5, #32]
 800d648:	360c      	adds	r6, #12
 800d64a:	079b      	lsls	r3, r3, #30
 800d64c:	d401      	bmi.n	800d652 <lv_theme_material_init+0x4ae>
 800d64e:	f000 fe53 	bl	800e2f8 <lv_theme_material_init+0x1154>
 800d652:	48d6      	ldr	r0, [pc, #856]	; (800d9ac <lv_theme_material_init+0x808>)
 800d654:	f7ff fd9a 	bl	800d18c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color)
 800d658:	2199      	movs	r1, #153	; 0x99
 800d65a:	1c02      	adds	r2, r0, #0
 800d65c:	0030      	movs	r0, r6
 800d65e:	f7f9 f928 	bl	80068b2 <_lv_style_set_color>
    lv_style_reset(&styles->bg_click);
 800d662:	6820      	ldr	r0, [r4, #0]
 800d664:	3008      	adds	r0, #8
 800d666:	f7f9 f8ab 	bl	80067c0 <lv_style_reset>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_PR);
 800d66a:	6826      	ldr	r6, [r4, #0]
 800d66c:	6a2b      	ldr	r3, [r5, #32]
 800d66e:	3608      	adds	r6, #8
 800d670:	079b      	lsls	r3, r3, #30
 800d672:	d401      	bmi.n	800d678 <lv_theme_material_init+0x4d4>
 800d674:	f000 fe43 	bl	800e2fe <lv_theme_material_init+0x115a>
 800d678:	48cf      	ldr	r0, [pc, #828]	; (800d9b8 <lv_theme_material_init+0x814>)
 800d67a:	f7ff fd87 	bl	800d18c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 800d67e:	49cf      	ldr	r1, [pc, #828]	; (800d9bc <lv_theme_material_init+0x818>)
 800d680:	1c02      	adds	r2, r0, #0
 800d682:	0030      	movs	r0, r6
 800d684:	f7f9 f915 	bl	80068b2 <_lv_style_set_color>
 800d688:	212a      	movs	r1, #42	; 0x2a
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_CHK);
 800d68a:	6820      	ldr	r0, [r4, #0]
 800d68c:	89aa      	ldrh	r2, [r5, #12]
 800d68e:	3008      	adds	r0, #8
 800d690:	31ff      	adds	r1, #255	; 0xff
 800d692:	f7f9 f90e 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_PR_CHK);
 800d696:	2133      	movs	r1, #51	; 0x33
 800d698:	89a8      	ldrh	r0, [r5, #12]
 800d69a:	6826      	ldr	r6, [r4, #0]
 800d69c:	f7fe fc0d 	bl	800beba <lv_color_darken>
 800d6a0:	3608      	adds	r6, #8
 800d6a2:	1c02      	adds	r2, r0, #0
 800d6a4:	49c6      	ldr	r1, [pc, #792]	; (800d9c0 <lv_theme_material_init+0x81c>)
 800d6a6:	0030      	movs	r0, r6
 800d6a8:	f7f9 f903 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_DIS);
 800d6ac:	6824      	ldr	r4, [r4, #0]
 800d6ae:	6a2b      	ldr	r3, [r5, #32]
 800d6b0:	3408      	adds	r4, #8
 800d6b2:	079b      	lsls	r3, r3, #30
 800d6b4:	d401      	bmi.n	800d6ba <lv_theme_material_init+0x516>
 800d6b6:	f000 fe25 	bl	800e304 <lv_theme_material_init+0x1160>
 800d6ba:	48c2      	ldr	r0, [pc, #776]	; (800d9c4 <lv_theme_material_init+0x820>)
 800d6bc:	f7ff fd66 	bl	800d18c <lv_color_hex>
 800d6c0:	49c1      	ldr	r1, [pc, #772]	; (800d9c8 <lv_theme_material_init+0x824>)
 800d6c2:	1c02      	adds	r2, r0, #0
 800d6c4:	0020      	movs	r0, r4
 800d6c6:	f7f9 f8f4 	bl	80068b2 <_lv_style_set_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int)
 800d6ca:	2198      	movs	r1, #152	; 0x98
    lv_style_set_border_width(&styles->bg_click, LV_STATE_CHECKED, 0);
 800d6cc:	4cbf      	ldr	r4, [pc, #764]	; (800d9cc <lv_theme_material_init+0x828>)
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	6820      	ldr	r0, [r4, #0]
 800d6d2:	0049      	lsls	r1, r1, #1
 800d6d4:	3008      	adds	r0, #8
 800d6d6:	f7f9 f8a7 	bl	8006828 <_lv_style_set_int>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_FOCUSED | LV_STATE_PRESSED, lv_color_darken(theme.color_primary,
 800d6da:	2133      	movs	r1, #51	; 0x33
 800d6dc:	89a8      	ldrh	r0, [r5, #12]
 800d6de:	6826      	ldr	r6, [r4, #0]
 800d6e0:	f7fe fbeb 	bl	800beba <lv_color_darken>
 800d6e4:	3608      	adds	r6, #8
 800d6e6:	1c02      	adds	r2, r0, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color)
 800d6e8:	49b9      	ldr	r1, [pc, #740]	; (800d9d0 <lv_theme_material_init+0x82c>)
 800d6ea:	0030      	movs	r0, r6
 800d6ec:	f7f9 f8e1 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_BORDER_PR);
 800d6f0:	6826      	ldr	r6, [r4, #0]
 800d6f2:	6a2b      	ldr	r3, [r5, #32]
 800d6f4:	3608      	adds	r6, #8
 800d6f6:	079b      	lsls	r3, r3, #30
 800d6f8:	d401      	bmi.n	800d6fe <lv_theme_material_init+0x55a>
 800d6fa:	f000 fe06 	bl	800e30a <lv_theme_material_init+0x1166>
 800d6fe:	48b5      	ldr	r0, [pc, #724]	; (800d9d4 <lv_theme_material_init+0x830>)
 800d700:	f7ff fc94 	bl	800d02c <lv_color_hex3>
 800d704:	1c02      	adds	r2, r0, #0
 800d706:	49b4      	ldr	r1, [pc, #720]	; (800d9d8 <lv_theme_material_init+0x834>)
 800d708:	0030      	movs	r0, r6
 800d70a:	f7f9 f8d2 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_BORDER_CHK);
 800d70e:	4db3      	ldr	r5, [pc, #716]	; (800d9dc <lv_theme_material_init+0x838>)
 800d710:	6826      	ldr	r6, [r4, #0]
 800d712:	6a2b      	ldr	r3, [r5, #32]
 800d714:	3608      	adds	r6, #8
 800d716:	079b      	lsls	r3, r3, #30
 800d718:	d401      	bmi.n	800d71e <lv_theme_material_init+0x57a>
 800d71a:	f000 fdfb 	bl	800e314 <lv_theme_material_init+0x1170>
 800d71e:	48b0      	ldr	r0, [pc, #704]	; (800d9e0 <lv_theme_material_init+0x83c>)
 800d720:	f7ff fd34 	bl	800d18c <lv_color_hex>
 800d724:	213a      	movs	r1, #58	; 0x3a
 800d726:	1c02      	adds	r2, r0, #0
 800d728:	31ff      	adds	r1, #255	; 0xff
 800d72a:	0030      	movs	r0, r6
 800d72c:	f7f9 f8c1 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_BORDER_CHK_PR);
 800d730:	6826      	ldr	r6, [r4, #0]
 800d732:	6a2b      	ldr	r3, [r5, #32]
 800d734:	3608      	adds	r6, #8
 800d736:	079b      	lsls	r3, r3, #30
 800d738:	d401      	bmi.n	800d73e <lv_theme_material_init+0x59a>
 800d73a:	f000 fdee 	bl	800e31a <lv_theme_material_init+0x1176>
 800d73e:	48a8      	ldr	r0, [pc, #672]	; (800d9e0 <lv_theme_material_init+0x83c>)
 800d740:	f7ff fd24 	bl	800d18c <lv_color_hex>
 800d744:	49a7      	ldr	r1, [pc, #668]	; (800d9e4 <lv_theme_material_init+0x840>)
 800d746:	1c02      	adds	r2, r0, #0
 800d748:	0030      	movs	r0, r6
 800d74a:	f7f9 f8b2 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_BORDER_DIS);
 800d74e:	6826      	ldr	r6, [r4, #0]
 800d750:	6a2b      	ldr	r3, [r5, #32]
 800d752:	3608      	adds	r6, #8
 800d754:	079b      	lsls	r3, r3, #30
 800d756:	d401      	bmi.n	800d75c <lv_theme_material_init+0x5b8>
 800d758:	f000 fde2 	bl	800e320 <lv_theme_material_init+0x117c>
 800d75c:	48a2      	ldr	r0, [pc, #648]	; (800d9e8 <lv_theme_material_init+0x844>)
 800d75e:	f7ff fd15 	bl	800d18c <lv_color_hex>
 800d762:	49a2      	ldr	r1, [pc, #648]	; (800d9ec <lv_theme_material_init+0x848>)
 800d764:	1c02      	adds	r2, r0, #0
 800d766:	0030      	movs	r0, r6
 800d768:	f7f9 f8a3 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
 800d76c:	6826      	ldr	r6, [r4, #0]
 800d76e:	6a2b      	ldr	r3, [r5, #32]
 800d770:	3608      	adds	r6, #8
 800d772:	079b      	lsls	r3, r3, #30
 800d774:	d401      	bmi.n	800d77a <lv_theme_material_init+0x5d6>
 800d776:	f000 fdd6 	bl	800e326 <lv_theme_material_init+0x1182>
 800d77a:	4899      	ldr	r0, [pc, #612]	; (800d9e0 <lv_theme_material_init+0x83c>)
 800d77c:	f7ff fd06 	bl	800d18c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
 800d780:	499b      	ldr	r1, [pc, #620]	; (800d9f0 <lv_theme_material_init+0x84c>)
 800d782:	1c02      	adds	r2, r0, #0
 800d784:	0030      	movs	r0, r6
 800d786:	f7f9 f894 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
 800d78a:	488e      	ldr	r0, [pc, #568]	; (800d9c4 <lv_theme_material_init+0x820>)
 800d78c:	f7ff fcfe 	bl	800d18c <lv_color_hex>
 800d790:	6826      	ldr	r6, [r4, #0]
 800d792:	1c02      	adds	r2, r0, #0
 800d794:	3608      	adds	r6, #8
 800d796:	4997      	ldr	r1, [pc, #604]	; (800d9f4 <lv_theme_material_init+0x850>)
 800d798:	0030      	movs	r0, r6
 800d79a:	f7f9 f88a 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
 800d79e:	4889      	ldr	r0, [pc, #548]	; (800d9c4 <lv_theme_material_init+0x820>)
 800d7a0:	f7ff fcf4 	bl	800d18c <lv_color_hex>
 800d7a4:	6826      	ldr	r6, [r4, #0]
 800d7a6:	1c02      	adds	r2, r0, #0
 800d7a8:	3608      	adds	r6, #8
 800d7aa:	0030      	movs	r0, r6
 800d7ac:	4992      	ldr	r1, [pc, #584]	; (800d9f8 <lv_theme_material_init+0x854>)
 800d7ae:	f7f9 f880 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
 800d7b2:	6826      	ldr	r6, [r4, #0]
 800d7b4:	6a2b      	ldr	r3, [r5, #32]
 800d7b6:	3608      	adds	r6, #8
 800d7b8:	079b      	lsls	r3, r3, #30
 800d7ba:	d401      	bmi.n	800d7c0 <lv_theme_material_init+0x61c>
 800d7bc:	f000 fdb6 	bl	800e32c <lv_theme_material_init+0x1188>
 800d7c0:	488e      	ldr	r0, [pc, #568]	; (800d9fc <lv_theme_material_init+0x858>)
 800d7c2:	f7ff fc33 	bl	800d02c <lv_color_hex3>
 800d7c6:	498e      	ldr	r1, [pc, #568]	; (800da00 <lv_theme_material_init+0x85c>)
 800d7c8:	1c02      	adds	r2, r0, #0
 800d7ca:	0030      	movs	r0, r6
 800d7cc:	f7f9 f871 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
 800d7d0:	6826      	ldr	r6, [r4, #0]
 800d7d2:	6a2b      	ldr	r3, [r5, #32]
 800d7d4:	3608      	adds	r6, #8
 800d7d6:	079b      	lsls	r3, r3, #30
 800d7d8:	d401      	bmi.n	800d7de <lv_theme_material_init+0x63a>
 800d7da:	f000 fdaa 	bl	800e332 <lv_theme_material_init+0x118e>
 800d7de:	4880      	ldr	r0, [pc, #512]	; (800d9e0 <lv_theme_material_init+0x83c>)
 800d7e0:	f7ff fcd4 	bl	800d18c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color)
 800d7e4:	4987      	ldr	r1, [pc, #540]	; (800da04 <lv_theme_material_init+0x860>)
 800d7e6:	1c02      	adds	r2, r0, #0
 800d7e8:	0030      	movs	r0, r6
 800d7ea:	f7f9 f862 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
 800d7ee:	4875      	ldr	r0, [pc, #468]	; (800d9c4 <lv_theme_material_init+0x820>)
 800d7f0:	f7ff fccc 	bl	800d18c <lv_color_hex>
 800d7f4:	6826      	ldr	r6, [r4, #0]
 800d7f6:	1c02      	adds	r2, r0, #0
 800d7f8:	3608      	adds	r6, #8
 800d7fa:	4983      	ldr	r1, [pc, #524]	; (800da08 <lv_theme_material_init+0x864>)
 800d7fc:	0030      	movs	r0, r6
 800d7fe:	f7f9 f858 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
 800d802:	4870      	ldr	r0, [pc, #448]	; (800d9c4 <lv_theme_material_init+0x820>)
 800d804:	f7ff fcc2 	bl	800d18c <lv_color_hex>
 800d808:	6826      	ldr	r6, [r4, #0]
 800d80a:	1c02      	adds	r2, r0, #0
 800d80c:	3608      	adds	r6, #8
 800d80e:	0030      	movs	r0, r6
 800d810:	497e      	ldr	r1, [pc, #504]	; (800da0c <lv_theme_material_init+0x868>)
 800d812:	f7f9 f84e 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
 800d816:	6826      	ldr	r6, [r4, #0]
 800d818:	6a2b      	ldr	r3, [r5, #32]
 800d81a:	3608      	adds	r6, #8
 800d81c:	079b      	lsls	r3, r3, #30
 800d81e:	d401      	bmi.n	800d824 <lv_theme_material_init+0x680>
 800d820:	f000 fd8a 	bl	800e338 <lv_theme_material_init+0x1194>
 800d824:	4875      	ldr	r0, [pc, #468]	; (800d9fc <lv_theme_material_init+0x858>)
 800d826:	f7ff fc01 	bl	800d02c <lv_color_hex3>
 800d82a:	4979      	ldr	r1, [pc, #484]	; (800da10 <lv_theme_material_init+0x86c>)
 800d82c:	1c02      	adds	r2, r0, #0
 800d82e:	0030      	movs	r0, r6
 800d830:	f7f9 f83f 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_transition_prop_5(&styles->bg_click, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
 800d834:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int)
 800d836:	2229      	movs	r2, #41	; 0x29
 800d838:	21b6      	movs	r1, #182	; 0xb6
 800d83a:	3008      	adds	r0, #8
 800d83c:	f7f8 fff4 	bl	8006828 <_lv_style_set_int>
    lv_style_reset(&styles->btn);
 800d840:	6820      	ldr	r0, [r4, #0]
 800d842:	3010      	adds	r0, #16
 800d844:	f7f8 ffbc 	bl	80067c0 <lv_style_reset>
    lv_style_set_radius(&styles->btn, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 800d848:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 800d84a:	4a72      	ldr	r2, [pc, #456]	; (800da14 <lv_theme_material_init+0x870>)
 800d84c:	3010      	adds	r0, #16
 800d84e:	2101      	movs	r1, #1
 800d850:	f7f8 ffea 	bl	8006828 <_lv_style_set_int>
    lv_style_set_bg_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_COVER);
 800d854:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 800d856:	22ff      	movs	r2, #255	; 0xff
 800d858:	3010      	adds	r0, #16
 800d85a:	212c      	movs	r1, #44	; 0x2c
 800d85c:	f7f9 f86e 	bl	800693c <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN);
 800d860:	6826      	ldr	r6, [r4, #0]
 800d862:	6a2b      	ldr	r3, [r5, #32]
 800d864:	3610      	adds	r6, #16
 800d866:	079b      	lsls	r3, r3, #30
 800d868:	d401      	bmi.n	800d86e <lv_theme_material_init+0x6ca>
 800d86a:	f000 fd68 	bl	800e33e <lv_theme_material_init+0x119a>
 800d86e:	4855      	ldr	r0, [pc, #340]	; (800d9c4 <lv_theme_material_init+0x820>)
 800d870:	f7ff fc8c 	bl	800d18c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 800d874:	2129      	movs	r1, #41	; 0x29
 800d876:	1c02      	adds	r2, r0, #0
 800d878:	0030      	movs	r0, r6
 800d87a:	f7f9 f81a 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_PR);
 800d87e:	6826      	ldr	r6, [r4, #0]
 800d880:	6a2b      	ldr	r3, [r5, #32]
 800d882:	3610      	adds	r6, #16
 800d884:	89af      	ldrh	r7, [r5, #12]
 800d886:	079b      	lsls	r3, r3, #30
 800d888:	d401      	bmi.n	800d88e <lv_theme_material_init+0x6ea>
 800d88a:	f000 fd5b 	bl	800e344 <lv_theme_material_init+0x11a0>
 800d88e:	484d      	ldr	r0, [pc, #308]	; (800d9c4 <lv_theme_material_init+0x820>)
 800d890:	f7ff fc7c 	bl	800d18c <lv_color_hex>
 800d894:	2233      	movs	r2, #51	; 0x33
 800d896:	1c01      	adds	r1, r0, #0
 800d898:	1c38      	adds	r0, r7, #0
 800d89a:	f7ff fb97 	bl	800cfcc <lv_color_mix>
 800d89e:	4947      	ldr	r1, [pc, #284]	; (800d9bc <lv_theme_material_init+0x818>)
 800d8a0:	1c02      	adds	r2, r0, #0
 800d8a2:	0030      	movs	r0, r6
 800d8a4:	f7f9 f805 	bl	80068b2 <_lv_style_set_color>
 800d8a8:	212a      	movs	r1, #42	; 0x2a
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED, COLOR_BTN_CHK);
 800d8aa:	6820      	ldr	r0, [r4, #0]
 800d8ac:	89aa      	ldrh	r2, [r5, #12]
 800d8ae:	3010      	adds	r0, #16
 800d8b0:	31ff      	adds	r1, #255	; 0xff
 800d8b2:	f7f8 fffe 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BTN_CHK_PR);
 800d8b6:	214c      	movs	r1, #76	; 0x4c
 800d8b8:	89a8      	ldrh	r0, [r5, #12]
 800d8ba:	6826      	ldr	r6, [r4, #0]
 800d8bc:	f7fe fafd 	bl	800beba <lv_color_darken>
 800d8c0:	3610      	adds	r6, #16
 800d8c2:	1c02      	adds	r2, r0, #0
 800d8c4:	493e      	ldr	r1, [pc, #248]	; (800d9c0 <lv_theme_material_init+0x81c>)
 800d8c6:	0030      	movs	r0, r6
 800d8c8:	f7f8 fff3 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN);
 800d8cc:	6826      	ldr	r6, [r4, #0]
 800d8ce:	6a2b      	ldr	r3, [r5, #32]
 800d8d0:	3610      	adds	r6, #16
 800d8d2:	079b      	lsls	r3, r3, #30
 800d8d4:	d401      	bmi.n	800d8da <lv_theme_material_init+0x736>
 800d8d6:	f000 fd3c 	bl	800e352 <lv_theme_material_init+0x11ae>
 800d8da:	483a      	ldr	r0, [pc, #232]	; (800d9c4 <lv_theme_material_init+0x820>)
 800d8dc:	f7ff fc56 	bl	800d18c <lv_color_hex>
 800d8e0:	4939      	ldr	r1, [pc, #228]	; (800d9c8 <lv_theme_material_init+0x824>)
 800d8e2:	1c02      	adds	r2, r0, #0
 800d8e4:	0030      	movs	r0, r6
 800d8e6:	f7f8 ffe4 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED | LV_STATE_CHECKED, COLOR_BTN_DIS);
 800d8ea:	6826      	ldr	r6, [r4, #0]
 800d8ec:	6a2b      	ldr	r3, [r5, #32]
 800d8ee:	3610      	adds	r6, #16
 800d8f0:	079b      	lsls	r3, r3, #30
 800d8f2:	d401      	bmi.n	800d8f8 <lv_theme_material_init+0x754>
 800d8f4:	f000 fd30 	bl	800e358 <lv_theme_material_init+0x11b4>
 800d8f8:	4836      	ldr	r0, [pc, #216]	; (800d9d4 <lv_theme_material_init+0x830>)
 800d8fa:	f7ff fb97 	bl	800d02c <lv_color_hex3>
 800d8fe:	4946      	ldr	r1, [pc, #280]	; (800da18 <lv_theme_material_init+0x874>)
 800d900:	1c02      	adds	r2, r0, #0
 800d902:	0030      	movs	r0, r6
 800d904:	f7f8 ffd5 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_border_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN_BORDER);
 800d908:	6820      	ldr	r0, [r4, #0]
 800d90a:	89aa      	ldrh	r2, [r5, #12]
 800d90c:	3010      	adds	r0, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color)
 800d90e:	2139      	movs	r1, #57	; 0x39
 800d910:	f7f8 ffcf 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_border_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_BORDER_PR);
 800d914:	6820      	ldr	r0, [r4, #0]
 800d916:	89aa      	ldrh	r2, [r5, #12]
 800d918:	3010      	adds	r0, #16
 800d91a:	492f      	ldr	r1, [pc, #188]	; (800d9d8 <lv_theme_material_init+0x834>)
 800d91c:	f7f8 ffc9 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_border_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN_BORDER_INA);
 800d920:	6826      	ldr	r6, [r4, #0]
 800d922:	6a2b      	ldr	r3, [r5, #32]
 800d924:	3610      	adds	r6, #16
 800d926:	079b      	lsls	r3, r3, #30
 800d928:	d401      	bmi.n	800d92e <lv_theme_material_init+0x78a>
 800d92a:	f000 fd18 	bl	800e35e <lv_theme_material_init+0x11ba>
 800d92e:	483b      	ldr	r0, [pc, #236]	; (800da1c <lv_theme_material_init+0x878>)
 800d930:	f7ff fb7c 	bl	800d02c <lv_color_hex3>
 800d934:	1c02      	adds	r2, r0, #0
 800d936:	492d      	ldr	r1, [pc, #180]	; (800d9ec <lv_theme_material_init+0x848>)
 800d938:	0030      	movs	r0, r6
 800d93a:	f7f8 ffba 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
 800d93e:	2000      	movs	r0, #0
 800d940:	6826      	ldr	r6, [r4, #0]
 800d942:	f7fd fef5 	bl	800b730 <lv_disp_get_dpi>
 800d946:	3610      	adds	r6, #16
 800d948:	2201      	movs	r2, #1
 800d94a:	2877      	cmp	r0, #119	; 0x77
 800d94c:	dd07      	ble.n	800d95e <lv_theme_material_init+0x7ba>
 800d94e:	2000      	movs	r0, #0
 800d950:	f7fd feee 	bl	800b730 <lv_disp_get_dpi>
 800d954:	2150      	movs	r1, #80	; 0x50
 800d956:	3028      	adds	r0, #40	; 0x28
 800d958:	f7f2 fc96 	bl	8000288 <__divsi3>
 800d95c:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int)
 800d95e:	0030      	movs	r0, r6
 800d960:	2130      	movs	r1, #48	; 0x30
 800d962:	f7f8 ff61 	bl	8006828 <_lv_style_set_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa)
 800d966:	219e      	movs	r1, #158	; 0x9e
    lv_style_set_border_opa(&styles->btn, LV_STATE_CHECKED, LV_OPA_TRANSP);
 800d968:	6820      	ldr	r0, [r4, #0]
 800d96a:	2200      	movs	r2, #0
 800d96c:	3010      	adds	r0, #16
 800d96e:	0049      	lsls	r1, r1, #1
 800d970:	f7f8 ffe4 	bl	800693c <_lv_style_set_opa>
    lv_style_set_text_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 800d974:	6826      	ldr	r6, [r4, #0]
 800d976:	6a2b      	ldr	r3, [r5, #32]
 800d978:	3610      	adds	r6, #16
 800d97a:	079b      	lsls	r3, r3, #30
 800d97c:	d401      	bmi.n	800d982 <lv_theme_material_init+0x7de>
 800d97e:	f000 fcf3 	bl	800e368 <lv_theme_material_init+0x11c4>
 800d982:	480a      	ldr	r0, [pc, #40]	; (800d9ac <lv_theme_material_init+0x808>)
 800d984:	f7ff fc02 	bl	800d18c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
 800d988:	4909      	ldr	r1, [pc, #36]	; (800d9b0 <lv_theme_material_init+0x80c>)
 800d98a:	1c02      	adds	r2, r0, #0
 800d98c:	0030      	movs	r0, r6
 800d98e:	f7f8 ff90 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 800d992:	6826      	ldr	r6, [r4, #0]
 800d994:	6a2b      	ldr	r3, [r5, #32]
 800d996:	3610      	adds	r6, #16
 800d998:	079b      	lsls	r3, r3, #30
 800d99a:	d401      	bmi.n	800d9a0 <lv_theme_material_init+0x7fc>
 800d99c:	f000 fce7 	bl	800e36e <lv_theme_material_init+0x11ca>
 800d9a0:	e03e      	b.n	800da20 <lv_theme_material_init+0x87c>
 800d9a2:	46c0      	nop			; (mov r8, r8)
 800d9a4:	00d4d7d9 	.word	0x00d4d7d9
 800d9a8:	00dfe7ed 	.word	0x00dfe7ed
 800d9ac:	0031404f 	.word	0x0031404f
 800d9b0:	00008089 	.word	0x00008089
 800d9b4:	000080a9 	.word	0x000080a9
 800d9b8:	00eeeeee 	.word	0x00eeeeee
 800d9bc:	00001029 	.word	0x00001029
 800d9c0:	00001129 	.word	0x00001129
 800d9c4:	00ffffff 	.word	0x00ffffff
 800d9c8:	00002029 	.word	0x00002029
 800d9cc:	20006eac 	.word	0x20006eac
 800d9d0:	00001239 	.word	0x00001239
 800d9d4:	00000ccc 	.word	0x00000ccc
 800d9d8:	00001039 	.word	0x00001039
 800d9dc:	20006eb0 	.word	0x20006eb0
 800d9e0:	003b3e42 	.word	0x003b3e42
 800d9e4:	00001139 	.word	0x00001139
 800d9e8:	00d6dde3 	.word	0x00d6dde3
 800d9ec:	00002039 	.word	0x00002039
 800d9f0:	00009089 	.word	0x00009089
 800d9f4:	00008189 	.word	0x00008189
 800d9f8:	00009189 	.word	0x00009189
 800d9fc:	00000aaa 	.word	0x00000aaa
 800da00:	0000a089 	.word	0x0000a089
 800da04:	000090a9 	.word	0x000090a9
 800da08:	000081a9 	.word	0x000081a9
 800da0c:	000091a9 	.word	0x000091a9
 800da10:	0000a0a9 	.word	0x0000a0a9
 800da14:	00007fff 	.word	0x00007fff
 800da18:	00002129 	.word	0x00002129
 800da1c:	00000888 	.word	0x00000888
 800da20:	48f2      	ldr	r0, [pc, #968]	; (800ddec <lv_theme_material_init+0xc48>)
 800da22:	f7ff fbb3 	bl	800d18c <lv_color_hex>
 800da26:	49f2      	ldr	r1, [pc, #968]	; (800ddf0 <lv_theme_material_init+0xc4c>)
 800da28:	1c02      	adds	r2, r0, #0
 800da2a:	0030      	movs	r0, r6
 800da2c:	f7f8 ff41 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
 800da30:	48f0      	ldr	r0, [pc, #960]	; (800ddf4 <lv_theme_material_init+0xc50>)
 800da32:	f7ff fbab 	bl	800d18c <lv_color_hex>
 800da36:	6826      	ldr	r6, [r4, #0]
 800da38:	1c02      	adds	r2, r0, #0
 800da3a:	3610      	adds	r6, #16
 800da3c:	49ee      	ldr	r1, [pc, #952]	; (800ddf8 <lv_theme_material_init+0xc54>)
 800da3e:	0030      	movs	r0, r6
 800da40:	f7f8 ff37 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
 800da44:	48eb      	ldr	r0, [pc, #940]	; (800ddf4 <lv_theme_material_init+0xc50>)
 800da46:	f7ff fba1 	bl	800d18c <lv_color_hex>
 800da4a:	6826      	ldr	r6, [r4, #0]
 800da4c:	1c02      	adds	r2, r0, #0
 800da4e:	3610      	adds	r6, #16
 800da50:	49ea      	ldr	r1, [pc, #936]	; (800ddfc <lv_theme_material_init+0xc58>)
 800da52:	0030      	movs	r0, r6
 800da54:	f7f8 ff2d 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
 800da58:	48e9      	ldr	r0, [pc, #932]	; (800de00 <lv_theme_material_init+0xc5c>)
 800da5a:	f7ff fb97 	bl	800d18c <lv_color_hex>
 800da5e:	6826      	ldr	r6, [r4, #0]
 800da60:	1c02      	adds	r2, r0, #0
 800da62:	3610      	adds	r6, #16
 800da64:	0030      	movs	r0, r6
 800da66:	49e7      	ldr	r1, [pc, #924]	; (800de04 <lv_theme_material_init+0xc60>)
 800da68:	f7f8 ff23 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 800da6c:	6826      	ldr	r6, [r4, #0]
 800da6e:	6a2b      	ldr	r3, [r5, #32]
 800da70:	3610      	adds	r6, #16
 800da72:	079b      	lsls	r3, r3, #30
 800da74:	d401      	bmi.n	800da7a <lv_theme_material_init+0x8d6>
 800da76:	f000 fc7d 	bl	800e374 <lv_theme_material_init+0x11d0>
 800da7a:	48dc      	ldr	r0, [pc, #880]	; (800ddec <lv_theme_material_init+0xc48>)
 800da7c:	f7ff fb86 	bl	800d18c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color)
 800da80:	49e1      	ldr	r1, [pc, #900]	; (800de08 <lv_theme_material_init+0xc64>)
 800da82:	1c02      	adds	r2, r0, #0
 800da84:	0030      	movs	r0, r6
 800da86:	f7f8 ff14 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 800da8a:	6826      	ldr	r6, [r4, #0]
 800da8c:	6a2b      	ldr	r3, [r5, #32]
 800da8e:	3610      	adds	r6, #16
 800da90:	079b      	lsls	r3, r3, #30
 800da92:	d401      	bmi.n	800da98 <lv_theme_material_init+0x8f4>
 800da94:	f000 fc71 	bl	800e37a <lv_theme_material_init+0x11d6>
 800da98:	48d4      	ldr	r0, [pc, #848]	; (800ddec <lv_theme_material_init+0xc48>)
 800da9a:	f7ff fb77 	bl	800d18c <lv_color_hex>
 800da9e:	49db      	ldr	r1, [pc, #876]	; (800de0c <lv_theme_material_init+0xc68>)
 800daa0:	1c02      	adds	r2, r0, #0
 800daa2:	0030      	movs	r0, r6
 800daa4:	f7f8 ff05 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, lv_color_hex(0xffffff));
 800daa8:	48d2      	ldr	r0, [pc, #840]	; (800ddf4 <lv_theme_material_init+0xc50>)
 800daaa:	f7ff fb6f 	bl	800d18c <lv_color_hex>
 800daae:	6826      	ldr	r6, [r4, #0]
 800dab0:	1c02      	adds	r2, r0, #0
 800dab2:	3610      	adds	r6, #16
 800dab4:	49d5      	ldr	r1, [pc, #852]	; (800de0c <lv_theme_material_init+0xc68>)
 800dab6:	0030      	movs	r0, r6
 800dab8:	f7f8 fefb 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
 800dabc:	48cd      	ldr	r0, [pc, #820]	; (800ddf4 <lv_theme_material_init+0xc50>)
 800dabe:	f7ff fb65 	bl	800d18c <lv_color_hex>
 800dac2:	6826      	ldr	r6, [r4, #0]
 800dac4:	1c02      	adds	r2, r0, #0
 800dac6:	3610      	adds	r6, #16
 800dac8:	49d1      	ldr	r1, [pc, #836]	; (800de10 <lv_theme_material_init+0xc6c>)
 800daca:	0030      	movs	r0, r6
 800dacc:	f7f8 fef1 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
 800dad0:	48cb      	ldr	r0, [pc, #812]	; (800de00 <lv_theme_material_init+0xc5c>)
 800dad2:	f7ff fb5b 	bl	800d18c <lv_color_hex>
 800dad6:	6826      	ldr	r6, [r4, #0]
 800dad8:	1c02      	adds	r2, r0, #0
 800dada:	3610      	adds	r6, #16
 800dadc:	0030      	movs	r0, r6
 800dade:	49cd      	ldr	r1, [pc, #820]	; (800de14 <lv_theme_material_init+0xc70>)
 800dae0:	f7f8 fee7 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 800dae4:	6826      	ldr	r6, [r4, #0]
 800dae6:	6a2b      	ldr	r3, [r5, #32]
 800dae8:	3610      	adds	r6, #16
 800daea:	079b      	lsls	r3, r3, #30
 800daec:	d401      	bmi.n	800daf2 <lv_theme_material_init+0x94e>
 800daee:	f000 fc47 	bl	800e380 <lv_theme_material_init+0x11dc>
 800daf2:	48be      	ldr	r0, [pc, #760]	; (800ddec <lv_theme_material_init+0xc48>)
 800daf4:	f7ff fb4a 	bl	800d18c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color)
 800daf8:	2179      	movs	r1, #121	; 0x79
 800dafa:	1c02      	adds	r2, r0, #0
 800dafc:	0030      	movs	r0, r6
 800dafe:	f7f8 fed8 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 800db02:	6826      	ldr	r6, [r4, #0]
 800db04:	6a2b      	ldr	r3, [r5, #32]
 800db06:	3610      	adds	r6, #16
 800db08:	079b      	lsls	r3, r3, #30
 800db0a:	d401      	bmi.n	800db10 <lv_theme_material_init+0x96c>
 800db0c:	f000 fc3b 	bl	800e386 <lv_theme_material_init+0x11e2>
 800db10:	48b6      	ldr	r0, [pc, #728]	; (800ddec <lv_theme_material_init+0xc48>)
 800db12:	f7ff fb3b 	bl	800d18c <lv_color_hex>
 800db16:	49c0      	ldr	r1, [pc, #768]	; (800de18 <lv_theme_material_init+0xc74>)
 800db18:	1c02      	adds	r2, r0, #0
 800db1a:	0030      	movs	r0, r6
 800db1c:	f7f8 fec9 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
 800db20:	48b4      	ldr	r0, [pc, #720]	; (800ddf4 <lv_theme_material_init+0xc50>)
 800db22:	f7ff fb33 	bl	800d18c <lv_color_hex>
 800db26:	217a      	movs	r1, #122	; 0x7a
 800db28:	6826      	ldr	r6, [r4, #0]
 800db2a:	1c02      	adds	r2, r0, #0
 800db2c:	3610      	adds	r6, #16
 800db2e:	31ff      	adds	r1, #255	; 0xff
 800db30:	0030      	movs	r0, r6
 800db32:	f7f8 febe 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
 800db36:	48af      	ldr	r0, [pc, #700]	; (800ddf4 <lv_theme_material_init+0xc50>)
 800db38:	f7ff fb28 	bl	800d18c <lv_color_hex>
 800db3c:	6826      	ldr	r6, [r4, #0]
 800db3e:	1c02      	adds	r2, r0, #0
 800db40:	3610      	adds	r6, #16
 800db42:	49b6      	ldr	r1, [pc, #728]	; (800de1c <lv_theme_material_init+0xc78>)
 800db44:	0030      	movs	r0, r6
 800db46:	f7f8 feb4 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
 800db4a:	48ad      	ldr	r0, [pc, #692]	; (800de00 <lv_theme_material_init+0xc5c>)
 800db4c:	f7ff fb1e 	bl	800d18c <lv_color_hex>
 800db50:	6826      	ldr	r6, [r4, #0]
 800db52:	1c02      	adds	r2, r0, #0
 800db54:	3610      	adds	r6, #16
 800db56:	0030      	movs	r0, r6
 800db58:	49b1      	ldr	r1, [pc, #708]	; (800de20 <lv_theme_material_init+0xc7c>)
 800db5a:	f7f8 feaa 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
 800db5e:	2000      	movs	r0, #0
 800db60:	6827      	ldr	r7, [r4, #0]
 800db62:	2628      	movs	r6, #40	; 0x28
 800db64:	f7fd fde4 	bl	800b730 <lv_disp_get_dpi>
 800db68:	4370      	muls	r0, r6
 800db6a:	3710      	adds	r7, #16
 800db6c:	2201      	movs	r2, #1
 800db6e:	28ef      	cmp	r0, #239	; 0xef
 800db70:	dd08      	ble.n	800db84 <lv_theme_material_init+0x9e0>
 800db72:	2000      	movs	r0, #0
 800db74:	f7fd fddc 	bl	800b730 <lv_disp_get_dpi>
 800db78:	4370      	muls	r0, r6
 800db7a:	21a0      	movs	r1, #160	; 0xa0
 800db7c:	3050      	adds	r0, #80	; 0x50
 800db7e:	f7f2 fb83 	bl	8000288 <__divsi3>
 800db82:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 800db84:	0038      	movs	r0, r7
 800db86:	2112      	movs	r1, #18
 800db88:	f7f8 fe4e 	bl	8006828 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
 800db8c:	2000      	movs	r0, #0
 800db8e:	6827      	ldr	r7, [r4, #0]
 800db90:	2628      	movs	r6, #40	; 0x28
 800db92:	f7fd fdcd 	bl	800b730 <lv_disp_get_dpi>
 800db96:	4370      	muls	r0, r6
 800db98:	3710      	adds	r7, #16
 800db9a:	2201      	movs	r2, #1
 800db9c:	28ef      	cmp	r0, #239	; 0xef
 800db9e:	dd08      	ble.n	800dbb2 <lv_theme_material_init+0xa0e>
 800dba0:	2000      	movs	r0, #0
 800dba2:	f7fd fdc5 	bl	800b730 <lv_disp_get_dpi>
 800dba6:	4370      	muls	r0, r6
 800dba8:	21a0      	movs	r1, #160	; 0xa0
 800dbaa:	3050      	adds	r0, #80	; 0x50
 800dbac:	f7f2 fb6c 	bl	8000288 <__divsi3>
 800dbb0:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 800dbb2:	0038      	movs	r0, r7
 800dbb4:	2113      	movs	r1, #19
 800dbb6:	f7f8 fe37 	bl	8006828 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
 800dbba:	2000      	movs	r0, #0
 800dbbc:	6827      	ldr	r7, [r4, #0]
 800dbbe:	260f      	movs	r6, #15
 800dbc0:	f7fd fdb6 	bl	800b730 <lv_disp_get_dpi>
 800dbc4:	4370      	muls	r0, r6
 800dbc6:	3710      	adds	r7, #16
 800dbc8:	2201      	movs	r2, #1
 800dbca:	28ef      	cmp	r0, #239	; 0xef
 800dbcc:	dd08      	ble.n	800dbe0 <lv_theme_material_init+0xa3c>
 800dbce:	2000      	movs	r0, #0
 800dbd0:	f7fd fdae 	bl	800b730 <lv_disp_get_dpi>
 800dbd4:	4370      	muls	r0, r6
 800dbd6:	21a0      	movs	r1, #160	; 0xa0
 800dbd8:	3050      	adds	r0, #80	; 0x50
 800dbda:	f7f2 fb55 	bl	8000288 <__divsi3>
 800dbde:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 800dbe0:	0038      	movs	r0, r7
 800dbe2:	2110      	movs	r1, #16
 800dbe4:	f7f8 fe20 	bl	8006828 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
 800dbe8:	2000      	movs	r0, #0
 800dbea:	6827      	ldr	r7, [r4, #0]
 800dbec:	260f      	movs	r6, #15
 800dbee:	f7fd fd9f 	bl	800b730 <lv_disp_get_dpi>
 800dbf2:	4370      	muls	r0, r6
 800dbf4:	3710      	adds	r7, #16
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	28ef      	cmp	r0, #239	; 0xef
 800dbfa:	dd08      	ble.n	800dc0e <lv_theme_material_init+0xa6a>
 800dbfc:	2000      	movs	r0, #0
 800dbfe:	f7fd fd97 	bl	800b730 <lv_disp_get_dpi>
 800dc02:	4370      	muls	r0, r6
 800dc04:	21a0      	movs	r1, #160	; 0xa0
 800dc06:	3050      	adds	r0, #80	; 0x50
 800dc08:	f7f2 fb3e 	bl	8000288 <__divsi3>
 800dc0c:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 800dc0e:	0038      	movs	r0, r7
 800dc10:	2111      	movs	r1, #17
 800dc12:	f7f8 fe09 	bl	8006828 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
 800dc16:	2000      	movs	r0, #0
 800dc18:	6827      	ldr	r7, [r4, #0]
 800dc1a:	2614      	movs	r6, #20
 800dc1c:	f7fd fd88 	bl	800b730 <lv_disp_get_dpi>
 800dc20:	4370      	muls	r0, r6
 800dc22:	3710      	adds	r7, #16
 800dc24:	2201      	movs	r2, #1
 800dc26:	28ef      	cmp	r0, #239	; 0xef
 800dc28:	dd08      	ble.n	800dc3c <lv_theme_material_init+0xa98>
 800dc2a:	2000      	movs	r0, #0
 800dc2c:	f7fd fd80 	bl	800b730 <lv_disp_get_dpi>
 800dc30:	4370      	muls	r0, r6
 800dc32:	21a0      	movs	r1, #160	; 0xa0
 800dc34:	3050      	adds	r0, #80	; 0x50
 800dc36:	f7f2 fb27 	bl	8000288 <__divsi3>
 800dc3a:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 800dc3c:	0038      	movs	r0, r7
 800dc3e:	2114      	movs	r1, #20
 800dc40:	f7f8 fdf2 	bl	8006828 <_lv_style_set_int>
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, OUTLINE_WIDTH);
 800dc44:	2620      	movs	r6, #32
 800dc46:	2200      	movs	r2, #0
 800dc48:	6827      	ldr	r7, [r4, #0]
 800dc4a:	6a2b      	ldr	r3, [r5, #32]
 800dc4c:	3710      	adds	r7, #16
 800dc4e:	401e      	ands	r6, r3
 800dc50:	4296      	cmp	r6, r2
 800dc52:	d10d      	bne.n	800dc70 <lv_theme_material_init+0xacc>
 800dc54:	0010      	movs	r0, r2
 800dc56:	f7fd fd6b 	bl	800b730 <lv_disp_get_dpi>
 800dc5a:	2201      	movs	r2, #1
 800dc5c:	2877      	cmp	r0, #119	; 0x77
 800dc5e:	dd07      	ble.n	800dc70 <lv_theme_material_init+0xacc>
 800dc60:	0030      	movs	r0, r6
 800dc62:	f7fd fd65 	bl	800b730 <lv_disp_get_dpi>
 800dc66:	2150      	movs	r1, #80	; 0x50
 800dc68:	3028      	adds	r0, #40	; 0x28
 800dc6a:	f7f2 fb0d 	bl	8000288 <__divsi3>
 800dc6e:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int)
 800dc70:	2140      	movs	r1, #64	; 0x40
 800dc72:	0038      	movs	r0, r7
 800dc74:	f7f8 fdd8 	bl	8006828 <_lv_style_set_int>
    lv_style_set_outline_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_0);
 800dc78:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa)
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	3010      	adds	r0, #16
 800dc7e:	214c      	movs	r1, #76	; 0x4c
 800dc80:	f7f8 fe5c 	bl	800693c <_lv_style_set_opa>
 800dc84:	2193      	movs	r1, #147	; 0x93
    lv_style_set_outline_opa(&styles->btn, LV_STATE_FOCUSED, LV_OPA_50);
 800dc86:	6820      	ldr	r0, [r4, #0]
 800dc88:	227f      	movs	r2, #127	; 0x7f
 800dc8a:	3010      	adds	r0, #16
 800dc8c:	0089      	lsls	r1, r1, #2
 800dc8e:	f7f8 fe55 	bl	800693c <_lv_style_set_opa>
    lv_style_set_outline_color(&styles->btn, LV_STATE_DEFAULT, theme.color_primary);
 800dc92:	6820      	ldr	r0, [r4, #0]
 800dc94:	89aa      	ldrh	r2, [r5, #12]
 800dc96:	3010      	adds	r0, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color)
 800dc98:	2149      	movs	r1, #73	; 0x49
 800dc9a:	f7f8 fe0a 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_outline_color(&styles->btn, LV_STATE_EDITED, theme.color_secondary);
 800dc9e:	6820      	ldr	r0, [r4, #0]
 800dca0:	89ea      	ldrh	r2, [r5, #14]
 800dca2:	3010      	adds	r0, #16
 800dca4:	495f      	ldr	r1, [pc, #380]	; (800de24 <lv_theme_material_init+0xc80>)
 800dca6:	f7f8 fe04 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_transition_time(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
 800dcaa:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int)
 800dcac:	2200      	movs	r2, #0
 800dcae:	3010      	adds	r0, #16
 800dcb0:	21b0      	movs	r1, #176	; 0xb0
 800dcb2:	f7f8 fdb9 	bl	8006828 <_lv_style_set_int>
    lv_style_set_transition_prop_4(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BORDER_OPA);
 800dcb6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int)
 800dcb8:	223c      	movs	r2, #60	; 0x3c
 800dcba:	3010      	adds	r0, #16
 800dcbc:	21b5      	movs	r1, #181	; 0xb5
 800dcbe:	f7f8 fdb3 	bl	8006828 <_lv_style_set_int>
    lv_style_set_transition_prop_5(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
 800dcc2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int)
 800dcc4:	2229      	movs	r2, #41	; 0x29
 800dcc6:	3010      	adds	r0, #16
 800dcc8:	21b6      	movs	r1, #182	; 0xb6
 800dcca:	f7f8 fdad 	bl	8006828 <_lv_style_set_int>
    lv_style_set_transition_prop_6(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
 800dcce:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int)
 800dcd0:	224c      	movs	r2, #76	; 0x4c
 800dcd2:	3010      	adds	r0, #16
 800dcd4:	21b7      	movs	r1, #183	; 0xb7
 800dcd6:	f7f8 fda7 	bl	8006828 <_lv_style_set_int>
    lv_style_set_transition_delay(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
 800dcda:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int)
 800dcdc:	2200      	movs	r2, #0
 800dcde:	3010      	adds	r0, #16
 800dce0:	21b1      	movs	r1, #177	; 0xb1
 800dce2:	f7f8 fda1 	bl	8006828 <_lv_style_set_int>
    lv_style_set_transition_delay(&styles->btn, LV_STATE_PRESSED, 0);
 800dce6:	6820      	ldr	r0, [r4, #0]
 800dce8:	2200      	movs	r2, #0
 800dcea:	3010      	adds	r0, #16
 800dcec:	494e      	ldr	r1, [pc, #312]	; (800de28 <lv_theme_material_init+0xc84>)
 800dcee:	f7f8 fd9b 	bl	8006828 <_lv_style_set_int>
    lv_style_reset(&styles->pad_inner);
 800dcf2:	6820      	ldr	r0, [r4, #0]
 800dcf4:	3014      	adds	r0, #20
 800dcf6:	f7f8 fd63 	bl	80067c0 <lv_style_reset>
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 800dcfa:	6826      	ldr	r6, [r4, #0]
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 800dcfc:	2000      	movs	r0, #0
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 800dcfe:	3614      	adds	r6, #20
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 800dd00:	f7fd fd24 	bl	800b74c <lv_disp_get_size_category>
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 800dd04:	2801      	cmp	r0, #1
 800dd06:	d900      	bls.n	800dd0a <lv_theme_material_init+0xb66>
 800dd08:	e340      	b.n	800e38c <lv_theme_material_init+0x11e8>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 800dd0a:	2000      	movs	r0, #0
 800dd0c:	f7fd fd10 	bl	800b730 <lv_disp_get_dpi>
 800dd10:	2714      	movs	r7, #20
 800dd12:	4378      	muls	r0, r7
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 800dd14:	2201      	movs	r2, #1
 800dd16:	28ef      	cmp	r0, #239	; 0xef
 800dd18:	dd08      	ble.n	800dd2c <lv_theme_material_init+0xb88>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 800dd1a:	2000      	movs	r0, #0
 800dd1c:	f7fd fd08 	bl	800b730 <lv_disp_get_dpi>
 800dd20:	4378      	muls	r0, r7
 800dd22:	21a0      	movs	r1, #160	; 0xa0
 800dd24:	3050      	adds	r0, #80	; 0x50
 800dd26:	f7f2 faaf 	bl	8000288 <__divsi3>
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 800dd2a:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 800dd2c:	2114      	movs	r1, #20
 800dd2e:	0030      	movs	r0, r6
 800dd30:	f7f8 fd7a 	bl	8006828 <_lv_style_set_int>
    lv_style_reset(&styles->pad_small);
 800dd34:	6820      	ldr	r0, [r4, #0]
 800dd36:	3018      	adds	r0, #24
 800dd38:	f7f8 fd42 	bl	80067c0 <lv_style_reset>
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(10) : LV_DPX(20);
 800dd3c:	2000      	movs	r0, #0
 800dd3e:	f7fd fd05 	bl	800b74c <lv_disp_get_size_category>
 800dd42:	2801      	cmp	r0, #1
 800dd44:	d900      	bls.n	800dd48 <lv_theme_material_init+0xba4>
 800dd46:	e326      	b.n	800e396 <lv_theme_material_init+0x11f2>
 800dd48:	2000      	movs	r0, #0
 800dd4a:	f7fd fcf1 	bl	800b730 <lv_disp_get_dpi>
 800dd4e:	260a      	movs	r6, #10
 800dd50:	4370      	muls	r0, r6
 800dd52:	28ef      	cmp	r0, #239	; 0xef
 800dd54:	dd00      	ble.n	800dd58 <lv_theme_material_init+0xbb4>
 800dd56:	e323      	b.n	800e3a0 <lv_theme_material_init+0x11fc>
 800dd58:	2601      	movs	r6, #1
    lv_style_set_pad_left(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
 800dd5a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 800dd5c:	0032      	movs	r2, r6
 800dd5e:	3018      	adds	r0, #24
 800dd60:	2112      	movs	r1, #18
 800dd62:	f7f8 fd61 	bl	8006828 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
 800dd66:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 800dd68:	0032      	movs	r2, r6
 800dd6a:	3018      	adds	r0, #24
 800dd6c:	2113      	movs	r1, #19
 800dd6e:	f7f8 fd5b 	bl	8006828 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
 800dd72:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 800dd74:	0032      	movs	r2, r6
 800dd76:	3018      	adds	r0, #24
 800dd78:	2110      	movs	r1, #16
 800dd7a:	f7f8 fd55 	bl	8006828 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
 800dd7e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 800dd80:	0032      	movs	r2, r6
 800dd82:	3018      	adds	r0, #24
 800dd84:	2111      	movs	r1, #17
 800dd86:	f7f8 fd4f 	bl	8006828 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
 800dd8a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 800dd8c:	0032      	movs	r2, r6
 800dd8e:	2114      	movs	r1, #20
 800dd90:	3018      	adds	r0, #24
 800dd92:	f7f8 fd49 	bl	8006828 <_lv_style_set_int>
    lv_style_reset(&styles->bar_bg);
 800dd96:	6820      	ldr	r0, [r4, #0]
 800dd98:	3028      	adds	r0, #40	; 0x28
 800dd9a:	f7f8 fd11 	bl	80067c0 <lv_style_reset>
    lv_style_set_radius(&styles->bar_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 800dd9e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 800dda0:	4a22      	ldr	r2, [pc, #136]	; (800de2c <lv_theme_material_init+0xc88>)
 800dda2:	3028      	adds	r0, #40	; 0x28
 800dda4:	2101      	movs	r1, #1
 800dda6:	f7f8 fd3f 	bl	8006828 <_lv_style_set_int>
    lv_style_set_bg_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
 800ddaa:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 800ddac:	22ff      	movs	r2, #255	; 0xff
 800ddae:	3028      	adds	r0, #40	; 0x28
 800ddb0:	212c      	movs	r1, #44	; 0x2c
 800ddb2:	f7f8 fdc3 	bl	800693c <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->bar_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
 800ddb6:	6826      	ldr	r6, [r4, #0]
 800ddb8:	6a2b      	ldr	r3, [r5, #32]
 800ddba:	3628      	adds	r6, #40	; 0x28
 800ddbc:	079b      	lsls	r3, r3, #30
 800ddbe:	d400      	bmi.n	800ddc2 <lv_theme_material_init+0xc1e>
 800ddc0:	e2f8      	b.n	800e3b4 <lv_theme_material_init+0x1210>
 800ddc2:	481b      	ldr	r0, [pc, #108]	; (800de30 <lv_theme_material_init+0xc8c>)
 800ddc4:	f7ff f9e2 	bl	800d18c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 800ddc8:	2129      	movs	r1, #41	; 0x29
 800ddca:	1c02      	adds	r2, r0, #0
 800ddcc:	0030      	movs	r0, r6
 800ddce:	f7f8 fd70 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
 800ddd2:	6826      	ldr	r6, [r4, #0]
 800ddd4:	6a2b      	ldr	r3, [r5, #32]
 800ddd6:	3628      	adds	r6, #40	; 0x28
 800ddd8:	4f16      	ldr	r7, [pc, #88]	; (800de34 <lv_theme_material_init+0xc90>)
 800ddda:	079b      	lsls	r3, r3, #30
 800dddc:	d400      	bmi.n	800dde0 <lv_theme_material_init+0xc3c>
 800ddde:	e2eb      	b.n	800e3b8 <lv_theme_material_init+0x1214>
 800dde0:	4802      	ldr	r0, [pc, #8]	; (800ddec <lv_theme_material_init+0xc48>)
 800dde2:	f7ff f9d3 	bl	800d18c <lv_color_hex>
 800dde6:	1c02      	adds	r2, r0, #0
 800dde8:	e026      	b.n	800de38 <lv_theme_material_init+0xc94>
 800ddea:	46c0      	nop			; (mov r8, r8)
 800ddec:	0031404f 	.word	0x0031404f
 800ddf0:	00009089 	.word	0x00009089
 800ddf4:	00ffffff 	.word	0x00ffffff
 800ddf8:	00008189 	.word	0x00008189
 800ddfc:	00009189 	.word	0x00009189
 800de00:	00888888 	.word	0x00888888
 800de04:	0000a089 	.word	0x0000a089
 800de08:	000080a9 	.word	0x000080a9
 800de0c:	000090a9 	.word	0x000090a9
 800de10:	000091a9 	.word	0x000091a9
 800de14:	0000a0a9 	.word	0x0000a0a9
 800de18:	00001079 	.word	0x00001079
 800de1c:	00001179 	.word	0x00001179
 800de20:	00002079 	.word	0x00002079
 800de24:	00000449 	.word	0x00000449
 800de28:	000010b1 	.word	0x000010b1
 800de2c:	00007fff 	.word	0x00007fff
 800de30:	00d4d7d9 	.word	0x00d4d7d9
 800de34:	0800f028 	.word	0x0800f028
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color)
 800de38:	0030      	movs	r0, r6
 800de3a:	2179      	movs	r1, #121	; 0x79
 800de3c:	f7f8 fd39 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_DEFAULT, theme.color_primary);
 800de40:	6820      	ldr	r0, [r4, #0]
 800de42:	89aa      	ldrh	r2, [r5, #12]
 800de44:	3028      	adds	r0, #40	; 0x28
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color)
 800de46:	2149      	movs	r1, #73	; 0x49
 800de48:	f7f8 fd33 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_EDITED, theme.color_secondary);
 800de4c:	6820      	ldr	r0, [r4, #0]
 800de4e:	89ea      	ldrh	r2, [r5, #14]
 800de50:	3028      	adds	r0, #40	; 0x28
 800de52:	49e4      	ldr	r1, [pc, #912]	; (800e1e4 <lv_theme_material_init+0x1040>)
 800de54:	f7f8 fd2d 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
 800de58:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa)
 800de5a:	2200      	movs	r2, #0
 800de5c:	3028      	adds	r0, #40	; 0x28
 800de5e:	214c      	movs	r1, #76	; 0x4c
 800de60:	f7f8 fd6c 	bl	800693c <_lv_style_set_opa>
 800de64:	2193      	movs	r1, #147	; 0x93
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_FOCUSED, LV_OPA_50);
 800de66:	6820      	ldr	r0, [r4, #0]
 800de68:	227f      	movs	r2, #127	; 0x7f
 800de6a:	3028      	adds	r0, #40	; 0x28
 800de6c:	0089      	lsls	r1, r1, #2
 800de6e:	f7f8 fd65 	bl	800693c <_lv_style_set_opa>
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
 800de72:	6826      	ldr	r6, [r4, #0]
 800de74:	2200      	movs	r2, #0
 800de76:	2420      	movs	r4, #32
 800de78:	6a2b      	ldr	r3, [r5, #32]
 800de7a:	3628      	adds	r6, #40	; 0x28
 800de7c:	401c      	ands	r4, r3
 800de7e:	4294      	cmp	r4, r2
 800de80:	d10d      	bne.n	800de9e <lv_theme_material_init+0xcfa>
 800de82:	0010      	movs	r0, r2
 800de84:	f7fd fc54 	bl	800b730 <lv_disp_get_dpi>
 800de88:	2201      	movs	r2, #1
 800de8a:	2877      	cmp	r0, #119	; 0x77
 800de8c:	dd07      	ble.n	800de9e <lv_theme_material_init+0xcfa>
 800de8e:	0020      	movs	r0, r4
 800de90:	f7fd fc4e 	bl	800b730 <lv_disp_get_dpi>
 800de94:	2150      	movs	r1, #80	; 0x50
 800de96:	3028      	adds	r0, #40	; 0x28
 800de98:	f7f2 f9f6 	bl	8000288 <__divsi3>
 800de9c:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int)
 800de9e:	0030      	movs	r0, r6
 800dea0:	2140      	movs	r1, #64	; 0x40
 800dea2:	f7f8 fcc1 	bl	8006828 <_lv_style_set_int>
    lv_style_set_transition_time(&styles->bar_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
 800dea6:	4cd0      	ldr	r4, [pc, #832]	; (800e1e8 <lv_theme_material_init+0x1044>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int)
 800dea8:	2200      	movs	r2, #0
 800deaa:	6820      	ldr	r0, [r4, #0]
 800deac:	21b0      	movs	r1, #176	; 0xb0
 800deae:	3028      	adds	r0, #40	; 0x28
 800deb0:	f7f8 fcba 	bl	8006828 <_lv_style_set_int>
    lv_style_set_transition_prop_6(&styles->bar_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
 800deb4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int)
 800deb6:	224c      	movs	r2, #76	; 0x4c
 800deb8:	21b7      	movs	r1, #183	; 0xb7
 800deba:	3028      	adds	r0, #40	; 0x28
 800debc:	f7f8 fcb4 	bl	8006828 <_lv_style_set_int>
    lv_style_reset(&styles->bar_indic);
 800dec0:	6820      	ldr	r0, [r4, #0]
 800dec2:	302c      	adds	r0, #44	; 0x2c
 800dec4:	f7f8 fc7c 	bl	80067c0 <lv_style_reset>
    lv_style_set_bg_opa(&styles->bar_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
 800dec8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 800deca:	22ff      	movs	r2, #255	; 0xff
 800decc:	302c      	adds	r0, #44	; 0x2c
 800dece:	212c      	movs	r1, #44	; 0x2c
 800ded0:	f7f8 fd34 	bl	800693c <_lv_style_set_opa>
    lv_style_set_radius(&styles->bar_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 800ded4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 800ded6:	4ac5      	ldr	r2, [pc, #788]	; (800e1ec <lv_theme_material_init+0x1048>)
 800ded8:	302c      	adds	r0, #44	; 0x2c
 800deda:	2101      	movs	r1, #1
 800dedc:	f7f8 fca4 	bl	8006828 <_lv_style_set_int>
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DEFAULT, theme.color_primary);
 800dee0:	6820      	ldr	r0, [r4, #0]
 800dee2:	89aa      	ldrh	r2, [r5, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 800dee4:	2129      	movs	r1, #41	; 0x29
 800dee6:	302c      	adds	r0, #44	; 0x2c
 800dee8:	f7f8 fce3 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DISABLED, lv_color_hex3(0x888));
 800deec:	48c0      	ldr	r0, [pc, #768]	; (800e1f0 <lv_theme_material_init+0x104c>)
 800deee:	f7ff f89d 	bl	800d02c <lv_color_hex3>
 800def2:	6826      	ldr	r6, [r4, #0]
 800def4:	1c02      	adds	r2, r0, #0
 800def6:	362c      	adds	r6, #44	; 0x2c
 800def8:	0030      	movs	r0, r6
 800defa:	49be      	ldr	r1, [pc, #760]	; (800e1f4 <lv_theme_material_init+0x1050>)
 800defc:	f7f8 fcd9 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_value_color(&styles->bar_indic, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x41404f) : LV_COLOR_WHITE);
 800df00:	6826      	ldr	r6, [r4, #0]
 800df02:	6a2b      	ldr	r3, [r5, #32]
 800df04:	362c      	adds	r6, #44	; 0x2c
 800df06:	079b      	lsls	r3, r3, #30
 800df08:	d400      	bmi.n	800df0c <lv_theme_material_init+0xd68>
 800df0a:	e257      	b.n	800e3bc <lv_theme_material_init+0x1218>
 800df0c:	48ba      	ldr	r0, [pc, #744]	; (800e1f8 <lv_theme_material_init+0x1054>)
 800df0e:	f7ff f93d 	bl	800d18c <lv_color_hex>
 800df12:	1c02      	adds	r2, r0, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color)
 800df14:	2179      	movs	r1, #121	; 0x79
 800df16:	0030      	movs	r0, r6
 800df18:	f7f8 fccb 	bl	80068b2 <_lv_style_set_color>
    lv_style_reset(&styles->arc_indic);
 800df1c:	6820      	ldr	r0, [r4, #0]
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
 800df1e:	2619      	movs	r6, #25
    lv_style_reset(&styles->arc_indic);
 800df20:	301c      	adds	r0, #28
 800df22:	f7f8 fc4d 	bl	80067c0 <lv_style_reset>
    lv_style_set_line_color(&styles->arc_indic, LV_STATE_DEFAULT, theme.color_primary);
 800df26:	6820      	ldr	r0, [r4, #0]
 800df28:	4db4      	ldr	r5, [pc, #720]	; (800e1fc <lv_theme_material_init+0x1058>)
 800df2a:	301c      	adds	r0, #28
 800df2c:	89aa      	ldrh	r2, [r5, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color)
 800df2e:	2199      	movs	r1, #153	; 0x99
 800df30:	f7f8 fcbf 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
 800df34:	6823      	ldr	r3, [r4, #0]
 800df36:	2000      	movs	r0, #0
 800df38:	331c      	adds	r3, #28
 800df3a:	9300      	str	r3, [sp, #0]
 800df3c:	f7fd fbf8 	bl	800b730 <lv_disp_get_dpi>
 800df40:	4370      	muls	r0, r6
 800df42:	2201      	movs	r2, #1
 800df44:	28ef      	cmp	r0, #239	; 0xef
 800df46:	dd08      	ble.n	800df5a <lv_theme_material_init+0xdb6>
 800df48:	2000      	movs	r0, #0
 800df4a:	f7fd fbf1 	bl	800b730 <lv_disp_get_dpi>
 800df4e:	4370      	muls	r0, r6
 800df50:	21a0      	movs	r1, #160	; 0xa0
 800df52:	3050      	adds	r0, #80	; 0x50
 800df54:	f7f2 f998 	bl	8000288 <__divsi3>
 800df58:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int)
 800df5a:	2190      	movs	r1, #144	; 0x90
 800df5c:	9800      	ldr	r0, [sp, #0]
 800df5e:	f7f8 fc63 	bl	8006828 <_lv_style_set_int>
    lv_style_set_line_rounded(&styles->arc_indic, LV_STATE_DEFAULT, true);
 800df62:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int)
 800df64:	2201      	movs	r2, #1
 800df66:	301c      	adds	r0, #28
 800df68:	2194      	movs	r1, #148	; 0x94
 800df6a:	f7f8 fc5d 	bl	8006828 <_lv_style_set_int>
    lv_style_reset(&styles->arc_bg);
 800df6e:	6820      	ldr	r0, [r4, #0]
 800df70:	3020      	adds	r0, #32
 800df72:	f7f8 fc25 	bl	80067c0 <lv_style_reset>
    lv_style_set_line_color(&styles->arc_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
 800df76:	6826      	ldr	r6, [r4, #0]
 800df78:	6a2b      	ldr	r3, [r5, #32]
 800df7a:	3620      	adds	r6, #32
 800df7c:	079b      	lsls	r3, r3, #30
 800df7e:	d400      	bmi.n	800df82 <lv_theme_material_init+0xdde>
 800df80:	e21e      	b.n	800e3c0 <lv_theme_material_init+0x121c>
 800df82:	489f      	ldr	r0, [pc, #636]	; (800e200 <lv_theme_material_init+0x105c>)
 800df84:	f7ff f902 	bl	800d18c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color)
 800df88:	2199      	movs	r1, #153	; 0x99
 800df8a:	1c02      	adds	r2, r0, #0
 800df8c:	0030      	movs	r0, r6
 800df8e:	f7f8 fc90 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
 800df92:	6823      	ldr	r3, [r4, #0]
 800df94:	2000      	movs	r0, #0
 800df96:	3320      	adds	r3, #32
 800df98:	9300      	str	r3, [sp, #0]
 800df9a:	2619      	movs	r6, #25
 800df9c:	f7fd fbc8 	bl	800b730 <lv_disp_get_dpi>
 800dfa0:	4370      	muls	r0, r6
 800dfa2:	2201      	movs	r2, #1
 800dfa4:	28ef      	cmp	r0, #239	; 0xef
 800dfa6:	dd08      	ble.n	800dfba <lv_theme_material_init+0xe16>
 800dfa8:	2000      	movs	r0, #0
 800dfaa:	f7fd fbc1 	bl	800b730 <lv_disp_get_dpi>
 800dfae:	4370      	muls	r0, r6
 800dfb0:	21a0      	movs	r1, #160	; 0xa0
 800dfb2:	3050      	adds	r0, #80	; 0x50
 800dfb4:	f7f2 f968 	bl	8000288 <__divsi3>
 800dfb8:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int)
 800dfba:	2190      	movs	r1, #144	; 0x90
 800dfbc:	9800      	ldr	r0, [sp, #0]
 800dfbe:	f7f8 fc33 	bl	8006828 <_lv_style_set_int>
    lv_style_set_line_rounded(&styles->arc_bg, LV_STATE_DEFAULT, true);
 800dfc2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int)
 800dfc4:	2201      	movs	r2, #1
 800dfc6:	2194      	movs	r1, #148	; 0x94
 800dfc8:	3020      	adds	r0, #32
 800dfca:	f7f8 fc2d 	bl	8006828 <_lv_style_set_int>
    lv_style_reset(&styles->arc_knob);
 800dfce:	6820      	ldr	r0, [r4, #0]
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
 800dfd0:	261e      	movs	r6, #30
    lv_style_reset(&styles->arc_knob);
 800dfd2:	3024      	adds	r0, #36	; 0x24
 800dfd4:	f7f8 fbf4 	bl	80067c0 <lv_style_reset>
    lv_style_set_radius(&styles->arc_knob, LV_STATE_DEFAULT,   LV_RADIUS_CIRCLE);
 800dfd8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 800dfda:	4a84      	ldr	r2, [pc, #528]	; (800e1ec <lv_theme_material_init+0x1048>)
 800dfdc:	3024      	adds	r0, #36	; 0x24
 800dfde:	2101      	movs	r1, #1
 800dfe0:	f7f8 fc22 	bl	8006828 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->arc_knob, LV_STATE_DEFAULT,  LV_DPX(0));
 800dfe4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	3024      	adds	r0, #36	; 0x24
 800dfea:	2110      	movs	r1, #16
 800dfec:	f7f8 fc1c 	bl	8006828 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->arc_knob, LV_STATE_DEFAULT,  LV_DPX(0));
 800dff0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 800dff2:	2200      	movs	r2, #0
 800dff4:	3024      	adds	r0, #36	; 0x24
 800dff6:	2111      	movs	r1, #17
 800dff8:	f7f8 fc16 	bl	8006828 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->arc_knob, LV_STATE_DEFAULT,    LV_DPX(0));
 800dffc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 800dffe:	2200      	movs	r2, #0
 800e000:	3024      	adds	r0, #36	; 0x24
 800e002:	2112      	movs	r1, #18
 800e004:	f7f8 fc10 	bl	8006828 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->arc_knob, LV_STATE_DEFAULT,   LV_DPX(0));
 800e008:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 800e00a:	2200      	movs	r2, #0
 800e00c:	2113      	movs	r1, #19
 800e00e:	3024      	adds	r0, #36	; 0x24
 800e010:	f7f8 fc0a 	bl	8006828 <_lv_style_set_int>
    lv_style_reset(&styles->cpicker_bg);
 800e014:	6820      	ldr	r0, [r4, #0]
 800e016:	3030      	adds	r0, #48	; 0x30
 800e018:	f7f8 fbd2 	bl	80067c0 <lv_style_reset>
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
 800e01c:	6823      	ldr	r3, [r4, #0]
 800e01e:	2000      	movs	r0, #0
 800e020:	3330      	adds	r3, #48	; 0x30
 800e022:	9300      	str	r3, [sp, #0]
 800e024:	f7fd fb84 	bl	800b730 <lv_disp_get_dpi>
 800e028:	4370      	muls	r0, r6
 800e02a:	2201      	movs	r2, #1
 800e02c:	28ef      	cmp	r0, #239	; 0xef
 800e02e:	dd08      	ble.n	800e042 <lv_theme_material_init+0xe9e>
 800e030:	2000      	movs	r0, #0
 800e032:	f7fd fb7d 	bl	800b730 <lv_disp_get_dpi>
 800e036:	4370      	muls	r0, r6
 800e038:	21a0      	movs	r1, #160	; 0xa0
 800e03a:	3050      	adds	r0, #80	; 0x50
 800e03c:	f7f2 f924 	bl	8000288 <__divsi3>
 800e040:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const lv_anim_path_t *, _ptr)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int)
 800e042:	21c0      	movs	r1, #192	; 0xc0
 800e044:	9800      	ldr	r0, [sp, #0]
 800e046:	f7f8 fbef 	bl	8006828 <_lv_style_set_int>
    lv_style_set_bg_opa(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
 800e04a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 800e04c:	22ff      	movs	r2, #255	; 0xff
 800e04e:	3030      	adds	r0, #48	; 0x30
 800e050:	212c      	movs	r1, #44	; 0x2c
 800e052:	f7f8 fc73 	bl	800693c <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->cpicker_bg, LV_STATE_DEFAULT, COLOR_SCR);
 800e056:	6826      	ldr	r6, [r4, #0]
 800e058:	6a2b      	ldr	r3, [r5, #32]
 800e05a:	3630      	adds	r6, #48	; 0x30
 800e05c:	079b      	lsls	r3, r3, #30
 800e05e:	d400      	bmi.n	800e062 <lv_theme_material_init+0xebe>
 800e060:	e1b0      	b.n	800e3c4 <lv_theme_material_init+0x1220>
 800e062:	4868      	ldr	r0, [pc, #416]	; (800e204 <lv_theme_material_init+0x1060>)
 800e064:	f7ff f892 	bl	800d18c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 800e068:	2129      	movs	r1, #41	; 0x29
 800e06a:	1c02      	adds	r2, r0, #0
 800e06c:	0030      	movs	r0, r6
 800e06e:	f7f8 fc20 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
 800e072:	6823      	ldr	r3, [r4, #0]
 800e074:	2000      	movs	r0, #0
 800e076:	3330      	adds	r3, #48	; 0x30
 800e078:	9300      	str	r3, [sp, #0]
 800e07a:	2614      	movs	r6, #20
 800e07c:	f7fd fb58 	bl	800b730 <lv_disp_get_dpi>
 800e080:	4370      	muls	r0, r6
 800e082:	2201      	movs	r2, #1
 800e084:	28ef      	cmp	r0, #239	; 0xef
 800e086:	dd08      	ble.n	800e09a <lv_theme_material_init+0xef6>
 800e088:	2000      	movs	r0, #0
 800e08a:	f7fd fb51 	bl	800b730 <lv_disp_get_dpi>
 800e08e:	4370      	muls	r0, r6
 800e090:	21a0      	movs	r1, #160	; 0xa0
 800e092:	3050      	adds	r0, #80	; 0x50
 800e094:	f7f2 f8f8 	bl	8000288 <__divsi3>
 800e098:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 800e09a:	2114      	movs	r1, #20
 800e09c:	9800      	ldr	r0, [sp, #0]
 800e09e:	f7f8 fbc3 	bl	8006828 <_lv_style_set_int>
    lv_style_set_radius(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 800e0a2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 800e0a4:	4a51      	ldr	r2, [pc, #324]	; (800e1ec <lv_theme_material_init+0x1048>)
 800e0a6:	2101      	movs	r1, #1
 800e0a8:	3030      	adds	r0, #48	; 0x30
 800e0aa:	f7f8 fbbd 	bl	8006828 <_lv_style_set_int>
    lv_style_reset(&styles->cpicker_indic);
 800e0ae:	6820      	ldr	r0, [r4, #0]
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 800e0b0:	260d      	movs	r6, #13
    lv_style_reset(&styles->cpicker_indic);
 800e0b2:	3034      	adds	r0, #52	; 0x34
 800e0b4:	f7f8 fb84 	bl	80067c0 <lv_style_reset>
    lv_style_set_radius(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 800e0b8:	6820      	ldr	r0, [r4, #0]
 800e0ba:	4a4c      	ldr	r2, [pc, #304]	; (800e1ec <lv_theme_material_init+0x1048>)
 800e0bc:	3034      	adds	r0, #52	; 0x34
 800e0be:	2101      	movs	r1, #1
 800e0c0:	f7f8 fbb2 	bl	8006828 <_lv_style_set_int>
    lv_style_set_bg_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_WHITE);
 800e0c4:	6820      	ldr	r0, [r4, #0]
 800e0c6:	883a      	ldrh	r2, [r7, #0]
 800e0c8:	3034      	adds	r0, #52	; 0x34
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 800e0ca:	2129      	movs	r1, #41	; 0x29
 800e0cc:	f7f8 fbf1 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_bg_opa(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
 800e0d0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 800e0d2:	22ff      	movs	r2, #255	; 0xff
 800e0d4:	3034      	adds	r0, #52	; 0x34
 800e0d6:	212c      	movs	r1, #44	; 0x2c
 800e0d8:	f7f8 fc30 	bl	800693c <_lv_style_set_opa>
    lv_style_set_border_width(&styles->cpicker_indic, LV_STATE_DEFAULT, 2);
 800e0dc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int)
 800e0de:	2202      	movs	r2, #2
 800e0e0:	3034      	adds	r0, #52	; 0x34
 800e0e2:	2130      	movs	r1, #48	; 0x30
 800e0e4:	f7f8 fba0 	bl	8006828 <_lv_style_set_int>
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_GRAY);
 800e0e8:	6820      	ldr	r0, [r4, #0]
 800e0ea:	887a      	ldrh	r2, [r7, #2]
 800e0ec:	3034      	adds	r0, #52	; 0x34
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color)
 800e0ee:	2139      	movs	r1, #57	; 0x39
 800e0f0:	f7f8 fbdf 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_FOCUSED, theme.color_primary);
 800e0f4:	6820      	ldr	r0, [r4, #0]
 800e0f6:	89aa      	ldrh	r2, [r5, #12]
 800e0f8:	3034      	adds	r0, #52	; 0x34
 800e0fa:	4943      	ldr	r1, [pc, #268]	; (800e208 <lv_theme_material_init+0x1064>)
 800e0fc:	f7f8 fbd9 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_EDITED, theme.color_secondary);
 800e100:	6820      	ldr	r0, [r4, #0]
 800e102:	89ea      	ldrh	r2, [r5, #14]
 800e104:	3034      	adds	r0, #52	; 0x34
 800e106:	4941      	ldr	r1, [pc, #260]	; (800e20c <lv_theme_material_init+0x1068>)
 800e108:	f7f8 fbd3 	bl	80068b2 <_lv_style_set_color>
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 800e10c:	2000      	movs	r0, #0
 800e10e:	6827      	ldr	r7, [r4, #0]
 800e110:	f7fd fb0e 	bl	800b730 <lv_disp_get_dpi>
 800e114:	4370      	muls	r0, r6
 800e116:	3734      	adds	r7, #52	; 0x34
 800e118:	2201      	movs	r2, #1
 800e11a:	28ef      	cmp	r0, #239	; 0xef
 800e11c:	dd08      	ble.n	800e130 <lv_theme_material_init+0xf8c>
 800e11e:	2000      	movs	r0, #0
 800e120:	f7fd fb06 	bl	800b730 <lv_disp_get_dpi>
 800e124:	4370      	muls	r0, r6
 800e126:	21a0      	movs	r1, #160	; 0xa0
 800e128:	3050      	adds	r0, #80	; 0x50
 800e12a:	f7f2 f8ad 	bl	8000288 <__divsi3>
 800e12e:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 800e130:	0038      	movs	r0, r7
 800e132:	2112      	movs	r1, #18
 800e134:	f7f8 fb78 	bl	8006828 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 800e138:	2000      	movs	r0, #0
 800e13a:	6827      	ldr	r7, [r4, #0]
 800e13c:	260d      	movs	r6, #13
 800e13e:	f7fd faf7 	bl	800b730 <lv_disp_get_dpi>
 800e142:	4370      	muls	r0, r6
 800e144:	3734      	adds	r7, #52	; 0x34
 800e146:	2201      	movs	r2, #1
 800e148:	28ef      	cmp	r0, #239	; 0xef
 800e14a:	dd08      	ble.n	800e15e <lv_theme_material_init+0xfba>
 800e14c:	2000      	movs	r0, #0
 800e14e:	f7fd faef 	bl	800b730 <lv_disp_get_dpi>
 800e152:	4370      	muls	r0, r6
 800e154:	21a0      	movs	r1, #160	; 0xa0
 800e156:	3050      	adds	r0, #80	; 0x50
 800e158:	f7f2 f896 	bl	8000288 <__divsi3>
 800e15c:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 800e15e:	0038      	movs	r0, r7
 800e160:	2113      	movs	r1, #19
 800e162:	f7f8 fb61 	bl	8006828 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 800e166:	2000      	movs	r0, #0
 800e168:	6827      	ldr	r7, [r4, #0]
 800e16a:	260d      	movs	r6, #13
 800e16c:	f7fd fae0 	bl	800b730 <lv_disp_get_dpi>
 800e170:	4370      	muls	r0, r6
 800e172:	3734      	adds	r7, #52	; 0x34
 800e174:	2201      	movs	r2, #1
 800e176:	28ef      	cmp	r0, #239	; 0xef
 800e178:	dd08      	ble.n	800e18c <lv_theme_material_init+0xfe8>
 800e17a:	2000      	movs	r0, #0
 800e17c:	f7fd fad8 	bl	800b730 <lv_disp_get_dpi>
 800e180:	4370      	muls	r0, r6
 800e182:	21a0      	movs	r1, #160	; 0xa0
 800e184:	3050      	adds	r0, #80	; 0x50
 800e186:	f7f2 f87f 	bl	8000288 <__divsi3>
 800e18a:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 800e18c:	2110      	movs	r1, #16
 800e18e:	0038      	movs	r0, r7
 800e190:	f7f8 fb4a 	bl	8006828 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 800e194:	2000      	movs	r0, #0
 800e196:	6826      	ldr	r6, [r4, #0]
 800e198:	f7fd faca 	bl	800b730 <lv_disp_get_dpi>
 800e19c:	240d      	movs	r4, #13
 800e19e:	4360      	muls	r0, r4
 800e1a0:	3634      	adds	r6, #52	; 0x34
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	28ef      	cmp	r0, #239	; 0xef
 800e1a6:	dd08      	ble.n	800e1ba <lv_theme_material_init+0x1016>
 800e1a8:	2000      	movs	r0, #0
 800e1aa:	f7fd fac1 	bl	800b730 <lv_disp_get_dpi>
 800e1ae:	4360      	muls	r0, r4
 800e1b0:	21a0      	movs	r1, #160	; 0xa0
 800e1b2:	3050      	adds	r0, #80	; 0x50
 800e1b4:	f7f2 f868 	bl	8000288 <__divsi3>
 800e1b8:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 800e1ba:	0030      	movs	r0, r6
 800e1bc:	2111      	movs	r1, #17
 800e1be:	f7f8 fb33 	bl	8006828 <_lv_style_set_int>
    theme.apply_xcb = NULL;
 800e1c2:	2000      	movs	r0, #0
    theme.apply_cb = theme_apply;
 800e1c4:	4b12      	ldr	r3, [pc, #72]	; (800e210 <lv_theme_material_init+0x106c>)
    theme.apply_xcb = NULL;
 800e1c6:	6068      	str	r0, [r5, #4]
    theme.apply_cb = theme_apply;
 800e1c8:	602b      	str	r3, [r5, #0]
    lv_obj_report_style_mod(NULL);
 800e1ca:	f7f6 fdb4 	bl	8004d36 <lv_obj_report_style_mod>
}
 800e1ce:	0028      	movs	r0, r5
 800e1d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    lv_style_set_bg_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR);
 800e1d2:	4810      	ldr	r0, [pc, #64]	; (800e214 <lv_theme_material_init+0x1070>)
 800e1d4:	f7ff f819 	bl	800d20a <lv_theme_material_init+0x66>
    lv_style_set_text_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 800e1d8:	480f      	ldr	r0, [pc, #60]	; (800e218 <lv_theme_material_init+0x1074>)
 800e1da:	f7ff f824 	bl	800d226 <lv_theme_material_init+0x82>
    lv_style_set_value_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 800e1de:	480e      	ldr	r0, [pc, #56]	; (800e218 <lv_theme_material_init+0x1074>)
 800e1e0:	f7ff f82f 	bl	800d242 <lv_theme_material_init+0x9e>
 800e1e4:	00000449 	.word	0x00000449
 800e1e8:	20006eac 	.word	0x20006eac
 800e1ec:	00007fff 	.word	0x00007fff
 800e1f0:	00000888 	.word	0x00000888
 800e1f4:	00002029 	.word	0x00002029
 800e1f8:	0041404f 	.word	0x0041404f
 800e1fc:	20006eb0 	.word	0x20006eb0
 800e200:	00d4d7d9 	.word	0x00d4d7d9
 800e204:	00eaeff3 	.word	0x00eaeff3
 800e208:	00000239 	.word	0x00000239
 800e20c:	00000439 	.word	0x00000439
 800e210:	0800d061 	.word	0x0800d061
 800e214:	00444b5a 	.word	0x00444b5a
 800e218:	00e7e9ec 	.word	0x00e7e9ec
    lv_style_set_text_sel_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 800e21c:	486a      	ldr	r0, [pc, #424]	; (800e3c8 <lv_theme_material_init+0x1224>)
 800e21e:	f7ff f81e 	bl	800d25e <lv_theme_material_init+0xba>
    lv_style_set_bg_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG);
 800e222:	486a      	ldr	r0, [pc, #424]	; (800e3cc <lv_theme_material_init+0x1228>)
 800e224:	f7ff f852 	bl	800d2cc <lv_theme_material_init+0x128>
    lv_style_set_border_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
 800e228:	4869      	ldr	r0, [pc, #420]	; (800e3d0 <lv_theme_material_init+0x122c>)
 800e22a:	f7ff f85e 	bl	800d2ea <lv_theme_material_init+0x146>
    lv_style_set_text_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 800e22e:	4869      	ldr	r0, [pc, #420]	; (800e3d4 <lv_theme_material_init+0x1230>)
 800e230:	f7ff f893 	bl	800d35a <lv_theme_material_init+0x1b6>
    lv_style_set_value_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 800e234:	4867      	ldr	r0, [pc, #412]	; (800e3d4 <lv_theme_material_init+0x1230>)
 800e236:	f7ff f8a5 	bl	800d384 <lv_theme_material_init+0x1e0>
    lv_style_set_image_recolor(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 800e23a:	4866      	ldr	r0, [pc, #408]	; (800e3d4 <lv_theme_material_init+0x1230>)
 800e23c:	f7ff f8b1 	bl	800d3a2 <lv_theme_material_init+0x1fe>
    lv_style_set_line_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 800e240:	4864      	ldr	r0, [pc, #400]	; (800e3d4 <lv_theme_material_init+0x1230>)
 800e242:	f7ff f8bd 	bl	800d3c0 <lv_theme_material_init+0x21c>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 800e246:	2000      	movs	r0, #0
 800e248:	f7fd fa72 	bl	800b730 <lv_disp_get_dpi>
 800e24c:	261e      	movs	r6, #30
 800e24e:	f7ff f8d1 	bl	800d3f4 <lv_theme_material_init+0x250>
 800e252:	2000      	movs	r0, #0
 800e254:	f7fd fa6c 	bl	800b730 <lv_disp_get_dpi>
 800e258:	4370      	muls	r0, r6
 800e25a:	21a0      	movs	r1, #160	; 0xa0
 800e25c:	3050      	adds	r0, #80	; 0x50
 800e25e:	f7f2 f813 	bl	8000288 <__divsi3>
 800e262:	b286      	uxth	r6, r0
 800e264:	f7ff f8cc 	bl	800d400 <lv_theme_material_init+0x25c>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 800e268:	2000      	movs	r0, #0
 800e26a:	f7fd fa61 	bl	800b730 <lv_disp_get_dpi>
 800e26e:	261e      	movs	r6, #30
 800e270:	f7ff f8e7 	bl	800d442 <lv_theme_material_init+0x29e>
 800e274:	2000      	movs	r0, #0
 800e276:	f7fd fa5b 	bl	800b730 <lv_disp_get_dpi>
 800e27a:	4370      	muls	r0, r6
 800e27c:	21a0      	movs	r1, #160	; 0xa0
 800e27e:	3050      	adds	r0, #80	; 0x50
 800e280:	f7f2 f802 	bl	8000288 <__divsi3>
 800e284:	b286      	uxth	r6, r0
 800e286:	f7ff f8e2 	bl	800d44e <lv_theme_material_init+0x2aa>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 800e28a:	2000      	movs	r0, #0
 800e28c:	f7fd fa50 	bl	800b730 <lv_disp_get_dpi>
 800e290:	261e      	movs	r6, #30
 800e292:	f7ff f8fd 	bl	800d490 <lv_theme_material_init+0x2ec>
 800e296:	2000      	movs	r0, #0
 800e298:	f7fd fa4a 	bl	800b730 <lv_disp_get_dpi>
 800e29c:	4370      	muls	r0, r6
 800e29e:	21a0      	movs	r1, #160	; 0xa0
 800e2a0:	3050      	adds	r0, #80	; 0x50
 800e2a2:	f7f1 fff1 	bl	8000288 <__divsi3>
 800e2a6:	b286      	uxth	r6, r0
 800e2a8:	f7ff f8f8 	bl	800d49c <lv_theme_material_init+0x2f8>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 800e2ac:	2000      	movs	r0, #0
 800e2ae:	f7fd fa3f 	bl	800b730 <lv_disp_get_dpi>
 800e2b2:	261e      	movs	r6, #30
 800e2b4:	f7ff f913 	bl	800d4de <lv_theme_material_init+0x33a>
 800e2b8:	2000      	movs	r0, #0
 800e2ba:	f7fd fa39 	bl	800b730 <lv_disp_get_dpi>
 800e2be:	4370      	muls	r0, r6
 800e2c0:	21a0      	movs	r1, #160	; 0xa0
 800e2c2:	3050      	adds	r0, #80	; 0x50
 800e2c4:	f7f1 ffe0 	bl	8000288 <__divsi3>
 800e2c8:	b286      	uxth	r6, r0
 800e2ca:	f7ff f90e 	bl	800d4ea <lv_theme_material_init+0x346>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
 800e2ce:	2000      	movs	r0, #0
 800e2d0:	f7fd fa2e 	bl	800b730 <lv_disp_get_dpi>
 800e2d4:	271e      	movs	r7, #30
 800e2d6:	f7ff f929 	bl	800d52c <lv_theme_material_init+0x388>
    lv_style_set_bg_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC);
 800e2da:	483f      	ldr	r0, [pc, #252]	; (800e3d8 <lv_theme_material_init+0x1234>)
 800e2dc:	f7ff f96f 	bl	800d5be <lv_theme_material_init+0x41a>
    lv_style_set_border_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_BORDER);
 800e2e0:	483e      	ldr	r0, [pc, #248]	; (800e3dc <lv_theme_material_init+0x1238>)
 800e2e2:	f7ff f97b 	bl	800d5dc <lv_theme_material_init+0x438>
    lv_style_set_text_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 800e2e6:	483e      	ldr	r0, [pc, #248]	; (800e3e0 <lv_theme_material_init+0x123c>)
 800e2e8:	f7ff f987 	bl	800d5fa <lv_theme_material_init+0x456>
    lv_style_set_value_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 800e2ec:	483c      	ldr	r0, [pc, #240]	; (800e3e0 <lv_theme_material_init+0x123c>)
 800e2ee:	f7ff f993 	bl	800d618 <lv_theme_material_init+0x474>
    lv_style_set_image_recolor(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 800e2f2:	483b      	ldr	r0, [pc, #236]	; (800e3e0 <lv_theme_material_init+0x123c>)
 800e2f4:	f7ff f99f 	bl	800d636 <lv_theme_material_init+0x492>
    lv_style_set_line_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 800e2f8:	4839      	ldr	r0, [pc, #228]	; (800e3e0 <lv_theme_material_init+0x123c>)
 800e2fa:	f7ff f9ab 	bl	800d654 <lv_theme_material_init+0x4b0>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_PR);
 800e2fe:	4839      	ldr	r0, [pc, #228]	; (800e3e4 <lv_theme_material_init+0x1240>)
 800e300:	f7ff f9bb 	bl	800d67a <lv_theme_material_init+0x4d6>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_DIS);
 800e304:	4831      	ldr	r0, [pc, #196]	; (800e3cc <lv_theme_material_init+0x1228>)
 800e306:	f7ff f9d9 	bl	800d6bc <lv_theme_material_init+0x518>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_BORDER_PR);
 800e30a:	4837      	ldr	r0, [pc, #220]	; (800e3e8 <lv_theme_material_init+0x1244>)
 800e30c:	f7fe ff3e 	bl	800d18c <lv_color_hex>
 800e310:	f7ff f9f8 	bl	800d704 <lv_theme_material_init+0x560>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_BORDER_CHK);
 800e314:	4834      	ldr	r0, [pc, #208]	; (800e3e8 <lv_theme_material_init+0x1244>)
 800e316:	f7ff fa03 	bl	800d720 <lv_theme_material_init+0x57c>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_BORDER_CHK_PR);
 800e31a:	4833      	ldr	r0, [pc, #204]	; (800e3e8 <lv_theme_material_init+0x1244>)
 800e31c:	f7ff fa10 	bl	800d740 <lv_theme_material_init+0x59c>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_BORDER_DIS);
 800e320:	4831      	ldr	r0, [pc, #196]	; (800e3e8 <lv_theme_material_init+0x1244>)
 800e322:	f7ff fa1c 	bl	800d75e <lv_theme_material_init+0x5ba>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
 800e326:	482b      	ldr	r0, [pc, #172]	; (800e3d4 <lv_theme_material_init+0x1230>)
 800e328:	f7ff fa28 	bl	800d77c <lv_theme_material_init+0x5d8>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
 800e32c:	482f      	ldr	r0, [pc, #188]	; (800e3ec <lv_theme_material_init+0x1248>)
 800e32e:	f7ff fa48 	bl	800d7c2 <lv_theme_material_init+0x61e>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
 800e332:	4828      	ldr	r0, [pc, #160]	; (800e3d4 <lv_theme_material_init+0x1230>)
 800e334:	f7ff fa54 	bl	800d7e0 <lv_theme_material_init+0x63c>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
 800e338:	482c      	ldr	r0, [pc, #176]	; (800e3ec <lv_theme_material_init+0x1248>)
 800e33a:	f7ff fa74 	bl	800d826 <lv_theme_material_init+0x682>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN);
 800e33e:	4823      	ldr	r0, [pc, #140]	; (800e3cc <lv_theme_material_init+0x1228>)
 800e340:	f7ff fa96 	bl	800d870 <lv_theme_material_init+0x6cc>
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_PR);
 800e344:	4821      	ldr	r0, [pc, #132]	; (800e3cc <lv_theme_material_init+0x1228>)
 800e346:	f7fe ff21 	bl	800d18c <lv_color_hex>
 800e34a:	224c      	movs	r2, #76	; 0x4c
 800e34c:	1c01      	adds	r1, r0, #0
 800e34e:	f7ff faa3 	bl	800d898 <lv_theme_material_init+0x6f4>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN);
 800e352:	481e      	ldr	r0, [pc, #120]	; (800e3cc <lv_theme_material_init+0x1228>)
 800e354:	f7ff fac2 	bl	800d8dc <lv_theme_material_init+0x738>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED | LV_STATE_CHECKED, COLOR_BTN_DIS);
 800e358:	4825      	ldr	r0, [pc, #148]	; (800e3f0 <lv_theme_material_init+0x124c>)
 800e35a:	f7ff face 	bl	800d8fa <lv_theme_material_init+0x756>
    lv_style_set_border_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN_BORDER_INA);
 800e35e:	481f      	ldr	r0, [pc, #124]	; (800e3dc <lv_theme_material_init+0x1238>)
 800e360:	f7fe ff14 	bl	800d18c <lv_color_hex>
 800e364:	f7ff fae6 	bl	800d934 <lv_theme_material_init+0x790>
    lv_style_set_text_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 800e368:	481a      	ldr	r0, [pc, #104]	; (800e3d4 <lv_theme_material_init+0x1230>)
 800e36a:	f7ff fb0b 	bl	800d984 <lv_theme_material_init+0x7e0>
    lv_style_set_text_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 800e36e:	4819      	ldr	r0, [pc, #100]	; (800e3d4 <lv_theme_material_init+0x1230>)
 800e370:	f7ff fb57 	bl	800da22 <lv_theme_material_init+0x87e>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 800e374:	4817      	ldr	r0, [pc, #92]	; (800e3d4 <lv_theme_material_init+0x1230>)
 800e376:	f7ff fb81 	bl	800da7c <lv_theme_material_init+0x8d8>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 800e37a:	4816      	ldr	r0, [pc, #88]	; (800e3d4 <lv_theme_material_init+0x1230>)
 800e37c:	f7ff fb8d 	bl	800da9a <lv_theme_material_init+0x8f6>
    lv_style_set_value_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 800e380:	4814      	ldr	r0, [pc, #80]	; (800e3d4 <lv_theme_material_init+0x1230>)
 800e382:	f7ff fbb7 	bl	800daf4 <lv_theme_material_init+0x950>
    lv_style_set_value_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 800e386:	4813      	ldr	r0, [pc, #76]	; (800e3d4 <lv_theme_material_init+0x1230>)
 800e388:	f7ff fbc3 	bl	800db12 <lv_theme_material_init+0x96e>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 800e38c:	2000      	movs	r0, #0
 800e38e:	f7fd f9cf 	bl	800b730 <lv_disp_get_dpi>
 800e392:	2728      	movs	r7, #40	; 0x28
 800e394:	e4bd      	b.n	800dd12 <lv_theme_material_init+0xb6e>
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(10) : LV_DPX(20);
 800e396:	2000      	movs	r0, #0
 800e398:	f7fd f9ca 	bl	800b730 <lv_disp_get_dpi>
 800e39c:	2614      	movs	r6, #20
 800e39e:	e4d7      	b.n	800dd50 <lv_theme_material_init+0xbac>
 800e3a0:	2000      	movs	r0, #0
 800e3a2:	f7fd f9c5 	bl	800b730 <lv_disp_get_dpi>
 800e3a6:	4370      	muls	r0, r6
 800e3a8:	21a0      	movs	r1, #160	; 0xa0
 800e3aa:	3050      	adds	r0, #80	; 0x50
 800e3ac:	f7f1 ff6c 	bl	8000288 <__divsi3>
 800e3b0:	b206      	sxth	r6, r0
 800e3b2:	e4d2      	b.n	800dd5a <lv_theme_material_init+0xbb6>
    lv_style_set_bg_color(&styles->bar_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
 800e3b4:	4808      	ldr	r0, [pc, #32]	; (800e3d8 <lv_theme_material_init+0x1234>)
 800e3b6:	e505      	b.n	800ddc4 <lv_theme_material_init+0xc20>
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
 800e3b8:	883a      	ldrh	r2, [r7, #0]
 800e3ba:	e53d      	b.n	800de38 <lv_theme_material_init+0xc94>
    lv_style_set_value_color(&styles->bar_indic, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x41404f) : LV_COLOR_WHITE);
 800e3bc:	883a      	ldrh	r2, [r7, #0]
 800e3be:	e5a9      	b.n	800df14 <lv_theme_material_init+0xd70>
    lv_style_set_line_color(&styles->arc_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
 800e3c0:	4805      	ldr	r0, [pc, #20]	; (800e3d8 <lv_theme_material_init+0x1234>)
 800e3c2:	e5df      	b.n	800df84 <lv_theme_material_init+0xde0>
    lv_style_set_bg_color(&styles->cpicker_bg, LV_STATE_DEFAULT, COLOR_SCR);
 800e3c4:	480b      	ldr	r0, [pc, #44]	; (800e3f4 <lv_theme_material_init+0x1250>)
 800e3c6:	e64d      	b.n	800e064 <lv_theme_material_init+0xec0>
 800e3c8:	00e7e9ec 	.word	0x00e7e9ec
 800e3cc:	00586273 	.word	0x00586273
 800e3d0:	00808a97 	.word	0x00808a97
 800e3d4:	00ffffff 	.word	0x00ffffff
 800e3d8:	0045494d 	.word	0x0045494d
 800e3dc:	00404040 	.word	0x00404040
 800e3e0:	00a5a8ad 	.word	0x00a5a8ad
 800e3e4:	00494f57 	.word	0x00494f57
 800e3e8:	005f656e 	.word	0x005f656e
 800e3ec:	00000999 	.word	0x00000999
 800e3f0:	00000888 	.word	0x00000888
 800e3f4:	00444b5a 	.word	0x00444b5a

0800e3f8 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * label)
{
 800e3f8:	b570      	push	{r4, r5, r6, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e3fa:	f7f6 fcb8 	bl	8004d6e <lv_obj_get_ext_attr>
 800e3fe:	2501      	movs	r5, #1
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
 800e400:	7c43      	ldrb	r3, [r0, #17]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e402:	0004      	movs	r4, r0
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
 800e404:	422b      	tst	r3, r5
 800e406:	d004      	beq.n	800e412 <lv_label_dot_tmp_free+0x1a>
 800e408:	6840      	ldr	r0, [r0, #4]
 800e40a:	2800      	cmp	r0, #0
 800e40c:	d001      	beq.n	800e412 <lv_label_dot_tmp_free+0x1a>
        lv_mem_free(ext->dot.tmp_ptr);
 800e40e:	f7fd ff4f 	bl	800c2b0 <lv_mem_free>
    }
    ext->dot_tmp_alloc = false;
 800e412:	7c63      	ldrb	r3, [r4, #17]
 800e414:	43ab      	bics	r3, r5
 800e416:	7463      	strb	r3, [r4, #17]
    ext->dot.tmp_ptr   = NULL;
 800e418:	2300      	movs	r3, #0
 800e41a:	6063      	str	r3, [r4, #4]
}
 800e41c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e420 <lv_label_revert_dots>:
{
 800e420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e422:	0005      	movs	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e424:	f7f6 fca3 	bl	8004d6e <lv_obj_get_ext_attr>
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 800e428:	2207      	movs	r2, #7
 800e42a:	7c03      	ldrb	r3, [r0, #16]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e42c:	0004      	movs	r4, r0
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 800e42e:	4013      	ands	r3, r2
 800e430:	2b02      	cmp	r3, #2
 800e432:	d11f      	bne.n	800e474 <lv_label_revert_dots+0x54>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
 800e434:	6881      	ldr	r1, [r0, #8]
 800e436:	4b11      	ldr	r3, [pc, #68]	; (800e47c <lv_label_revert_dots+0x5c>)
 800e438:	4299      	cmp	r1, r3
 800e43a:	d01b      	beq.n	800e474 <lv_label_revert_dots+0x54>
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(ext->text, letter_i);
 800e43c:	4b10      	ldr	r3, [pc, #64]	; (800e480 <lv_label_revert_dots+0x60>)
    uint32_t letter_i = ext->dot_end - LV_LABEL_DOT_NUM;
 800e43e:	3903      	subs	r1, #3
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(ext->text, letter_i);
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	6800      	ldr	r0, [r0, #0]
 800e444:	4798      	blx	r3
 800e446:	0007      	movs	r7, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e448:	0028      	movs	r0, r5
 800e44a:	f7f6 fc90 	bl	8004d6e <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc) {
 800e44e:	7c43      	ldrb	r3, [r0, #17]
        return ext->dot.tmp;
 800e450:	1d01      	adds	r1, r0, #4
    if(ext->dot_tmp_alloc) {
 800e452:	07db      	lsls	r3, r3, #31
 800e454:	d500      	bpl.n	800e458 <lv_label_revert_dots+0x38>
        return ext->dot.tmp_ptr;
 800e456:	6841      	ldr	r1, [r0, #4]
    uint8_t i      = 0;
 800e458:	2300      	movs	r3, #0
    while(ext->text[byte_i + i] != '\0') {
 800e45a:	6820      	ldr	r0, [r4, #0]
 800e45c:	19da      	adds	r2, r3, r7
 800e45e:	1882      	adds	r2, r0, r2
 800e460:	7816      	ldrb	r6, [r2, #0]
 800e462:	5cc8      	ldrb	r0, [r1, r3]
        ext->text[byte_i + i] = dot_tmp[i];
 800e464:	7010      	strb	r0, [r2, #0]
    while(ext->text[byte_i + i] != '\0') {
 800e466:	2e00      	cmp	r6, #0
 800e468:	d105      	bne.n	800e476 <lv_label_revert_dots+0x56>
    lv_label_dot_tmp_free(label);
 800e46a:	0028      	movs	r0, r5
 800e46c:	f7ff ffc4 	bl	800e3f8 <lv_label_dot_tmp_free>
    ext->dot_end = LV_LABEL_DOT_END_INV;
 800e470:	4b02      	ldr	r3, [pc, #8]	; (800e47c <lv_label_revert_dots+0x5c>)
 800e472:	60a3      	str	r3, [r4, #8]
}
 800e474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        i++;
 800e476:	3301      	adds	r3, #1
 800e478:	b2db      	uxtb	r3, r3
 800e47a:	e7ee      	b.n	800e45a <lv_label_revert_dots+0x3a>
 800e47c:	0000ffff 	.word	0x0000ffff
 800e480:	2000004c 	.word	0x2000004c

0800e484 <lv_label_set_dot_tmp>:
{
 800e484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e486:	0004      	movs	r4, r0
 800e488:	0016      	movs	r6, r2
 800e48a:	000f      	movs	r7, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e48c:	f7f6 fc6f 	bl	8004d6e <lv_obj_get_ext_attr>
 800e490:	0005      	movs	r5, r0
    lv_label_dot_tmp_free(label); /* Deallocate any existing space */
 800e492:	0020      	movs	r0, r4
 800e494:	f7ff ffb0 	bl	800e3f8 <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
 800e498:	2e04      	cmp	r6, #4
 800e49a:	d912      	bls.n	800e4c2 <lv_label_set_dot_tmp+0x3e>
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
 800e49c:	1c70      	adds	r0, r6, #1
 800e49e:	f7fd feb3 	bl	800c208 <lv_mem_alloc>
            return false;
 800e4a2:	2400      	movs	r4, #0
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
 800e4a4:	6068      	str	r0, [r5, #4]
        if(ext->dot.tmp_ptr == NULL) {
 800e4a6:	42a0      	cmp	r0, r4
 800e4a8:	d009      	beq.n	800e4be <lv_label_set_dot_tmp+0x3a>
        _lv_memcpy(ext->dot.tmp_ptr, data, len);
 800e4aa:	0032      	movs	r2, r6
 800e4ac:	0039      	movs	r1, r7
 800e4ae:	f7fd ff79 	bl	800c3a4 <_lv_memcpy>
        ext->dot.tmp_ptr[len] = '\0';
 800e4b2:	686b      	ldr	r3, [r5, #4]
 800e4b4:	559c      	strb	r4, [r3, r6]
        ext->dot_tmp_alloc    = true;
 800e4b6:	7c6b      	ldrb	r3, [r5, #17]
 800e4b8:	3401      	adds	r4, #1
 800e4ba:	4323      	orrs	r3, r4
 800e4bc:	746b      	strb	r3, [r5, #17]
}
 800e4be:	0020      	movs	r0, r4
 800e4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->dot_tmp_alloc = false;
 800e4c2:	2401      	movs	r4, #1
 800e4c4:	7c6b      	ldrb	r3, [r5, #17]
        _lv_memcpy(ext->dot.tmp, data, len);
 800e4c6:	1d28      	adds	r0, r5, #4
        ext->dot_tmp_alloc = false;
 800e4c8:	43a3      	bics	r3, r4
 800e4ca:	746b      	strb	r3, [r5, #17]
        _lv_memcpy(ext->dot.tmp, data, len);
 800e4cc:	0032      	movs	r2, r6
 800e4ce:	0039      	movs	r1, r7
 800e4d0:	f7fd ff68 	bl	800c3a4 <_lv_memcpy>
 800e4d4:	e7f3      	b.n	800e4be <lv_label_set_dot_tmp+0x3a>

0800e4d6 <get_txt_coords>:

static void get_txt_coords(const lv_obj_t * label, lv_area_t * area)
{
 800e4d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e4d8:	0005      	movs	r5, r0
 800e4da:	000c      	movs	r4, r1
    lv_obj_get_coords(label, area);
 800e4dc:	f7f5 fc1f 	bl	8003d1e <lv_obj_get_coords>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 800e4e0:	0028      	movs	r0, r5
 800e4e2:	2212      	movs	r2, #18
 800e4e4:	2100      	movs	r1, #0
 800e4e6:	f7f5 ffaf 	bl	8004448 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 800e4ea:	2213      	movs	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 800e4ec:	0007      	movs	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 800e4ee:	2100      	movs	r1, #0
 800e4f0:	0028      	movs	r0, r5
 800e4f2:	f7f5 ffa9 	bl	8004448 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 800e4f6:	2210      	movs	r2, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 800e4f8:	0006      	movs	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 800e4fa:	2100      	movs	r1, #0
 800e4fc:	0028      	movs	r0, r5
 800e4fe:	f7f5 ffa3 	bl	8004448 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 800e502:	2211      	movs	r2, #17
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 800e504:	9001      	str	r0, [sp, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 800e506:	2100      	movs	r1, #0
 800e508:	0028      	movs	r0, r5
 800e50a:	f7f5 ff9d 	bl	8004448 <_lv_obj_get_style_int>

    lv_coord_t left   = lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
    lv_coord_t right  = lv_obj_get_style_pad_right(label, LV_LABEL_PART_MAIN);
    lv_coord_t top    = lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
    area->x1 += left;
 800e50e:	8823      	ldrh	r3, [r4, #0]
    area->x2 -= right;
    area->y1 += top;
 800e510:	9a01      	ldr	r2, [sp, #4]
    area->x1 += left;
 800e512:	19df      	adds	r7, r3, r7
    area->x2 -= right;
 800e514:	88a3      	ldrh	r3, [r4, #4]
    area->x1 += left;
 800e516:	8027      	strh	r7, [r4, #0]
    area->x2 -= right;
 800e518:	1b9e      	subs	r6, r3, r6
    area->y1 += top;
 800e51a:	8863      	ldrh	r3, [r4, #2]
    area->x2 -= right;
 800e51c:	80a6      	strh	r6, [r4, #4]
    area->y1 += top;
 800e51e:	189b      	adds	r3, r3, r2
 800e520:	8063      	strh	r3, [r4, #2]
    area->y2 -= bottom;
 800e522:	88e3      	ldrh	r3, [r4, #6]
 800e524:	1a18      	subs	r0, r3, r0
 800e526:	80e0      	strh	r0, [r4, #6]
}
 800e528:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

0800e52a <lv_label_set_align>:
{
 800e52a:	b570      	push	{r4, r5, r6, lr}
 800e52c:	0004      	movs	r4, r0
 800e52e:	000d      	movs	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e530:	f7f6 fc1d 	bl	8004d6e <lv_obj_get_ext_attr>
    if(ext->align == align) return;
 800e534:	7c03      	ldrb	r3, [r0, #16]
 800e536:	069a      	lsls	r2, r3, #26
 800e538:	0f92      	lsrs	r2, r2, #30
 800e53a:	42aa      	cmp	r2, r5
 800e53c:	d009      	beq.n	800e552 <lv_label_set_align+0x28>
    ext->align = align;
 800e53e:	2203      	movs	r2, #3
 800e540:	4015      	ands	r5, r2
 800e542:	322d      	adds	r2, #45	; 0x2d
 800e544:	012d      	lsls	r5, r5, #4
 800e546:	4393      	bics	r3, r2
 800e548:	432b      	orrs	r3, r5
 800e54a:	7403      	strb	r3, [r0, #16]
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
 800e54c:	0020      	movs	r0, r4
 800e54e:	f7f5 fa86 	bl	8003a5e <lv_obj_invalidate>
}
 800e552:	bd70      	pop	{r4, r5, r6, pc}

0800e554 <lv_label_get_text>:
{
 800e554:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e556:	f7f6 fc0a 	bl	8004d6e <lv_obj_get_ext_attr>
    return ext->text;
 800e55a:	6800      	ldr	r0, [r0, #0]
}
 800e55c:	bd10      	pop	{r4, pc}

0800e55e <lv_label_get_long_mode>:
{
 800e55e:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e560:	f7f6 fc05 	bl	8004d6e <lv_obj_get_ext_attr>
    return ext->long_mode;
 800e564:	7c00      	ldrb	r0, [r0, #16]
 800e566:	0740      	lsls	r0, r0, #29
 800e568:	0f40      	lsrs	r0, r0, #29
}
 800e56a:	bd10      	pop	{r4, pc}

0800e56c <lv_label_get_align>:
{
 800e56c:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e56e:	f7f6 fbfe 	bl	8004d6e <lv_obj_get_ext_attr>
    lv_label_align_t align = ext->align;
 800e572:	7c00      	ldrb	r0, [r0, #16]
 800e574:	0680      	lsls	r0, r0, #26
 800e576:	0f80      	lsrs	r0, r0, #30
    if(align == LV_LABEL_ALIGN_AUTO) {
 800e578:	2803      	cmp	r0, #3
 800e57a:	d100      	bne.n	800e57e <lv_label_get_align+0x12>
        align = LV_LABEL_ALIGN_LEFT;
 800e57c:	2000      	movs	r0, #0
}
 800e57e:	bd10      	pop	{r4, pc}

0800e580 <lv_label_design>:
{
 800e580:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e582:	0006      	movs	r6, r0
 800e584:	b0ad      	sub	sp, #180	; 0xb4
 800e586:	000f      	movs	r7, r1
 800e588:	0015      	movs	r5, r2
        return LV_DESIGN_RES_NOT_COVER;
 800e58a:	0010      	movs	r0, r2
    if(mode == LV_DESIGN_COVER_CHK)
 800e58c:	2a02      	cmp	r2, #2
 800e58e:	d042      	beq.n	800e616 <lv_label_design+0x96>
    return LV_DESIGN_RES_OK;
 800e590:	2000      	movs	r0, #0
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 800e592:	4282      	cmp	r2, r0
 800e594:	d13f      	bne.n	800e616 <lv_label_design+0x96>
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e596:	0030      	movs	r0, r6
 800e598:	f7f6 fbe9 	bl	8004d6e <lv_obj_get_ext_attr>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 800e59c:	0029      	movs	r1, r5
 800e59e:	2204      	movs	r2, #4
 800e5a0:	0004      	movs	r4, r0
 800e5a2:	0030      	movs	r0, r6
 800e5a4:	f7f5 ff50 	bl	8004448 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 800e5a8:	0029      	movs	r1, r5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 800e5aa:	9005      	str	r0, [sp, #20]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 800e5ac:	2205      	movs	r2, #5
 800e5ae:	0030      	movs	r0, r6
 800e5b0:	f7f5 ff4a 	bl	8004448 <_lv_obj_get_style_int>
        lv_area_copy(&bg_coords, &label->coords);
 800e5b4:	0031      	movs	r1, r6
 800e5b6:	002b      	movs	r3, r5
 800e5b8:	3110      	adds	r1, #16
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
 800e5ba:	ad08      	add	r5, sp, #32
 800e5bc:	5cca      	ldrb	r2, [r1, r3]
 800e5be:	555a      	strb	r2, [r3, r5]
 800e5c0:	3301      	adds	r3, #1
    while(len) {
 800e5c2:	2b08      	cmp	r3, #8
 800e5c4:	d1fa      	bne.n	800e5bc <lv_label_design+0x3c>
        bg_coords.x1 -= w;
 800e5c6:	466b      	mov	r3, sp
 800e5c8:	882a      	ldrh	r2, [r5, #0]
 800e5ca:	8a9b      	ldrh	r3, [r3, #20]
        bg_coords.y1 -= h;
 800e5cc:	b280      	uxth	r0, r0
        bg_coords.x1 -= w;
 800e5ce:	1ad2      	subs	r2, r2, r3
 800e5d0:	802a      	strh	r2, [r5, #0]
        bg_coords.x2 += w;
 800e5d2:	88aa      	ldrh	r2, [r5, #4]
 800e5d4:	189b      	adds	r3, r3, r2
 800e5d6:	80ab      	strh	r3, [r5, #4]
        bg_coords.y1 -= h;
 800e5d8:	886b      	ldrh	r3, [r5, #2]
 800e5da:	1a1b      	subs	r3, r3, r0
 800e5dc:	806b      	strh	r3, [r5, #2]
        bg_coords.y2 += h;
 800e5de:	88eb      	ldrh	r3, [r5, #6]
 800e5e0:	18c0      	adds	r0, r0, r3
 800e5e2:	80e8      	strh	r0, [r5, #6]
        lv_draw_rect_dsc_init(&draw_rect_dsc);
 800e5e4:	a817      	add	r0, sp, #92	; 0x5c
 800e5e6:	f7fb fd11 	bl	800a00c <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(label, LV_LABEL_PART_MAIN, &draw_rect_dsc);
 800e5ea:	aa17      	add	r2, sp, #92	; 0x5c
 800e5ec:	2100      	movs	r1, #0
 800e5ee:	0030      	movs	r0, r6
 800e5f0:	f7f6 fbdc 	bl	8004dac <lv_obj_init_draw_rect_dsc>
        lv_draw_rect(&bg_coords, clip_area, &draw_rect_dsc);
 800e5f4:	aa17      	add	r2, sp, #92	; 0x5c
 800e5f6:	0039      	movs	r1, r7
 800e5f8:	0028      	movs	r0, r5
 800e5fa:	f7fb fd2f 	bl	800a05c <lv_draw_rect>
        get_txt_coords(label, &txt_coords);
 800e5fe:	a90a      	add	r1, sp, #40	; 0x28
 800e600:	0030      	movs	r0, r6
 800e602:	f7ff ff68 	bl	800e4d6 <get_txt_coords>
        bool is_common = _lv_area_intersect(&txt_clip, clip_area, &txt_coords);
 800e606:	aa0a      	add	r2, sp, #40	; 0x28
 800e608:	0039      	movs	r1, r7
 800e60a:	a80c      	add	r0, sp, #48	; 0x30
 800e60c:	f7fd f9c9 	bl	800b9a2 <_lv_area_intersect>
        if(!is_common) return LV_DESIGN_RES_OK;
 800e610:	2800      	cmp	r0, #0
 800e612:	d102      	bne.n	800e61a <lv_label_design+0x9a>
 800e614:	2000      	movs	r0, #0
}
 800e616:	b02d      	add	sp, #180	; 0xb4
 800e618:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_label_align_t align = lv_label_get_align(label);
 800e61a:	0030      	movs	r0, r6
 800e61c:	f7ff ffa6 	bl	800e56c <lv_label_get_align>
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 800e620:	7c23      	ldrb	r3, [r4, #16]
 800e622:	065d      	lsls	r5, r3, #25
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800e624:	b25a      	sxtb	r2, r3
        lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 800e626:	0fed      	lsrs	r5, r5, #31
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800e628:	2a00      	cmp	r2, #0
 800e62a:	da01      	bge.n	800e630 <lv_label_design+0xb0>
 800e62c:	2202      	movs	r2, #2
 800e62e:	4315      	orrs	r5, r2
        if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
 800e630:	075b      	lsls	r3, r3, #29
 800e632:	d101      	bne.n	800e638 <lv_label_design+0xb8>
 800e634:	2310      	movs	r3, #16
 800e636:	431d      	orrs	r5, r3
        if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 800e638:	2304      	movs	r3, #4
 800e63a:	2801      	cmp	r0, #1
 800e63c:	d002      	beq.n	800e644 <lv_label_design+0xc4>
        if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
 800e63e:	2802      	cmp	r0, #2
 800e640:	d101      	bne.n	800e646 <lv_label_design+0xc6>
 800e642:	2308      	movs	r3, #8
 800e644:	431d      	orrs	r5, r3
        lv_draw_label_dsc_init(&label_draw_dsc);
 800e646:	af0e      	add	r7, sp, #56	; 0x38
 800e648:	0038      	movs	r0, r7
 800e64a:	f7f9 fc83 	bl	8007f54 <lv_draw_label_dsc_init>
        label_draw_dsc.flag = flag;
 800e64e:	2251      	movs	r2, #81	; 0x51
        label_draw_dsc.sel_start = lv_label_get_text_sel_start(label);
 800e650:	4b4b      	ldr	r3, [pc, #300]	; (800e780 <lv_label_design+0x200>)
        lv_obj_init_draw_label_dsc(label, LV_LABEL_PART_MAIN, &label_draw_dsc);
 800e652:	2100      	movs	r1, #0
        label_draw_dsc.sel_start = lv_label_get_text_sel_start(label);
 800e654:	617b      	str	r3, [r7, #20]
        label_draw_dsc.sel_end = lv_label_get_text_sel_end(label);
 800e656:	61bb      	str	r3, [r7, #24]
        label_draw_dsc.ofs_x = ext->offset.x;
 800e658:	89a3      	ldrh	r3, [r4, #12]
        lv_obj_init_draw_label_dsc(label, LV_LABEL_PART_MAIN, &label_draw_dsc);
 800e65a:	0030      	movs	r0, r6
        label_draw_dsc.ofs_x = ext->offset.x;
 800e65c:	83bb      	strh	r3, [r7, #28]
        label_draw_dsc.ofs_y = ext->offset.y;
 800e65e:	89e3      	ldrh	r3, [r4, #14]
 800e660:	83fb      	strh	r3, [r7, #30]
        label_draw_dsc.flag = flag;
 800e662:	ab02      	add	r3, sp, #8
 800e664:	189b      	adds	r3, r3, r2
        lv_obj_init_draw_label_dsc(label, LV_LABEL_PART_MAIN, &label_draw_dsc);
 800e666:	003a      	movs	r2, r7
        label_draw_dsc.flag = flag;
 800e668:	701d      	strb	r5, [r3, #0]
        lv_obj_init_draw_label_dsc(label, LV_LABEL_PART_MAIN, &label_draw_dsc);
 800e66a:	f7f6 fd19 	bl	80050a0 <lv_obj_init_draw_label_dsc>
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
 800e66e:	2207      	movs	r2, #7
 800e670:	7c23      	ldrb	r3, [r4, #16]
 800e672:	401a      	ands	r2, r3
 800e674:	3a03      	subs	r2, #3
 800e676:	2a01      	cmp	r2, #1
 800e678:	d827      	bhi.n	800e6ca <lv_label_design+0x14a>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
 800e67a:	2230      	movs	r2, #48	; 0x30
 800e67c:	4013      	ands	r3, r2
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
 800e67e:	3b10      	subs	r3, #16
 800e680:	32b0      	adds	r2, #176	; 0xb0
 800e682:	4213      	tst	r3, r2
 800e684:	d121      	bne.n	800e6ca <lv_label_design+0x14a>
            _lv_txt_get_size(&size, ext->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 800e686:	2210      	movs	r2, #16
 800e688:	5ebb      	ldrsh	r3, [r7, r2]
 800e68a:	4a3e      	ldr	r2, [pc, #248]	; (800e784 <lv_label_design+0x204>)
 800e68c:	9502      	str	r5, [sp, #8]
 800e68e:	9201      	str	r2, [sp, #4]
 800e690:	210e      	movs	r1, #14
 800e692:	5e7a      	ldrsh	r2, [r7, r1]
 800e694:	ae07      	add	r6, sp, #28
 800e696:	9200      	str	r2, [sp, #0]
 800e698:	68ba      	ldr	r2, [r7, #8]
 800e69a:	6821      	ldr	r1, [r4, #0]
 800e69c:	0030      	movs	r0, r6
 800e69e:	f7fe fbc5 	bl	800ce2c <_lv_txt_get_size>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800e6a2:	ab02      	add	r3, sp, #8
 800e6a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e6a6:	aa02      	add	r2, sp, #8
 800e6a8:	8c12      	ldrh	r2, [r2, #32]
 800e6aa:	3301      	adds	r3, #1
 800e6ac:	1a9b      	subs	r3, r3, r2
            if(size.x > lv_area_get_width(&txt_coords)) {
 800e6ae:	2100      	movs	r1, #0
 800e6b0:	5e72      	ldrsh	r2, [r6, r1]
 800e6b2:	b21b      	sxth	r3, r3
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	dd08      	ble.n	800e6ca <lv_label_design+0x14a>
                label_draw_dsc.flag &= ~LV_TXT_FLAG_CENTER;
 800e6b8:	2151      	movs	r1, #81	; 0x51
 800e6ba:	220c      	movs	r2, #12
 800e6bc:	ab02      	add	r3, sp, #8
 800e6be:	185b      	adds	r3, r3, r1
 800e6c0:	781b      	ldrb	r3, [r3, #0]
 800e6c2:	4393      	bics	r3, r2
 800e6c4:	aa02      	add	r2, sp, #8
 800e6c6:	1852      	adds	r2, r2, r1
 800e6c8:	7013      	strb	r3, [r2, #0]
        lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	ae0e      	add	r6, sp, #56	; 0x38
 800e6ce:	9300      	str	r3, [sp, #0]
 800e6d0:	6823      	ldr	r3, [r4, #0]
 800e6d2:	0032      	movs	r2, r6
 800e6d4:	a90c      	add	r1, sp, #48	; 0x30
 800e6d6:	a80a      	add	r0, sp, #40	; 0x28
 800e6d8:	f7f9 fc54 	bl	8007f84 <lv_draw_label>
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
 800e6dc:	2207      	movs	r2, #7
 800e6de:	7c23      	ldrb	r3, [r4, #16]
 800e6e0:	4013      	ands	r3, r2
 800e6e2:	2b04      	cmp	r3, #4
 800e6e4:	d000      	beq.n	800e6e8 <lv_label_design+0x168>
 800e6e6:	e795      	b.n	800e614 <lv_label_design+0x94>
            _lv_txt_get_size(&size, ext->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 800e6e8:	2210      	movs	r2, #16
 800e6ea:	5eb3      	ldrsh	r3, [r6, r2]
 800e6ec:	4a25      	ldr	r2, [pc, #148]	; (800e784 <lv_label_design+0x204>)
 800e6ee:	9502      	str	r5, [sp, #8]
 800e6f0:	9201      	str	r2, [sp, #4]
 800e6f2:	210e      	movs	r1, #14
 800e6f4:	5e72      	ldrsh	r2, [r6, r1]
 800e6f6:	af07      	add	r7, sp, #28
 800e6f8:	9200      	str	r2, [sp, #0]
 800e6fa:	68b2      	ldr	r2, [r6, #8]
 800e6fc:	0038      	movs	r0, r7
 800e6fe:	6821      	ldr	r1, [r4, #0]
 800e700:	f7fe fb94 	bl	800ce2c <_lv_txt_get_size>
            if(size.x > lv_area_get_width(&txt_coords)) {
 800e704:	2300      	movs	r3, #0
 800e706:	5ef8      	ldrsh	r0, [r7, r3]
 800e708:	ab02      	add	r3, sp, #8
 800e70a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e70c:	aa02      	add	r2, sp, #8
 800e70e:	8c12      	ldrh	r2, [r2, #32]
 800e710:	3301      	adds	r3, #1
 800e712:	1a9b      	subs	r3, r3, r2
 800e714:	b21b      	sxth	r3, r3
 800e716:	4298      	cmp	r0, r3
 800e718:	dd15      	ble.n	800e746 <lv_label_design+0x1c6>
                                       lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 800e71a:	2220      	movs	r2, #32
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
 800e71c:	89a5      	ldrh	r5, [r4, #12]
                                       lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 800e71e:	0011      	movs	r1, r2
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
 800e720:	182d      	adds	r5, r5, r0
                                       lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 800e722:	68b0      	ldr	r0, [r6, #8]
 800e724:	f7fc fc86 	bl	800b034 <lv_font_get_glyph_width>
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
 800e728:	2303      	movs	r3, #3
 800e72a:	4358      	muls	r0, r3
 800e72c:	b2ad      	uxth	r5, r5
 800e72e:	182d      	adds	r5, r5, r0
 800e730:	83b5      	strh	r5, [r6, #28]
                label_draw_dsc.ofs_y = ext->offset.y;
 800e732:	89e3      	ldrh	r3, [r4, #14]
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
 800e734:	0032      	movs	r2, r6
                label_draw_dsc.ofs_y = ext->offset.y;
 800e736:	83f3      	strh	r3, [r6, #30]
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
 800e738:	2300      	movs	r3, #0
 800e73a:	9300      	str	r3, [sp, #0]
 800e73c:	6823      	ldr	r3, [r4, #0]
 800e73e:	a90c      	add	r1, sp, #48	; 0x30
 800e740:	a80a      	add	r0, sp, #40	; 0x28
 800e742:	f7f9 fc1f 	bl	8007f84 <lv_draw_label>
            if(size.y > lv_area_get_height(&txt_coords)) {
 800e746:	ab07      	add	r3, sp, #28
 800e748:	a80a      	add	r0, sp, #40	; 0x28
 800e74a:	2202      	movs	r2, #2
 800e74c:	5e9a      	ldrsh	r2, [r3, r2]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800e74e:	88c3      	ldrh	r3, [r0, #6]
 800e750:	8841      	ldrh	r1, [r0, #2]
 800e752:	3301      	adds	r3, #1
 800e754:	1a5b      	subs	r3, r3, r1
 800e756:	b21b      	sxth	r3, r3
 800e758:	429a      	cmp	r2, r3
 800e75a:	dc00      	bgt.n	800e75e <lv_label_design+0x1de>
 800e75c:	e75a      	b.n	800e614 <lv_label_design+0x94>
                label_draw_dsc.ofs_x = ext->offset.x;
 800e75e:	89a3      	ldrh	r3, [r4, #12]
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
 800e760:	a90c      	add	r1, sp, #48	; 0x30
                label_draw_dsc.ofs_x = ext->offset.x;
 800e762:	83b3      	strh	r3, [r6, #28]
                label_draw_dsc.ofs_y = ext->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 800e764:	68b3      	ldr	r3, [r6, #8]
 800e766:	891b      	ldrh	r3, [r3, #8]
 800e768:	189b      	adds	r3, r3, r2
 800e76a:	89e2      	ldrh	r2, [r4, #14]
 800e76c:	189b      	adds	r3, r3, r2
 800e76e:	83f3      	strh	r3, [r6, #30]
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
 800e770:	2300      	movs	r3, #0
 800e772:	9300      	str	r3, [sp, #0]
 800e774:	6823      	ldr	r3, [r4, #0]
 800e776:	0032      	movs	r2, r6
 800e778:	f7f9 fc04 	bl	8007f84 <lv_draw_label>
 800e77c:	e74a      	b.n	800e614 <lv_label_design+0x94>
 800e77e:	46c0      	nop			; (mov r8, r8)
 800e780:	0000ffff 	.word	0x0000ffff
 800e784:	00007c18 	.word	0x00007c18

0800e788 <lv_label_get_recolor>:
{
 800e788:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e78a:	f7f6 faf0 	bl	8004d6e <lv_obj_get_ext_attr>
    return ext->recolor == 0 ? false : true;
 800e78e:	7c00      	ldrb	r0, [r0, #16]
 800e790:	0640      	lsls	r0, r0, #25
 800e792:	0fc0      	lsrs	r0, r0, #31
}
 800e794:	bd10      	pop	{r4, pc}
	...

0800e798 <lv_label_get_letter_on>:
{
 800e798:	b5f0      	push	{r4, r5, r6, r7, lr}
    pos.x = pos_in->x - lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
 800e79a:	2200      	movs	r2, #0
 800e79c:	5e8b      	ldrsh	r3, [r1, r2]
{
 800e79e:	b093      	sub	sp, #76	; 0x4c
 800e7a0:	000d      	movs	r5, r1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 800e7a2:	2212      	movs	r2, #18
 800e7a4:	2100      	movs	r1, #0
 800e7a6:	0004      	movs	r4, r0
    pos.x = pos_in->x - lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
 800e7a8:	9309      	str	r3, [sp, #36]	; 0x24
 800e7aa:	f7f5 fe4d 	bl	8004448 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 800e7ae:	2210      	movs	r2, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 800e7b0:	900c      	str	r0, [sp, #48]	; 0x30
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 800e7b2:	2100      	movs	r1, #0
 800e7b4:	0020      	movs	r0, r4
    pos.y = pos_in->y - lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
 800e7b6:	886d      	ldrh	r5, [r5, #2]
 800e7b8:	f7f5 fe46 	bl	8004448 <_lv_obj_get_style_int>
    get_txt_coords(label, &txt_coords);
 800e7bc:	ae10      	add	r6, sp, #64	; 0x40
    pos.y = pos_in->y - lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
 800e7be:	1a2d      	subs	r5, r5, r0
 800e7c0:	b22b      	sxth	r3, r5
    get_txt_coords(label, &txt_coords);
 800e7c2:	0031      	movs	r1, r6
 800e7c4:	0020      	movs	r0, r4
    pos.y = pos_in->y - lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
 800e7c6:	930a      	str	r3, [sp, #40]	; 0x28
    get_txt_coords(label, &txt_coords);
 800e7c8:	f7ff fe85 	bl	800e4d6 <get_txt_coords>
    const char * txt         = lv_label_get_text(label);
 800e7cc:	0020      	movs	r0, r4
 800e7ce:	f7ff fec1 	bl	800e554 <lv_label_get_text>
 800e7d2:	9005      	str	r0, [sp, #20]
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
 800e7d4:	0020      	movs	r0, r4
 800e7d6:	f7f6 faca 	bl	8004d6e <lv_obj_get_ext_attr>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800e7da:	88b3      	ldrh	r3, [r6, #4]
 800e7dc:	8832      	ldrh	r2, [r6, #0]
 800e7de:	3301      	adds	r3, #1
 800e7e0:	1a9b      	subs	r3, r3, r2
 800e7e2:	b21b      	sxth	r3, r3
 800e7e4:	0005      	movs	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr)
 800e7e6:	4a6e      	ldr	r2, [pc, #440]	; (800e9a0 <lv_label_get_letter_on+0x208>)
 800e7e8:	2100      	movs	r1, #0
 800e7ea:	0020      	movs	r0, r4
 800e7ec:	930b      	str	r3, [sp, #44]	; 0x2c
 800e7ee:	f7f6 f8d9 	bl	80049a4 <_lv_obj_get_style_ptr>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int)
 800e7f2:	4a6c      	ldr	r2, [pc, #432]	; (800e9a4 <lv_label_get_letter_on+0x20c>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr)
 800e7f4:	9006      	str	r0, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int)
 800e7f6:	2100      	movs	r1, #0
 800e7f8:	0020      	movs	r0, r4
 800e7fa:	f7f5 fe25 	bl	8004448 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int)
 800e7fe:	4a6a      	ldr	r2, [pc, #424]	; (800e9a8 <lv_label_get_letter_on+0x210>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int)
 800e800:	900d      	str	r0, [sp, #52]	; 0x34
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int)
 800e802:	2100      	movs	r1, #0
 800e804:	0020      	movs	r0, r4
 800e806:	f7f5 fe1f 	bl	8004448 <_lv_obj_get_style_int>
    lv_coord_t letter_height    = lv_font_get_line_height(font);
 800e80a:	9b06      	ldr	r3, [sp, #24]
 800e80c:	9007      	str	r0, [sp, #28]
 800e80e:	2208      	movs	r2, #8
 800e810:	5e9b      	ldrsh	r3, [r3, r2]
 800e812:	9308      	str	r3, [sp, #32]
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 800e814:	7c2b      	ldrb	r3, [r5, #16]
 800e816:	065f      	lsls	r7, r3, #25
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800e818:	b25a      	sxtb	r2, r3
    lv_txt_flag_t flag       = LV_TXT_FLAG_NONE;
 800e81a:	0fff      	lsrs	r7, r7, #31
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800e81c:	2a00      	cmp	r2, #0
 800e81e:	da01      	bge.n	800e824 <lv_label_get_letter_on+0x8c>
 800e820:	2202      	movs	r2, #2
 800e822:	4317      	orrs	r7, r2
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
 800e824:	075b      	lsls	r3, r3, #29
 800e826:	d101      	bne.n	800e82c <lv_label_get_letter_on+0x94>
 800e828:	2310      	movs	r3, #16
 800e82a:	431f      	orrs	r7, r3
    lv_label_align_t align = lv_label_get_align(label);
 800e82c:	0020      	movs	r0, r4
 800e82e:	f7ff fe9d 	bl	800e56c <lv_label_get_align>
    if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 800e832:	2304      	movs	r3, #4
    lv_label_align_t align = lv_label_get_align(label);
 800e834:	0006      	movs	r6, r0
    if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 800e836:	2801      	cmp	r0, #1
 800e838:	d002      	beq.n	800e840 <lv_label_get_letter_on+0xa8>
    if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
 800e83a:	2802      	cmp	r0, #2
 800e83c:	d101      	bne.n	800e842 <lv_label_get_letter_on+0xaa>
 800e83e:	2308      	movs	r3, #8
 800e840:	431f      	orrs	r7, r3
{
 800e842:	2400      	movs	r4, #0
 800e844:	9403      	str	r4, [sp, #12]
 800e846:	e04e      	b.n	800e8e6 <lv_label_get_letter_on+0x14e>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 800e848:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e84a:	9a07      	ldr	r2, [sp, #28]
 800e84c:	9700      	str	r7, [sp, #0]
 800e84e:	9906      	ldr	r1, [sp, #24]
 800e850:	9804      	ldr	r0, [sp, #16]
 800e852:	f7fe fa07 	bl	800cc64 <_lv_txt_get_next_line>
 800e856:	9b03      	ldr	r3, [sp, #12]
        if(pos.y <= y + letter_height) {
 800e858:	9a0a      	ldr	r2, [sp, #40]	; 0x28
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 800e85a:	181d      	adds	r5, r3, r0
        if(pos.y <= y + letter_height) {
 800e85c:	9b08      	ldr	r3, [sp, #32]
 800e85e:	18e3      	adds	r3, r4, r3
 800e860:	429a      	cmp	r2, r3
 800e862:	dc3a      	bgt.n	800e8da <lv_label_get_letter_on+0x142>
            letter = _lv_txt_encoded_prev(txt, &tmp);
 800e864:	4b51      	ldr	r3, [pc, #324]	; (800e9ac <lv_label_get_letter_on+0x214>)
            uint32_t tmp = new_line_start;
 800e866:	950f      	str	r5, [sp, #60]	; 0x3c
            letter = _lv_txt_encoded_prev(txt, &tmp);
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	a90f      	add	r1, sp, #60	; 0x3c
 800e86c:	9805      	ldr	r0, [sp, #20]
 800e86e:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
 800e870:	280a      	cmp	r0, #10
 800e872:	d004      	beq.n	800e87e <lv_label_get_letter_on+0xe6>
 800e874:	9b05      	ldr	r3, [sp, #20]
 800e876:	5d5b      	ldrb	r3, [r3, r5]
 800e878:	425a      	negs	r2, r3
 800e87a:	4153      	adcs	r3, r2
 800e87c:	18ed      	adds	r5, r5, r3
    if(align == LV_LABEL_ALIGN_CENTER) {
 800e87e:	2e01      	cmp	r6, #1
 800e880:	d13b      	bne.n	800e8fa <lv_label_get_letter_on+0x162>
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 800e882:	9b03      	ldr	r3, [sp, #12]
 800e884:	9a06      	ldr	r2, [sp, #24]
 800e886:	1ae9      	subs	r1, r5, r3
 800e888:	9700      	str	r7, [sp, #0]
 800e88a:	9b07      	ldr	r3, [sp, #28]
 800e88c:	9804      	ldr	r0, [sp, #16]
 800e88e:	f7fe f99f 	bl	800cbd0 <_lv_txt_get_width>
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 800e892:	aa10      	add	r2, sp, #64	; 0x40
 800e894:	8893      	ldrh	r3, [r2, #4]
 800e896:	8814      	ldrh	r4, [r2, #0]
 800e898:	3301      	adds	r3, #1
 800e89a:	1b1b      	subs	r3, r3, r4
 800e89c:	b21b      	sxth	r3, r3
 800e89e:	0fdc      	lsrs	r4, r3, #31
 800e8a0:	18e3      	adds	r3, r4, r3
 800e8a2:	0fc4      	lsrs	r4, r0, #31
 800e8a4:	1820      	adds	r0, r4, r0
 800e8a6:	105b      	asrs	r3, r3, #1
 800e8a8:	1040      	asrs	r0, r0, #1
 800e8aa:	1a1c      	subs	r4, r3, r0
        x += lv_area_get_width(&txt_coords) - line_w;
 800e8ac:	b224      	sxth	r4, r4
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 800e8ae:	220b      	movs	r2, #11
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	a90c      	add	r1, sp, #48	; 0x30
 800e8b4:	1852      	adds	r2, r2, r1
 800e8b6:	7013      	strb	r3, [r2, #0]
    uint32_t i = 0;
 800e8b8:	930f      	str	r3, [sp, #60]	; 0x3c
    uint32_t i_act = i;
 800e8ba:	9308      	str	r3, [sp, #32]
    if(new_line_start > 0) {
 800e8bc:	429d      	cmp	r5, r3
 800e8be:	d138      	bne.n	800e932 <lv_label_get_letter_on+0x19a>
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
 800e8c0:	4c3b      	ldr	r4, [pc, #236]	; (800e9b0 <lv_label_get_letter_on+0x218>)
 800e8c2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e8c4:	6823      	ldr	r3, [r4, #0]
 800e8c6:	9804      	ldr	r0, [sp, #16]
 800e8c8:	4798      	blx	r3
    return logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
 800e8ca:	6823      	ldr	r3, [r4, #0]
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
 800e8cc:	0005      	movs	r5, r0
    return logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
 800e8ce:	9903      	ldr	r1, [sp, #12]
 800e8d0:	9805      	ldr	r0, [sp, #20]
 800e8d2:	4798      	blx	r3
 800e8d4:	1940      	adds	r0, r0, r5
}
 800e8d6:	b013      	add	sp, #76	; 0x4c
 800e8d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        y += letter_height + line_space;
 800e8da:	9b08      	ldr	r3, [sp, #32]
 800e8dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 800e8de:	9503      	str	r5, [sp, #12]
        y += letter_height + line_space;
 800e8e0:	189b      	adds	r3, r3, r2
 800e8e2:	191c      	adds	r4, r3, r4
 800e8e4:	b224      	sxth	r4, r4
    while(txt[line_start] != '\0') {
 800e8e6:	9a03      	ldr	r2, [sp, #12]
 800e8e8:	9b05      	ldr	r3, [sp, #20]
 800e8ea:	4694      	mov	ip, r2
 800e8ec:	4463      	add	r3, ip
 800e8ee:	9304      	str	r3, [sp, #16]
 800e8f0:	781b      	ldrb	r3, [r3, #0]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d1a8      	bne.n	800e848 <lv_label_get_letter_on+0xb0>
 800e8f6:	0015      	movs	r5, r2
 800e8f8:	e7c1      	b.n	800e87e <lv_label_get_letter_on+0xe6>
    lv_coord_t x = 0;
 800e8fa:	2400      	movs	r4, #0
    else if(align == LV_LABEL_ALIGN_RIGHT) {
 800e8fc:	2e02      	cmp	r6, #2
 800e8fe:	d1d6      	bne.n	800e8ae <lv_label_get_letter_on+0x116>
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 800e900:	9b03      	ldr	r3, [sp, #12]
 800e902:	9700      	str	r7, [sp, #0]
 800e904:	1ae9      	subs	r1, r5, r3
 800e906:	9a06      	ldr	r2, [sp, #24]
 800e908:	9b07      	ldr	r3, [sp, #28]
 800e90a:	9804      	ldr	r0, [sp, #16]
 800e90c:	f7fe f960 	bl	800cbd0 <_lv_txt_get_width>
        x += lv_area_get_width(&txt_coords) - line_w;
 800e910:	ab10      	add	r3, sp, #64	; 0x40
 800e912:	889c      	ldrh	r4, [r3, #4]
 800e914:	881b      	ldrh	r3, [r3, #0]
 800e916:	3401      	adds	r4, #1
 800e918:	1ae4      	subs	r4, r4, r3
 800e91a:	1a24      	subs	r4, r4, r0
 800e91c:	e7c6      	b.n	800e8ac <lv_label_get_letter_on+0x114>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
 800e91e:	200b      	movs	r0, #11
 800e920:	9b04      	ldr	r3, [sp, #16]
 800e922:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e924:	5c99      	ldrb	r1, [r3, r2]
 800e926:	ab0c      	add	r3, sp, #48	; 0x30
 800e928:	18c0      	adds	r0, r0, r3
 800e92a:	f7fe f937 	bl	800cb9c <_lv_txt_is_cmd>
 800e92e:	2800      	cmp	r0, #0
 800e930:	d014      	beq.n	800e95c <lv_label_get_letter_on+0x1c4>
        while(i + line_start < new_line_start) {
 800e932:	9b03      	ldr	r3, [sp, #12]
 800e934:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e936:	189b      	adds	r3, r3, r2
 800e938:	42ab      	cmp	r3, r5
 800e93a:	d2c1      	bcs.n	800e8c0 <lv_label_get_letter_on+0x128>
            uint32_t letter = _lv_txt_encoded_next(bidi_txt, &i);
 800e93c:	4e1d      	ldr	r6, [pc, #116]	; (800e9b4 <lv_label_get_letter_on+0x21c>)
 800e93e:	a90f      	add	r1, sp, #60	; 0x3c
 800e940:	6833      	ldr	r3, [r6, #0]
 800e942:	9804      	ldr	r0, [sp, #16]
 800e944:	4798      	blx	r3
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
 800e946:	9b04      	ldr	r3, [sp, #16]
 800e948:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
            uint32_t letter = _lv_txt_encoded_next(bidi_txt, &i);
 800e94a:	900a      	str	r0, [sp, #40]	; 0x28
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
 800e94c:	2100      	movs	r1, #0
 800e94e:	1898      	adds	r0, r3, r2
 800e950:	6833      	ldr	r3, [r6, #0]
 800e952:	4798      	blx	r3
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800e954:	2301      	movs	r3, #1
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
 800e956:	0006      	movs	r6, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800e958:	421f      	tst	r7, r3
 800e95a:	d1e0      	bne.n	800e91e <lv_label_get_letter_on+0x186>
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
 800e95c:	0032      	movs	r2, r6
 800e95e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e960:	9806      	ldr	r0, [sp, #24]
 800e962:	f7fc fb67 	bl	800b034 <lv_font_get_glyph_width>
    pos.x = pos_in->x - lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
 800e966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e968:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e96a:	1a9a      	subs	r2, r3, r2
            if(pos.x < x + gw || i + line_start == new_line_start || txt[i_act + line_start] == '\0') {
 800e96c:	b203      	sxth	r3, r0
 800e96e:	b212      	sxth	r2, r2
 800e970:	18e3      	adds	r3, r4, r3
 800e972:	429a      	cmp	r2, r3
 800e974:	da02      	bge.n	800e97c <lv_label_get_letter_on+0x1e4>
                i = i_act;
 800e976:	9b08      	ldr	r3, [sp, #32]
 800e978:	930f      	str	r3, [sp, #60]	; 0x3c
                break;
 800e97a:	e7a1      	b.n	800e8c0 <lv_label_get_letter_on+0x128>
            if(pos.x < x + gw || i + line_start == new_line_start || txt[i_act + line_start] == '\0') {
 800e97c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e97e:	9a03      	ldr	r2, [sp, #12]
 800e980:	189a      	adds	r2, r3, r2
 800e982:	42aa      	cmp	r2, r5
 800e984:	d0f7      	beq.n	800e976 <lv_label_get_letter_on+0x1de>
 800e986:	9903      	ldr	r1, [sp, #12]
 800e988:	9a05      	ldr	r2, [sp, #20]
 800e98a:	1852      	adds	r2, r2, r1
 800e98c:	9908      	ldr	r1, [sp, #32]
 800e98e:	5c52      	ldrb	r2, [r2, r1]
 800e990:	2a00      	cmp	r2, #0
 800e992:	d0f0      	beq.n	800e976 <lv_label_get_letter_on+0x1de>
            x += letter_space;
 800e994:	9a07      	ldr	r2, [sp, #28]
            i_act = i;
 800e996:	9308      	str	r3, [sp, #32]
            x += letter_space;
 800e998:	18a4      	adds	r4, r4, r2
 800e99a:	1904      	adds	r4, r0, r4
 800e99c:	b224      	sxth	r4, r4
 800e99e:	e7c8      	b.n	800e932 <lv_label_get_letter_on+0x19a>
 800e9a0:	0000808e 	.word	0x0000808e
 800e9a4:	00008081 	.word	0x00008081
 800e9a8:	00008080 	.word	0x00008080
 800e9ac:	20000058 	.word	0x20000058
 800e9b0:	20000050 	.word	0x20000050
 800e9b4:	20000054 	.word	0x20000054

0800e9b8 <lv_label_refr_text>:
{
 800e9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9ba:	b08f      	sub	sp, #60	; 0x3c
 800e9bc:	0007      	movs	r7, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e9be:	f7f6 f9d6 	bl	8004d6e <lv_obj_get_ext_attr>
    if(ext->text == NULL) return;
 800e9c2:	6803      	ldr	r3, [r0, #0]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e9c4:	0004      	movs	r4, r0
    if(ext->text == NULL) return;
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d05d      	beq.n	800ea86 <lv_label_refr_text+0xce>
    get_txt_coords(label, &txt_coords);
 800e9ca:	ad0c      	add	r5, sp, #48	; 0x30
 800e9cc:	0029      	movs	r1, r5
 800e9ce:	0038      	movs	r0, r7
 800e9d0:	f7ff fd81 	bl	800e4d6 <get_txt_coords>
 800e9d4:	88ae      	ldrh	r6, [r5, #4]
 800e9d6:	882b      	ldrh	r3, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr)
 800e9d8:	4a7e      	ldr	r2, [pc, #504]	; (800ebd4 <lv_label_refr_text+0x21c>)
 800e9da:	2100      	movs	r1, #0
 800e9dc:	3601      	adds	r6, #1
 800e9de:	0038      	movs	r0, r7
 800e9e0:	1af6      	subs	r6, r6, r3
 800e9e2:	f7f5 ffdf 	bl	80049a4 <_lv_obj_get_style_ptr>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int)
 800e9e6:	4a7c      	ldr	r2, [pc, #496]	; (800ebd8 <lv_label_refr_text+0x220>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr)
 800e9e8:	9005      	str	r0, [sp, #20]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int)
 800e9ea:	2100      	movs	r1, #0
 800e9ec:	0038      	movs	r0, r7
 800e9ee:	f7f5 fd2b 	bl	8004448 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int)
 800e9f2:	4a7a      	ldr	r2, [pc, #488]	; (800ebdc <lv_label_refr_text+0x224>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int)
 800e9f4:	9006      	str	r0, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int)
 800e9f6:	2100      	movs	r1, #0
 800e9f8:	0038      	movs	r0, r7
 800e9fa:	f7f5 fd25 	bl	8004448 <_lv_obj_get_style_int>
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 800e9fe:	7c22      	ldrb	r2, [r4, #16]
 800ea00:	b236      	sxth	r6, r6
 800ea02:	0653      	lsls	r3, r2, #25
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800ea04:	b251      	sxtb	r1, r2
 800ea06:	9007      	str	r0, [sp, #28]
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 800ea08:	0fdb      	lsrs	r3, r3, #31
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800ea0a:	2900      	cmp	r1, #0
 800ea0c:	da01      	bge.n	800ea12 <lv_label_refr_text+0x5a>
 800ea0e:	2102      	movs	r1, #2
 800ea10:	430b      	orrs	r3, r1
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
 800ea12:	0752      	lsls	r2, r2, #29
 800ea14:	d101      	bne.n	800ea1a <lv_label_refr_text+0x62>
 800ea16:	2210      	movs	r2, #16
 800ea18:	4313      	orrs	r3, r2
    _lv_txt_get_size(&size, ext->text, font, letter_space, line_space, max_w, flag);
 800ea1a:	9302      	str	r3, [sp, #8]
 800ea1c:	9b06      	ldr	r3, [sp, #24]
 800ea1e:	9601      	str	r6, [sp, #4]
 800ea20:	9300      	str	r3, [sp, #0]
 800ea22:	ad09      	add	r5, sp, #36	; 0x24
 800ea24:	9b07      	ldr	r3, [sp, #28]
 800ea26:	9a05      	ldr	r2, [sp, #20]
 800ea28:	6821      	ldr	r1, [r4, #0]
 800ea2a:	0028      	movs	r0, r5
 800ea2c:	f7fe f9fe 	bl	800ce2c <_lv_txt_get_size>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 800ea30:	2307      	movs	r3, #7
 800ea32:	7c26      	ldrb	r6, [r4, #16]
 800ea34:	401e      	ands	r6, r3
 800ea36:	d128      	bne.n	800ea8a <lv_label_refr_text+0xd2>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 800ea38:	2212      	movs	r2, #18
 800ea3a:	0031      	movs	r1, r6
 800ea3c:	0038      	movs	r0, r7
 800ea3e:	f7f5 fd03 	bl	8004448 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 800ea42:	2213      	movs	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 800ea44:	0004      	movs	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 800ea46:	0031      	movs	r1, r6
 800ea48:	0038      	movs	r0, r7
 800ea4a:	f7f5 fcfd 	bl	8004448 <_lv_obj_get_style_int>
        size.x += lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_right(label, LV_LABEL_PART_MAIN);
 800ea4e:	1824      	adds	r4, r4, r0
 800ea50:	8828      	ldrh	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 800ea52:	2210      	movs	r2, #16
 800ea54:	1900      	adds	r0, r0, r4
 800ea56:	8028      	strh	r0, [r5, #0]
 800ea58:	0031      	movs	r1, r6
 800ea5a:	0038      	movs	r0, r7
 800ea5c:	f7f5 fcf4 	bl	8004448 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 800ea60:	2211      	movs	r2, #17
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 800ea62:	0004      	movs	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 800ea64:	0031      	movs	r1, r6
 800ea66:	0038      	movs	r0, r7
 800ea68:	f7f5 fcee 	bl	8004448 <_lv_obj_get_style_int>
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
 800ea6c:	886a      	ldrh	r2, [r5, #2]
 800ea6e:	1824      	adds	r4, r4, r0
 800ea70:	1912      	adds	r2, r2, r4
 800ea72:	b212      	sxth	r2, r2
        lv_obj_set_size(label, size.x, size.y);
 800ea74:	2300      	movs	r3, #0
 800ea76:	5ee9      	ldrsh	r1, [r5, r3]
 800ea78:	0038      	movs	r0, r7
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
 800ea7a:	806a      	strh	r2, [r5, #2]
        lv_obj_set_size(label, size.x, size.y);
 800ea7c:	f7f5 fa5c 	bl	8003f38 <lv_obj_set_size>
    lv_obj_invalidate(label);
 800ea80:	0038      	movs	r0, r7
 800ea82:	f7f4 ffec 	bl	8003a5e <lv_obj_invalidate>
}
 800ea86:	b00f      	add	sp, #60	; 0x3c
 800ea88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(ext->long_mode == LV_LABEL_LONG_SROLL) {
 800ea8a:	1ef3      	subs	r3, r6, #3
 800ea8c:	2b01      	cmp	r3, #1
 800ea8e:	d9f7      	bls.n	800ea80 <lv_label_refr_text+0xc8>
    else if(ext->long_mode == LV_LABEL_LONG_DOT) {
 800ea90:	2e02      	cmp	r6, #2
 800ea92:	d000      	beq.n	800ea96 <lv_label_refr_text+0xde>
 800ea94:	e087      	b.n	800eba6 <lv_label_refr_text+0x1ee>
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
 800ea96:	ae0c      	add	r6, sp, #48	; 0x30
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ea98:	88f3      	ldrh	r3, [r6, #6]
 800ea9a:	8872      	ldrh	r2, [r6, #2]
 800ea9c:	3301      	adds	r3, #1
 800ea9e:	1a9b      	subs	r3, r3, r2
 800eaa0:	2102      	movs	r1, #2
 800eaa2:	5e6a      	ldrsh	r2, [r5, r1]
 800eaa4:	b21b      	sxth	r3, r3
 800eaa6:	429a      	cmp	r2, r3
 800eaa8:	dc02      	bgt.n	800eab0 <lv_label_refr_text+0xf8>
            ext->dot_end = LV_LABEL_DOT_END_INV;
 800eaaa:	4b4d      	ldr	r3, [pc, #308]	; (800ebe0 <lv_label_refr_text+0x228>)
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 800eaac:	60a3      	str	r3, [r4, #8]
 800eaae:	e7e7      	b.n	800ea80 <lv_label_refr_text+0xc8>
        else if(_lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
 800eab0:	4b4c      	ldr	r3, [pc, #304]	; (800ebe4 <lv_label_refr_text+0x22c>)
 800eab2:	6820      	ldr	r0, [r4, #0]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	4798      	blx	r3
 800eab8:	2803      	cmp	r0, #3
 800eaba:	d9f6      	bls.n	800eaaa <lv_label_refr_text+0xf2>
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
 800eabc:	222e      	movs	r2, #46	; 0x2e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800eabe:	88b5      	ldrh	r5, [r6, #4]
 800eac0:	8833      	ldrh	r3, [r6, #0]
 800eac2:	0011      	movs	r1, r2
 800eac4:	3501      	adds	r5, #1
 800eac6:	9805      	ldr	r0, [sp, #20]
 800eac8:	1aed      	subs	r5, r5, r3
 800eaca:	f7fc fab3 	bl	800b034 <lv_font_get_glyph_width>
 800eace:	9b07      	ldr	r3, [sp, #28]
 800ead0:	b2ad      	uxth	r5, r5
 800ead2:	18c0      	adds	r0, r0, r3
            p.x = lv_area_get_width(&txt_coords) -
 800ead4:	0083      	lsls	r3, r0, #2
 800ead6:	1ac0      	subs	r0, r0, r3
 800ead8:	1828      	adds	r0, r5, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800eada:	88f5      	ldrh	r5, [r6, #6]
 800eadc:	8871      	ldrh	r1, [r6, #2]
 800eade:	3501      	adds	r5, #1
 800eae0:	1a6d      	subs	r5, r5, r1
 800eae2:	ab04      	add	r3, sp, #16
 800eae4:	b2ad      	uxth	r5, r5
 800eae6:	8318      	strh	r0, [r3, #24]
 800eae8:	b228      	sxth	r0, r5
            p.y = lv_area_get_height(&txt_coords);
 800eaea:	8358      	strh	r0, [r3, #26]
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
 800eaec:	9b05      	ldr	r3, [sp, #20]
 800eaee:	2608      	movs	r6, #8
 800eaf0:	5f9e      	ldrsh	r6, [r3, r6]
 800eaf2:	9b06      	ldr	r3, [sp, #24]
 800eaf4:	18f1      	adds	r1, r6, r3
            y_overed = p.y %
 800eaf6:	f7f1 fcad 	bl	8000454 <__aeabi_idivmod>
            if(y_overed >= lv_font_get_line_height(font)) {
 800eafa:	b20b      	sxth	r3, r1
 800eafc:	42b3      	cmp	r3, r6
 800eafe:	db46      	blt.n	800eb8e <lv_label_refr_text+0x1d6>
                p.y += lv_font_get_line_height(font);
 800eb00:	19ad      	adds	r5, r5, r6
 800eb02:	1a6d      	subs	r5, r5, r1
                p.y -= line_space;
 800eb04:	ab04      	add	r3, sp, #16
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 800eb06:	a90a      	add	r1, sp, #40	; 0x28
 800eb08:	0038      	movs	r0, r7
                p.y -= line_space;
 800eb0a:	835d      	strh	r5, [r3, #26]
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 800eb0c:	f7ff fe44 	bl	800e798 <lv_label_get_letter_on>
            size_t txt_len = strlen(ext->text);
 800eb10:	6825      	ldr	r5, [r4, #0]
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 800eb12:	9005      	str	r0, [sp, #20]
            size_t txt_len = strlen(ext->text);
 800eb14:	0028      	movs	r0, r5
 800eb16:	f7f1 fafd 	bl	8000114 <strlen>
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(ext->text, letter_id);
 800eb1a:	4b33      	ldr	r3, [pc, #204]	; (800ebe8 <lv_label_refr_text+0x230>)
            size_t txt_len = strlen(ext->text);
 800eb1c:	0006      	movs	r6, r0
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(ext->text, letter_id);
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	9905      	ldr	r1, [sp, #20]
 800eb22:	0028      	movs	r0, r5
 800eb24:	4798      	blx	r3
 800eb26:	900b      	str	r0, [sp, #44]	; 0x2c
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 800eb28:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800eb2a:	6820      	ldr	r0, [r4, #0]
 800eb2c:	1ceb      	adds	r3, r5, #3
 800eb2e:	9307      	str	r3, [sp, #28]
 800eb30:	42b3      	cmp	r3, r6
 800eb32:	d830      	bhi.n	800eb96 <lv_label_refr_text+0x1de>
            uint8_t len          = 0;
 800eb34:	2300      	movs	r3, #0
 800eb36:	2604      	movs	r6, #4
 800eb38:	9306      	str	r3, [sp, #24]
                len += _lv_txt_encoded_size(&ext->text[byte_id]);
 800eb3a:	6823      	ldr	r3, [r4, #0]
 800eb3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eb3e:	3e01      	subs	r6, #1
 800eb40:	1898      	adds	r0, r3, r2
 800eb42:	4b2a      	ldr	r3, [pc, #168]	; (800ebec <lv_label_refr_text+0x234>)
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	4798      	blx	r3
 800eb48:	9b06      	ldr	r3, [sp, #24]
                _lv_txt_encoded_next(ext->text, &byte_id);
 800eb4a:	a90b      	add	r1, sp, #44	; 0x2c
                len += _lv_txt_encoded_size(&ext->text[byte_id]);
 800eb4c:	18c0      	adds	r0, r0, r3
 800eb4e:	b2c3      	uxtb	r3, r0
 800eb50:	9306      	str	r3, [sp, #24]
                _lv_txt_encoded_next(ext->text, &byte_id);
 800eb52:	4b27      	ldr	r3, [pc, #156]	; (800ebf0 <lv_label_refr_text+0x238>)
 800eb54:	6820      	ldr	r0, [r4, #0]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 800eb5a:	2e00      	cmp	r6, #0
 800eb5c:	d1ed      	bne.n	800eb3a <lv_label_refr_text+0x182>
            if(lv_label_set_dot_tmp(label, &ext->text[byte_id_ori], len)) {
 800eb5e:	6823      	ldr	r3, [r4, #0]
 800eb60:	9a06      	ldr	r2, [sp, #24]
 800eb62:	1959      	adds	r1, r3, r5
 800eb64:	0038      	movs	r0, r7
 800eb66:	f7ff fc8d 	bl	800e484 <lv_label_set_dot_tmp>
 800eb6a:	2800      	cmp	r0, #0
 800eb6c:	d100      	bne.n	800eb70 <lv_label_refr_text+0x1b8>
 800eb6e:	e787      	b.n	800ea80 <lv_label_refr_text+0xc8>
                    ext->text[byte_id_ori + i] = '.';
 800eb70:	232e      	movs	r3, #46	; 0x2e
 800eb72:	6822      	ldr	r2, [r4, #0]
 800eb74:	5553      	strb	r3, [r2, r5]
 800eb76:	6822      	ldr	r2, [r4, #0]
 800eb78:	1952      	adds	r2, r2, r5
 800eb7a:	7053      	strb	r3, [r2, #1]
 800eb7c:	6822      	ldr	r2, [r4, #0]
 800eb7e:	1955      	adds	r5, r2, r5
 800eb80:	70ab      	strb	r3, [r5, #2]
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 800eb82:	6823      	ldr	r3, [r4, #0]
 800eb84:	9a07      	ldr	r2, [sp, #28]
 800eb86:	549e      	strb	r6, [r3, r2]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 800eb88:	9b05      	ldr	r3, [sp, #20]
 800eb8a:	3303      	adds	r3, #3
 800eb8c:	e78e      	b.n	800eaac <lv_label_refr_text+0xf4>
                p.y -= line_space;
 800eb8e:	9b06      	ldr	r3, [sp, #24]
                p.y -= y_overed;
 800eb90:	1a6d      	subs	r5, r5, r1
                p.y -= line_space;
 800eb92:	1aed      	subs	r5, r5, r3
 800eb94:	e7b6      	b.n	800eb04 <lv_label_refr_text+0x14c>
                _lv_txt_encoded_prev(ext->text, &byte_id);
 800eb96:	4b17      	ldr	r3, [pc, #92]	; (800ebf4 <lv_label_refr_text+0x23c>)
 800eb98:	a90b      	add	r1, sp, #44	; 0x2c
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	4798      	blx	r3
                letter_id--;
 800eb9e:	9b05      	ldr	r3, [sp, #20]
 800eba0:	3b01      	subs	r3, #1
 800eba2:	9305      	str	r3, [sp, #20]
 800eba4:	e7c0      	b.n	800eb28 <lv_label_refr_text+0x170>
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
 800eba6:	2e01      	cmp	r6, #1
 800eba8:	d000      	beq.n	800ebac <lv_label_refr_text+0x1f4>
 800ebaa:	e769      	b.n	800ea80 <lv_label_refr_text+0xc8>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 800ebac:	2210      	movs	r2, #16
 800ebae:	2100      	movs	r1, #0
 800ebb0:	0038      	movs	r0, r7
 800ebb2:	f7f5 fc49 	bl	8004448 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 800ebb6:	2211      	movs	r2, #17
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 800ebb8:	0004      	movs	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 800ebba:	2100      	movs	r1, #0
 800ebbc:	0038      	movs	r0, r7
 800ebbe:	f7f5 fc43 	bl	8004448 <_lv_obj_get_style_int>
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
 800ebc2:	8869      	ldrh	r1, [r5, #2]
 800ebc4:	1824      	adds	r4, r4, r0
 800ebc6:	1909      	adds	r1, r1, r4
 800ebc8:	b209      	sxth	r1, r1
        lv_obj_set_height(label, size.y);
 800ebca:	0038      	movs	r0, r7
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
 800ebcc:	8069      	strh	r1, [r5, #2]
        lv_obj_set_height(label, size.y);
 800ebce:	f7f5 fa06 	bl	8003fde <lv_obj_set_height>
 800ebd2:	e755      	b.n	800ea80 <lv_label_refr_text+0xc8>
 800ebd4:	0000808e 	.word	0x0000808e
 800ebd8:	00008081 	.word	0x00008081
 800ebdc:	00008080 	.word	0x00008080
 800ebe0:	0000ffff 	.word	0x0000ffff
 800ebe4:	20000060 	.word	0x20000060
 800ebe8:	2000004c 	.word	0x2000004c
 800ebec:	2000005c 	.word	0x2000005c
 800ebf0:	20000054 	.word	0x20000054
 800ebf4:	20000058 	.word	0x20000058

0800ebf8 <lv_label_signal>:
{
 800ebf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ebfa:	0004      	movs	r4, r0
 800ebfc:	000e      	movs	r6, r1
 800ebfe:	0015      	movs	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
 800ec00:	2908      	cmp	r1, #8
 800ec02:	d114      	bne.n	800ec2e <lv_label_signal+0x36>
    switch(type) {
 800ec04:	7813      	ldrb	r3, [r2, #0]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d009      	beq.n	800ec1e <lv_label_signal+0x26>
        info->result = lv_label_get_style(label, info->part);
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	6053      	str	r3, [r2, #4]
        else return ancestor_signal(label, sign, param);
 800ec0e:	4b2a      	ldr	r3, [pc, #168]	; (800ecb8 <lv_label_signal+0xc0>)
 800ec10:	002a      	movs	r2, r5
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	2108      	movs	r1, #8
 800ec16:	0020      	movs	r0, r4
 800ec18:	4798      	blx	r3
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 800ec1a:	0007      	movs	r7, r0
 800ec1c:	e005      	b.n	800ec2a <lv_label_signal+0x32>
            style_dsc_p = &label->style_list;
 800ec1e:	0003      	movs	r3, r0
 800ec20:	3328      	adds	r3, #40	; 0x28
        info->result = lv_label_get_style(label, info->part);
 800ec22:	6053      	str	r3, [r2, #4]
        if(info->result != NULL) return LV_RES_OK;
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d0f2      	beq.n	800ec0e <lv_label_signal+0x16>
 800ec28:	2701      	movs	r7, #1
}
 800ec2a:	0038      	movs	r0, r7
 800ec2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    res = ancestor_signal(label, sign, param);
 800ec2e:	4b22      	ldr	r3, [pc, #136]	; (800ecb8 <lv_label_signal+0xc0>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	4798      	blx	r3
 800ec34:	0007      	movs	r7, r0
    if(res != LV_RES_OK) return res;
 800ec36:	2801      	cmp	r0, #1
 800ec38:	d1f7      	bne.n	800ec2a <lv_label_signal+0x32>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 800ec3a:	2e07      	cmp	r6, #7
 800ec3c:	d104      	bne.n	800ec48 <lv_label_signal+0x50>
 800ec3e:	491f      	ldr	r1, [pc, #124]	; (800ecbc <lv_label_signal+0xc4>)
 800ec40:	0028      	movs	r0, r5
 800ec42:	f7f6 f8a4 	bl	8004d8e <lv_obj_handle_get_type_signal>
 800ec46:	e7e8      	b.n	800ec1a <lv_label_signal+0x22>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800ec48:	0020      	movs	r0, r4
 800ec4a:	f7f6 f890 	bl	8004d6e <lv_obj_get_ext_attr>
 800ec4e:	9001      	str	r0, [sp, #4]
    if(sign == LV_SIGNAL_CLEANUP) {
 800ec50:	2e00      	cmp	r6, #0
 800ec52:	d10c      	bne.n	800ec6e <lv_label_signal+0x76>
        if(ext->static_txt == 0) {
 800ec54:	2308      	movs	r3, #8
 800ec56:	7c05      	ldrb	r5, [r0, #16]
 800ec58:	401d      	ands	r5, r3
 800ec5a:	d104      	bne.n	800ec66 <lv_label_signal+0x6e>
            lv_mem_free(ext->text);
 800ec5c:	6800      	ldr	r0, [r0, #0]
 800ec5e:	f7fd fb27 	bl	800c2b0 <lv_mem_free>
            ext->text = NULL;
 800ec62:	9b01      	ldr	r3, [sp, #4]
 800ec64:	601d      	str	r5, [r3, #0]
        lv_label_dot_tmp_free(label);
 800ec66:	0020      	movs	r0, r4
 800ec68:	f7ff fbc6 	bl	800e3f8 <lv_label_dot_tmp_free>
 800ec6c:	e7dd      	b.n	800ec2a <lv_label_signal+0x32>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
 800ec6e:	2e04      	cmp	r6, #4
 800ec70:	d106      	bne.n	800ec80 <lv_label_signal+0x88>
        lv_label_revert_dots(label);
 800ec72:	0020      	movs	r0, r4
 800ec74:	f7ff fbd4 	bl	800e420 <lv_label_revert_dots>
        lv_label_refr_text(label);
 800ec78:	0020      	movs	r0, r4
 800ec7a:	f7ff fe9d 	bl	800e9b8 <lv_label_refr_text>
 800ec7e:	e7d4      	b.n	800ec2a <lv_label_signal+0x32>
    else if(sign == LV_SIGNAL_COORD_CHG) {
 800ec80:	2e02      	cmp	r6, #2
 800ec82:	d1d1      	bne.n	800ec28 <lv_label_signal+0x30>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ec84:	8aa2      	ldrh	r2, [r4, #20]
 800ec86:	8a23      	ldrh	r3, [r4, #16]
 800ec88:	3201      	adds	r2, #1
 800ec8a:	1ad2      	subs	r2, r2, r3
 800ec8c:	88ab      	ldrh	r3, [r5, #4]
 800ec8e:	8829      	ldrh	r1, [r5, #0]
 800ec90:	3301      	adds	r3, #1
 800ec92:	1a5b      	subs	r3, r3, r1
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
 800ec94:	b292      	uxth	r2, r2
 800ec96:	b29b      	uxth	r3, r3
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	d1ea      	bne.n	800ec72 <lv_label_signal+0x7a>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ec9c:	8ae2      	ldrh	r2, [r4, #22]
 800ec9e:	8a63      	ldrh	r3, [r4, #18]
 800eca0:	3201      	adds	r2, #1
 800eca2:	1ad2      	subs	r2, r2, r3
 800eca4:	88eb      	ldrh	r3, [r5, #6]
 800eca6:	8869      	ldrh	r1, [r5, #2]
 800eca8:	3301      	adds	r3, #1
 800ecaa:	1a5b      	subs	r3, r3, r1
 800ecac:	b292      	uxth	r2, r2
 800ecae:	b29b      	uxth	r3, r3
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d1de      	bne.n	800ec72 <lv_label_signal+0x7a>
 800ecb4:	e7b8      	b.n	800ec28 <lv_label_signal+0x30>
 800ecb6:	46c0      	nop			; (mov r8, r8)
 800ecb8:	20006ed8 	.word	0x20006ed8
 800ecbc:	08012885 	.word	0x08012885

0800ecc0 <lv_label_set_text>:
{
 800ecc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ecc2:	000f      	movs	r7, r1
 800ecc4:	9001      	str	r0, [sp, #4]
    lv_obj_invalidate(label);
 800ecc6:	f7f4 feca 	bl	8003a5e <lv_obj_invalidate>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800ecca:	9801      	ldr	r0, [sp, #4]
 800eccc:	f7f6 f84f 	bl	8004d6e <lv_obj_get_ext_attr>
 800ecd0:	0004      	movs	r4, r0
 800ecd2:	6805      	ldr	r5, [r0, #0]
    if(text == NULL) text = ext->text;
 800ecd4:	2f00      	cmp	r7, #0
 800ecd6:	d100      	bne.n	800ecda <lv_label_set_text+0x1a>
 800ecd8:	002f      	movs	r7, r5
    if(ext->text == text && ext->static_txt == 0) {
 800ecda:	42bd      	cmp	r5, r7
 800ecdc:	d10d      	bne.n	800ecfa <lv_label_set_text+0x3a>
 800ecde:	0028      	movs	r0, r5
 800ece0:	f7f1 fa18 	bl	8000114 <strlen>
 800ece4:	7c23      	ldrb	r3, [r4, #16]
 800ece6:	071b      	lsls	r3, r3, #28
 800ece8:	d411      	bmi.n	800ed0e <lv_label_set_text+0x4e>
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
 800ecea:	1c41      	adds	r1, r0, #1
 800ecec:	0028      	movs	r0, r5
 800ecee:	f7fd fbdf 	bl	800c4b0 <lv_mem_realloc>
 800ecf2:	6020      	str	r0, [r4, #0]
        if(ext->text == NULL) return;
 800ecf4:	2800      	cmp	r0, #0
 800ecf6:	d11a      	bne.n	800ed2e <lv_label_set_text+0x6e>
}
 800ecf8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        if(ext->text != NULL && ext->static_txt == 0) {
 800ecfa:	2d00      	cmp	r5, #0
 800ecfc:	d007      	beq.n	800ed0e <lv_label_set_text+0x4e>
 800ecfe:	2308      	movs	r3, #8
 800ed00:	7c26      	ldrb	r6, [r4, #16]
 800ed02:	401e      	ands	r6, r3
 800ed04:	d103      	bne.n	800ed0e <lv_label_set_text+0x4e>
            lv_mem_free(ext->text);
 800ed06:	0028      	movs	r0, r5
 800ed08:	f7fd fad2 	bl	800c2b0 <lv_mem_free>
            ext->text = NULL;
 800ed0c:	6026      	str	r6, [r4, #0]
        size_t len = strlen(text) + 1;
 800ed0e:	0038      	movs	r0, r7
 800ed10:	f7f1 fa00 	bl	8000114 <strlen>
 800ed14:	3001      	adds	r0, #1
        ext->text = lv_mem_alloc(len);
 800ed16:	f7fd fa77 	bl	800c208 <lv_mem_alloc>
 800ed1a:	6020      	str	r0, [r4, #0]
        if(ext->text == NULL) return;
 800ed1c:	2800      	cmp	r0, #0
 800ed1e:	d0eb      	beq.n	800ecf8 <lv_label_set_text+0x38>
        strcpy(ext->text, text);
 800ed20:	0039      	movs	r1, r7
 800ed22:	f000 f969 	bl	800eff8 <strcpy>
        ext->static_txt = 0;
 800ed26:	2208      	movs	r2, #8
 800ed28:	7c23      	ldrb	r3, [r4, #16]
 800ed2a:	4393      	bics	r3, r2
 800ed2c:	7423      	strb	r3, [r4, #16]
    lv_label_refr_text(label);
 800ed2e:	9801      	ldr	r0, [sp, #4]
 800ed30:	f7ff fe42 	bl	800e9b8 <lv_label_refr_text>
 800ed34:	e7e0      	b.n	800ecf8 <lv_label_set_text+0x38>

0800ed36 <lv_label_set_text_static>:
{
 800ed36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed38:	0006      	movs	r6, r0
 800ed3a:	000f      	movs	r7, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800ed3c:	f7f6 f817 	bl	8004d6e <lv_obj_get_ext_attr>
    if(ext->static_txt == 0 && ext->text != NULL) {
 800ed40:	2308      	movs	r3, #8
 800ed42:	7c05      	ldrb	r5, [r0, #16]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800ed44:	0004      	movs	r4, r0
    if(ext->static_txt == 0 && ext->text != NULL) {
 800ed46:	401d      	ands	r5, r3
 800ed48:	d105      	bne.n	800ed56 <lv_label_set_text_static+0x20>
 800ed4a:	6800      	ldr	r0, [r0, #0]
 800ed4c:	2800      	cmp	r0, #0
 800ed4e:	d002      	beq.n	800ed56 <lv_label_set_text_static+0x20>
        lv_mem_free(ext->text);
 800ed50:	f7fd faae 	bl	800c2b0 <lv_mem_free>
        ext->text = NULL;
 800ed54:	6025      	str	r5, [r4, #0]
    if(text != NULL) {
 800ed56:	2f00      	cmp	r7, #0
 800ed58:	d004      	beq.n	800ed64 <lv_label_set_text_static+0x2e>
        ext->static_txt = 1;
 800ed5a:	2308      	movs	r3, #8
 800ed5c:	7c22      	ldrb	r2, [r4, #16]
        ext->text       = (char *)text;
 800ed5e:	6027      	str	r7, [r4, #0]
        ext->static_txt = 1;
 800ed60:	4313      	orrs	r3, r2
 800ed62:	7423      	strb	r3, [r4, #16]
    lv_label_refr_text(label);
 800ed64:	0030      	movs	r0, r6
 800ed66:	f7ff fe27 	bl	800e9b8 <lv_label_refr_text>
}
 800ed6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ed6c <lv_label_set_long_mode>:
{
 800ed6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed6e:	000f      	movs	r7, r1
 800ed70:	0005      	movs	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800ed72:	f7f5 fffc 	bl	8004d6e <lv_obj_get_ext_attr>
    ext->offset.x = 0;
 800ed76:	2300      	movs	r3, #0
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
 800ed78:	1efa      	subs	r2, r7, #3
    ext->offset.x = 0;
 800ed7a:	60c3      	str	r3, [r0, #12]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800ed7c:	0004      	movs	r4, r0
 800ed7e:	7c03      	ldrb	r3, [r0, #16]
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
 800ed80:	2a02      	cmp	r2, #2
 800ed82:	d818      	bhi.n	800edb6 <lv_label_set_long_mode+0x4a>
        ext->expand = 1;
 800ed84:	2280      	movs	r2, #128	; 0x80
 800ed86:	4252      	negs	r2, r2
 800ed88:	4313      	orrs	r3, r2
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 800ed8a:	2607      	movs	r6, #7
        ext->expand = 0;
 800ed8c:	7423      	strb	r3, [r4, #16]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 800ed8e:	7c23      	ldrb	r3, [r4, #16]
 800ed90:	4033      	ands	r3, r6
 800ed92:	2b02      	cmp	r3, #2
 800ed94:	d106      	bne.n	800eda4 <lv_label_set_long_mode+0x38>
 800ed96:	4b09      	ldr	r3, [pc, #36]	; (800edbc <lv_label_set_long_mode+0x50>)
 800ed98:	68a2      	ldr	r2, [r4, #8]
 800ed9a:	429a      	cmp	r2, r3
 800ed9c:	d002      	beq.n	800eda4 <lv_label_set_long_mode+0x38>
        lv_label_revert_dots(label);
 800ed9e:	0028      	movs	r0, r5
 800eda0:	f7ff fb3e 	bl	800e420 <lv_label_revert_dots>
    ext->long_mode = long_mode;
 800eda4:	7c21      	ldrb	r1, [r4, #16]
 800eda6:	4037      	ands	r7, r6
 800eda8:	43b1      	bics	r1, r6
 800edaa:	4339      	orrs	r1, r7
    lv_label_refr_text(label);
 800edac:	0028      	movs	r0, r5
    ext->long_mode = long_mode;
 800edae:	7421      	strb	r1, [r4, #16]
    lv_label_refr_text(label);
 800edb0:	f7ff fe02 	bl	800e9b8 <lv_label_refr_text>
}
 800edb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->expand = 0;
 800edb6:	227f      	movs	r2, #127	; 0x7f
 800edb8:	4013      	ands	r3, r2
 800edba:	e7e6      	b.n	800ed8a <lv_label_set_long_mode+0x1e>
 800edbc:	0000ffff 	.word	0x0000ffff

0800edc0 <lv_label_set_recolor>:
{
 800edc0:	b570      	push	{r4, r5, r6, lr}
 800edc2:	0004      	movs	r4, r0
 800edc4:	000d      	movs	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800edc6:	f7f5 ffd2 	bl	8004d6e <lv_obj_get_ext_attr>
    if(ext->recolor == en) return;
 800edca:	7c03      	ldrb	r3, [r0, #16]
 800edcc:	065a      	lsls	r2, r3, #25
 800edce:	0fd2      	lsrs	r2, r2, #31
 800edd0:	42aa      	cmp	r2, r5
 800edd2:	d009      	beq.n	800ede8 <lv_label_set_recolor+0x28>
    ext->recolor = en == false ? 0 : 1;
 800edd4:	2201      	movs	r2, #1
 800edd6:	4015      	ands	r5, r2
 800edd8:	323f      	adds	r2, #63	; 0x3f
 800edda:	01ad      	lsls	r5, r5, #6
 800eddc:	4393      	bics	r3, r2
 800edde:	432b      	orrs	r3, r5
 800ede0:	7403      	strb	r3, [r0, #16]
    lv_label_refr_text(label); /*Refresh the text because the potential color codes in text needs to
 800ede2:	0020      	movs	r0, r4
 800ede4:	f7ff fde8 	bl	800e9b8 <lv_label_refr_text>
}
 800ede8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800edec <lv_label_create>:
{
 800edec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800edee:	000e      	movs	r6, r1
    lv_obj_t * new_label = lv_obj_create(par, copy);
 800edf0:	f7f5 f900 	bl	8003ff4 <lv_obj_create>
 800edf4:	1e04      	subs	r4, r0, #0
    if(new_label == NULL) return NULL;
 800edf6:	d102      	bne.n	800edfe <lv_label_create+0x12>
 800edf8:	2400      	movs	r4, #0
}
 800edfa:	0020      	movs	r0, r4
 800edfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
 800edfe:	4d57      	ldr	r5, [pc, #348]	; (800ef5c <lv_label_create+0x170>)
 800ee00:	682b      	ldr	r3, [r5, #0]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d102      	bne.n	800ee0c <lv_label_create+0x20>
 800ee06:	f7f5 ffb0 	bl	8004d6a <lv_obj_get_signal_cb>
 800ee0a:	6028      	str	r0, [r5, #0]
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
 800ee0c:	2114      	movs	r1, #20
 800ee0e:	0020      	movs	r0, r4
 800ee10:	f7f4 fd7f 	bl	8003912 <lv_obj_allocate_ext_attr>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
 800ee14:	0020      	movs	r0, r4
 800ee16:	f7f5 ffaa 	bl	8004d6e <lv_obj_get_ext_attr>
 800ee1a:	2100      	movs	r1, #0
 800ee1c:	0005      	movs	r5, r0
    if(ext == NULL) {
 800ee1e:	4288      	cmp	r0, r1
 800ee20:	d103      	bne.n	800ee2a <lv_label_create+0x3e>
        lv_obj_del(new_label);
 800ee22:	0020      	movs	r0, r4
 800ee24:	f7f4 ff30 	bl	8003c88 <lv_obj_del>
 800ee28:	e7e6      	b.n	800edf8 <lv_label_create+0xc>
    ext->recolor    = 0;
 800ee2a:	2208      	movs	r2, #8
    ext->static_txt = 0;
 800ee2c:	7c03      	ldrb	r3, [r0, #16]
    ext->text       = NULL;
 800ee2e:	6001      	str	r1, [r0, #0]
    ext->recolor    = 0;
 800ee30:	4393      	bics	r3, r2
    ext->align      = LV_LABEL_ALIGN_AUTO;
 800ee32:	3238      	adds	r2, #56	; 0x38
 800ee34:	4393      	bics	r3, r2
 800ee36:	001a      	movs	r2, r3
    ext->dot_end    = LV_LABEL_DOT_END_INV;
 800ee38:	4b49      	ldr	r3, [pc, #292]	; (800ef60 <lv_label_create+0x174>)
    ext->offset.x = 0;
 800ee3a:	8181      	strh	r1, [r0, #12]
    ext->dot_end    = LV_LABEL_DOT_END_INV;
 800ee3c:	6083      	str	r3, [r0, #8]
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
 800ee3e:	2330      	movs	r3, #48	; 0x30
 800ee40:	4313      	orrs	r3, r2
 800ee42:	2207      	movs	r2, #7
 800ee44:	4393      	bics	r3, r2
 800ee46:	7403      	strb	r3, [r0, #16]
    ext->dot_tmp_alloc = 0;
 800ee48:	7c43      	ldrb	r3, [r0, #17]
 800ee4a:	3a06      	subs	r2, #6
 800ee4c:	4393      	bics	r3, r2
    ext->offset.y = 0;
 800ee4e:	81c1      	strh	r1, [r0, #14]
    ext->dot.tmp_ptr   = NULL;
 800ee50:	6041      	str	r1, [r0, #4]
    ext->dot_tmp_alloc = 0;
 800ee52:	7443      	strb	r3, [r0, #17]
    lv_obj_set_design_cb(new_label, lv_label_design);
 800ee54:	4943      	ldr	r1, [pc, #268]	; (800ef64 <lv_label_create+0x178>)
 800ee56:	0020      	movs	r0, r4
 800ee58:	f7f4 fd59 	bl	800390e <lv_obj_set_design_cb>
    lv_obj_set_signal_cb(new_label, lv_label_signal);
 800ee5c:	4942      	ldr	r1, [pc, #264]	; (800ef68 <lv_label_create+0x17c>)
 800ee5e:	0020      	movs	r0, r4
 800ee60:	f7f4 fd48 	bl	80038f4 <lv_obj_set_signal_cb>
    if(copy == NULL) {
 800ee64:	2e00      	cmp	r6, #0
 800ee66:	d110      	bne.n	800ee8a <lv_label_create+0x9e>
        lv_theme_apply(new_label, LV_THEME_LABEL);
 800ee68:	0020      	movs	r0, r4
 800ee6a:	2109      	movs	r1, #9
 800ee6c:	f7fe f888 	bl	800cf80 <lv_theme_apply>
        lv_obj_set_click(new_label, false);
 800ee70:	0031      	movs	r1, r6
 800ee72:	0020      	movs	r0, r4
 800ee74:	f7f4 fce0 	bl	8003838 <lv_obj_set_click>
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
 800ee78:	0031      	movs	r1, r6
 800ee7a:	0020      	movs	r0, r4
 800ee7c:	f7ff ff76 	bl	800ed6c <lv_label_set_long_mode>
        lv_label_set_text(new_label, "Text");
 800ee80:	493a      	ldr	r1, [pc, #232]	; (800ef6c <lv_label_create+0x180>)
 800ee82:	0020      	movs	r0, r4
 800ee84:	f7ff ff1c 	bl	800ecc0 <lv_label_set_text>
 800ee88:	e7b7      	b.n	800edfa <lv_label_create+0xe>
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 800ee8a:	0030      	movs	r0, r6
 800ee8c:	f7f5 ff6f 	bl	8004d6e <lv_obj_get_ext_attr>
 800ee90:	0007      	movs	r7, r0
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
 800ee92:	0030      	movs	r0, r6
 800ee94:	f7ff fb63 	bl	800e55e <lv_label_get_long_mode>
 800ee98:	0001      	movs	r1, r0
 800ee9a:	0020      	movs	r0, r4
 800ee9c:	f7ff ff66 	bl	800ed6c <lv_label_set_long_mode>
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
 800eea0:	0030      	movs	r0, r6
 800eea2:	f7ff fc71 	bl	800e788 <lv_label_get_recolor>
 800eea6:	0001      	movs	r1, r0
 800eea8:	0020      	movs	r0, r4
 800eeaa:	f7ff ff89 	bl	800edc0 <lv_label_set_recolor>
        lv_label_set_align(new_label, lv_label_get_align(copy));
 800eeae:	0030      	movs	r0, r6
 800eeb0:	f7ff fb5c 	bl	800e56c <lv_label_get_align>
 800eeb4:	0001      	movs	r1, r0
 800eeb6:	0020      	movs	r0, r4
 800eeb8:	f7ff fb37 	bl	800e52a <lv_label_set_align>
        if(copy_ext->static_txt == 0)
 800eebc:	2208      	movs	r2, #8
 800eebe:	7c3b      	ldrb	r3, [r7, #16]
            lv_label_set_text(new_label, lv_label_get_text(copy));
 800eec0:	0030      	movs	r0, r6
        if(copy_ext->static_txt == 0)
 800eec2:	4213      	tst	r3, r2
 800eec4:	d13d      	bne.n	800ef42 <lv_label_create+0x156>
            lv_label_set_text(new_label, lv_label_get_text(copy));
 800eec6:	f7ff fb45 	bl	800e554 <lv_label_get_text>
 800eeca:	0001      	movs	r1, r0
 800eecc:	0020      	movs	r0, r4
 800eece:	f7ff fef7 	bl	800ecc0 <lv_label_set_text>
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
 800eed2:	2207      	movs	r2, #7
 800eed4:	7c3b      	ldrb	r3, [r7, #16]
 800eed6:	4013      	ands	r3, r2
 800eed8:	2b02      	cmp	r3, #2
 800eeda:	d115      	bne.n	800ef08 <lv_label_create+0x11c>
            ext->text = lv_mem_realloc(ext->text, _lv_mem_get_size(copy_ext->text));
 800eedc:	6838      	ldr	r0, [r7, #0]
 800eede:	682e      	ldr	r6, [r5, #0]
 800eee0:	f7fd fa14 	bl	800c30c <_lv_mem_get_size>
 800eee4:	0001      	movs	r1, r0
 800eee6:	0030      	movs	r0, r6
 800eee8:	f7fd fae2 	bl	800c4b0 <lv_mem_realloc>
 800eeec:	1e06      	subs	r6, r0, #0
 800eeee:	6028      	str	r0, [r5, #0]
            if(ext->text == NULL) return NULL;
 800eef0:	d100      	bne.n	800eef4 <lv_label_create+0x108>
 800eef2:	e781      	b.n	800edf8 <lv_label_create+0xc>
            _lv_memcpy(ext->text, copy_ext->text, _lv_mem_get_size(copy_ext->text));
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	0018      	movs	r0, r3
 800eef8:	9301      	str	r3, [sp, #4]
 800eefa:	f7fd fa07 	bl	800c30c <_lv_mem_get_size>
 800eefe:	9901      	ldr	r1, [sp, #4]
 800ef00:	0002      	movs	r2, r0
 800ef02:	0030      	movs	r0, r6
 800ef04:	f7fd fa4e 	bl	800c3a4 <_lv_memcpy>
        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
 800ef08:	7c7b      	ldrb	r3, [r7, #17]
 800ef0a:	07db      	lsls	r3, r3, #31
 800ef0c:	d520      	bpl.n	800ef50 <lv_label_create+0x164>
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	2800      	cmp	r0, #0
 800ef12:	d01d      	beq.n	800ef50 <lv_label_create+0x164>
            uint32_t len = (uint32_t)strlen(copy_ext->dot.tmp_ptr);
 800ef14:	f7f1 f8fe 	bl	8000114 <strlen>
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
 800ef18:	6869      	ldr	r1, [r5, #4]
            uint32_t len = (uint32_t)strlen(copy_ext->dot.tmp_ptr);
 800ef1a:	0002      	movs	r2, r0
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
 800ef1c:	0020      	movs	r0, r4
 800ef1e:	f7ff fab1 	bl	800e484 <lv_label_set_dot_tmp>
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
 800ef22:	2101      	movs	r1, #1
 800ef24:	7c7b      	ldrb	r3, [r7, #17]
        lv_obj_refresh_style(new_label, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 800ef26:	0020      	movs	r0, r4
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
 800ef28:	07db      	lsls	r3, r3, #31
 800ef2a:	0fda      	lsrs	r2, r3, #31
 800ef2c:	7c6b      	ldrb	r3, [r5, #17]
 800ef2e:	438b      	bics	r3, r1
 800ef30:	4313      	orrs	r3, r2
        lv_obj_refresh_style(new_label, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 800ef32:	22ff      	movs	r2, #255	; 0xff
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
 800ef34:	746b      	strb	r3, [r5, #17]
        ext->dot_end       = copy_ext->dot_end;
 800ef36:	68bb      	ldr	r3, [r7, #8]
        lv_obj_refresh_style(new_label, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 800ef38:	0011      	movs	r1, r2
        ext->dot_end       = copy_ext->dot_end;
 800ef3a:	60ab      	str	r3, [r5, #8]
        lv_obj_refresh_style(new_label, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 800ef3c:	f7f5 fe14 	bl	8004b68 <lv_obj_refresh_style>
 800ef40:	e75b      	b.n	800edfa <lv_label_create+0xe>
            lv_label_set_text_static(new_label, lv_label_get_text(copy));
 800ef42:	f7ff fb07 	bl	800e554 <lv_label_get_text>
 800ef46:	0001      	movs	r1, r0
 800ef48:	0020      	movs	r0, r4
 800ef4a:	f7ff fef4 	bl	800ed36 <lv_label_set_text_static>
 800ef4e:	e7c0      	b.n	800eed2 <lv_label_create+0xe6>
            _lv_memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
 800ef50:	1d39      	adds	r1, r7, #4
 800ef52:	1d28      	adds	r0, r5, #4
 800ef54:	2204      	movs	r2, #4
 800ef56:	f7fd fa25 	bl	800c3a4 <_lv_memcpy>
 800ef5a:	e7e2      	b.n	800ef22 <lv_label_create+0x136>
 800ef5c:	20006ed8 	.word	0x20006ed8
 800ef60:	0000ffff 	.word	0x0000ffff
 800ef64:	0800e581 	.word	0x0800e581
 800ef68:	0800ebf9 	.word	0x0800ebf9
 800ef6c:	08012880 	.word	0x08012880

0800ef70 <__libc_init_array>:
 800ef70:	b570      	push	{r4, r5, r6, lr}
 800ef72:	2600      	movs	r6, #0
 800ef74:	4d0c      	ldr	r5, [pc, #48]	; (800efa8 <__libc_init_array+0x38>)
 800ef76:	4c0d      	ldr	r4, [pc, #52]	; (800efac <__libc_init_array+0x3c>)
 800ef78:	1b64      	subs	r4, r4, r5
 800ef7a:	10a4      	asrs	r4, r4, #2
 800ef7c:	42a6      	cmp	r6, r4
 800ef7e:	d109      	bne.n	800ef94 <__libc_init_array+0x24>
 800ef80:	2600      	movs	r6, #0
 800ef82:	f000 f841 	bl	800f008 <_init>
 800ef86:	4d0a      	ldr	r5, [pc, #40]	; (800efb0 <__libc_init_array+0x40>)
 800ef88:	4c0a      	ldr	r4, [pc, #40]	; (800efb4 <__libc_init_array+0x44>)
 800ef8a:	1b64      	subs	r4, r4, r5
 800ef8c:	10a4      	asrs	r4, r4, #2
 800ef8e:	42a6      	cmp	r6, r4
 800ef90:	d105      	bne.n	800ef9e <__libc_init_array+0x2e>
 800ef92:	bd70      	pop	{r4, r5, r6, pc}
 800ef94:	00b3      	lsls	r3, r6, #2
 800ef96:	58eb      	ldr	r3, [r5, r3]
 800ef98:	4798      	blx	r3
 800ef9a:	3601      	adds	r6, #1
 800ef9c:	e7ee      	b.n	800ef7c <__libc_init_array+0xc>
 800ef9e:	00b3      	lsls	r3, r6, #2
 800efa0:	58eb      	ldr	r3, [r5, r3]
 800efa2:	4798      	blx	r3
 800efa4:	3601      	adds	r6, #1
 800efa6:	e7f2      	b.n	800ef8e <__libc_init_array+0x1e>
 800efa8:	08012890 	.word	0x08012890
 800efac:	08012890 	.word	0x08012890
 800efb0:	08012890 	.word	0x08012890
 800efb4:	08012894 	.word	0x08012894

0800efb8 <memcmp>:
 800efb8:	b530      	push	{r4, r5, lr}
 800efba:	2400      	movs	r4, #0
 800efbc:	42a2      	cmp	r2, r4
 800efbe:	d101      	bne.n	800efc4 <memcmp+0xc>
 800efc0:	2000      	movs	r0, #0
 800efc2:	e005      	b.n	800efd0 <memcmp+0x18>
 800efc4:	5d03      	ldrb	r3, [r0, r4]
 800efc6:	1c65      	adds	r5, r4, #1
 800efc8:	5d0c      	ldrb	r4, [r1, r4]
 800efca:	42a3      	cmp	r3, r4
 800efcc:	d001      	beq.n	800efd2 <memcmp+0x1a>
 800efce:	1b18      	subs	r0, r3, r4
 800efd0:	bd30      	pop	{r4, r5, pc}
 800efd2:	002c      	movs	r4, r5
 800efd4:	e7f2      	b.n	800efbc <memcmp+0x4>

0800efd6 <memcpy>:
 800efd6:	2300      	movs	r3, #0
 800efd8:	b510      	push	{r4, lr}
 800efda:	429a      	cmp	r2, r3
 800efdc:	d100      	bne.n	800efe0 <memcpy+0xa>
 800efde:	bd10      	pop	{r4, pc}
 800efe0:	5ccc      	ldrb	r4, [r1, r3]
 800efe2:	54c4      	strb	r4, [r0, r3]
 800efe4:	3301      	adds	r3, #1
 800efe6:	e7f8      	b.n	800efda <memcpy+0x4>

0800efe8 <memset>:
 800efe8:	0003      	movs	r3, r0
 800efea:	1812      	adds	r2, r2, r0
 800efec:	4293      	cmp	r3, r2
 800efee:	d100      	bne.n	800eff2 <memset+0xa>
 800eff0:	4770      	bx	lr
 800eff2:	7019      	strb	r1, [r3, #0]
 800eff4:	3301      	adds	r3, #1
 800eff6:	e7f9      	b.n	800efec <memset+0x4>

0800eff8 <strcpy>:
 800eff8:	0003      	movs	r3, r0
 800effa:	780a      	ldrb	r2, [r1, #0]
 800effc:	3101      	adds	r1, #1
 800effe:	701a      	strb	r2, [r3, #0]
 800f000:	3301      	adds	r3, #1
 800f002:	2a00      	cmp	r2, #0
 800f004:	d1f9      	bne.n	800effa <strcpy+0x2>
 800f006:	4770      	bx	lr

0800f008 <_init>:
 800f008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f00a:	46c0      	nop			; (mov r8, r8)
 800f00c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f00e:	bc08      	pop	{r3}
 800f010:	469e      	mov	lr, r3
 800f012:	4770      	bx	lr

0800f014 <_fini>:
 800f014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f016:	46c0      	nop			; (mov r8, r8)
 800f018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f01a:	bc08      	pop	{r3}
 800f01c:	469e      	mov	lr, r3
 800f01e:	4770      	bx	lr
