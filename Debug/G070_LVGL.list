
G070_LVGL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044e0  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004598  08004598  00014598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004674  08004674  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004674  08004674  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004674  08004674  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004674  08004674  00014674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004678  08004678  00014678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800467c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  2000000c  08004688  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08004688  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017386  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031ba  00000000  00000000  000373ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  0003a578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001240  00000000  00000000  0003b920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ca3  00000000  00000000  0003cb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000196b0  00000000  00000000  00054803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093e7e  00000000  00000000  0006deb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00101d31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004648  00000000  00000000  00101d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004580 	.word	0x08004580

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08004580 	.word	0x08004580

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003ec:	b590      	push	{r4, r7, lr}
 80003ee:	b08b      	sub	sp, #44	; 0x2c
 80003f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f2:	2414      	movs	r4, #20
 80003f4:	193b      	adds	r3, r7, r4
 80003f6:	0018      	movs	r0, r3
 80003f8:	2314      	movs	r3, #20
 80003fa:	001a      	movs	r2, r3
 80003fc:	2100      	movs	r1, #0
 80003fe:	f004 f8b7 	bl	8004570 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000402:	4b33      	ldr	r3, [pc, #204]	; (80004d0 <MX_GPIO_Init+0xe4>)
 8000404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000406:	4b32      	ldr	r3, [pc, #200]	; (80004d0 <MX_GPIO_Init+0xe4>)
 8000408:	2104      	movs	r1, #4
 800040a:	430a      	orrs	r2, r1
 800040c:	635a      	str	r2, [r3, #52]	; 0x34
 800040e:	4b30      	ldr	r3, [pc, #192]	; (80004d0 <MX_GPIO_Init+0xe4>)
 8000410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000412:	2204      	movs	r2, #4
 8000414:	4013      	ands	r3, r2
 8000416:	613b      	str	r3, [r7, #16]
 8000418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800041a:	4b2d      	ldr	r3, [pc, #180]	; (80004d0 <MX_GPIO_Init+0xe4>)
 800041c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800041e:	4b2c      	ldr	r3, [pc, #176]	; (80004d0 <MX_GPIO_Init+0xe4>)
 8000420:	2120      	movs	r1, #32
 8000422:	430a      	orrs	r2, r1
 8000424:	635a      	str	r2, [r3, #52]	; 0x34
 8000426:	4b2a      	ldr	r3, [pc, #168]	; (80004d0 <MX_GPIO_Init+0xe4>)
 8000428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800042a:	2220      	movs	r2, #32
 800042c:	4013      	ands	r3, r2
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000432:	4b27      	ldr	r3, [pc, #156]	; (80004d0 <MX_GPIO_Init+0xe4>)
 8000434:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000436:	4b26      	ldr	r3, [pc, #152]	; (80004d0 <MX_GPIO_Init+0xe4>)
 8000438:	2101      	movs	r1, #1
 800043a:	430a      	orrs	r2, r1
 800043c:	635a      	str	r2, [r3, #52]	; 0x34
 800043e:	4b24      	ldr	r3, [pc, #144]	; (80004d0 <MX_GPIO_Init+0xe4>)
 8000440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000442:	2201      	movs	r2, #1
 8000444:	4013      	ands	r3, r2
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044a:	4b21      	ldr	r3, [pc, #132]	; (80004d0 <MX_GPIO_Init+0xe4>)
 800044c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800044e:	4b20      	ldr	r3, [pc, #128]	; (80004d0 <MX_GPIO_Init+0xe4>)
 8000450:	2102      	movs	r1, #2
 8000452:	430a      	orrs	r2, r1
 8000454:	635a      	str	r2, [r3, #52]	; 0x34
 8000456:	4b1e      	ldr	r3, [pc, #120]	; (80004d0 <MX_GPIO_Init+0xe4>)
 8000458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800045a:	2202      	movs	r2, #2
 800045c:	4013      	ands	r3, r2
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000462:	23a0      	movs	r3, #160	; 0xa0
 8000464:	05db      	lsls	r3, r3, #23
 8000466:	2201      	movs	r2, #1
 8000468:	2120      	movs	r1, #32
 800046a:	0018      	movs	r0, r3
 800046c:	f000 ff84 	bl	8001378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_RST_Pin|TFT_DC_Pin|TFT_CS_Pin|GPIO_PIN_10, GPIO_PIN_SET);
 8000470:	4918      	ldr	r1, [pc, #96]	; (80004d4 <MX_GPIO_Init+0xe8>)
 8000472:	4b19      	ldr	r3, [pc, #100]	; (80004d8 <MX_GPIO_Init+0xec>)
 8000474:	2201      	movs	r2, #1
 8000476:	0018      	movs	r0, r3
 8000478:	f000 ff7e 	bl	8001378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800047c:	193b      	adds	r3, r7, r4
 800047e:	2220      	movs	r2, #32
 8000480:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000482:	193b      	adds	r3, r7, r4
 8000484:	2201      	movs	r2, #1
 8000486:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000488:	193b      	adds	r3, r7, r4
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800048e:	193b      	adds	r3, r7, r4
 8000490:	2202      	movs	r2, #2
 8000492:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000494:	193a      	adds	r2, r7, r4
 8000496:	23a0      	movs	r3, #160	; 0xa0
 8000498:	05db      	lsls	r3, r3, #23
 800049a:	0011      	movs	r1, r2
 800049c:	0018      	movs	r0, r3
 800049e:	f000 fe07 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PB10 */
  GPIO_InitStruct.Pin = TFT_RST_Pin|TFT_DC_Pin|TFT_CS_Pin|GPIO_PIN_10;
 80004a2:	0021      	movs	r1, r4
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	4a0b      	ldr	r2, [pc, #44]	; (80004d4 <MX_GPIO_Init+0xe8>)
 80004a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	2201      	movs	r2, #1
 80004ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	187b      	adds	r3, r7, r1
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b6:	187b      	adds	r3, r7, r1
 80004b8:	2200      	movs	r2, #0
 80004ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004bc:	187b      	adds	r3, r7, r1
 80004be:	4a06      	ldr	r2, [pc, #24]	; (80004d8 <MX_GPIO_Init+0xec>)
 80004c0:	0019      	movs	r1, r3
 80004c2:	0010      	movs	r0, r2
 80004c4:	f000 fdf4 	bl	80010b0 <HAL_GPIO_Init>

}
 80004c8:	46c0      	nop			; (mov r8, r8)
 80004ca:	46bd      	mov	sp, r7
 80004cc:	b00b      	add	sp, #44	; 0x2c
 80004ce:	bd90      	pop	{r4, r7, pc}
 80004d0:	40021000 	.word	0x40021000
 80004d4:	00000407 	.word	0x00000407
 80004d8:	50000400 	.word	0x50000400

080004dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004e0:	4b1b      	ldr	r3, [pc, #108]	; (8000550 <MX_I2C1_Init+0x74>)
 80004e2:	4a1c      	ldr	r2, [pc, #112]	; (8000554 <MX_I2C1_Init+0x78>)
 80004e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80004e6:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <MX_I2C1_Init+0x74>)
 80004e8:	4a1b      	ldr	r2, [pc, #108]	; (8000558 <MX_I2C1_Init+0x7c>)
 80004ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004ec:	4b18      	ldr	r3, [pc, #96]	; (8000550 <MX_I2C1_Init+0x74>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004f2:	4b17      	ldr	r3, [pc, #92]	; (8000550 <MX_I2C1_Init+0x74>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004f8:	4b15      	ldr	r3, [pc, #84]	; (8000550 <MX_I2C1_Init+0x74>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004fe:	4b14      	ldr	r3, [pc, #80]	; (8000550 <MX_I2C1_Init+0x74>)
 8000500:	2200      	movs	r2, #0
 8000502:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000504:	4b12      	ldr	r3, [pc, #72]	; (8000550 <MX_I2C1_Init+0x74>)
 8000506:	2200      	movs	r2, #0
 8000508:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800050a:	4b11      	ldr	r3, [pc, #68]	; (8000550 <MX_I2C1_Init+0x74>)
 800050c:	2200      	movs	r2, #0
 800050e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <MX_I2C1_Init+0x74>)
 8000512:	2200      	movs	r2, #0
 8000514:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <MX_I2C1_Init+0x74>)
 8000518:	0018      	movs	r0, r3
 800051a:	f000 ff4b 	bl	80013b4 <HAL_I2C_Init>
 800051e:	1e03      	subs	r3, r0, #0
 8000520:	d001      	beq.n	8000526 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000522:	f000 f905 	bl	8000730 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000526:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <MX_I2C1_Init+0x74>)
 8000528:	2100      	movs	r1, #0
 800052a:	0018      	movs	r0, r3
 800052c:	f000 ffd8 	bl	80014e0 <HAL_I2CEx_ConfigAnalogFilter>
 8000530:	1e03      	subs	r3, r0, #0
 8000532:	d001      	beq.n	8000538 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000534:	f000 f8fc 	bl	8000730 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <MX_I2C1_Init+0x74>)
 800053a:	2100      	movs	r1, #0
 800053c:	0018      	movs	r0, r3
 800053e:	f001 f81b 	bl	8001578 <HAL_I2CEx_ConfigDigitalFilter>
 8000542:	1e03      	subs	r3, r0, #0
 8000544:	d001      	beq.n	800054a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000546:	f000 f8f3 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000028 	.word	0x20000028
 8000554:	40005400 	.word	0x40005400
 8000558:	10707dbc 	.word	0x10707dbc

0800055c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b08b      	sub	sp, #44	; 0x2c
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	2414      	movs	r4, #20
 8000566:	193b      	adds	r3, r7, r4
 8000568:	0018      	movs	r0, r3
 800056a:	2314      	movs	r3, #20
 800056c:	001a      	movs	r2, r3
 800056e:	2100      	movs	r1, #0
 8000570:	f003 fffe 	bl	8004570 <memset>
  if(i2cHandle->Instance==I2C1)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a1b      	ldr	r2, [pc, #108]	; (80005e8 <HAL_I2C_MspInit+0x8c>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d12f      	bne.n	80005de <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800057e:	4b1b      	ldr	r3, [pc, #108]	; (80005ec <HAL_I2C_MspInit+0x90>)
 8000580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000582:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <HAL_I2C_MspInit+0x90>)
 8000584:	2102      	movs	r1, #2
 8000586:	430a      	orrs	r2, r1
 8000588:	635a      	str	r2, [r3, #52]	; 0x34
 800058a:	4b18      	ldr	r3, [pc, #96]	; (80005ec <HAL_I2C_MspInit+0x90>)
 800058c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800058e:	2202      	movs	r2, #2
 8000590:	4013      	ands	r3, r2
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000596:	0021      	movs	r1, r4
 8000598:	187b      	adds	r3, r7, r1
 800059a:	22c0      	movs	r2, #192	; 0xc0
 800059c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2212      	movs	r2, #18
 80005a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2201      	movs	r2, #1
 80005a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2200      	movs	r2, #0
 80005ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2206      	movs	r2, #6
 80005b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <HAL_I2C_MspInit+0x94>)
 80005ba:	0019      	movs	r1, r3
 80005bc:	0010      	movs	r0, r2
 80005be:	f000 fd77 	bl	80010b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <HAL_I2C_MspInit+0x90>)
 80005c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_I2C_MspInit+0x90>)
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	0389      	lsls	r1, r1, #14
 80005cc:	430a      	orrs	r2, r1
 80005ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <HAL_I2C_MspInit+0x90>)
 80005d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005d4:	2380      	movs	r3, #128	; 0x80
 80005d6:	039b      	lsls	r3, r3, #14
 80005d8:	4013      	ands	r3, r2
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b00b      	add	sp, #44	; 0x2c
 80005e4:	bd90      	pop	{r4, r7, pc}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	40005400 	.word	0x40005400
 80005ec:	40021000 	.word	0x40021000
 80005f0:	50000400 	.word	0x50000400

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fc5a 	bl	8000eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f80e 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f7ff fef4 	bl	80003ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000604:	f000 fb92 	bl	8000d2c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000608:	f7ff ff68 	bl	80004dc <MX_I2C1_Init>
  MX_RTC_Init();
 800060c:	f000 f896 	bl	800073c <MX_RTC_Init>
  MX_SPI1_Init();
 8000610:	f000 f926 	bl	8000860 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000614:	f000 fa60 	bl	8000ad8 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000618:	e7fe      	b.n	8000618 <main+0x24>
	...

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b099      	sub	sp, #100	; 0x64
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	242c      	movs	r4, #44	; 0x2c
 8000624:	193b      	adds	r3, r7, r4
 8000626:	0018      	movs	r0, r3
 8000628:	2334      	movs	r3, #52	; 0x34
 800062a:	001a      	movs	r2, r3
 800062c:	2100      	movs	r1, #0
 800062e:	f003 ff9f 	bl	8004570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000632:	231c      	movs	r3, #28
 8000634:	18fb      	adds	r3, r7, r3
 8000636:	0018      	movs	r0, r3
 8000638:	2310      	movs	r3, #16
 800063a:	001a      	movs	r2, r3
 800063c:	2100      	movs	r1, #0
 800063e:	f003 ff97 	bl	8004570 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000642:	003b      	movs	r3, r7
 8000644:	0018      	movs	r0, r3
 8000646:	231c      	movs	r3, #28
 8000648:	001a      	movs	r2, r3
 800064a:	2100      	movs	r1, #0
 800064c:	f003 ff90 	bl	8004570 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000650:	2380      	movs	r3, #128	; 0x80
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	0018      	movs	r0, r3
 8000656:	f000 ffdb 	bl	8001610 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800065a:	193b      	adds	r3, r7, r4
 800065c:	2209      	movs	r2, #9
 800065e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000660:	193b      	adds	r3, r7, r4
 8000662:	22a0      	movs	r2, #160	; 0xa0
 8000664:	02d2      	lsls	r2, r2, #11
 8000666:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000668:	0021      	movs	r1, r4
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2201      	movs	r2, #1
 800066e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000670:	187b      	adds	r3, r7, r1
 8000672:	2202      	movs	r2, #2
 8000674:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2203      	movs	r2, #3
 800067a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800067c:	187b      	adds	r3, r7, r1
 800067e:	2200      	movs	r2, #0
 8000680:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000682:	187b      	adds	r3, r7, r1
 8000684:	2210      	movs	r2, #16
 8000686:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2280      	movs	r2, #128	; 0x80
 800068c:	0292      	lsls	r2, r2, #10
 800068e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2280      	movs	r2, #128	; 0x80
 8000694:	0592      	lsls	r2, r2, #22
 8000696:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	187b      	adds	r3, r7, r1
 800069a:	0018      	movs	r0, r3
 800069c:	f001 f804 	bl	80016a8 <HAL_RCC_OscConfig>
 80006a0:	1e03      	subs	r3, r0, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006a4:	f000 f844 	bl	8000730 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	211c      	movs	r1, #28
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2207      	movs	r2, #7
 80006ae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2202      	movs	r2, #2
 80006b4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2102      	movs	r1, #2
 80006c6:	0018      	movs	r0, r3
 80006c8:	f001 fb04 	bl	8001cd4 <HAL_RCC_ClockConfig>
 80006cc:	1e03      	subs	r3, r0, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80006d0:	f000 f82e 	bl	8000730 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 80006d4:	003b      	movs	r3, r7
 80006d6:	4a0c      	ldr	r2, [pc, #48]	; (8000708 <SystemClock_Config+0xec>)
 80006d8:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006da:	003b      	movs	r3, r7
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006e0:	003b      	movs	r3, r7
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80006e6:	003b      	movs	r3, r7
 80006e8:	2280      	movs	r2, #128	; 0x80
 80006ea:	0092      	lsls	r2, r2, #2
 80006ec:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ee:	003b      	movs	r3, r7
 80006f0:	0018      	movs	r0, r3
 80006f2:	f001 fcc3 	bl	800207c <HAL_RCCEx_PeriphCLKConfig>
 80006f6:	1e03      	subs	r3, r0, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80006fa:	f000 f819 	bl	8000730 <Error_Handler>
  }
}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	b019      	add	sp, #100	; 0x64
 8000704:	bd90      	pop	{r4, r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	00020022 	.word	0x00020022

0800070c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a04      	ldr	r2, [pc, #16]	; (800072c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d101      	bne.n	8000722 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800071e:	f000 fbe7 	bl	8000ef0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	b002      	add	sp, #8
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	40001000 	.word	0x40001000

08000730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000734:	b672      	cpsid	i
}
 8000736:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000738:	e7fe      	b.n	8000738 <Error_Handler+0x8>
	...

0800073c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	0018      	movs	r0, r3
 8000746:	2314      	movs	r3, #20
 8000748:	001a      	movs	r2, r3
 800074a:	2100      	movs	r1, #0
 800074c:	f003 ff10 	bl	8004570 <memset>
  RTC_DateTypeDef sDate = {0};
 8000750:	003b      	movs	r3, r7
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000756:	4b2d      	ldr	r3, [pc, #180]	; (800080c <MX_RTC_Init+0xd0>)
 8000758:	4a2d      	ldr	r2, [pc, #180]	; (8000810 <MX_RTC_Init+0xd4>)
 800075a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800075c:	4b2b      	ldr	r3, [pc, #172]	; (800080c <MX_RTC_Init+0xd0>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000762:	4b2a      	ldr	r3, [pc, #168]	; (800080c <MX_RTC_Init+0xd0>)
 8000764:	227f      	movs	r2, #127	; 0x7f
 8000766:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000768:	4b28      	ldr	r3, [pc, #160]	; (800080c <MX_RTC_Init+0xd0>)
 800076a:	22ff      	movs	r2, #255	; 0xff
 800076c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800076e:	4b27      	ldr	r3, [pc, #156]	; (800080c <MX_RTC_Init+0xd0>)
 8000770:	2200      	movs	r2, #0
 8000772:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000774:	4b25      	ldr	r3, [pc, #148]	; (800080c <MX_RTC_Init+0xd0>)
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800077a:	4b24      	ldr	r3, [pc, #144]	; (800080c <MX_RTC_Init+0xd0>)
 800077c:	2200      	movs	r2, #0
 800077e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000780:	4b22      	ldr	r3, [pc, #136]	; (800080c <MX_RTC_Init+0xd0>)
 8000782:	2280      	movs	r2, #128	; 0x80
 8000784:	05d2      	lsls	r2, r2, #23
 8000786:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000788:	4b20      	ldr	r3, [pc, #128]	; (800080c <MX_RTC_Init+0xd0>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800078e:	4b1f      	ldr	r3, [pc, #124]	; (800080c <MX_RTC_Init+0xd0>)
 8000790:	0018      	movs	r0, r3
 8000792:	f001 fda7 	bl	80022e4 <HAL_RTC_Init>
 8000796:	1e03      	subs	r3, r0, #0
 8000798:	d001      	beq.n	800079e <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800079a:	f7ff ffc9 	bl	8000730 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2200      	movs	r2, #0
 80007a8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2200      	movs	r2, #0
 80007ae:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80007c2:	1d39      	adds	r1, r7, #4
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_RTC_Init+0xd0>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	0018      	movs	r0, r3
 80007ca:	f001 fe21 	bl	8002410 <HAL_RTC_SetTime>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d001      	beq.n	80007d6 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 80007d2:	f7ff ffad 	bl	8000730 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007d6:	003b      	movs	r3, r7
 80007d8:	2201      	movs	r2, #1
 80007da:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80007dc:	003b      	movs	r3, r7
 80007de:	2201      	movs	r2, #1
 80007e0:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80007e2:	003b      	movs	r3, r7
 80007e4:	2201      	movs	r2, #1
 80007e6:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80007e8:	003b      	movs	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80007ee:	0039      	movs	r1, r7
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_RTC_Init+0xd0>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	0018      	movs	r0, r3
 80007f6:	f001 feb3 	bl	8002560 <HAL_RTC_SetDate>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d001      	beq.n	8000802 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 80007fe:	f7ff ff97 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	b006      	add	sp, #24
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	20000074 	.word	0x20000074
 8000810:	40002800 	.word	0x40002800

08000814 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a0d      	ldr	r2, [pc, #52]	; (8000858 <HAL_RTC_MspInit+0x44>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d114      	bne.n	8000850 <HAL_RTC_MspInit+0x3c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000826:	4b0d      	ldr	r3, [pc, #52]	; (800085c <HAL_RTC_MspInit+0x48>)
 8000828:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <HAL_RTC_MspInit+0x48>)
 800082c:	2180      	movs	r1, #128	; 0x80
 800082e:	0209      	lsls	r1, r1, #8
 8000830:	430a      	orrs	r2, r1
 8000832:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <HAL_RTC_MspInit+0x48>)
 8000836:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <HAL_RTC_MspInit+0x48>)
 800083a:	2180      	movs	r1, #128	; 0x80
 800083c:	00c9      	lsls	r1, r1, #3
 800083e:	430a      	orrs	r2, r1
 8000840:	63da      	str	r2, [r3, #60]	; 0x3c
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <HAL_RTC_MspInit+0x48>)
 8000844:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000846:	2380      	movs	r3, #128	; 0x80
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	4013      	ands	r3, r2
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000850:	46c0      	nop			; (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	b004      	add	sp, #16
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40002800 	.word	0x40002800
 800085c:	40021000 	.word	0x40021000

08000860 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000864:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <MX_SPI1_Init+0x74>)
 8000866:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <MX_SPI1_Init+0x78>)
 8000868:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800086a:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_SPI1_Init+0x74>)
 800086c:	2282      	movs	r2, #130	; 0x82
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_SPI1_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_SPI1_Init+0x74>)
 800087a:	22e0      	movs	r2, #224	; 0xe0
 800087c:	00d2      	lsls	r2, r2, #3
 800087e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_SPI1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_SPI1_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_SPI1_Init+0x74>)
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	0092      	lsls	r2, r2, #2
 8000892:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_SPI1_Init+0x74>)
 8000896:	2208      	movs	r2, #8
 8000898:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_SPI1_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_SPI1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MX_SPI1_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_SPI1_Init+0x74>)
 80008ae:	2207      	movs	r2, #7
 80008b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MX_SPI1_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_SPI1_Init+0x74>)
 80008ba:	2208      	movs	r2, #8
 80008bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008be:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <MX_SPI1_Init+0x74>)
 80008c0:	0018      	movs	r0, r3
 80008c2:	f001 ffb5 	bl	8002830 <HAL_SPI_Init>
 80008c6:	1e03      	subs	r3, r0, #0
 80008c8:	d001      	beq.n	80008ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008ca:	f7ff ff31 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200000a0 	.word	0x200000a0
 80008d8:	40013000 	.word	0x40013000

080008dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b08b      	sub	sp, #44	; 0x2c
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	2414      	movs	r4, #20
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	0018      	movs	r0, r3
 80008ea:	2314      	movs	r3, #20
 80008ec:	001a      	movs	r2, r3
 80008ee:	2100      	movs	r1, #0
 80008f0:	f003 fe3e 	bl	8004570 <memset>
  if(spiHandle->Instance==SPI1)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a1b      	ldr	r2, [pc, #108]	; (8000968 <HAL_SPI_MspInit+0x8c>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d12f      	bne.n	800095e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008fe:	4b1b      	ldr	r3, [pc, #108]	; (800096c <HAL_SPI_MspInit+0x90>)
 8000900:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <HAL_SPI_MspInit+0x90>)
 8000904:	2180      	movs	r1, #128	; 0x80
 8000906:	0149      	lsls	r1, r1, #5
 8000908:	430a      	orrs	r2, r1
 800090a:	641a      	str	r2, [r3, #64]	; 0x40
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <HAL_SPI_MspInit+0x90>)
 800090e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000910:	2380      	movs	r3, #128	; 0x80
 8000912:	015b      	lsls	r3, r3, #5
 8000914:	4013      	ands	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <HAL_SPI_MspInit+0x90>)
 800091c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <HAL_SPI_MspInit+0x90>)
 8000920:	2102      	movs	r1, #2
 8000922:	430a      	orrs	r2, r1
 8000924:	635a      	str	r2, [r3, #52]	; 0x34
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <HAL_SPI_MspInit+0x90>)
 8000928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800092a:	2202      	movs	r2, #2
 800092c:	4013      	ands	r3, r2
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000932:	0021      	movs	r1, r4
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2238      	movs	r2, #56	; 0x38
 8000938:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2202      	movs	r2, #2
 800093e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2200      	movs	r2, #0
 800094a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000952:	187b      	adds	r3, r7, r1
 8000954:	4a06      	ldr	r2, [pc, #24]	; (8000970 <HAL_SPI_MspInit+0x94>)
 8000956:	0019      	movs	r1, r3
 8000958:	0010      	movs	r0, r2
 800095a:	f000 fba9 	bl	80010b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	b00b      	add	sp, #44	; 0x2c
 8000964:	bd90      	pop	{r4, r7, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	40013000 	.word	0x40013000
 800096c:	40021000 	.word	0x40021000
 8000970:	50000400 	.word	0x50000400

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <HAL_MspInit+0x4c>)
 800097c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <HAL_MspInit+0x4c>)
 8000980:	2101      	movs	r1, #1
 8000982:	430a      	orrs	r2, r1
 8000984:	641a      	str	r2, [r3, #64]	; 0x40
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <HAL_MspInit+0x4c>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	2201      	movs	r2, #1
 800098c:	4013      	ands	r3, r2
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <HAL_MspInit+0x4c>)
 8000994:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000996:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <HAL_MspInit+0x4c>)
 8000998:	2180      	movs	r1, #128	; 0x80
 800099a:	0549      	lsls	r1, r1, #21
 800099c:	430a      	orrs	r2, r1
 800099e:	63da      	str	r2, [r3, #60]	; 0x3c
 80009a0:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <HAL_MspInit+0x4c>)
 80009a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009a4:	2380      	movs	r3, #128	; 0x80
 80009a6:	055b      	lsls	r3, r3, #21
 80009a8:	4013      	ands	r3, r2
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80009ae:	23c0      	movs	r3, #192	; 0xc0
 80009b0:	00db      	lsls	r3, r3, #3
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 fab8 	bl	8000f28 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b002      	add	sp, #8
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40021000 	.word	0x40021000

080009c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	; 0x28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2200      	movs	r2, #0
 80009d8:	0019      	movs	r1, r3
 80009da:	2011      	movs	r0, #17
 80009dc:	f000 fb42 	bl	8001064 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80009e0:	2011      	movs	r0, #17
 80009e2:	f000 fb54 	bl	800108e <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009e6:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <HAL_InitTick+0xa4>)
 80009e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009ea:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <HAL_InitTick+0xa4>)
 80009ec:	2110      	movs	r1, #16
 80009ee:	430a      	orrs	r2, r1
 80009f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80009f2:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <HAL_InitTick+0xa4>)
 80009f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009f6:	2210      	movs	r2, #16
 80009f8:	4013      	ands	r3, r2
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009fe:	230c      	movs	r3, #12
 8000a00:	18fa      	adds	r2, r7, r3
 8000a02:	2310      	movs	r3, #16
 8000a04:	18fb      	adds	r3, r7, r3
 8000a06:	0011      	movs	r1, r2
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f001 fb0d 	bl	8002028 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a0e:	f001 faf5 	bl	8001ffc <HAL_RCC_GetPCLK1Freq>
 8000a12:	0003      	movs	r3, r0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a18:	4914      	ldr	r1, [pc, #80]	; (8000a6c <HAL_InitTick+0xa8>)
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f7ff fb70 	bl	8000100 <__udivsi3>
 8000a20:	0003      	movs	r3, r0
 8000a22:	3b01      	subs	r3, #1
 8000a24:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <HAL_InitTick+0xac>)
 8000a28:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <HAL_InitTick+0xb0>)
 8000a2a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a2c:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <HAL_InitTick+0xac>)
 8000a2e:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <HAL_InitTick+0xb4>)
 8000a30:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <HAL_InitTick+0xac>)
 8000a34:	6a3a      	ldr	r2, [r7, #32]
 8000a36:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8000a38:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <HAL_InitTick+0xac>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <HAL_InitTick+0xac>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <HAL_InitTick+0xac>)
 8000a46:	0018      	movs	r0, r3
 8000a48:	f001 ffaa 	bl	80029a0 <HAL_TIM_Base_Init>
 8000a4c:	1e03      	subs	r3, r0, #0
 8000a4e:	d105      	bne.n	8000a5c <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <HAL_InitTick+0xac>)
 8000a52:	0018      	movs	r0, r3
 8000a54:	f001 fffc 	bl	8002a50 <HAL_TIM_Base_Start_IT>
 8000a58:	0003      	movs	r3, r0
 8000a5a:	e000      	b.n	8000a5e <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a5c:	2301      	movs	r3, #1
}
 8000a5e:	0018      	movs	r0, r3
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b00a      	add	sp, #40	; 0x28
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	000f4240 	.word	0x000f4240
 8000a70:	20000104 	.word	0x20000104
 8000a74:	40001000 	.word	0x40001000
 8000a78:	000003e7 	.word	0x000003e7

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <TIM6_IRQHandler+0x14>)
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f002 f884 	bl	8002bbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	20000104 	.word	0x20000104

08000ac0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ac4:	4b03      	ldr	r3, [pc, #12]	; (8000ad4 <SystemInit+0x14>)
 8000ac6:	2280      	movs	r2, #128	; 0x80
 8000ac8:	0512      	lsls	r2, r2, #20
 8000aca:	609a      	str	r2, [r3, #8]
#endif
}
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b09c      	sub	sp, #112	; 0x70
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ade:	2360      	movs	r3, #96	; 0x60
 8000ae0:	18fb      	adds	r3, r7, r3
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	2310      	movs	r3, #16
 8000ae6:	001a      	movs	r2, r3
 8000ae8:	2100      	movs	r1, #0
 8000aea:	f003 fd41 	bl	8004570 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aee:	2354      	movs	r3, #84	; 0x54
 8000af0:	18fb      	adds	r3, r7, r3
 8000af2:	0018      	movs	r0, r3
 8000af4:	230c      	movs	r3, #12
 8000af6:	001a      	movs	r2, r3
 8000af8:	2100      	movs	r1, #0
 8000afa:	f003 fd39 	bl	8004570 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000afe:	2338      	movs	r3, #56	; 0x38
 8000b00:	18fb      	adds	r3, r7, r3
 8000b02:	0018      	movs	r0, r3
 8000b04:	231c      	movs	r3, #28
 8000b06:	001a      	movs	r2, r3
 8000b08:	2100      	movs	r1, #0
 8000b0a:	f003 fd31 	bl	8004570 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	0018      	movs	r0, r3
 8000b12:	2334      	movs	r3, #52	; 0x34
 8000b14:	001a      	movs	r2, r3
 8000b16:	2100      	movs	r1, #0
 8000b18:	f003 fd2a 	bl	8004570 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b1c:	4b51      	ldr	r3, [pc, #324]	; (8000c64 <MX_TIM1_Init+0x18c>)
 8000b1e:	4a52      	ldr	r2, [pc, #328]	; (8000c68 <MX_TIM1_Init+0x190>)
 8000b20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b22:	4b50      	ldr	r3, [pc, #320]	; (8000c64 <MX_TIM1_Init+0x18c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b28:	4b4e      	ldr	r3, [pc, #312]	; (8000c64 <MX_TIM1_Init+0x18c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b2e:	4b4d      	ldr	r3, [pc, #308]	; (8000c64 <MX_TIM1_Init+0x18c>)
 8000b30:	4a4e      	ldr	r2, [pc, #312]	; (8000c6c <MX_TIM1_Init+0x194>)
 8000b32:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b34:	4b4b      	ldr	r3, [pc, #300]	; (8000c64 <MX_TIM1_Init+0x18c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b3a:	4b4a      	ldr	r3, [pc, #296]	; (8000c64 <MX_TIM1_Init+0x18c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b40:	4b48      	ldr	r3, [pc, #288]	; (8000c64 <MX_TIM1_Init+0x18c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b46:	4b47      	ldr	r3, [pc, #284]	; (8000c64 <MX_TIM1_Init+0x18c>)
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f001 ff29 	bl	80029a0 <HAL_TIM_Base_Init>
 8000b4e:	1e03      	subs	r3, r0, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000b52:	f7ff fded 	bl	8000730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b56:	2160      	movs	r1, #96	; 0x60
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	2280      	movs	r2, #128	; 0x80
 8000b5c:	0152      	lsls	r2, r2, #5
 8000b5e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b60:	187a      	adds	r2, r7, r1
 8000b62:	4b40      	ldr	r3, [pc, #256]	; (8000c64 <MX_TIM1_Init+0x18c>)
 8000b64:	0011      	movs	r1, r2
 8000b66:	0018      	movs	r0, r3
 8000b68:	f002 fa50 	bl	800300c <HAL_TIM_ConfigClockSource>
 8000b6c:	1e03      	subs	r3, r0, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000b70:	f7ff fdde 	bl	8000730 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b74:	4b3b      	ldr	r3, [pc, #236]	; (8000c64 <MX_TIM1_Init+0x18c>)
 8000b76:	0018      	movs	r0, r3
 8000b78:	f001 ffc0 	bl	8002afc <HAL_TIM_PWM_Init>
 8000b7c:	1e03      	subs	r3, r0, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000b80:	f7ff fdd6 	bl	8000730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b84:	2154      	movs	r1, #84	; 0x54
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	2200      	movs	r2, #0
 8000b90:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b98:	187a      	adds	r2, r7, r1
 8000b9a:	4b32      	ldr	r3, [pc, #200]	; (8000c64 <MX_TIM1_Init+0x18c>)
 8000b9c:	0011      	movs	r1, r2
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f002 fef6 	bl	8003990 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba4:	1e03      	subs	r3, r0, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000ba8:	f7ff fdc2 	bl	8000730 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bac:	2138      	movs	r1, #56	; 0x38
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	2260      	movs	r2, #96	; 0x60
 8000bb2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	2200      	movs	r2, #0
 8000bd0:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bd8:	1879      	adds	r1, r7, r1
 8000bda:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <MX_TIM1_Init+0x18c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	0018      	movs	r0, r3
 8000be0:	f002 f91e 	bl	8002e20 <HAL_TIM_PWM_ConfigChannel>
 8000be4:	1e03      	subs	r3, r0, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000be8:	f7ff fda2 	bl	8000730 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2200      	movs	r2, #0
 8000c02:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	2280      	movs	r2, #128	; 0x80
 8000c0e:	0192      	lsls	r2, r2, #6
 8000c10:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2200      	movs	r2, #0
 8000c22:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	2280      	movs	r2, #128	; 0x80
 8000c28:	0492      	lsls	r2, r2, #18
 8000c2a:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	2200      	movs	r2, #0
 8000c30:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	2200      	movs	r2, #0
 8000c36:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c3e:	1d3a      	adds	r2, r7, #4
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <MX_TIM1_Init+0x18c>)
 8000c42:	0011      	movs	r1, r2
 8000c44:	0018      	movs	r0, r3
 8000c46:	f002 ff0b 	bl	8003a60 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c4a:	1e03      	subs	r3, r0, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000c4e:	f7ff fd6f 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c52:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <MX_TIM1_Init+0x18c>)
 8000c54:	0018      	movs	r0, r3
 8000c56:	f000 f82b 	bl	8000cb0 <HAL_TIM_MspPostInit>

}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b01c      	add	sp, #112	; 0x70
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	20000150 	.word	0x20000150
 8000c68:	40012c00 	.word	0x40012c00
 8000c6c:	0000ffff 	.word	0x0000ffff

08000c70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <HAL_TIM_Base_MspInit+0x38>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d10d      	bne.n	8000c9e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <HAL_TIM_Base_MspInit+0x3c>)
 8000c84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <HAL_TIM_Base_MspInit+0x3c>)
 8000c88:	2180      	movs	r1, #128	; 0x80
 8000c8a:	0109      	lsls	r1, r1, #4
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	641a      	str	r2, [r3, #64]	; 0x40
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_TIM_Base_MspInit+0x3c>)
 8000c92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c94:	2380      	movs	r3, #128	; 0x80
 8000c96:	011b      	lsls	r3, r3, #4
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b004      	add	sp, #16
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	40012c00 	.word	0x40012c00
 8000cac:	40021000 	.word	0x40021000

08000cb0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000cb0:	b590      	push	{r4, r7, lr}
 8000cb2:	b089      	sub	sp, #36	; 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	240c      	movs	r4, #12
 8000cba:	193b      	adds	r3, r7, r4
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	2314      	movs	r3, #20
 8000cc0:	001a      	movs	r2, r3
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	f003 fc54 	bl	8004570 <memset>
  if(timHandle->Instance==TIM1)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a15      	ldr	r2, [pc, #84]	; (8000d24 <HAL_TIM_MspPostInit+0x74>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d123      	bne.n	8000d1a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <HAL_TIM_MspPostInit+0x78>)
 8000cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cd6:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <HAL_TIM_MspPostInit+0x78>)
 8000cd8:	2101      	movs	r1, #1
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	635a      	str	r2, [r3, #52]	; 0x34
 8000cde:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_TIM_MspPostInit+0x78>)
 8000ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TFT_LED_Pin;
 8000cea:	193b      	adds	r3, r7, r4
 8000cec:	2280      	movs	r2, #128	; 0x80
 8000cee:	0052      	lsls	r2, r2, #1
 8000cf0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	0021      	movs	r1, r4
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	187b      	adds	r3, r7, r1
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000d06:	187b      	adds	r3, r7, r1
 8000d08:	2202      	movs	r2, #2
 8000d0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TFT_LED_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	187a      	adds	r2, r7, r1
 8000d0e:	23a0      	movs	r3, #160	; 0xa0
 8000d10:	05db      	lsls	r3, r3, #23
 8000d12:	0011      	movs	r1, r2
 8000d14:	0018      	movs	r0, r3
 8000d16:	f000 f9cb 	bl	80010b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b009      	add	sp, #36	; 0x24
 8000d20:	bd90      	pop	{r4, r7, pc}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	40012c00 	.word	0x40012c00
 8000d28:	40021000 	.word	0x40021000

08000d2c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d30:	4b23      	ldr	r3, [pc, #140]	; (8000dc0 <MX_USART2_UART_Init+0x94>)
 8000d32:	4a24      	ldr	r2, [pc, #144]	; (8000dc4 <MX_USART2_UART_Init+0x98>)
 8000d34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d36:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <MX_USART2_UART_Init+0x94>)
 8000d38:	22e1      	movs	r2, #225	; 0xe1
 8000d3a:	0252      	lsls	r2, r2, #9
 8000d3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 8000d3e:	4b20      	ldr	r3, [pc, #128]	; (8000dc0 <MX_USART2_UART_Init+0x94>)
 8000d40:	2280      	movs	r2, #128	; 0x80
 8000d42:	0552      	lsls	r2, r2, #21
 8000d44:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d46:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <MX_USART2_UART_Init+0x94>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d4c:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <MX_USART2_UART_Init+0x94>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d52:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <MX_USART2_UART_Init+0x94>)
 8000d54:	220c      	movs	r2, #12
 8000d56:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d58:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <MX_USART2_UART_Init+0x94>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d5e:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <MX_USART2_UART_Init+0x94>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d64:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <MX_USART2_UART_Init+0x94>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <MX_USART2_UART_Init+0x94>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d70:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <MX_USART2_UART_Init+0x94>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d76:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <MX_USART2_UART_Init+0x94>)
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f002 ff2f 	bl	8003bdc <HAL_UART_Init>
 8000d7e:	1e03      	subs	r3, r0, #0
 8000d80:	d001      	beq.n	8000d86 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000d82:	f7ff fcd5 	bl	8000730 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_USART2_UART_Init+0x94>)
 8000d88:	2100      	movs	r1, #0
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f003 fae0 	bl	8004350 <HAL_UARTEx_SetTxFifoThreshold>
 8000d90:	1e03      	subs	r3, r0, #0
 8000d92:	d001      	beq.n	8000d98 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000d94:	f7ff fccc 	bl	8000730 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_USART2_UART_Init+0x94>)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f003 fb17 	bl	80043d0 <HAL_UARTEx_SetRxFifoThreshold>
 8000da2:	1e03      	subs	r3, r0, #0
 8000da4:	d001      	beq.n	8000daa <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000da6:	f7ff fcc3 	bl	8000730 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000daa:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <MX_USART2_UART_Init+0x94>)
 8000dac:	0018      	movs	r0, r3
 8000dae:	f003 fa95 	bl	80042dc <HAL_UARTEx_DisableFifoMode>
 8000db2:	1e03      	subs	r3, r0, #0
 8000db4:	d001      	beq.n	8000dba <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000db6:	f7ff fcbb 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	2000019c 	.word	0x2000019c
 8000dc4:	40004400 	.word	0x40004400

08000dc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b08b      	sub	sp, #44	; 0x2c
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	2414      	movs	r4, #20
 8000dd2:	193b      	adds	r3, r7, r4
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	2314      	movs	r3, #20
 8000dd8:	001a      	movs	r2, r3
 8000dda:	2100      	movs	r1, #0
 8000ddc:	f003 fbc8 	bl	8004570 <memset>
  if(uartHandle->Instance==USART2)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a1b      	ldr	r2, [pc, #108]	; (8000e54 <HAL_UART_MspInit+0x8c>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d130      	bne.n	8000e4c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dea:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <HAL_UART_MspInit+0x90>)
 8000dec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <HAL_UART_MspInit+0x90>)
 8000df0:	2180      	movs	r1, #128	; 0x80
 8000df2:	0289      	lsls	r1, r1, #10
 8000df4:	430a      	orrs	r2, r1
 8000df6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000df8:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <HAL_UART_MspInit+0x90>)
 8000dfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dfc:	2380      	movs	r3, #128	; 0x80
 8000dfe:	029b      	lsls	r3, r3, #10
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <HAL_UART_MspInit+0x90>)
 8000e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <HAL_UART_MspInit+0x90>)
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	635a      	str	r2, [r3, #52]	; 0x34
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <HAL_UART_MspInit+0x90>)
 8000e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e16:	2201      	movs	r2, #1
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e1e:	0021      	movs	r1, r4
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	220c      	movs	r2, #12
 8000e24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	2202      	movs	r2, #2
 8000e2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	2201      	movs	r2, #1
 8000e30:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	2200      	movs	r2, #0
 8000e36:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	187a      	adds	r2, r7, r1
 8000e40:	23a0      	movs	r3, #160	; 0xa0
 8000e42:	05db      	lsls	r3, r3, #23
 8000e44:	0011      	movs	r1, r2
 8000e46:	0018      	movs	r0, r3
 8000e48:	f000 f932 	bl	80010b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e4c:	46c0      	nop			; (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b00b      	add	sp, #44	; 0x2c
 8000e52:	bd90      	pop	{r4, r7, pc}
 8000e54:	40004400 	.word	0x40004400
 8000e58:	40021000 	.word	0x40021000

08000e5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e5c:	480d      	ldr	r0, [pc, #52]	; (8000e94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e5e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e60:	f7ff fe2e 	bl	8000ac0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e64:	480c      	ldr	r0, [pc, #48]	; (8000e98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e66:	490d      	ldr	r1, [pc, #52]	; (8000e9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e68:	4a0d      	ldr	r2, [pc, #52]	; (8000ea0 <LoopForever+0xe>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e6c:	e002      	b.n	8000e74 <LoopCopyDataInit>

08000e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e72:	3304      	adds	r3, #4

08000e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e78:	d3f9      	bcc.n	8000e6e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e7c:	4c0a      	ldr	r4, [pc, #40]	; (8000ea8 <LoopForever+0x16>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e80:	e001      	b.n	8000e86 <LoopFillZerobss>

08000e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e84:	3204      	adds	r2, #4

08000e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e88:	d3fb      	bcc.n	8000e82 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e8a:	f003 fb4d 	bl	8004528 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e8e:	f7ff fbb1 	bl	80005f4 <main>

08000e92 <LoopForever>:

LoopForever:
  b LoopForever
 8000e92:	e7fe      	b.n	8000e92 <LoopForever>
  ldr   r0, =_estack
 8000e94:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e9c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ea0:	0800467c 	.word	0x0800467c
  ldr r2, =_sbss
 8000ea4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ea8:	20000230 	.word	0x20000230

08000eac <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eac:	e7fe      	b.n	8000eac <ADC1_IRQHandler>
	...

08000eb0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eb6:	1dfb      	adds	r3, r7, #7
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <HAL_Init+0x3c>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <HAL_Init+0x3c>)
 8000ec2:	2180      	movs	r1, #128	; 0x80
 8000ec4:	0049      	lsls	r1, r1, #1
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f7ff fd7a 	bl	80009c4 <HAL_InitTick>
 8000ed0:	1e03      	subs	r3, r0, #0
 8000ed2:	d003      	beq.n	8000edc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ed4:	1dfb      	adds	r3, r7, #7
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]
 8000eda:	e001      	b.n	8000ee0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000edc:	f7ff fd4a 	bl	8000974 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ee0:	1dfb      	adds	r3, r7, #7
 8000ee2:	781b      	ldrb	r3, [r3, #0]
}
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b002      	add	sp, #8
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40022000 	.word	0x40022000

08000ef0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <HAL_IncTick+0x1c>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	001a      	movs	r2, r3
 8000efa:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <HAL_IncTick+0x20>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	18d2      	adds	r2, r2, r3
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <HAL_IncTick+0x20>)
 8000f02:	601a      	str	r2, [r3, #0]
}
 8000f04:	46c0      	nop			; (mov r8, r8)
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	2000022c 	.word	0x2000022c

08000f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  return uwTick;
 8000f18:	4b02      	ldr	r3, [pc, #8]	; (8000f24 <HAL_GetTick+0x10>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
}
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	2000022c 	.word	0x2000022c

08000f28 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a06      	ldr	r2, [pc, #24]	; (8000f50 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000f36:	4013      	ands	r3, r2
 8000f38:	0019      	movs	r1, r3
 8000f3a:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	601a      	str	r2, [r3, #0]
}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b002      	add	sp, #8
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	40010000 	.word	0x40010000
 8000f50:	fffff9ff 	.word	0xfffff9ff

08000f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	0002      	movs	r2, r0
 8000f5c:	1dfb      	adds	r3, r7, #7
 8000f5e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	1dfb      	adds	r3, r7, #7
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b7f      	cmp	r3, #127	; 0x7f
 8000f66:	d809      	bhi.n	8000f7c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f68:	1dfb      	adds	r3, r7, #7
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	001a      	movs	r2, r3
 8000f6e:	231f      	movs	r3, #31
 8000f70:	401a      	ands	r2, r3
 8000f72:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <__NVIC_EnableIRQ+0x30>)
 8000f74:	2101      	movs	r1, #1
 8000f76:	4091      	lsls	r1, r2
 8000f78:	000a      	movs	r2, r1
 8000f7a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000f7c:	46c0      	nop			; (mov r8, r8)
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	b002      	add	sp, #8
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	e000e100 	.word	0xe000e100

08000f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	0002      	movs	r2, r0
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	1dfb      	adds	r3, r7, #7
 8000f94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b7f      	cmp	r3, #127	; 0x7f
 8000f9c:	d828      	bhi.n	8000ff0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f9e:	4a2f      	ldr	r2, [pc, #188]	; (800105c <__NVIC_SetPriority+0xd4>)
 8000fa0:	1dfb      	adds	r3, r7, #7
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	b25b      	sxtb	r3, r3
 8000fa6:	089b      	lsrs	r3, r3, #2
 8000fa8:	33c0      	adds	r3, #192	; 0xc0
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	589b      	ldr	r3, [r3, r2]
 8000fae:	1dfa      	adds	r2, r7, #7
 8000fb0:	7812      	ldrb	r2, [r2, #0]
 8000fb2:	0011      	movs	r1, r2
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	400a      	ands	r2, r1
 8000fb8:	00d2      	lsls	r2, r2, #3
 8000fba:	21ff      	movs	r1, #255	; 0xff
 8000fbc:	4091      	lsls	r1, r2
 8000fbe:	000a      	movs	r2, r1
 8000fc0:	43d2      	mvns	r2, r2
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	019b      	lsls	r3, r3, #6
 8000fca:	22ff      	movs	r2, #255	; 0xff
 8000fcc:	401a      	ands	r2, r3
 8000fce:	1dfb      	adds	r3, r7, #7
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	4003      	ands	r3, r0
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fdc:	481f      	ldr	r0, [pc, #124]	; (800105c <__NVIC_SetPriority+0xd4>)
 8000fde:	1dfb      	adds	r3, r7, #7
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	b25b      	sxtb	r3, r3
 8000fe4:	089b      	lsrs	r3, r3, #2
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	33c0      	adds	r3, #192	; 0xc0
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000fee:	e031      	b.n	8001054 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ff0:	4a1b      	ldr	r2, [pc, #108]	; (8001060 <__NVIC_SetPriority+0xd8>)
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	0019      	movs	r1, r3
 8000ff8:	230f      	movs	r3, #15
 8000ffa:	400b      	ands	r3, r1
 8000ffc:	3b08      	subs	r3, #8
 8000ffe:	089b      	lsrs	r3, r3, #2
 8001000:	3306      	adds	r3, #6
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	18d3      	adds	r3, r2, r3
 8001006:	3304      	adds	r3, #4
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	1dfa      	adds	r2, r7, #7
 800100c:	7812      	ldrb	r2, [r2, #0]
 800100e:	0011      	movs	r1, r2
 8001010:	2203      	movs	r2, #3
 8001012:	400a      	ands	r2, r1
 8001014:	00d2      	lsls	r2, r2, #3
 8001016:	21ff      	movs	r1, #255	; 0xff
 8001018:	4091      	lsls	r1, r2
 800101a:	000a      	movs	r2, r1
 800101c:	43d2      	mvns	r2, r2
 800101e:	401a      	ands	r2, r3
 8001020:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	019b      	lsls	r3, r3, #6
 8001026:	22ff      	movs	r2, #255	; 0xff
 8001028:	401a      	ands	r2, r3
 800102a:	1dfb      	adds	r3, r7, #7
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	0018      	movs	r0, r3
 8001030:	2303      	movs	r3, #3
 8001032:	4003      	ands	r3, r0
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001038:	4809      	ldr	r0, [pc, #36]	; (8001060 <__NVIC_SetPriority+0xd8>)
 800103a:	1dfb      	adds	r3, r7, #7
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	001c      	movs	r4, r3
 8001040:	230f      	movs	r3, #15
 8001042:	4023      	ands	r3, r4
 8001044:	3b08      	subs	r3, #8
 8001046:	089b      	lsrs	r3, r3, #2
 8001048:	430a      	orrs	r2, r1
 800104a:	3306      	adds	r3, #6
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	18c3      	adds	r3, r0, r3
 8001050:	3304      	adds	r3, #4
 8001052:	601a      	str	r2, [r3, #0]
}
 8001054:	46c0      	nop			; (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	b003      	add	sp, #12
 800105a:	bd90      	pop	{r4, r7, pc}
 800105c:	e000e100 	.word	0xe000e100
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	607a      	str	r2, [r7, #4]
 800106e:	210f      	movs	r1, #15
 8001070:	187b      	adds	r3, r7, r1
 8001072:	1c02      	adds	r2, r0, #0
 8001074:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	187b      	adds	r3, r7, r1
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	b25b      	sxtb	r3, r3
 800107e:	0011      	movs	r1, r2
 8001080:	0018      	movs	r0, r3
 8001082:	f7ff ff81 	bl	8000f88 <__NVIC_SetPriority>
}
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	46bd      	mov	sp, r7
 800108a:	b004      	add	sp, #16
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	0002      	movs	r2, r0
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800109a:	1dfb      	adds	r3, r7, #7
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	b25b      	sxtb	r3, r3
 80010a0:	0018      	movs	r0, r3
 80010a2:	f7ff ff57 	bl	8000f54 <__NVIC_EnableIRQ>
}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	46bd      	mov	sp, r7
 80010aa:	b002      	add	sp, #8
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010be:	e147      	b.n	8001350 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2101      	movs	r1, #1
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	4091      	lsls	r1, r2
 80010ca:	000a      	movs	r2, r1
 80010cc:	4013      	ands	r3, r2
 80010ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d100      	bne.n	80010d8 <HAL_GPIO_Init+0x28>
 80010d6:	e138      	b.n	800134a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d00b      	beq.n	80010f8 <HAL_GPIO_Init+0x48>
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d007      	beq.n	80010f8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ec:	2b11      	cmp	r3, #17
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b12      	cmp	r3, #18
 80010f6:	d130      	bne.n	800115a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	2203      	movs	r2, #3
 8001104:	409a      	lsls	r2, r3
 8001106:	0013      	movs	r3, r2
 8001108:	43da      	mvns	r2, r3
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	68da      	ldr	r2, [r3, #12]
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	409a      	lsls	r2, r3
 800111a:	0013      	movs	r3, r2
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4313      	orrs	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800112e:	2201      	movs	r2, #1
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	409a      	lsls	r2, r3
 8001134:	0013      	movs	r3, r2
 8001136:	43da      	mvns	r2, r3
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	091b      	lsrs	r3, r3, #4
 8001144:	2201      	movs	r2, #1
 8001146:	401a      	ands	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	409a      	lsls	r2, r3
 800114c:	0013      	movs	r3, r2
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	2203      	movs	r2, #3
 8001166:	409a      	lsls	r2, r3
 8001168:	0013      	movs	r3, r2
 800116a:	43da      	mvns	r2, r3
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	4013      	ands	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	689a      	ldr	r2, [r3, #8]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	409a      	lsls	r2, r3
 800117c:	0013      	movs	r3, r2
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2b02      	cmp	r3, #2
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0xea>
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b12      	cmp	r3, #18
 8001198:	d123      	bne.n	80011e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	08da      	lsrs	r2, r3, #3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3208      	adds	r2, #8
 80011a2:	0092      	lsls	r2, r2, #2
 80011a4:	58d3      	ldr	r3, [r2, r3]
 80011a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	2207      	movs	r2, #7
 80011ac:	4013      	ands	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	220f      	movs	r2, #15
 80011b2:	409a      	lsls	r2, r3
 80011b4:	0013      	movs	r3, r2
 80011b6:	43da      	mvns	r2, r3
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	691a      	ldr	r2, [r3, #16]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	2107      	movs	r1, #7
 80011c6:	400b      	ands	r3, r1
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	409a      	lsls	r2, r3
 80011cc:	0013      	movs	r3, r2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	08da      	lsrs	r2, r3, #3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3208      	adds	r2, #8
 80011dc:	0092      	lsls	r2, r2, #2
 80011de:	6939      	ldr	r1, [r7, #16]
 80011e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	2203      	movs	r2, #3
 80011ee:	409a      	lsls	r2, r3
 80011f0:	0013      	movs	r3, r2
 80011f2:	43da      	mvns	r2, r3
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4013      	ands	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2203      	movs	r2, #3
 8001200:	401a      	ands	r2, r3
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	409a      	lsls	r2, r3
 8001208:	0013      	movs	r3, r2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	055b      	lsls	r3, r3, #21
 800121e:	4013      	ands	r3, r2
 8001220:	d100      	bne.n	8001224 <HAL_GPIO_Init+0x174>
 8001222:	e092      	b.n	800134a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001224:	4a50      	ldr	r2, [pc, #320]	; (8001368 <HAL_GPIO_Init+0x2b8>)
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	089b      	lsrs	r3, r3, #2
 800122a:	3318      	adds	r3, #24
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	589b      	ldr	r3, [r3, r2]
 8001230:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	2203      	movs	r2, #3
 8001236:	4013      	ands	r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	220f      	movs	r2, #15
 800123c:	409a      	lsls	r2, r3
 800123e:	0013      	movs	r3, r2
 8001240:	43da      	mvns	r2, r3
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	23a0      	movs	r3, #160	; 0xa0
 800124c:	05db      	lsls	r3, r3, #23
 800124e:	429a      	cmp	r2, r3
 8001250:	d013      	beq.n	800127a <HAL_GPIO_Init+0x1ca>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a45      	ldr	r2, [pc, #276]	; (800136c <HAL_GPIO_Init+0x2bc>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d00d      	beq.n	8001276 <HAL_GPIO_Init+0x1c6>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a44      	ldr	r2, [pc, #272]	; (8001370 <HAL_GPIO_Init+0x2c0>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d007      	beq.n	8001272 <HAL_GPIO_Init+0x1c2>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a43      	ldr	r2, [pc, #268]	; (8001374 <HAL_GPIO_Init+0x2c4>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d101      	bne.n	800126e <HAL_GPIO_Init+0x1be>
 800126a:	2303      	movs	r3, #3
 800126c:	e006      	b.n	800127c <HAL_GPIO_Init+0x1cc>
 800126e:	2305      	movs	r3, #5
 8001270:	e004      	b.n	800127c <HAL_GPIO_Init+0x1cc>
 8001272:	2302      	movs	r3, #2
 8001274:	e002      	b.n	800127c <HAL_GPIO_Init+0x1cc>
 8001276:	2301      	movs	r3, #1
 8001278:	e000      	b.n	800127c <HAL_GPIO_Init+0x1cc>
 800127a:	2300      	movs	r3, #0
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	2103      	movs	r1, #3
 8001280:	400a      	ands	r2, r1
 8001282:	00d2      	lsls	r2, r2, #3
 8001284:	4093      	lsls	r3, r2
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800128c:	4936      	ldr	r1, [pc, #216]	; (8001368 <HAL_GPIO_Init+0x2b8>)
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	3318      	adds	r3, #24
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800129a:	4a33      	ldr	r2, [pc, #204]	; (8001368 <HAL_GPIO_Init+0x2b8>)
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	58d3      	ldr	r3, [r2, r3]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	43da      	mvns	r2, r3
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	025b      	lsls	r3, r3, #9
 80012b4:	4013      	ands	r3, r2
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012c0:	4929      	ldr	r1, [pc, #164]	; (8001368 <HAL_GPIO_Init+0x2b8>)
 80012c2:	2280      	movs	r2, #128	; 0x80
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80012c8:	4a27      	ldr	r2, [pc, #156]	; (8001368 <HAL_GPIO_Init+0x2b8>)
 80012ca:	2384      	movs	r3, #132	; 0x84
 80012cc:	58d3      	ldr	r3, [r2, r3]
 80012ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	43da      	mvns	r2, r3
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	029b      	lsls	r3, r3, #10
 80012e2:	4013      	ands	r3, r2
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012ee:	491e      	ldr	r1, [pc, #120]	; (8001368 <HAL_GPIO_Init+0x2b8>)
 80012f0:	2284      	movs	r2, #132	; 0x84
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012f6:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <HAL_GPIO_Init+0x2b8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	43da      	mvns	r2, r3
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	035b      	lsls	r3, r3, #13
 800130e:	4013      	ands	r3, r2
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4313      	orrs	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <HAL_GPIO_Init+0x2b8>)
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <HAL_GPIO_Init+0x2b8>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	43da      	mvns	r2, r3
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	039b      	lsls	r3, r3, #14
 8001338:	4013      	ands	r3, r2
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4313      	orrs	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <HAL_GPIO_Init+0x2b8>)
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	3301      	adds	r3, #1
 800134e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	40da      	lsrs	r2, r3
 8001358:	1e13      	subs	r3, r2, #0
 800135a:	d000      	beq.n	800135e <HAL_GPIO_Init+0x2ae>
 800135c:	e6b0      	b.n	80010c0 <HAL_GPIO_Init+0x10>
  }
}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	46c0      	nop			; (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	b006      	add	sp, #24
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40021800 	.word	0x40021800
 800136c:	50000400 	.word	0x50000400
 8001370:	50000800 	.word	0x50000800
 8001374:	50000c00 	.word	0x50000c00

08001378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	0008      	movs	r0, r1
 8001382:	0011      	movs	r1, r2
 8001384:	1cbb      	adds	r3, r7, #2
 8001386:	1c02      	adds	r2, r0, #0
 8001388:	801a      	strh	r2, [r3, #0]
 800138a:	1c7b      	adds	r3, r7, #1
 800138c:	1c0a      	adds	r2, r1, #0
 800138e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001390:	1c7b      	adds	r3, r7, #1
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d004      	beq.n	80013a2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001398:	1cbb      	adds	r3, r7, #2
 800139a:	881a      	ldrh	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013a0:	e003      	b.n	80013aa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013a2:	1cbb      	adds	r3, r7, #2
 80013a4:	881a      	ldrh	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013aa:	46c0      	nop			; (mov r8, r8)
 80013ac:	46bd      	mov	sp, r7
 80013ae:	b002      	add	sp, #8
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e082      	b.n	80014cc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2241      	movs	r2, #65	; 0x41
 80013ca:	5c9b      	ldrb	r3, [r3, r2]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d107      	bne.n	80013e2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2240      	movs	r2, #64	; 0x40
 80013d6:	2100      	movs	r1, #0
 80013d8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	0018      	movs	r0, r3
 80013de:	f7ff f8bd 	bl	800055c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2241      	movs	r2, #65	; 0x41
 80013e6:	2124      	movs	r1, #36	; 0x24
 80013e8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2101      	movs	r1, #1
 80013f6:	438a      	bics	r2, r1
 80013f8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4934      	ldr	r1, [pc, #208]	; (80014d4 <HAL_I2C_Init+0x120>)
 8001404:	400a      	ands	r2, r1
 8001406:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4931      	ldr	r1, [pc, #196]	; (80014d8 <HAL_I2C_Init+0x124>)
 8001414:	400a      	ands	r2, r1
 8001416:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d108      	bne.n	8001432 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2180      	movs	r1, #128	; 0x80
 800142a:	0209      	lsls	r1, r1, #8
 800142c:	430a      	orrs	r2, r1
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	e007      	b.n	8001442 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2184      	movs	r1, #132	; 0x84
 800143c:	0209      	lsls	r1, r1, #8
 800143e:	430a      	orrs	r2, r1
 8001440:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d104      	bne.n	8001454 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2280      	movs	r2, #128	; 0x80
 8001450:	0112      	lsls	r2, r2, #4
 8001452:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	491f      	ldr	r1, [pc, #124]	; (80014dc <HAL_I2C_Init+0x128>)
 8001460:	430a      	orrs	r2, r1
 8001462:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	68da      	ldr	r2, [r3, #12]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	491a      	ldr	r1, [pc, #104]	; (80014d8 <HAL_I2C_Init+0x124>)
 8001470:	400a      	ands	r2, r1
 8001472:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691a      	ldr	r2, [r3, #16]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	431a      	orrs	r2, r3
 800147e:	0011      	movs	r1, r2
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	021a      	lsls	r2, r3, #8
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	430a      	orrs	r2, r1
 800148c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69d9      	ldr	r1, [r3, #28]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1a      	ldr	r2, [r3, #32]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2101      	movs	r1, #1
 80014aa:	430a      	orrs	r2, r1
 80014ac:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2241      	movs	r2, #65	; 0x41
 80014b8:	2120      	movs	r1, #32
 80014ba:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2242      	movs	r2, #66	; 0x42
 80014c6:	2100      	movs	r1, #0
 80014c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	0018      	movs	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	b002      	add	sp, #8
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	f0ffffff 	.word	0xf0ffffff
 80014d8:	ffff7fff 	.word	0xffff7fff
 80014dc:	02008000 	.word	0x02008000

080014e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2241      	movs	r2, #65	; 0x41
 80014ee:	5c9b      	ldrb	r3, [r3, r2]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b20      	cmp	r3, #32
 80014f4:	d138      	bne.n	8001568 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2240      	movs	r2, #64	; 0x40
 80014fa:	5c9b      	ldrb	r3, [r3, r2]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d101      	bne.n	8001504 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001500:	2302      	movs	r3, #2
 8001502:	e032      	b.n	800156a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2240      	movs	r2, #64	; 0x40
 8001508:	2101      	movs	r1, #1
 800150a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2241      	movs	r2, #65	; 0x41
 8001510:	2124      	movs	r1, #36	; 0x24
 8001512:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2101      	movs	r1, #1
 8001520:	438a      	bics	r2, r1
 8001522:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4911      	ldr	r1, [pc, #68]	; (8001574 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001530:	400a      	ands	r2, r1
 8001532:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6819      	ldr	r1, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	430a      	orrs	r2, r1
 8001542:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2101      	movs	r1, #1
 8001550:	430a      	orrs	r2, r1
 8001552:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2241      	movs	r2, #65	; 0x41
 8001558:	2120      	movs	r1, #32
 800155a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2240      	movs	r2, #64	; 0x40
 8001560:	2100      	movs	r1, #0
 8001562:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001564:	2300      	movs	r3, #0
 8001566:	e000      	b.n	800156a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001568:	2302      	movs	r3, #2
  }
}
 800156a:	0018      	movs	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	b002      	add	sp, #8
 8001570:	bd80      	pop	{r7, pc}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	ffffefff 	.word	0xffffefff

08001578 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2241      	movs	r2, #65	; 0x41
 8001586:	5c9b      	ldrb	r3, [r3, r2]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b20      	cmp	r3, #32
 800158c:	d139      	bne.n	8001602 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2240      	movs	r2, #64	; 0x40
 8001592:	5c9b      	ldrb	r3, [r3, r2]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d101      	bne.n	800159c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001598:	2302      	movs	r3, #2
 800159a:	e033      	b.n	8001604 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2240      	movs	r2, #64	; 0x40
 80015a0:	2101      	movs	r1, #1
 80015a2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2241      	movs	r2, #65	; 0x41
 80015a8:	2124      	movs	r1, #36	; 0x24
 80015aa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2101      	movs	r1, #1
 80015b8:	438a      	bics	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4a11      	ldr	r2, [pc, #68]	; (800160c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	021b      	lsls	r3, r3, #8
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2101      	movs	r1, #1
 80015ea:	430a      	orrs	r2, r1
 80015ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2241      	movs	r2, #65	; 0x41
 80015f2:	2120      	movs	r1, #32
 80015f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2240      	movs	r2, #64	; 0x40
 80015fa:	2100      	movs	r1, #0
 80015fc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	e000      	b.n	8001604 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001602:	2302      	movs	r3, #2
  }
}
 8001604:	0018      	movs	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	b004      	add	sp, #16
 800160a:	bd80      	pop	{r7, pc}
 800160c:	fffff0ff 	.word	0xfffff0ff

08001610 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001618:	4b19      	ldr	r3, [pc, #100]	; (8001680 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a19      	ldr	r2, [pc, #100]	; (8001684 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800161e:	4013      	ands	r3, r2
 8001620:	0019      	movs	r1, r3
 8001622:	4b17      	ldr	r3, [pc, #92]	; (8001680 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	430a      	orrs	r2, r1
 8001628:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	429a      	cmp	r2, r3
 8001632:	d11f      	bne.n	8001674 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001634:	4b14      	ldr	r3, [pc, #80]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	0013      	movs	r3, r2
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	189b      	adds	r3, r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	4912      	ldr	r1, [pc, #72]	; (800168c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001642:	0018      	movs	r0, r3
 8001644:	f7fe fd5c 	bl	8000100 <__udivsi3>
 8001648:	0003      	movs	r3, r0
 800164a:	3301      	adds	r3, #1
 800164c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800164e:	e008      	b.n	8001662 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	3b01      	subs	r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	e001      	b.n	8001662 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e009      	b.n	8001676 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001662:	4b07      	ldr	r3, [pc, #28]	; (8001680 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001664:	695a      	ldr	r2, [r3, #20]
 8001666:	2380      	movs	r3, #128	; 0x80
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	401a      	ands	r2, r3
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	429a      	cmp	r2, r3
 8001672:	d0ed      	beq.n	8001650 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	0018      	movs	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	b004      	add	sp, #16
 800167c:	bd80      	pop	{r7, pc}
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	40007000 	.word	0x40007000
 8001684:	fffff9ff 	.word	0xfffff9ff
 8001688:	20000000 	.word	0x20000000
 800168c:	000f4240 	.word	0x000f4240

08001690 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001694:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	23e0      	movs	r3, #224	; 0xe0
 800169a:	01db      	lsls	r3, r3, #7
 800169c:	4013      	ands	r3, r2
}
 800169e:	0018      	movs	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40021000 	.word	0x40021000

080016a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e2f9      	b.n	8001cae <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2201      	movs	r2, #1
 80016c0:	4013      	ands	r3, r2
 80016c2:	d100      	bne.n	80016c6 <HAL_RCC_OscConfig+0x1e>
 80016c4:	e07c      	b.n	80017c0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016c6:	4bc3      	ldr	r3, [pc, #780]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2238      	movs	r2, #56	; 0x38
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016d0:	4bc0      	ldr	r3, [pc, #768]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2203      	movs	r2, #3
 80016d6:	4013      	ands	r3, r2
 80016d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	2b10      	cmp	r3, #16
 80016de:	d102      	bne.n	80016e6 <HAL_RCC_OscConfig+0x3e>
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d002      	beq.n	80016ec <HAL_RCC_OscConfig+0x44>
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	d10b      	bne.n	8001704 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ec:	4bb9      	ldr	r3, [pc, #740]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	029b      	lsls	r3, r3, #10
 80016f4:	4013      	ands	r3, r2
 80016f6:	d062      	beq.n	80017be <HAL_RCC_OscConfig+0x116>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d15e      	bne.n	80017be <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e2d4      	b.n	8001cae <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	025b      	lsls	r3, r3, #9
 800170c:	429a      	cmp	r2, r3
 800170e:	d107      	bne.n	8001720 <HAL_RCC_OscConfig+0x78>
 8001710:	4bb0      	ldr	r3, [pc, #704]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4baf      	ldr	r3, [pc, #700]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 8001716:	2180      	movs	r1, #128	; 0x80
 8001718:	0249      	lsls	r1, r1, #9
 800171a:	430a      	orrs	r2, r1
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	e020      	b.n	8001762 <HAL_RCC_OscConfig+0xba>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	23a0      	movs	r3, #160	; 0xa0
 8001726:	02db      	lsls	r3, r3, #11
 8001728:	429a      	cmp	r2, r3
 800172a:	d10e      	bne.n	800174a <HAL_RCC_OscConfig+0xa2>
 800172c:	4ba9      	ldr	r3, [pc, #676]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4ba8      	ldr	r3, [pc, #672]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 8001732:	2180      	movs	r1, #128	; 0x80
 8001734:	02c9      	lsls	r1, r1, #11
 8001736:	430a      	orrs	r2, r1
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	4ba6      	ldr	r3, [pc, #664]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4ba5      	ldr	r3, [pc, #660]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 8001740:	2180      	movs	r1, #128	; 0x80
 8001742:	0249      	lsls	r1, r1, #9
 8001744:	430a      	orrs	r2, r1
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	e00b      	b.n	8001762 <HAL_RCC_OscConfig+0xba>
 800174a:	4ba2      	ldr	r3, [pc, #648]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	4ba1      	ldr	r3, [pc, #644]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 8001750:	49a1      	ldr	r1, [pc, #644]	; (80019d8 <HAL_RCC_OscConfig+0x330>)
 8001752:	400a      	ands	r2, r1
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	4b9f      	ldr	r3, [pc, #636]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	4b9e      	ldr	r3, [pc, #632]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 800175c:	499f      	ldr	r1, [pc, #636]	; (80019dc <HAL_RCC_OscConfig+0x334>)
 800175e:	400a      	ands	r2, r1
 8001760:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d014      	beq.n	8001794 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176a:	f7ff fbd3 	bl	8000f14 <HAL_GetTick>
 800176e:	0003      	movs	r3, r0
 8001770:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001774:	f7ff fbce 	bl	8000f14 <HAL_GetTick>
 8001778:	0002      	movs	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b64      	cmp	r3, #100	; 0x64
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e293      	b.n	8001cae <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001786:	4b93      	ldr	r3, [pc, #588]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	029b      	lsls	r3, r3, #10
 800178e:	4013      	ands	r3, r2
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0xcc>
 8001792:	e015      	b.n	80017c0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff fbbe 	bl	8000f14 <HAL_GetTick>
 8001798:	0003      	movs	r3, r0
 800179a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800179e:	f7ff fbb9 	bl	8000f14 <HAL_GetTick>
 80017a2:	0002      	movs	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b64      	cmp	r3, #100	; 0x64
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e27e      	b.n	8001cae <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017b0:	4b88      	ldr	r3, [pc, #544]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	029b      	lsls	r3, r3, #10
 80017b8:	4013      	ands	r3, r2
 80017ba:	d1f0      	bne.n	800179e <HAL_RCC_OscConfig+0xf6>
 80017bc:	e000      	b.n	80017c0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017be:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2202      	movs	r2, #2
 80017c6:	4013      	ands	r3, r2
 80017c8:	d100      	bne.n	80017cc <HAL_RCC_OscConfig+0x124>
 80017ca:	e099      	b.n	8001900 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017cc:	4b81      	ldr	r3, [pc, #516]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	2238      	movs	r2, #56	; 0x38
 80017d2:	4013      	ands	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017d6:	4b7f      	ldr	r3, [pc, #508]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	2203      	movs	r2, #3
 80017dc:	4013      	ands	r3, r2
 80017de:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	2b10      	cmp	r3, #16
 80017e4:	d102      	bne.n	80017ec <HAL_RCC_OscConfig+0x144>
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d002      	beq.n	80017f2 <HAL_RCC_OscConfig+0x14a>
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d135      	bne.n	800185e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017f2:	4b78      	ldr	r3, [pc, #480]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	2380      	movs	r3, #128	; 0x80
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	4013      	ands	r3, r2
 80017fc:	d005      	beq.n	800180a <HAL_RCC_OscConfig+0x162>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e251      	b.n	8001cae <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180a:	4b72      	ldr	r3, [pc, #456]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	4a74      	ldr	r2, [pc, #464]	; (80019e0 <HAL_RCC_OscConfig+0x338>)
 8001810:	4013      	ands	r3, r2
 8001812:	0019      	movs	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	021a      	lsls	r2, r3, #8
 800181a:	4b6e      	ldr	r3, [pc, #440]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 800181c:	430a      	orrs	r2, r1
 800181e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d112      	bne.n	800184c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001826:	4b6b      	ldr	r3, [pc, #428]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a6e      	ldr	r2, [pc, #440]	; (80019e4 <HAL_RCC_OscConfig+0x33c>)
 800182c:	4013      	ands	r3, r2
 800182e:	0019      	movs	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	691a      	ldr	r2, [r3, #16]
 8001834:	4b67      	ldr	r3, [pc, #412]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 8001836:	430a      	orrs	r2, r1
 8001838:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800183a:	4b66      	ldr	r3, [pc, #408]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	0adb      	lsrs	r3, r3, #11
 8001840:	2207      	movs	r2, #7
 8001842:	4013      	ands	r3, r2
 8001844:	4a68      	ldr	r2, [pc, #416]	; (80019e8 <HAL_RCC_OscConfig+0x340>)
 8001846:	40da      	lsrs	r2, r3
 8001848:	4b68      	ldr	r3, [pc, #416]	; (80019ec <HAL_RCC_OscConfig+0x344>)
 800184a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800184c:	4b68      	ldr	r3, [pc, #416]	; (80019f0 <HAL_RCC_OscConfig+0x348>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	0018      	movs	r0, r3
 8001852:	f7ff f8b7 	bl	80009c4 <HAL_InitTick>
 8001856:	1e03      	subs	r3, r0, #0
 8001858:	d051      	beq.n	80018fe <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e227      	b.n	8001cae <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d030      	beq.n	80018c8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001866:	4b5b      	ldr	r3, [pc, #364]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a5e      	ldr	r2, [pc, #376]	; (80019e4 <HAL_RCC_OscConfig+0x33c>)
 800186c:	4013      	ands	r3, r2
 800186e:	0019      	movs	r1, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	691a      	ldr	r2, [r3, #16]
 8001874:	4b57      	ldr	r3, [pc, #348]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 8001876:	430a      	orrs	r2, r1
 8001878:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800187a:	4b56      	ldr	r3, [pc, #344]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4b55      	ldr	r3, [pc, #340]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 8001880:	2180      	movs	r1, #128	; 0x80
 8001882:	0049      	lsls	r1, r1, #1
 8001884:	430a      	orrs	r2, r1
 8001886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001888:	f7ff fb44 	bl	8000f14 <HAL_GetTick>
 800188c:	0003      	movs	r3, r0
 800188e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001892:	f7ff fb3f 	bl	8000f14 <HAL_GetTick>
 8001896:	0002      	movs	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e204      	b.n	8001cae <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018a4:	4b4b      	ldr	r3, [pc, #300]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	2380      	movs	r3, #128	; 0x80
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	4013      	ands	r3, r2
 80018ae:	d0f0      	beq.n	8001892 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b0:	4b48      	ldr	r3, [pc, #288]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	4a4a      	ldr	r2, [pc, #296]	; (80019e0 <HAL_RCC_OscConfig+0x338>)
 80018b6:	4013      	ands	r3, r2
 80018b8:	0019      	movs	r1, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	021a      	lsls	r2, r3, #8
 80018c0:	4b44      	ldr	r3, [pc, #272]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 80018c2:	430a      	orrs	r2, r1
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	e01b      	b.n	8001900 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80018c8:	4b42      	ldr	r3, [pc, #264]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b41      	ldr	r3, [pc, #260]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 80018ce:	4949      	ldr	r1, [pc, #292]	; (80019f4 <HAL_RCC_OscConfig+0x34c>)
 80018d0:	400a      	ands	r2, r1
 80018d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d4:	f7ff fb1e 	bl	8000f14 <HAL_GetTick>
 80018d8:	0003      	movs	r3, r0
 80018da:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018de:	f7ff fb19 	bl	8000f14 <HAL_GetTick>
 80018e2:	0002      	movs	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e1de      	b.n	8001cae <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018f0:	4b38      	ldr	r3, [pc, #224]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	4013      	ands	r3, r2
 80018fa:	d1f0      	bne.n	80018de <HAL_RCC_OscConfig+0x236>
 80018fc:	e000      	b.n	8001900 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018fe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2208      	movs	r2, #8
 8001906:	4013      	ands	r3, r2
 8001908:	d047      	beq.n	800199a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800190a:	4b32      	ldr	r3, [pc, #200]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	2238      	movs	r2, #56	; 0x38
 8001910:	4013      	ands	r3, r2
 8001912:	2b18      	cmp	r3, #24
 8001914:	d10a      	bne.n	800192c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001916:	4b2f      	ldr	r3, [pc, #188]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 8001918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191a:	2202      	movs	r2, #2
 800191c:	4013      	ands	r3, r2
 800191e:	d03c      	beq.n	800199a <HAL_RCC_OscConfig+0x2f2>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d138      	bne.n	800199a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e1c0      	b.n	8001cae <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d019      	beq.n	8001968 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001934:	4b27      	ldr	r3, [pc, #156]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 8001936:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001938:	4b26      	ldr	r3, [pc, #152]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 800193a:	2101      	movs	r1, #1
 800193c:	430a      	orrs	r2, r1
 800193e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7ff fae8 	bl	8000f14 <HAL_GetTick>
 8001944:	0003      	movs	r3, r0
 8001946:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194a:	f7ff fae3 	bl	8000f14 <HAL_GetTick>
 800194e:	0002      	movs	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e1a8      	b.n	8001cae <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800195c:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 800195e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001960:	2202      	movs	r2, #2
 8001962:	4013      	ands	r3, r2
 8001964:	d0f1      	beq.n	800194a <HAL_RCC_OscConfig+0x2a2>
 8001966:	e018      	b.n	800199a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001968:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 800196a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800196c:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 800196e:	2101      	movs	r1, #1
 8001970:	438a      	bics	r2, r1
 8001972:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001974:	f7ff face 	bl	8000f14 <HAL_GetTick>
 8001978:	0003      	movs	r3, r0
 800197a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800197e:	f7ff fac9 	bl	8000f14 <HAL_GetTick>
 8001982:	0002      	movs	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e18e      	b.n	8001cae <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001990:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 8001992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001994:	2202      	movs	r2, #2
 8001996:	4013      	ands	r3, r2
 8001998:	d1f1      	bne.n	800197e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2204      	movs	r2, #4
 80019a0:	4013      	ands	r3, r2
 80019a2:	d100      	bne.n	80019a6 <HAL_RCC_OscConfig+0x2fe>
 80019a4:	e0c6      	b.n	8001b34 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019a6:	231f      	movs	r3, #31
 80019a8:	18fb      	adds	r3, r7, r3
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2238      	movs	r2, #56	; 0x38
 80019b4:	4013      	ands	r3, r2
 80019b6:	2b20      	cmp	r3, #32
 80019b8:	d11e      	bne.n	80019f8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <HAL_RCC_OscConfig+0x32c>)
 80019bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019be:	2202      	movs	r2, #2
 80019c0:	4013      	ands	r3, r2
 80019c2:	d100      	bne.n	80019c6 <HAL_RCC_OscConfig+0x31e>
 80019c4:	e0b6      	b.n	8001b34 <HAL_RCC_OscConfig+0x48c>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d000      	beq.n	80019d0 <HAL_RCC_OscConfig+0x328>
 80019ce:	e0b1      	b.n	8001b34 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e16c      	b.n	8001cae <HAL_RCC_OscConfig+0x606>
 80019d4:	40021000 	.word	0x40021000
 80019d8:	fffeffff 	.word	0xfffeffff
 80019dc:	fffbffff 	.word	0xfffbffff
 80019e0:	ffff80ff 	.word	0xffff80ff
 80019e4:	ffffc7ff 	.word	0xffffc7ff
 80019e8:	00f42400 	.word	0x00f42400
 80019ec:	20000000 	.word	0x20000000
 80019f0:	20000004 	.word	0x20000004
 80019f4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019f8:	4baf      	ldr	r3, [pc, #700]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 80019fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	055b      	lsls	r3, r3, #21
 8001a00:	4013      	ands	r3, r2
 8001a02:	d101      	bne.n	8001a08 <HAL_RCC_OscConfig+0x360>
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <HAL_RCC_OscConfig+0x362>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d011      	beq.n	8001a32 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	4baa      	ldr	r3, [pc, #680]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001a10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a12:	4ba9      	ldr	r3, [pc, #676]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001a14:	2180      	movs	r1, #128	; 0x80
 8001a16:	0549      	lsls	r1, r1, #21
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a1c:	4ba6      	ldr	r3, [pc, #664]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001a1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a20:	2380      	movs	r3, #128	; 0x80
 8001a22:	055b      	lsls	r3, r3, #21
 8001a24:	4013      	ands	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001a2a:	231f      	movs	r3, #31
 8001a2c:	18fb      	adds	r3, r7, r3
 8001a2e:	2201      	movs	r2, #1
 8001a30:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a32:	4ba2      	ldr	r3, [pc, #648]	; (8001cbc <HAL_RCC_OscConfig+0x614>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	2380      	movs	r3, #128	; 0x80
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d11a      	bne.n	8001a74 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a3e:	4b9f      	ldr	r3, [pc, #636]	; (8001cbc <HAL_RCC_OscConfig+0x614>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	4b9e      	ldr	r3, [pc, #632]	; (8001cbc <HAL_RCC_OscConfig+0x614>)
 8001a44:	2180      	movs	r1, #128	; 0x80
 8001a46:	0049      	lsls	r1, r1, #1
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fa62 	bl	8000f14 <HAL_GetTick>
 8001a50:	0003      	movs	r3, r0
 8001a52:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a56:	f7ff fa5d 	bl	8000f14 <HAL_GetTick>
 8001a5a:	0002      	movs	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e122      	b.n	8001cae <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a68:	4b94      	ldr	r3, [pc, #592]	; (8001cbc <HAL_RCC_OscConfig+0x614>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	4013      	ands	r3, r2
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d106      	bne.n	8001a8a <HAL_RCC_OscConfig+0x3e2>
 8001a7c:	4b8e      	ldr	r3, [pc, #568]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001a7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a80:	4b8d      	ldr	r3, [pc, #564]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001a82:	2101      	movs	r1, #1
 8001a84:	430a      	orrs	r2, r1
 8001a86:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a88:	e01c      	b.n	8001ac4 <HAL_RCC_OscConfig+0x41c>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	2b05      	cmp	r3, #5
 8001a90:	d10c      	bne.n	8001aac <HAL_RCC_OscConfig+0x404>
 8001a92:	4b89      	ldr	r3, [pc, #548]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001a94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a96:	4b88      	ldr	r3, [pc, #544]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001a98:	2104      	movs	r1, #4
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a9e:	4b86      	ldr	r3, [pc, #536]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001aa0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001aa2:	4b85      	ldr	r3, [pc, #532]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001aaa:	e00b      	b.n	8001ac4 <HAL_RCC_OscConfig+0x41c>
 8001aac:	4b82      	ldr	r3, [pc, #520]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001aae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ab0:	4b81      	ldr	r3, [pc, #516]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	438a      	bics	r2, r1
 8001ab6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ab8:	4b7f      	ldr	r3, [pc, #508]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001aba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001abc:	4b7e      	ldr	r3, [pc, #504]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001abe:	2104      	movs	r1, #4
 8001ac0:	438a      	bics	r2, r1
 8001ac2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d014      	beq.n	8001af6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001acc:	f7ff fa22 	bl	8000f14 <HAL_GetTick>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ad4:	e009      	b.n	8001aea <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad6:	f7ff fa1d 	bl	8000f14 <HAL_GetTick>
 8001ada:	0002      	movs	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	4a77      	ldr	r2, [pc, #476]	; (8001cc0 <HAL_RCC_OscConfig+0x618>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e0e1      	b.n	8001cae <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aea:	4b73      	ldr	r3, [pc, #460]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aee:	2202      	movs	r2, #2
 8001af0:	4013      	ands	r3, r2
 8001af2:	d0f0      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x42e>
 8001af4:	e013      	b.n	8001b1e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af6:	f7ff fa0d 	bl	8000f14 <HAL_GetTick>
 8001afa:	0003      	movs	r3, r0
 8001afc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001afe:	e009      	b.n	8001b14 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b00:	f7ff fa08 	bl	8000f14 <HAL_GetTick>
 8001b04:	0002      	movs	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	4a6d      	ldr	r2, [pc, #436]	; (8001cc0 <HAL_RCC_OscConfig+0x618>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e0cc      	b.n	8001cae <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b14:	4b68      	ldr	r3, [pc, #416]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b18:	2202      	movs	r2, #2
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001b1e:	231f      	movs	r3, #31
 8001b20:	18fb      	adds	r3, r7, r3
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d105      	bne.n	8001b34 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001b28:	4b63      	ldr	r3, [pc, #396]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001b2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b2c:	4b62      	ldr	r3, [pc, #392]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001b2e:	4965      	ldr	r1, [pc, #404]	; (8001cc4 <HAL_RCC_OscConfig+0x61c>)
 8001b30:	400a      	ands	r2, r1
 8001b32:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69db      	ldr	r3, [r3, #28]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d100      	bne.n	8001b3e <HAL_RCC_OscConfig+0x496>
 8001b3c:	e0b6      	b.n	8001cac <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b3e:	4b5e      	ldr	r3, [pc, #376]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2238      	movs	r2, #56	; 0x38
 8001b44:	4013      	ands	r3, r2
 8001b46:	2b10      	cmp	r3, #16
 8001b48:	d100      	bne.n	8001b4c <HAL_RCC_OscConfig+0x4a4>
 8001b4a:	e07e      	b.n	8001c4a <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d153      	bne.n	8001bfc <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b54:	4b58      	ldr	r3, [pc, #352]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b57      	ldr	r3, [pc, #348]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001b5a:	495b      	ldr	r1, [pc, #364]	; (8001cc8 <HAL_RCC_OscConfig+0x620>)
 8001b5c:	400a      	ands	r2, r1
 8001b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b60:	f7ff f9d8 	bl	8000f14 <HAL_GetTick>
 8001b64:	0003      	movs	r3, r0
 8001b66:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6a:	f7ff f9d3 	bl	8000f14 <HAL_GetTick>
 8001b6e:	0002      	movs	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e098      	b.n	8001cae <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b7c:	4b4e      	ldr	r3, [pc, #312]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	049b      	lsls	r3, r3, #18
 8001b84:	4013      	ands	r3, r2
 8001b86:	d1f0      	bne.n	8001b6a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b88:	4b4b      	ldr	r3, [pc, #300]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	4a4f      	ldr	r2, [pc, #316]	; (8001ccc <HAL_RCC_OscConfig+0x624>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	0019      	movs	r1, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a1a      	ldr	r2, [r3, #32]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba0:	021b      	lsls	r3, r3, #8
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	4b41      	ldr	r3, [pc, #260]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bb6:	4b40      	ldr	r3, [pc, #256]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	4b3f      	ldr	r3, [pc, #252]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001bbc:	2180      	movs	r1, #128	; 0x80
 8001bbe:	0449      	lsls	r1, r1, #17
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001bc4:	4b3c      	ldr	r3, [pc, #240]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	4b3b      	ldr	r3, [pc, #236]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001bca:	2180      	movs	r1, #128	; 0x80
 8001bcc:	0549      	lsls	r1, r1, #21
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd2:	f7ff f99f 	bl	8000f14 <HAL_GetTick>
 8001bd6:	0003      	movs	r3, r0
 8001bd8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bdc:	f7ff f99a 	bl	8000f14 <HAL_GetTick>
 8001be0:	0002      	movs	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e05f      	b.n	8001cae <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bee:	4b32      	ldr	r3, [pc, #200]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	2380      	movs	r3, #128	; 0x80
 8001bf4:	049b      	lsls	r3, r3, #18
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0x534>
 8001bfa:	e057      	b.n	8001cac <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfc:	4b2e      	ldr	r3, [pc, #184]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001c02:	4931      	ldr	r1, [pc, #196]	; (8001cc8 <HAL_RCC_OscConfig+0x620>)
 8001c04:	400a      	ands	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001c08:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001c0a:	68da      	ldr	r2, [r3, #12]
 8001c0c:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001c0e:	2103      	movs	r1, #3
 8001c10:	438a      	bics	r2, r1
 8001c12:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001c14:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001c1a:	492d      	ldr	r1, [pc, #180]	; (8001cd0 <HAL_RCC_OscConfig+0x628>)
 8001c1c:	400a      	ands	r2, r1
 8001c1e:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c20:	f7ff f978 	bl	8000f14 <HAL_GetTick>
 8001c24:	0003      	movs	r3, r0
 8001c26:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2a:	f7ff f973 	bl	8000f14 <HAL_GetTick>
 8001c2e:	0002      	movs	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e038      	b.n	8001cae <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c3c:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	049b      	lsls	r3, r3, #18
 8001c44:	4013      	ands	r3, r2
 8001c46:	d1f0      	bne.n	8001c2a <HAL_RCC_OscConfig+0x582>
 8001c48:	e030      	b.n	8001cac <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d101      	bne.n	8001c56 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e02b      	b.n	8001cae <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001c56:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	2203      	movs	r2, #3
 8001c60:	401a      	ands	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d11e      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2270      	movs	r2, #112	; 0x70
 8001c6e:	401a      	ands	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d117      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	23fe      	movs	r3, #254	; 0xfe
 8001c7c:	01db      	lsls	r3, r3, #7
 8001c7e:	401a      	ands	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c84:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d10e      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	23f8      	movs	r3, #248	; 0xf8
 8001c8e:	039b      	lsls	r3, r3, #14
 8001c90:	401a      	ands	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d106      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	0f5b      	lsrs	r3, r3, #29
 8001c9e:	075a      	lsls	r2, r3, #29
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d001      	beq.n	8001cac <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	0018      	movs	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	b008      	add	sp, #32
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40007000 	.word	0x40007000
 8001cc0:	00001388 	.word	0x00001388
 8001cc4:	efffffff 	.word	0xefffffff
 8001cc8:	feffffff 	.word	0xfeffffff
 8001ccc:	1fc1808c 	.word	0x1fc1808c
 8001cd0:	effeffff 	.word	0xeffeffff

08001cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e0e9      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce8:	4b76      	ldr	r3, [pc, #472]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2207      	movs	r2, #7
 8001cee:	4013      	ands	r3, r2
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d91e      	bls.n	8001d34 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf6:	4b73      	ldr	r3, [pc, #460]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2207      	movs	r2, #7
 8001cfc:	4393      	bics	r3, r2
 8001cfe:	0019      	movs	r1, r3
 8001d00:	4b70      	ldr	r3, [pc, #448]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d08:	f7ff f904 	bl	8000f14 <HAL_GetTick>
 8001d0c:	0003      	movs	r3, r0
 8001d0e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d10:	e009      	b.n	8001d26 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d12:	f7ff f8ff 	bl	8000f14 <HAL_GetTick>
 8001d16:	0002      	movs	r2, r0
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	4a6a      	ldr	r2, [pc, #424]	; (8001ec8 <HAL_RCC_ClockConfig+0x1f4>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e0ca      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d26:	4b67      	ldr	r3, [pc, #412]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2207      	movs	r2, #7
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d1ee      	bne.n	8001d12 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2202      	movs	r2, #2
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d015      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2204      	movs	r2, #4
 8001d44:	4013      	ands	r3, r2
 8001d46:	d006      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d48:	4b60      	ldr	r3, [pc, #384]	; (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	4b5f      	ldr	r3, [pc, #380]	; (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001d4e:	21e0      	movs	r1, #224	; 0xe0
 8001d50:	01c9      	lsls	r1, r1, #7
 8001d52:	430a      	orrs	r2, r1
 8001d54:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d56:	4b5d      	ldr	r3, [pc, #372]	; (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	4a5d      	ldr	r2, [pc, #372]	; (8001ed0 <HAL_RCC_ClockConfig+0x1fc>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	0019      	movs	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	4b59      	ldr	r3, [pc, #356]	; (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001d66:	430a      	orrs	r2, r1
 8001d68:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	4013      	ands	r3, r2
 8001d72:	d057      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d107      	bne.n	8001d8c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d7c:	4b53      	ldr	r3, [pc, #332]	; (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	2380      	movs	r3, #128	; 0x80
 8001d82:	029b      	lsls	r3, r3, #10
 8001d84:	4013      	ands	r3, r2
 8001d86:	d12b      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e097      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d107      	bne.n	8001da4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d94:	4b4d      	ldr	r3, [pc, #308]	; (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	049b      	lsls	r3, r3, #18
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d11f      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e08b      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d107      	bne.n	8001dbc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dac:	4b47      	ldr	r3, [pc, #284]	; (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4013      	ands	r3, r2
 8001db6:	d113      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e07f      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d106      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dc4:	4b41      	ldr	r3, [pc, #260]	; (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc8:	2202      	movs	r2, #2
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d108      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e074      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dd2:	4b3e      	ldr	r3, [pc, #248]	; (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e06d      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001de0:	4b3a      	ldr	r3, [pc, #232]	; (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2207      	movs	r2, #7
 8001de6:	4393      	bics	r3, r2
 8001de8:	0019      	movs	r1, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	4b37      	ldr	r3, [pc, #220]	; (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001df0:	430a      	orrs	r2, r1
 8001df2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001df4:	f7ff f88e 	bl	8000f14 <HAL_GetTick>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfc:	e009      	b.n	8001e12 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfe:	f7ff f889 	bl	8000f14 <HAL_GetTick>
 8001e02:	0002      	movs	r2, r0
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	4a2f      	ldr	r2, [pc, #188]	; (8001ec8 <HAL_RCC_ClockConfig+0x1f4>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e054      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e12:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2238      	movs	r2, #56	; 0x38
 8001e18:	401a      	ands	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d1ec      	bne.n	8001dfe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e24:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2207      	movs	r2, #7
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d21e      	bcs.n	8001e70 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e32:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2207      	movs	r2, #7
 8001e38:	4393      	bics	r3, r2
 8001e3a:	0019      	movs	r1, r3
 8001e3c:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e44:	f7ff f866 	bl	8000f14 <HAL_GetTick>
 8001e48:	0003      	movs	r3, r0
 8001e4a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e4c:	e009      	b.n	8001e62 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e4e:	f7ff f861 	bl	8000f14 <HAL_GetTick>
 8001e52:	0002      	movs	r2, r0
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	4a1b      	ldr	r2, [pc, #108]	; (8001ec8 <HAL_RCC_ClockConfig+0x1f4>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e02c      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e62:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2207      	movs	r2, #7
 8001e68:	4013      	ands	r3, r2
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d1ee      	bne.n	8001e4e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2204      	movs	r2, #4
 8001e76:	4013      	ands	r3, r2
 8001e78:	d009      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e7a:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	4a15      	ldr	r2, [pc, #84]	; (8001ed4 <HAL_RCC_ClockConfig+0x200>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	0019      	movs	r1, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e8e:	f000 f829 	bl	8001ee4 <HAL_RCC_GetSysClockFreq>
 8001e92:	0001      	movs	r1, r0
 8001e94:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	220f      	movs	r2, #15
 8001e9c:	401a      	ands	r2, r3
 8001e9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <HAL_RCC_ClockConfig+0x204>)
 8001ea0:	0092      	lsls	r2, r2, #2
 8001ea2:	58d3      	ldr	r3, [r2, r3]
 8001ea4:	221f      	movs	r2, #31
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	000a      	movs	r2, r1
 8001eaa:	40da      	lsrs	r2, r3
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_RCC_ClockConfig+0x208>)
 8001eae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_RCC_ClockConfig+0x20c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f7fe fd85 	bl	80009c4 <HAL_InitTick>
 8001eba:	0003      	movs	r3, r0
}
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	b004      	add	sp, #16
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40022000 	.word	0x40022000
 8001ec8:	00001388 	.word	0x00001388
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	fffff0ff 	.word	0xfffff0ff
 8001ed4:	ffff8fff 	.word	0xffff8fff
 8001ed8:	080045a8 	.word	0x080045a8
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	20000004 	.word	0x20000004

08001ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eea:	4b3c      	ldr	r3, [pc, #240]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2238      	movs	r2, #56	; 0x38
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d10f      	bne.n	8001f14 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001ef4:	4b39      	ldr	r3, [pc, #228]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	0adb      	lsrs	r3, r3, #11
 8001efa:	2207      	movs	r2, #7
 8001efc:	4013      	ands	r3, r2
 8001efe:	2201      	movs	r2, #1
 8001f00:	409a      	lsls	r2, r3
 8001f02:	0013      	movs	r3, r2
 8001f04:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001f06:	6839      	ldr	r1, [r7, #0]
 8001f08:	4835      	ldr	r0, [pc, #212]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f0a:	f7fe f8f9 	bl	8000100 <__udivsi3>
 8001f0e:	0003      	movs	r3, r0
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	e05d      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f14:	4b31      	ldr	r3, [pc, #196]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2238      	movs	r2, #56	; 0x38
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d102      	bne.n	8001f26 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f20:	4b30      	ldr	r3, [pc, #192]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	e054      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f26:	4b2d      	ldr	r3, [pc, #180]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2238      	movs	r2, #56	; 0x38
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b10      	cmp	r3, #16
 8001f30:	d138      	bne.n	8001fa4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001f32:	4b2a      	ldr	r3, [pc, #168]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	2203      	movs	r2, #3
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f3c:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	091b      	lsrs	r3, r3, #4
 8001f42:	2207      	movs	r2, #7
 8001f44:	4013      	ands	r3, r2
 8001f46:	3301      	adds	r3, #1
 8001f48:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d10d      	bne.n	8001f6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f50:	68b9      	ldr	r1, [r7, #8]
 8001f52:	4824      	ldr	r0, [pc, #144]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f54:	f7fe f8d4 	bl	8000100 <__udivsi3>
 8001f58:	0003      	movs	r3, r0
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	4b1f      	ldr	r3, [pc, #124]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	0a1b      	lsrs	r3, r3, #8
 8001f62:	227f      	movs	r2, #127	; 0x7f
 8001f64:	4013      	ands	r3, r2
 8001f66:	434b      	muls	r3, r1
 8001f68:	617b      	str	r3, [r7, #20]
        break;
 8001f6a:	e00d      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	481c      	ldr	r0, [pc, #112]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f70:	f7fe f8c6 	bl	8000100 <__udivsi3>
 8001f74:	0003      	movs	r3, r0
 8001f76:	0019      	movs	r1, r3
 8001f78:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	227f      	movs	r2, #127	; 0x7f
 8001f80:	4013      	ands	r3, r2
 8001f82:	434b      	muls	r3, r1
 8001f84:	617b      	str	r3, [r7, #20]
        break;
 8001f86:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001f88:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	0f5b      	lsrs	r3, r3, #29
 8001f8e:	2207      	movs	r2, #7
 8001f90:	4013      	ands	r3, r2
 8001f92:	3301      	adds	r3, #1
 8001f94:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	6978      	ldr	r0, [r7, #20]
 8001f9a:	f7fe f8b1 	bl	8000100 <__udivsi3>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	e015      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001fa4:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2238      	movs	r2, #56	; 0x38
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b20      	cmp	r3, #32
 8001fae:	d103      	bne.n	8001fb8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	e00b      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001fb8:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	2238      	movs	r2, #56	; 0x38
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	2b18      	cmp	r3, #24
 8001fc2:	d103      	bne.n	8001fcc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001fc4:	23fa      	movs	r3, #250	; 0xfa
 8001fc6:	01db      	lsls	r3, r3, #7
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	e001      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001fd0:	693b      	ldr	r3, [r7, #16]
}
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	b006      	add	sp, #24
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	00f42400 	.word	0x00f42400
 8001fe4:	007a1200 	.word	0x007a1200

08001fe8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fec:	4b02      	ldr	r3, [pc, #8]	; (8001ff8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	20000000 	.word	0x20000000

08001ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ffc:	b5b0      	push	{r4, r5, r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002000:	f7ff fff2 	bl	8001fe8 <HAL_RCC_GetHCLKFreq>
 8002004:	0004      	movs	r4, r0
 8002006:	f7ff fb43 	bl	8001690 <LL_RCC_GetAPB1Prescaler>
 800200a:	0003      	movs	r3, r0
 800200c:	0b1a      	lsrs	r2, r3, #12
 800200e:	4b05      	ldr	r3, [pc, #20]	; (8002024 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002010:	0092      	lsls	r2, r2, #2
 8002012:	58d3      	ldr	r3, [r2, r3]
 8002014:	221f      	movs	r2, #31
 8002016:	4013      	ands	r3, r2
 8002018:	40dc      	lsrs	r4, r3
 800201a:	0023      	movs	r3, r4
}
 800201c:	0018      	movs	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	bdb0      	pop	{r4, r5, r7, pc}
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	080045e8 	.word	0x080045e8

08002028 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2207      	movs	r2, #7
 8002036:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002038:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <HAL_RCC_GetClockConfig+0x4c>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2207      	movs	r2, #7
 800203e:	401a      	ands	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_RCC_GetClockConfig+0x4c>)
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	23f0      	movs	r3, #240	; 0xf0
 800204a:	011b      	lsls	r3, r3, #4
 800204c:	401a      	ands	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8002052:	4b08      	ldr	r3, [pc, #32]	; (8002074 <HAL_RCC_GetClockConfig+0x4c>)
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	23e0      	movs	r3, #224	; 0xe0
 8002058:	01db      	lsls	r3, r3, #7
 800205a:	401a      	ands	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_RCC_GetClockConfig+0x50>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2207      	movs	r2, #7
 8002066:	401a      	ands	r2, r3
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	601a      	str	r2, [r3, #0]
}
 800206c:	46c0      	nop			; (mov r8, r8)
 800206e:	46bd      	mov	sp, r7
 8002070:	b002      	add	sp, #8
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40021000 	.word	0x40021000
 8002078:	40022000 	.word	0x40022000

0800207c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002084:	2313      	movs	r3, #19
 8002086:	18fb      	adds	r3, r7, r3
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800208c:	2312      	movs	r3, #18
 800208e:	18fb      	adds	r3, r7, r3
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	2380      	movs	r3, #128	; 0x80
 800209a:	029b      	lsls	r3, r3, #10
 800209c:	4013      	ands	r3, r2
 800209e:	d100      	bne.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80020a0:	e0a3      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a2:	2011      	movs	r0, #17
 80020a4:	183b      	adds	r3, r7, r0
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020aa:	4b86      	ldr	r3, [pc, #536]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020ae:	2380      	movs	r3, #128	; 0x80
 80020b0:	055b      	lsls	r3, r3, #21
 80020b2:	4013      	ands	r3, r2
 80020b4:	d110      	bne.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b6:	4b83      	ldr	r3, [pc, #524]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020ba:	4b82      	ldr	r3, [pc, #520]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020bc:	2180      	movs	r1, #128	; 0x80
 80020be:	0549      	lsls	r1, r1, #21
 80020c0:	430a      	orrs	r2, r1
 80020c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80020c4:	4b7f      	ldr	r3, [pc, #508]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020c8:	2380      	movs	r3, #128	; 0x80
 80020ca:	055b      	lsls	r3, r3, #21
 80020cc:	4013      	ands	r3, r2
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d2:	183b      	adds	r3, r7, r0
 80020d4:	2201      	movs	r2, #1
 80020d6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020d8:	4b7b      	ldr	r3, [pc, #492]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4b7a      	ldr	r3, [pc, #488]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80020de:	2180      	movs	r1, #128	; 0x80
 80020e0:	0049      	lsls	r1, r1, #1
 80020e2:	430a      	orrs	r2, r1
 80020e4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020e6:	f7fe ff15 	bl	8000f14 <HAL_GetTick>
 80020ea:	0003      	movs	r3, r0
 80020ec:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020ee:	e00b      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f0:	f7fe ff10 	bl	8000f14 <HAL_GetTick>
 80020f4:	0002      	movs	r2, r0
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d904      	bls.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80020fe:	2313      	movs	r3, #19
 8002100:	18fb      	adds	r3, r7, r3
 8002102:	2203      	movs	r2, #3
 8002104:	701a      	strb	r2, [r3, #0]
        break;
 8002106:	e005      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002108:	4b6f      	ldr	r3, [pc, #444]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4013      	ands	r3, r2
 8002112:	d0ed      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002114:	2313      	movs	r3, #19
 8002116:	18fb      	adds	r3, r7, r3
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d154      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800211e:	4b69      	ldr	r3, [pc, #420]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002120:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002122:	23c0      	movs	r3, #192	; 0xc0
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4013      	ands	r3, r2
 8002128:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d019      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	429a      	cmp	r2, r3
 8002138:	d014      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800213a:	4b62      	ldr	r3, [pc, #392]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800213c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213e:	4a63      	ldr	r2, [pc, #396]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002140:	4013      	ands	r3, r2
 8002142:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002144:	4b5f      	ldr	r3, [pc, #380]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002146:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002148:	4b5e      	ldr	r3, [pc, #376]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800214a:	2180      	movs	r1, #128	; 0x80
 800214c:	0249      	lsls	r1, r1, #9
 800214e:	430a      	orrs	r2, r1
 8002150:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002152:	4b5c      	ldr	r3, [pc, #368]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002154:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002156:	4b5b      	ldr	r3, [pc, #364]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002158:	495d      	ldr	r1, [pc, #372]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800215a:	400a      	ands	r2, r1
 800215c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800215e:	4b59      	ldr	r3, [pc, #356]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	2201      	movs	r2, #1
 8002168:	4013      	ands	r3, r2
 800216a:	d016      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216c:	f7fe fed2 	bl	8000f14 <HAL_GetTick>
 8002170:	0003      	movs	r3, r0
 8002172:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002174:	e00c      	b.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002176:	f7fe fecd 	bl	8000f14 <HAL_GetTick>
 800217a:	0002      	movs	r2, r0
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	4a54      	ldr	r2, [pc, #336]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d904      	bls.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002186:	2313      	movs	r3, #19
 8002188:	18fb      	adds	r3, r7, r3
 800218a:	2203      	movs	r2, #3
 800218c:	701a      	strb	r2, [r3, #0]
            break;
 800218e:	e004      	b.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002190:	4b4c      	ldr	r3, [pc, #304]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002194:	2202      	movs	r2, #2
 8002196:	4013      	ands	r3, r2
 8002198:	d0ed      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800219a:	2313      	movs	r3, #19
 800219c:	18fb      	adds	r3, r7, r3
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10a      	bne.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021a4:	4b47      	ldr	r3, [pc, #284]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a8:	4a48      	ldr	r2, [pc, #288]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	0019      	movs	r1, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	699a      	ldr	r2, [r3, #24]
 80021b2:	4b44      	ldr	r3, [pc, #272]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021b4:	430a      	orrs	r2, r1
 80021b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80021b8:	e00c      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021ba:	2312      	movs	r3, #18
 80021bc:	18fb      	adds	r3, r7, r3
 80021be:	2213      	movs	r2, #19
 80021c0:	18ba      	adds	r2, r7, r2
 80021c2:	7812      	ldrb	r2, [r2, #0]
 80021c4:	701a      	strb	r2, [r3, #0]
 80021c6:	e005      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021c8:	2312      	movs	r3, #18
 80021ca:	18fb      	adds	r3, r7, r3
 80021cc:	2213      	movs	r2, #19
 80021ce:	18ba      	adds	r2, r7, r2
 80021d0:	7812      	ldrb	r2, [r2, #0]
 80021d2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021d4:	2311      	movs	r3, #17
 80021d6:	18fb      	adds	r3, r7, r3
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d105      	bne.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021de:	4b39      	ldr	r3, [pc, #228]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021e2:	4b38      	ldr	r3, [pc, #224]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021e4:	493c      	ldr	r1, [pc, #240]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80021e6:	400a      	ands	r2, r1
 80021e8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2201      	movs	r2, #1
 80021f0:	4013      	ands	r3, r2
 80021f2:	d009      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021f4:	4b33      	ldr	r3, [pc, #204]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f8:	2203      	movs	r2, #3
 80021fa:	4393      	bics	r3, r2
 80021fc:	0019      	movs	r1, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	4b30      	ldr	r3, [pc, #192]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002204:	430a      	orrs	r2, r1
 8002206:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2202      	movs	r2, #2
 800220e:	4013      	ands	r3, r2
 8002210:	d009      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002212:	4b2c      	ldr	r3, [pc, #176]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002216:	220c      	movs	r2, #12
 8002218:	4393      	bics	r3, r2
 800221a:	0019      	movs	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	4b28      	ldr	r3, [pc, #160]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002222:	430a      	orrs	r2, r1
 8002224:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2220      	movs	r2, #32
 800222c:	4013      	ands	r3, r2
 800222e:	d009      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002230:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002234:	4a29      	ldr	r2, [pc, #164]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002236:	4013      	ands	r3, r2
 8002238:	0019      	movs	r1, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	4b21      	ldr	r3, [pc, #132]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002240:	430a      	orrs	r2, r1
 8002242:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	01db      	lsls	r3, r3, #7
 800224c:	4013      	ands	r3, r2
 800224e:	d015      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002250:	4b1c      	ldr	r3, [pc, #112]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	0899      	lsrs	r1, r3, #2
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800225e:	430a      	orrs	r2, r1
 8002260:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	695a      	ldr	r2, [r3, #20]
 8002266:	2380      	movs	r3, #128	; 0x80
 8002268:	05db      	lsls	r3, r3, #23
 800226a:	429a      	cmp	r2, r3
 800226c:	d106      	bne.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800226e:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002274:	2180      	movs	r1, #128	; 0x80
 8002276:	0249      	lsls	r1, r1, #9
 8002278:	430a      	orrs	r2, r1
 800227a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	2380      	movs	r3, #128	; 0x80
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	4013      	ands	r3, r2
 8002286:	d016      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002288:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800228a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228c:	4a14      	ldr	r2, [pc, #80]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800228e:	4013      	ands	r3, r2
 8002290:	0019      	movs	r1, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002298:	430a      	orrs	r2, r1
 800229a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	691a      	ldr	r2, [r3, #16]
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	01db      	lsls	r3, r3, #7
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d106      	bne.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022aa:	68da      	ldr	r2, [r3, #12]
 80022ac:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022ae:	2180      	movs	r1, #128	; 0x80
 80022b0:	0249      	lsls	r1, r1, #9
 80022b2:	430a      	orrs	r2, r1
 80022b4:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80022b6:	2312      	movs	r3, #18
 80022b8:	18fb      	adds	r3, r7, r3
 80022ba:	781b      	ldrb	r3, [r3, #0]
}
 80022bc:	0018      	movs	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	b006      	add	sp, #24
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40007000 	.word	0x40007000
 80022cc:	fffffcff 	.word	0xfffffcff
 80022d0:	fffeffff 	.word	0xfffeffff
 80022d4:	00001388 	.word	0x00001388
 80022d8:	efffffff 	.word	0xefffffff
 80022dc:	ffffcfff 	.word	0xffffcfff
 80022e0:	ffff3fff 	.word	0xffff3fff

080022e4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80022e4:	b5b0      	push	{r4, r5, r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80022ec:	230f      	movs	r3, #15
 80022ee:	18fb      	adds	r3, r7, r3
 80022f0:	2201      	movs	r2, #1
 80022f2:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d100      	bne.n	80022fc <HAL_RTC_Init+0x18>
 80022fa:	e080      	b.n	80023fe <HAL_RTC_Init+0x11a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2229      	movs	r2, #41	; 0x29
 8002300:	5c9b      	ldrb	r3, [r3, r2]
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10b      	bne.n	8002320 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2228      	movs	r2, #40	; 0x28
 800230c:	2100      	movs	r1, #0
 800230e:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2288      	movs	r2, #136	; 0x88
 8002314:	0212      	lsls	r2, r2, #8
 8002316:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	0018      	movs	r0, r3
 800231c:	f7fe fa7a 	bl	8000814 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2229      	movs	r2, #41	; 0x29
 8002324:	2102      	movs	r1, #2
 8002326:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	22ca      	movs	r2, #202	; 0xca
 800232e:	625a      	str	r2, [r3, #36]	; 0x24
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2253      	movs	r2, #83	; 0x53
 8002336:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002338:	250f      	movs	r5, #15
 800233a:	197c      	adds	r4, r7, r5
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	0018      	movs	r0, r3
 8002340:	f000 f9c7 	bl	80026d2 <RTC_EnterInitMode>
 8002344:	0003      	movs	r3, r0
 8002346:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 8002348:	0028      	movs	r0, r5
 800234a:	183b      	adds	r3, r7, r0
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d148      	bne.n	80023e4 <HAL_RTC_Init+0x100>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	699a      	ldr	r2, [r3, #24]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	492b      	ldr	r1, [pc, #172]	; (800240c <HAL_RTC_Init+0x128>)
 800235e:	400a      	ands	r2, r1
 8002360:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6999      	ldr	r1, [r3, #24]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6912      	ldr	r2, [r2, #16]
 8002388:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6919      	ldr	r1, [r3, #16]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	041a      	lsls	r2, r3, #16
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800239e:	0005      	movs	r5, r0
 80023a0:	183c      	adds	r4, r7, r0
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	0018      	movs	r0, r3
 80023a6:	f000 f9d7 	bl	8002758 <RTC_ExitInitMode>
 80023aa:	0003      	movs	r3, r0
 80023ac:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 80023ae:	197b      	adds	r3, r7, r5
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d116      	bne.n	80023e4 <HAL_RTC_Init+0x100>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	699a      	ldr	r2, [r3, #24]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	00d2      	lsls	r2, r2, #3
 80023c2:	08d2      	lsrs	r2, r2, #3
 80023c4:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6999      	ldr	r1, [r3, #24]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	22ff      	movs	r2, #255	; 0xff
 80023ea:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80023ec:	230f      	movs	r3, #15
 80023ee:	18fb      	adds	r3, r7, r3
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d103      	bne.n	80023fe <HAL_RTC_Init+0x11a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2229      	movs	r2, #41	; 0x29
 80023fa:	2101      	movs	r1, #1
 80023fc:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80023fe:	230f      	movs	r3, #15
 8002400:	18fb      	adds	r3, r7, r3
 8002402:	781b      	ldrb	r3, [r3, #0]
}
 8002404:	0018      	movs	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	b004      	add	sp, #16
 800240a:	bdb0      	pop	{r4, r5, r7, pc}
 800240c:	fb8fffbf 	.word	0xfb8fffbf

08002410 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002410:	b5b0      	push	{r4, r5, r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2228      	movs	r2, #40	; 0x28
 8002420:	5c9b      	ldrb	r3, [r3, r2]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d101      	bne.n	800242a <HAL_RTC_SetTime+0x1a>
 8002426:	2302      	movs	r3, #2
 8002428:	e092      	b.n	8002550 <HAL_RTC_SetTime+0x140>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2228      	movs	r2, #40	; 0x28
 800242e:	2101      	movs	r1, #1
 8002430:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2229      	movs	r2, #41	; 0x29
 8002436:	2102      	movs	r1, #2
 8002438:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	22ca      	movs	r2, #202	; 0xca
 8002440:	625a      	str	r2, [r3, #36]	; 0x24
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2253      	movs	r2, #83	; 0x53
 8002448:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800244a:	2513      	movs	r5, #19
 800244c:	197c      	adds	r4, r7, r5
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	0018      	movs	r0, r3
 8002452:	f000 f93e 	bl	80026d2 <RTC_EnterInitMode>
 8002456:	0003      	movs	r3, r0
 8002458:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800245a:	197b      	adds	r3, r7, r5
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d162      	bne.n	8002528 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d125      	bne.n	80024b4 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	2240      	movs	r2, #64	; 0x40
 8002470:	4013      	ands	r3, r2
 8002472:	d102      	bne.n	800247a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2200      	movs	r2, #0
 8002478:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	0018      	movs	r0, r3
 8002480:	f000 f9ae 	bl	80027e0 <RTC_ByteToBcd2>
 8002484:	0003      	movs	r3, r0
 8002486:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	785b      	ldrb	r3, [r3, #1]
 800248c:	0018      	movs	r0, r3
 800248e:	f000 f9a7 	bl	80027e0 <RTC_ByteToBcd2>
 8002492:	0003      	movs	r3, r0
 8002494:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002496:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	789b      	ldrb	r3, [r3, #2]
 800249c:	0018      	movs	r0, r3
 800249e:	f000 f99f 	bl	80027e0 <RTC_ByteToBcd2>
 80024a2:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80024a4:	0022      	movs	r2, r4
 80024a6:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	78db      	ldrb	r3, [r3, #3]
 80024ac:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80024ae:	4313      	orrs	r3, r2
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	e017      	b.n	80024e4 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	2240      	movs	r2, #64	; 0x40
 80024bc:	4013      	ands	r3, r2
 80024be:	d102      	bne.n	80024c6 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2200      	movs	r2, #0
 80024c4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	785b      	ldrb	r3, [r3, #1]
 80024d0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80024d2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80024d8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	78db      	ldrb	r3, [r3, #3]
 80024de:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80024e0:	4313      	orrs	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	491b      	ldr	r1, [pc, #108]	; (8002558 <HAL_RTC_SetTime+0x148>)
 80024ec:	400a      	ands	r2, r1
 80024ee:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699a      	ldr	r2, [r3, #24]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4918      	ldr	r1, [pc, #96]	; (800255c <HAL_RTC_SetTime+0x14c>)
 80024fc:	400a      	ands	r2, r1
 80024fe:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6999      	ldr	r1, [r3, #24]
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	431a      	orrs	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002518:	2313      	movs	r3, #19
 800251a:	18fc      	adds	r4, r7, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	0018      	movs	r0, r3
 8002520:	f000 f91a 	bl	8002758 <RTC_ExitInitMode>
 8002524:	0003      	movs	r3, r0
 8002526:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	22ff      	movs	r2, #255	; 0xff
 800252e:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8002530:	2313      	movs	r3, #19
 8002532:	18fb      	adds	r3, r7, r3
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d103      	bne.n	8002542 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2229      	movs	r2, #41	; 0x29
 800253e:	2101      	movs	r1, #1
 8002540:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2228      	movs	r2, #40	; 0x28
 8002546:	2100      	movs	r1, #0
 8002548:	5499      	strb	r1, [r3, r2]

  return status;
 800254a:	2313      	movs	r3, #19
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	781b      	ldrb	r3, [r3, #0]
}
 8002550:	0018      	movs	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	b006      	add	sp, #24
 8002556:	bdb0      	pop	{r4, r5, r7, pc}
 8002558:	007f7f7f 	.word	0x007f7f7f
 800255c:	fffbffff 	.word	0xfffbffff

08002560 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002560:	b5b0      	push	{r4, r5, r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2228      	movs	r2, #40	; 0x28
 8002570:	5c9b      	ldrb	r3, [r3, r2]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d101      	bne.n	800257a <HAL_RTC_SetDate+0x1a>
 8002576:	2302      	movs	r3, #2
 8002578:	e07e      	b.n	8002678 <HAL_RTC_SetDate+0x118>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2228      	movs	r2, #40	; 0x28
 800257e:	2101      	movs	r1, #1
 8002580:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2229      	movs	r2, #41	; 0x29
 8002586:	2102      	movs	r1, #2
 8002588:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10e      	bne.n	80025ae <HAL_RTC_SetDate+0x4e>
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	785b      	ldrb	r3, [r3, #1]
 8002594:	001a      	movs	r2, r3
 8002596:	2310      	movs	r3, #16
 8002598:	4013      	ands	r3, r2
 800259a:	d008      	beq.n	80025ae <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	785b      	ldrb	r3, [r3, #1]
 80025a0:	2210      	movs	r2, #16
 80025a2:	4393      	bics	r3, r2
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	330a      	adds	r3, #10
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d11c      	bne.n	80025ee <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	78db      	ldrb	r3, [r3, #3]
 80025b8:	0018      	movs	r0, r3
 80025ba:	f000 f911 	bl	80027e0 <RTC_ByteToBcd2>
 80025be:	0003      	movs	r3, r0
 80025c0:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	785b      	ldrb	r3, [r3, #1]
 80025c6:	0018      	movs	r0, r3
 80025c8:	f000 f90a 	bl	80027e0 <RTC_ByteToBcd2>
 80025cc:	0003      	movs	r3, r0
 80025ce:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80025d0:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	789b      	ldrb	r3, [r3, #2]
 80025d6:	0018      	movs	r0, r3
 80025d8:	f000 f902 	bl	80027e0 <RTC_ByteToBcd2>
 80025dc:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80025de:	0022      	movs	r2, r4
 80025e0:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80025e8:	4313      	orrs	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	e00e      	b.n	800260c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	78db      	ldrb	r3, [r3, #3]
 80025f2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	785b      	ldrb	r3, [r3, #1]
 80025f8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80025fa:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002600:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002608:	4313      	orrs	r3, r2
 800260a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	22ca      	movs	r2, #202	; 0xca
 8002612:	625a      	str	r2, [r3, #36]	; 0x24
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2253      	movs	r2, #83	; 0x53
 800261a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800261c:	2513      	movs	r5, #19
 800261e:	197c      	adds	r4, r7, r5
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	0018      	movs	r0, r3
 8002624:	f000 f855 	bl	80026d2 <RTC_EnterInitMode>
 8002628:	0003      	movs	r3, r0
 800262a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800262c:	0028      	movs	r0, r5
 800262e:	183b      	adds	r3, r7, r0
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10c      	bne.n	8002650 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	4910      	ldr	r1, [pc, #64]	; (8002680 <HAL_RTC_SetDate+0x120>)
 800263e:	400a      	ands	r2, r1
 8002640:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002642:	183c      	adds	r4, r7, r0
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	0018      	movs	r0, r3
 8002648:	f000 f886 	bl	8002758 <RTC_ExitInitMode>
 800264c:	0003      	movs	r3, r0
 800264e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	22ff      	movs	r2, #255	; 0xff
 8002656:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002658:	2313      	movs	r3, #19
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d103      	bne.n	800266a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2229      	movs	r2, #41	; 0x29
 8002666:	2101      	movs	r1, #1
 8002668:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2228      	movs	r2, #40	; 0x28
 800266e:	2100      	movs	r1, #0
 8002670:	5499      	strb	r1, [r3, r2]

  return status;
 8002672:	2313      	movs	r3, #19
 8002674:	18fb      	adds	r3, r7, r3
 8002676:	781b      	ldrb	r3, [r3, #0]
}
 8002678:	0018      	movs	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	b006      	add	sp, #24
 800267e:	bdb0      	pop	{r4, r5, r7, pc}
 8002680:	00ffff3f 	.word	0x00ffff3f

08002684 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	21a0      	movs	r1, #160	; 0xa0
 8002698:	438a      	bics	r2, r1
 800269a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800269c:	f7fe fc3a 	bl	8000f14 <HAL_GetTick>
 80026a0:	0003      	movs	r3, r0
 80026a2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80026a4:	e00a      	b.n	80026bc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80026a6:	f7fe fc35 	bl	8000f14 <HAL_GetTick>
 80026aa:	0002      	movs	r2, r0
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	1ad2      	subs	r2, r2, r3
 80026b0:	23fa      	movs	r3, #250	; 0xfa
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d901      	bls.n	80026bc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e006      	b.n	80026ca <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	2220      	movs	r2, #32
 80026c4:	4013      	ands	r3, r2
 80026c6:	d0ee      	beq.n	80026a6 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	0018      	movs	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b004      	add	sp, #16
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b084      	sub	sp, #16
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80026da:	230f      	movs	r3, #15
 80026dc:	18fb      	adds	r3, r7, r3
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	2240      	movs	r2, #64	; 0x40
 80026ea:	4013      	ands	r3, r2
 80026ec:	d12c      	bne.n	8002748 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2180      	movs	r1, #128	; 0x80
 80026fa:	430a      	orrs	r2, r1
 80026fc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80026fe:	f7fe fc09 	bl	8000f14 <HAL_GetTick>
 8002702:	0003      	movs	r3, r0
 8002704:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002706:	e014      	b.n	8002732 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002708:	f7fe fc04 	bl	8000f14 <HAL_GetTick>
 800270c:	0002      	movs	r2, r0
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	1ad2      	subs	r2, r2, r3
 8002712:	200f      	movs	r0, #15
 8002714:	183b      	adds	r3, r7, r0
 8002716:	1839      	adds	r1, r7, r0
 8002718:	7809      	ldrb	r1, [r1, #0]
 800271a:	7019      	strb	r1, [r3, #0]
 800271c:	23fa      	movs	r3, #250	; 0xfa
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	429a      	cmp	r2, r3
 8002722:	d906      	bls.n	8002732 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8002724:	183b      	adds	r3, r7, r0
 8002726:	2203      	movs	r2, #3
 8002728:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2229      	movs	r2, #41	; 0x29
 800272e:	2103      	movs	r1, #3
 8002730:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	2240      	movs	r2, #64	; 0x40
 800273a:	4013      	ands	r3, r2
 800273c:	d104      	bne.n	8002748 <RTC_EnterInitMode+0x76>
 800273e:	230f      	movs	r3, #15
 8002740:	18fb      	adds	r3, r7, r3
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b03      	cmp	r3, #3
 8002746:	d1df      	bne.n	8002708 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002748:	230f      	movs	r3, #15
 800274a:	18fb      	adds	r3, r7, r3
 800274c:	781b      	ldrb	r3, [r3, #0]
}
 800274e:	0018      	movs	r0, r3
 8002750:	46bd      	mov	sp, r7
 8002752:	b004      	add	sp, #16
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002758:	b590      	push	{r4, r7, lr}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002760:	240f      	movs	r4, #15
 8002762:	193b      	adds	r3, r7, r4
 8002764:	2200      	movs	r2, #0
 8002766:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002768:	4b1c      	ldr	r3, [pc, #112]	; (80027dc <RTC_ExitInitMode+0x84>)
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <RTC_ExitInitMode+0x84>)
 800276e:	2180      	movs	r1, #128	; 0x80
 8002770:	438a      	bics	r2, r1
 8002772:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002774:	4b19      	ldr	r3, [pc, #100]	; (80027dc <RTC_ExitInitMode+0x84>)
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	2220      	movs	r2, #32
 800277a:	4013      	ands	r3, r2
 800277c:	d10d      	bne.n	800279a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	0018      	movs	r0, r3
 8002782:	f7ff ff7f 	bl	8002684 <HAL_RTC_WaitForSynchro>
 8002786:	1e03      	subs	r3, r0, #0
 8002788:	d021      	beq.n	80027ce <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2229      	movs	r2, #41	; 0x29
 800278e:	2103      	movs	r1, #3
 8002790:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002792:	193b      	adds	r3, r7, r4
 8002794:	2203      	movs	r2, #3
 8002796:	701a      	strb	r2, [r3, #0]
 8002798:	e019      	b.n	80027ce <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800279a:	4b10      	ldr	r3, [pc, #64]	; (80027dc <RTC_ExitInitMode+0x84>)
 800279c:	699a      	ldr	r2, [r3, #24]
 800279e:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <RTC_ExitInitMode+0x84>)
 80027a0:	2120      	movs	r1, #32
 80027a2:	438a      	bics	r2, r1
 80027a4:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	0018      	movs	r0, r3
 80027aa:	f7ff ff6b 	bl	8002684 <HAL_RTC_WaitForSynchro>
 80027ae:	1e03      	subs	r3, r0, #0
 80027b0:	d007      	beq.n	80027c2 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2229      	movs	r2, #41	; 0x29
 80027b6:	2103      	movs	r1, #3
 80027b8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80027ba:	230f      	movs	r3, #15
 80027bc:	18fb      	adds	r3, r7, r3
 80027be:	2203      	movs	r2, #3
 80027c0:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <RTC_ExitInitMode+0x84>)
 80027c4:	699a      	ldr	r2, [r3, #24]
 80027c6:	4b05      	ldr	r3, [pc, #20]	; (80027dc <RTC_ExitInitMode+0x84>)
 80027c8:	2120      	movs	r1, #32
 80027ca:	430a      	orrs	r2, r1
 80027cc:	619a      	str	r2, [r3, #24]
  }

  return status;
 80027ce:	230f      	movs	r3, #15
 80027d0:	18fb      	adds	r3, r7, r3
 80027d2:	781b      	ldrb	r3, [r3, #0]
}
 80027d4:	0018      	movs	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	b005      	add	sp, #20
 80027da:	bd90      	pop	{r4, r7, pc}
 80027dc:	40002800 	.word	0x40002800

080027e0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	0002      	movs	r2, r0
 80027e8:	1dfb      	adds	r3, r7, #7
 80027ea:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80027f0:	230b      	movs	r3, #11
 80027f2:	18fb      	adds	r3, r7, r3
 80027f4:	1dfa      	adds	r2, r7, #7
 80027f6:	7812      	ldrb	r2, [r2, #0]
 80027f8:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80027fa:	e008      	b.n	800280e <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	3301      	adds	r3, #1
 8002800:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002802:	220b      	movs	r2, #11
 8002804:	18bb      	adds	r3, r7, r2
 8002806:	18ba      	adds	r2, r7, r2
 8002808:	7812      	ldrb	r2, [r2, #0]
 800280a:	3a0a      	subs	r2, #10
 800280c:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800280e:	210b      	movs	r1, #11
 8002810:	187b      	adds	r3, r7, r1
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b09      	cmp	r3, #9
 8002816:	d8f1      	bhi.n	80027fc <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	b2da      	uxtb	r2, r3
 8002820:	187b      	adds	r3, r7, r1
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	4313      	orrs	r3, r2
 8002826:	b2db      	uxtb	r3, r3
}
 8002828:	0018      	movs	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	b004      	add	sp, #16
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e0a8      	b.n	8002994 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	2b00      	cmp	r3, #0
 8002848:	d109      	bne.n	800285e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	2382      	movs	r3, #130	; 0x82
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	429a      	cmp	r2, r3
 8002854:	d009      	beq.n	800286a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	61da      	str	r2, [r3, #28]
 800285c:	e005      	b.n	800286a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	225d      	movs	r2, #93	; 0x5d
 8002874:	5c9b      	ldrb	r3, [r3, r2]
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	d107      	bne.n	800288c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	225c      	movs	r2, #92	; 0x5c
 8002880:	2100      	movs	r1, #0
 8002882:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	0018      	movs	r0, r3
 8002888:	f7fe f828 	bl	80008dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	225d      	movs	r2, #93	; 0x5d
 8002890:	2102      	movs	r1, #2
 8002892:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2140      	movs	r1, #64	; 0x40
 80028a0:	438a      	bics	r2, r1
 80028a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	23e0      	movs	r3, #224	; 0xe0
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d902      	bls.n	80028b6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	e002      	b.n	80028bc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80028b6:	2380      	movs	r3, #128	; 0x80
 80028b8:	015b      	lsls	r3, r3, #5
 80028ba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	23f0      	movs	r3, #240	; 0xf0
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d008      	beq.n	80028da <HAL_SPI_Init+0xaa>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68da      	ldr	r2, [r3, #12]
 80028cc:	23e0      	movs	r3, #224	; 0xe0
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d002      	beq.n	80028da <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	2382      	movs	r3, #130	; 0x82
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	401a      	ands	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6899      	ldr	r1, [r3, #8]
 80028e8:	2384      	movs	r3, #132	; 0x84
 80028ea:	021b      	lsls	r3, r3, #8
 80028ec:	400b      	ands	r3, r1
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	2102      	movs	r1, #2
 80028f6:	400b      	ands	r3, r1
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	2101      	movs	r1, #1
 8002900:	400b      	ands	r3, r1
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6999      	ldr	r1, [r3, #24]
 8002908:	2380      	movs	r3, #128	; 0x80
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	400b      	ands	r3, r1
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	2138      	movs	r1, #56	; 0x38
 8002916:	400b      	ands	r3, r1
 8002918:	431a      	orrs	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	2180      	movs	r1, #128	; 0x80
 8002920:	400b      	ands	r3, r1
 8002922:	431a      	orrs	r2, r3
 8002924:	0011      	movs	r1, r2
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800292a:	2380      	movs	r3, #128	; 0x80
 800292c:	019b      	lsls	r3, r3, #6
 800292e:	401a      	ands	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	0c1b      	lsrs	r3, r3, #16
 800293e:	2204      	movs	r2, #4
 8002940:	401a      	ands	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	2110      	movs	r1, #16
 8002948:	400b      	ands	r3, r1
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002950:	2108      	movs	r1, #8
 8002952:	400b      	ands	r3, r1
 8002954:	431a      	orrs	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68d9      	ldr	r1, [r3, #12]
 800295a:	23f0      	movs	r3, #240	; 0xf0
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	400b      	ands	r3, r1
 8002960:	431a      	orrs	r2, r3
 8002962:	0011      	movs	r1, r2
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	015b      	lsls	r3, r3, #5
 800296a:	401a      	ands	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	69da      	ldr	r2, [r3, #28]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4907      	ldr	r1, [pc, #28]	; (800299c <HAL_SPI_Init+0x16c>)
 8002980:	400a      	ands	r2, r1
 8002982:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	225d      	movs	r2, #93	; 0x5d
 800298e:	2101      	movs	r1, #1
 8002990:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	0018      	movs	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	b004      	add	sp, #16
 800299a:	bd80      	pop	{r7, pc}
 800299c:	fffff7ff 	.word	0xfffff7ff

080029a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e04a      	b.n	8002a48 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	223d      	movs	r2, #61	; 0x3d
 80029b6:	5c9b      	ldrb	r3, [r3, r2]
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d107      	bne.n	80029ce <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	223c      	movs	r2, #60	; 0x3c
 80029c2:	2100      	movs	r1, #0
 80029c4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	0018      	movs	r0, r3
 80029ca:	f7fe f951 	bl	8000c70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	223d      	movs	r2, #61	; 0x3d
 80029d2:	2102      	movs	r1, #2
 80029d4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3304      	adds	r3, #4
 80029de:	0019      	movs	r1, r3
 80029e0:	0010      	movs	r0, r2
 80029e2:	f000 fbff 	bl	80031e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2248      	movs	r2, #72	; 0x48
 80029ea:	2101      	movs	r1, #1
 80029ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	223e      	movs	r2, #62	; 0x3e
 80029f2:	2101      	movs	r1, #1
 80029f4:	5499      	strb	r1, [r3, r2]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	223f      	movs	r2, #63	; 0x3f
 80029fa:	2101      	movs	r1, #1
 80029fc:	5499      	strb	r1, [r3, r2]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2240      	movs	r2, #64	; 0x40
 8002a02:	2101      	movs	r1, #1
 8002a04:	5499      	strb	r1, [r3, r2]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2241      	movs	r2, #65	; 0x41
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	5499      	strb	r1, [r3, r2]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2242      	movs	r2, #66	; 0x42
 8002a12:	2101      	movs	r1, #1
 8002a14:	5499      	strb	r1, [r3, r2]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2243      	movs	r2, #67	; 0x43
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2244      	movs	r2, #68	; 0x44
 8002a22:	2101      	movs	r1, #1
 8002a24:	5499      	strb	r1, [r3, r2]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2245      	movs	r2, #69	; 0x45
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	5499      	strb	r1, [r3, r2]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2246      	movs	r2, #70	; 0x46
 8002a32:	2101      	movs	r1, #1
 8002a34:	5499      	strb	r1, [r3, r2]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2247      	movs	r2, #71	; 0x47
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	223d      	movs	r2, #61	; 0x3d
 8002a42:	2101      	movs	r1, #1
 8002a44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	0018      	movs	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	b002      	add	sp, #8
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	223d      	movs	r2, #61	; 0x3d
 8002a5c:	5c9b      	ldrb	r3, [r3, r2]
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d001      	beq.n	8002a68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e03c      	b.n	8002ae2 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	223d      	movs	r2, #61	; 0x3d
 8002a6c:	2102      	movs	r1, #2
 8002a6e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a19      	ldr	r2, [pc, #100]	; (8002aec <HAL_TIM_Base_Start_IT+0x9c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d009      	beq.n	8002a9e <HAL_TIM_Base_Start_IT+0x4e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a18      	ldr	r2, [pc, #96]	; (8002af0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d004      	beq.n	8002a9e <HAL_TIM_Base_Start_IT+0x4e>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a16      	ldr	r2, [pc, #88]	; (8002af4 <HAL_TIM_Base_Start_IT+0xa4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d116      	bne.n	8002acc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	4a14      	ldr	r2, [pc, #80]	; (8002af8 <HAL_TIM_Base_Start_IT+0xa8>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2b06      	cmp	r3, #6
 8002aae:	d016      	beq.n	8002ade <HAL_TIM_Base_Start_IT+0x8e>
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	2380      	movs	r3, #128	; 0x80
 8002ab4:	025b      	lsls	r3, r3, #9
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d011      	beq.n	8002ade <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aca:	e008      	b.n	8002ade <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	e000      	b.n	8002ae0 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ade:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	b004      	add	sp, #16
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	40012c00 	.word	0x40012c00
 8002af0:	40000400 	.word	0x40000400
 8002af4:	40014000 	.word	0x40014000
 8002af8:	00010007 	.word	0x00010007

08002afc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e04a      	b.n	8002ba4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	223d      	movs	r2, #61	; 0x3d
 8002b12:	5c9b      	ldrb	r3, [r3, r2]
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d107      	bne.n	8002b2a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	223c      	movs	r2, #60	; 0x3c
 8002b1e:	2100      	movs	r1, #0
 8002b20:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	0018      	movs	r0, r3
 8002b26:	f000 f841 	bl	8002bac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	223d      	movs	r2, #61	; 0x3d
 8002b2e:	2102      	movs	r1, #2
 8002b30:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3304      	adds	r3, #4
 8002b3a:	0019      	movs	r1, r3
 8002b3c:	0010      	movs	r0, r2
 8002b3e:	f000 fb51 	bl	80031e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2248      	movs	r2, #72	; 0x48
 8002b46:	2101      	movs	r1, #1
 8002b48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	223e      	movs	r2, #62	; 0x3e
 8002b4e:	2101      	movs	r1, #1
 8002b50:	5499      	strb	r1, [r3, r2]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	223f      	movs	r2, #63	; 0x3f
 8002b56:	2101      	movs	r1, #1
 8002b58:	5499      	strb	r1, [r3, r2]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2240      	movs	r2, #64	; 0x40
 8002b5e:	2101      	movs	r1, #1
 8002b60:	5499      	strb	r1, [r3, r2]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2241      	movs	r2, #65	; 0x41
 8002b66:	2101      	movs	r1, #1
 8002b68:	5499      	strb	r1, [r3, r2]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2242      	movs	r2, #66	; 0x42
 8002b6e:	2101      	movs	r1, #1
 8002b70:	5499      	strb	r1, [r3, r2]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2243      	movs	r2, #67	; 0x43
 8002b76:	2101      	movs	r1, #1
 8002b78:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2244      	movs	r2, #68	; 0x44
 8002b7e:	2101      	movs	r1, #1
 8002b80:	5499      	strb	r1, [r3, r2]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2245      	movs	r2, #69	; 0x45
 8002b86:	2101      	movs	r1, #1
 8002b88:	5499      	strb	r1, [r3, r2]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2246      	movs	r2, #70	; 0x46
 8002b8e:	2101      	movs	r1, #1
 8002b90:	5499      	strb	r1, [r3, r2]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2247      	movs	r2, #71	; 0x47
 8002b96:	2101      	movs	r1, #1
 8002b98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	223d      	movs	r2, #61	; 0x3d
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b002      	add	sp, #8
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bb4:	46c0      	nop			; (mov r8, r8)
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	b002      	add	sp, #8
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	4013      	ands	r3, r2
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d124      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	2202      	movs	r2, #2
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d11d      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2203      	movs	r2, #3
 8002be6:	4252      	negs	r2, r2
 8002be8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2203      	movs	r2, #3
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d004      	beq.n	8002c06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f000 fad8 	bl	80031b4 <HAL_TIM_IC_CaptureCallback>
 8002c04:	e007      	b.n	8002c16 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f000 facb 	bl	80031a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	0018      	movs	r0, r3
 8002c12:	f000 fad7 	bl	80031c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	2204      	movs	r2, #4
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d125      	bne.n	8002c76 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	2204      	movs	r2, #4
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d11e      	bne.n	8002c76 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2205      	movs	r2, #5
 8002c3e:	4252      	negs	r2, r2
 8002c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2202      	movs	r2, #2
 8002c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699a      	ldr	r2, [r3, #24]
 8002c4e:	23c0      	movs	r3, #192	; 0xc0
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4013      	ands	r3, r2
 8002c54:	d004      	beq.n	8002c60 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f000 faab 	bl	80031b4 <HAL_TIM_IC_CaptureCallback>
 8002c5e:	e007      	b.n	8002c70 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	0018      	movs	r0, r3
 8002c64:	f000 fa9e 	bl	80031a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f000 faaa 	bl	80031c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	2208      	movs	r2, #8
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d124      	bne.n	8002cce <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	2208      	movs	r2, #8
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d11d      	bne.n	8002cce <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2209      	movs	r2, #9
 8002c98:	4252      	negs	r2, r2
 8002c9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2204      	movs	r2, #4
 8002ca0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	2203      	movs	r2, #3
 8002caa:	4013      	ands	r3, r2
 8002cac:	d004      	beq.n	8002cb8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f000 fa7f 	bl	80031b4 <HAL_TIM_IC_CaptureCallback>
 8002cb6:	e007      	b.n	8002cc8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f000 fa72 	bl	80031a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	f000 fa7e 	bl	80031c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	2210      	movs	r2, #16
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b10      	cmp	r3, #16
 8002cda:	d125      	bne.n	8002d28 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	2210      	movs	r2, #16
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b10      	cmp	r3, #16
 8002ce8:	d11e      	bne.n	8002d28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2211      	movs	r2, #17
 8002cf0:	4252      	negs	r2, r2
 8002cf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2208      	movs	r2, #8
 8002cf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	69da      	ldr	r2, [r3, #28]
 8002d00:	23c0      	movs	r3, #192	; 0xc0
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4013      	ands	r3, r2
 8002d06:	d004      	beq.n	8002d12 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f000 fa52 	bl	80031b4 <HAL_TIM_IC_CaptureCallback>
 8002d10:	e007      	b.n	8002d22 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	0018      	movs	r0, r3
 8002d16:	f000 fa45 	bl	80031a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f000 fa51 	bl	80031c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	4013      	ands	r3, r2
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d10f      	bne.n	8002d56 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d108      	bne.n	8002d56 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	4252      	negs	r2, r2
 8002d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	0018      	movs	r0, r3
 8002d52:	f7fd fcdb 	bl	800070c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	2280      	movs	r2, #128	; 0x80
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b80      	cmp	r3, #128	; 0x80
 8002d62:	d10f      	bne.n	8002d84 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	2280      	movs	r2, #128	; 0x80
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	2b80      	cmp	r3, #128	; 0x80
 8002d70:	d108      	bne.n	8002d84 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2281      	movs	r2, #129	; 0x81
 8002d78:	4252      	negs	r2, r2
 8002d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f000 ff1c 	bl	8003bbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	691a      	ldr	r2, [r3, #16]
 8002d8a:	2380      	movs	r3, #128	; 0x80
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	401a      	ands	r2, r3
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d10e      	bne.n	8002db6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	2280      	movs	r2, #128	; 0x80
 8002da0:	4013      	ands	r3, r2
 8002da2:	2b80      	cmp	r3, #128	; 0x80
 8002da4:	d107      	bne.n	8002db6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a1c      	ldr	r2, [pc, #112]	; (8002e1c <HAL_TIM_IRQHandler+0x260>)
 8002dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	0018      	movs	r0, r3
 8002db2:	f000 ff0b 	bl	8003bcc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	2240      	movs	r2, #64	; 0x40
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b40      	cmp	r3, #64	; 0x40
 8002dc2:	d10f      	bne.n	8002de4 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	2240      	movs	r2, #64	; 0x40
 8002dcc:	4013      	ands	r3, r2
 8002dce:	2b40      	cmp	r3, #64	; 0x40
 8002dd0:	d108      	bne.n	8002de4 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2241      	movs	r2, #65	; 0x41
 8002dd8:	4252      	negs	r2, r2
 8002dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	0018      	movs	r0, r3
 8002de0:	f000 f9f8 	bl	80031d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	2220      	movs	r2, #32
 8002dec:	4013      	ands	r3, r2
 8002dee:	2b20      	cmp	r3, #32
 8002df0:	d10f      	bne.n	8002e12 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2b20      	cmp	r3, #32
 8002dfe:	d108      	bne.n	8002e12 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2221      	movs	r2, #33	; 0x21
 8002e06:	4252      	negs	r2, r2
 8002e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f000 fecd 	bl	8003bac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	46bd      	mov	sp, r7
 8002e16:	b002      	add	sp, #8
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	fffffeff 	.word	0xfffffeff

08002e20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	223c      	movs	r2, #60	; 0x3c
 8002e30:	5c9b      	ldrb	r3, [r3, r2]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e0df      	b.n	8002ffa <HAL_TIM_PWM_ConfigChannel+0x1da>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	223c      	movs	r2, #60	; 0x3c
 8002e3e:	2101      	movs	r1, #1
 8002e40:	5499      	strb	r1, [r3, r2]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b14      	cmp	r3, #20
 8002e46:	d900      	bls.n	8002e4a <HAL_TIM_PWM_ConfigChannel+0x2a>
 8002e48:	e0d1      	b.n	8002fee <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	009a      	lsls	r2, r3, #2
 8002e4e:	4b6d      	ldr	r3, [pc, #436]	; (8003004 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8002e50:	18d3      	adds	r3, r2, r3
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	0011      	movs	r1, r2
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f000 fa36 	bl	80032d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699a      	ldr	r2, [r3, #24]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2108      	movs	r1, #8
 8002e70:	430a      	orrs	r2, r1
 8002e72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699a      	ldr	r2, [r3, #24]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2104      	movs	r1, #4
 8002e80:	438a      	bics	r2, r1
 8002e82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6999      	ldr	r1, [r3, #24]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	691a      	ldr	r2, [r3, #16]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	619a      	str	r2, [r3, #24]
      break;
 8002e96:	e0ab      	b.n	8002ff0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	0011      	movs	r1, r2
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f000 fa9f 	bl	80033e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	699a      	ldr	r2, [r3, #24]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2180      	movs	r1, #128	; 0x80
 8002eb2:	0109      	lsls	r1, r1, #4
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699a      	ldr	r2, [r3, #24]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4951      	ldr	r1, [pc, #324]	; (8003008 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8002ec4:	400a      	ands	r2, r1
 8002ec6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6999      	ldr	r1, [r3, #24]
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	619a      	str	r2, [r3, #24]
      break;
 8002edc:	e088      	b.n	8002ff0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	0011      	movs	r1, r2
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f000 fb00 	bl	80034ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	69da      	ldr	r2, [r3, #28]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2108      	movs	r1, #8
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	69da      	ldr	r2, [r3, #28]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2104      	movs	r1, #4
 8002f08:	438a      	bics	r2, r1
 8002f0a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	69d9      	ldr	r1, [r3, #28]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	691a      	ldr	r2, [r3, #16]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	61da      	str	r2, [r3, #28]
      break;
 8002f1e:	e067      	b.n	8002ff0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	0011      	movs	r1, r2
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f000 fb67 	bl	80035fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	69da      	ldr	r2, [r3, #28]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2180      	movs	r1, #128	; 0x80
 8002f3a:	0109      	lsls	r1, r1, #4
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	69da      	ldr	r2, [r3, #28]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	492f      	ldr	r1, [pc, #188]	; (8003008 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8002f4c:	400a      	ands	r2, r1
 8002f4e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	69d9      	ldr	r1, [r3, #28]
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	021a      	lsls	r2, r3, #8
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	61da      	str	r2, [r3, #28]
      break;
 8002f64:	e044      	b.n	8002ff0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	0011      	movs	r1, r2
 8002f6e:	0018      	movs	r0, r3
 8002f70:	f000 fbae 	bl	80036d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2108      	movs	r1, #8
 8002f80:	430a      	orrs	r2, r1
 8002f82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2104      	movs	r1, #4
 8002f90:	438a      	bics	r2, r1
 8002f92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	691a      	ldr	r2, [r3, #16]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002fa6:	e023      	b.n	8002ff0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	0011      	movs	r1, r2
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f000 fbed 	bl	8003790 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2180      	movs	r1, #128	; 0x80
 8002fc2:	0109      	lsls	r1, r1, #4
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	490d      	ldr	r1, [pc, #52]	; (8003008 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8002fd4:	400a      	ands	r2, r1
 8002fd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	021a      	lsls	r2, r3, #8
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002fec:	e000      	b.n	8002ff0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 8002fee:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	223c      	movs	r2, #60	; 0x3c
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	b004      	add	sp, #16
 8003000:	bd80      	pop	{r7, pc}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	08004608 	.word	0x08004608
 8003008:	fffffbff 	.word	0xfffffbff

0800300c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	223c      	movs	r2, #60	; 0x3c
 800301a:	5c9b      	ldrb	r3, [r3, r2]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_TIM_ConfigClockSource+0x18>
 8003020:	2302      	movs	r3, #2
 8003022:	e0b7      	b.n	8003194 <HAL_TIM_ConfigClockSource+0x188>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	223c      	movs	r2, #60	; 0x3c
 8003028:	2101      	movs	r1, #1
 800302a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	223d      	movs	r2, #61	; 0x3d
 8003030:	2102      	movs	r1, #2
 8003032:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4a57      	ldr	r2, [pc, #348]	; (800319c <HAL_TIM_ConfigClockSource+0x190>)
 8003040:	4013      	ands	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4a56      	ldr	r2, [pc, #344]	; (80031a0 <HAL_TIM_ConfigClockSource+0x194>)
 8003048:	4013      	ands	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2280      	movs	r2, #128	; 0x80
 800305a:	0192      	lsls	r2, r2, #6
 800305c:	4293      	cmp	r3, r2
 800305e:	d040      	beq.n	80030e2 <HAL_TIM_ConfigClockSource+0xd6>
 8003060:	2280      	movs	r2, #128	; 0x80
 8003062:	0192      	lsls	r2, r2, #6
 8003064:	4293      	cmp	r3, r2
 8003066:	d900      	bls.n	800306a <HAL_TIM_ConfigClockSource+0x5e>
 8003068:	e088      	b.n	800317c <HAL_TIM_ConfigClockSource+0x170>
 800306a:	2280      	movs	r2, #128	; 0x80
 800306c:	0152      	lsls	r2, r2, #5
 800306e:	4293      	cmp	r3, r2
 8003070:	d100      	bne.n	8003074 <HAL_TIM_ConfigClockSource+0x68>
 8003072:	e085      	b.n	8003180 <HAL_TIM_ConfigClockSource+0x174>
 8003074:	2280      	movs	r2, #128	; 0x80
 8003076:	0152      	lsls	r2, r2, #5
 8003078:	4293      	cmp	r3, r2
 800307a:	d900      	bls.n	800307e <HAL_TIM_ConfigClockSource+0x72>
 800307c:	e07e      	b.n	800317c <HAL_TIM_ConfigClockSource+0x170>
 800307e:	2b70      	cmp	r3, #112	; 0x70
 8003080:	d018      	beq.n	80030b4 <HAL_TIM_ConfigClockSource+0xa8>
 8003082:	d900      	bls.n	8003086 <HAL_TIM_ConfigClockSource+0x7a>
 8003084:	e07a      	b.n	800317c <HAL_TIM_ConfigClockSource+0x170>
 8003086:	2b60      	cmp	r3, #96	; 0x60
 8003088:	d04f      	beq.n	800312a <HAL_TIM_ConfigClockSource+0x11e>
 800308a:	d900      	bls.n	800308e <HAL_TIM_ConfigClockSource+0x82>
 800308c:	e076      	b.n	800317c <HAL_TIM_ConfigClockSource+0x170>
 800308e:	2b50      	cmp	r3, #80	; 0x50
 8003090:	d03b      	beq.n	800310a <HAL_TIM_ConfigClockSource+0xfe>
 8003092:	d900      	bls.n	8003096 <HAL_TIM_ConfigClockSource+0x8a>
 8003094:	e072      	b.n	800317c <HAL_TIM_ConfigClockSource+0x170>
 8003096:	2b40      	cmp	r3, #64	; 0x40
 8003098:	d057      	beq.n	800314a <HAL_TIM_ConfigClockSource+0x13e>
 800309a:	d900      	bls.n	800309e <HAL_TIM_ConfigClockSource+0x92>
 800309c:	e06e      	b.n	800317c <HAL_TIM_ConfigClockSource+0x170>
 800309e:	2b30      	cmp	r3, #48	; 0x30
 80030a0:	d063      	beq.n	800316a <HAL_TIM_ConfigClockSource+0x15e>
 80030a2:	d86b      	bhi.n	800317c <HAL_TIM_ConfigClockSource+0x170>
 80030a4:	2b20      	cmp	r3, #32
 80030a6:	d060      	beq.n	800316a <HAL_TIM_ConfigClockSource+0x15e>
 80030a8:	d868      	bhi.n	800317c <HAL_TIM_ConfigClockSource+0x170>
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d05d      	beq.n	800316a <HAL_TIM_ConfigClockSource+0x15e>
 80030ae:	2b10      	cmp	r3, #16
 80030b0:	d05b      	beq.n	800316a <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80030b2:	e063      	b.n	800317c <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	6899      	ldr	r1, [r3, #8]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f000 fc44 	bl	8003950 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2277      	movs	r2, #119	; 0x77
 80030d4:	4313      	orrs	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	609a      	str	r2, [r3, #8]
      break;
 80030e0:	e04f      	b.n	8003182 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	6899      	ldr	r1, [r3, #8]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f000 fc2d 	bl	8003950 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2180      	movs	r1, #128	; 0x80
 8003102:	01c9      	lsls	r1, r1, #7
 8003104:	430a      	orrs	r2, r1
 8003106:	609a      	str	r2, [r3, #8]
      break;
 8003108:	e03b      	b.n	8003182 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	6859      	ldr	r1, [r3, #4]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	001a      	movs	r2, r3
 8003118:	f000 fb9e 	bl	8003858 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2150      	movs	r1, #80	; 0x50
 8003122:	0018      	movs	r0, r3
 8003124:	f000 fbf8 	bl	8003918 <TIM_ITRx_SetConfig>
      break;
 8003128:	e02b      	b.n	8003182 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	6859      	ldr	r1, [r3, #4]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	001a      	movs	r2, r3
 8003138:	f000 fbbc 	bl	80038b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2160      	movs	r1, #96	; 0x60
 8003142:	0018      	movs	r0, r3
 8003144:	f000 fbe8 	bl	8003918 <TIM_ITRx_SetConfig>
      break;
 8003148:	e01b      	b.n	8003182 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6818      	ldr	r0, [r3, #0]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	6859      	ldr	r1, [r3, #4]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	001a      	movs	r2, r3
 8003158:	f000 fb7e 	bl	8003858 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2140      	movs	r1, #64	; 0x40
 8003162:	0018      	movs	r0, r3
 8003164:	f000 fbd8 	bl	8003918 <TIM_ITRx_SetConfig>
      break;
 8003168:	e00b      	b.n	8003182 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	0019      	movs	r1, r3
 8003174:	0010      	movs	r0, r2
 8003176:	f000 fbcf 	bl	8003918 <TIM_ITRx_SetConfig>
        break;
 800317a:	e002      	b.n	8003182 <HAL_TIM_ConfigClockSource+0x176>
      break;
 800317c:	46c0      	nop			; (mov r8, r8)
 800317e:	e000      	b.n	8003182 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8003180:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	223d      	movs	r2, #61	; 0x3d
 8003186:	2101      	movs	r1, #1
 8003188:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	223c      	movs	r2, #60	; 0x3c
 800318e:	2100      	movs	r1, #0
 8003190:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	0018      	movs	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	b004      	add	sp, #16
 800319a:	bd80      	pop	{r7, pc}
 800319c:	ffceff88 	.word	0xffceff88
 80031a0:	ffff00ff 	.word	0xffff00ff

080031a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031ac:	46c0      	nop			; (mov r8, r8)
 80031ae:	46bd      	mov	sp, r7
 80031b0:	b002      	add	sp, #8
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031bc:	46c0      	nop			; (mov r8, r8)
 80031be:	46bd      	mov	sp, r7
 80031c0:	b002      	add	sp, #8
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031cc:	46c0      	nop			; (mov r8, r8)
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b002      	add	sp, #8
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031dc:	46c0      	nop			; (mov r8, r8)
 80031de:	46bd      	mov	sp, r7
 80031e0:	b002      	add	sp, #8
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a2f      	ldr	r2, [pc, #188]	; (80032b4 <TIM_Base_SetConfig+0xd0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d003      	beq.n	8003204 <TIM_Base_SetConfig+0x20>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a2e      	ldr	r2, [pc, #184]	; (80032b8 <TIM_Base_SetConfig+0xd4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d108      	bne.n	8003216 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2270      	movs	r2, #112	; 0x70
 8003208:	4393      	bics	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4313      	orrs	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a26      	ldr	r2, [pc, #152]	; (80032b4 <TIM_Base_SetConfig+0xd0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d013      	beq.n	8003246 <TIM_Base_SetConfig+0x62>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a25      	ldr	r2, [pc, #148]	; (80032b8 <TIM_Base_SetConfig+0xd4>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d00f      	beq.n	8003246 <TIM_Base_SetConfig+0x62>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a24      	ldr	r2, [pc, #144]	; (80032bc <TIM_Base_SetConfig+0xd8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d00b      	beq.n	8003246 <TIM_Base_SetConfig+0x62>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a23      	ldr	r2, [pc, #140]	; (80032c0 <TIM_Base_SetConfig+0xdc>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d007      	beq.n	8003246 <TIM_Base_SetConfig+0x62>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a22      	ldr	r2, [pc, #136]	; (80032c4 <TIM_Base_SetConfig+0xe0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d003      	beq.n	8003246 <TIM_Base_SetConfig+0x62>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a21      	ldr	r2, [pc, #132]	; (80032c8 <TIM_Base_SetConfig+0xe4>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d108      	bne.n	8003258 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	4a20      	ldr	r2, [pc, #128]	; (80032cc <TIM_Base_SetConfig+0xe8>)
 800324a:	4013      	ands	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4313      	orrs	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2280      	movs	r2, #128	; 0x80
 800325c:	4393      	bics	r3, r2
 800325e:	001a      	movs	r2, r3
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	4313      	orrs	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a0c      	ldr	r2, [pc, #48]	; (80032b4 <TIM_Base_SetConfig+0xd0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00b      	beq.n	800329e <TIM_Base_SetConfig+0xba>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a0d      	ldr	r2, [pc, #52]	; (80032c0 <TIM_Base_SetConfig+0xdc>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d007      	beq.n	800329e <TIM_Base_SetConfig+0xba>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a0c      	ldr	r2, [pc, #48]	; (80032c4 <TIM_Base_SetConfig+0xe0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d003      	beq.n	800329e <TIM_Base_SetConfig+0xba>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a0b      	ldr	r2, [pc, #44]	; (80032c8 <TIM_Base_SetConfig+0xe4>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d103      	bne.n	80032a6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	691a      	ldr	r2, [r3, #16]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	615a      	str	r2, [r3, #20]
}
 80032ac:	46c0      	nop			; (mov r8, r8)
 80032ae:	46bd      	mov	sp, r7
 80032b0:	b004      	add	sp, #16
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40012c00 	.word	0x40012c00
 80032b8:	40000400 	.word	0x40000400
 80032bc:	40002000 	.word	0x40002000
 80032c0:	40014000 	.word	0x40014000
 80032c4:	40014400 	.word	0x40014400
 80032c8:	40014800 	.word	0x40014800
 80032cc:	fffffcff 	.word	0xfffffcff

080032d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	2201      	movs	r2, #1
 80032e0:	4393      	bics	r3, r2
 80032e2:	001a      	movs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4a32      	ldr	r2, [pc, #200]	; (80033c8 <TIM_OC1_SetConfig+0xf8>)
 80032fe:	4013      	ands	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2203      	movs	r2, #3
 8003306:	4393      	bics	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	2202      	movs	r2, #2
 8003318:	4393      	bics	r3, r2
 800331a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	4313      	orrs	r3, r2
 8003324:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a28      	ldr	r2, [pc, #160]	; (80033cc <TIM_OC1_SetConfig+0xfc>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00b      	beq.n	8003346 <TIM_OC1_SetConfig+0x76>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a27      	ldr	r2, [pc, #156]	; (80033d0 <TIM_OC1_SetConfig+0x100>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d007      	beq.n	8003346 <TIM_OC1_SetConfig+0x76>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a26      	ldr	r2, [pc, #152]	; (80033d4 <TIM_OC1_SetConfig+0x104>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d003      	beq.n	8003346 <TIM_OC1_SetConfig+0x76>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a25      	ldr	r2, [pc, #148]	; (80033d8 <TIM_OC1_SetConfig+0x108>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d10c      	bne.n	8003360 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2208      	movs	r2, #8
 800334a:	4393      	bics	r3, r2
 800334c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	4313      	orrs	r3, r2
 8003356:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	2204      	movs	r2, #4
 800335c:	4393      	bics	r3, r2
 800335e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a1a      	ldr	r2, [pc, #104]	; (80033cc <TIM_OC1_SetConfig+0xfc>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d00b      	beq.n	8003380 <TIM_OC1_SetConfig+0xb0>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a19      	ldr	r2, [pc, #100]	; (80033d0 <TIM_OC1_SetConfig+0x100>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d007      	beq.n	8003380 <TIM_OC1_SetConfig+0xb0>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a18      	ldr	r2, [pc, #96]	; (80033d4 <TIM_OC1_SetConfig+0x104>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d003      	beq.n	8003380 <TIM_OC1_SetConfig+0xb0>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a17      	ldr	r2, [pc, #92]	; (80033d8 <TIM_OC1_SetConfig+0x108>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d111      	bne.n	80033a4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	4a16      	ldr	r2, [pc, #88]	; (80033dc <TIM_OC1_SetConfig+0x10c>)
 8003384:	4013      	ands	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4a15      	ldr	r2, [pc, #84]	; (80033e0 <TIM_OC1_SetConfig+0x110>)
 800338c:	4013      	ands	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	621a      	str	r2, [r3, #32]
}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b006      	add	sp, #24
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	fffeff8f 	.word	0xfffeff8f
 80033cc:	40012c00 	.word	0x40012c00
 80033d0:	40014000 	.word	0x40014000
 80033d4:	40014400 	.word	0x40014400
 80033d8:	40014800 	.word	0x40014800
 80033dc:	fffffeff 	.word	0xfffffeff
 80033e0:	fffffdff 	.word	0xfffffdff

080033e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	2210      	movs	r2, #16
 80033f4:	4393      	bics	r3, r2
 80033f6:	001a      	movs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4a2e      	ldr	r2, [pc, #184]	; (80034cc <TIM_OC2_SetConfig+0xe8>)
 8003412:	4013      	ands	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4a2d      	ldr	r2, [pc, #180]	; (80034d0 <TIM_OC2_SetConfig+0xec>)
 800341a:	4013      	ands	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	021b      	lsls	r3, r3, #8
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	4313      	orrs	r3, r2
 8003428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2220      	movs	r2, #32
 800342e:	4393      	bics	r3, r2
 8003430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	4313      	orrs	r3, r2
 800343c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a24      	ldr	r2, [pc, #144]	; (80034d4 <TIM_OC2_SetConfig+0xf0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d10d      	bne.n	8003462 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	2280      	movs	r2, #128	; 0x80
 800344a:	4393      	bics	r3, r2
 800344c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	4313      	orrs	r3, r2
 8003458:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2240      	movs	r2, #64	; 0x40
 800345e:	4393      	bics	r3, r2
 8003460:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a1b      	ldr	r2, [pc, #108]	; (80034d4 <TIM_OC2_SetConfig+0xf0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00b      	beq.n	8003482 <TIM_OC2_SetConfig+0x9e>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a1a      	ldr	r2, [pc, #104]	; (80034d8 <TIM_OC2_SetConfig+0xf4>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d007      	beq.n	8003482 <TIM_OC2_SetConfig+0x9e>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a19      	ldr	r2, [pc, #100]	; (80034dc <TIM_OC2_SetConfig+0xf8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d003      	beq.n	8003482 <TIM_OC2_SetConfig+0x9e>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a18      	ldr	r2, [pc, #96]	; (80034e0 <TIM_OC2_SetConfig+0xfc>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d113      	bne.n	80034aa <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	4a17      	ldr	r2, [pc, #92]	; (80034e4 <TIM_OC2_SetConfig+0x100>)
 8003486:	4013      	ands	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	4a16      	ldr	r2, [pc, #88]	; (80034e8 <TIM_OC2_SetConfig+0x104>)
 800348e:	4013      	ands	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4313      	orrs	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	621a      	str	r2, [r3, #32]
}
 80034c4:	46c0      	nop			; (mov r8, r8)
 80034c6:	46bd      	mov	sp, r7
 80034c8:	b006      	add	sp, #24
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	feff8fff 	.word	0xfeff8fff
 80034d0:	fffffcff 	.word	0xfffffcff
 80034d4:	40012c00 	.word	0x40012c00
 80034d8:	40014000 	.word	0x40014000
 80034dc:	40014400 	.word	0x40014400
 80034e0:	40014800 	.word	0x40014800
 80034e4:	fffffbff 	.word	0xfffffbff
 80034e8:	fffff7ff 	.word	0xfffff7ff

080034ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	4a35      	ldr	r2, [pc, #212]	; (80035d0 <TIM_OC3_SetConfig+0xe4>)
 80034fc:	401a      	ands	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4a2f      	ldr	r2, [pc, #188]	; (80035d4 <TIM_OC3_SetConfig+0xe8>)
 8003518:	4013      	ands	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2203      	movs	r2, #3
 8003520:	4393      	bics	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	4a29      	ldr	r2, [pc, #164]	; (80035d8 <TIM_OC3_SetConfig+0xec>)
 8003532:	4013      	ands	r3, r2
 8003534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	021b      	lsls	r3, r3, #8
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	4313      	orrs	r3, r2
 8003540:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a25      	ldr	r2, [pc, #148]	; (80035dc <TIM_OC3_SetConfig+0xf0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d10d      	bne.n	8003566 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	4a24      	ldr	r2, [pc, #144]	; (80035e0 <TIM_OC3_SetConfig+0xf4>)
 800354e:	4013      	ands	r3, r2
 8003550:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	021b      	lsls	r3, r3, #8
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	4313      	orrs	r3, r2
 800355c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	4a20      	ldr	r2, [pc, #128]	; (80035e4 <TIM_OC3_SetConfig+0xf8>)
 8003562:	4013      	ands	r3, r2
 8003564:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a1c      	ldr	r2, [pc, #112]	; (80035dc <TIM_OC3_SetConfig+0xf0>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00b      	beq.n	8003586 <TIM_OC3_SetConfig+0x9a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a1d      	ldr	r2, [pc, #116]	; (80035e8 <TIM_OC3_SetConfig+0xfc>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d007      	beq.n	8003586 <TIM_OC3_SetConfig+0x9a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a1c      	ldr	r2, [pc, #112]	; (80035ec <TIM_OC3_SetConfig+0x100>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d003      	beq.n	8003586 <TIM_OC3_SetConfig+0x9a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a1b      	ldr	r2, [pc, #108]	; (80035f0 <TIM_OC3_SetConfig+0x104>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d113      	bne.n	80035ae <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4a1a      	ldr	r2, [pc, #104]	; (80035f4 <TIM_OC3_SetConfig+0x108>)
 800358a:	4013      	ands	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	4a19      	ldr	r2, [pc, #100]	; (80035f8 <TIM_OC3_SetConfig+0x10c>)
 8003592:	4013      	ands	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	621a      	str	r2, [r3, #32]
}
 80035c8:	46c0      	nop			; (mov r8, r8)
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b006      	add	sp, #24
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	fffffeff 	.word	0xfffffeff
 80035d4:	fffeff8f 	.word	0xfffeff8f
 80035d8:	fffffdff 	.word	0xfffffdff
 80035dc:	40012c00 	.word	0x40012c00
 80035e0:	fffff7ff 	.word	0xfffff7ff
 80035e4:	fffffbff 	.word	0xfffffbff
 80035e8:	40014000 	.word	0x40014000
 80035ec:	40014400 	.word	0x40014400
 80035f0:	40014800 	.word	0x40014800
 80035f4:	ffffefff 	.word	0xffffefff
 80035f8:	ffffdfff 	.word	0xffffdfff

080035fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	4a28      	ldr	r2, [pc, #160]	; (80036ac <TIM_OC4_SetConfig+0xb0>)
 800360c:	401a      	ands	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4a22      	ldr	r2, [pc, #136]	; (80036b0 <TIM_OC4_SetConfig+0xb4>)
 8003628:	4013      	ands	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4a21      	ldr	r2, [pc, #132]	; (80036b4 <TIM_OC4_SetConfig+0xb8>)
 8003630:	4013      	ands	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	021b      	lsls	r3, r3, #8
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	4a1d      	ldr	r2, [pc, #116]	; (80036b8 <TIM_OC4_SetConfig+0xbc>)
 8003644:	4013      	ands	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	031b      	lsls	r3, r3, #12
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a19      	ldr	r2, [pc, #100]	; (80036bc <TIM_OC4_SetConfig+0xc0>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d00b      	beq.n	8003674 <TIM_OC4_SetConfig+0x78>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a18      	ldr	r2, [pc, #96]	; (80036c0 <TIM_OC4_SetConfig+0xc4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d007      	beq.n	8003674 <TIM_OC4_SetConfig+0x78>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a17      	ldr	r2, [pc, #92]	; (80036c4 <TIM_OC4_SetConfig+0xc8>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d003      	beq.n	8003674 <TIM_OC4_SetConfig+0x78>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a16      	ldr	r2, [pc, #88]	; (80036c8 <TIM_OC4_SetConfig+0xcc>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d109      	bne.n	8003688 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	4a15      	ldr	r2, [pc, #84]	; (80036cc <TIM_OC4_SetConfig+0xd0>)
 8003678:	4013      	ands	r3, r2
 800367a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	019b      	lsls	r3, r3, #6
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	4313      	orrs	r3, r2
 8003686:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	621a      	str	r2, [r3, #32]
}
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	46bd      	mov	sp, r7
 80036a6:	b006      	add	sp, #24
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	ffffefff 	.word	0xffffefff
 80036b0:	feff8fff 	.word	0xfeff8fff
 80036b4:	fffffcff 	.word	0xfffffcff
 80036b8:	ffffdfff 	.word	0xffffdfff
 80036bc:	40012c00 	.word	0x40012c00
 80036c0:	40014000 	.word	0x40014000
 80036c4:	40014400 	.word	0x40014400
 80036c8:	40014800 	.word	0x40014800
 80036cc:	ffffbfff 	.word	0xffffbfff

080036d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	4a25      	ldr	r2, [pc, #148]	; (8003774 <TIM_OC5_SetConfig+0xa4>)
 80036e0:	401a      	ands	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4a1f      	ldr	r2, [pc, #124]	; (8003778 <TIM_OC5_SetConfig+0xa8>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	4313      	orrs	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	4a1b      	ldr	r2, [pc, #108]	; (800377c <TIM_OC5_SetConfig+0xac>)
 800370e:	4013      	ands	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	041b      	lsls	r3, r3, #16
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a17      	ldr	r2, [pc, #92]	; (8003780 <TIM_OC5_SetConfig+0xb0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d00b      	beq.n	800373e <TIM_OC5_SetConfig+0x6e>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a16      	ldr	r2, [pc, #88]	; (8003784 <TIM_OC5_SetConfig+0xb4>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d007      	beq.n	800373e <TIM_OC5_SetConfig+0x6e>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a15      	ldr	r2, [pc, #84]	; (8003788 <TIM_OC5_SetConfig+0xb8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d003      	beq.n	800373e <TIM_OC5_SetConfig+0x6e>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a14      	ldr	r2, [pc, #80]	; (800378c <TIM_OC5_SetConfig+0xbc>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d109      	bne.n	8003752 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	4a0c      	ldr	r2, [pc, #48]	; (8003774 <TIM_OC5_SetConfig+0xa4>)
 8003742:	4013      	ands	r3, r2
 8003744:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	021b      	lsls	r3, r3, #8
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	4313      	orrs	r3, r2
 8003750:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	621a      	str	r2, [r3, #32]
}
 800376c:	46c0      	nop			; (mov r8, r8)
 800376e:	46bd      	mov	sp, r7
 8003770:	b006      	add	sp, #24
 8003772:	bd80      	pop	{r7, pc}
 8003774:	fffeffff 	.word	0xfffeffff
 8003778:	fffeff8f 	.word	0xfffeff8f
 800377c:	fffdffff 	.word	0xfffdffff
 8003780:	40012c00 	.word	0x40012c00
 8003784:	40014000 	.word	0x40014000
 8003788:	40014400 	.word	0x40014400
 800378c:	40014800 	.word	0x40014800

08003790 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	4a26      	ldr	r2, [pc, #152]	; (8003838 <TIM_OC6_SetConfig+0xa8>)
 80037a0:	401a      	ands	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4a20      	ldr	r2, [pc, #128]	; (800383c <TIM_OC6_SetConfig+0xac>)
 80037bc:	4013      	ands	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	021b      	lsls	r3, r3, #8
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	4a1c      	ldr	r2, [pc, #112]	; (8003840 <TIM_OC6_SetConfig+0xb0>)
 80037d0:	4013      	ands	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	051b      	lsls	r3, r3, #20
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	4313      	orrs	r3, r2
 80037de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a18      	ldr	r2, [pc, #96]	; (8003844 <TIM_OC6_SetConfig+0xb4>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d00b      	beq.n	8003800 <TIM_OC6_SetConfig+0x70>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a17      	ldr	r2, [pc, #92]	; (8003848 <TIM_OC6_SetConfig+0xb8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d007      	beq.n	8003800 <TIM_OC6_SetConfig+0x70>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a16      	ldr	r2, [pc, #88]	; (800384c <TIM_OC6_SetConfig+0xbc>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d003      	beq.n	8003800 <TIM_OC6_SetConfig+0x70>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a15      	ldr	r2, [pc, #84]	; (8003850 <TIM_OC6_SetConfig+0xc0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d109      	bne.n	8003814 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	4a14      	ldr	r2, [pc, #80]	; (8003854 <TIM_OC6_SetConfig+0xc4>)
 8003804:	4013      	ands	r3, r2
 8003806:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	029b      	lsls	r3, r3, #10
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	4313      	orrs	r3, r2
 8003812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	621a      	str	r2, [r3, #32]
}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	46bd      	mov	sp, r7
 8003832:	b006      	add	sp, #24
 8003834:	bd80      	pop	{r7, pc}
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	ffefffff 	.word	0xffefffff
 800383c:	feff8fff 	.word	0xfeff8fff
 8003840:	ffdfffff 	.word	0xffdfffff
 8003844:	40012c00 	.word	0x40012c00
 8003848:	40014000 	.word	0x40014000
 800384c:	40014400 	.word	0x40014400
 8003850:	40014800 	.word	0x40014800
 8003854:	fffbffff 	.word	0xfffbffff

08003858 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	2201      	movs	r2, #1
 8003870:	4393      	bics	r3, r2
 8003872:	001a      	movs	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	22f0      	movs	r2, #240	; 0xf0
 8003882:	4393      	bics	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	220a      	movs	r2, #10
 8003894:	4393      	bics	r3, r2
 8003896:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	4313      	orrs	r3, r2
 800389e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	621a      	str	r2, [r3, #32]
}
 80038ac:	46c0      	nop			; (mov r8, r8)
 80038ae:	46bd      	mov	sp, r7
 80038b0:	b006      	add	sp, #24
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	2210      	movs	r2, #16
 80038c6:	4393      	bics	r3, r2
 80038c8:	001a      	movs	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	4a0d      	ldr	r2, [pc, #52]	; (8003914 <TIM_TI2_ConfigInputStage+0x60>)
 80038de:	4013      	ands	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	031b      	lsls	r3, r3, #12
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	22a0      	movs	r2, #160	; 0xa0
 80038f0:	4393      	bics	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	621a      	str	r2, [r3, #32]
}
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	46bd      	mov	sp, r7
 800390e:	b006      	add	sp, #24
 8003910:	bd80      	pop	{r7, pc}
 8003912:	46c0      	nop			; (mov r8, r8)
 8003914:	ffff0fff 	.word	0xffff0fff

08003918 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4a08      	ldr	r2, [pc, #32]	; (800394c <TIM_ITRx_SetConfig+0x34>)
 800392c:	4013      	ands	r3, r2
 800392e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4313      	orrs	r3, r2
 8003936:	2207      	movs	r2, #7
 8003938:	4313      	orrs	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	609a      	str	r2, [r3, #8]
}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	46bd      	mov	sp, r7
 8003946:	b004      	add	sp, #16
 8003948:	bd80      	pop	{r7, pc}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	ffcfff8f 	.word	0xffcfff8f

08003950 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
 800395c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	4a09      	ldr	r2, [pc, #36]	; (800398c <TIM_ETR_SetConfig+0x3c>)
 8003968:	4013      	ands	r3, r2
 800396a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	021a      	lsls	r2, r3, #8
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	431a      	orrs	r2, r3
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	4313      	orrs	r3, r2
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	4313      	orrs	r3, r2
 800397c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	609a      	str	r2, [r3, #8]
}
 8003984:	46c0      	nop			; (mov r8, r8)
 8003986:	46bd      	mov	sp, r7
 8003988:	b006      	add	sp, #24
 800398a:	bd80      	pop	{r7, pc}
 800398c:	ffff00ff 	.word	0xffff00ff

08003990 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	223c      	movs	r2, #60	; 0x3c
 800399e:	5c9b      	ldrb	r3, [r3, r2]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e04f      	b.n	8003a48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	223c      	movs	r2, #60	; 0x3c
 80039ac:	2101      	movs	r1, #1
 80039ae:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	223d      	movs	r2, #61	; 0x3d
 80039b4:	2102      	movs	r1, #2
 80039b6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a20      	ldr	r2, [pc, #128]	; (8003a50 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d108      	bne.n	80039e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4a1f      	ldr	r2, [pc, #124]	; (8003a54 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2270      	movs	r2, #112	; 0x70
 80039e8:	4393      	bics	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a13      	ldr	r2, [pc, #76]	; (8003a50 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d009      	beq.n	8003a1c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a12      	ldr	r2, [pc, #72]	; (8003a58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d004      	beq.n	8003a1c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a11      	ldr	r2, [pc, #68]	; (8003a5c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d10c      	bne.n	8003a36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2280      	movs	r2, #128	; 0x80
 8003a20:	4393      	bics	r3, r2
 8003a22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	223d      	movs	r2, #61	; 0x3d
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	223c      	movs	r2, #60	; 0x3c
 8003a42:	2100      	movs	r1, #0
 8003a44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	0018      	movs	r0, r3
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	b004      	add	sp, #16
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40012c00 	.word	0x40012c00
 8003a54:	ff0fffff 	.word	0xff0fffff
 8003a58:	40000400 	.word	0x40000400
 8003a5c:	40014000 	.word	0x40014000

08003a60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	223c      	movs	r2, #60	; 0x3c
 8003a72:	5c9b      	ldrb	r3, [r3, r2]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e079      	b.n	8003b70 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	223c      	movs	r2, #60	; 0x3c
 8003a80:	2101      	movs	r1, #1
 8003a82:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	22ff      	movs	r2, #255	; 0xff
 8003a88:	4393      	bics	r3, r2
 8003a8a:	001a      	movs	r2, r3
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4a38      	ldr	r2, [pc, #224]	; (8003b78 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003a98:	401a      	ands	r2, r3
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	4a35      	ldr	r2, [pc, #212]	; (8003b7c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003aa6:	401a      	ands	r2, r3
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4a33      	ldr	r2, [pc, #204]	; (8003b80 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003ab4:	401a      	ands	r2, r3
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4a30      	ldr	r2, [pc, #192]	; (8003b84 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003ac2:	401a      	ands	r2, r3
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4a2e      	ldr	r2, [pc, #184]	; (8003b88 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003ad0:	401a      	ands	r2, r3
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4a2b      	ldr	r2, [pc, #172]	; (8003b8c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003ade:	401a      	ands	r2, r3
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4a29      	ldr	r2, [pc, #164]	; (8003b90 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003aec:	401a      	ands	r2, r3
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	041b      	lsls	r3, r3, #16
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a25      	ldr	r2, [pc, #148]	; (8003b94 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d106      	bne.n	8003b10 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4a24      	ldr	r2, [pc, #144]	; (8003b98 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8003b06:	401a      	ands	r2, r3
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1f      	ldr	r2, [pc, #124]	; (8003b94 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d121      	bne.n	8003b5e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4a1f      	ldr	r2, [pc, #124]	; (8003b9c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003b1e:	401a      	ands	r2, r3
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b24:	051b      	lsls	r3, r3, #20
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4a1c      	ldr	r2, [pc, #112]	; (8003ba0 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8003b2e:	401a      	ands	r2, r3
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4a1a      	ldr	r2, [pc, #104]	; (8003ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8003b3c:	401a      	ands	r2, r3
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a12      	ldr	r2, [pc, #72]	; (8003b94 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d106      	bne.n	8003b5e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4a15      	ldr	r2, [pc, #84]	; (8003ba8 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8003b54:	401a      	ands	r2, r3
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	223c      	movs	r2, #60	; 0x3c
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	0018      	movs	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	b004      	add	sp, #16
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	fffffcff 	.word	0xfffffcff
 8003b7c:	fffffbff 	.word	0xfffffbff
 8003b80:	fffff7ff 	.word	0xfffff7ff
 8003b84:	ffffefff 	.word	0xffffefff
 8003b88:	ffffdfff 	.word	0xffffdfff
 8003b8c:	ffffbfff 	.word	0xffffbfff
 8003b90:	fff0ffff 	.word	0xfff0ffff
 8003b94:	40012c00 	.word	0x40012c00
 8003b98:	efffffff 	.word	0xefffffff
 8003b9c:	ff0fffff 	.word	0xff0fffff
 8003ba0:	feffffff 	.word	0xfeffffff
 8003ba4:	fdffffff 	.word	0xfdffffff
 8003ba8:	dfffffff 	.word	0xdfffffff

08003bac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bb4:	46c0      	nop			; (mov r8, r8)
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	b002      	add	sp, #8
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bc4:	46c0      	nop			; (mov r8, r8)
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b002      	add	sp, #8
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003bd4:	46c0      	nop			; (mov r8, r8)
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	b002      	add	sp, #8
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e046      	b.n	8003c7c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2284      	movs	r2, #132	; 0x84
 8003bf2:	589b      	ldr	r3, [r3, r2]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d107      	bne.n	8003c08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2280      	movs	r2, #128	; 0x80
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	0018      	movs	r0, r3
 8003c04:	f7fd f8e0 	bl	8000dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2284      	movs	r2, #132	; 0x84
 8003c0c:	2124      	movs	r1, #36	; 0x24
 8003c0e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	438a      	bics	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	0018      	movs	r0, r3
 8003c24:	f000 f830 	bl	8003c88 <UART_SetConfig>
 8003c28:	0003      	movs	r3, r0
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e024      	b.n	8003c7c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	f000 f9cd 	bl	8003fdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	490d      	ldr	r1, [pc, #52]	; (8003c84 <HAL_UART_Init+0xa8>)
 8003c4e:	400a      	ands	r2, r1
 8003c50:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	212a      	movs	r1, #42	; 0x2a
 8003c5e:	438a      	bics	r2, r1
 8003c60:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	0018      	movs	r0, r3
 8003c76:	f000 fa65 	bl	8004144 <UART_CheckIdleState>
 8003c7a:	0003      	movs	r3, r0
}
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b002      	add	sp, #8
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	ffffb7ff 	.word	0xffffb7ff

08003c88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c90:	231a      	movs	r3, #26
 8003c92:	18fb      	adds	r3, r7, r3
 8003c94:	2200      	movs	r2, #0
 8003c96:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cb4:	69fa      	ldr	r2, [r7, #28]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4abc      	ldr	r2, [pc, #752]	; (8003fb4 <UART_SetConfig+0x32c>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	0019      	movs	r1, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	4ab8      	ldr	r2, [pc, #736]	; (8003fb8 <UART_SetConfig+0x330>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	0019      	movs	r1, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	69fa      	ldr	r2, [r7, #28]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	4aaf      	ldr	r2, [pc, #700]	; (8003fbc <UART_SetConfig+0x334>)
 8003d00:	4013      	ands	r3, r2
 8003d02:	0019      	movs	r1, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	69fa      	ldr	r2, [r7, #28]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	220f      	movs	r2, #15
 8003d16:	4393      	bics	r3, r2
 8003d18:	0019      	movs	r1, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4aa5      	ldr	r2, [pc, #660]	; (8003fc0 <UART_SetConfig+0x338>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d127      	bne.n	8003d80 <UART_SetConfig+0xf8>
 8003d30:	4ba4      	ldr	r3, [pc, #656]	; (8003fc4 <UART_SetConfig+0x33c>)
 8003d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d34:	2203      	movs	r2, #3
 8003d36:	4013      	ands	r3, r2
 8003d38:	2b03      	cmp	r3, #3
 8003d3a:	d017      	beq.n	8003d6c <UART_SetConfig+0xe4>
 8003d3c:	d81b      	bhi.n	8003d76 <UART_SetConfig+0xee>
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d00a      	beq.n	8003d58 <UART_SetConfig+0xd0>
 8003d42:	d818      	bhi.n	8003d76 <UART_SetConfig+0xee>
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <UART_SetConfig+0xc6>
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d00a      	beq.n	8003d62 <UART_SetConfig+0xda>
 8003d4c:	e013      	b.n	8003d76 <UART_SetConfig+0xee>
 8003d4e:	231b      	movs	r3, #27
 8003d50:	18fb      	adds	r3, r7, r3
 8003d52:	2200      	movs	r2, #0
 8003d54:	701a      	strb	r2, [r3, #0]
 8003d56:	e058      	b.n	8003e0a <UART_SetConfig+0x182>
 8003d58:	231b      	movs	r3, #27
 8003d5a:	18fb      	adds	r3, r7, r3
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	701a      	strb	r2, [r3, #0]
 8003d60:	e053      	b.n	8003e0a <UART_SetConfig+0x182>
 8003d62:	231b      	movs	r3, #27
 8003d64:	18fb      	adds	r3, r7, r3
 8003d66:	2204      	movs	r2, #4
 8003d68:	701a      	strb	r2, [r3, #0]
 8003d6a:	e04e      	b.n	8003e0a <UART_SetConfig+0x182>
 8003d6c:	231b      	movs	r3, #27
 8003d6e:	18fb      	adds	r3, r7, r3
 8003d70:	2208      	movs	r2, #8
 8003d72:	701a      	strb	r2, [r3, #0]
 8003d74:	e049      	b.n	8003e0a <UART_SetConfig+0x182>
 8003d76:	231b      	movs	r3, #27
 8003d78:	18fb      	adds	r3, r7, r3
 8003d7a:	2210      	movs	r2, #16
 8003d7c:	701a      	strb	r2, [r3, #0]
 8003d7e:	e044      	b.n	8003e0a <UART_SetConfig+0x182>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a90      	ldr	r2, [pc, #576]	; (8003fc8 <UART_SetConfig+0x340>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d127      	bne.n	8003dda <UART_SetConfig+0x152>
 8003d8a:	4b8e      	ldr	r3, [pc, #568]	; (8003fc4 <UART_SetConfig+0x33c>)
 8003d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8e:	220c      	movs	r2, #12
 8003d90:	4013      	ands	r3, r2
 8003d92:	2b0c      	cmp	r3, #12
 8003d94:	d017      	beq.n	8003dc6 <UART_SetConfig+0x13e>
 8003d96:	d81b      	bhi.n	8003dd0 <UART_SetConfig+0x148>
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d00a      	beq.n	8003db2 <UART_SetConfig+0x12a>
 8003d9c:	d818      	bhi.n	8003dd0 <UART_SetConfig+0x148>
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <UART_SetConfig+0x120>
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d00a      	beq.n	8003dbc <UART_SetConfig+0x134>
 8003da6:	e013      	b.n	8003dd0 <UART_SetConfig+0x148>
 8003da8:	231b      	movs	r3, #27
 8003daa:	18fb      	adds	r3, r7, r3
 8003dac:	2200      	movs	r2, #0
 8003dae:	701a      	strb	r2, [r3, #0]
 8003db0:	e02b      	b.n	8003e0a <UART_SetConfig+0x182>
 8003db2:	231b      	movs	r3, #27
 8003db4:	18fb      	adds	r3, r7, r3
 8003db6:	2202      	movs	r2, #2
 8003db8:	701a      	strb	r2, [r3, #0]
 8003dba:	e026      	b.n	8003e0a <UART_SetConfig+0x182>
 8003dbc:	231b      	movs	r3, #27
 8003dbe:	18fb      	adds	r3, r7, r3
 8003dc0:	2204      	movs	r2, #4
 8003dc2:	701a      	strb	r2, [r3, #0]
 8003dc4:	e021      	b.n	8003e0a <UART_SetConfig+0x182>
 8003dc6:	231b      	movs	r3, #27
 8003dc8:	18fb      	adds	r3, r7, r3
 8003dca:	2208      	movs	r2, #8
 8003dcc:	701a      	strb	r2, [r3, #0]
 8003dce:	e01c      	b.n	8003e0a <UART_SetConfig+0x182>
 8003dd0:	231b      	movs	r3, #27
 8003dd2:	18fb      	adds	r3, r7, r3
 8003dd4:	2210      	movs	r2, #16
 8003dd6:	701a      	strb	r2, [r3, #0]
 8003dd8:	e017      	b.n	8003e0a <UART_SetConfig+0x182>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a7b      	ldr	r2, [pc, #492]	; (8003fcc <UART_SetConfig+0x344>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d104      	bne.n	8003dee <UART_SetConfig+0x166>
 8003de4:	231b      	movs	r3, #27
 8003de6:	18fb      	adds	r3, r7, r3
 8003de8:	2200      	movs	r2, #0
 8003dea:	701a      	strb	r2, [r3, #0]
 8003dec:	e00d      	b.n	8003e0a <UART_SetConfig+0x182>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a77      	ldr	r2, [pc, #476]	; (8003fd0 <UART_SetConfig+0x348>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d104      	bne.n	8003e02 <UART_SetConfig+0x17a>
 8003df8:	231b      	movs	r3, #27
 8003dfa:	18fb      	adds	r3, r7, r3
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	701a      	strb	r2, [r3, #0]
 8003e00:	e003      	b.n	8003e0a <UART_SetConfig+0x182>
 8003e02:	231b      	movs	r3, #27
 8003e04:	18fb      	adds	r3, r7, r3
 8003e06:	2210      	movs	r2, #16
 8003e08:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69da      	ldr	r2, [r3, #28]
 8003e0e:	2380      	movs	r3, #128	; 0x80
 8003e10:	021b      	lsls	r3, r3, #8
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d000      	beq.n	8003e18 <UART_SetConfig+0x190>
 8003e16:	e066      	b.n	8003ee6 <UART_SetConfig+0x25e>
  {
    switch (clocksource)
 8003e18:	231b      	movs	r3, #27
 8003e1a:	18fb      	adds	r3, r7, r3
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	d015      	beq.n	8003e4e <UART_SetConfig+0x1c6>
 8003e22:	dc18      	bgt.n	8003e56 <UART_SetConfig+0x1ce>
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	d00d      	beq.n	8003e44 <UART_SetConfig+0x1bc>
 8003e28:	dc15      	bgt.n	8003e56 <UART_SetConfig+0x1ce>
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <UART_SetConfig+0x1ac>
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d005      	beq.n	8003e3e <UART_SetConfig+0x1b6>
 8003e32:	e010      	b.n	8003e56 <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e34:	f7fe f8e2 	bl	8001ffc <HAL_RCC_GetPCLK1Freq>
 8003e38:	0003      	movs	r3, r0
 8003e3a:	617b      	str	r3, [r7, #20]
        break;
 8003e3c:	e012      	b.n	8003e64 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e3e:	4b65      	ldr	r3, [pc, #404]	; (8003fd4 <UART_SetConfig+0x34c>)
 8003e40:	617b      	str	r3, [r7, #20]
        break;
 8003e42:	e00f      	b.n	8003e64 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e44:	f7fe f84e 	bl	8001ee4 <HAL_RCC_GetSysClockFreq>
 8003e48:	0003      	movs	r3, r0
 8003e4a:	617b      	str	r3, [r7, #20]
        break;
 8003e4c:	e00a      	b.n	8003e64 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e4e:	2380      	movs	r3, #128	; 0x80
 8003e50:	021b      	lsls	r3, r3, #8
 8003e52:	617b      	str	r3, [r7, #20]
        break;
 8003e54:	e006      	b.n	8003e64 <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e5a:	231a      	movs	r3, #26
 8003e5c:	18fb      	adds	r3, r7, r3
 8003e5e:	2201      	movs	r2, #1
 8003e60:	701a      	strb	r2, [r3, #0]
        break;
 8003e62:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d100      	bne.n	8003e6c <UART_SetConfig+0x1e4>
 8003e6a:	e08e      	b.n	8003f8a <UART_SetConfig+0x302>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e70:	4b59      	ldr	r3, [pc, #356]	; (8003fd8 <UART_SetConfig+0x350>)
 8003e72:	0052      	lsls	r2, r2, #1
 8003e74:	5ad3      	ldrh	r3, [r2, r3]
 8003e76:	0019      	movs	r1, r3
 8003e78:	6978      	ldr	r0, [r7, #20]
 8003e7a:	f7fc f941 	bl	8000100 <__udivsi3>
 8003e7e:	0003      	movs	r3, r0
 8003e80:	005a      	lsls	r2, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	085b      	lsrs	r3, r3, #1
 8003e88:	18d2      	adds	r2, r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	0019      	movs	r1, r3
 8003e90:	0010      	movs	r0, r2
 8003e92:	f7fc f935 	bl	8000100 <__udivsi3>
 8003e96:	0003      	movs	r3, r0
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	2b0f      	cmp	r3, #15
 8003ea0:	d91c      	bls.n	8003edc <UART_SetConfig+0x254>
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	025b      	lsls	r3, r3, #9
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d217      	bcs.n	8003edc <UART_SetConfig+0x254>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	200e      	movs	r0, #14
 8003eb2:	183b      	adds	r3, r7, r0
 8003eb4:	210f      	movs	r1, #15
 8003eb6:	438a      	bics	r2, r1
 8003eb8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	085b      	lsrs	r3, r3, #1
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	2207      	movs	r2, #7
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	b299      	uxth	r1, r3
 8003ec6:	183b      	adds	r3, r7, r0
 8003ec8:	183a      	adds	r2, r7, r0
 8003eca:	8812      	ldrh	r2, [r2, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	183a      	adds	r2, r7, r0
 8003ed6:	8812      	ldrh	r2, [r2, #0]
 8003ed8:	60da      	str	r2, [r3, #12]
 8003eda:	e056      	b.n	8003f8a <UART_SetConfig+0x302>
      }
      else
      {
        ret = HAL_ERROR;
 8003edc:	231a      	movs	r3, #26
 8003ede:	18fb      	adds	r3, r7, r3
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	701a      	strb	r2, [r3, #0]
 8003ee4:	e051      	b.n	8003f8a <UART_SetConfig+0x302>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ee6:	231b      	movs	r3, #27
 8003ee8:	18fb      	adds	r3, r7, r3
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d015      	beq.n	8003f1c <UART_SetConfig+0x294>
 8003ef0:	dc18      	bgt.n	8003f24 <UART_SetConfig+0x29c>
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d00d      	beq.n	8003f12 <UART_SetConfig+0x28a>
 8003ef6:	dc15      	bgt.n	8003f24 <UART_SetConfig+0x29c>
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <UART_SetConfig+0x27a>
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d005      	beq.n	8003f0c <UART_SetConfig+0x284>
 8003f00:	e010      	b.n	8003f24 <UART_SetConfig+0x29c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f02:	f7fe f87b 	bl	8001ffc <HAL_RCC_GetPCLK1Freq>
 8003f06:	0003      	movs	r3, r0
 8003f08:	617b      	str	r3, [r7, #20]
        break;
 8003f0a:	e012      	b.n	8003f32 <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f0c:	4b31      	ldr	r3, [pc, #196]	; (8003fd4 <UART_SetConfig+0x34c>)
 8003f0e:	617b      	str	r3, [r7, #20]
        break;
 8003f10:	e00f      	b.n	8003f32 <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f12:	f7fd ffe7 	bl	8001ee4 <HAL_RCC_GetSysClockFreq>
 8003f16:	0003      	movs	r3, r0
 8003f18:	617b      	str	r3, [r7, #20]
        break;
 8003f1a:	e00a      	b.n	8003f32 <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f1c:	2380      	movs	r3, #128	; 0x80
 8003f1e:	021b      	lsls	r3, r3, #8
 8003f20:	617b      	str	r3, [r7, #20]
        break;
 8003f22:	e006      	b.n	8003f32 <UART_SetConfig+0x2aa>
      default:
        pclk = 0U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f28:	231a      	movs	r3, #26
 8003f2a:	18fb      	adds	r3, r7, r3
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	701a      	strb	r2, [r3, #0]
        break;
 8003f30:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d028      	beq.n	8003f8a <UART_SetConfig+0x302>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f3c:	4b26      	ldr	r3, [pc, #152]	; (8003fd8 <UART_SetConfig+0x350>)
 8003f3e:	0052      	lsls	r2, r2, #1
 8003f40:	5ad3      	ldrh	r3, [r2, r3]
 8003f42:	0019      	movs	r1, r3
 8003f44:	6978      	ldr	r0, [r7, #20]
 8003f46:	f7fc f8db 	bl	8000100 <__udivsi3>
 8003f4a:	0003      	movs	r3, r0
 8003f4c:	001a      	movs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	085b      	lsrs	r3, r3, #1
 8003f54:	18d2      	adds	r2, r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	0019      	movs	r1, r3
 8003f5c:	0010      	movs	r0, r2
 8003f5e:	f7fc f8cf 	bl	8000100 <__udivsi3>
 8003f62:	0003      	movs	r3, r0
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	2b0f      	cmp	r3, #15
 8003f6c:	d909      	bls.n	8003f82 <UART_SetConfig+0x2fa>
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	2380      	movs	r3, #128	; 0x80
 8003f72:	025b      	lsls	r3, r3, #9
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d204      	bcs.n	8003f82 <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = usartdiv;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	60da      	str	r2, [r3, #12]
 8003f80:	e003      	b.n	8003f8a <UART_SetConfig+0x302>
      }
      else
      {
        ret = HAL_ERROR;
 8003f82:	231a      	movs	r3, #26
 8003f84:	18fb      	adds	r3, r7, r3
 8003f86:	2201      	movs	r2, #1
 8003f88:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	226a      	movs	r2, #106	; 0x6a
 8003f8e:	2101      	movs	r1, #1
 8003f90:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2268      	movs	r2, #104	; 0x68
 8003f96:	2101      	movs	r1, #1
 8003f98:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003fa6:	231a      	movs	r3, #26
 8003fa8:	18fb      	adds	r3, r7, r3
 8003faa:	781b      	ldrb	r3, [r3, #0]
}
 8003fac:	0018      	movs	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	b008      	add	sp, #32
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	cfff69f3 	.word	0xcfff69f3
 8003fb8:	ffffcfff 	.word	0xffffcfff
 8003fbc:	11fff4ff 	.word	0x11fff4ff
 8003fc0:	40013800 	.word	0x40013800
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	40004400 	.word	0x40004400
 8003fcc:	40004800 	.word	0x40004800
 8003fd0:	40004c00 	.word	0x40004c00
 8003fd4:	00f42400 	.word	0x00f42400
 8003fd8:	0800465c 	.word	0x0800465c

08003fdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe8:	2201      	movs	r2, #1
 8003fea:	4013      	ands	r3, r2
 8003fec:	d00b      	beq.n	8004006 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	4a4a      	ldr	r2, [pc, #296]	; (8004120 <UART_AdvFeatureConfig+0x144>)
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	0019      	movs	r1, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400a:	2202      	movs	r2, #2
 800400c:	4013      	ands	r3, r2
 800400e:	d00b      	beq.n	8004028 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	4a43      	ldr	r2, [pc, #268]	; (8004124 <UART_AdvFeatureConfig+0x148>)
 8004018:	4013      	ands	r3, r2
 800401a:	0019      	movs	r1, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402c:	2204      	movs	r2, #4
 800402e:	4013      	ands	r3, r2
 8004030:	d00b      	beq.n	800404a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	4a3b      	ldr	r2, [pc, #236]	; (8004128 <UART_AdvFeatureConfig+0x14c>)
 800403a:	4013      	ands	r3, r2
 800403c:	0019      	movs	r1, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404e:	2208      	movs	r2, #8
 8004050:	4013      	ands	r3, r2
 8004052:	d00b      	beq.n	800406c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	4a34      	ldr	r2, [pc, #208]	; (800412c <UART_AdvFeatureConfig+0x150>)
 800405c:	4013      	ands	r3, r2
 800405e:	0019      	movs	r1, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004070:	2210      	movs	r2, #16
 8004072:	4013      	ands	r3, r2
 8004074:	d00b      	beq.n	800408e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	4a2c      	ldr	r2, [pc, #176]	; (8004130 <UART_AdvFeatureConfig+0x154>)
 800407e:	4013      	ands	r3, r2
 8004080:	0019      	movs	r1, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004092:	2220      	movs	r2, #32
 8004094:	4013      	ands	r3, r2
 8004096:	d00b      	beq.n	80040b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	4a25      	ldr	r2, [pc, #148]	; (8004134 <UART_AdvFeatureConfig+0x158>)
 80040a0:	4013      	ands	r3, r2
 80040a2:	0019      	movs	r1, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b4:	2240      	movs	r2, #64	; 0x40
 80040b6:	4013      	ands	r3, r2
 80040b8:	d01d      	beq.n	80040f6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	4a1d      	ldr	r2, [pc, #116]	; (8004138 <UART_AdvFeatureConfig+0x15c>)
 80040c2:	4013      	ands	r3, r2
 80040c4:	0019      	movs	r1, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040d6:	2380      	movs	r3, #128	; 0x80
 80040d8:	035b      	lsls	r3, r3, #13
 80040da:	429a      	cmp	r2, r3
 80040dc:	d10b      	bne.n	80040f6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	4a15      	ldr	r2, [pc, #84]	; (800413c <UART_AdvFeatureConfig+0x160>)
 80040e6:	4013      	ands	r3, r2
 80040e8:	0019      	movs	r1, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fa:	2280      	movs	r2, #128	; 0x80
 80040fc:	4013      	ands	r3, r2
 80040fe:	d00b      	beq.n	8004118 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	4a0e      	ldr	r2, [pc, #56]	; (8004140 <UART_AdvFeatureConfig+0x164>)
 8004108:	4013      	ands	r3, r2
 800410a:	0019      	movs	r1, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	605a      	str	r2, [r3, #4]
  }
}
 8004118:	46c0      	nop			; (mov r8, r8)
 800411a:	46bd      	mov	sp, r7
 800411c:	b002      	add	sp, #8
 800411e:	bd80      	pop	{r7, pc}
 8004120:	fffdffff 	.word	0xfffdffff
 8004124:	fffeffff 	.word	0xfffeffff
 8004128:	fffbffff 	.word	0xfffbffff
 800412c:	ffff7fff 	.word	0xffff7fff
 8004130:	ffffefff 	.word	0xffffefff
 8004134:	ffffdfff 	.word	0xffffdfff
 8004138:	ffefffff 	.word	0xffefffff
 800413c:	ff9fffff 	.word	0xff9fffff
 8004140:	fff7ffff 	.word	0xfff7ffff

08004144 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af02      	add	r7, sp, #8
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	228c      	movs	r2, #140	; 0x8c
 8004150:	2100      	movs	r1, #0
 8004152:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004154:	f7fc fede 	bl	8000f14 <HAL_GetTick>
 8004158:	0003      	movs	r3, r0
 800415a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2208      	movs	r2, #8
 8004164:	4013      	ands	r3, r2
 8004166:	2b08      	cmp	r3, #8
 8004168:	d10c      	bne.n	8004184 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2280      	movs	r2, #128	; 0x80
 800416e:	0391      	lsls	r1, r2, #14
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	4a18      	ldr	r2, [pc, #96]	; (80041d4 <UART_CheckIdleState+0x90>)
 8004174:	9200      	str	r2, [sp, #0]
 8004176:	2200      	movs	r2, #0
 8004178:	f000 f82e 	bl	80041d8 <UART_WaitOnFlagUntilTimeout>
 800417c:	1e03      	subs	r3, r0, #0
 800417e:	d001      	beq.n	8004184 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e023      	b.n	80041cc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2204      	movs	r2, #4
 800418c:	4013      	ands	r3, r2
 800418e:	2b04      	cmp	r3, #4
 8004190:	d10c      	bne.n	80041ac <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2280      	movs	r2, #128	; 0x80
 8004196:	03d1      	lsls	r1, r2, #15
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	4a0e      	ldr	r2, [pc, #56]	; (80041d4 <UART_CheckIdleState+0x90>)
 800419c:	9200      	str	r2, [sp, #0]
 800419e:	2200      	movs	r2, #0
 80041a0:	f000 f81a 	bl	80041d8 <UART_WaitOnFlagUntilTimeout>
 80041a4:	1e03      	subs	r3, r0, #0
 80041a6:	d001      	beq.n	80041ac <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e00f      	b.n	80041cc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2284      	movs	r2, #132	; 0x84
 80041b0:	2120      	movs	r1, #32
 80041b2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2288      	movs	r2, #136	; 0x88
 80041b8:	2120      	movs	r1, #32
 80041ba:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2280      	movs	r2, #128	; 0x80
 80041c6:	2100      	movs	r1, #0
 80041c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	0018      	movs	r0, r3
 80041ce:	46bd      	mov	sp, r7
 80041d0:	b004      	add	sp, #16
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	01ffffff 	.word	0x01ffffff

080041d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	603b      	str	r3, [r7, #0]
 80041e4:	1dfb      	adds	r3, r7, #7
 80041e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e8:	e062      	b.n	80042b0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	3301      	adds	r3, #1
 80041ee:	d05f      	beq.n	80042b0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f0:	f7fc fe90 	bl	8000f14 <HAL_GetTick>
 80041f4:	0002      	movs	r2, r0
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d302      	bcc.n	8004206 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d11d      	bne.n	8004242 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4931      	ldr	r1, [pc, #196]	; (80042d8 <UART_WaitOnFlagUntilTimeout+0x100>)
 8004212:	400a      	ands	r2, r1
 8004214:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2101      	movs	r1, #1
 8004222:	438a      	bics	r2, r1
 8004224:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2284      	movs	r2, #132	; 0x84
 800422a:	2120      	movs	r1, #32
 800422c:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2288      	movs	r2, #136	; 0x88
 8004232:	2120      	movs	r1, #32
 8004234:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2280      	movs	r2, #128	; 0x80
 800423a:	2100      	movs	r1, #0
 800423c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e046      	b.n	80042d0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2204      	movs	r2, #4
 800424a:	4013      	ands	r3, r2
 800424c:	d030      	beq.n	80042b0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69da      	ldr	r2, [r3, #28]
 8004254:	2380      	movs	r3, #128	; 0x80
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	401a      	ands	r2, r3
 800425a:	2380      	movs	r3, #128	; 0x80
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	429a      	cmp	r2, r3
 8004260:	d126      	bne.n	80042b0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2280      	movs	r2, #128	; 0x80
 8004268:	0112      	lsls	r2, r2, #4
 800426a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4918      	ldr	r1, [pc, #96]	; (80042d8 <UART_WaitOnFlagUntilTimeout+0x100>)
 8004278:	400a      	ands	r2, r1
 800427a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2101      	movs	r1, #1
 8004288:	438a      	bics	r2, r1
 800428a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2284      	movs	r2, #132	; 0x84
 8004290:	2120      	movs	r1, #32
 8004292:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2288      	movs	r2, #136	; 0x88
 8004298:	2120      	movs	r1, #32
 800429a:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	228c      	movs	r2, #140	; 0x8c
 80042a0:	2120      	movs	r1, #32
 80042a2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2280      	movs	r2, #128	; 0x80
 80042a8:	2100      	movs	r1, #0
 80042aa:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e00f      	b.n	80042d0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	4013      	ands	r3, r2
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	425a      	negs	r2, r3
 80042c0:	4153      	adcs	r3, r2
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	001a      	movs	r2, r3
 80042c6:	1dfb      	adds	r3, r7, #7
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d08d      	beq.n	80041ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	0018      	movs	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	b004      	add	sp, #16
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	fffffe5f 	.word	0xfffffe5f

080042dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2280      	movs	r2, #128	; 0x80
 80042e8:	5c9b      	ldrb	r3, [r3, r2]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d101      	bne.n	80042f2 <HAL_UARTEx_DisableFifoMode+0x16>
 80042ee:	2302      	movs	r3, #2
 80042f0:	e027      	b.n	8004342 <HAL_UARTEx_DisableFifoMode+0x66>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2280      	movs	r2, #128	; 0x80
 80042f6:	2101      	movs	r1, #1
 80042f8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2284      	movs	r2, #132	; 0x84
 80042fe:	2124      	movs	r1, #36	; 0x24
 8004300:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2101      	movs	r1, #1
 8004316:	438a      	bics	r2, r1
 8004318:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	4a0b      	ldr	r2, [pc, #44]	; (800434c <HAL_UARTEx_DisableFifoMode+0x70>)
 800431e:	4013      	ands	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2284      	movs	r2, #132	; 0x84
 8004334:	2120      	movs	r1, #32
 8004336:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2280      	movs	r2, #128	; 0x80
 800433c:	2100      	movs	r1, #0
 800433e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	0018      	movs	r0, r3
 8004344:	46bd      	mov	sp, r7
 8004346:	b004      	add	sp, #16
 8004348:	bd80      	pop	{r7, pc}
 800434a:	46c0      	nop			; (mov r8, r8)
 800434c:	dfffffff 	.word	0xdfffffff

08004350 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2280      	movs	r2, #128	; 0x80
 800435e:	5c9b      	ldrb	r3, [r3, r2]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004364:	2302      	movs	r3, #2
 8004366:	e02e      	b.n	80043c6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2280      	movs	r2, #128	; 0x80
 800436c:	2101      	movs	r1, #1
 800436e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2284      	movs	r2, #132	; 0x84
 8004374:	2124      	movs	r1, #36	; 0x24
 8004376:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2101      	movs	r1, #1
 800438c:	438a      	bics	r2, r1
 800438e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	08d9      	lsrs	r1, r3, #3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	0018      	movs	r0, r3
 80043a8:	f000 f854 	bl	8004454 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2284      	movs	r2, #132	; 0x84
 80043b8:	2120      	movs	r1, #32
 80043ba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2280      	movs	r2, #128	; 0x80
 80043c0:	2100      	movs	r1, #0
 80043c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	0018      	movs	r0, r3
 80043c8:	46bd      	mov	sp, r7
 80043ca:	b004      	add	sp, #16
 80043cc:	bd80      	pop	{r7, pc}
	...

080043d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2280      	movs	r2, #128	; 0x80
 80043de:	5c9b      	ldrb	r3, [r3, r2]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80043e4:	2302      	movs	r3, #2
 80043e6:	e02f      	b.n	8004448 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2280      	movs	r2, #128	; 0x80
 80043ec:	2101      	movs	r1, #1
 80043ee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2284      	movs	r2, #132	; 0x84
 80043f4:	2124      	movs	r1, #36	; 0x24
 80043f6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2101      	movs	r1, #1
 800440c:	438a      	bics	r2, r1
 800440e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	4a0e      	ldr	r2, [pc, #56]	; (8004450 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004418:	4013      	ands	r3, r2
 800441a:	0019      	movs	r1, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	0018      	movs	r0, r3
 800442a:	f000 f813 	bl	8004454 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2284      	movs	r2, #132	; 0x84
 800443a:	2120      	movs	r1, #32
 800443c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2280      	movs	r2, #128	; 0x80
 8004442:	2100      	movs	r1, #0
 8004444:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	0018      	movs	r0, r3
 800444a:	46bd      	mov	sp, r7
 800444c:	b004      	add	sp, #16
 800444e:	bd80      	pop	{r7, pc}
 8004450:	f1ffffff 	.word	0xf1ffffff

08004454 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004456:	b089      	sub	sp, #36	; 0x24
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800445c:	2314      	movs	r3, #20
 800445e:	18fb      	adds	r3, r7, r3
 8004460:	4a2f      	ldr	r2, [pc, #188]	; (8004520 <UARTEx_SetNbDataToProcess+0xcc>)
 8004462:	ca03      	ldmia	r2!, {r0, r1}
 8004464:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004466:	230c      	movs	r3, #12
 8004468:	18fb      	adds	r3, r7, r3
 800446a:	4a2e      	ldr	r2, [pc, #184]	; (8004524 <UARTEx_SetNbDataToProcess+0xd0>)
 800446c:	ca03      	ldmia	r2!, {r0, r1}
 800446e:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004474:	2b00      	cmp	r3, #0
 8004476:	d108      	bne.n	800448a <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	226a      	movs	r2, #106	; 0x6a
 800447c:	2101      	movs	r1, #1
 800447e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2268      	movs	r2, #104	; 0x68
 8004484:	2101      	movs	r1, #1
 8004486:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004488:	e046      	b.n	8004518 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800448a:	261f      	movs	r6, #31
 800448c:	19bb      	adds	r3, r7, r6
 800448e:	2208      	movs	r2, #8
 8004490:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004492:	201e      	movs	r0, #30
 8004494:	183b      	adds	r3, r7, r0
 8004496:	2208      	movs	r2, #8
 8004498:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	0e5b      	lsrs	r3, r3, #25
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	241d      	movs	r4, #29
 80044a6:	193b      	adds	r3, r7, r4
 80044a8:	2107      	movs	r1, #7
 80044aa:	400a      	ands	r2, r1
 80044ac:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	0f5b      	lsrs	r3, r3, #29
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	251c      	movs	r5, #28
 80044ba:	197b      	adds	r3, r7, r5
 80044bc:	2107      	movs	r1, #7
 80044be:	400a      	ands	r2, r1
 80044c0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044c2:	183b      	adds	r3, r7, r0
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	197a      	adds	r2, r7, r5
 80044c8:	7812      	ldrb	r2, [r2, #0]
 80044ca:	2114      	movs	r1, #20
 80044cc:	1879      	adds	r1, r7, r1
 80044ce:	5c8a      	ldrb	r2, [r1, r2]
 80044d0:	435a      	muls	r2, r3
 80044d2:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80044d4:	197b      	adds	r3, r7, r5
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	250c      	movs	r5, #12
 80044da:	197a      	adds	r2, r7, r5
 80044dc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044de:	0019      	movs	r1, r3
 80044e0:	f7fb fe98 	bl	8000214 <__divsi3>
 80044e4:	0003      	movs	r3, r0
 80044e6:	b299      	uxth	r1, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	226a      	movs	r2, #106	; 0x6a
 80044ec:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80044ee:	19bb      	adds	r3, r7, r6
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	193a      	adds	r2, r7, r4
 80044f4:	7812      	ldrb	r2, [r2, #0]
 80044f6:	2114      	movs	r1, #20
 80044f8:	1879      	adds	r1, r7, r1
 80044fa:	5c8a      	ldrb	r2, [r1, r2]
 80044fc:	435a      	muls	r2, r3
 80044fe:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004500:	193b      	adds	r3, r7, r4
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	197a      	adds	r2, r7, r5
 8004506:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004508:	0019      	movs	r1, r3
 800450a:	f7fb fe83 	bl	8000214 <__divsi3>
 800450e:	0003      	movs	r3, r0
 8004510:	b299      	uxth	r1, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2268      	movs	r2, #104	; 0x68
 8004516:	5299      	strh	r1, [r3, r2]
}
 8004518:	46c0      	nop			; (mov r8, r8)
 800451a:	46bd      	mov	sp, r7
 800451c:	b009      	add	sp, #36	; 0x24
 800451e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004520:	08004598 	.word	0x08004598
 8004524:	080045a0 	.word	0x080045a0

08004528 <__libc_init_array>:
 8004528:	b570      	push	{r4, r5, r6, lr}
 800452a:	2600      	movs	r6, #0
 800452c:	4d0c      	ldr	r5, [pc, #48]	; (8004560 <__libc_init_array+0x38>)
 800452e:	4c0d      	ldr	r4, [pc, #52]	; (8004564 <__libc_init_array+0x3c>)
 8004530:	1b64      	subs	r4, r4, r5
 8004532:	10a4      	asrs	r4, r4, #2
 8004534:	42a6      	cmp	r6, r4
 8004536:	d109      	bne.n	800454c <__libc_init_array+0x24>
 8004538:	2600      	movs	r6, #0
 800453a:	f000 f821 	bl	8004580 <_init>
 800453e:	4d0a      	ldr	r5, [pc, #40]	; (8004568 <__libc_init_array+0x40>)
 8004540:	4c0a      	ldr	r4, [pc, #40]	; (800456c <__libc_init_array+0x44>)
 8004542:	1b64      	subs	r4, r4, r5
 8004544:	10a4      	asrs	r4, r4, #2
 8004546:	42a6      	cmp	r6, r4
 8004548:	d105      	bne.n	8004556 <__libc_init_array+0x2e>
 800454a:	bd70      	pop	{r4, r5, r6, pc}
 800454c:	00b3      	lsls	r3, r6, #2
 800454e:	58eb      	ldr	r3, [r5, r3]
 8004550:	4798      	blx	r3
 8004552:	3601      	adds	r6, #1
 8004554:	e7ee      	b.n	8004534 <__libc_init_array+0xc>
 8004556:	00b3      	lsls	r3, r6, #2
 8004558:	58eb      	ldr	r3, [r5, r3]
 800455a:	4798      	blx	r3
 800455c:	3601      	adds	r6, #1
 800455e:	e7f2      	b.n	8004546 <__libc_init_array+0x1e>
 8004560:	08004674 	.word	0x08004674
 8004564:	08004674 	.word	0x08004674
 8004568:	08004674 	.word	0x08004674
 800456c:	08004678 	.word	0x08004678

08004570 <memset>:
 8004570:	0003      	movs	r3, r0
 8004572:	1882      	adds	r2, r0, r2
 8004574:	4293      	cmp	r3, r2
 8004576:	d100      	bne.n	800457a <memset+0xa>
 8004578:	4770      	bx	lr
 800457a:	7019      	strb	r1, [r3, #0]
 800457c:	3301      	adds	r3, #1
 800457e:	e7f9      	b.n	8004574 <memset+0x4>

08004580 <_init>:
 8004580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004582:	46c0      	nop			; (mov r8, r8)
 8004584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004586:	bc08      	pop	{r3}
 8004588:	469e      	mov	lr, r3
 800458a:	4770      	bx	lr

0800458c <_fini>:
 800458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458e:	46c0      	nop			; (mov r8, r8)
 8004590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004592:	bc08      	pop	{r3}
 8004594:	469e      	mov	lr, r3
 8004596:	4770      	bx	lr
