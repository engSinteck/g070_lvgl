
G070_LVGL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfc8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000037e4  0800e080  0800e080  0001e080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011864  08011864  00030054  2**0
                  CONTENTS
  4 .ARM          00000000  08011864  08011864  00030054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011864  08011864  00030054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011864  08011864  00021864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011868  08011868  00021868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  0801186c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007208  20000054  080118c0  00030054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000725c  080118c0  0003725c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030054  2**0
                  CONTENTS, READONLY
 12 .debug_info   000657b3  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000b3e7  00000000  00000000  0009582f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002368  00000000  00000000  000a0c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00004cf8  00000000  00000000  000a2f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000205d8  00000000  00000000  000a7c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00031b0d  00000000  00000000  000c8250  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a5a27  00000000  00000000  000f9d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019f784  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000693c  00000000  00000000  0019f800  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00030f70  00000000  00000000  001a613c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000054 	.word	0x20000054
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800e068 	.word	0x0800e068

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000058 	.word	0x20000058
 80000fc:	0800e068 	.word	0x0800e068

08000100 <strcmp>:
 8000100:	7802      	ldrb	r2, [r0, #0]
 8000102:	780b      	ldrb	r3, [r1, #0]
 8000104:	2a00      	cmp	r2, #0
 8000106:	d003      	beq.n	8000110 <strcmp+0x10>
 8000108:	3001      	adds	r0, #1
 800010a:	3101      	adds	r1, #1
 800010c:	429a      	cmp	r2, r3
 800010e:	d0f7      	beq.n	8000100 <strcmp>
 8000110:	1ad0      	subs	r0, r2, r3
 8000112:	4770      	bx	lr

08000114 <strlen>:
 8000114:	2300      	movs	r3, #0
 8000116:	5cc2      	ldrb	r2, [r0, r3]
 8000118:	3301      	adds	r3, #1
 800011a:	2a00      	cmp	r2, #0
 800011c:	d1fb      	bne.n	8000116 <strlen+0x2>
 800011e:	1e58      	subs	r0, r3, #1
 8000120:	4770      	bx	lr
	...

08000124 <__gnu_thumb1_case_sqi>:
 8000124:	b402      	push	{r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0049      	lsls	r1, r1, #1
 800012c:	5609      	ldrsb	r1, [r1, r0]
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	448e      	add	lr, r1
 8000132:	bc02      	pop	{r1}
 8000134:	4770      	bx	lr
 8000136:	46c0      	nop			; (mov r8, r8)

08000138 <__gnu_thumb1_case_uqi>:
 8000138:	b402      	push	{r1}
 800013a:	4671      	mov	r1, lr
 800013c:	0849      	lsrs	r1, r1, #1
 800013e:	0049      	lsls	r1, r1, #1
 8000140:	5c09      	ldrb	r1, [r1, r0]
 8000142:	0049      	lsls	r1, r1, #1
 8000144:	448e      	add	lr, r1
 8000146:	bc02      	pop	{r1}
 8000148:	4770      	bx	lr
 800014a:	46c0      	nop			; (mov r8, r8)

0800014c <__gnu_thumb1_case_shi>:
 800014c:	b403      	push	{r0, r1}
 800014e:	4671      	mov	r1, lr
 8000150:	0849      	lsrs	r1, r1, #1
 8000152:	0040      	lsls	r0, r0, #1
 8000154:	0049      	lsls	r1, r1, #1
 8000156:	5e09      	ldrsh	r1, [r1, r0]
 8000158:	0049      	lsls	r1, r1, #1
 800015a:	448e      	add	lr, r1
 800015c:	bc03      	pop	{r0, r1}
 800015e:	4770      	bx	lr

08000160 <__gnu_thumb1_case_uhi>:
 8000160:	b403      	push	{r0, r1}
 8000162:	4671      	mov	r1, lr
 8000164:	0849      	lsrs	r1, r1, #1
 8000166:	0040      	lsls	r0, r0, #1
 8000168:	0049      	lsls	r1, r1, #1
 800016a:	5a09      	ldrh	r1, [r1, r0]
 800016c:	0049      	lsls	r1, r1, #1
 800016e:	448e      	add	lr, r1
 8000170:	bc03      	pop	{r0, r1}
 8000172:	4770      	bx	lr

08000174 <__udivsi3>:
 8000174:	2200      	movs	r2, #0
 8000176:	0843      	lsrs	r3, r0, #1
 8000178:	428b      	cmp	r3, r1
 800017a:	d374      	bcc.n	8000266 <__udivsi3+0xf2>
 800017c:	0903      	lsrs	r3, r0, #4
 800017e:	428b      	cmp	r3, r1
 8000180:	d35f      	bcc.n	8000242 <__udivsi3+0xce>
 8000182:	0a03      	lsrs	r3, r0, #8
 8000184:	428b      	cmp	r3, r1
 8000186:	d344      	bcc.n	8000212 <__udivsi3+0x9e>
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d328      	bcc.n	80001e0 <__udivsi3+0x6c>
 800018e:	0c03      	lsrs	r3, r0, #16
 8000190:	428b      	cmp	r3, r1
 8000192:	d30d      	bcc.n	80001b0 <__udivsi3+0x3c>
 8000194:	22ff      	movs	r2, #255	; 0xff
 8000196:	0209      	lsls	r1, r1, #8
 8000198:	ba12      	rev	r2, r2
 800019a:	0c03      	lsrs	r3, r0, #16
 800019c:	428b      	cmp	r3, r1
 800019e:	d302      	bcc.n	80001a6 <__udivsi3+0x32>
 80001a0:	1212      	asrs	r2, r2, #8
 80001a2:	0209      	lsls	r1, r1, #8
 80001a4:	d065      	beq.n	8000272 <__udivsi3+0xfe>
 80001a6:	0b03      	lsrs	r3, r0, #12
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d319      	bcc.n	80001e0 <__udivsi3+0x6c>
 80001ac:	e000      	b.n	80001b0 <__udivsi3+0x3c>
 80001ae:	0a09      	lsrs	r1, r1, #8
 80001b0:	0bc3      	lsrs	r3, r0, #15
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x46>
 80001b6:	03cb      	lsls	r3, r1, #15
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0b83      	lsrs	r3, r0, #14
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x52>
 80001c2:	038b      	lsls	r3, r1, #14
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0b43      	lsrs	r3, r0, #13
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x5e>
 80001ce:	034b      	lsls	r3, r1, #13
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0b03      	lsrs	r3, r0, #12
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x6a>
 80001da:	030b      	lsls	r3, r1, #12
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0ac3      	lsrs	r3, r0, #11
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x76>
 80001e6:	02cb      	lsls	r3, r1, #11
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0a83      	lsrs	r3, r0, #10
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x82>
 80001f2:	028b      	lsls	r3, r1, #10
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0a43      	lsrs	r3, r0, #9
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x8e>
 80001fe:	024b      	lsls	r3, r1, #9
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0a03      	lsrs	r3, r0, #8
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x9a>
 800020a:	020b      	lsls	r3, r1, #8
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	d2cd      	bcs.n	80001ae <__udivsi3+0x3a>
 8000212:	09c3      	lsrs	r3, r0, #7
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xa8>
 8000218:	01cb      	lsls	r3, r1, #7
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0983      	lsrs	r3, r0, #6
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xb4>
 8000224:	018b      	lsls	r3, r1, #6
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0943      	lsrs	r3, r0, #5
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xc0>
 8000230:	014b      	lsls	r3, r1, #5
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xcc>
 800023c:	010b      	lsls	r3, r1, #4
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	08c3      	lsrs	r3, r0, #3
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xd8>
 8000248:	00cb      	lsls	r3, r1, #3
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0883      	lsrs	r3, r0, #2
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xe4>
 8000254:	008b      	lsls	r3, r1, #2
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0843      	lsrs	r3, r0, #1
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xf0>
 8000260:	004b      	lsls	r3, r1, #1
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	1a41      	subs	r1, r0, r1
 8000268:	d200      	bcs.n	800026c <__udivsi3+0xf8>
 800026a:	4601      	mov	r1, r0
 800026c:	4152      	adcs	r2, r2
 800026e:	4610      	mov	r0, r2
 8000270:	4770      	bx	lr
 8000272:	e7ff      	b.n	8000274 <__udivsi3+0x100>
 8000274:	b501      	push	{r0, lr}
 8000276:	2000      	movs	r0, #0
 8000278:	f000 f8f0 	bl	800045c <__aeabi_idiv0>
 800027c:	bd02      	pop	{r1, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_uidivmod>:
 8000280:	2900      	cmp	r1, #0
 8000282:	d0f7      	beq.n	8000274 <__udivsi3+0x100>
 8000284:	e776      	b.n	8000174 <__udivsi3>
 8000286:	4770      	bx	lr

08000288 <__divsi3>:
 8000288:	4603      	mov	r3, r0
 800028a:	430b      	orrs	r3, r1
 800028c:	d47f      	bmi.n	800038e <__divsi3+0x106>
 800028e:	2200      	movs	r2, #0
 8000290:	0843      	lsrs	r3, r0, #1
 8000292:	428b      	cmp	r3, r1
 8000294:	d374      	bcc.n	8000380 <__divsi3+0xf8>
 8000296:	0903      	lsrs	r3, r0, #4
 8000298:	428b      	cmp	r3, r1
 800029a:	d35f      	bcc.n	800035c <__divsi3+0xd4>
 800029c:	0a03      	lsrs	r3, r0, #8
 800029e:	428b      	cmp	r3, r1
 80002a0:	d344      	bcc.n	800032c <__divsi3+0xa4>
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d328      	bcc.n	80002fa <__divsi3+0x72>
 80002a8:	0c03      	lsrs	r3, r0, #16
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d30d      	bcc.n	80002ca <__divsi3+0x42>
 80002ae:	22ff      	movs	r2, #255	; 0xff
 80002b0:	0209      	lsls	r1, r1, #8
 80002b2:	ba12      	rev	r2, r2
 80002b4:	0c03      	lsrs	r3, r0, #16
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d302      	bcc.n	80002c0 <__divsi3+0x38>
 80002ba:	1212      	asrs	r2, r2, #8
 80002bc:	0209      	lsls	r1, r1, #8
 80002be:	d065      	beq.n	800038c <__divsi3+0x104>
 80002c0:	0b03      	lsrs	r3, r0, #12
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d319      	bcc.n	80002fa <__divsi3+0x72>
 80002c6:	e000      	b.n	80002ca <__divsi3+0x42>
 80002c8:	0a09      	lsrs	r1, r1, #8
 80002ca:	0bc3      	lsrs	r3, r0, #15
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x4c>
 80002d0:	03cb      	lsls	r3, r1, #15
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0b83      	lsrs	r3, r0, #14
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x58>
 80002dc:	038b      	lsls	r3, r1, #14
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0b43      	lsrs	r3, r0, #13
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x64>
 80002e8:	034b      	lsls	r3, r1, #13
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0b03      	lsrs	r3, r0, #12
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x70>
 80002f4:	030b      	lsls	r3, r1, #12
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0ac3      	lsrs	r3, r0, #11
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x7c>
 8000300:	02cb      	lsls	r3, r1, #11
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0a83      	lsrs	r3, r0, #10
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x88>
 800030c:	028b      	lsls	r3, r1, #10
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0a43      	lsrs	r3, r0, #9
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x94>
 8000318:	024b      	lsls	r3, r1, #9
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0a03      	lsrs	r3, r0, #8
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0xa0>
 8000324:	020b      	lsls	r3, r1, #8
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	d2cd      	bcs.n	80002c8 <__divsi3+0x40>
 800032c:	09c3      	lsrs	r3, r0, #7
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xae>
 8000332:	01cb      	lsls	r3, r1, #7
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0983      	lsrs	r3, r0, #6
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xba>
 800033e:	018b      	lsls	r3, r1, #6
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0943      	lsrs	r3, r0, #5
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xc6>
 800034a:	014b      	lsls	r3, r1, #5
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xd2>
 8000356:	010b      	lsls	r3, r1, #4
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	08c3      	lsrs	r3, r0, #3
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xde>
 8000362:	00cb      	lsls	r3, r1, #3
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0883      	lsrs	r3, r0, #2
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xea>
 800036e:	008b      	lsls	r3, r1, #2
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0843      	lsrs	r3, r0, #1
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xf6>
 800037a:	004b      	lsls	r3, r1, #1
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	1a41      	subs	r1, r0, r1
 8000382:	d200      	bcs.n	8000386 <__divsi3+0xfe>
 8000384:	4601      	mov	r1, r0
 8000386:	4152      	adcs	r2, r2
 8000388:	4610      	mov	r0, r2
 800038a:	4770      	bx	lr
 800038c:	e05d      	b.n	800044a <__divsi3+0x1c2>
 800038e:	0fca      	lsrs	r2, r1, #31
 8000390:	d000      	beq.n	8000394 <__divsi3+0x10c>
 8000392:	4249      	negs	r1, r1
 8000394:	1003      	asrs	r3, r0, #32
 8000396:	d300      	bcc.n	800039a <__divsi3+0x112>
 8000398:	4240      	negs	r0, r0
 800039a:	4053      	eors	r3, r2
 800039c:	2200      	movs	r2, #0
 800039e:	469c      	mov	ip, r3
 80003a0:	0903      	lsrs	r3, r0, #4
 80003a2:	428b      	cmp	r3, r1
 80003a4:	d32d      	bcc.n	8000402 <__divsi3+0x17a>
 80003a6:	0a03      	lsrs	r3, r0, #8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d312      	bcc.n	80003d2 <__divsi3+0x14a>
 80003ac:	22fc      	movs	r2, #252	; 0xfc
 80003ae:	0189      	lsls	r1, r1, #6
 80003b0:	ba12      	rev	r2, r2
 80003b2:	0a03      	lsrs	r3, r0, #8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d30c      	bcc.n	80003d2 <__divsi3+0x14a>
 80003b8:	0189      	lsls	r1, r1, #6
 80003ba:	1192      	asrs	r2, r2, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d308      	bcc.n	80003d2 <__divsi3+0x14a>
 80003c0:	0189      	lsls	r1, r1, #6
 80003c2:	1192      	asrs	r2, r2, #6
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d304      	bcc.n	80003d2 <__divsi3+0x14a>
 80003c8:	0189      	lsls	r1, r1, #6
 80003ca:	d03a      	beq.n	8000442 <__divsi3+0x1ba>
 80003cc:	1192      	asrs	r2, r2, #6
 80003ce:	e000      	b.n	80003d2 <__divsi3+0x14a>
 80003d0:	0989      	lsrs	r1, r1, #6
 80003d2:	09c3      	lsrs	r3, r0, #7
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x154>
 80003d8:	01cb      	lsls	r3, r1, #7
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	0983      	lsrs	r3, r0, #6
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x160>
 80003e4:	018b      	lsls	r3, r1, #6
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0943      	lsrs	r3, r0, #5
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x16c>
 80003f0:	014b      	lsls	r3, r1, #5
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	0903      	lsrs	r3, r0, #4
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x178>
 80003fc:	010b      	lsls	r3, r1, #4
 80003fe:	1ac0      	subs	r0, r0, r3
 8000400:	4152      	adcs	r2, r2
 8000402:	08c3      	lsrs	r3, r0, #3
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x184>
 8000408:	00cb      	lsls	r3, r1, #3
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0883      	lsrs	r3, r0, #2
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x190>
 8000414:	008b      	lsls	r3, r1, #2
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	d2d9      	bcs.n	80003d0 <__divsi3+0x148>
 800041c:	0843      	lsrs	r3, r0, #1
 800041e:	428b      	cmp	r3, r1
 8000420:	d301      	bcc.n	8000426 <__divsi3+0x19e>
 8000422:	004b      	lsls	r3, r1, #1
 8000424:	1ac0      	subs	r0, r0, r3
 8000426:	4152      	adcs	r2, r2
 8000428:	1a41      	subs	r1, r0, r1
 800042a:	d200      	bcs.n	800042e <__divsi3+0x1a6>
 800042c:	4601      	mov	r1, r0
 800042e:	4663      	mov	r3, ip
 8000430:	4152      	adcs	r2, r2
 8000432:	105b      	asrs	r3, r3, #1
 8000434:	4610      	mov	r0, r2
 8000436:	d301      	bcc.n	800043c <__divsi3+0x1b4>
 8000438:	4240      	negs	r0, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d500      	bpl.n	8000440 <__divsi3+0x1b8>
 800043e:	4249      	negs	r1, r1
 8000440:	4770      	bx	lr
 8000442:	4663      	mov	r3, ip
 8000444:	105b      	asrs	r3, r3, #1
 8000446:	d300      	bcc.n	800044a <__divsi3+0x1c2>
 8000448:	4240      	negs	r0, r0
 800044a:	b501      	push	{r0, lr}
 800044c:	2000      	movs	r0, #0
 800044e:	f000 f805 	bl	800045c <__aeabi_idiv0>
 8000452:	bd02      	pop	{r1, pc}

08000454 <__aeabi_idivmod>:
 8000454:	2900      	cmp	r1, #0
 8000456:	d0f8      	beq.n	800044a <__divsi3+0x1c2>
 8000458:	e716      	b.n	8000288 <__divsi3>
 800045a:	4770      	bx	lr

0800045c <__aeabi_idiv0>:
 800045c:	4770      	bx	lr
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000462:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000464:	2214      	movs	r2, #20
 8000466:	2100      	movs	r1, #0
 8000468:	a805      	add	r0, sp, #20
 800046a:	f00d fded 	bl	800e048 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800046e:	2004      	movs	r0, #4
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000470:	2520      	movs	r5, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000472:	2401      	movs	r4, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000474:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000476:	4b1e      	ldr	r3, [pc, #120]	; (80004f0 <MX_GPIO_Init+0x90>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000478:	27a0      	movs	r7, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800047a:	6b59      	ldr	r1, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800047c:	05ff      	lsls	r7, r7, #23
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800047e:	4301      	orrs	r1, r0
 8000480:	6359      	str	r1, [r3, #52]	; 0x34
 8000482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000484:	0029      	movs	r1, r5
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000486:	4002      	ands	r2, r0
 8000488:	9201      	str	r2, [sp, #4]
 800048a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800048c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800048e:	0038      	movs	r0, r7
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000490:	432a      	orrs	r2, r5
 8000492:	635a      	str	r2, [r3, #52]	; 0x34
 8000494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000496:	402a      	ands	r2, r5
 8000498:	9202      	str	r2, [sp, #8]
 800049a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800049e:	4322      	orrs	r2, r4
 80004a0:	635a      	str	r2, [r3, #52]	; 0x34
 80004a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004a4:	4022      	ands	r2, r4
 80004a6:	9203      	str	r2, [sp, #12]
 80004a8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004ac:	4332      	orrs	r2, r6
 80004ae:	635a      	str	r2, [r3, #52]	; 0x34
 80004b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80004b2:	0022      	movs	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b4:	4033      	ands	r3, r6
 80004b6:	9304      	str	r3, [sp, #16]
 80004b8:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80004ba:	f000 ff03 	bl	80012c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_RST_Pin|TFT_DC_Pin|TFT_CS_Pin|GPIO_PIN_10, GPIO_PIN_SET);
 80004be:	0022      	movs	r2, r4
 80004c0:	490c      	ldr	r1, [pc, #48]	; (80004f4 <MX_GPIO_Init+0x94>)
 80004c2:	480d      	ldr	r0, [pc, #52]	; (80004f8 <MX_GPIO_Init+0x98>)
 80004c4:	f000 fefe 	bl	80012c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80004c8:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ca:	2500      	movs	r5, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80004cc:	a905      	add	r1, sp, #20
 80004ce:	0038      	movs	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d4:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80004d6:	f000 fe47 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PB10 */
  GPIO_InitStruct.Pin = TFT_RST_Pin|TFT_DC_Pin|TFT_CS_Pin|GPIO_PIN_10;
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <MX_GPIO_Init+0x94>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004dc:	a905      	add	r1, sp, #20
 80004de:	4806      	ldr	r0, [pc, #24]	; (80004f8 <MX_GPIO_Init+0x98>)
  GPIO_InitStruct.Pin = TFT_RST_Pin|TFT_DC_Pin|TFT_CS_Pin|GPIO_PIN_10;
 80004e0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e6:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e8:	f000 fe3e 	bl	8001168 <HAL_GPIO_Init>

}
 80004ec:	b00b      	add	sp, #44	; 0x2c
 80004ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f0:	40021000 	.word	0x40021000
 80004f4:	00000407 	.word	0x00000407
 80004f8:	50000400 	.word	0x50000400

080004fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80004fc:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004fe:	4b13      	ldr	r3, [pc, #76]	; (800054c <MX_I2C1_Init+0x50>)
 8000500:	4c13      	ldr	r4, [pc, #76]	; (8000550 <MX_I2C1_Init+0x54>)
  hi2c1.Init.Timing = 0x10707DBC;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000502:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 8000504:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000506:	4b13      	ldr	r3, [pc, #76]	; (8000554 <MX_I2C1_Init+0x58>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000508:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x10707DBC;
 800050a:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800050c:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800050e:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 8000510:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000512:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000514:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000516:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000518:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800051a:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800051c:	f000 fed8 	bl	80012d0 <HAL_I2C_Init>
 8000520:	2800      	cmp	r0, #0
 8000522:	d001      	beq.n	8000528 <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 8000524:	f000 f904 	bl	8000730 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000528:	2100      	movs	r1, #0
 800052a:	0020      	movs	r0, r4
 800052c:	f000 ff26 	bl	800137c <HAL_I2CEx_ConfigAnalogFilter>
 8000530:	2800      	cmp	r0, #0
 8000532:	d001      	beq.n	8000538 <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
 8000534:	f000 f8fc 	bl	8000730 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000538:	2100      	movs	r1, #0
 800053a:	0020      	movs	r0, r4
 800053c:	f000 ff44 	bl	80013c8 <HAL_I2CEx_ConfigDigitalFilter>
 8000540:	2800      	cmp	r0, #0
 8000542:	d001      	beq.n	8000548 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000544:	f000 f8f4 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000548:	bd10      	pop	{r4, pc}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	40005400 	.word	0x40005400
 8000550:	20006ec8 	.word	0x20006ec8
 8000554:	10707dbc 	.word	0x10707dbc

08000558 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000558:	b510      	push	{r4, lr}
 800055a:	0004      	movs	r4, r0
 800055c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055e:	2214      	movs	r2, #20
 8000560:	2100      	movs	r1, #0
 8000562:	a803      	add	r0, sp, #12
 8000564:	f00d fd70 	bl	800e048 <memset>
  if(i2cHandle->Instance==I2C1)
 8000568:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <HAL_I2C_MspInit+0x58>)
 800056a:	6822      	ldr	r2, [r4, #0]
 800056c:	429a      	cmp	r2, r3
 800056e:	d11d      	bne.n	80005ac <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000570:	2102      	movs	r1, #2
 8000572:	4c10      	ldr	r4, [pc, #64]	; (80005b4 <HAL_I2C_MspInit+0x5c>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000574:	4810      	ldr	r0, [pc, #64]	; (80005b8 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000576:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000578:	430a      	orrs	r2, r1
 800057a:	6362      	str	r2, [r4, #52]	; 0x34
 800057c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800057e:	400b      	ands	r3, r1
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000584:	23c0      	movs	r3, #192	; 0xc0
 8000586:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000588:	3bae      	subs	r3, #174	; 0xae
 800058a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800058c:	3b11      	subs	r3, #17
 800058e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000590:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000592:	3305      	adds	r3, #5
 8000594:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000596:	f000 fde7 	bl	8001168 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800059a:	2180      	movs	r1, #128	; 0x80
 800059c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800059e:	0389      	lsls	r1, r1, #14
 80005a0:	430a      	orrs	r2, r1
 80005a2:	63e2      	str	r2, [r4, #60]	; 0x3c
 80005a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80005a6:	400b      	ands	r3, r1
 80005a8:	9302      	str	r3, [sp, #8]
 80005aa:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80005ac:	b008      	add	sp, #32
 80005ae:	bd10      	pop	{r4, pc}
 80005b0:	40005400 	.word	0x40005400
 80005b4:	40021000 	.word	0x40021000
 80005b8:	50000400 	.word	0x50000400

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005be:	2610      	movs	r6, #16
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	2580      	movs	r5, #128	; 0x80
{
 80005c2:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c4:	2234      	movs	r2, #52	; 0x34
 80005c6:	2100      	movs	r1, #0
 80005c8:	a80b      	add	r0, sp, #44	; 0x2c
 80005ca:	f00d fd3d 	bl	800e048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ce:	0032      	movs	r2, r6
 80005d0:	2100      	movs	r1, #0
 80005d2:	4668      	mov	r0, sp
 80005d4:	f00d fd38 	bl	800e048 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	00ad      	lsls	r5, r5, #2
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005da:	221c      	movs	r2, #28
 80005dc:	2100      	movs	r1, #0
 80005de:	a804      	add	r0, sp, #16
 80005e0:	f00d fd32 	bl	800e048 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	0028      	movs	r0, r5
 80005e6:	f000 ff13 	bl	8001410 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80005ea:	2309      	movs	r3, #9
 80005ec:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005ee:	23a0      	movs	r3, #160	; 0xa0
 80005f0:	02db      	lsls	r3, r3, #11
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005f4:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005f6:	2301      	movs	r3, #1
 80005f8:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fa:	191b      	adds	r3, r3, r4
 80005fc:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000602:	2380      	movs	r3, #128	; 0x80
 8000604:	029b      	lsls	r3, r3, #10
 8000606:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000608:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060a:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800060c:	059b      	lsls	r3, r3, #22
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000610:	9615      	str	r6, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000612:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f000 ff26 	bl	8001464 <HAL_RCC_OscConfig>
 8000618:	2800      	cmp	r0, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x64>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800061c:	b672      	cpsid	i
 800061e:	e7fe      	b.n	800061e <SystemClock_Config+0x62>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000622:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000624:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000626:	0021      	movs	r1, r4
 8000628:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062a:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062c:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800062e:	f001 f97f 	bl	8001930 <HAL_RCC_ClockConfig>
 8000632:	2800      	cmp	r0, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x7e>
 8000636:	b672      	cpsid	i
 8000638:	e7fe      	b.n	8000638 <SystemClock_Config+0x7c>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 800063a:	4b07      	ldr	r3, [pc, #28]	; (8000658 <SystemClock_Config+0x9c>)
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800063c:	9006      	str	r0, [sp, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800063e:	9007      	str	r0, [sp, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000640:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8000642:	9304      	str	r3, [sp, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000644:	950a      	str	r5, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000646:	f001 fa4f 	bl	8001ae8 <HAL_RCCEx_PeriphCLKConfig>
 800064a:	2800      	cmp	r0, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x96>
 800064e:	b672      	cpsid	i
 8000650:	e7fe      	b.n	8000650 <SystemClock_Config+0x94>
  {
    Error_Handler();
  }
}
 8000652:	b018      	add	sp, #96	; 0x60
 8000654:	bd70      	pop	{r4, r5, r6, pc}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	00020022 	.word	0x00020022

0800065c <main>:
{
 800065c:	b510      	push	{r4, lr}
 800065e:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8000660:	f000 fd08 	bl	8001074 <HAL_Init>
  SystemClock_Config();
 8000664:	f7ff ffaa 	bl	80005bc <SystemClock_Config>
  MX_GPIO_Init();
 8000668:	f7ff fefa 	bl	8000460 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800066c:	f000 fa36 	bl	8000adc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000670:	f7ff ff44 	bl	80004fc <MX_I2C1_Init>
  MX_RTC_Init();
 8000674:	f000 f85e 	bl	8000734 <MX_RTC_Init>
  MX_SPI1_Init();
 8000678:	f000 f8b8 	bl	80007ec <MX_SPI1_Init>
  MX_TIM1_Init();
 800067c:	f000 f9b2 	bl	80009e4 <MX_TIM1_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000680:	4c1c      	ldr	r4, [pc, #112]	; (80006f4 <main+0x98>)
 8000682:	2100      	movs	r1, #0
 8000684:	0020      	movs	r0, r4
 8000686:	f002 fad9 	bl	8002c3c <HAL_TIM_PWM_Start>
   __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 2048);	// PWM_CH1 = 2048 PWM_BRILHO_TFT
 800068a:	2280      	movs	r2, #128	; 0x80
 800068c:	6823      	ldr	r3, [r4, #0]
 800068e:	0112      	lsls	r2, r2, #4
 8000690:	635a      	str	r2, [r3, #52]	; 0x34
   ST7735_Init();
 8000692:	f000 fb19 	bl	8000cc8 <ST7735_Init>
   ST7735_AddrSet(0, 0, LV_HOR_RES_MAX-1, LV_VER_RES_MAX-1);
 8000696:	2100      	movs	r1, #0
 8000698:	237f      	movs	r3, #127	; 0x7f
 800069a:	0008      	movs	r0, r1
 800069c:	229f      	movs	r2, #159	; 0x9f
 800069e:	f000 fb9f 	bl	8000de0 <ST7735_AddrSet>
   ST7735_Clear(0x0000);
 80006a2:	2000      	movs	r0, #0
 80006a4:	f000 fbd2 	bl	8000e4c <ST7735_Clear>
   ST7735_Orientation(scr_CCW);
 80006a8:	2002      	movs	r0, #2
 80006aa:	f000 fadb 	bl	8000c64 <ST7735_Orientation>
   ST7735_PutStr5x7(40, 10, "Hello world!", RGB565(255,255,255));
 80006ae:	22ff      	movs	r2, #255	; 0xff
 80006b0:	0011      	movs	r1, r2
 80006b2:	0010      	movs	r0, r2
 80006b4:	f000 face 	bl	8000c54 <RGB565>
 80006b8:	4a0f      	ldr	r2, [pc, #60]	; (80006f8 <main+0x9c>)
 80006ba:	0003      	movs	r3, r0
 80006bc:	210a      	movs	r1, #10
 80006be:	2028      	movs	r0, #40	; 0x28
 80006c0:	f000 fcb0 	bl	8001024 <ST7735_PutStr5x7>
   lv_disp_buf_init(&disp_buf, buf, NULL, LV_HOR_RES_MAX * 10);    //Initialize the display buffer
 80006c4:	23c8      	movs	r3, #200	; 0xc8
 80006c6:	4c0d      	ldr	r4, [pc, #52]	; (80006fc <main+0xa0>)
 80006c8:	00db      	lsls	r3, r3, #3
 80006ca:	2200      	movs	r2, #0
 80006cc:	490c      	ldr	r1, [pc, #48]	; (8000700 <main+0xa4>)
 80006ce:	0020      	movs	r0, r4
 80006d0:	f00a fe42 	bl	800b358 <lv_disp_buf_init>
   lv_init();
 80006d4:	f002 ffb4 	bl	8003640 <lv_init>
   lv_disp_drv_init(&disp_drv);          //Basic initialization
 80006d8:	a801      	add	r0, sp, #4
 80006da:	f00a fe1b 	bl	800b314 <lv_disp_drv_init>
   disp_drv.hor_res = LV_HOR_RES_MAX;	//Set the horizontal resolution
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <main+0xa8>)
   lv_disp_drv_register(&disp_drv);      //Finally register the driver
 80006e0:	a801      	add	r0, sp, #4
   disp_drv.hor_res = LV_HOR_RES_MAX;	//Set the horizontal resolution
 80006e2:	9301      	str	r3, [sp, #4]
   disp_drv.flush_cb = ST7735_Flush;	//Set your driver function
 80006e4:	4b08      	ldr	r3, [pc, #32]	; (8000708 <main+0xac>)
   disp_drv.buffer = &disp_buf;          //Assign the buffer to teh display
 80006e6:	9402      	str	r4, [sp, #8]
   disp_drv.flush_cb = ST7735_Flush;	//Set your driver function
 80006e8:	9304      	str	r3, [sp, #16]
   lv_disp_drv_register(&disp_drv);      //Finally register the driver
 80006ea:	f00a fed9 	bl	800b4a0 <lv_disp_drv_register>
	  lv_task_handler();
 80006ee:	f00b fed5 	bl	800c49c <lv_task_handler>
 80006f2:	e7fc      	b.n	80006ee <main+0x92>
 80006f4:	20006ff0 	.word	0x20006ff0
 80006f8:	0800e08c 	.word	0x0800e08c
 80006fc:	20005cf0 	.word	0x20005cf0
 8000700:	20000070 	.word	0x20000070
 8000704:	008000a0 	.word	0x008000a0
 8000708:	08000eb9 	.word	0x08000eb9

0800070c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800070c:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800070e:	6803      	ldr	r3, [r0, #0]
 8000710:	4c06      	ldr	r4, [pc, #24]	; (800072c <HAL_TIM_PeriodElapsedCallback+0x20>)
{
 8000712:	0005      	movs	r5, r0
  if (htim->Instance == TIM6) {
 8000714:	42a3      	cmp	r3, r4
 8000716:	d101      	bne.n	800071c <HAL_TIM_PeriodElapsedCallback+0x10>
    HAL_IncTick();
 8000718:	f000 fcc0 	bl	800109c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM6) {
 800071c:	682b      	ldr	r3, [r5, #0]
 800071e:	42a3      	cmp	r3, r4
 8000720:	d102      	bne.n	8000728 <HAL_TIM_PeriodElapsedCallback+0x1c>
	  lv_tick_inc(1);
 8000722:	2001      	movs	r0, #1
 8000724:	f00a ff38 	bl	800b598 <lv_tick_inc>
  }
  /* USER CODE END Callback 1 */
}
 8000728:	bd70      	pop	{r4, r5, r6, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	40001000 	.word	0x40001000

08000730 <Error_Handler>:
 8000730:	b672      	cpsid	i
 8000732:	e7fe      	b.n	8000732 <Error_Handler+0x2>

08000734 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000734:	b570      	push	{r4, r5, r6, lr}
 8000736:	b086      	sub	sp, #24

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000738:	ae01      	add	r6, sp, #4
 800073a:	2214      	movs	r2, #20
 800073c:	2100      	movs	r1, #0
 800073e:	0030      	movs	r0, r6
 8000740:	f00d fc82 	bl	800e048 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000744:	4d19      	ldr	r5, [pc, #100]	; (80007ac <MX_RTC_Init+0x78>)
 8000746:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_RTC_Init+0x7c>)
  RTC_DateTypeDef sDate = {0};
 8000748:	2400      	movs	r4, #0
  hrtc.Instance = RTC;
 800074a:	602b      	str	r3, [r5, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 800074c:	237f      	movs	r3, #127	; 0x7f
 800074e:	60eb      	str	r3, [r5, #12]
  hrtc.Init.SynchPrediv = 255;
 8000750:	3380      	adds	r3, #128	; 0x80
 8000752:	612b      	str	r3, [r5, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000754:	2380      	movs	r3, #128	; 0x80
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000756:	0028      	movs	r0, r5
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000758:	05db      	lsls	r3, r3, #23
  RTC_DateTypeDef sDate = {0};
 800075a:	9400      	str	r4, [sp, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800075c:	60ac      	str	r4, [r5, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800075e:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000760:	61ac      	str	r4, [r5, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000762:	61ec      	str	r4, [r5, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000764:	622b      	str	r3, [r5, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000766:	626c      	str	r4, [r5, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000768:	f001 fad0 	bl	8001d0c <HAL_RTC_Init>
 800076c:	42a0      	cmp	r0, r4
 800076e:	d001      	beq.n	8000774 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8000770:	f7ff ffde 	bl	8000730 <Error_Handler>
  sTime.Minutes = 0x0;
  sTime.Seconds = 0x0;
  sTime.SubSeconds = 0x0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000774:	2201      	movs	r2, #1
 8000776:	0031      	movs	r1, r6
 8000778:	0028      	movs	r0, r5
  sTime.Hours = 0x0;
 800077a:	8034      	strh	r4, [r6, #0]
  sTime.Minutes = 0x0;
 800077c:	70b4      	strb	r4, [r6, #2]
  sTime.SubSeconds = 0x0;
 800077e:	6074      	str	r4, [r6, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000780:	60f4      	str	r4, [r6, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000782:	6134      	str	r4, [r6, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000784:	f001 fb1e 	bl	8001dc4 <HAL_RTC_SetTime>
 8000788:	2800      	cmp	r0, #0
 800078a:	d001      	beq.n	8000790 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 800078c:	f7ff ffd0 	bl	8000730 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_RTC_Init+0x80>)
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 0x1;
  sDate.Year = 0x0;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000792:	2201      	movs	r2, #1
 8000794:	4669      	mov	r1, sp
 8000796:	0028      	movs	r0, r5
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000798:	9300      	str	r3, [sp, #0]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800079a:	f001 fb7d 	bl	8001e98 <HAL_RTC_SetDate>
 800079e:	2800      	cmp	r0, #0
 80007a0:	d001      	beq.n	80007a6 <MX_RTC_Init+0x72>
  {
    Error_Handler();
 80007a2:	f7ff ffc5 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007a6:	b006      	add	sp, #24
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	20006f14 	.word	0x20006f14
 80007b0:	40002800 	.word	0x40002800
 80007b4:	00010101 	.word	0x00010101

080007b8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <HAL_RTC_MspInit+0x2c>)
 80007ba:	6802      	ldr	r2, [r0, #0]
{
 80007bc:	b082      	sub	sp, #8
  if(rtcHandle->Instance==RTC)
 80007be:	429a      	cmp	r2, r3
 80007c0:	d10e      	bne.n	80007e0 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80007c2:	2280      	movs	r2, #128	; 0x80
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <HAL_RTC_MspInit+0x30>)
 80007c6:	0212      	lsls	r2, r2, #8
 80007c8:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80007ca:	430a      	orrs	r2, r1
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80007cc:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_RTC_ENABLE();
 80007ce:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80007d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007d2:	00c9      	lsls	r1, r1, #3
 80007d4:	430a      	orrs	r2, r1
 80007d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80007d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007da:	400b      	ands	r3, r1
 80007dc:	9301      	str	r3, [sp, #4]
 80007de:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80007e0:	b002      	add	sp, #8
 80007e2:	4770      	bx	lr
 80007e4:	40002800 	.word	0x40002800
 80007e8:	40021000 	.word	0x40021000

080007ec <MX_SPI1_Init>:

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007ec:	22e0      	movs	r2, #224	; 0xe0
  hspi1.Instance = SPI1;
 80007ee:	4810      	ldr	r0, [pc, #64]	; (8000830 <MX_SPI1_Init+0x44>)
 80007f0:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_SPI1_Init+0x48>)
{
 80007f2:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 80007f4:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007f6:	2382      	movs	r3, #130	; 0x82
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f8:	00d2      	lsls	r2, r2, #3
 80007fa:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007fc:	2280      	movs	r2, #128	; 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	6043      	str	r3, [r0, #4]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8000802:	2107      	movs	r1, #7
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000804:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000806:	0092      	lsls	r2, r2, #2
 8000808:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800080a:	3af9      	subs	r2, #249	; 0xf9
 800080c:	3aff      	subs	r2, #255	; 0xff
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800080e:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000810:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000812:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000814:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000816:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000818:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800081a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800081c:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800081e:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000820:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000822:	f001 fc43 	bl	80020ac <HAL_SPI_Init>
 8000826:	2800      	cmp	r0, #0
 8000828:	d001      	beq.n	800082e <MX_SPI1_Init+0x42>
  {
    Error_Handler();
 800082a:	f7ff ff81 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800082e:	bd10      	pop	{r4, pc}
 8000830:	20006f40 	.word	0x20006f40
 8000834:	40013000 	.word	0x40013000

08000838 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000838:	b510      	push	{r4, lr}
 800083a:	0004      	movs	r4, r0
 800083c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	2214      	movs	r2, #20
 8000840:	2100      	movs	r1, #0
 8000842:	a803      	add	r0, sp, #12
 8000844:	f00d fc00 	bl	800e048 <memset>
  if(spiHandle->Instance==SPI1)
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <HAL_SPI_MspInit+0x50>)
 800084a:	6822      	ldr	r2, [r4, #0]
 800084c:	429a      	cmp	r2, r3
 800084e:	d118      	bne.n	8000882 <HAL_SPI_MspInit+0x4a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000850:	2080      	movs	r0, #128	; 0x80
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <HAL_SPI_MspInit+0x54>)
 8000854:	0140      	lsls	r0, r0, #5
 8000856:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000858:	4301      	orrs	r1, r0
 800085a:	6419      	str	r1, [r3, #64]	; 0x40
 800085c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800085e:	4002      	ands	r2, r0
 8000860:	9201      	str	r2, [sp, #4]
 8000862:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000864:	2202      	movs	r2, #2
 8000866:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000868:	4809      	ldr	r0, [pc, #36]	; (8000890 <HAL_SPI_MspInit+0x58>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	4311      	orrs	r1, r2
 800086c:	6359      	str	r1, [r3, #52]	; 0x34
 800086e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000870:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	4013      	ands	r3, r2
 8000874:	9302      	str	r3, [sp, #8]
 8000876:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000878:	2338      	movs	r3, #56	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800087c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087e:	f000 fc73 	bl	8001168 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000882:	b008      	add	sp, #32
 8000884:	bd10      	pop	{r4, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	40013000 	.word	0x40013000
 800088c:	40021000 	.word	0x40021000
 8000890:	50000400 	.word	0x50000400

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	2001      	movs	r0, #1
 8000898:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <HAL_MspInit+0x30>)
 800089a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800089c:	4301      	orrs	r1, r0
 800089e:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a0:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a4:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	4002      	ands	r2, r0
 80008a8:	9200      	str	r2, [sp, #0]
 80008aa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80008ae:	30bf      	adds	r0, #191	; 0xbf
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b0:	430a      	orrs	r2, r1
 80008b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80008b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80008b6:	00c0      	lsls	r0, r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b8:	400b      	ands	r3, r1
 80008ba:	9301      	str	r3, [sp, #4]
 80008bc:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80008be:	f000 fc11 	bl	80010e4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bd07      	pop	{r0, r1, r2, pc}
 80008c4:	40021000 	.word	0x40021000

080008c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c8:	b510      	push	{r4, lr}
 80008ca:	0001      	movs	r1, r0
 80008cc:	b086      	sub	sp, #24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2011      	movs	r0, #17
 80008d2:	f000 fc13 	bl	80010fc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80008d6:	2011      	movs	r0, #17
 80008d8:	f000 fc3a 	bl	8001150 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008dc:	2010      	movs	r0, #16
 80008de:	4a13      	ldr	r2, [pc, #76]	; (800092c <HAL_InitTick+0x64>)
 80008e0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80008e2:	4301      	orrs	r1, r0
 80008e4:	63d1      	str	r1, [r2, #60]	; 0x3c
 80008e6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008e8:	4669      	mov	r1, sp
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008ea:	4003      	ands	r3, r0
 80008ec:	9301      	str	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008ee:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008f0:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008f2:	f001 f8df 	bl	8001ab4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008f6:	f001 f8c9 	bl	8001a8c <HAL_RCC_GetPCLK1Freq>
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008fa:	4c0d      	ldr	r4, [pc, #52]	; (8000930 <HAL_InitTick+0x68>)
 80008fc:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <HAL_InitTick+0x6c>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008fe:	490e      	ldr	r1, [pc, #56]	; (8000938 <HAL_InitTick+0x70>)
  htim6.Instance = TIM6;
 8000900:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <HAL_InitTick+0x74>)
 8000904:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000906:	f7ff fc35 	bl	8000174 <__udivsi3>
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 800090a:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800090c:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 800090e:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000910:	0020      	movs	r0, r4
  htim6.Init.ClockDivision = 0;
 8000912:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000914:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000916:	f001 ff67 	bl	80027e8 <HAL_TIM_Base_Init>
 800091a:	0003      	movs	r3, r0
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
 800091c:	2001      	movs	r0, #1
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800091e:	2b00      	cmp	r3, #0
 8000920:	d102      	bne.n	8000928 <HAL_InitTick+0x60>
    return HAL_TIM_Base_Start_IT(&htim6);
 8000922:	0020      	movs	r0, r4
 8000924:	f001 fe2c 	bl	8002580 <HAL_TIM_Base_Start_IT>
}
 8000928:	b006      	add	sp, #24
 800092a:	bd10      	pop	{r4, pc}
 800092c:	40021000 	.word	0x40021000
 8000930:	20006fa4 	.word	0x20006fa4
 8000934:	40001000 	.word	0x40001000
 8000938:	000f4240 	.word	0x000f4240
 800093c:	000003e7 	.word	0x000003e7

08000940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000940:	e7fe      	b.n	8000940 <NMI_Handler>

08000942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000942:	e7fe      	b.n	8000942 <HardFault_Handler>

08000944 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000944:	4770      	bx	lr

08000946 <PendSV_Handler>:
 8000946:	4770      	bx	lr

08000948 <SysTick_Handler>:
 8000948:	4770      	bx	lr
	...

0800094c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800094c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800094e:	4802      	ldr	r0, [pc, #8]	; (8000958 <TIM6_IRQHandler+0xc>)
 8000950:	f001 fe4e 	bl	80025f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000954:	bd10      	pop	{r4, pc}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	20006fa4 	.word	0x20006fa4

0800095c <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800095c:	2280      	movs	r2, #128	; 0x80
 800095e:	4b02      	ldr	r3, [pc, #8]	; (8000968 <SystemInit+0xc>)
 8000960:	0512      	lsls	r2, r2, #20
 8000962:	609a      	str	r2, [r3, #8]
#endif
}
 8000964:	4770      	bx	lr
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <HAL_TIM_Base_MspInit+0x24>)
 800096e:	6802      	ldr	r2, [r0, #0]
{
 8000970:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM1)
 8000972:	429a      	cmp	r2, r3
 8000974:	d109      	bne.n	800098a <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000976:	2080      	movs	r0, #128	; 0x80
 8000978:	4a06      	ldr	r2, [pc, #24]	; (8000994 <HAL_TIM_Base_MspInit+0x28>)
 800097a:	0100      	lsls	r0, r0, #4
 800097c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800097e:	4301      	orrs	r1, r0
 8000980:	6411      	str	r1, [r2, #64]	; 0x40
 8000982:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000984:	4003      	ands	r3, r0
 8000986:	9301      	str	r3, [sp, #4]
 8000988:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800098a:	b002      	add	sp, #8
 800098c:	4770      	bx	lr
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	40012c00 	.word	0x40012c00
 8000994:	40021000 	.word	0x40021000

08000998 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000998:	b510      	push	{r4, lr}
 800099a:	0004      	movs	r4, r0
 800099c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	2214      	movs	r2, #20
 80009a0:	2100      	movs	r1, #0
 80009a2:	a801      	add	r0, sp, #4
 80009a4:	f00d fb50 	bl	800e048 <memset>
  if(timHandle->Instance==TIM1)
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <HAL_TIM_MspPostInit+0x44>)
 80009aa:	6822      	ldr	r2, [r4, #0]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d113      	bne.n	80009d8 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b0:	2001      	movs	r0, #1
 80009b2:	4a0b      	ldr	r2, [pc, #44]	; (80009e0 <HAL_TIM_MspPostInit+0x48>)
 80009b4:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80009b6:	4301      	orrs	r1, r0
 80009b8:	6351      	str	r1, [r2, #52]	; 0x34
 80009ba:	6b53      	ldr	r3, [r2, #52]	; 0x34
    GPIO_InitStruct.Pin = TFT_LED_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(TFT_LED_GPIO_Port, &GPIO_InitStruct);
 80009bc:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	4003      	ands	r3, r0
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = TFT_LED_Pin;
 80009c4:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(TFT_LED_GPIO_Port, &GPIO_InitStruct);
 80009c6:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = TFT_LED_Pin;
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(TFT_LED_GPIO_Port, &GPIO_InitStruct);
 80009cc:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	3bfe      	subs	r3, #254	; 0xfe
 80009d0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80009d2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(TFT_LED_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f000 fbc8 	bl	8001168 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80009d8:	b006      	add	sp, #24
 80009da:	bd10      	pop	{r4, pc}
 80009dc:	40012c00 	.word	0x40012c00
 80009e0:	40021000 	.word	0x40021000

080009e4 <MX_TIM1_Init>:
{
 80009e4:	b530      	push	{r4, r5, lr}
 80009e6:	b09d      	sub	sp, #116	; 0x74
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009e8:	2210      	movs	r2, #16
 80009ea:	2100      	movs	r1, #0
 80009ec:	a804      	add	r0, sp, #16
 80009ee:	f00d fb2b 	bl	800e048 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f2:	220c      	movs	r2, #12
 80009f4:	2100      	movs	r1, #0
 80009f6:	a801      	add	r0, sp, #4
 80009f8:	f00d fb26 	bl	800e048 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009fc:	221c      	movs	r2, #28
 80009fe:	2100      	movs	r1, #0
 8000a00:	a808      	add	r0, sp, #32
 8000a02:	f00d fb21 	bl	800e048 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a06:	2234      	movs	r2, #52	; 0x34
 8000a08:	2100      	movs	r1, #0
 8000a0a:	a80f      	add	r0, sp, #60	; 0x3c
 8000a0c:	f00d fb1c 	bl	800e048 <memset>
  htim1.Instance = TIM1;
 8000a10:	4d2f      	ldr	r5, [pc, #188]	; (8000ad0 <MX_TIM1_Init+0xec>)
 8000a12:	4b30      	ldr	r3, [pc, #192]	; (8000ad4 <MX_TIM1_Init+0xf0>)
  htim1.Init.Period = 65535;
 8000a14:	4a30      	ldr	r2, [pc, #192]	; (8000ad8 <MX_TIM1_Init+0xf4>)
  htim1.Instance = TIM1;
 8000a16:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 0;
 8000a18:	2300      	movs	r3, #0
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a1a:	0028      	movs	r0, r5
  htim1.Init.Prescaler = 0;
 8000a1c:	606b      	str	r3, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1e:	60ab      	str	r3, [r5, #8]
  htim1.Init.Period = 65535;
 8000a20:	60ea      	str	r2, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a22:	612b      	str	r3, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a24:	616b      	str	r3, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a26:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a28:	f001 fede 	bl	80027e8 <HAL_TIM_Base_Init>
 8000a2c:	2800      	cmp	r0, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM1_Init+0x50>
    Error_Handler();
 8000a30:	f7ff fe7e 	bl	8000730 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a34:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a36:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a38:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a3a:	0028      	movs	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a3c:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a3e:	f001 fff7 	bl	8002a30 <HAL_TIM_ConfigClockSource>
 8000a42:	2800      	cmp	r0, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM1_Init+0x66>
    Error_Handler();
 8000a46:	f7ff fe73 	bl	8000730 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a4a:	0028      	movs	r0, r5
 8000a4c:	f001 fef6 	bl	800283c <HAL_TIM_PWM_Init>
 8000a50:	2800      	cmp	r0, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM1_Init+0x74>
    Error_Handler();
 8000a54:	f7ff fe6c 	bl	8000730 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a58:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a5a:	a901      	add	r1, sp, #4
 8000a5c:	0028      	movs	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5e:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a60:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a62:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a64:	f002 f8ee 	bl	8002c44 <HAL_TIMEx_MasterConfigSynchronization>
 8000a68:	2800      	cmp	r0, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM1_Init+0x8c>
    Error_Handler();
 8000a6c:	f7ff fe60 	bl	8000730 <Error_Handler>
  sConfigOC.Pulse = 0;
 8000a70:	2400      	movs	r4, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a72:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a74:	0022      	movs	r2, r4
 8000a76:	a908      	add	r1, sp, #32
 8000a78:	0028      	movs	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a7a:	9308      	str	r3, [sp, #32]
  sConfigOC.Pulse = 0;
 8000a7c:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a7e:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a80:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a82:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a84:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a86:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a88:	f001 ff42 	bl	8002910 <HAL_TIM_PWM_ConfigChannel>
 8000a8c:	42a0      	cmp	r0, r4
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM1_Init+0xb0>
    Error_Handler();
 8000a90:	f7ff fe4e 	bl	8000730 <Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a94:	2380      	movs	r3, #128	; 0x80
 8000a96:	019b      	lsls	r3, r3, #6
 8000a98:	9314      	str	r3, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a9a:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a9c:	a90f      	add	r1, sp, #60	; 0x3c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a9e:	049b      	lsls	r3, r3, #18
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aa0:	0028      	movs	r0, r5
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aa2:	940f      	str	r4, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000aa4:	9410      	str	r4, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000aa6:	9411      	str	r4, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.DeadTime = 0;
 8000aa8:	9412      	str	r4, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aaa:	9413      	str	r4, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000aac:	9415      	str	r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000aae:	9416      	str	r4, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ab0:	9417      	str	r4, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ab2:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ab4:	9419      	str	r4, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ab6:	941a      	str	r4, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ab8:	941b      	str	r4, [sp, #108]	; 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aba:	f002 f8fb 	bl	8002cb4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM1_Init+0xe2>
    Error_Handler();
 8000ac2:	f7ff fe35 	bl	8000730 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8000ac6:	0028      	movs	r0, r5
 8000ac8:	f7ff ff66 	bl	8000998 <HAL_TIM_MspPostInit>
}
 8000acc:	b01d      	add	sp, #116	; 0x74
 8000ace:	bd30      	pop	{r4, r5, pc}
 8000ad0:	20006ff0 	.word	0x20006ff0
 8000ad4:	40012c00 	.word	0x40012c00
 8000ad8:	0000ffff 	.word	0x0000ffff

08000adc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000adc:	b510      	push	{r4, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ade:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <MX_USART2_UART_Init+0x68>)
 8000ae0:	4c19      	ldr	r4, [pc, #100]	; (8000b48 <MX_USART2_UART_Init+0x6c>)
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae2:	220c      	movs	r2, #12
  huart2.Instance = USART2;
 8000ae4:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 115200;
 8000ae6:	23e1      	movs	r3, #225	; 0xe1
 8000ae8:	025b      	lsls	r3, r3, #9
 8000aea:	6063      	str	r3, [r4, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 8000aec:	2380      	movs	r3, #128	; 0x80
 8000aee:	055b      	lsls	r3, r3, #21
 8000af0:	60a3      	str	r3, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000af2:	2300      	movs	r3, #0
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000af4:	0020      	movs	r0, r4
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000af6:	60e3      	str	r3, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000af8:	6123      	str	r3, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000afa:	6162      	str	r2, [r4, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afc:	61a3      	str	r3, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000afe:	61e3      	str	r3, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b00:	6223      	str	r3, [r4, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b02:	6263      	str	r3, [r4, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b04:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b06:	f002 fae7 	bl	80030d8 <HAL_UART_Init>
 8000b0a:	2800      	cmp	r0, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_USART2_UART_Init+0x36>
  {
    Error_Handler();
 8000b0e:	f7ff fe0f 	bl	8000730 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b12:	2100      	movs	r1, #0
 8000b14:	0020      	movs	r0, r4
 8000b16:	f002 fb63 	bl	80031e0 <HAL_UARTEx_SetTxFifoThreshold>
 8000b1a:	2800      	cmp	r0, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b1e:	f7ff fe07 	bl	8000730 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b22:	2100      	movs	r1, #0
 8000b24:	0020      	movs	r0, r4
 8000b26:	f002 fb7d 	bl	8003224 <HAL_UARTEx_SetRxFifoThreshold>
 8000b2a:	2800      	cmp	r0, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8000b2e:	f7ff fdff 	bl	8000730 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b32:	0020      	movs	r0, r4
 8000b34:	f002 fb36 	bl	80031a4 <HAL_UARTEx_DisableFifoMode>
 8000b38:	2800      	cmp	r0, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_USART2_UART_Init+0x64>
  {
    Error_Handler();
 8000b3c:	f7ff fdf8 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b40:	bd10      	pop	{r4, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	40004400 	.word	0x40004400
 8000b48:	2000703c 	.word	0x2000703c

08000b4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b4c:	b510      	push	{r4, lr}
 8000b4e:	0004      	movs	r4, r0
 8000b50:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b52:	2214      	movs	r2, #20
 8000b54:	2100      	movs	r1, #0
 8000b56:	a803      	add	r0, sp, #12
 8000b58:	f00d fa76 	bl	800e048 <memset>
  if(uartHandle->Instance==USART2)
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <HAL_UART_MspInit+0x58>)
 8000b5e:	6822      	ldr	r2, [r4, #0]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d11c      	bne.n	8000b9e <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b64:	2080      	movs	r0, #128	; 0x80
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <HAL_UART_MspInit+0x5c>)
 8000b68:	0280      	lsls	r0, r0, #10
 8000b6a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000b6c:	4301      	orrs	r1, r0
 8000b6e:	63d9      	str	r1, [r3, #60]	; 0x3c
 8000b70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b72:	4002      	ands	r2, r0
 8000b74:	9201      	str	r2, [sp, #4]
 8000b76:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	2201      	movs	r2, #1
 8000b7a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	4311      	orrs	r1, r2
 8000b80:	6359      	str	r1, [r3, #52]	; 0x34
 8000b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	4013      	ands	r3, r2
 8000b88:	9302      	str	r3, [sp, #8]
 8000b8a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b8c:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b90:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	3b0a      	subs	r3, #10
 8000b94:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b96:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b98:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f000 fae5 	bl	8001168 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b9e:	b008      	add	sp, #32
 8000ba0:	bd10      	pop	{r4, pc}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	40004400 	.word	0x40004400
 8000ba8:	40021000 	.word	0x40021000

08000bac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bac:	480d      	ldr	r0, [pc, #52]	; (8000be4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bb0:	f7ff fed4 	bl	800095c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb4:	480c      	ldr	r0, [pc, #48]	; (8000be8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bb6:	490d      	ldr	r1, [pc, #52]	; (8000bec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <LoopForever+0xe>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bcc:	4c0a      	ldr	r4, [pc, #40]	; (8000bf8 <LoopForever+0x16>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bda:	f00d f9f9 	bl	800dfd0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000bde:	f7ff fd3d 	bl	800065c <main>

08000be2 <LoopForever>:

LoopForever:
  b LoopForever
 8000be2:	e7fe      	b.n	8000be2 <LoopForever>
  ldr   r0, =_estack
 8000be4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bec:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000bf0:	0801186c 	.word	0x0801186c
  ldr r2, =_sbss
 8000bf4:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000bf8:	2000725c 	.word	0x2000725c

08000bfc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC1_IRQHandler>
	...

08000c00 <ST7735_write>:

uint16_t scr_width;
uint16_t scr_height;

void ST7735_write(uint8_t data)
{
 8000c00:	b507      	push	{r0, r1, r2, lr}
 8000c02:	466b      	mov	r3, sp
 8000c04:	1dd9      	adds	r1, r3, #7
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&data, 1, HAL_MAX_DELAY);
 8000c06:	2301      	movs	r3, #1
{
 8000c08:	7008      	strb	r0, [r1, #0]
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&data, 1, HAL_MAX_DELAY);
 8000c0a:	425b      	negs	r3, r3
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	4802      	ldr	r0, [pc, #8]	; (8000c18 <ST7735_write+0x18>)
 8000c10:	f001 fac4 	bl	800219c <HAL_SPI_Transmit>
}
 8000c14:	bd07      	pop	{r0, r1, r2, pc}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	20006f40 	.word	0x20006f40

08000c1c <ST7735_cmd>:
	tmp[0] = color >> 8;
	tmp[1] = color;
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&tmp[0], 2, HAL_MAX_DELAY);
}

void ST7735_cmd(uint8_t cmd) {
 8000c1c:	b510      	push	{r4, lr}
 8000c1e:	0004      	movs	r4, r0
	A0_L();
 8000c20:	2200      	movs	r2, #0
 8000c22:	2102      	movs	r1, #2
 8000c24:	4803      	ldr	r0, [pc, #12]	; (8000c34 <ST7735_cmd+0x18>)
 8000c26:	f000 fb4d 	bl	80012c4 <HAL_GPIO_WritePin>
	ST7735_write(cmd);
 8000c2a:	0020      	movs	r0, r4
 8000c2c:	f7ff ffe8 	bl	8000c00 <ST7735_write>
}
 8000c30:	bd10      	pop	{r4, pc}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	50000400 	.word	0x50000400

08000c38 <ST7735_data>:

void ST7735_data(uint8_t data) {
 8000c38:	b510      	push	{r4, lr}
 8000c3a:	0004      	movs	r4, r0
	A0_H();
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2102      	movs	r1, #2
 8000c40:	4803      	ldr	r0, [pc, #12]	; (8000c50 <ST7735_data+0x18>)
 8000c42:	f000 fb3f 	bl	80012c4 <HAL_GPIO_WritePin>
	ST7735_write(data);
 8000c46:	0020      	movs	r0, r4
 8000c48:	f7ff ffda 	bl	8000c00 <ST7735_write>
}
 8000c4c:	bd10      	pop	{r4, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	50000400 	.word	0x50000400

08000c54 <RGB565>:

uint16_t RGB565(uint8_t R,uint8_t G,uint8_t B) {
	return ((R >> 3) << 11) | ((G >> 2) << 5) | (B >> 3);
 8000c54:	0889      	lsrs	r1, r1, #2
 8000c56:	0149      	lsls	r1, r1, #5
 8000c58:	08d2      	lsrs	r2, r2, #3
 8000c5a:	08c0      	lsrs	r0, r0, #3
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	02c0      	lsls	r0, r0, #11
 8000c60:	4310      	orrs	r0, r2
}
 8000c62:	4770      	bx	lr

08000c64 <ST7735_Orientation>:

	ST7735_Orientation(scr_CCW);
	//ST7735_Orientation(scr_CW);
}

void ST7735_Orientation(ScrOrientation_TypeDef orientation) {
 8000c64:	b510      	push	{r4, lr}
	CS_L();
 8000c66:	2200      	movs	r2, #0
 8000c68:	2104      	movs	r1, #4
void ST7735_Orientation(ScrOrientation_TypeDef orientation) {
 8000c6a:	0004      	movs	r4, r0
	CS_L();
 8000c6c:	4813      	ldr	r0, [pc, #76]	; (8000cbc <ST7735_Orientation+0x58>)
 8000c6e:	f000 fb29 	bl	80012c4 <HAL_GPIO_WritePin>
	ST7735_cmd(0x36); // Memory data access control:
 8000c72:	2036      	movs	r0, #54	; 0x36
 8000c74:	f7ff ffd2 	bl	8000c1c <ST7735_cmd>
 8000c78:	4a11      	ldr	r2, [pc, #68]	; (8000cc0 <ST7735_Orientation+0x5c>)
 8000c7a:	20a0      	movs	r0, #160	; 0xa0
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <ST7735_Orientation+0x60>)
	switch(orientation) {
 8000c7e:	2c02      	cmp	r4, #2
 8000c80:	d00e      	beq.n	8000ca0 <ST7735_Orientation+0x3c>
 8000c82:	2180      	movs	r1, #128	; 0x80
 8000c84:	2c03      	cmp	r4, #3
 8000c86:	d010      	beq.n	8000caa <ST7735_Orientation+0x46>
 8000c88:	2c01      	cmp	r4, #1
 8000c8a:	d112      	bne.n	8000cb2 <ST7735_Orientation+0x4e>
	case scr_CW:
		scr_width  = TFT_H;
 8000c8c:	8010      	strh	r0, [r2, #0]
		scr_height = TFT_W;
 8000c8e:	8019      	strh	r1, [r3, #0]
		ST7735_data(0xc0); // X-Mirror,Y-Mirror: Bottom to top; Right to left; RGB
		break;
	default:
		scr_width  = TFT_W;
		scr_height = TFT_H;
		ST7735_data(0x00); // Normal: Top to Bottom; Left to Right; RGB
 8000c90:	f7ff ffd2 	bl	8000c38 <ST7735_data>
		break;
	}
	CS_H();
 8000c94:	2201      	movs	r2, #1
 8000c96:	2104      	movs	r1, #4
 8000c98:	4808      	ldr	r0, [pc, #32]	; (8000cbc <ST7735_Orientation+0x58>)
 8000c9a:	f000 fb13 	bl	80012c4 <HAL_GPIO_WritePin>
}
 8000c9e:	bd10      	pop	{r4, pc}
		scr_width  = TFT_H;
 8000ca0:	8010      	strh	r0, [r2, #0]
		scr_height = TFT_W;
 8000ca2:	2280      	movs	r2, #128	; 0x80
		ST7735_data(0x60); // X-Y Exchange,X-Mirror
 8000ca4:	2060      	movs	r0, #96	; 0x60
		scr_height = TFT_W;
 8000ca6:	801a      	strh	r2, [r3, #0]
 8000ca8:	e7f2      	b.n	8000c90 <ST7735_Orientation+0x2c>
		scr_height = TFT_H;
 8000caa:	8018      	strh	r0, [r3, #0]
		scr_width  = TFT_W;
 8000cac:	8011      	strh	r1, [r2, #0]
		ST7735_data(0xc0); // X-Mirror,Y-Mirror: Bottom to top; Right to left; RGB
 8000cae:	20c0      	movs	r0, #192	; 0xc0
 8000cb0:	e7ee      	b.n	8000c90 <ST7735_Orientation+0x2c>
		scr_height = TFT_H;
 8000cb2:	8018      	strh	r0, [r3, #0]
		scr_width  = TFT_W;
 8000cb4:	8011      	strh	r1, [r2, #0]
		ST7735_data(0x00); // Normal: Top to Bottom; Left to Right; RGB
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	e7ea      	b.n	8000c90 <ST7735_Orientation+0x2c>
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	50000400 	.word	0x50000400
 8000cc0:	200070cc 	.word	0x200070cc
 8000cc4:	200070ce 	.word	0x200070ce

08000cc8 <ST7735_Init>:
void ST7735_Init(void) {
 8000cc8:	b510      	push	{r4, lr}
	CS_H();
 8000cca:	4c44      	ldr	r4, [pc, #272]	; (8000ddc <ST7735_Init+0x114>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	0020      	movs	r0, r4
 8000cd0:	2104      	movs	r1, #4
 8000cd2:	f000 faf7 	bl	80012c4 <HAL_GPIO_WritePin>
	RST_H();
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	0020      	movs	r0, r4
 8000cda:	0011      	movs	r1, r2
 8000cdc:	f000 faf2 	bl	80012c4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000ce0:	2005      	movs	r0, #5
 8000ce2:	f000 f9ed 	bl	80010c0 <HAL_Delay>
	RST_L();
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2101      	movs	r1, #1
 8000cea:	0020      	movs	r0, r4
 8000cec:	f000 faea 	bl	80012c4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000cf0:	2005      	movs	r0, #5
 8000cf2:	f000 f9e5 	bl	80010c0 <HAL_Delay>
	RST_H();
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	0020      	movs	r0, r4
 8000cfa:	0011      	movs	r1, r2
 8000cfc:	f000 fae2 	bl	80012c4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000d00:	2005      	movs	r0, #5
 8000d02:	f000 f9dd 	bl	80010c0 <HAL_Delay>
	CS_L();
 8000d06:	2200      	movs	r2, #0
 8000d08:	2104      	movs	r1, #4
 8000d0a:	0020      	movs	r0, r4
 8000d0c:	f000 fada 	bl	80012c4 <HAL_GPIO_WritePin>
	ST7735_cmd(0x11); 	// Sleep out & booster on
 8000d10:	2011      	movs	r0, #17
 8000d12:	f7ff ff83 	bl	8000c1c <ST7735_cmd>
	HAL_Delay(25); 		// Datasheet says what display wakes about 120ms (may be much faster actually)
 8000d16:	2019      	movs	r0, #25
 8000d18:	f000 f9d2 	bl	80010c0 <HAL_Delay>
	ST7735_cmd(0xb1);   // In normal mode (full colors):
 8000d1c:	20b1      	movs	r0, #177	; 0xb1
 8000d1e:	f7ff ff7d 	bl	8000c1c <ST7735_cmd>
	A0_H();
 8000d22:	2201      	movs	r2, #1
 8000d24:	2102      	movs	r1, #2
 8000d26:	0020      	movs	r0, r4
 8000d28:	f000 facc 	bl	80012c4 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNA set 1-line period: RTNA2, RTNA0
 8000d2c:	2005      	movs	r0, #5
 8000d2e:	f7ff ff67 	bl	8000c00 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPA5,FPA4,FPA3,FPA2
 8000d32:	203c      	movs	r0, #60	; 0x3c
 8000d34:	f7ff ff64 	bl	8000c00 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPA5,BPA4,BPA3,BPA2
 8000d38:	203c      	movs	r0, #60	; 0x3c
 8000d3a:	f7ff ff61 	bl	8000c00 <ST7735_write>
	ST7735_cmd(0xb2);   // In idle mode (8-colors):
 8000d3e:	20b2      	movs	r0, #178	; 0xb2
 8000d40:	f7ff ff6c 	bl	8000c1c <ST7735_cmd>
	A0_H();
 8000d44:	2201      	movs	r2, #1
 8000d46:	2102      	movs	r1, #2
 8000d48:	0020      	movs	r0, r4
 8000d4a:	f000 fabb 	bl	80012c4 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNB set 1-line period: RTNAB, RTNB0
 8000d4e:	2005      	movs	r0, #5
 8000d50:	f7ff ff56 	bl	8000c00 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPB5,FPB4,FPB3,FPB2
 8000d54:	203c      	movs	r0, #60	; 0x3c
 8000d56:	f7ff ff53 	bl	8000c00 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPB5,BPB4,BPB3,BPB2
 8000d5a:	203c      	movs	r0, #60	; 0x3c
 8000d5c:	f7ff ff50 	bl	8000c00 <ST7735_write>
	ST7735_cmd(0xb3);   // In partial mode + full colors:
 8000d60:	20b3      	movs	r0, #179	; 0xb3
 8000d62:	f7ff ff5b 	bl	8000c1c <ST7735_cmd>
	A0_H();
 8000d66:	2201      	movs	r2, #1
 8000d68:	2102      	movs	r1, #2
 8000d6a:	0020      	movs	r0, r4
 8000d6c:	f000 faaa 	bl	80012c4 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNC set 1-line period: RTNC2, RTNC0
 8000d70:	2005      	movs	r0, #5
 8000d72:	f7ff ff45 	bl	8000c00 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPC5,FPC4,FPC3,FPC2
 8000d76:	203c      	movs	r0, #60	; 0x3c
 8000d78:	f7ff ff42 	bl	8000c00 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPC5,BPC4,BPC3,BPC2
 8000d7c:	203c      	movs	r0, #60	; 0x3c
 8000d7e:	f7ff ff3f 	bl	8000c00 <ST7735_write>
	ST7735_write(0x05); //   RTND set 1-line period: RTND2, RTND0
 8000d82:	2005      	movs	r0, #5
 8000d84:	f7ff ff3c 	bl	8000c00 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPD5,FPD4,FPD3,FPD2
 8000d88:	203c      	movs	r0, #60	; 0x3c
 8000d8a:	f7ff ff39 	bl	8000c00 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPD5,BPD4,BPD3,BPD2
 8000d8e:	203c      	movs	r0, #60	; 0x3c
 8000d90:	f7ff ff36 	bl	8000c00 <ST7735_write>
	ST7735_cmd(0xB4);   // Display dot inversion control:
 8000d94:	20b4      	movs	r0, #180	; 0xb4
 8000d96:	f7ff ff41 	bl	8000c1c <ST7735_cmd>
	ST7735_data(0x03);  //   NLB,NLC
 8000d9a:	2003      	movs	r0, #3
 8000d9c:	f7ff ff4c 	bl	8000c38 <ST7735_data>
	ST7735_cmd(0x3a);   // Interface pixel format
 8000da0:	203a      	movs	r0, #58	; 0x3a
 8000da2:	f7ff ff3b 	bl	8000c1c <ST7735_cmd>
	ST7735_data(0x05);  // 16-bit/pixel RGB 5-6-5 (65k colors)
 8000da6:	2005      	movs	r0, #5
 8000da8:	f7ff ff46 	bl	8000c38 <ST7735_data>
	ST7735_cmd(0x20);   // Display inversion off
 8000dac:	2020      	movs	r0, #32
 8000dae:	f7ff ff35 	bl	8000c1c <ST7735_cmd>
	ST7735_cmd(0x13);   // Partial mode off
 8000db2:	2013      	movs	r0, #19
 8000db4:	f7ff ff32 	bl	8000c1c <ST7735_cmd>
	ST7735_cmd(0x26);   // Gamma curve set:
 8000db8:	2026      	movs	r0, #38	; 0x26
 8000dba:	f7ff ff2f 	bl	8000c1c <ST7735_cmd>
	ST7735_data(0x01);  //   Gamma curve 1 (G2.2) or (G1.0)
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f7ff ff3a 	bl	8000c38 <ST7735_data>
	ST7735_cmd(0x29);   // Display on
 8000dc4:	2029      	movs	r0, #41	; 0x29
 8000dc6:	f7ff ff29 	bl	8000c1c <ST7735_cmd>
	CS_H();
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2104      	movs	r1, #4
 8000dce:	0020      	movs	r0, r4
 8000dd0:	f000 fa78 	bl	80012c4 <HAL_GPIO_WritePin>
	ST7735_Orientation(scr_CCW);
 8000dd4:	2002      	movs	r0, #2
 8000dd6:	f7ff ff45 	bl	8000c64 <ST7735_Orientation>
}
 8000dda:	bd10      	pop	{r4, pc}
 8000ddc:	50000400 	.word	0x50000400

08000de0 <ST7735_AddrSet>:

void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE) {
 8000de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000de2:	0006      	movs	r6, r0
 8000de4:	0015      	movs	r5, r2
 8000de6:	000c      	movs	r4, r1
	ST7735_cmd(0x2a); // Column address set
	A0_H();
 8000de8:	4f17      	ldr	r7, [pc, #92]	; (8000e48 <ST7735_AddrSet+0x68>)
	ST7735_cmd(0x2a); // Column address set
 8000dea:	202a      	movs	r0, #42	; 0x2a
void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE) {
 8000dec:	9301      	str	r3, [sp, #4]
	ST7735_cmd(0x2a); // Column address set
 8000dee:	f7ff ff15 	bl	8000c1c <ST7735_cmd>
	A0_H();
 8000df2:	2201      	movs	r2, #1
 8000df4:	2102      	movs	r1, #2
 8000df6:	0038      	movs	r0, r7
 8000df8:	f000 fa64 	bl	80012c4 <HAL_GPIO_WritePin>
	ST7735_write(XS >> 8);
 8000dfc:	0a30      	lsrs	r0, r6, #8
 8000dfe:	f7ff feff 	bl	8000c00 <ST7735_write>
	ST7735_write(XS);
 8000e02:	b2f0      	uxtb	r0, r6
 8000e04:	f7ff fefc 	bl	8000c00 <ST7735_write>
	ST7735_write(XE >> 8);
 8000e08:	0a28      	lsrs	r0, r5, #8
 8000e0a:	f7ff fef9 	bl	8000c00 <ST7735_write>
	ST7735_write(XE);
 8000e0e:	b2e8      	uxtb	r0, r5
 8000e10:	f7ff fef6 	bl	8000c00 <ST7735_write>

	ST7735_cmd(0x2b); // Row address set
 8000e14:	202b      	movs	r0, #43	; 0x2b
 8000e16:	f7ff ff01 	bl	8000c1c <ST7735_cmd>
	A0_H();
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	0038      	movs	r0, r7
 8000e20:	f000 fa50 	bl	80012c4 <HAL_GPIO_WritePin>
	ST7735_write(YS >> 8);
 8000e24:	0a20      	lsrs	r0, r4, #8
 8000e26:	f7ff feeb 	bl	8000c00 <ST7735_write>
	ST7735_write(YS);
 8000e2a:	b2e0      	uxtb	r0, r4
 8000e2c:	f7ff fee8 	bl	8000c00 <ST7735_write>
	ST7735_write(YE >> 8);
 8000e30:	9b01      	ldr	r3, [sp, #4]
 8000e32:	0a18      	lsrs	r0, r3, #8
 8000e34:	f7ff fee4 	bl	8000c00 <ST7735_write>
	ST7735_write(YE);
 8000e38:	466b      	mov	r3, sp
 8000e3a:	7918      	ldrb	r0, [r3, #4]
 8000e3c:	f7ff fee0 	bl	8000c00 <ST7735_write>

	ST7735_cmd(0x2c); // Memory write
 8000e40:	202c      	movs	r0, #44	; 0x2c
 8000e42:	f7ff feeb 	bl	8000c1c <ST7735_cmd>
}
 8000e46:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8000e48:	50000400 	.word	0x50000400

08000e4c <ST7735_Clear>:

void ST7735_Clear(uint16_t color) {
 8000e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t i;
	uint8_t  CH,CL;

	CH = color >> 8;
 8000e4e:	0a03      	lsrs	r3, r0, #8
	CL = (uint8_t)color;

	CS_L();
 8000e50:	2200      	movs	r2, #0
 8000e52:	2104      	movs	r1, #4
	CL = (uint8_t)color;
 8000e54:	b2c5      	uxtb	r5, r0
	CS_L();
 8000e56:	4815      	ldr	r0, [pc, #84]	; (8000eac <ST7735_Clear+0x60>)
	CH = color >> 8;
 8000e58:	9301      	str	r3, [sp, #4]
	CS_L();
 8000e5a:	f000 fa33 	bl	80012c4 <HAL_GPIO_WritePin>
	ST7735_AddrSet(0, 0, scr_width - 1, scr_height - 1);
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4e13      	ldr	r6, [pc, #76]	; (8000eb0 <ST7735_Clear+0x64>)
 8000e62:	4f14      	ldr	r7, [pc, #80]	; (8000eb4 <ST7735_Clear+0x68>)
 8000e64:	8833      	ldrh	r3, [r6, #0]
 8000e66:	883a      	ldrh	r2, [r7, #0]
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	3a01      	subs	r2, #1
 8000e6c:	0008      	movs	r0, r1
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	b292      	uxth	r2, r2
 8000e72:	f7ff ffb5 	bl	8000de0 <ST7735_AddrSet>
	A0_H();
 8000e76:	2201      	movs	r2, #1
 8000e78:	2102      	movs	r1, #2
 8000e7a:	480c      	ldr	r0, [pc, #48]	; (8000eac <ST7735_Clear+0x60>)
 8000e7c:	f000 fa22 	bl	80012c4 <HAL_GPIO_WritePin>
	for (i = 0; i < scr_width * scr_height; i++) {
 8000e80:	2400      	movs	r4, #0
 8000e82:	883a      	ldrh	r2, [r7, #0]
 8000e84:	8833      	ldrh	r3, [r6, #0]
 8000e86:	4353      	muls	r3, r2
 8000e88:	429c      	cmp	r4, r3
 8000e8a:	db05      	blt.n	8000e98 <ST7735_Clear+0x4c>
		ST7735_write(CH);
		ST7735_write(CL);
	}
	CS_H();
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2104      	movs	r1, #4
 8000e90:	4806      	ldr	r0, [pc, #24]	; (8000eac <ST7735_Clear+0x60>)
 8000e92:	f000 fa17 	bl	80012c4 <HAL_GPIO_WritePin>
}
 8000e96:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		ST7735_write(CH);
 8000e98:	9801      	ldr	r0, [sp, #4]
 8000e9a:	f7ff feb1 	bl	8000c00 <ST7735_write>
	for (i = 0; i < scr_width * scr_height; i++) {
 8000e9e:	3401      	adds	r4, #1
		ST7735_write(CL);
 8000ea0:	0028      	movs	r0, r5
 8000ea2:	f7ff fead 	bl	8000c00 <ST7735_write>
	for (i = 0; i < scr_width * scr_height; i++) {
 8000ea6:	b2a4      	uxth	r4, r4
 8000ea8:	e7eb      	b.n	8000e82 <ST7735_Clear+0x36>
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	50000400 	.word	0x50000400
 8000eb0:	200070ce 	.word	0x200070ce
 8000eb4:	200070cc 	.word	0x200070cc

08000eb8 <ST7735_Flush>:

void ST7735_Flush(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p)
{
 8000eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eba:	000e      	movs	r6, r1
	uint16_t size;

    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8000ebc:	2304      	movs	r3, #4
 8000ebe:	5ecc      	ldrsh	r4, [r1, r3]
{
 8000ec0:	0017      	movs	r7, r2
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	5e8b      	ldrsh	r3, [r1, r2]
{
 8000ec6:	0005      	movs	r5, r0
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8000ec8:	1ae4      	subs	r4, r4, r3
 8000eca:	2306      	movs	r3, #6
 8000ecc:	5eca      	ldrsh	r2, [r1, r3]
 8000ece:	2102      	movs	r1, #2
 8000ed0:	5e73      	ldrsh	r3, [r6, r1]
 8000ed2:	3401      	adds	r4, #1
 8000ed4:	1ad2      	subs	r2, r2, r3
 8000ed6:	3201      	adds	r2, #1

	CS_L();
 8000ed8:	2104      	movs	r1, #4
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8000eda:	4354      	muls	r4, r2
	CS_L();
 8000edc:	4829      	ldr	r0, [pc, #164]	; (8000f84 <ST7735_Flush+0xcc>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f000 f9f0 	bl	80012c4 <HAL_GPIO_WritePin>
    ST7735_cmd(0x2a); // Column address set
 8000ee4:	202a      	movs	r0, #42	; 0x2a
 8000ee6:	f7ff fe99 	bl	8000c1c <ST7735_cmd>
	A0_H();
 8000eea:	2201      	movs	r2, #1
 8000eec:	2102      	movs	r1, #2
 8000eee:	4825      	ldr	r0, [pc, #148]	; (8000f84 <ST7735_Flush+0xcc>)
 8000ef0:	f000 f9e8 	bl	80012c4 <HAL_GPIO_WritePin>
	ST7735_write(area->x1 >> 8);
 8000ef4:	7870      	ldrb	r0, [r6, #1]
 8000ef6:	f7ff fe83 	bl	8000c00 <ST7735_write>
	ST7735_write(area->x1);
 8000efa:	7830      	ldrb	r0, [r6, #0]
 8000efc:	f7ff fe80 	bl	8000c00 <ST7735_write>
	ST7735_write(area->x2 >> 8);
 8000f00:	7970      	ldrb	r0, [r6, #5]
 8000f02:	f7ff fe7d 	bl	8000c00 <ST7735_write>
	ST7735_write(area->x2);
 8000f06:	7930      	ldrb	r0, [r6, #4]
 8000f08:	f7ff fe7a 	bl	8000c00 <ST7735_write>

	ST7735_cmd(0x2b); // Row address set
 8000f0c:	202b      	movs	r0, #43	; 0x2b
 8000f0e:	f7ff fe85 	bl	8000c1c <ST7735_cmd>
	A0_H();
 8000f12:	2201      	movs	r2, #1
 8000f14:	2102      	movs	r1, #2
 8000f16:	481b      	ldr	r0, [pc, #108]	; (8000f84 <ST7735_Flush+0xcc>)
 8000f18:	f000 f9d4 	bl	80012c4 <HAL_GPIO_WritePin>
	ST7735_write(area->y1 >> 8);
 8000f1c:	78f0      	ldrb	r0, [r6, #3]
 8000f1e:	f7ff fe6f 	bl	8000c00 <ST7735_write>
	ST7735_write(area->y1);
 8000f22:	78b0      	ldrb	r0, [r6, #2]
 8000f24:	f7ff fe6c 	bl	8000c00 <ST7735_write>
	ST7735_write(area->y2 >> 8);
 8000f28:	79f0      	ldrb	r0, [r6, #7]
 8000f2a:	f7ff fe69 	bl	8000c00 <ST7735_write>
	ST7735_write(area->y2);
 8000f2e:	79b0      	ldrb	r0, [r6, #6]
 8000f30:	f7ff fe66 	bl	8000c00 <ST7735_write>

	ST7735_cmd(0x2c); // Memory write
 8000f34:	202c      	movs	r0, #44	; 0x2c
 8000f36:	f7ff fe71 	bl	8000c1c <ST7735_cmd>
	A0_H();
 8000f3a:	2102      	movs	r1, #2
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	4811      	ldr	r0, [pc, #68]	; (8000f84 <ST7735_Flush+0xcc>)
 8000f40:	f000 f9c0 	bl	80012c4 <HAL_GPIO_WritePin>


	//
	for(uint16_t p = 0; p <= size-1; p++) {
 8000f44:	2300      	movs	r3, #0
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	490f      	ldr	r1, [pc, #60]	; (8000f88 <ST7735_Flush+0xd0>)
 8000f4a:	0066      	lsls	r6, r4, #1
	for(uint16_t p = 0; p <= size-1; p++) {
 8000f4c:	429e      	cmp	r6, r3
 8000f4e:	d111      	bne.n	8000f74 <ST7735_Flush+0xbc>
		buf_tft[p*2] = color_p->full >> 8;
		buf_tft[(p*2)+1] = color_p->full;
		color_p++;
	}
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&buf_tft[0], ((size-1)*2), HAL_MAX_DELAY);
 8000f50:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <ST7735_Flush+0xd4>)
 8000f52:	480f      	ldr	r0, [pc, #60]	; (8000f90 <ST7735_Flush+0xd8>)
 8000f54:	18e4      	adds	r4, r4, r3
 8000f56:	2301      	movs	r3, #1
 8000f58:	0064      	lsls	r4, r4, #1
 8000f5a:	425b      	negs	r3, r3
 8000f5c:	b2a2      	uxth	r2, r4
 8000f5e:	f001 f91d 	bl	800219c <HAL_SPI_Transmit>
		color_p++;
		teste++;
	}
	//
*/
	CS_H();
 8000f62:	2201      	movs	r2, #1
 8000f64:	2104      	movs	r1, #4
 8000f66:	4807      	ldr	r0, [pc, #28]	; (8000f84 <ST7735_Flush+0xcc>)
 8000f68:	f000 f9ac 	bl	80012c4 <HAL_GPIO_WritePin>

	lv_disp_flush_ready(disp_drv);                  /* Tell you are ready with the flushing*/
 8000f6c:	0028      	movs	r0, r5
 8000f6e:	f00a fa65 	bl	800b43c <lv_disp_flush_ready>
}
 8000f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		buf_tft[p*2] = color_p->full >> 8;
 8000f74:	5afa      	ldrh	r2, [r7, r3]
 8000f76:	18c8      	adds	r0, r1, r3
 8000f78:	0a12      	lsrs	r2, r2, #8
 8000f7a:	7002      	strb	r2, [r0, #0]
		buf_tft[(p*2)+1] = color_p->full;
 8000f7c:	5afa      	ldrh	r2, [r7, r3]
 8000f7e:	3302      	adds	r3, #2
 8000f80:	7042      	strb	r2, [r0, #1]
 8000f82:	e7e3      	b.n	8000f4c <ST7735_Flush+0x94>
 8000f84:	50000400 	.word	0x50000400
 8000f88:	20000cf0 	.word	0x20000cf0
 8000f8c:	00007fff 	.word	0x00007fff
 8000f90:	20006f40 	.word	0x20006f40

08000f94 <ST7735_PutChar5x7>:
		ST7735_write(CL);
	}
	CS_H();
}

void ST7735_PutChar5x7(uint16_t X, uint16_t Y, uint8_t chr, uint16_t color) {
 8000f94:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t i,j;
	uint8_t buffer[5];
    uint8_t CH = color >> 8;
    uint8_t CL = (uint8_t)color;

	memcpy(buffer,&Font5x7[(chr - 32) * 5],5);
 8000f96:	3a20      	subs	r2, #32
void ST7735_PutChar5x7(uint16_t X, uint16_t Y, uint8_t chr, uint16_t color) {
 8000f98:	b085      	sub	sp, #20
 8000f9a:	000d      	movs	r5, r1
    uint8_t CH = color >> 8;
 8000f9c:	0a19      	lsrs	r1, r3, #8
 8000f9e:	9101      	str	r1, [sp, #4]
	memcpy(buffer,&Font5x7[(chr - 32) * 5],5);
 8000fa0:	0011      	movs	r1, r2
 8000fa2:	2205      	movs	r2, #5
void ST7735_PutChar5x7(uint16_t X, uint16_t Y, uint8_t chr, uint16_t color) {
 8000fa4:	0004      	movs	r4, r0
	memcpy(buffer,&Font5x7[(chr - 32) * 5],5);
 8000fa6:	4351      	muls	r1, r2
    uint8_t CL = (uint8_t)color;
 8000fa8:	b2df      	uxtb	r7, r3
	memcpy(buffer,&Font5x7[(chr - 32) * 5],5);
 8000faa:	4b1c      	ldr	r3, [pc, #112]	; (800101c <ST7735_PutChar5x7+0x88>)
 8000fac:	a802      	add	r0, sp, #8
 8000fae:	18c9      	adds	r1, r1, r3
 8000fb0:	f00d f841 	bl	800e036 <memcpy>

	CS_L();
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2104      	movs	r1, #4
 8000fb8:	4819      	ldr	r0, [pc, #100]	; (8001020 <ST7735_PutChar5x7+0x8c>)
 8000fba:	f000 f983 	bl	80012c4 <HAL_GPIO_WritePin>
	ST7735_AddrSet(X,Y,X + 4,Y + 6);
 8000fbe:	1dab      	adds	r3, r5, #6
 8000fc0:	1d22      	adds	r2, r4, #4
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	b292      	uxth	r2, r2
 8000fc6:	0029      	movs	r1, r5
 8000fc8:	0020      	movs	r0, r4
 8000fca:	f7ff ff09 	bl	8000de0 <ST7735_AddrSet>
	A0_H();
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2102      	movs	r1, #2
 8000fd2:	4813      	ldr	r0, [pc, #76]	; (8001020 <ST7735_PutChar5x7+0x8c>)
 8000fd4:	f000 f976 	bl	80012c4 <HAL_GPIO_WritePin>
 8000fd8:	2600      	movs	r6, #0
 8000fda:	2301      	movs	r3, #1
 8000fdc:	40b3      	lsls	r3, r6
	for (j = 0; j < 7; j++) {
        for (i = 0; i < 5; i++) {
    		if ((buffer[i] >> j) & 0x01) {
 8000fde:	2500      	movs	r5, #0
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	ab02      	add	r3, sp, #8
 8000fe4:	5d5c      	ldrb	r4, [r3, r5]
 8000fe6:	9b00      	ldr	r3, [sp, #0]
 8000fe8:	401c      	ands	r4, r3
 8000fea:	d012      	beq.n	8001012 <ST7735_PutChar5x7+0x7e>
    			ST7735_write(CH);
 8000fec:	9801      	ldr	r0, [sp, #4]
 8000fee:	f7ff fe07 	bl	8000c00 <ST7735_write>
    			ST7735_write(CL);
 8000ff2:	0038      	movs	r0, r7
 8000ff4:	3501      	adds	r5, #1
    		} else {
    			ST7735_write(0x00);
    			ST7735_write(0x00);
 8000ff6:	f7ff fe03 	bl	8000c00 <ST7735_write>
        for (i = 0; i < 5; i++) {
 8000ffa:	2d05      	cmp	r5, #5
 8000ffc:	d1f1      	bne.n	8000fe2 <ST7735_PutChar5x7+0x4e>
 8000ffe:	3601      	adds	r6, #1
	for (j = 0; j < 7; j++) {
 8001000:	2e07      	cmp	r6, #7
 8001002:	d1ea      	bne.n	8000fda <ST7735_PutChar5x7+0x46>
    		}
    	}
    }
	CS_H();
 8001004:	2201      	movs	r2, #1
 8001006:	2104      	movs	r1, #4
 8001008:	4805      	ldr	r0, [pc, #20]	; (8001020 <ST7735_PutChar5x7+0x8c>)
 800100a:	f000 f95b 	bl	80012c4 <HAL_GPIO_WritePin>
}
 800100e:	b005      	add	sp, #20
 8001010:	bdf0      	pop	{r4, r5, r6, r7, pc}
    			ST7735_write(0x00);
 8001012:	0020      	movs	r0, r4
 8001014:	f7ff fdf4 	bl	8000c00 <ST7735_write>
    			ST7735_write(0x00);
 8001018:	0020      	movs	r0, r4
 800101a:	e7eb      	b.n	8000ff4 <ST7735_PutChar5x7+0x60>
 800101c:	0800e0fc 	.word	0x0800e0fc
 8001020:	50000400 	.word	0x50000400

08001024 <ST7735_PutStr5x7>:

void ST7735_PutStr5x7(uint8_t X, uint8_t Y, char *str, uint16_t color) {
 8001024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001026:	0004      	movs	r4, r0
 8001028:	000d      	movs	r5, r1
 800102a:	0016      	movs	r6, r2
 800102c:	001f      	movs	r7, r3
    while (*str) {
 800102e:	7832      	ldrb	r2, [r6, #0]
 8001030:	2a00      	cmp	r2, #0
 8001032:	d100      	bne.n	8001036 <ST7735_PutStr5x7+0x12>
        ST7735_PutChar5x7(X, Y, *str++, color);
        if (X < scr_width - 6) { X += 6; } else if (Y < scr_height - 8) { X = 0; Y += 8; } else { X = 0; Y = 0; }
    };
}
 8001034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ST7735_PutChar5x7(X, Y, *str++, color);
 8001036:	003b      	movs	r3, r7
 8001038:	b2a9      	uxth	r1, r5
 800103a:	b2a0      	uxth	r0, r4
 800103c:	f7ff ffaa 	bl	8000f94 <ST7735_PutChar5x7>
        if (X < scr_width - 6) { X += 6; } else if (Y < scr_height - 8) { X = 0; Y += 8; } else { X = 0; Y = 0; }
 8001040:	4b0a      	ldr	r3, [pc, #40]	; (800106c <ST7735_PutStr5x7+0x48>)
        ST7735_PutChar5x7(X, Y, *str++, color);
 8001042:	3601      	adds	r6, #1
        if (X < scr_width - 6) { X += 6; } else if (Y < scr_height - 8) { X = 0; Y += 8; } else { X = 0; Y = 0; }
 8001044:	881b      	ldrh	r3, [r3, #0]
 8001046:	3b06      	subs	r3, #6
 8001048:	429c      	cmp	r4, r3
 800104a:	da02      	bge.n	8001052 <ST7735_PutStr5x7+0x2e>
 800104c:	3406      	adds	r4, #6
 800104e:	b2e4      	uxtb	r4, r4
 8001050:	e7ed      	b.n	800102e <ST7735_PutStr5x7+0xa>
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <ST7735_PutStr5x7+0x4c>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	3b08      	subs	r3, #8
 8001058:	429d      	cmp	r5, r3
 800105a:	da03      	bge.n	8001064 <ST7735_PutStr5x7+0x40>
 800105c:	3508      	adds	r5, #8
 800105e:	b2ed      	uxtb	r5, r5
 8001060:	2400      	movs	r4, #0
 8001062:	e7e4      	b.n	800102e <ST7735_PutStr5x7+0xa>
 8001064:	2500      	movs	r5, #0
 8001066:	002c      	movs	r4, r5
 8001068:	e7e1      	b.n	800102e <ST7735_PutStr5x7+0xa>
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	200070cc 	.word	0x200070cc
 8001070:	200070ce 	.word	0x200070ce

08001074 <HAL_Init>:
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	4a08      	ldr	r2, [pc, #32]	; (8001098 <HAL_Init+0x24>)
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	6811      	ldr	r1, [r2, #0]
{
 800107c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800107e:	430b      	orrs	r3, r1
 8001080:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001082:	2000      	movs	r0, #0
 8001084:	f7ff fc20 	bl	80008c8 <HAL_InitTick>
 8001088:	1e04      	subs	r4, r0, #0
 800108a:	d103      	bne.n	8001094 <HAL_Init+0x20>
    status = HAL_ERROR;
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800108c:	f7ff fc02 	bl	8000894 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 8001090:	0020      	movs	r0, r4
 8001092:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001094:	2401      	movs	r4, #1
 8001096:	e7fb      	b.n	8001090 <HAL_Init+0x1c>
 8001098:	40022000 	.word	0x40022000

0800109c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800109c:	4a03      	ldr	r2, [pc, #12]	; (80010ac <HAL_IncTick+0x10>)
 800109e:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <HAL_IncTick+0x14>)
 80010a0:	6811      	ldr	r1, [r2, #0]
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	185b      	adds	r3, r3, r1
 80010a6:	6013      	str	r3, [r2, #0]
}
 80010a8:	4770      	bx	lr
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	200070d0 	.word	0x200070d0
 80010b0:	20000004 	.word	0x20000004

080010b4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80010b4:	4b01      	ldr	r3, [pc, #4]	; (80010bc <HAL_GetTick+0x8>)
 80010b6:	6818      	ldr	r0, [r3, #0]
}
 80010b8:	4770      	bx	lr
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	200070d0 	.word	0x200070d0

080010c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c0:	b570      	push	{r4, r5, r6, lr}
 80010c2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80010c4:	f7ff fff6 	bl	80010b4 <HAL_GetTick>
 80010c8:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ca:	1c63      	adds	r3, r4, #1
 80010cc:	d002      	beq.n	80010d4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ce:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <HAL_Delay+0x20>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010d4:	f7ff ffee 	bl	80010b4 <HAL_GetTick>
 80010d8:	1b40      	subs	r0, r0, r5
 80010da:	42a0      	cmp	r0, r4
 80010dc:	d3fa      	bcc.n	80010d4 <HAL_Delay+0x14>
  {
  }
}
 80010de:	bd70      	pop	{r4, r5, r6, pc}
 80010e0:	20000004 	.word	0x20000004

080010e4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80010e4:	4a03      	ldr	r2, [pc, #12]	; (80010f4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x10>)
 80010e6:	4904      	ldr	r1, [pc, #16]	; (80010f8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x14>)
 80010e8:	6813      	ldr	r3, [r2, #0]
 80010ea:	400b      	ands	r3, r1
 80010ec:	4318      	orrs	r0, r3
 80010ee:	6010      	str	r0, [r2, #0]
}
 80010f0:	4770      	bx	lr
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	40010000 	.word	0x40010000
 80010f8:	fffff9ff 	.word	0xfffff9ff

080010fc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fc:	b530      	push	{r4, r5, lr}
 80010fe:	25ff      	movs	r5, #255	; 0xff
 8001100:	2403      	movs	r4, #3
 8001102:	002a      	movs	r2, r5
 8001104:	b2c3      	uxtb	r3, r0
 8001106:	401c      	ands	r4, r3
 8001108:	00e4      	lsls	r4, r4, #3
 800110a:	40a2      	lsls	r2, r4
 800110c:	0189      	lsls	r1, r1, #6
 800110e:	4029      	ands	r1, r5
 8001110:	43d2      	mvns	r2, r2
 8001112:	40a1      	lsls	r1, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001114:	2800      	cmp	r0, #0
 8001116:	db0a      	blt.n	800112e <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001118:	24c0      	movs	r4, #192	; 0xc0
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <HAL_NVIC_SetPriority+0x4c>)
 800111c:	0880      	lsrs	r0, r0, #2
 800111e:	0080      	lsls	r0, r0, #2
 8001120:	18c0      	adds	r0, r0, r3
 8001122:	00a4      	lsls	r4, r4, #2
 8001124:	5903      	ldr	r3, [r0, r4]
 8001126:	401a      	ands	r2, r3
 8001128:	4311      	orrs	r1, r2
 800112a:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800112c:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800112e:	200f      	movs	r0, #15
 8001130:	4003      	ands	r3, r0
 8001132:	3b08      	subs	r3, #8
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <HAL_NVIC_SetPriority+0x50>)
 8001136:	089b      	lsrs	r3, r3, #2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	181b      	adds	r3, r3, r0
 800113c:	69d8      	ldr	r0, [r3, #28]
 800113e:	4002      	ands	r2, r0
 8001140:	4311      	orrs	r1, r2
 8001142:	61d9      	str	r1, [r3, #28]
 8001144:	e7f2      	b.n	800112c <HAL_NVIC_SetPriority+0x30>
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	e000e100 	.word	0xe000e100
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001150:	2800      	cmp	r0, #0
 8001152:	db05      	blt.n	8001160 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001154:	231f      	movs	r3, #31
 8001156:	4018      	ands	r0, r3
 8001158:	3b1e      	subs	r3, #30
 800115a:	4083      	lsls	r3, r0
 800115c:	4a01      	ldr	r2, [pc, #4]	; (8001164 <HAL_NVIC_EnableIRQ+0x14>)
 800115e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001160:	4770      	bx	lr
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	e000e100 	.word	0xe000e100

08001168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001168:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800116a:	680b      	ldr	r3, [r1, #0]
{
 800116c:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800116e:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00u;
 8001170:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001172:	9a03      	ldr	r2, [sp, #12]
 8001174:	40da      	lsrs	r2, r3
 8001176:	d101      	bne.n	800117c <HAL_GPIO_Init+0x14>
      }
    }

    position++;
  }
}
 8001178:	b005      	add	sp, #20
 800117a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800117c:	2201      	movs	r2, #1
 800117e:	409a      	lsls	r2, r3
 8001180:	4694      	mov	ip, r2
 8001182:	4664      	mov	r4, ip
 8001184:	9a03      	ldr	r2, [sp, #12]
 8001186:	4022      	ands	r2, r4
 8001188:	9201      	str	r2, [sp, #4]
    if (iocurrent != 0x00u)
 800118a:	d100      	bne.n	800118e <HAL_GPIO_Init+0x26>
 800118c:	e08b      	b.n	80012a6 <HAL_GPIO_Init+0x13e>
 800118e:	2503      	movs	r5, #3
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001190:	684a      	ldr	r2, [r1, #4]
 8001192:	005e      	lsls	r6, r3, #1
 8001194:	0017      	movs	r7, r2
 8001196:	9200      	str	r2, [sp, #0]
 8001198:	40b5      	lsls	r5, r6
 800119a:	2210      	movs	r2, #16
 800119c:	4397      	bics	r7, r2
 800119e:	43ea      	mvns	r2, r5
 80011a0:	9202      	str	r2, [sp, #8]
 80011a2:	1e7a      	subs	r2, r7, #1
 80011a4:	2a01      	cmp	r2, #1
 80011a6:	d810      	bhi.n	80011ca <HAL_GPIO_Init+0x62>
        temp = GPIOx->OSPEEDR;
 80011a8:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011aa:	9a02      	ldr	r2, [sp, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80011ac:	2501      	movs	r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011ae:	4014      	ands	r4, r2
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011b0:	68ca      	ldr	r2, [r1, #12]
 80011b2:	40b2      	lsls	r2, r6
 80011b4:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 80011b6:	6082      	str	r2, [r0, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011b8:	4662      	mov	r2, ip
        temp = GPIOx->OTYPER;
 80011ba:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011bc:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80011be:	9a00      	ldr	r2, [sp, #0]
 80011c0:	0912      	lsrs	r2, r2, #4
 80011c2:	402a      	ands	r2, r5
 80011c4:	409a      	lsls	r2, r3
 80011c6:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80011c8:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80011ca:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011cc:	9a02      	ldr	r2, [sp, #8]
 80011ce:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011d0:	688a      	ldr	r2, [r1, #8]
 80011d2:	40b2      	lsls	r2, r6
 80011d4:	4322      	orrs	r2, r4
      GPIOx->PUPDR = temp;
 80011d6:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d8:	2f02      	cmp	r7, #2
 80011da:	d10d      	bne.n	80011f8 <HAL_GPIO_Init+0x90>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011dc:	2407      	movs	r4, #7
 80011de:	250f      	movs	r5, #15
 80011e0:	401c      	ands	r4, r3
 80011e2:	00a4      	lsls	r4, r4, #2
 80011e4:	40a5      	lsls	r5, r4
        temp = GPIOx->AFR[position >> 3u];
 80011e6:	08da      	lsrs	r2, r3, #3
 80011e8:	0092      	lsls	r2, r2, #2
 80011ea:	1882      	adds	r2, r0, r2
 80011ec:	6a17      	ldr	r7, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011ee:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011f0:	690d      	ldr	r5, [r1, #16]
 80011f2:	40a5      	lsls	r5, r4
 80011f4:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 80011f6:	6217      	str	r7, [r2, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011f8:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 80011fa:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011fc:	9d02      	ldr	r5, [sp, #8]
 80011fe:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001200:	9a00      	ldr	r2, [sp, #0]
 8001202:	4022      	ands	r2, r4
 8001204:	40b2      	lsls	r2, r6
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001206:	2480      	movs	r4, #128	; 0x80
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001208:	4315      	orrs	r5, r2
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800120a:	9a00      	ldr	r2, [sp, #0]
 800120c:	0564      	lsls	r4, r4, #21
      GPIOx->MODER = temp;
 800120e:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001210:	4222      	tst	r2, r4
 8001212:	d048      	beq.n	80012a6 <HAL_GPIO_Init+0x13e>
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001214:	2503      	movs	r5, #3
 8001216:	270f      	movs	r7, #15
 8001218:	401d      	ands	r5, r3
 800121a:	00ed      	lsls	r5, r5, #3
 800121c:	40af      	lsls	r7, r5
 800121e:	4a23      	ldr	r2, [pc, #140]	; (80012ac <HAL_GPIO_Init+0x144>)
        temp = EXTI->EXTICR[position >> 2u];
 8001220:	089c      	lsrs	r4, r3, #2
 8001222:	00a4      	lsls	r4, r4, #2
 8001224:	18a4      	adds	r4, r4, r2
 8001226:	6e26      	ldr	r6, [r4, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001228:	2200      	movs	r2, #0
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800122a:	43be      	bics	r6, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800122c:	27a0      	movs	r7, #160	; 0xa0
 800122e:	05ff      	lsls	r7, r7, #23
 8001230:	42b8      	cmp	r0, r7
 8001232:	d00c      	beq.n	800124e <HAL_GPIO_Init+0xe6>
 8001234:	4f1e      	ldr	r7, [pc, #120]	; (80012b0 <HAL_GPIO_Init+0x148>)
 8001236:	3201      	adds	r2, #1
 8001238:	42b8      	cmp	r0, r7
 800123a:	d008      	beq.n	800124e <HAL_GPIO_Init+0xe6>
 800123c:	4f1d      	ldr	r7, [pc, #116]	; (80012b4 <HAL_GPIO_Init+0x14c>)
 800123e:	3201      	adds	r2, #1
 8001240:	42b8      	cmp	r0, r7
 8001242:	d004      	beq.n	800124e <HAL_GPIO_Init+0xe6>
 8001244:	4f1c      	ldr	r7, [pc, #112]	; (80012b8 <HAL_GPIO_Init+0x150>)
 8001246:	3203      	adds	r2, #3
 8001248:	42b8      	cmp	r0, r7
 800124a:	d100      	bne.n	800124e <HAL_GPIO_Init+0xe6>
 800124c:	3a02      	subs	r2, #2
 800124e:	40aa      	lsls	r2, r5
 8001250:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2u] = temp;
 8001252:	6622      	str	r2, [r4, #96]	; 0x60
        temp = EXTI->IMR1;
 8001254:	4a19      	ldr	r2, [pc, #100]	; (80012bc <HAL_GPIO_Init+0x154>)
        temp &= ~(iocurrent);
 8001256:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR1;
 8001258:	6fd6      	ldr	r6, [r2, #124]	; 0x7c
          temp |= iocurrent;
 800125a:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800125c:	9f00      	ldr	r7, [sp, #0]
        temp &= ~(iocurrent);
 800125e:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8001260:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001262:	03ff      	lsls	r7, r7, #15
 8001264:	d401      	bmi.n	800126a <HAL_GPIO_Init+0x102>
        temp &= ~(iocurrent);
 8001266:	0035      	movs	r5, r6
 8001268:	4025      	ands	r5, r4
        EXTI->IMR1 = temp;
 800126a:	67d5      	str	r5, [r2, #124]	; 0x7c
        temp = EXTI->EMR1;
 800126c:	4d14      	ldr	r5, [pc, #80]	; (80012c0 <HAL_GPIO_Init+0x158>)
          temp |= iocurrent;
 800126e:	9e01      	ldr	r6, [sp, #4]
        temp = EXTI->EMR1;
 8001270:	6fea      	ldr	r2, [r5, #124]	; 0x7c
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001272:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8001274:	4316      	orrs	r6, r2
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001276:	03bf      	lsls	r7, r7, #14
 8001278:	d401      	bmi.n	800127e <HAL_GPIO_Init+0x116>
        temp &= ~(iocurrent);
 800127a:	4022      	ands	r2, r4
 800127c:	0016      	movs	r6, r2
        EXTI->EMR1 = temp;
 800127e:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <HAL_GPIO_Init+0x144>)
 8001280:	67ee      	str	r6, [r5, #124]	; 0x7c
        temp = EXTI->RTSR1;
 8001282:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8001284:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001286:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8001288:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800128a:	02ff      	lsls	r7, r7, #11
 800128c:	d401      	bmi.n	8001292 <HAL_GPIO_Init+0x12a>
        temp &= ~(iocurrent);
 800128e:	0035      	movs	r5, r6
 8001290:	4025      	ands	r5, r4
        EXTI->RTSR1 = temp;
 8001292:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 8001294:	6855      	ldr	r5, [r2, #4]
          temp |= iocurrent;
 8001296:	9e01      	ldr	r6, [sp, #4]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001298:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 800129a:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800129c:	02bf      	lsls	r7, r7, #10
 800129e:	d401      	bmi.n	80012a4 <HAL_GPIO_Init+0x13c>
        temp &= ~(iocurrent);
 80012a0:	4025      	ands	r5, r4
 80012a2:	002e      	movs	r6, r5
        EXTI->FTSR1 = temp;
 80012a4:	6056      	str	r6, [r2, #4]
    position++;
 80012a6:	3301      	adds	r3, #1
 80012a8:	e763      	b.n	8001172 <HAL_GPIO_Init+0xa>
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	40021800 	.word	0x40021800
 80012b0:	50000400 	.word	0x50000400
 80012b4:	50000800 	.word	0x50000800
 80012b8:	50000c00 	.word	0x50000c00
 80012bc:	40021804 	.word	0x40021804
 80012c0:	40021808 	.word	0x40021808

080012c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012c4:	2a00      	cmp	r2, #0
 80012c6:	d001      	beq.n	80012cc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012c8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012ca:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012cc:	6281      	str	r1, [r0, #40]	; 0x28
}
 80012ce:	e7fc      	b.n	80012ca <HAL_GPIO_WritePin+0x6>

080012d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012d0:	b570      	push	{r4, r5, r6, lr}
 80012d2:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 80012d4:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80012d6:	2c00      	cmp	r4, #0
 80012d8:	d03f      	beq.n	800135a <HAL_I2C_Init+0x8a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012da:	0025      	movs	r5, r4
 80012dc:	3541      	adds	r5, #65	; 0x41
 80012de:	782b      	ldrb	r3, [r5, #0]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d105      	bne.n	80012f2 <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012e6:	0022      	movs	r2, r4
 80012e8:	3240      	adds	r2, #64	; 0x40
 80012ea:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012ec:	0020      	movs	r0, r4
 80012ee:	f7ff f933 	bl	8000558 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012f2:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012f4:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80012f6:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80012f8:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012fa:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	68a6      	ldr	r6, [r4, #8]
 8001300:	438a      	bics	r2, r1
 8001302:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001304:	6861      	ldr	r1, [r4, #4]
 8001306:	4a1a      	ldr	r2, [pc, #104]	; (8001370 <HAL_I2C_Init+0xa0>)
 8001308:	400a      	ands	r2, r1
 800130a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800130c:	6899      	ldr	r1, [r3, #8]
 800130e:	4a19      	ldr	r2, [pc, #100]	; (8001374 <HAL_I2C_Init+0xa4>)
 8001310:	4011      	ands	r1, r2
 8001312:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001314:	2801      	cmp	r0, #1
 8001316:	d121      	bne.n	800135c <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001318:	2180      	movs	r1, #128	; 0x80
 800131a:	0209      	lsls	r1, r1, #8
 800131c:	4331      	orrs	r1, r6
 800131e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001320:	6858      	ldr	r0, [r3, #4]
 8001322:	4915      	ldr	r1, [pc, #84]	; (8001378 <HAL_I2C_Init+0xa8>)
 8001324:	4301      	orrs	r1, r0
 8001326:	6059      	str	r1, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001328:	68d9      	ldr	r1, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800132a:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800132c:	400a      	ands	r2, r1
 800132e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001330:	6961      	ldr	r1, [r4, #20]
 8001332:	6922      	ldr	r2, [r4, #16]
 8001334:	430a      	orrs	r2, r1
 8001336:	69a1      	ldr	r1, [r4, #24]
 8001338:	0209      	lsls	r1, r1, #8
 800133a:	430a      	orrs	r2, r1
 800133c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800133e:	6a21      	ldr	r1, [r4, #32]
 8001340:	69e2      	ldr	r2, [r4, #28]
 8001342:	430a      	orrs	r2, r1
 8001344:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001346:	2201      	movs	r2, #1
 8001348:	6819      	ldr	r1, [r3, #0]
 800134a:	430a      	orrs	r2, r1
 800134c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800134e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001350:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001352:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001354:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001356:	3442      	adds	r4, #66	; 0x42
 8001358:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 800135a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800135c:	2184      	movs	r1, #132	; 0x84
 800135e:	0209      	lsls	r1, r1, #8
 8001360:	4331      	orrs	r1, r6
 8001362:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001364:	2802      	cmp	r0, #2
 8001366:	d1db      	bne.n	8001320 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001368:	2180      	movs	r1, #128	; 0x80
 800136a:	0109      	lsls	r1, r1, #4
 800136c:	6059      	str	r1, [r3, #4]
 800136e:	e7d7      	b.n	8001320 <HAL_I2C_Init+0x50>
 8001370:	f0ffffff 	.word	0xf0ffffff
 8001374:	ffff7fff 	.word	0xffff7fff
 8001378:	02008000 	.word	0x02008000

0800137c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800137c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800137e:	0004      	movs	r4, r0
 8001380:	3441      	adds	r4, #65	; 0x41
 8001382:	7822      	ldrb	r2, [r4, #0]
{
 8001384:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001386:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001388:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800138a:	2a20      	cmp	r2, #32
 800138c:	d118      	bne.n	80013c0 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 800138e:	001d      	movs	r5, r3
 8001390:	3540      	adds	r5, #64	; 0x40
 8001392:	782e      	ldrb	r6, [r5, #0]
 8001394:	2e01      	cmp	r6, #1
 8001396:	d013      	beq.n	80013c0 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8001398:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800139a:	3022      	adds	r0, #34	; 0x22
 800139c:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 800139e:	681e      	ldr	r6, [r3, #0]
 80013a0:	3823      	subs	r0, #35	; 0x23
 80013a2:	4386      	bics	r6, r0
 80013a4:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80013a6:	681e      	ldr	r6, [r3, #0]
 80013a8:	4f06      	ldr	r7, [pc, #24]	; (80013c4 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 80013aa:	403e      	ands	r6, r7
 80013ac:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80013ae:	681e      	ldr	r6, [r3, #0]
 80013b0:	4331      	orrs	r1, r6
 80013b2:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80013b4:	6819      	ldr	r1, [r3, #0]
 80013b6:	4308      	orrs	r0, r1
 80013b8:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80013ba:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80013bc:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 80013be:	7028      	strb	r0, [r5, #0]
  }
}
 80013c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	ffffefff 	.word	0xffffefff

080013c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80013c8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013ca:	0005      	movs	r5, r0
 80013cc:	3541      	adds	r5, #65	; 0x41
 80013ce:	782a      	ldrb	r2, [r5, #0]
{
 80013d0:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80013d2:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80013d4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80013d6:	2a20      	cmp	r2, #32
 80013d8:	d117      	bne.n	800140a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 80013da:	001c      	movs	r4, r3
 80013dc:	3440      	adds	r4, #64	; 0x40
 80013de:	7826      	ldrb	r6, [r4, #0]
 80013e0:	2e01      	cmp	r6, #1
 80013e2:	d012      	beq.n	800140a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 80013e4:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80013e6:	3022      	adds	r0, #34	; 0x22
 80013e8:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 80013ea:	681e      	ldr	r6, [r3, #0]
 80013ec:	3823      	subs	r0, #35	; 0x23
 80013ee:	4386      	bics	r6, r0
 80013f0:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80013f2:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80013f4:	4f05      	ldr	r7, [pc, #20]	; (800140c <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 80013f6:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80013f8:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80013fa:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 80013fc:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80013fe:	6819      	ldr	r1, [r3, #0]
 8001400:	4308      	orrs	r0, r1
 8001402:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8001404:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001406:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8001408:	7020      	strb	r0, [r4, #0]
  }
}
 800140a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800140c:	fffff0ff 	.word	0xfffff0ff

08001410 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001410:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001412:	4c10      	ldr	r4, [pc, #64]	; (8001454 <HAL_PWREx_ControlVoltageScaling+0x44>)
 8001414:	4910      	ldr	r1, [pc, #64]	; (8001458 <HAL_PWREx_ControlVoltageScaling+0x48>)
 8001416:	6823      	ldr	r3, [r4, #0]
{
 8001418:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800141a:	400b      	ands	r3, r1
 800141c:	4303      	orrs	r3, r0
 800141e:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001420:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001422:	2000      	movs	r0, #0
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	429a      	cmp	r2, r3
 8001428:	d10c      	bne.n	8001444 <HAL_PWREx_ControlVoltageScaling+0x34>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800142a:	4b0c      	ldr	r3, [pc, #48]	; (800145c <HAL_PWREx_ControlVoltageScaling+0x4c>)
 800142c:	490c      	ldr	r1, [pc, #48]	; (8001460 <HAL_PWREx_ControlVoltageScaling+0x50>)
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	2306      	movs	r3, #6
 8001432:	4358      	muls	r0, r3
 8001434:	f7fe fe9e 	bl	8000174 <__udivsi3>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001438:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800143a:	1c43      	adds	r3, r0, #1
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800143c:	00d2      	lsls	r2, r2, #3
 800143e:	6960      	ldr	r0, [r4, #20]
 8001440:	4010      	ands	r0, r2
 8001442:	d100      	bne.n	8001446 <HAL_PWREx_ControlVoltageScaling+0x36>
}
 8001444:	bd10      	pop	{r4, pc}
      if(wait_loop_index != 0U)
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_PWREx_ControlVoltageScaling+0x3e>
        wait_loop_index--;
 800144a:	3b01      	subs	r3, #1
 800144c:	e7f7      	b.n	800143e <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 800144e:	2003      	movs	r0, #3
 8001450:	e7f8      	b.n	8001444 <HAL_PWREx_ControlVoltageScaling+0x34>
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	40007000 	.word	0x40007000
 8001458:	fffff9ff 	.word	0xfffff9ff
 800145c:	20000000 	.word	0x20000000
 8001460:	000f4240 	.word	0x000f4240

08001464 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001466:	0004      	movs	r4, r0
 8001468:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800146a:	2800      	cmp	r0, #0
 800146c:	d102      	bne.n	8001474 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800146e:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 8001470:	b005      	add	sp, #20
 8001472:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001474:	6803      	ldr	r3, [r0, #0]
 8001476:	07db      	lsls	r3, r3, #31
 8001478:	d410      	bmi.n	800149c <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800147a:	6823      	ldr	r3, [r4, #0]
 800147c:	079b      	lsls	r3, r3, #30
 800147e:	d45c      	bmi.n	800153a <HAL_RCC_OscConfig+0xd6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001480:	6823      	ldr	r3, [r4, #0]
 8001482:	071b      	lsls	r3, r3, #28
 8001484:	d500      	bpl.n	8001488 <HAL_RCC_OscConfig+0x24>
 8001486:	e0c2      	b.n	800160e <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001488:	6823      	ldr	r3, [r4, #0]
 800148a:	075b      	lsls	r3, r3, #29
 800148c:	d500      	bpl.n	8001490 <HAL_RCC_OscConfig+0x2c>
 800148e:	e0f4      	b.n	800167a <HAL_RCC_OscConfig+0x216>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001490:	69e2      	ldr	r2, [r4, #28]
 8001492:	2a00      	cmp	r2, #0
 8001494:	d000      	beq.n	8001498 <HAL_RCC_OscConfig+0x34>
 8001496:	e17b      	b.n	8001790 <HAL_RCC_OscConfig+0x32c>
  return HAL_OK;
 8001498:	2000      	movs	r0, #0
 800149a:	e7e9      	b.n	8001470 <HAL_RCC_OscConfig+0xc>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800149c:	2238      	movs	r2, #56	; 0x38
 800149e:	4db0      	ldr	r5, [pc, #704]	; (8001760 <HAL_RCC_OscConfig+0x2fc>)
 80014a0:	68ab      	ldr	r3, [r5, #8]
 80014a2:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014a4:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80014a6:	2b10      	cmp	r3, #16
 80014a8:	d109      	bne.n	80014be <HAL_RCC_OscConfig+0x5a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014aa:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80014ac:	0793      	lsls	r3, r2, #30
 80014ae:	d108      	bne.n	80014c2 <HAL_RCC_OscConfig+0x5e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b0:	682b      	ldr	r3, [r5, #0]
 80014b2:	039b      	lsls	r3, r3, #14
 80014b4:	d5e1      	bpl.n	800147a <HAL_RCC_OscConfig+0x16>
 80014b6:	6863      	ldr	r3, [r4, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1de      	bne.n	800147a <HAL_RCC_OscConfig+0x16>
 80014bc:	e7d7      	b.n	800146e <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80014be:	2b08      	cmp	r3, #8
 80014c0:	d0f6      	beq.n	80014b0 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c2:	2280      	movs	r2, #128	; 0x80
 80014c4:	6863      	ldr	r3, [r4, #4]
 80014c6:	0252      	lsls	r2, r2, #9
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d111      	bne.n	80014f0 <HAL_RCC_OscConfig+0x8c>
 80014cc:	682a      	ldr	r2, [r5, #0]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80014d2:	f7ff fdef 	bl	80010b4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014d6:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80014d8:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014da:	02b6      	lsls	r6, r6, #10
 80014dc:	682b      	ldr	r3, [r5, #0]
 80014de:	4233      	tst	r3, r6
 80014e0:	d1cb      	bne.n	800147a <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e2:	f7ff fde7 	bl	80010b4 <HAL_GetTick>
 80014e6:	1bc0      	subs	r0, r0, r7
 80014e8:	2864      	cmp	r0, #100	; 0x64
 80014ea:	d9f7      	bls.n	80014dc <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 80014ec:	2003      	movs	r0, #3
 80014ee:	e7bf      	b.n	8001470 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f0:	21a0      	movs	r1, #160	; 0xa0
 80014f2:	02c9      	lsls	r1, r1, #11
 80014f4:	428b      	cmp	r3, r1
 80014f6:	d108      	bne.n	800150a <HAL_RCC_OscConfig+0xa6>
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	6829      	ldr	r1, [r5, #0]
 80014fc:	02db      	lsls	r3, r3, #11
 80014fe:	430b      	orrs	r3, r1
 8001500:	602b      	str	r3, [r5, #0]
 8001502:	682b      	ldr	r3, [r5, #0]
 8001504:	431a      	orrs	r2, r3
 8001506:	602a      	str	r2, [r5, #0]
 8001508:	e7e3      	b.n	80014d2 <HAL_RCC_OscConfig+0x6e>
 800150a:	682a      	ldr	r2, [r5, #0]
 800150c:	4995      	ldr	r1, [pc, #596]	; (8001764 <HAL_RCC_OscConfig+0x300>)
 800150e:	400a      	ands	r2, r1
 8001510:	602a      	str	r2, [r5, #0]
 8001512:	682a      	ldr	r2, [r5, #0]
 8001514:	4994      	ldr	r1, [pc, #592]	; (8001768 <HAL_RCC_OscConfig+0x304>)
 8001516:	400a      	ands	r2, r1
 8001518:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1d9      	bne.n	80014d2 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 800151e:	f7ff fdc9 	bl	80010b4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001522:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001524:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001526:	02b6      	lsls	r6, r6, #10
 8001528:	682b      	ldr	r3, [r5, #0]
 800152a:	4233      	tst	r3, r6
 800152c:	d0a5      	beq.n	800147a <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800152e:	f7ff fdc1 	bl	80010b4 <HAL_GetTick>
 8001532:	1bc0      	subs	r0, r0, r7
 8001534:	2864      	cmp	r0, #100	; 0x64
 8001536:	d9f7      	bls.n	8001528 <HAL_RCC_OscConfig+0xc4>
 8001538:	e7d8      	b.n	80014ec <HAL_RCC_OscConfig+0x88>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800153a:	2338      	movs	r3, #56	; 0x38
 800153c:	4d88      	ldr	r5, [pc, #544]	; (8001760 <HAL_RCC_OscConfig+0x2fc>)
 800153e:	68aa      	ldr	r2, [r5, #8]
 8001540:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001542:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001544:	2b10      	cmp	r3, #16
 8001546:	d129      	bne.n	800159c <HAL_RCC_OscConfig+0x138>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001548:	2103      	movs	r1, #3
 800154a:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800154c:	2a02      	cmp	r2, #2
 800154e:	d127      	bne.n	80015a0 <HAL_RCC_OscConfig+0x13c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001550:	682a      	ldr	r2, [r5, #0]
 8001552:	0552      	lsls	r2, r2, #21
 8001554:	d503      	bpl.n	800155e <HAL_RCC_OscConfig+0xfa>
 8001556:	68e2      	ldr	r2, [r4, #12]
 8001558:	2a00      	cmp	r2, #0
 800155a:	d100      	bne.n	800155e <HAL_RCC_OscConfig+0xfa>
 800155c:	e787      	b.n	800146e <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155e:	6869      	ldr	r1, [r5, #4]
 8001560:	6962      	ldr	r2, [r4, #20]
 8001562:	4882      	ldr	r0, [pc, #520]	; (800176c <HAL_RCC_OscConfig+0x308>)
 8001564:	0212      	lsls	r2, r2, #8
 8001566:	4001      	ands	r1, r0
 8001568:	430a      	orrs	r2, r1
 800156a:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800156c:	2b00      	cmp	r3, #0
 800156e:	d10d      	bne.n	800158c <HAL_RCC_OscConfig+0x128>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001570:	682b      	ldr	r3, [r5, #0]
 8001572:	4a7f      	ldr	r2, [pc, #508]	; (8001770 <HAL_RCC_OscConfig+0x30c>)
 8001574:	4013      	ands	r3, r2
 8001576:	6922      	ldr	r2, [r4, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800157c:	682b      	ldr	r3, [r5, #0]
 800157e:	4a7d      	ldr	r2, [pc, #500]	; (8001774 <HAL_RCC_OscConfig+0x310>)
 8001580:	049b      	lsls	r3, r3, #18
 8001582:	0f5b      	lsrs	r3, r3, #29
 8001584:	40da      	lsrs	r2, r3
 8001586:	0013      	movs	r3, r2
 8001588:	4a7b      	ldr	r2, [pc, #492]	; (8001778 <HAL_RCC_OscConfig+0x314>)
 800158a:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800158c:	4b7b      	ldr	r3, [pc, #492]	; (800177c <HAL_RCC_OscConfig+0x318>)
 800158e:	6818      	ldr	r0, [r3, #0]
 8001590:	f7ff f99a 	bl	80008c8 <HAL_InitTick>
 8001594:	2800      	cmp	r0, #0
 8001596:	d100      	bne.n	800159a <HAL_RCC_OscConfig+0x136>
 8001598:	e772      	b.n	8001480 <HAL_RCC_OscConfig+0x1c>
 800159a:	e768      	b.n	800146e <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0d7      	beq.n	8001550 <HAL_RCC_OscConfig+0xec>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015a0:	68e3      	ldr	r3, [r4, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d020      	beq.n	80015e8 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80015a6:	682b      	ldr	r3, [r5, #0]
 80015a8:	4a71      	ldr	r2, [pc, #452]	; (8001770 <HAL_RCC_OscConfig+0x30c>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015aa:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80015ac:	4013      	ands	r3, r2
 80015ae:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015b0:	00f6      	lsls	r6, r6, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80015b2:	4313      	orrs	r3, r2
 80015b4:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	682a      	ldr	r2, [r5, #0]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	4313      	orrs	r3, r2
 80015be:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80015c0:	f7ff fd78 	bl	80010b4 <HAL_GetTick>
 80015c4:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015c6:	682b      	ldr	r3, [r5, #0]
 80015c8:	4233      	tst	r3, r6
 80015ca:	d007      	beq.n	80015dc <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015cc:	686a      	ldr	r2, [r5, #4]
 80015ce:	6963      	ldr	r3, [r4, #20]
 80015d0:	4966      	ldr	r1, [pc, #408]	; (800176c <HAL_RCC_OscConfig+0x308>)
 80015d2:	021b      	lsls	r3, r3, #8
 80015d4:	400a      	ands	r2, r1
 80015d6:	4313      	orrs	r3, r2
 80015d8:	606b      	str	r3, [r5, #4]
 80015da:	e751      	b.n	8001480 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015dc:	f7ff fd6a 	bl	80010b4 <HAL_GetTick>
 80015e0:	1bc0      	subs	r0, r0, r7
 80015e2:	2802      	cmp	r0, #2
 80015e4:	d9ef      	bls.n	80015c6 <HAL_RCC_OscConfig+0x162>
 80015e6:	e781      	b.n	80014ec <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 80015e8:	682b      	ldr	r3, [r5, #0]
 80015ea:	4a65      	ldr	r2, [pc, #404]	; (8001780 <HAL_RCC_OscConfig+0x31c>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015ec:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 80015ee:	4013      	ands	r3, r2
 80015f0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80015f2:	f7ff fd5f 	bl	80010b4 <HAL_GetTick>
 80015f6:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015f8:	00f6      	lsls	r6, r6, #3
 80015fa:	682b      	ldr	r3, [r5, #0]
 80015fc:	4233      	tst	r3, r6
 80015fe:	d100      	bne.n	8001602 <HAL_RCC_OscConfig+0x19e>
 8001600:	e73e      	b.n	8001480 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001602:	f7ff fd57 	bl	80010b4 <HAL_GetTick>
 8001606:	1bc0      	subs	r0, r0, r7
 8001608:	2802      	cmp	r0, #2
 800160a:	d9f6      	bls.n	80015fa <HAL_RCC_OscConfig+0x196>
 800160c:	e76e      	b.n	80014ec <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800160e:	2138      	movs	r1, #56	; 0x38
 8001610:	4b53      	ldr	r3, [pc, #332]	; (8001760 <HAL_RCC_OscConfig+0x2fc>)
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	001d      	movs	r5, r3
 8001616:	400a      	ands	r2, r1
 8001618:	2a18      	cmp	r2, #24
 800161a:	d108      	bne.n	800162e <HAL_RCC_OscConfig+0x1ca>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800161c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800161e:	079b      	lsls	r3, r3, #30
 8001620:	d400      	bmi.n	8001624 <HAL_RCC_OscConfig+0x1c0>
 8001622:	e731      	b.n	8001488 <HAL_RCC_OscConfig+0x24>
 8001624:	69a3      	ldr	r3, [r4, #24]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d000      	beq.n	800162c <HAL_RCC_OscConfig+0x1c8>
 800162a:	e72d      	b.n	8001488 <HAL_RCC_OscConfig+0x24>
 800162c:	e71f      	b.n	800146e <HAL_RCC_OscConfig+0xa>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800162e:	69a2      	ldr	r2, [r4, #24]
 8001630:	2301      	movs	r3, #1
 8001632:	2a00      	cmp	r2, #0
 8001634:	d010      	beq.n	8001658 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_LSI_ENABLE();
 8001636:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001638:	2602      	movs	r6, #2
        __HAL_RCC_LSI_ENABLE();
 800163a:	4313      	orrs	r3, r2
 800163c:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 800163e:	f7ff fd39 	bl	80010b4 <HAL_GetTick>
 8001642:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001644:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001646:	4233      	tst	r3, r6
 8001648:	d000      	beq.n	800164c <HAL_RCC_OscConfig+0x1e8>
 800164a:	e71d      	b.n	8001488 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164c:	f7ff fd32 	bl	80010b4 <HAL_GetTick>
 8001650:	1bc0      	subs	r0, r0, r7
 8001652:	2802      	cmp	r0, #2
 8001654:	d9f6      	bls.n	8001644 <HAL_RCC_OscConfig+0x1e0>
 8001656:	e749      	b.n	80014ec <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_LSI_DISABLE();
 8001658:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800165a:	2602      	movs	r6, #2
        __HAL_RCC_LSI_DISABLE();
 800165c:	439a      	bics	r2, r3
 800165e:	662a      	str	r2, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001660:	f7ff fd28 	bl	80010b4 <HAL_GetTick>
 8001664:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001666:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001668:	4233      	tst	r3, r6
 800166a:	d100      	bne.n	800166e <HAL_RCC_OscConfig+0x20a>
 800166c:	e70c      	b.n	8001488 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800166e:	f7ff fd21 	bl	80010b4 <HAL_GetTick>
 8001672:	1bc0      	subs	r0, r0, r7
 8001674:	2802      	cmp	r0, #2
 8001676:	d9f6      	bls.n	8001666 <HAL_RCC_OscConfig+0x202>
 8001678:	e738      	b.n	80014ec <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800167a:	2138      	movs	r1, #56	; 0x38
 800167c:	4b38      	ldr	r3, [pc, #224]	; (8001760 <HAL_RCC_OscConfig+0x2fc>)
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	001d      	movs	r5, r3
 8001682:	400a      	ands	r2, r1
 8001684:	2a20      	cmp	r2, #32
 8001686:	d108      	bne.n	800169a <HAL_RCC_OscConfig+0x236>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168a:	079b      	lsls	r3, r3, #30
 800168c:	d400      	bmi.n	8001690 <HAL_RCC_OscConfig+0x22c>
 800168e:	e6ff      	b.n	8001490 <HAL_RCC_OscConfig+0x2c>
 8001690:	68a3      	ldr	r3, [r4, #8]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d000      	beq.n	8001698 <HAL_RCC_OscConfig+0x234>
 8001696:	e6fb      	b.n	8001490 <HAL_RCC_OscConfig+0x2c>
 8001698:	e6e9      	b.n	800146e <HAL_RCC_OscConfig+0xa>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800169a:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800169c:	2100      	movs	r1, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800169e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a0:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 80016a2:	9100      	str	r1, [sp, #0]
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016a4:	4213      	tst	r3, r2
 80016a6:	d108      	bne.n	80016ba <HAL_RCC_OscConfig+0x256>
        __HAL_RCC_PWR_CLK_ENABLE();
 80016a8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80016aa:	4313      	orrs	r3, r2
 80016ac:	63eb      	str	r3, [r5, #60]	; 0x3c
 80016ae:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80016b0:	4013      	ands	r3, r2
 80016b2:	9303      	str	r3, [sp, #12]
 80016b4:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 80016b6:	2301      	movs	r3, #1
 80016b8:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ba:	2780      	movs	r7, #128	; 0x80
 80016bc:	4e31      	ldr	r6, [pc, #196]	; (8001784 <HAL_RCC_OscConfig+0x320>)
 80016be:	007f      	lsls	r7, r7, #1
 80016c0:	6833      	ldr	r3, [r6, #0]
 80016c2:	423b      	tst	r3, r7
 80016c4:	d015      	beq.n	80016f2 <HAL_RCC_OscConfig+0x28e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c6:	68a3      	ldr	r3, [r4, #8]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d122      	bne.n	8001712 <HAL_RCC_OscConfig+0x2ae>
 80016cc:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80016ce:	4313      	orrs	r3, r2
 80016d0:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 80016d2:	f7ff fcef 	bl	80010b4 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016d6:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 80016d8:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016da:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80016dc:	423b      	tst	r3, r7
 80016de:	d038      	beq.n	8001752 <HAL_RCC_OscConfig+0x2ee>
      if (pwrclkchanged == SET)
 80016e0:	9b00      	ldr	r3, [sp, #0]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d000      	beq.n	80016e8 <HAL_RCC_OscConfig+0x284>
 80016e6:	e6d3      	b.n	8001490 <HAL_RCC_OscConfig+0x2c>
        __HAL_RCC_PWR_CLK_DISABLE();
 80016e8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80016ea:	4a27      	ldr	r2, [pc, #156]	; (8001788 <HAL_RCC_OscConfig+0x324>)
 80016ec:	4013      	ands	r3, r2
 80016ee:	63eb      	str	r3, [r5, #60]	; 0x3c
 80016f0:	e6ce      	b.n	8001490 <HAL_RCC_OscConfig+0x2c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016f2:	6833      	ldr	r3, [r6, #0]
 80016f4:	433b      	orrs	r3, r7
 80016f6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80016f8:	f7ff fcdc 	bl	80010b4 <HAL_GetTick>
 80016fc:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016fe:	6833      	ldr	r3, [r6, #0]
 8001700:	423b      	tst	r3, r7
 8001702:	d1e0      	bne.n	80016c6 <HAL_RCC_OscConfig+0x262>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001704:	f7ff fcd6 	bl	80010b4 <HAL_GetTick>
 8001708:	9b01      	ldr	r3, [sp, #4]
 800170a:	1ac0      	subs	r0, r0, r3
 800170c:	2802      	cmp	r0, #2
 800170e:	d9f6      	bls.n	80016fe <HAL_RCC_OscConfig+0x29a>
 8001710:	e6ec      	b.n	80014ec <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001712:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001714:	2b05      	cmp	r3, #5
 8001716:	d105      	bne.n	8001724 <HAL_RCC_OscConfig+0x2c0>
 8001718:	3b01      	subs	r3, #1
 800171a:	4313      	orrs	r3, r2
 800171c:	65eb      	str	r3, [r5, #92]	; 0x5c
 800171e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001720:	2301      	movs	r3, #1
 8001722:	e7d4      	b.n	80016ce <HAL_RCC_OscConfig+0x26a>
 8001724:	2101      	movs	r1, #1
 8001726:	438a      	bics	r2, r1
 8001728:	65ea      	str	r2, [r5, #92]	; 0x5c
 800172a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800172c:	3103      	adds	r1, #3
 800172e:	438a      	bics	r2, r1
 8001730:	65ea      	str	r2, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1cd      	bne.n	80016d2 <HAL_RCC_OscConfig+0x26e>
        tickstart = HAL_GetTick();
 8001736:	f7ff fcbd 	bl	80010b4 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800173a:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 800173c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800173e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001740:	423b      	tst	r3, r7
 8001742:	d0cd      	beq.n	80016e0 <HAL_RCC_OscConfig+0x27c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001744:	f7ff fcb6 	bl	80010b4 <HAL_GetTick>
 8001748:	4b10      	ldr	r3, [pc, #64]	; (800178c <HAL_RCC_OscConfig+0x328>)
 800174a:	1b80      	subs	r0, r0, r6
 800174c:	4298      	cmp	r0, r3
 800174e:	d9f6      	bls.n	800173e <HAL_RCC_OscConfig+0x2da>
 8001750:	e6cc      	b.n	80014ec <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001752:	f7ff fcaf 	bl	80010b4 <HAL_GetTick>
 8001756:	4b0d      	ldr	r3, [pc, #52]	; (800178c <HAL_RCC_OscConfig+0x328>)
 8001758:	1b80      	subs	r0, r0, r6
 800175a:	4298      	cmp	r0, r3
 800175c:	d9bd      	bls.n	80016da <HAL_RCC_OscConfig+0x276>
 800175e:	e6c5      	b.n	80014ec <HAL_RCC_OscConfig+0x88>
 8001760:	40021000 	.word	0x40021000
 8001764:	fffeffff 	.word	0xfffeffff
 8001768:	fffbffff 	.word	0xfffbffff
 800176c:	ffff80ff 	.word	0xffff80ff
 8001770:	ffffc7ff 	.word	0xffffc7ff
 8001774:	00f42400 	.word	0x00f42400
 8001778:	20000000 	.word	0x20000000
 800177c:	20000008 	.word	0x20000008
 8001780:	fffffeff 	.word	0xfffffeff
 8001784:	40007000 	.word	0x40007000
 8001788:	efffffff 	.word	0xefffffff
 800178c:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001790:	2038      	movs	r0, #56	; 0x38
 8001792:	4b40      	ldr	r3, [pc, #256]	; (8001894 <HAL_RCC_OscConfig+0x430>)
 8001794:	6899      	ldr	r1, [r3, #8]
 8001796:	001d      	movs	r5, r3
 8001798:	4001      	ands	r1, r0
 800179a:	2910      	cmp	r1, #16
 800179c:	d052      	beq.n	8001844 <HAL_RCC_OscConfig+0x3e0>
        __HAL_RCC_PLL_DISABLE();
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	493d      	ldr	r1, [pc, #244]	; (8001898 <HAL_RCC_OscConfig+0x434>)
 80017a2:	400b      	ands	r3, r1
 80017a4:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017a6:	2a02      	cmp	r2, #2
 80017a8:	d135      	bne.n	8001816 <HAL_RCC_OscConfig+0x3b2>
        tickstart = HAL_GetTick();
 80017aa:	f7ff fc83 	bl	80010b4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ae:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80017b0:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b2:	04b6      	lsls	r6, r6, #18
 80017b4:	682b      	ldr	r3, [r5, #0]
 80017b6:	4233      	tst	r3, r6
 80017b8:	d127      	bne.n	800180a <HAL_RCC_OscConfig+0x3a6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80017bc:	6a23      	ldr	r3, [r4, #32]
 80017be:	68ea      	ldr	r2, [r5, #12]
 80017c0:	430b      	orrs	r3, r1
 80017c2:	4936      	ldr	r1, [pc, #216]	; (800189c <HAL_RCC_OscConfig+0x438>)
 80017c4:	400a      	ands	r2, r1
 80017c6:	4313      	orrs	r3, r2
 80017c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80017ca:	4313      	orrs	r3, r2
 80017cc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80017ce:	4313      	orrs	r3, r2
 80017d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017d2:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017d4:	0212      	lsls	r2, r2, #8
 80017d6:	4313      	orrs	r3, r2
 80017d8:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80017da:	2380      	movs	r3, #128	; 0x80
 80017dc:	682a      	ldr	r2, [r5, #0]
 80017de:	045b      	lsls	r3, r3, #17
 80017e0:	4313      	orrs	r3, r2
 80017e2:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	68ea      	ldr	r2, [r5, #12]
 80017e8:	055b      	lsls	r3, r3, #21
 80017ea:	4313      	orrs	r3, r2
 80017ec:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80017ee:	f7ff fc61 	bl	80010b4 <HAL_GetTick>
 80017f2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017f4:	04a4      	lsls	r4, r4, #18
 80017f6:	682b      	ldr	r3, [r5, #0]
 80017f8:	4223      	tst	r3, r4
 80017fa:	d000      	beq.n	80017fe <HAL_RCC_OscConfig+0x39a>
 80017fc:	e64c      	b.n	8001498 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017fe:	f7ff fc59 	bl	80010b4 <HAL_GetTick>
 8001802:	1b80      	subs	r0, r0, r6
 8001804:	2802      	cmp	r0, #2
 8001806:	d9f6      	bls.n	80017f6 <HAL_RCC_OscConfig+0x392>
 8001808:	e670      	b.n	80014ec <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180a:	f7ff fc53 	bl	80010b4 <HAL_GetTick>
 800180e:	1bc0      	subs	r0, r0, r7
 8001810:	2802      	cmp	r0, #2
 8001812:	d9cf      	bls.n	80017b4 <HAL_RCC_OscConfig+0x350>
 8001814:	e66a      	b.n	80014ec <HAL_RCC_OscConfig+0x88>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001816:	2203      	movs	r2, #3
 8001818:	68eb      	ldr	r3, [r5, #12]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800181a:	2480      	movs	r4, #128	; 0x80
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800181c:	4393      	bics	r3, r2
 800181e:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001820:	68eb      	ldr	r3, [r5, #12]
 8001822:	4a1f      	ldr	r2, [pc, #124]	; (80018a0 <HAL_RCC_OscConfig+0x43c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001824:	04a4      	lsls	r4, r4, #18
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001826:	4013      	ands	r3, r2
 8001828:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800182a:	f7ff fc43 	bl	80010b4 <HAL_GetTick>
 800182e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001830:	682b      	ldr	r3, [r5, #0]
 8001832:	4223      	tst	r3, r4
 8001834:	d100      	bne.n	8001838 <HAL_RCC_OscConfig+0x3d4>
 8001836:	e62f      	b.n	8001498 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001838:	f7ff fc3c 	bl	80010b4 <HAL_GetTick>
 800183c:	1b80      	subs	r0, r0, r6
 800183e:	2802      	cmp	r0, #2
 8001840:	d9f6      	bls.n	8001830 <HAL_RCC_OscConfig+0x3cc>
 8001842:	e653      	b.n	80014ec <HAL_RCC_OscConfig+0x88>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001844:	2a01      	cmp	r2, #1
 8001846:	d100      	bne.n	800184a <HAL_RCC_OscConfig+0x3e6>
 8001848:	e611      	b.n	800146e <HAL_RCC_OscConfig+0xa>
        temp_pllckcfg = RCC->PLLCFGR;
 800184a:	68d8      	ldr	r0, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184c:	2303      	movs	r3, #3
 800184e:	6a22      	ldr	r2, [r4, #32]
 8001850:	4003      	ands	r3, r0
 8001852:	4293      	cmp	r3, r2
 8001854:	d000      	beq.n	8001858 <HAL_RCC_OscConfig+0x3f4>
 8001856:	e60a      	b.n	800146e <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001858:	2370      	movs	r3, #112	; 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185a:	6a62      	ldr	r2, [r4, #36]	; 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800185c:	4003      	ands	r3, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185e:	4293      	cmp	r3, r2
 8001860:	d000      	beq.n	8001864 <HAL_RCC_OscConfig+0x400>
 8001862:	e604      	b.n	800146e <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001864:	22fe      	movs	r2, #254	; 0xfe
 8001866:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001868:	01d2      	lsls	r2, r2, #7
 800186a:	4002      	ands	r2, r0
 800186c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800186e:	429a      	cmp	r2, r3
 8001870:	d000      	beq.n	8001874 <HAL_RCC_OscConfig+0x410>
 8001872:	e5fc      	b.n	800146e <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001874:	23f8      	movs	r3, #248	; 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001876:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001878:	039b      	lsls	r3, r3, #14
 800187a:	4003      	ands	r3, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800187c:	4293      	cmp	r3, r2
 800187e:	d000      	beq.n	8001882 <HAL_RCC_OscConfig+0x41e>
 8001880:	e5f5      	b.n	800146e <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001882:	6b23      	ldr	r3, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001884:	0f40      	lsrs	r0, r0, #29
 8001886:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001888:	1ac0      	subs	r0, r0, r3
 800188a:	1e43      	subs	r3, r0, #1
 800188c:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 800188e:	b2c0      	uxtb	r0, r0
 8001890:	e5ee      	b.n	8001470 <HAL_RCC_OscConfig+0xc>
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	40021000 	.word	0x40021000
 8001898:	feffffff 	.word	0xfeffffff
 800189c:	1fc1808c 	.word	0x1fc1808c
 80018a0:	effeffff 	.word	0xeffeffff

080018a4 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018a4:	2338      	movs	r3, #56	; 0x38
 80018a6:	4a1f      	ldr	r2, [pc, #124]	; (8001924 <HAL_RCC_GetSysClockFreq+0x80>)
{
 80018a8:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018aa:	6891      	ldr	r1, [r2, #8]
 80018ac:	0014      	movs	r4, r2
 80018ae:	4219      	tst	r1, r3
 80018b0:	d108      	bne.n	80018c4 <HAL_RCC_GetSysClockFreq+0x20>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80018b2:	2101      	movs	r1, #1
 80018b4:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80018b6:	481c      	ldr	r0, [pc, #112]	; (8001928 <HAL_RCC_GetSysClockFreq+0x84>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80018b8:	049b      	lsls	r3, r3, #18
 80018ba:	0f5b      	lsrs	r3, r3, #29
 80018bc:	4099      	lsls	r1, r3
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
        break;
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
    sysclockfreq = pllvco / pllr;
 80018be:	f7fe fc59 	bl	8000174 <__udivsi3>
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 80018c2:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018c4:	6891      	ldr	r1, [r2, #8]
 80018c6:	4019      	ands	r1, r3
 80018c8:	2908      	cmp	r1, #8
 80018ca:	d025      	beq.n	8001918 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018cc:	6891      	ldr	r1, [r2, #8]
 80018ce:	4019      	ands	r1, r3
 80018d0:	2910      	cmp	r1, #16
 80018d2:	d115      	bne.n	8001900 <HAL_RCC_GetSysClockFreq+0x5c>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80018d4:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018d6:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80018d8:	43db      	mvns	r3, r3
 80018da:	227f      	movs	r2, #127	; 0x7f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018dc:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018de:	0649      	lsls	r1, r1, #25
 80018e0:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018e2:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018e4:	3101      	adds	r1, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018e6:	4015      	ands	r5, r2
    switch (pllsource)
 80018e8:	079b      	lsls	r3, r3, #30
 80018ea:	d107      	bne.n	80018fc <HAL_RCC_GetSysClockFreq+0x58>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018ec:	480f      	ldr	r0, [pc, #60]	; (800192c <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80018ee:	f7fe fc41 	bl	8000174 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80018f2:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80018f4:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80018f6:	0f49      	lsrs	r1, r1, #29
 80018f8:	3101      	adds	r1, #1
 80018fa:	e7e0      	b.n	80018be <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80018fc:	480a      	ldr	r0, [pc, #40]	; (8001928 <HAL_RCC_GetSysClockFreq+0x84>)
 80018fe:	e7f6      	b.n	80018ee <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001900:	6891      	ldr	r1, [r2, #8]
 8001902:	4019      	ands	r1, r3
 8001904:	2920      	cmp	r1, #32
 8001906:	d009      	beq.n	800191c <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001908:	6892      	ldr	r2, [r2, #8]
    sysclockfreq = 0U;
 800190a:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800190c:	4013      	ands	r3, r2
 800190e:	2b18      	cmp	r3, #24
 8001910:	d1d7      	bne.n	80018c2 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSI_VALUE;
 8001912:	20fa      	movs	r0, #250	; 0xfa
 8001914:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 8001916:	e7d4      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = HSE_VALUE;
 8001918:	4804      	ldr	r0, [pc, #16]	; (800192c <HAL_RCC_GetSysClockFreq+0x88>)
 800191a:	e7d2      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSE_VALUE;
 800191c:	2080      	movs	r0, #128	; 0x80
 800191e:	0200      	lsls	r0, r0, #8
 8001920:	e7cf      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0x1e>
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	40021000 	.word	0x40021000
 8001928:	00f42400 	.word	0x00f42400
 800192c:	007a1200 	.word	0x007a1200

08001930 <HAL_RCC_ClockConfig>:
{
 8001930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001932:	0005      	movs	r5, r0
 8001934:	000e      	movs	r6, r1
  if (RCC_ClkInitStruct == NULL)
 8001936:	2800      	cmp	r0, #0
 8001938:	d101      	bne.n	800193e <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800193a:	2001      	movs	r0, #1
}
 800193c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800193e:	2707      	movs	r7, #7
 8001940:	4c4a      	ldr	r4, [pc, #296]	; (8001a6c <HAL_RCC_ClockConfig+0x13c>)
 8001942:	6823      	ldr	r3, [r4, #0]
 8001944:	403b      	ands	r3, r7
 8001946:	428b      	cmp	r3, r1
 8001948:	d32a      	bcc.n	80019a0 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800194a:	6829      	ldr	r1, [r5, #0]
 800194c:	078b      	lsls	r3, r1, #30
 800194e:	d43b      	bmi.n	80019c8 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001950:	07cb      	lsls	r3, r1, #31
 8001952:	d448      	bmi.n	80019e6 <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001954:	2707      	movs	r7, #7
 8001956:	6823      	ldr	r3, [r4, #0]
 8001958:	403b      	ands	r3, r7
 800195a:	42b3      	cmp	r3, r6
 800195c:	d90a      	bls.n	8001974 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195e:	6823      	ldr	r3, [r4, #0]
 8001960:	43bb      	bics	r3, r7
 8001962:	4333      	orrs	r3, r6
 8001964:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001966:	f7ff fba5 	bl	80010b4 <HAL_GetTick>
 800196a:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800196c:	6823      	ldr	r3, [r4, #0]
 800196e:	403b      	ands	r3, r7
 8001970:	42b3      	cmp	r3, r6
 8001972:	d16b      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001974:	682b      	ldr	r3, [r5, #0]
 8001976:	4c3e      	ldr	r4, [pc, #248]	; (8001a70 <HAL_RCC_ClockConfig+0x140>)
 8001978:	075b      	lsls	r3, r3, #29
 800197a:	d46f      	bmi.n	8001a5c <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800197c:	f7ff ff92 	bl	80018a4 <HAL_RCC_GetSysClockFreq>
 8001980:	68a3      	ldr	r3, [r4, #8]
 8001982:	4a3c      	ldr	r2, [pc, #240]	; (8001a74 <HAL_RCC_ClockConfig+0x144>)
 8001984:	051b      	lsls	r3, r3, #20
 8001986:	0f1b      	lsrs	r3, r3, #28
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	589b      	ldr	r3, [r3, r2]
 800198c:	221f      	movs	r2, #31
 800198e:	4013      	ands	r3, r2
 8001990:	40d8      	lsrs	r0, r3
 8001992:	4b39      	ldr	r3, [pc, #228]	; (8001a78 <HAL_RCC_ClockConfig+0x148>)
 8001994:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8001996:	4b39      	ldr	r3, [pc, #228]	; (8001a7c <HAL_RCC_ClockConfig+0x14c>)
 8001998:	6818      	ldr	r0, [r3, #0]
 800199a:	f7fe ff95 	bl	80008c8 <HAL_InitTick>
 800199e:	e7cd      	b.n	800193c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a0:	6823      	ldr	r3, [r4, #0]
 80019a2:	43bb      	bics	r3, r7
 80019a4:	430b      	orrs	r3, r1
 80019a6:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80019a8:	f7ff fb84 	bl	80010b4 <HAL_GetTick>
 80019ac:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	403b      	ands	r3, r7
 80019b2:	42b3      	cmp	r3, r6
 80019b4:	d0c9      	beq.n	800194a <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b6:	f7ff fb7d 	bl	80010b4 <HAL_GetTick>
 80019ba:	9b01      	ldr	r3, [sp, #4]
 80019bc:	1ac0      	subs	r0, r0, r3
 80019be:	4b30      	ldr	r3, [pc, #192]	; (8001a80 <HAL_RCC_ClockConfig+0x150>)
 80019c0:	4298      	cmp	r0, r3
 80019c2:	d9f4      	bls.n	80019ae <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 80019c4:	2003      	movs	r0, #3
 80019c6:	e7b9      	b.n	800193c <HAL_RCC_ClockConfig+0xc>
 80019c8:	4a29      	ldr	r2, [pc, #164]	; (8001a70 <HAL_RCC_ClockConfig+0x140>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ca:	074b      	lsls	r3, r1, #29
 80019cc:	d504      	bpl.n	80019d8 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019ce:	23e0      	movs	r3, #224	; 0xe0
 80019d0:	6890      	ldr	r0, [r2, #8]
 80019d2:	01db      	lsls	r3, r3, #7
 80019d4:	4303      	orrs	r3, r0
 80019d6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d8:	6893      	ldr	r3, [r2, #8]
 80019da:	482a      	ldr	r0, [pc, #168]	; (8001a84 <HAL_RCC_ClockConfig+0x154>)
 80019dc:	4003      	ands	r3, r0
 80019de:	68a8      	ldr	r0, [r5, #8]
 80019e0:	4303      	orrs	r3, r0
 80019e2:	6093      	str	r3, [r2, #8]
 80019e4:	e7b4      	b.n	8001950 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e6:	686a      	ldr	r2, [r5, #4]
 80019e8:	4f21      	ldr	r7, [pc, #132]	; (8001a70 <HAL_RCC_ClockConfig+0x140>)
 80019ea:	2a01      	cmp	r2, #1
 80019ec:	d119      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	039b      	lsls	r3, r3, #14
 80019f2:	d5a2      	bpl.n	800193a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019f4:	2107      	movs	r1, #7
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	438b      	bics	r3, r1
 80019fa:	4313      	orrs	r3, r2
 80019fc:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 80019fe:	f7ff fb59 	bl	80010b4 <HAL_GetTick>
 8001a02:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a04:	2338      	movs	r3, #56	; 0x38
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	401a      	ands	r2, r3
 8001a0a:	686b      	ldr	r3, [r5, #4]
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d0a0      	beq.n	8001954 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a12:	f7ff fb4f 	bl	80010b4 <HAL_GetTick>
 8001a16:	9b01      	ldr	r3, [sp, #4]
 8001a18:	1ac0      	subs	r0, r0, r3
 8001a1a:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <HAL_RCC_ClockConfig+0x150>)
 8001a1c:	4298      	cmp	r0, r3
 8001a1e:	d9f1      	bls.n	8001a04 <HAL_RCC_ClockConfig+0xd4>
 8001a20:	e7d0      	b.n	80019c4 <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a22:	2a02      	cmp	r2, #2
 8001a24:	d103      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	019b      	lsls	r3, r3, #6
 8001a2a:	d4e3      	bmi.n	80019f4 <HAL_RCC_ClockConfig+0xc4>
 8001a2c:	e785      	b.n	800193a <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a2e:	2a00      	cmp	r2, #0
 8001a30:	d103      	bne.n	8001a3a <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	055b      	lsls	r3, r3, #21
 8001a36:	d4dd      	bmi.n	80019f4 <HAL_RCC_ClockConfig+0xc4>
 8001a38:	e77f      	b.n	800193a <HAL_RCC_ClockConfig+0xa>
 8001a3a:	2302      	movs	r3, #2
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001a3c:	2a03      	cmp	r2, #3
 8001a3e:	d103      	bne.n	8001a48 <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a40:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a42:	4219      	tst	r1, r3
 8001a44:	d1d6      	bne.n	80019f4 <HAL_RCC_ClockConfig+0xc4>
 8001a46:	e778      	b.n	800193a <HAL_RCC_ClockConfig+0xa>
 8001a48:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001a4a:	e7fa      	b.n	8001a42 <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4c:	f7ff fb32 	bl	80010b4 <HAL_GetTick>
 8001a50:	9b01      	ldr	r3, [sp, #4]
 8001a52:	1ac0      	subs	r0, r0, r3
 8001a54:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <HAL_RCC_ClockConfig+0x150>)
 8001a56:	4298      	cmp	r0, r3
 8001a58:	d988      	bls.n	800196c <HAL_RCC_ClockConfig+0x3c>
 8001a5a:	e7b3      	b.n	80019c4 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a5c:	68a3      	ldr	r3, [r4, #8]
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	; (8001a88 <HAL_RCC_ClockConfig+0x158>)
 8001a60:	4013      	ands	r3, r2
 8001a62:	68ea      	ldr	r2, [r5, #12]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	60a3      	str	r3, [r4, #8]
 8001a68:	e788      	b.n	800197c <HAL_RCC_ClockConfig+0x4c>
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	40022000 	.word	0x40022000
 8001a70:	40021000 	.word	0x40021000
 8001a74:	0800e09c 	.word	0x0800e09c
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	20000008 	.word	0x20000008
 8001a80:	00001388 	.word	0x00001388
 8001a84:	fffff0ff 	.word	0xfffff0ff
 8001a88:	ffff8fff 	.word	0xffff8fff

08001a8c <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001a8e:	4a07      	ldr	r2, [pc, #28]	; (8001aac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	045b      	lsls	r3, r3, #17
 8001a94:	0f5b      	lsrs	r3, r3, #29
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	589b      	ldr	r3, [r3, r2]
 8001a9a:	221f      	movs	r2, #31
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aa0:	6810      	ldr	r0, [r2, #0]
 8001aa2:	40d8      	lsrs	r0, r3
}
 8001aa4:	4770      	bx	lr
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	0800e0dc 	.word	0x0800e0dc
 8001ab0:	20000000 	.word	0x20000000

08001ab4 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001ab4:	2207      	movs	r2, #7
{
 8001ab6:	b530      	push	{r4, r5, lr}

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ab8:	25f0      	movs	r5, #240	; 0xf0
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <HAL_RCC_GetClockConfig+0x2c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001abc:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001abe:	689c      	ldr	r4, [r3, #8]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ac0:	012d      	lsls	r5, r5, #4
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ac2:	4014      	ands	r4, r2
 8001ac4:	6044      	str	r4, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ac6:	689c      	ldr	r4, [r3, #8]
 8001ac8:	402c      	ands	r4, r5
 8001aca:	6084      	str	r4, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8001acc:	24e0      	movs	r4, #224	; 0xe0
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	01e4      	lsls	r4, r4, #7
 8001ad2:	4023      	ands	r3, r4
 8001ad4:	60c3      	str	r3, [r0, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ad6:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <HAL_RCC_GetClockConfig+0x30>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4013      	ands	r3, r2
 8001adc:	600b      	str	r3, [r1, #0]
}
 8001ade:	bd30      	pop	{r4, r5, pc}
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40022000 	.word	0x40022000

08001ae8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aea:	0005      	movs	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001aec:	682b      	ldr	r3, [r5, #0]
{
 8001aee:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001af0:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001af2:	039b      	lsls	r3, r3, #14
 8001af4:	d548      	bpl.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0xa0>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001af6:	2280      	movs	r2, #128	; 0x80
 8001af8:	4c4b      	ldr	r4, [pc, #300]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001afa:	0552      	lsls	r2, r2, #21
 8001afc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8001afe:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b00:	4213      	tst	r3, r2
 8001b02:	d108      	bne.n	8001b16 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b06:	4313      	orrs	r3, r2
 8001b08:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001b0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	9303      	str	r3, [sp, #12]
 8001b10:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001b12:	2301      	movs	r3, #1
 8001b14:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b16:	2780      	movs	r7, #128	; 0x80
 8001b18:	4e44      	ldr	r6, [pc, #272]	; (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8001b1a:	007f      	lsls	r7, r7, #1
 8001b1c:	6833      	ldr	r3, [r6, #0]
 8001b1e:	433b      	orrs	r3, r7
 8001b20:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b22:	f7ff fac7 	bl	80010b4 <HAL_GetTick>
 8001b26:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b28:	6833      	ldr	r3, [r6, #0]
 8001b2a:	423b      	tst	r3, r7
 8001b2c:	d01e      	beq.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x84>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001b2e:	23c0      	movs	r3, #192	; 0xc0
 8001b30:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4013      	ands	r3, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001b36:	d00f      	beq.n	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8001b38:	69aa      	ldr	r2, [r5, #24]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d00c      	beq.n	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x70>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001b3e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001b40:	4b3b      	ldr	r3, [pc, #236]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x148>)
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001b42:	6de1      	ldr	r1, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001b44:	4013      	ands	r3, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 8001b46:	2280      	movs	r2, #128	; 0x80
 8001b48:	0252      	lsls	r2, r2, #9
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	65e2      	str	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001b4e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001b50:	4938      	ldr	r1, [pc, #224]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b52:	400a      	ands	r2, r1
 8001b54:	65e2      	str	r2, [r4, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001b56:	65e3      	str	r3, [r4, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001b58:	07db      	lsls	r3, r3, #31
 8001b5a:	d457      	bmi.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x124>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b5c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001b5e:	4a34      	ldr	r2, [pc, #208]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x148>)
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b60:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b62:	4013      	ands	r3, r2
 8001b64:	69aa      	ldr	r2, [r5, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	65e3      	str	r3, [r4, #92]	; 0x5c
 8001b6a:	e006      	b.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x92>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b6c:	f7ff faa2 	bl	80010b4 <HAL_GetTick>
 8001b70:	9b01      	ldr	r3, [sp, #4]
 8001b72:	1ac0      	subs	r0, r0, r3
 8001b74:	2802      	cmp	r0, #2
 8001b76:	d9d7      	bls.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x40>
        ret = HAL_TIMEOUT;
 8001b78:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b7a:	9b00      	ldr	r3, [sp, #0]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d103      	bne.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b82:	4a2d      	ldr	r2, [pc, #180]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001b84:	4013      	ands	r3, r2
 8001b86:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b88:	682a      	ldr	r2, [r5, #0]
 8001b8a:	07d3      	lsls	r3, r2, #31
 8001b8c:	d506      	bpl.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b8e:	2403      	movs	r4, #3
 8001b90:	4925      	ldr	r1, [pc, #148]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001b92:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8001b94:	43a3      	bics	r3, r4
 8001b96:	686c      	ldr	r4, [r5, #4]
 8001b98:	4323      	orrs	r3, r4
 8001b9a:	654b      	str	r3, [r1, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b9c:	0793      	lsls	r3, r2, #30
 8001b9e:	d506      	bpl.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ba0:	240c      	movs	r4, #12
 8001ba2:	4921      	ldr	r1, [pc, #132]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001ba4:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8001ba6:	43a3      	bics	r3, r4
 8001ba8:	68ac      	ldr	r4, [r5, #8]
 8001baa:	4323      	orrs	r3, r4
 8001bac:	654b      	str	r3, [r1, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001bae:	0693      	lsls	r3, r2, #26
 8001bb0:	d506      	bpl.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bb2:	491d      	ldr	r1, [pc, #116]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001bb4:	4c21      	ldr	r4, [pc, #132]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001bb6:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8001bb8:	4023      	ands	r3, r4
 8001bba:	68ec      	ldr	r4, [r5, #12]
 8001bbc:	4323      	orrs	r3, r4
 8001bbe:	654b      	str	r3, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001bc0:	0453      	lsls	r3, r2, #17
 8001bc2:	d50f      	bpl.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001bc4:	4918      	ldr	r1, [pc, #96]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001bc6:	696c      	ldr	r4, [r5, #20]
 8001bc8:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	089b      	lsrs	r3, r3, #2
 8001bce:	4323      	orrs	r3, r4
 8001bd0:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001bd2:	2380      	movs	r3, #128	; 0x80
 8001bd4:	05db      	lsls	r3, r3, #23
 8001bd6:	429c      	cmp	r4, r3
 8001bd8:	d104      	bne.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001bda:	2380      	movs	r3, #128	; 0x80
 8001bdc:	68cc      	ldr	r4, [r1, #12]
 8001bde:	025b      	lsls	r3, r3, #9
 8001be0:	4323      	orrs	r3, r4
 8001be2:	60cb      	str	r3, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001be4:	0513      	lsls	r3, r2, #20
 8001be6:	d50f      	bpl.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001be8:	490f      	ldr	r1, [pc, #60]	; (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001bea:	4c15      	ldr	r4, [pc, #84]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001bec:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8001bee:	692a      	ldr	r2, [r5, #16]
 8001bf0:	4023      	ands	r3, r4
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	01db      	lsls	r3, r3, #7
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d104      	bne.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001bfe:	2380      	movs	r3, #128	; 0x80
 8001c00:	68ca      	ldr	r2, [r1, #12]
 8001c02:	025b      	lsls	r3, r3, #9
 8001c04:	4313      	orrs	r3, r2
 8001c06:	60cb      	str	r3, [r1, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8001c08:	b005      	add	sp, #20
 8001c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
 8001c0c:	f7ff fa52 	bl	80010b4 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c10:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8001c12:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c14:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001c16:	423b      	tst	r3, r7
 8001c18:	d1a0      	bne.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x74>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1a:	f7ff fa4b 	bl	80010b4 <HAL_GetTick>
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001c20:	1b80      	subs	r0, r0, r6
 8001c22:	4298      	cmp	r0, r3
 8001c24:	d9f6      	bls.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8001c26:	e7a7      	b.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40007000 	.word	0x40007000
 8001c30:	fffffcff 	.word	0xfffffcff
 8001c34:	fffeffff 	.word	0xfffeffff
 8001c38:	efffffff 	.word	0xefffffff
 8001c3c:	ffffcfff 	.word	0xffffcfff
 8001c40:	ffff3fff 	.word	0xffff3fff
 8001c44:	00001388 	.word	0x00001388

08001c48 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8001c48:	21a0      	movs	r1, #160	; 0xa0
 8001c4a:	6802      	ldr	r2, [r0, #0]
{
 8001c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8001c4e:	68d3      	ldr	r3, [r2, #12]
{
 8001c50:	0004      	movs	r4, r0
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8001c52:	438b      	bics	r3, r1
 8001c54:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8001c56:	f7ff fa2d 	bl	80010b4 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001c5a:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8001c5c:	0006      	movs	r6, r0
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8001c5e:	2520      	movs	r5, #32
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001c60:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8001c62:	6823      	ldr	r3, [r4, #0]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	422b      	tst	r3, r5
 8001c68:	d001      	beq.n	8001c6e <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8001c6a:	2000      	movs	r0, #0
}
 8001c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001c6e:	f7ff fa21 	bl	80010b4 <HAL_GetTick>
 8001c72:	1b80      	subs	r0, r0, r6
 8001c74:	42b8      	cmp	r0, r7
 8001c76:	d9f4      	bls.n	8001c62 <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8001c78:	2003      	movs	r0, #3
 8001c7a:	e7f7      	b.n	8001c6c <HAL_RTC_WaitForSynchro+0x24>

08001c7c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8001c7e:	2740      	movs	r7, #64	; 0x40
 8001c80:	6803      	ldr	r3, [r0, #0]
{
 8001c82:	0005      	movs	r5, r0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8001c84:	68da      	ldr	r2, [r3, #12]
  HAL_StatusTypeDef status = HAL_OK;  
 8001c86:	2400      	movs	r4, #0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8001c88:	423a      	tst	r2, r7
 8001c8a:	d10c      	bne.n	8001ca6 <RTC_EnterInitMode+0x2a>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8001c8c:	2280      	movs	r2, #128	; 0x80
 8001c8e:	68d9      	ldr	r1, [r3, #12]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8001c94:	f7ff fa0e 	bl	80010b4 <HAL_GetTick>
 8001c98:	0006      	movs	r6, r0
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8001c9a:	682b      	ldr	r3, [r5, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	423b      	tst	r3, r7
 8001ca0:	d101      	bne.n	8001ca6 <RTC_EnterInitMode+0x2a>
 8001ca2:	2c03      	cmp	r4, #3
 8001ca4:	d101      	bne.n	8001caa <RTC_EnterInitMode+0x2e>
      }
    }
  }

  return status;
}
 8001ca6:	0020      	movs	r0, r4
 8001ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8001caa:	f7ff fa03 	bl	80010b4 <HAL_GetTick>
 8001cae:	23fa      	movs	r3, #250	; 0xfa
 8001cb0:	1b80      	subs	r0, r0, r6
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4298      	cmp	r0, r3
 8001cb6:	d9f0      	bls.n	8001c9a <RTC_EnterInitMode+0x1e>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001cb8:	002b      	movs	r3, r5
 8001cba:	2403      	movs	r4, #3
 8001cbc:	3329      	adds	r3, #41	; 0x29
 8001cbe:	701c      	strb	r4, [r3, #0]
 8001cc0:	e7eb      	b.n	8001c9a <RTC_EnterInitMode+0x1e>
	...

08001cc4 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8001cc4:	2280      	movs	r2, #128	; 0x80
{
 8001cc6:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8001cc8:	4c0f      	ldr	r4, [pc, #60]	; (8001d08 <RTC_ExitInitMode+0x44>)
{
 8001cca:	0005      	movs	r5, r0
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8001ccc:	68e3      	ldr	r3, [r4, #12]
 8001cce:	4393      	bics	r3, r2
 8001cd0:	60e3      	str	r3, [r4, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8001cd2:	69a3      	ldr	r3, [r4, #24]
 8001cd4:	3a60      	subs	r2, #96	; 0x60
 8001cd6:	4213      	tst	r3, r2
 8001cd8:	d107      	bne.n	8001cea <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001cda:	f7ff ffb5 	bl	8001c48 <HAL_RTC_WaitForSynchro>
 8001cde:	2800      	cmp	r0, #0
 8001ce0:	d002      	beq.n	8001ce8 <RTC_ExitInitMode+0x24>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001ce2:	2003      	movs	r0, #3
 8001ce4:	3529      	adds	r5, #41	; 0x29
 8001ce6:	7028      	strb	r0, [r5, #0]
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 8001ce8:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001cea:	69a3      	ldr	r3, [r4, #24]
 8001cec:	4393      	bics	r3, r2
 8001cee:	61a3      	str	r3, [r4, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001cf0:	f7ff ffaa 	bl	8001c48 <HAL_RTC_WaitForSynchro>
 8001cf4:	2800      	cmp	r0, #0
 8001cf6:	d002      	beq.n	8001cfe <RTC_ExitInitMode+0x3a>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001cf8:	2003      	movs	r0, #3
 8001cfa:	3529      	adds	r5, #41	; 0x29
 8001cfc:	7028      	strb	r0, [r5, #0]
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001cfe:	2320      	movs	r3, #32
 8001d00:	69a2      	ldr	r2, [r4, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61a3      	str	r3, [r4, #24]
 8001d06:	e7ef      	b.n	8001ce8 <RTC_ExitInitMode+0x24>
 8001d08:	40002800 	.word	0x40002800

08001d0c <HAL_RTC_Init>:
{
 8001d0c:	b570      	push	{r4, r5, r6, lr}
 8001d0e:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d10:	2001      	movs	r0, #1
  if(hrtc != NULL)
 8001d12:	2c00      	cmp	r4, #0
 8001d14:	d047      	beq.n	8001da6 <HAL_RTC_Init+0x9a>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001d16:	0025      	movs	r5, r4
 8001d18:	3529      	adds	r5, #41	; 0x29
 8001d1a:	782b      	ldrb	r3, [r5, #0]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d108      	bne.n	8001d34 <HAL_RTC_Init+0x28>
    hrtc->Lock = HAL_UNLOCKED;
 8001d22:	0022      	movs	r2, r4
 8001d24:	3228      	adds	r2, #40	; 0x28
 8001d26:	7013      	strb	r3, [r2, #0]
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8001d28:	2388      	movs	r3, #136	; 0x88
 8001d2a:	021b      	lsls	r3, r3, #8
 8001d2c:	6063      	str	r3, [r4, #4]
    HAL_RTC_MspInit(hrtc);
 8001d2e:	0020      	movs	r0, r4
 8001d30:	f7fe fd42 	bl	80007b8 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8001d34:	2302      	movs	r3, #2
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001d36:	22ca      	movs	r2, #202	; 0xca
    hrtc->State = HAL_RTC_STATE_BUSY;
 8001d38:	702b      	strb	r3, [r5, #0]
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001d3a:	6823      	ldr	r3, [r4, #0]
    status = RTC_EnterInitMode(hrtc);
 8001d3c:	0020      	movs	r0, r4
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001d3e:	625a      	str	r2, [r3, #36]	; 0x24
 8001d40:	3a77      	subs	r2, #119	; 0x77
 8001d42:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8001d44:	f7ff ff9a 	bl	8001c7c <RTC_EnterInitMode>
    if(status == HAL_OK)
 8001d48:	2800      	cmp	r0, #0
 8001d4a:	d125      	bne.n	8001d98 <HAL_RTC_Init+0x8c>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8001d4c:	6823      	ldr	r3, [r4, #0]
 8001d4e:	4916      	ldr	r1, [pc, #88]	; (8001da8 <HAL_RTC_Init+0x9c>)
 8001d50:	699a      	ldr	r2, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001d52:	6960      	ldr	r0, [r4, #20]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8001d54:	400a      	ands	r2, r1
 8001d56:	619a      	str	r2, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001d58:	68a2      	ldr	r2, [r4, #8]
 8001d5a:	6999      	ldr	r1, [r3, #24]
 8001d5c:	4302      	orrs	r2, r0
 8001d5e:	69e0      	ldr	r0, [r4, #28]
 8001d60:	4302      	orrs	r2, r0
 8001d62:	430a      	orrs	r2, r1
 8001d64:	619a      	str	r2, [r3, #24]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8001d66:	6922      	ldr	r2, [r4, #16]
      status = RTC_ExitInitMode(hrtc);
 8001d68:	0020      	movs	r0, r4
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8001d6a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001d6c:	68e2      	ldr	r2, [r4, #12]
 8001d6e:	6919      	ldr	r1, [r3, #16]
 8001d70:	0412      	lsls	r2, r2, #16
 8001d72:	430a      	orrs	r2, r1
 8001d74:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8001d76:	f7ff ffa5 	bl	8001cc4 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8001d7a:	2800      	cmp	r0, #0
 8001d7c:	d10c      	bne.n	8001d98 <HAL_RTC_Init+0x8c>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8001d7e:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001d80:	6a26      	ldr	r6, [r4, #32]
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8001d82:	6993      	ldr	r3, [r2, #24]
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	08db      	lsrs	r3, r3, #3
 8001d88:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001d8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d8c:	6991      	ldr	r1, [r2, #24]
 8001d8e:	4333      	orrs	r3, r6
 8001d90:	69a6      	ldr	r6, [r4, #24]
 8001d92:	4333      	orrs	r3, r6
 8001d94:	430b      	orrs	r3, r1
 8001d96:	6193      	str	r3, [r2, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d98:	22ff      	movs	r2, #255	; 0xff
 8001d9a:	6823      	ldr	r3, [r4, #0]
 8001d9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8001d9e:	2800      	cmp	r0, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_RTC_Init+0x9a>
      hrtc->State = HAL_RTC_STATE_READY;
 8001da2:	2301      	movs	r3, #1
 8001da4:	702b      	strb	r3, [r5, #0]
}
 8001da6:	bd70      	pop	{r4, r5, r6, pc}
 8001da8:	fb8fffbf 	.word	0xfb8fffbf

08001dac <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8001dac:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while(Param >= 10U)
 8001dae:	2809      	cmp	r0, #9
 8001db0:	d803      	bhi.n	8001dba <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	4318      	orrs	r0, r3
 8001db6:	b2c0      	uxtb	r0, r0
}
 8001db8:	4770      	bx	lr
    Param -= 10U;
 8001dba:	380a      	subs	r0, #10
    bcdhigh++;
 8001dbc:	3301      	adds	r3, #1
    Param -= 10U;
 8001dbe:	b2c0      	uxtb	r0, r0
 8001dc0:	e7f5      	b.n	8001dae <RTC_ByteToBcd2+0x2>
	...

08001dc4 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 8001dc4:	0003      	movs	r3, r0
{
 8001dc6:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001dc8:	3328      	adds	r3, #40	; 0x28
{
 8001dca:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8001dcc:	9301      	str	r3, [sp, #4]
{
 8001dce:	9203      	str	r2, [sp, #12]
  __HAL_LOCK(hrtc);
 8001dd0:	781a      	ldrb	r2, [r3, #0]
 8001dd2:	2302      	movs	r3, #2
{
 8001dd4:	0005      	movs	r5, r0
 8001dd6:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8001dd8:	0018      	movs	r0, r3
 8001dda:	2a01      	cmp	r2, #1
 8001ddc:	d049      	beq.n	8001e72 <HAL_RTC_SetTime+0xae>
 8001dde:	2201      	movs	r2, #1
 8001de0:	9901      	ldr	r1, [sp, #4]
  status = RTC_EnterInitMode(hrtc);
 8001de2:	0028      	movs	r0, r5
  __HAL_LOCK(hrtc);
 8001de4:	700a      	strb	r2, [r1, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001de6:	002a      	movs	r2, r5
 8001de8:	3229      	adds	r2, #41	; 0x29
 8001dea:	7013      	strb	r3, [r2, #0]
 8001dec:	9202      	str	r2, [sp, #8]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001dee:	22ca      	movs	r2, #202	; 0xca
 8001df0:	682b      	ldr	r3, [r5, #0]
 8001df2:	625a      	str	r2, [r3, #36]	; 0x24
 8001df4:	3a77      	subs	r2, #119	; 0x77
 8001df6:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8001df8:	f7ff ff40 	bl	8001c7c <RTC_EnterInitMode>
  if(status == HAL_OK)
 8001dfc:	2800      	cmp	r0, #0
 8001dfe:	d12d      	bne.n	8001e5c <HAL_RTC_SetTime+0x98>
    if(Format == RTC_FORMAT_BIN)
 8001e00:	9b03      	ldr	r3, [sp, #12]
 8001e02:	682e      	ldr	r6, [r5, #0]
 8001e04:	2240      	movs	r2, #64	; 0x40
 8001e06:	7820      	ldrb	r0, [r4, #0]
 8001e08:	7867      	ldrb	r7, [r4, #1]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d133      	bne.n	8001e76 <HAL_RTC_SetTime+0xb2>
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001e0e:	69b3      	ldr	r3, [r6, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	d100      	bne.n	8001e16 <HAL_RTC_SetTime+0x52>
        sTime->TimeFormat = 0x00U;
 8001e14:	70e3      	strb	r3, [r4, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001e16:	f7ff ffc9 	bl	8001dac <RTC_ByteToBcd2>
 8001e1a:	9003      	str	r0, [sp, #12]
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001e1c:	0038      	movs	r0, r7
 8001e1e:	f7ff ffc5 	bl	8001dac <RTC_ByteToBcd2>
 8001e22:	0007      	movs	r7, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8001e24:	78a0      	ldrb	r0, [r4, #2]
 8001e26:	f7ff ffc1 	bl	8001dac <RTC_ByteToBcd2>
 8001e2a:	0003      	movs	r3, r0
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001e2c:	78e0      	ldrb	r0, [r4, #3]
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001e2e:	023f      	lsls	r7, r7, #8
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001e30:	0580      	lsls	r0, r0, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001e32:	4318      	orrs	r0, r3
 8001e34:	9b03      	ldr	r3, [sp, #12]
 8001e36:	041b      	lsls	r3, r3, #16
 8001e38:	4318      	orrs	r0, r3
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001e3a:	4307      	orrs	r7, r0
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001e3c:	4814      	ldr	r0, [pc, #80]	; (8001e90 <HAL_RTC_SetTime+0xcc>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001e3e:	4a15      	ldr	r2, [pc, #84]	; (8001e94 <HAL_RTC_SetTime+0xd0>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001e40:	4007      	ands	r7, r0
 8001e42:	6037      	str	r7, [r6, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001e44:	69b3      	ldr	r3, [r6, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001e46:	6921      	ldr	r1, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61b3      	str	r3, [r6, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001e4c:	68e3      	ldr	r3, [r4, #12]
 8001e4e:	69b2      	ldr	r2, [r6, #24]
 8001e50:	430b      	orrs	r3, r1
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61b3      	str	r3, [r6, #24]
    status = RTC_ExitInitMode(hrtc);
 8001e56:	0028      	movs	r0, r5
 8001e58:	f7ff ff34 	bl	8001cc4 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e5c:	22ff      	movs	r2, #255	; 0xff
 8001e5e:	682b      	ldr	r3, [r5, #0]
 8001e60:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 8001e62:	2800      	cmp	r0, #0
 8001e64:	d102      	bne.n	8001e6c <HAL_RTC_SetTime+0xa8>
   hrtc->State = HAL_RTC_STATE_READY;
 8001e66:	2301      	movs	r3, #1
 8001e68:	9a02      	ldr	r2, [sp, #8]
 8001e6a:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(hrtc);
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	9a01      	ldr	r2, [sp, #4]
 8001e70:	7013      	strb	r3, [r2, #0]
}
 8001e72:	b005      	add	sp, #20
 8001e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001e76:	69b3      	ldr	r3, [r6, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d100      	bne.n	8001e7e <HAL_RTC_SetTime+0xba>
        sTime->TimeFormat = 0x00U;
 8001e7c:	70e3      	strb	r3, [r4, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001e7e:	0400      	lsls	r0, r0, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001e80:	023f      	lsls	r7, r7, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001e82:	4307      	orrs	r7, r0
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8001e84:	78a0      	ldrb	r0, [r4, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001e86:	4307      	orrs	r7, r0
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001e88:	78e0      	ldrb	r0, [r4, #3]
 8001e8a:	0580      	lsls	r0, r0, #22
 8001e8c:	e7d5      	b.n	8001e3a <HAL_RTC_SetTime+0x76>
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	007f7f7f 	.word	0x007f7f7f
 8001e94:	fffbffff 	.word	0xfffbffff

08001e98 <HAL_RTC_SetDate>:
{
 8001e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8001e9a:	0006      	movs	r6, r0
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	3628      	adds	r6, #40	; 0x28
{
 8001ea0:	000d      	movs	r5, r1
 __HAL_LOCK(hrtc);
 8001ea2:	7831      	ldrb	r1, [r6, #0]
{
 8001ea4:	0004      	movs	r4, r0
 8001ea6:	b085      	sub	sp, #20
 __HAL_LOCK(hrtc);
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	2901      	cmp	r1, #1
 8001eac:	d03f      	beq.n	8001f2e <HAL_RTC_SetDate+0x96>
 8001eae:	2101      	movs	r1, #1
 8001eb0:	7031      	strb	r1, [r6, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001eb2:	0021      	movs	r1, r4
 8001eb4:	3129      	adds	r1, #41	; 0x29
 8001eb6:	9102      	str	r1, [sp, #8]
 8001eb8:	700b      	strb	r3, [r1, #0]
 8001eba:	7829      	ldrb	r1, [r5, #0]
 8001ebc:	78e8      	ldrb	r0, [r5, #3]
 8001ebe:	0349      	lsls	r1, r1, #13
 8001ec0:	786b      	ldrb	r3, [r5, #1]
 8001ec2:	78af      	ldrb	r7, [r5, #2]
 8001ec4:	9101      	str	r1, [sp, #4]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001ec6:	2a00      	cmp	r2, #0
 8001ec8:	d133      	bne.n	8001f32 <HAL_RTC_SetDate+0x9a>
 8001eca:	3210      	adds	r2, #16
 8001ecc:	4213      	tst	r3, r2
 8001ece:	d002      	beq.n	8001ed6 <HAL_RTC_SetDate+0x3e>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001ed0:	4393      	bics	r3, r2
 8001ed2:	330a      	adds	r3, #10
 8001ed4:	706b      	strb	r3, [r5, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001ed6:	f7ff ff69 	bl	8001dac <RTC_ByteToBcd2>
 8001eda:	9003      	str	r0, [sp, #12]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001edc:	7868      	ldrb	r0, [r5, #1]
 8001ede:	f7ff ff65 	bl	8001dac <RTC_ByteToBcd2>
 8001ee2:	0005      	movs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8001ee4:	0038      	movs	r0, r7
 8001ee6:	f7ff ff61 	bl	8001dac <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001eea:	9b03      	ldr	r3, [sp, #12]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001eec:	022d      	lsls	r5, r5, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001eee:	041f      	lsls	r7, r3, #16
 8001ef0:	9b01      	ldr	r3, [sp, #4]
 8001ef2:	4318      	orrs	r0, r3
 8001ef4:	4307      	orrs	r7, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001ef6:	22ca      	movs	r2, #202	; 0xca
 8001ef8:	6823      	ldr	r3, [r4, #0]
  status = RTC_EnterInitMode(hrtc);
 8001efa:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001efc:	625a      	str	r2, [r3, #36]	; 0x24
 8001efe:	3a77      	subs	r2, #119	; 0x77
 8001f00:	625a      	str	r2, [r3, #36]	; 0x24
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8001f02:	433d      	orrs	r5, r7
  status = RTC_EnterInitMode(hrtc);
 8001f04:	f7ff feba 	bl	8001c7c <RTC_EnterInitMode>
  if(status == HAL_OK)
 8001f08:	2800      	cmp	r0, #0
 8001f0a:	d106      	bne.n	8001f1a <HAL_RTC_SetDate+0x82>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001f0c:	4f0c      	ldr	r7, [pc, #48]	; (8001f40 <HAL_RTC_SetDate+0xa8>)
 8001f0e:	6823      	ldr	r3, [r4, #0]
 8001f10:	403d      	ands	r5, r7
 8001f12:	605d      	str	r5, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 8001f14:	0020      	movs	r0, r4
 8001f16:	f7ff fed5 	bl	8001cc4 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f1a:	22ff      	movs	r2, #255	; 0xff
 8001f1c:	6823      	ldr	r3, [r4, #0]
 8001f1e:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 8001f20:	2800      	cmp	r0, #0
 8001f22:	d102      	bne.n	8001f2a <HAL_RTC_SetDate+0x92>
    hrtc->State = HAL_RTC_STATE_READY;
 8001f24:	2301      	movs	r3, #1
 8001f26:	9a02      	ldr	r2, [sp, #8]
 8001f28:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(hrtc);
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	7033      	strb	r3, [r6, #0]
}
 8001f2e:	b005      	add	sp, #20
 8001f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8001f32:	9a01      	ldr	r2, [sp, #4]
 8001f34:	0400      	lsls	r0, r0, #16
 8001f36:	4310      	orrs	r0, r2
 8001f38:	4307      	orrs	r7, r0
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8001f3a:	021d      	lsls	r5, r3, #8
 8001f3c:	e7db      	b.n	8001ef6 <HAL_RTC_SetDate+0x5e>
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	00ffff3f 	.word	0x00ffff3f

08001f44 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f44:	21e0      	movs	r1, #224	; 0xe0
 8001f46:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001f48:	b510      	push	{r4, lr}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	438a      	bics	r2, r1
 8001f4e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f50:	2282      	movs	r2, #130	; 0x82
 8001f52:	6841      	ldr	r1, [r0, #4]
 8001f54:	0052      	lsls	r2, r2, #1
 8001f56:	4291      	cmp	r1, r2
 8001f58:	d10c      	bne.n	8001f74 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
 8001f5a:	2180      	movs	r1, #128	; 0x80
 8001f5c:	6882      	ldr	r2, [r0, #8]
 8001f5e:	0209      	lsls	r1, r1, #8
 8001f60:	428a      	cmp	r2, r1
 8001f62:	d003      	beq.n	8001f6c <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f64:	2180      	movs	r1, #128	; 0x80
 8001f66:	00c9      	lsls	r1, r1, #3
 8001f68:	428a      	cmp	r2, r1
 8001f6a:	d103      	bne.n	8001f74 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f6c:	2140      	movs	r1, #64	; 0x40
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	438a      	bics	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f74:	2180      	movs	r1, #128	; 0x80
 8001f76:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001f78:	0189      	lsls	r1, r1, #6
 8001f7a:	428a      	cmp	r2, r1
 8001f7c:	d106      	bne.n	8001f8c <SPI_WaitFifoStateUntilTimeout.part.1+0x48>
        {
          SPI_RESET_CRC(hspi);
 8001f7e:	6819      	ldr	r1, [r3, #0]
 8001f80:	4c07      	ldr	r4, [pc, #28]	; (8001fa0 <SPI_WaitFifoStateUntilTimeout.part.1+0x5c>)
 8001f82:	4021      	ands	r1, r4
 8001f84:	6019      	str	r1, [r3, #0]
 8001f86:	6819      	ldr	r1, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	2201      	movs	r2, #1
 8001f90:	335d      	adds	r3, #93	; 0x5d
 8001f92:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f94:	2300      	movs	r3, #0
 8001f96:	305c      	adds	r0, #92	; 0x5c
 8001f98:	7003      	strb	r3, [r0, #0]
      count--;
    }
  }

  return HAL_OK;
}
 8001f9a:	2003      	movs	r0, #3
 8001f9c:	bd10      	pop	{r4, pc}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	ffffdfff 	.word	0xffffdfff

08001fa4 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001fa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fa6:	000e      	movs	r6, r1
 8001fa8:	0014      	movs	r4, r2
 8001faa:	0005      	movs	r5, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001fac:	f7ff f882 	bl	80010b4 <HAL_GetTick>
 8001fb0:	19a4      	adds	r4, r4, r6
 8001fb2:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8001fb4:	f7ff f87e 	bl	80010b4 <HAL_GetTick>
 8001fb8:	0007      	movs	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001fba:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x54>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	015b      	lsls	r3, r3, #5
 8001fc0:	0d1b      	lsrs	r3, r3, #20
 8001fc2:	4363      	muls	r3, r4
      count--;
 8001fc4:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fc6:	682b      	ldr	r3, [r5, #0]
 8001fc8:	2280      	movs	r2, #128	; 0x80
 8001fca:	6898      	ldr	r0, [r3, #8]
 8001fcc:	4010      	ands	r0, r2
 8001fce:	d009      	beq.n	8001fe4 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x40>
    if (Timeout != HAL_MAX_DELAY)
 8001fd0:	1c72      	adds	r2, r6, #1
 8001fd2:	d0f9      	beq.n	8001fc8 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x24>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001fd4:	f7ff f86e 	bl	80010b4 <HAL_GetTick>
 8001fd8:	1bc0      	subs	r0, r0, r7
 8001fda:	42a0      	cmp	r0, r4
 8001fdc:	d303      	bcc.n	8001fe6 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x42>
 8001fde:	0028      	movs	r0, r5
 8001fe0:	f7ff ffb0 	bl	8001f44 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8001fe4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if(count == 0U)
 8001fe6:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8001fe8:	1e5a      	subs	r2, r3, #1
 8001fea:	4193      	sbcs	r3, r2
 8001fec:	425b      	negs	r3, r3
 8001fee:	401c      	ands	r4, r3
      count--;
 8001ff0:	9b01      	ldr	r3, [sp, #4]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	e7e6      	b.n	8001fc4 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x20>
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	20000000 	.word	0x20000000

08001ffc <SPI_WaitFifoStateUntilTimeout.constprop.10>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ffe:	0016      	movs	r6, r2
 8002000:	001c      	movs	r4, r3
 8002002:	b085      	sub	sp, #20
 8002004:	000f      	movs	r7, r1
 8002006:	0005      	movs	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002008:	f7ff f854 	bl	80010b4 <HAL_GetTick>
 800200c:	19a4      	adds	r4, r4, r6
 800200e:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8002010:	f7ff f850 	bl	80010b4 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002014:	2223      	movs	r2, #35	; 0x23
 8002016:	4b12      	ldr	r3, [pc, #72]	; (8002060 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x64>)
  tmp_tickstart = HAL_GetTick();
 8002018:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4353      	muls	r3, r2
 800201e:	0d1b      	lsrs	r3, r3, #20
 8002020:	4363      	muls	r3, r4
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }      
      count--;
 8002022:	9303      	str	r3, [sp, #12]
  while ((hspi->Instance->SR & Fifo) != State)
 8002024:	682b      	ldr	r3, [r5, #0]
 8002026:	6898      	ldr	r0, [r3, #8]
 8002028:	4038      	ands	r0, r7
 800202a:	d00f      	beq.n	800204c <SPI_WaitFifoStateUntilTimeout.constprop.10+0x50>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800202c:	22c0      	movs	r2, #192	; 0xc0
 800202e:	00d2      	lsls	r2, r2, #3
 8002030:	4297      	cmp	r7, r2
 8002032:	d100      	bne.n	8002036 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x3a>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002034:	7b1a      	ldrb	r2, [r3, #12]
    if (Timeout != HAL_MAX_DELAY)
 8002036:	1c72      	adds	r2, r6, #1
 8002038:	d0f5      	beq.n	8002026 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800203a:	f7ff f83b 	bl	80010b4 <HAL_GetTick>
 800203e:	9b01      	ldr	r3, [sp, #4]
 8002040:	1ac0      	subs	r0, r0, r3
 8002042:	42a0      	cmp	r0, r4
 8002044:	d304      	bcc.n	8002050 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x54>
 8002046:	0028      	movs	r0, r5
 8002048:	f7ff ff7c 	bl	8001f44 <SPI_WaitFifoStateUntilTimeout.part.1>
    }
  }

  return HAL_OK;
}
 800204c:	b005      	add	sp, #20
 800204e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 8002050:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8002052:	1e5a      	subs	r2, r3, #1
 8002054:	4193      	sbcs	r3, r2
 8002056:	425b      	negs	r3, r3
 8002058:	401c      	ands	r4, r3
      count--;
 800205a:	9b03      	ldr	r3, [sp, #12]
 800205c:	3b01      	subs	r3, #1
 800205e:	e7e0      	b.n	8002022 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x26>
 8002060:	20000000 	.word	0x20000000

08002064 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002064:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002066:	0013      	movs	r3, r2
{
 8002068:	000d      	movs	r5, r1
 800206a:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800206c:	000a      	movs	r2, r1
 800206e:	21c0      	movs	r1, #192	; 0xc0
 8002070:	0149      	lsls	r1, r1, #5
{
 8002072:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002074:	f7ff ffc2 	bl	8001ffc <SPI_WaitFifoStateUntilTimeout.constprop.10>
 8002078:	2800      	cmp	r0, #0
 800207a:	d005      	beq.n	8002088 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800207c:	2320      	movs	r3, #32
 800207e:	6e22      	ldr	r2, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002080:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002082:	4313      	orrs	r3, r2
 8002084:	6623      	str	r3, [r4, #96]	; 0x60
 8002086:	e00f      	b.n	80020a8 <SPI_EndRxTxTransaction+0x44>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002088:	0032      	movs	r2, r6
 800208a:	0029      	movs	r1, r5
 800208c:	0020      	movs	r0, r4
 800208e:	f7ff ff89 	bl	8001fa4 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8002092:	2800      	cmp	r0, #0
 8002094:	d1f2      	bne.n	800207c <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002096:	21c0      	movs	r1, #192	; 0xc0
 8002098:	0033      	movs	r3, r6
 800209a:	002a      	movs	r2, r5
 800209c:	00c9      	lsls	r1, r1, #3
 800209e:	0020      	movs	r0, r4
 80020a0:	f7ff ffac 	bl	8001ffc <SPI_WaitFifoStateUntilTimeout.constprop.10>
 80020a4:	2800      	cmp	r0, #0
 80020a6:	d1e9      	bne.n	800207c <SPI_EndRxTxTransaction+0x18>
  }

  return HAL_OK;
}
 80020a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080020ac <HAL_SPI_Init>:
{
 80020ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ae:	0004      	movs	r4, r0
    return HAL_ERROR;
 80020b0:	2001      	movs	r0, #1
  if (hspi == NULL)
 80020b2:	2c00      	cmp	r4, #0
 80020b4:	d067      	beq.n	8002186 <HAL_SPI_Init+0xda>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d165      	bne.n	8002188 <HAL_SPI_Init+0xdc>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020bc:	2282      	movs	r2, #130	; 0x82
 80020be:	6861      	ldr	r1, [r4, #4]
 80020c0:	0052      	lsls	r2, r2, #1
 80020c2:	4291      	cmp	r1, r2
 80020c4:	d000      	beq.n	80020c8 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020c6:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020c8:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80020ca:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020cc:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80020ce:	355d      	adds	r5, #93	; 0x5d
 80020d0:	782b      	ldrb	r3, [r5, #0]
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d105      	bne.n	80020e4 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 80020d8:	0022      	movs	r2, r4
 80020da:	325c      	adds	r2, #92	; 0x5c
 80020dc:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 80020de:	0020      	movs	r0, r4
 80020e0:	f7fe fbaa 	bl	8000838 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80020e4:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80020e6:	2140      	movs	r1, #64	; 0x40
 80020e8:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80020ea:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 80020ec:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020ee:	68e5      	ldr	r5, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 80020f0:	438b      	bics	r3, r1
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020f2:	21e0      	movs	r1, #224	; 0xe0
  __HAL_SPI_DISABLE(hspi);
 80020f4:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020f6:	00c9      	lsls	r1, r1, #3
 80020f8:	2300      	movs	r3, #0
 80020fa:	428d      	cmp	r5, r1
 80020fc:	d848      	bhi.n	8002190 <HAL_SPI_Init+0xe4>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80020fe:	2080      	movs	r0, #128	; 0x80
 8002100:	0140      	lsls	r0, r0, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002102:	428d      	cmp	r5, r1
 8002104:	d000      	beq.n	8002108 <HAL_SPI_Init+0x5c>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002106:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002108:	2382      	movs	r3, #130	; 0x82
 800210a:	6866      	ldr	r6, [r4, #4]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	4033      	ands	r3, r6
 8002110:	2684      	movs	r6, #132	; 0x84
 8002112:	68a7      	ldr	r7, [r4, #8]
 8002114:	0236      	lsls	r6, r6, #8
 8002116:	403e      	ands	r6, r7
 8002118:	4333      	orrs	r3, r6
 800211a:	2602      	movs	r6, #2
 800211c:	6927      	ldr	r7, [r4, #16]
 800211e:	69a1      	ldr	r1, [r4, #24]
 8002120:	403e      	ands	r6, r7
 8002122:	4333      	orrs	r3, r6
 8002124:	2601      	movs	r6, #1
 8002126:	6967      	ldr	r7, [r4, #20]
 8002128:	46b4      	mov	ip, r6
 800212a:	4037      	ands	r7, r6
 800212c:	433b      	orrs	r3, r7
 800212e:	2780      	movs	r7, #128	; 0x80
 8002130:	00bf      	lsls	r7, r7, #2
 8002132:	400f      	ands	r7, r1
 8002134:	433b      	orrs	r3, r7
 8002136:	2738      	movs	r7, #56	; 0x38
 8002138:	69e6      	ldr	r6, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800213a:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800213c:	4037      	ands	r7, r6
 800213e:	433b      	orrs	r3, r7
 8002140:	2780      	movs	r7, #128	; 0x80
 8002142:	6a26      	ldr	r6, [r4, #32]
 8002144:	4037      	ands	r7, r6
 8002146:	433b      	orrs	r3, r7
 8002148:	2780      	movs	r7, #128	; 0x80
 800214a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800214c:	01bf      	lsls	r7, r7, #6
 800214e:	4037      	ands	r7, r6
 8002150:	433b      	orrs	r3, r7
 8002152:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002154:	2310      	movs	r3, #16
 8002156:	2708      	movs	r7, #8
 8002158:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800215a:	4033      	ands	r3, r6
 800215c:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800215e:	4037      	ands	r7, r6
 8002160:	433b      	orrs	r3, r7
 8002162:	27f0      	movs	r7, #240	; 0xf0
 8002164:	013f      	lsls	r7, r7, #4
 8002166:	403d      	ands	r5, r7
 8002168:	431d      	orrs	r5, r3
 800216a:	2304      	movs	r3, #4
 800216c:	4019      	ands	r1, r3
 800216e:	4329      	orrs	r1, r5
 8002170:	4308      	orrs	r0, r1
 8002172:	6050      	str	r0, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002174:	69d3      	ldr	r3, [r2, #28]
 8002176:	4908      	ldr	r1, [pc, #32]	; (8002198 <HAL_SPI_Init+0xec>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002178:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800217a:	400b      	ands	r3, r1
 800217c:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 800217e:	4663      	mov	r3, ip
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002180:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002182:	345d      	adds	r4, #93	; 0x5d
 8002184:	7023      	strb	r3, [r4, #0]
}
 8002186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002188:	2300      	movs	r3, #0
 800218a:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800218c:	6163      	str	r3, [r4, #20]
 800218e:	e79b      	b.n	80020c8 <HAL_SPI_Init+0x1c>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002190:	21f0      	movs	r1, #240	; 0xf0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002192:	0018      	movs	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002194:	0109      	lsls	r1, r1, #4
 8002196:	e7b4      	b.n	8002102 <HAL_SPI_Init+0x56>
 8002198:	fffff7ff 	.word	0xfffff7ff

0800219c <HAL_SPI_Transmit>:
{
 800219c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800219e:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 80021a0:	0003      	movs	r3, r0
{
 80021a2:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 80021a4:	335c      	adds	r3, #92	; 0x5c
 80021a6:	9301      	str	r3, [sp, #4]
 80021a8:	781b      	ldrb	r3, [r3, #0]
{
 80021aa:	0004      	movs	r4, r0
 80021ac:	000d      	movs	r5, r1
 80021ae:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 80021b0:	2002      	movs	r0, #2
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d100      	bne.n	80021b8 <HAL_SPI_Transmit+0x1c>
 80021b6:	e07e      	b.n	80022b6 <HAL_SPI_Transmit+0x11a>
 80021b8:	2301      	movs	r3, #1
 80021ba:	9a01      	ldr	r2, [sp, #4]
 80021bc:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80021be:	f7fe ff79 	bl	80010b4 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80021c2:	0022      	movs	r2, r4
  tickstart = HAL_GetTick();
 80021c4:	9000      	str	r0, [sp, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 80021c6:	325d      	adds	r2, #93	; 0x5d
 80021c8:	7813      	ldrb	r3, [r2, #0]
    errorcode = HAL_BUSY;
 80021ca:	2002      	movs	r0, #2
  if (hspi->State != HAL_SPI_STATE_READY)
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d16b      	bne.n	80022aa <HAL_SPI_Transmit+0x10e>
    errorcode = HAL_ERROR;
 80021d2:	0018      	movs	r0, r3
  if ((pData == NULL) || (Size == 0U))
 80021d4:	2d00      	cmp	r5, #0
 80021d6:	d068      	beq.n	80022aa <HAL_SPI_Transmit+0x10e>
 80021d8:	2f00      	cmp	r7, #0
 80021da:	d066      	beq.n	80022aa <HAL_SPI_Transmit+0x10e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80021dc:	3302      	adds	r3, #2
 80021de:	7013      	strb	r3, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021e0:	2300      	movs	r3, #0
  hspi->RxXferSize  = 0U;
 80021e2:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021e4:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021e6:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80021e8:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80021ea:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80021ec:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferCount = 0U;
 80021ee:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 80021f0:	8793      	strh	r3, [r2, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80021f2:	87d3      	strh	r3, [r2, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80021f4:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 80021f6:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	68a1      	ldr	r1, [r4, #8]
 80021fc:	6822      	ldr	r2, [r4, #0]
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	4299      	cmp	r1, r3
 8002202:	d108      	bne.n	8002216 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_DISABLE(hspi);
 8002204:	2140      	movs	r1, #64	; 0x40
 8002206:	6813      	ldr	r3, [r2, #0]
 8002208:	438b      	bics	r3, r1
 800220a:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800220c:	2380      	movs	r3, #128	; 0x80
 800220e:	6811      	ldr	r1, [r2, #0]
 8002210:	01db      	lsls	r3, r3, #7
 8002212:	430b      	orrs	r3, r1
 8002214:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002216:	2340      	movs	r3, #64	; 0x40
 8002218:	6811      	ldr	r1, [r2, #0]
 800221a:	4219      	tst	r1, r3
 800221c:	d102      	bne.n	8002224 <HAL_SPI_Transmit+0x88>
    __HAL_SPI_ENABLE(hspi);
 800221e:	6811      	ldr	r1, [r2, #0]
 8002220:	430b      	orrs	r3, r1
 8002222:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002224:	21e0      	movs	r1, #224	; 0xe0
 8002226:	68e0      	ldr	r0, [r4, #12]
 8002228:	6863      	ldr	r3, [r4, #4]
 800222a:	00c9      	lsls	r1, r1, #3
 800222c:	4288      	cmp	r0, r1
 800222e:	d944      	bls.n	80022ba <HAL_SPI_Transmit+0x11e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <HAL_SPI_Transmit+0x9c>
 8002234:	2f01      	cmp	r7, #1
 8002236:	d107      	bne.n	8002248 <HAL_SPI_Transmit+0xac>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002238:	882b      	ldrh	r3, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800223a:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800223c:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 800223e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002240:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8002242:	3b01      	subs	r3, #1
 8002244:	b29b      	uxth	r3, r3
 8002246:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002248:	2502      	movs	r5, #2
 800224a:	e00c      	b.n	8002266 <HAL_SPI_Transmit+0xca>
 800224c:	6822      	ldr	r2, [r4, #0]
 800224e:	6893      	ldr	r3, [r2, #8]
 8002250:	422b      	tst	r3, r5
 8002252:	d021      	beq.n	8002298 <HAL_SPI_Transmit+0xfc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002254:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002256:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002258:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800225a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800225c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800225e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002260:	3b01      	subs	r3, #1
 8002262:	b29b      	uxth	r3, r3
 8002264:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8002266:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1ef      	bne.n	800224c <HAL_SPI_Transmit+0xb0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800226c:	9a00      	ldr	r2, [sp, #0]
 800226e:	0031      	movs	r1, r6
 8002270:	0020      	movs	r0, r4
 8002272:	f7ff fef7 	bl	8002064 <SPI_EndRxTxTransaction>
 8002276:	2800      	cmp	r0, #0
 8002278:	d149      	bne.n	800230e <HAL_SPI_Transmit+0x172>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800227a:	68a3      	ldr	r3, [r4, #8]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d106      	bne.n	800228e <HAL_SPI_Transmit+0xf2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002280:	9303      	str	r3, [sp, #12]
 8002282:	6823      	ldr	r3, [r4, #0]
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	9203      	str	r2, [sp, #12]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	9303      	str	r3, [sp, #12]
 800228c:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800228e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002290:	1e43      	subs	r3, r0, #1
 8002292:	4198      	sbcs	r0, r3
    errorcode = HAL_BUSY;
 8002294:	b2c0      	uxtb	r0, r0
error:
 8002296:	e008      	b.n	80022aa <HAL_SPI_Transmit+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002298:	f7fe ff0c 	bl	80010b4 <HAL_GetTick>
 800229c:	9b00      	ldr	r3, [sp, #0]
 800229e:	1ac0      	subs	r0, r0, r3
 80022a0:	42b0      	cmp	r0, r6
 80022a2:	d3e0      	bcc.n	8002266 <HAL_SPI_Transmit+0xca>
 80022a4:	1c73      	adds	r3, r6, #1
 80022a6:	d0de      	beq.n	8002266 <HAL_SPI_Transmit+0xca>
          errorcode = HAL_TIMEOUT;
 80022a8:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80022aa:	2301      	movs	r3, #1
 80022ac:	345d      	adds	r4, #93	; 0x5d
 80022ae:	7023      	strb	r3, [r4, #0]
  __HAL_UNLOCK(hspi);
 80022b0:	2300      	movs	r3, #0
 80022b2:	9a01      	ldr	r2, [sp, #4]
 80022b4:	7013      	strb	r3, [r2, #0]
}
 80022b6:	b005      	add	sp, #20
 80022b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_SPI_Transmit+0x126>
 80022be:	2f01      	cmp	r7, #1
 80022c0:	d108      	bne.n	80022d4 <HAL_SPI_Transmit+0x138>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022c2:	782b      	ldrb	r3, [r5, #0]
 80022c4:	7313      	strb	r3, [r2, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80022c8:	3301      	adds	r3, #1
 80022ca:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80022cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022d4:	2502      	movs	r5, #2
 80022d6:	e00d      	b.n	80022f4 <HAL_SPI_Transmit+0x158>
 80022d8:	6823      	ldr	r3, [r4, #0]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	422a      	tst	r2, r5
 80022de:	d00d      	beq.n	80022fc <HAL_SPI_Transmit+0x160>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80022e2:	7812      	ldrb	r2, [r2, #0]
 80022e4:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80022e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80022e8:	3301      	adds	r3, #1
 80022ea:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80022ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80022f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1ee      	bne.n	80022d8 <HAL_SPI_Transmit+0x13c>
 80022fa:	e7b7      	b.n	800226c <HAL_SPI_Transmit+0xd0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022fc:	f7fe feda 	bl	80010b4 <HAL_GetTick>
 8002300:	9b00      	ldr	r3, [sp, #0]
 8002302:	1ac0      	subs	r0, r0, r3
 8002304:	42b0      	cmp	r0, r6
 8002306:	d3f5      	bcc.n	80022f4 <HAL_SPI_Transmit+0x158>
 8002308:	1c73      	adds	r3, r6, #1
 800230a:	d0f3      	beq.n	80022f4 <HAL_SPI_Transmit+0x158>
 800230c:	e7cc      	b.n	80022a8 <HAL_SPI_Transmit+0x10c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800230e:	2320      	movs	r3, #32
 8002310:	6623      	str	r3, [r4, #96]	; 0x60
 8002312:	e7b2      	b.n	800227a <HAL_SPI_Transmit+0xde>

08002314 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002314:	2201      	movs	r2, #1
 8002316:	6a03      	ldr	r3, [r0, #32]
{
 8002318:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800231a:	4393      	bics	r3, r2
 800231c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800231e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002320:	4a19      	ldr	r2, [pc, #100]	; (8002388 <TIM_OC1_SetConfig+0x74>)
  tmpcr2 =  TIMx->CR2;
 8002322:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002324:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002326:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002328:	680a      	ldr	r2, [r1, #0]
 800232a:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800232c:	2202      	movs	r2, #2
 800232e:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002330:	688a      	ldr	r2, [r1, #8]
 8002332:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002334:	4a15      	ldr	r2, [pc, #84]	; (800238c <TIM_OC1_SetConfig+0x78>)
 8002336:	4290      	cmp	r0, r2
 8002338:	d008      	beq.n	800234c <TIM_OC1_SetConfig+0x38>
 800233a:	4e15      	ldr	r6, [pc, #84]	; (8002390 <TIM_OC1_SetConfig+0x7c>)
 800233c:	42b0      	cmp	r0, r6
 800233e:	d005      	beq.n	800234c <TIM_OC1_SetConfig+0x38>
 8002340:	4e14      	ldr	r6, [pc, #80]	; (8002394 <TIM_OC1_SetConfig+0x80>)
 8002342:	42b0      	cmp	r0, r6
 8002344:	d002      	beq.n	800234c <TIM_OC1_SetConfig+0x38>
 8002346:	4e14      	ldr	r6, [pc, #80]	; (8002398 <TIM_OC1_SetConfig+0x84>)
 8002348:	42b0      	cmp	r0, r6
 800234a:	d116      	bne.n	800237a <TIM_OC1_SetConfig+0x66>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800234c:	2608      	movs	r6, #8
 800234e:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002350:	68ce      	ldr	r6, [r1, #12]
 8002352:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002354:	2604      	movs	r6, #4
 8002356:	43b3      	bics	r3, r6
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002358:	4290      	cmp	r0, r2
 800235a:	d008      	beq.n	800236e <TIM_OC1_SetConfig+0x5a>
 800235c:	4a0c      	ldr	r2, [pc, #48]	; (8002390 <TIM_OC1_SetConfig+0x7c>)
 800235e:	4290      	cmp	r0, r2
 8002360:	d005      	beq.n	800236e <TIM_OC1_SetConfig+0x5a>
 8002362:	4a0c      	ldr	r2, [pc, #48]	; (8002394 <TIM_OC1_SetConfig+0x80>)
 8002364:	4290      	cmp	r0, r2
 8002366:	d002      	beq.n	800236e <TIM_OC1_SetConfig+0x5a>
 8002368:	4a0b      	ldr	r2, [pc, #44]	; (8002398 <TIM_OC1_SetConfig+0x84>)
 800236a:	4290      	cmp	r0, r2
 800236c:	d105      	bne.n	800237a <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800236e:	4a0b      	ldr	r2, [pc, #44]	; (800239c <TIM_OC1_SetConfig+0x88>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002370:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002372:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002374:	694c      	ldr	r4, [r1, #20]
 8002376:	4334      	orrs	r4, r6
 8002378:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800237a:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800237c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800237e:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002380:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002382:	6203      	str	r3, [r0, #32]
}
 8002384:	bd70      	pop	{r4, r5, r6, pc}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	fffeff8c 	.word	0xfffeff8c
 800238c:	40012c00 	.word	0x40012c00
 8002390:	40014000 	.word	0x40014000
 8002394:	40014400 	.word	0x40014400
 8002398:	40014800 	.word	0x40014800
 800239c:	fffffcff 	.word	0xfffffcff

080023a0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023a0:	6a03      	ldr	r3, [r0, #32]
 80023a2:	4a18      	ldr	r2, [pc, #96]	; (8002404 <TIM_OC3_SetConfig+0x64>)
{
 80023a4:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023a6:	4013      	ands	r3, r2
 80023a8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023aa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80023ac:	4d16      	ldr	r5, [pc, #88]	; (8002408 <TIM_OC3_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 80023ae:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80023b0:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80023b2:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023b4:	680d      	ldr	r5, [r1, #0]
 80023b6:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80023b8:	4d14      	ldr	r5, [pc, #80]	; (800240c <TIM_OC3_SetConfig+0x6c>)
 80023ba:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023bc:	688d      	ldr	r5, [r1, #8]
 80023be:	022d      	lsls	r5, r5, #8
 80023c0:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80023c2:	4d13      	ldr	r5, [pc, #76]	; (8002410 <TIM_OC3_SetConfig+0x70>)
 80023c4:	42a8      	cmp	r0, r5
 80023c6:	d10e      	bne.n	80023e6 <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80023c8:	4d12      	ldr	r5, [pc, #72]	; (8002414 <TIM_OC3_SetConfig+0x74>)
 80023ca:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023cc:	68cb      	ldr	r3, [r1, #12]
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023d2:	4d11      	ldr	r5, [pc, #68]	; (8002418 <TIM_OC3_SetConfig+0x78>)
 80023d4:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023d6:	4d11      	ldr	r5, [pc, #68]	; (800241c <TIM_OC3_SetConfig+0x7c>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023d8:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023da:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023dc:	698a      	ldr	r2, [r1, #24]
 80023de:	4332      	orrs	r2, r6
 80023e0:	0112      	lsls	r2, r2, #4
 80023e2:	432a      	orrs	r2, r5
 80023e4:	e008      	b.n	80023f8 <TIM_OC3_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023e6:	4d0e      	ldr	r5, [pc, #56]	; (8002420 <TIM_OC3_SetConfig+0x80>)
 80023e8:	42a8      	cmp	r0, r5
 80023ea:	d0f4      	beq.n	80023d6 <TIM_OC3_SetConfig+0x36>
 80023ec:	4d0d      	ldr	r5, [pc, #52]	; (8002424 <TIM_OC3_SetConfig+0x84>)
 80023ee:	42a8      	cmp	r0, r5
 80023f0:	d0f1      	beq.n	80023d6 <TIM_OC3_SetConfig+0x36>
 80023f2:	4d0d      	ldr	r5, [pc, #52]	; (8002428 <TIM_OC3_SetConfig+0x88>)
 80023f4:	42a8      	cmp	r0, r5
 80023f6:	d0ee      	beq.n	80023d6 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023f8:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80023fa:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80023fc:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80023fe:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002400:	6203      	str	r3, [r0, #32]
}
 8002402:	bd70      	pop	{r4, r5, r6, pc}
 8002404:	fffffeff 	.word	0xfffffeff
 8002408:	fffeff8c 	.word	0xfffeff8c
 800240c:	fffffdff 	.word	0xfffffdff
 8002410:	40012c00 	.word	0x40012c00
 8002414:	fffff7ff 	.word	0xfffff7ff
 8002418:	fffffbff 	.word	0xfffffbff
 800241c:	ffffcfff 	.word	0xffffcfff
 8002420:	40014000 	.word	0x40014000
 8002424:	40014400 	.word	0x40014400
 8002428:	40014800 	.word	0x40014800

0800242c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800242c:	6a03      	ldr	r3, [r0, #32]
 800242e:	4a14      	ldr	r2, [pc, #80]	; (8002480 <TIM_OC4_SetConfig+0x54>)
{
 8002430:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002432:	4013      	ands	r3, r2
 8002434:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002436:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002438:	4c12      	ldr	r4, [pc, #72]	; (8002484 <TIM_OC4_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 800243a:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800243c:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800243e:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002440:	680c      	ldr	r4, [r1, #0]
 8002442:	0224      	lsls	r4, r4, #8
 8002444:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002446:	4c10      	ldr	r4, [pc, #64]	; (8002488 <TIM_OC4_SetConfig+0x5c>)
 8002448:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800244a:	688c      	ldr	r4, [r1, #8]
 800244c:	0324      	lsls	r4, r4, #12
 800244e:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002450:	4c0e      	ldr	r4, [pc, #56]	; (800248c <TIM_OC4_SetConfig+0x60>)
 8002452:	42a0      	cmp	r0, r4
 8002454:	d008      	beq.n	8002468 <TIM_OC4_SetConfig+0x3c>
 8002456:	4c0e      	ldr	r4, [pc, #56]	; (8002490 <TIM_OC4_SetConfig+0x64>)
 8002458:	42a0      	cmp	r0, r4
 800245a:	d005      	beq.n	8002468 <TIM_OC4_SetConfig+0x3c>
 800245c:	4c0d      	ldr	r4, [pc, #52]	; (8002494 <TIM_OC4_SetConfig+0x68>)
 800245e:	42a0      	cmp	r0, r4
 8002460:	d002      	beq.n	8002468 <TIM_OC4_SetConfig+0x3c>
 8002462:	4c0d      	ldr	r4, [pc, #52]	; (8002498 <TIM_OC4_SetConfig+0x6c>)
 8002464:	42a0      	cmp	r0, r4
 8002466:	d104      	bne.n	8002472 <TIM_OC4_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002468:	4c0c      	ldr	r4, [pc, #48]	; (800249c <TIM_OC4_SetConfig+0x70>)
 800246a:	4023      	ands	r3, r4

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800246c:	694c      	ldr	r4, [r1, #20]
 800246e:	01a4      	lsls	r4, r4, #6
 8002470:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002472:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002474:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002476:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002478:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800247a:	6202      	str	r2, [r0, #32]
}
 800247c:	bd30      	pop	{r4, r5, pc}
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	ffffefff 	.word	0xffffefff
 8002484:	feff8cff 	.word	0xfeff8cff
 8002488:	ffffdfff 	.word	0xffffdfff
 800248c:	40012c00 	.word	0x40012c00
 8002490:	40014000 	.word	0x40014000
 8002494:	40014400 	.word	0x40014400
 8002498:	40014800 	.word	0x40014800
 800249c:	ffffbfff 	.word	0xffffbfff

080024a0 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80024a0:	6a03      	ldr	r3, [r0, #32]
 80024a2:	4a13      	ldr	r2, [pc, #76]	; (80024f0 <TIM_OC5_SetConfig+0x50>)
{
 80024a4:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80024a6:	4013      	ands	r3, r2
 80024a8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024aa:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80024ac:	4e11      	ldr	r6, [pc, #68]	; (80024f4 <TIM_OC5_SetConfig+0x54>)
  tmpcr2 =  TIMx->CR2;
 80024ae:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 80024b0:	6d45      	ldr	r5, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80024b2:	4035      	ands	r5, r6
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024b4:	680e      	ldr	r6, [r1, #0]
 80024b6:	4335      	orrs	r5, r6

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80024b8:	4e0f      	ldr	r6, [pc, #60]	; (80024f8 <TIM_OC5_SetConfig+0x58>)
 80024ba:	4034      	ands	r4, r6
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80024bc:	688e      	ldr	r6, [r1, #8]
 80024be:	0436      	lsls	r6, r6, #16
 80024c0:	4334      	orrs	r4, r6

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024c2:	4e0e      	ldr	r6, [pc, #56]	; (80024fc <TIM_OC5_SetConfig+0x5c>)
 80024c4:	42b0      	cmp	r0, r6
 80024c6:	d008      	beq.n	80024da <TIM_OC5_SetConfig+0x3a>
 80024c8:	4e0d      	ldr	r6, [pc, #52]	; (8002500 <TIM_OC5_SetConfig+0x60>)
 80024ca:	42b0      	cmp	r0, r6
 80024cc:	d005      	beq.n	80024da <TIM_OC5_SetConfig+0x3a>
 80024ce:	4e0d      	ldr	r6, [pc, #52]	; (8002504 <TIM_OC5_SetConfig+0x64>)
 80024d0:	42b0      	cmp	r0, r6
 80024d2:	d002      	beq.n	80024da <TIM_OC5_SetConfig+0x3a>
 80024d4:	4e0c      	ldr	r6, [pc, #48]	; (8002508 <TIM_OC5_SetConfig+0x68>)
 80024d6:	42b0      	cmp	r0, r6
 80024d8:	d103      	bne.n	80024e2 <TIM_OC5_SetConfig+0x42>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80024da:	4013      	ands	r3, r2
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80024dc:	694a      	ldr	r2, [r1, #20]
 80024de:	0212      	lsls	r2, r2, #8
 80024e0:	4313      	orrs	r3, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024e2:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80024e4:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 80024e6:	6545      	str	r5, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 80024e8:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024ea:	6204      	str	r4, [r0, #32]
}
 80024ec:	bd70      	pop	{r4, r5, r6, pc}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	fffeffff 	.word	0xfffeffff
 80024f4:	fffeff8f 	.word	0xfffeff8f
 80024f8:	fffdffff 	.word	0xfffdffff
 80024fc:	40012c00 	.word	0x40012c00
 8002500:	40014000 	.word	0x40014000
 8002504:	40014400 	.word	0x40014400
 8002508:	40014800 	.word	0x40014800

0800250c <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800250c:	6a03      	ldr	r3, [r0, #32]
 800250e:	4a14      	ldr	r2, [pc, #80]	; (8002560 <TIM_OC6_SetConfig+0x54>)
{
 8002510:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002512:	4013      	ands	r3, r2
 8002514:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002516:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002518:	4c12      	ldr	r4, [pc, #72]	; (8002564 <TIM_OC6_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 800251a:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 800251c:	6d45      	ldr	r5, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800251e:	4025      	ands	r5, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002520:	680c      	ldr	r4, [r1, #0]
 8002522:	0224      	lsls	r4, r4, #8
 8002524:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002526:	4c10      	ldr	r4, [pc, #64]	; (8002568 <TIM_OC6_SetConfig+0x5c>)
 8002528:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800252a:	688c      	ldr	r4, [r1, #8]
 800252c:	0524      	lsls	r4, r4, #20
 800252e:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002530:	4c0e      	ldr	r4, [pc, #56]	; (800256c <TIM_OC6_SetConfig+0x60>)
 8002532:	42a0      	cmp	r0, r4
 8002534:	d008      	beq.n	8002548 <TIM_OC6_SetConfig+0x3c>
 8002536:	4c0e      	ldr	r4, [pc, #56]	; (8002570 <TIM_OC6_SetConfig+0x64>)
 8002538:	42a0      	cmp	r0, r4
 800253a:	d005      	beq.n	8002548 <TIM_OC6_SetConfig+0x3c>
 800253c:	4c0d      	ldr	r4, [pc, #52]	; (8002574 <TIM_OC6_SetConfig+0x68>)
 800253e:	42a0      	cmp	r0, r4
 8002540:	d002      	beq.n	8002548 <TIM_OC6_SetConfig+0x3c>
 8002542:	4c0d      	ldr	r4, [pc, #52]	; (8002578 <TIM_OC6_SetConfig+0x6c>)
 8002544:	42a0      	cmp	r0, r4
 8002546:	d104      	bne.n	8002552 <TIM_OC6_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002548:	4c0c      	ldr	r4, [pc, #48]	; (800257c <TIM_OC6_SetConfig+0x70>)
 800254a:	4023      	ands	r3, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800254c:	694c      	ldr	r4, [r1, #20]
 800254e:	02a4      	lsls	r4, r4, #10
 8002550:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002552:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002554:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 8002556:	6545      	str	r5, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8002558:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800255a:	6202      	str	r2, [r0, #32]
}
 800255c:	bd30      	pop	{r4, r5, pc}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	ffefffff 	.word	0xffefffff
 8002564:	feff8fff 	.word	0xfeff8fff
 8002568:	ffdfffff 	.word	0xffdfffff
 800256c:	40012c00 	.word	0x40012c00
 8002570:	40014000 	.word	0x40014000
 8002574:	40014400 	.word	0x40014400
 8002578:	40014800 	.word	0x40014800
 800257c:	fffbffff 	.word	0xfffbffff

08002580 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002580:	0003      	movs	r3, r0
    return HAL_ERROR;
 8002582:	2201      	movs	r2, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8002584:	333d      	adds	r3, #61	; 0x3d
 8002586:	7819      	ldrb	r1, [r3, #0]
 8002588:	4291      	cmp	r1, r2
 800258a:	d11d      	bne.n	80025c8 <HAL_TIM_Base_Start_IT+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 800258c:	2102      	movs	r1, #2
 800258e:	7019      	strb	r1, [r3, #0]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002590:	6803      	ldr	r3, [r0, #0]
 8002592:	68d9      	ldr	r1, [r3, #12]
 8002594:	4311      	orrs	r1, r2
 8002596:	60d9      	str	r1, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002598:	490e      	ldr	r1, [pc, #56]	; (80025d4 <HAL_TIM_Base_Start_IT+0x54>)
 800259a:	428b      	cmp	r3, r1
 800259c:	d005      	beq.n	80025aa <HAL_TIM_Base_Start_IT+0x2a>
 800259e:	490e      	ldr	r1, [pc, #56]	; (80025d8 <HAL_TIM_Base_Start_IT+0x58>)
 80025a0:	428b      	cmp	r3, r1
 80025a2:	d002      	beq.n	80025aa <HAL_TIM_Base_Start_IT+0x2a>
 80025a4:	490d      	ldr	r1, [pc, #52]	; (80025dc <HAL_TIM_Base_Start_IT+0x5c>)
 80025a6:	428b      	cmp	r3, r1
 80025a8:	d110      	bne.n	80025cc <HAL_TIM_Base_Start_IT+0x4c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025aa:	4a0d      	ldr	r2, [pc, #52]	; (80025e0 <HAL_TIM_Base_Start_IT+0x60>)
 80025ac:	6899      	ldr	r1, [r3, #8]
 80025ae:	4011      	ands	r1, r2
  return HAL_OK;
 80025b0:	2200      	movs	r2, #0
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025b2:	2906      	cmp	r1, #6
 80025b4:	d008      	beq.n	80025c8 <HAL_TIM_Base_Start_IT+0x48>
 80025b6:	2080      	movs	r0, #128	; 0x80
 80025b8:	0240      	lsls	r0, r0, #9
 80025ba:	4281      	cmp	r1, r0
 80025bc:	d004      	beq.n	80025c8 <HAL_TIM_Base_Start_IT+0x48>
      __HAL_TIM_ENABLE(htim);
 80025be:	6819      	ldr	r1, [r3, #0]
 80025c0:	3201      	adds	r2, #1
 80025c2:	430a      	orrs	r2, r1
    __HAL_TIM_ENABLE(htim);
 80025c4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80025c6:	2200      	movs	r2, #0
}
 80025c8:	0010      	movs	r0, r2
 80025ca:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	4302      	orrs	r2, r0
 80025d0:	e7f8      	b.n	80025c4 <HAL_TIM_Base_Start_IT+0x44>
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	40012c00 	.word	0x40012c00
 80025d8:	40000400 	.word	0x40000400
 80025dc:	40014000 	.word	0x40014000
 80025e0:	00010007 	.word	0x00010007

080025e4 <HAL_TIM_PWM_MspInit>:
 80025e4:	4770      	bx	lr

080025e6 <HAL_TIM_OC_DelayElapsedCallback>:
 80025e6:	4770      	bx	lr

080025e8 <HAL_TIM_IC_CaptureCallback>:
 80025e8:	4770      	bx	lr

080025ea <HAL_TIM_PWM_PulseFinishedCallback>:
 80025ea:	4770      	bx	lr

080025ec <HAL_TIM_TriggerCallback>:
 80025ec:	4770      	bx	lr
	...

080025f0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025f0:	2202      	movs	r2, #2
 80025f2:	6803      	ldr	r3, [r0, #0]
{
 80025f4:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025f6:	6919      	ldr	r1, [r3, #16]
{
 80025f8:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025fa:	4211      	tst	r1, r2
 80025fc:	d00e      	beq.n	800261c <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025fe:	68d9      	ldr	r1, [r3, #12]
 8002600:	4211      	tst	r1, r2
 8002602:	d00b      	beq.n	800261c <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002604:	3a05      	subs	r2, #5
 8002606:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002608:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800260a:	3204      	adds	r2, #4
 800260c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800260e:	079b      	lsls	r3, r3, #30
 8002610:	d100      	bne.n	8002614 <HAL_TIM_IRQHandler+0x24>
 8002612:	e086      	b.n	8002722 <HAL_TIM_IRQHandler+0x132>
          HAL_TIM_IC_CaptureCallback(htim);
 8002614:	f7ff ffe8 	bl	80025e8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002618:	2300      	movs	r3, #0
 800261a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800261c:	2204      	movs	r2, #4
 800261e:	6823      	ldr	r3, [r4, #0]
 8002620:	6919      	ldr	r1, [r3, #16]
 8002622:	4211      	tst	r1, r2
 8002624:	d011      	beq.n	800264a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002626:	68d9      	ldr	r1, [r3, #12]
 8002628:	4211      	tst	r1, r2
 800262a:	d00e      	beq.n	800264a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800262c:	3a09      	subs	r2, #9
 800262e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002630:	3207      	adds	r2, #7
 8002632:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002634:	699a      	ldr	r2, [r3, #24]
 8002636:	23c0      	movs	r3, #192	; 0xc0
 8002638:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800263a:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800263c:	421a      	tst	r2, r3
 800263e:	d100      	bne.n	8002642 <HAL_TIM_IRQHandler+0x52>
 8002640:	e075      	b.n	800272e <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002642:	f7ff ffd1 	bl	80025e8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002646:	2300      	movs	r3, #0
 8002648:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800264a:	2208      	movs	r2, #8
 800264c:	6823      	ldr	r3, [r4, #0]
 800264e:	6919      	ldr	r1, [r3, #16]
 8002650:	4211      	tst	r1, r2
 8002652:	d00e      	beq.n	8002672 <HAL_TIM_IRQHandler+0x82>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002654:	68d9      	ldr	r1, [r3, #12]
 8002656:	4211      	tst	r1, r2
 8002658:	d00b      	beq.n	8002672 <HAL_TIM_IRQHandler+0x82>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800265a:	3a11      	subs	r2, #17
 800265c:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800265e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002660:	320d      	adds	r2, #13
 8002662:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002664:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002666:	079b      	lsls	r3, r3, #30
 8002668:	d067      	beq.n	800273a <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 800266a:	f7ff ffbd 	bl	80025e8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800266e:	2300      	movs	r3, #0
 8002670:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002672:	2210      	movs	r2, #16
 8002674:	6823      	ldr	r3, [r4, #0]
 8002676:	6919      	ldr	r1, [r3, #16]
 8002678:	4211      	tst	r1, r2
 800267a:	d010      	beq.n	800269e <HAL_TIM_IRQHandler+0xae>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800267c:	68d9      	ldr	r1, [r3, #12]
 800267e:	4211      	tst	r1, r2
 8002680:	d00d      	beq.n	800269e <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002682:	3a21      	subs	r2, #33	; 0x21
 8002684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002686:	3219      	adds	r2, #25
 8002688:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800268a:	69da      	ldr	r2, [r3, #28]
 800268c:	23c0      	movs	r3, #192	; 0xc0
 800268e:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002690:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002692:	421a      	tst	r2, r3
 8002694:	d057      	beq.n	8002746 <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_IC_CaptureCallback(htim);
 8002696:	f7ff ffa7 	bl	80025e8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269a:	2300      	movs	r3, #0
 800269c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800269e:	2201      	movs	r2, #1
 80026a0:	6823      	ldr	r3, [r4, #0]
 80026a2:	6919      	ldr	r1, [r3, #16]
 80026a4:	4211      	tst	r1, r2
 80026a6:	d007      	beq.n	80026b8 <HAL_TIM_IRQHandler+0xc8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026a8:	68d9      	ldr	r1, [r3, #12]
 80026aa:	4211      	tst	r1, r2
 80026ac:	d004      	beq.n	80026b8 <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026ae:	3a03      	subs	r2, #3
 80026b0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80026b2:	0020      	movs	r0, r4
 80026b4:	f7fe f82a 	bl	800070c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026b8:	2280      	movs	r2, #128	; 0x80
 80026ba:	6823      	ldr	r3, [r4, #0]
 80026bc:	6919      	ldr	r1, [r3, #16]
 80026be:	4211      	tst	r1, r2
 80026c0:	d008      	beq.n	80026d4 <HAL_TIM_IRQHandler+0xe4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026c2:	68d9      	ldr	r1, [r3, #12]
 80026c4:	4211      	tst	r1, r2
 80026c6:	d005      	beq.n	80026d4 <HAL_TIM_IRQHandler+0xe4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026c8:	3a02      	subs	r2, #2
 80026ca:	3aff      	subs	r2, #255	; 0xff
 80026cc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80026ce:	0020      	movs	r0, r4
 80026d0:	f000 fb4f 	bl	8002d72 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80026d4:	6823      	ldr	r3, [r4, #0]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	05d2      	lsls	r2, r2, #23
 80026da:	d507      	bpl.n	80026ec <HAL_TIM_IRQHandler+0xfc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	0612      	lsls	r2, r2, #24
 80026e0:	d504      	bpl.n	80026ec <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80026e2:	4a1c      	ldr	r2, [pc, #112]	; (8002754 <HAL_TIM_IRQHandler+0x164>)
      HAL_TIMEx_Break2Callback(htim);
 80026e4:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80026e6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80026e8:	f000 fb44 	bl	8002d74 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026ec:	2240      	movs	r2, #64	; 0x40
 80026ee:	6823      	ldr	r3, [r4, #0]
 80026f0:	6919      	ldr	r1, [r3, #16]
 80026f2:	4211      	tst	r1, r2
 80026f4:	d007      	beq.n	8002706 <HAL_TIM_IRQHandler+0x116>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026f6:	68d9      	ldr	r1, [r3, #12]
 80026f8:	4211      	tst	r1, r2
 80026fa:	d004      	beq.n	8002706 <HAL_TIM_IRQHandler+0x116>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026fc:	3a81      	subs	r2, #129	; 0x81
 80026fe:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002700:	0020      	movs	r0, r4
 8002702:	f7ff ff73 	bl	80025ec <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002706:	2220      	movs	r2, #32
 8002708:	6823      	ldr	r3, [r4, #0]
 800270a:	6919      	ldr	r1, [r3, #16]
 800270c:	4211      	tst	r1, r2
 800270e:	d007      	beq.n	8002720 <HAL_TIM_IRQHandler+0x130>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002710:	68d9      	ldr	r1, [r3, #12]
 8002712:	4211      	tst	r1, r2
 8002714:	d004      	beq.n	8002720 <HAL_TIM_IRQHandler+0x130>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002716:	3a41      	subs	r2, #65	; 0x41
 8002718:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800271a:	0020      	movs	r0, r4
 800271c:	f000 fb28 	bl	8002d70 <HAL_TIMEx_CommutCallback>
}
 8002720:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002722:	f7ff ff60 	bl	80025e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002726:	0020      	movs	r0, r4
 8002728:	f7ff ff5f 	bl	80025ea <HAL_TIM_PWM_PulseFinishedCallback>
 800272c:	e774      	b.n	8002618 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800272e:	f7ff ff5a 	bl	80025e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002732:	0020      	movs	r0, r4
 8002734:	f7ff ff59 	bl	80025ea <HAL_TIM_PWM_PulseFinishedCallback>
 8002738:	e785      	b.n	8002646 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800273a:	f7ff ff54 	bl	80025e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800273e:	0020      	movs	r0, r4
 8002740:	f7ff ff53 	bl	80025ea <HAL_TIM_PWM_PulseFinishedCallback>
 8002744:	e793      	b.n	800266e <HAL_TIM_IRQHandler+0x7e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002746:	f7ff ff4e 	bl	80025e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800274a:	0020      	movs	r0, r4
 800274c:	f7ff ff4d 	bl	80025ea <HAL_TIM_PWM_PulseFinishedCallback>
 8002750:	e7a3      	b.n	800269a <HAL_TIM_IRQHandler+0xaa>
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	fffffeff 	.word	0xfffffeff

08002758 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002758:	4a1c      	ldr	r2, [pc, #112]	; (80027cc <TIM_Base_SetConfig+0x74>)
{
 800275a:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 800275c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800275e:	4290      	cmp	r0, r2
 8002760:	d002      	beq.n	8002768 <TIM_Base_SetConfig+0x10>
 8002762:	4c1b      	ldr	r4, [pc, #108]	; (80027d0 <TIM_Base_SetConfig+0x78>)
 8002764:	42a0      	cmp	r0, r4
 8002766:	d108      	bne.n	800277a <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002768:	2470      	movs	r4, #112	; 0x70
 800276a:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 800276c:	684c      	ldr	r4, [r1, #4]
 800276e:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002770:	4290      	cmp	r0, r2
 8002772:	d00e      	beq.n	8002792 <TIM_Base_SetConfig+0x3a>
 8002774:	4c16      	ldr	r4, [pc, #88]	; (80027d0 <TIM_Base_SetConfig+0x78>)
 8002776:	42a0      	cmp	r0, r4
 8002778:	d00b      	beq.n	8002792 <TIM_Base_SetConfig+0x3a>
 800277a:	4c16      	ldr	r4, [pc, #88]	; (80027d4 <TIM_Base_SetConfig+0x7c>)
 800277c:	42a0      	cmp	r0, r4
 800277e:	d008      	beq.n	8002792 <TIM_Base_SetConfig+0x3a>
 8002780:	4c15      	ldr	r4, [pc, #84]	; (80027d8 <TIM_Base_SetConfig+0x80>)
 8002782:	42a0      	cmp	r0, r4
 8002784:	d005      	beq.n	8002792 <TIM_Base_SetConfig+0x3a>
 8002786:	4c15      	ldr	r4, [pc, #84]	; (80027dc <TIM_Base_SetConfig+0x84>)
 8002788:	42a0      	cmp	r0, r4
 800278a:	d002      	beq.n	8002792 <TIM_Base_SetConfig+0x3a>
 800278c:	4c14      	ldr	r4, [pc, #80]	; (80027e0 <TIM_Base_SetConfig+0x88>)
 800278e:	42a0      	cmp	r0, r4
 8002790:	d103      	bne.n	800279a <TIM_Base_SetConfig+0x42>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002792:	4c14      	ldr	r4, [pc, #80]	; (80027e4 <TIM_Base_SetConfig+0x8c>)
 8002794:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002796:	68cc      	ldr	r4, [r1, #12]
 8002798:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800279a:	2480      	movs	r4, #128	; 0x80
 800279c:	43a3      	bics	r3, r4
 800279e:	694c      	ldr	r4, [r1, #20]
 80027a0:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 80027a2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027a4:	688b      	ldr	r3, [r1, #8]
 80027a6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80027a8:	680b      	ldr	r3, [r1, #0]
 80027aa:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027ac:	4290      	cmp	r0, r2
 80027ae:	d008      	beq.n	80027c2 <TIM_Base_SetConfig+0x6a>
 80027b0:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <TIM_Base_SetConfig+0x80>)
 80027b2:	4298      	cmp	r0, r3
 80027b4:	d005      	beq.n	80027c2 <TIM_Base_SetConfig+0x6a>
 80027b6:	4b09      	ldr	r3, [pc, #36]	; (80027dc <TIM_Base_SetConfig+0x84>)
 80027b8:	4298      	cmp	r0, r3
 80027ba:	d002      	beq.n	80027c2 <TIM_Base_SetConfig+0x6a>
 80027bc:	4b08      	ldr	r3, [pc, #32]	; (80027e0 <TIM_Base_SetConfig+0x88>)
 80027be:	4298      	cmp	r0, r3
 80027c0:	d101      	bne.n	80027c6 <TIM_Base_SetConfig+0x6e>
    TIMx->RCR = Structure->RepetitionCounter;
 80027c2:	690b      	ldr	r3, [r1, #16]
 80027c4:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80027c6:	2301      	movs	r3, #1
 80027c8:	6143      	str	r3, [r0, #20]
}
 80027ca:	bd10      	pop	{r4, pc}
 80027cc:	40012c00 	.word	0x40012c00
 80027d0:	40000400 	.word	0x40000400
 80027d4:	40002000 	.word	0x40002000
 80027d8:	40014000 	.word	0x40014000
 80027dc:	40014400 	.word	0x40014400
 80027e0:	40014800 	.word	0x40014800
 80027e4:	fffffcff 	.word	0xfffffcff

080027e8 <HAL_TIM_Base_Init>:
{
 80027e8:	b570      	push	{r4, r5, r6, lr}
 80027ea:	0004      	movs	r4, r0
    return HAL_ERROR;
 80027ec:	2001      	movs	r0, #1
  if (htim == NULL)
 80027ee:	2c00      	cmp	r4, #0
 80027f0:	d023      	beq.n	800283a <HAL_TIM_Base_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 80027f2:	0025      	movs	r5, r4
 80027f4:	353d      	adds	r5, #61	; 0x3d
 80027f6:	782b      	ldrb	r3, [r5, #0]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d105      	bne.n	800280a <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80027fe:	0022      	movs	r2, r4
 8002800:	323c      	adds	r2, #60	; 0x3c
 8002802:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8002804:	0020      	movs	r0, r4
 8002806:	f7fe f8b1 	bl	800096c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800280a:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800280c:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800280e:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002810:	1d21      	adds	r1, r4, #4
 8002812:	f7ff ffa1 	bl	8002758 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002816:	0022      	movs	r2, r4
 8002818:	2301      	movs	r3, #1
  return HAL_OK;
 800281a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800281c:	3248      	adds	r2, #72	; 0x48
 800281e:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002820:	3447      	adds	r4, #71	; 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002822:	3a0a      	subs	r2, #10
 8002824:	7013      	strb	r3, [r2, #0]
 8002826:	7053      	strb	r3, [r2, #1]
 8002828:	7093      	strb	r3, [r2, #2]
 800282a:	70d3      	strb	r3, [r2, #3]
 800282c:	7113      	strb	r3, [r2, #4]
 800282e:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002830:	7193      	strb	r3, [r2, #6]
 8002832:	71d3      	strb	r3, [r2, #7]
 8002834:	7213      	strb	r3, [r2, #8]
 8002836:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002838:	702b      	strb	r3, [r5, #0]
}
 800283a:	bd70      	pop	{r4, r5, r6, pc}

0800283c <HAL_TIM_PWM_Init>:
{
 800283c:	b570      	push	{r4, r5, r6, lr}
 800283e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002840:	2001      	movs	r0, #1
  if (htim == NULL)
 8002842:	2c00      	cmp	r4, #0
 8002844:	d023      	beq.n	800288e <HAL_TIM_PWM_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002846:	0025      	movs	r5, r4
 8002848:	353d      	adds	r5, #61	; 0x3d
 800284a:	782b      	ldrb	r3, [r5, #0]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d105      	bne.n	800285e <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8002852:	0022      	movs	r2, r4
 8002854:	323c      	adds	r2, #60	; 0x3c
 8002856:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 8002858:	0020      	movs	r0, r4
 800285a:	f7ff fec3 	bl	80025e4 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800285e:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002860:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002862:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002864:	1d21      	adds	r1, r4, #4
 8002866:	f7ff ff77 	bl	8002758 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800286a:	0022      	movs	r2, r4
 800286c:	2301      	movs	r3, #1
  return HAL_OK;
 800286e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002870:	3248      	adds	r2, #72	; 0x48
 8002872:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002874:	3447      	adds	r4, #71	; 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002876:	3a0a      	subs	r2, #10
 8002878:	7013      	strb	r3, [r2, #0]
 800287a:	7053      	strb	r3, [r2, #1]
 800287c:	7093      	strb	r3, [r2, #2]
 800287e:	70d3      	strb	r3, [r2, #3]
 8002880:	7113      	strb	r3, [r2, #4]
 8002882:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002884:	7193      	strb	r3, [r2, #6]
 8002886:	71d3      	strb	r3, [r2, #7]
 8002888:	7213      	strb	r3, [r2, #8]
 800288a:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 800288c:	702b      	strb	r3, [r5, #0]
}
 800288e:	bd70      	pop	{r4, r5, r6, pc}

08002890 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002890:	2210      	movs	r2, #16
 8002892:	6a03      	ldr	r3, [r0, #32]
{
 8002894:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002896:	4393      	bics	r3, r2
 8002898:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800289a:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800289c:	4d16      	ldr	r5, [pc, #88]	; (80028f8 <TIM_OC2_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 800289e:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80028a0:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028a2:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028a4:	680d      	ldr	r5, [r1, #0]
 80028a6:	022d      	lsls	r5, r5, #8
 80028a8:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC2P;
 80028aa:	2520      	movs	r5, #32
 80028ac:	43aa      	bics	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028ae:	688d      	ldr	r5, [r1, #8]
 80028b0:	012d      	lsls	r5, r5, #4
 80028b2:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028b4:	4d11      	ldr	r5, [pc, #68]	; (80028fc <TIM_OC2_SetConfig+0x6c>)
 80028b6:	42a8      	cmp	r0, r5
 80028b8:	d10f      	bne.n	80028da <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 80028ba:	2580      	movs	r5, #128	; 0x80
 80028bc:	43aa      	bics	r2, r5
 80028be:	0015      	movs	r5, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028c0:	68ca      	ldr	r2, [r1, #12]
 80028c2:	0112      	lsls	r2, r2, #4
 80028c4:	432a      	orrs	r2, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80028c6:	2540      	movs	r5, #64	; 0x40
 80028c8:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028ca:	4d0d      	ldr	r5, [pc, #52]	; (8002900 <TIM_OC2_SetConfig+0x70>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028cc:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028ce:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028d0:	698b      	ldr	r3, [r1, #24]
 80028d2:	4333      	orrs	r3, r6
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	432b      	orrs	r3, r5
 80028d8:	e008      	b.n	80028ec <TIM_OC2_SetConfig+0x5c>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028da:	4d0a      	ldr	r5, [pc, #40]	; (8002904 <TIM_OC2_SetConfig+0x74>)
 80028dc:	42a8      	cmp	r0, r5
 80028de:	d0f4      	beq.n	80028ca <TIM_OC2_SetConfig+0x3a>
 80028e0:	4d09      	ldr	r5, [pc, #36]	; (8002908 <TIM_OC2_SetConfig+0x78>)
 80028e2:	42a8      	cmp	r0, r5
 80028e4:	d0f1      	beq.n	80028ca <TIM_OC2_SetConfig+0x3a>
 80028e6:	4d09      	ldr	r5, [pc, #36]	; (800290c <TIM_OC2_SetConfig+0x7c>)
 80028e8:	42a8      	cmp	r0, r5
 80028ea:	d0ee      	beq.n	80028ca <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 80028ec:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80028ee:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80028f0:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80028f2:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80028f4:	6202      	str	r2, [r0, #32]
}
 80028f6:	bd70      	pop	{r4, r5, r6, pc}
 80028f8:	feff8cff 	.word	0xfeff8cff
 80028fc:	40012c00 	.word	0x40012c00
 8002900:	fffff3ff 	.word	0xfffff3ff
 8002904:	40014000 	.word	0x40014000
 8002908:	40014400 	.word	0x40014400
 800290c:	40014800 	.word	0x40014800

08002910 <HAL_TIM_PWM_ConfigChannel>:
{
 8002910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8002912:	0007      	movs	r7, r0
 8002914:	373c      	adds	r7, #60	; 0x3c
 8002916:	783b      	ldrb	r3, [r7, #0]
{
 8002918:	0004      	movs	r4, r0
 800291a:	000d      	movs	r5, r1
 800291c:	0016      	movs	r6, r2
  __HAL_LOCK(htim);
 800291e:	2002      	movs	r0, #2
 8002920:	2b01      	cmp	r3, #1
 8002922:	d00a      	beq.n	800293a <HAL_TIM_PWM_ConfigChannel+0x2a>
 8002924:	2301      	movs	r3, #1
 8002926:	703b      	strb	r3, [r7, #0]
  switch (Channel)
 8002928:	2a08      	cmp	r2, #8
 800292a:	d040      	beq.n	80029ae <HAL_TIM_PWM_ConfigChannel+0x9e>
 800292c:	d806      	bhi.n	800293c <HAL_TIM_PWM_ConfigChannel+0x2c>
 800292e:	2a00      	cmp	r2, #0
 8002930:	d01b      	beq.n	800296a <HAL_TIM_PWM_ConfigChannel+0x5a>
 8002932:	2a04      	cmp	r2, #4
 8002934:	d02a      	beq.n	800298c <HAL_TIM_PWM_ConfigChannel+0x7c>
  __HAL_UNLOCK(htim);
 8002936:	2000      	movs	r0, #0
 8002938:	7038      	strb	r0, [r7, #0]
}
 800293a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 800293c:	2a10      	cmp	r2, #16
 800293e:	d046      	beq.n	80029ce <HAL_TIM_PWM_ConfigChannel+0xbe>
 8002940:	2a14      	cmp	r2, #20
 8002942:	d055      	beq.n	80029f0 <HAL_TIM_PWM_ConfigChannel+0xe0>
 8002944:	2a0c      	cmp	r2, #12
 8002946:	d1f6      	bne.n	8002936 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002948:	6820      	ldr	r0, [r4, #0]
 800294a:	f7ff fd6f 	bl	800242c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	6823      	ldr	r3, [r4, #0]
 8002952:	0112      	lsls	r2, r2, #4
 8002954:	69d9      	ldr	r1, [r3, #28]
 8002956:	430a      	orrs	r2, r1
 8002958:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800295a:	69da      	ldr	r2, [r3, #28]
 800295c:	492d      	ldr	r1, [pc, #180]	; (8002a14 <HAL_TIM_PWM_ConfigChannel+0x104>)
 800295e:	400a      	ands	r2, r1
 8002960:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002962:	692a      	ldr	r2, [r5, #16]
 8002964:	69d9      	ldr	r1, [r3, #28]
 8002966:	0212      	lsls	r2, r2, #8
 8002968:	e02e      	b.n	80029c8 <HAL_TIM_PWM_ConfigChannel+0xb8>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800296a:	6820      	ldr	r0, [r4, #0]
 800296c:	f7ff fcd2 	bl	8002314 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002970:	2208      	movs	r2, #8
 8002972:	6823      	ldr	r3, [r4, #0]
 8002974:	6999      	ldr	r1, [r3, #24]
 8002976:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002978:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800297a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800297c:	699a      	ldr	r2, [r3, #24]
 800297e:	438a      	bics	r2, r1
 8002980:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002982:	699a      	ldr	r2, [r3, #24]
 8002984:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002986:	430a      	orrs	r2, r1
 8002988:	619a      	str	r2, [r3, #24]
      break;
 800298a:	e7d4      	b.n	8002936 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800298c:	6820      	ldr	r0, [r4, #0]
 800298e:	f7ff ff7f 	bl	8002890 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002992:	2280      	movs	r2, #128	; 0x80
 8002994:	6823      	ldr	r3, [r4, #0]
 8002996:	0112      	lsls	r2, r2, #4
 8002998:	6999      	ldr	r1, [r3, #24]
 800299a:	430a      	orrs	r2, r1
 800299c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800299e:	699a      	ldr	r2, [r3, #24]
 80029a0:	491c      	ldr	r1, [pc, #112]	; (8002a14 <HAL_TIM_PWM_ConfigChannel+0x104>)
 80029a2:	400a      	ands	r2, r1
 80029a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029a6:	692a      	ldr	r2, [r5, #16]
 80029a8:	6999      	ldr	r1, [r3, #24]
 80029aa:	0212      	lsls	r2, r2, #8
 80029ac:	e7eb      	b.n	8002986 <HAL_TIM_PWM_ConfigChannel+0x76>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029ae:	6820      	ldr	r0, [r4, #0]
 80029b0:	f7ff fcf6 	bl	80023a0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029b4:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029b6:	6823      	ldr	r3, [r4, #0]
 80029b8:	69da      	ldr	r2, [r3, #28]
 80029ba:	4316      	orrs	r6, r2
 80029bc:	61de      	str	r6, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029be:	69da      	ldr	r2, [r3, #28]
 80029c0:	438a      	bics	r2, r1
 80029c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029c4:	69da      	ldr	r2, [r3, #28]
 80029c6:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029c8:	430a      	orrs	r2, r1
 80029ca:	61da      	str	r2, [r3, #28]
      break;
 80029cc:	e7b3      	b.n	8002936 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80029ce:	6820      	ldr	r0, [r4, #0]
 80029d0:	f7ff fd66 	bl	80024a0 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80029d4:	2208      	movs	r2, #8
 80029d6:	6823      	ldr	r3, [r4, #0]
 80029d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80029da:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80029dc:	2104      	movs	r1, #4
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80029de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80029e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029e2:	438a      	bics	r2, r1
 80029e4:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80029e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029e8:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80029ea:	430a      	orrs	r2, r1
 80029ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80029ee:	e7a2      	b.n	8002936 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80029f0:	6820      	ldr	r0, [r4, #0]
 80029f2:	f7ff fd8b 	bl	800250c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80029f6:	2280      	movs	r2, #128	; 0x80
 80029f8:	6823      	ldr	r3, [r4, #0]
 80029fa:	0112      	lsls	r2, r2, #4
 80029fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80029fe:	430a      	orrs	r2, r1
 8002a00:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002a02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a04:	4903      	ldr	r1, [pc, #12]	; (8002a14 <HAL_TIM_PWM_ConfigChannel+0x104>)
 8002a06:	400a      	ands	r2, r1
 8002a08:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002a0a:	692a      	ldr	r2, [r5, #16]
 8002a0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002a0e:	0212      	lsls	r2, r2, #8
 8002a10:	e7eb      	b.n	80029ea <HAL_TIM_PWM_ConfigChannel+0xda>
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	fffffbff 	.word	0xfffffbff

08002a18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a18:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a1a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a1c:	4d03      	ldr	r5, [pc, #12]	; (8002a2c <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a22:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a24:	4313      	orrs	r3, r2
 8002a26:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a28:	6083      	str	r3, [r0, #8]
}
 8002a2a:	bd30      	pop	{r4, r5, pc}
 8002a2c:	ffff00ff 	.word	0xffff00ff

08002a30 <HAL_TIM_ConfigClockSource>:
{
 8002a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8002a32:	0005      	movs	r5, r0
 8002a34:	2302      	movs	r3, #2
 8002a36:	353c      	adds	r5, #60	; 0x3c
 8002a38:	782a      	ldrb	r2, [r5, #0]
{
 8002a3a:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	2a01      	cmp	r2, #1
 8002a40:	d016      	beq.n	8002a70 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8002a42:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 8002a44:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 8002a46:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002a48:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 8002a4a:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002a4c:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002a4e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a50:	4a3f      	ldr	r2, [pc, #252]	; (8002b50 <HAL_TIM_ConfigClockSource+0x120>)
 8002a52:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8002a54:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002a56:	680b      	ldr	r3, [r1, #0]
 8002a58:	2b40      	cmp	r3, #64	; 0x40
 8002a5a:	d063      	beq.n	8002b24 <HAL_TIM_ConfigClockSource+0xf4>
 8002a5c:	d814      	bhi.n	8002a88 <HAL_TIM_ConfigClockSource+0x58>
 8002a5e:	2b10      	cmp	r3, #16
 8002a60:	d00b      	beq.n	8002a7a <HAL_TIM_ConfigClockSource+0x4a>
 8002a62:	d806      	bhi.n	8002a72 <HAL_TIM_ConfigClockSource+0x42>
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d008      	beq.n	8002a7a <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8002a68:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002a6a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002a6c:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8002a6e:	7028      	strb	r0, [r5, #0]
}
 8002a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8002a72:	2b20      	cmp	r3, #32
 8002a74:	d001      	beq.n	8002a7a <HAL_TIM_ConfigClockSource+0x4a>
 8002a76:	2b30      	cmp	r3, #48	; 0x30
 8002a78:	d1f6      	bne.n	8002a68 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a7a:	4a36      	ldr	r2, [pc, #216]	; (8002b54 <HAL_TIM_ConfigClockSource+0x124>)
  tmpsmcr = TIMx->SMCR;
 8002a7c:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a7e:	4011      	ands	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a80:	2207      	movs	r2, #7
 8002a82:	4313      	orrs	r3, r2
 8002a84:	430b      	orrs	r3, r1
 8002a86:	e019      	b.n	8002abc <HAL_TIM_ConfigClockSource+0x8c>
  switch (sClockSourceConfig->ClockSource)
 8002a88:	2b60      	cmp	r3, #96	; 0x60
 8002a8a:	d034      	beq.n	8002af6 <HAL_TIM_ConfigClockSource+0xc6>
 8002a8c:	d818      	bhi.n	8002ac0 <HAL_TIM_ConfigClockSource+0x90>
 8002a8e:	2b50      	cmp	r3, #80	; 0x50
 8002a90:	d1ea      	bne.n	8002a68 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a92:	684a      	ldr	r2, [r1, #4]
 8002a94:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8002a96:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a98:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a9a:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a9c:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a9e:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aa0:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aa2:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002aa4:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002aa6:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aa8:	240a      	movs	r4, #10
 8002aaa:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8002aac:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002aae:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002ab0:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002ab2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ab4:	4a27      	ldr	r2, [pc, #156]	; (8002b54 <HAL_TIM_ConfigClockSource+0x124>)
 8002ab6:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ab8:	2357      	movs	r3, #87	; 0x57
 8002aba:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8002abc:	6083      	str	r3, [r0, #8]
 8002abe:	e7d3      	b.n	8002a68 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8002ac0:	2b70      	cmp	r3, #112	; 0x70
 8002ac2:	d00d      	beq.n	8002ae0 <HAL_TIM_ConfigClockSource+0xb0>
 8002ac4:	2280      	movs	r2, #128	; 0x80
 8002ac6:	0192      	lsls	r2, r2, #6
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d1cd      	bne.n	8002a68 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8002acc:	68cb      	ldr	r3, [r1, #12]
 8002ace:	684a      	ldr	r2, [r1, #4]
 8002ad0:	6889      	ldr	r1, [r1, #8]
 8002ad2:	f7ff ffa1 	bl	8002a18 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ad6:	2380      	movs	r3, #128	; 0x80
 8002ad8:	6822      	ldr	r2, [r4, #0]
 8002ada:	01db      	lsls	r3, r3, #7
 8002adc:	6891      	ldr	r1, [r2, #8]
 8002ade:	e007      	b.n	8002af0 <HAL_TIM_ConfigClockSource+0xc0>
      TIM_ETR_SetConfig(htim->Instance,
 8002ae0:	68cb      	ldr	r3, [r1, #12]
 8002ae2:	684a      	ldr	r2, [r1, #4]
 8002ae4:	6889      	ldr	r1, [r1, #8]
 8002ae6:	f7ff ff97 	bl	8002a18 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002aea:	2377      	movs	r3, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8002aec:	6822      	ldr	r2, [r4, #0]
 8002aee:	6891      	ldr	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002af0:	430b      	orrs	r3, r1
 8002af2:	6093      	str	r3, [r2, #8]
      break;
 8002af4:	e7b8      	b.n	8002a68 <HAL_TIM_ConfigClockSource+0x38>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002af6:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002af8:	684b      	ldr	r3, [r1, #4]
 8002afa:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002afc:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002afe:	4f16      	ldr	r7, [pc, #88]	; (8002b58 <HAL_TIM_ConfigClockSource+0x128>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b00:	43a1      	bics	r1, r4
 8002b02:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b04:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b06:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b08:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b0a:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b0c:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8002b0e:	6a01      	ldr	r1, [r0, #32]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b10:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b12:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b14:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 8002b16:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002b18:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002b1a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b1c:	4a0d      	ldr	r2, [pc, #52]	; (8002b54 <HAL_TIM_ConfigClockSource+0x124>)
 8002b1e:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b20:	2367      	movs	r3, #103	; 0x67
 8002b22:	e7ca      	b.n	8002aba <HAL_TIM_ConfigClockSource+0x8a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b24:	684a      	ldr	r2, [r1, #4]
 8002b26:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8002b28:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b2a:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b2c:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b2e:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b30:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b32:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b34:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b36:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b38:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b3a:	240a      	movs	r4, #10
 8002b3c:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8002b3e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002b40:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002b42:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002b44:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b46:	4a03      	ldr	r2, [pc, #12]	; (8002b54 <HAL_TIM_ConfigClockSource+0x124>)
 8002b48:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b4a:	2347      	movs	r3, #71	; 0x47
 8002b4c:	e7b5      	b.n	8002aba <HAL_TIM_ConfigClockSource+0x8a>
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	ffce0088 	.word	0xffce0088
 8002b54:	ffcfff8f 	.word	0xffcfff8f
 8002b58:	ffff0fff 	.word	0xffff0fff

08002b5c <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b5c:	231f      	movs	r3, #31
{
 8002b5e:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b60:	2401      	movs	r4, #1
 8002b62:	4019      	ands	r1, r3
 8002b64:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b66:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8002b68:	6a03      	ldr	r3, [r0, #32]
 8002b6a:	43a3      	bics	r3, r4
 8002b6c:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b6e:	6a03      	ldr	r3, [r0, #32]
 8002b70:	431a      	orrs	r2, r3
 8002b72:	6202      	str	r2, [r0, #32]
}
 8002b74:	bd10      	pop	{r4, pc}
	...

08002b78 <HAL_TIM_OC_Start>:
{
 8002b78:	b510      	push	{r4, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b7a:	0003      	movs	r3, r0
{
 8002b7c:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b7e:	2900      	cmp	r1, #0
 8002b80:	d105      	bne.n	8002b8e <HAL_TIM_OC_Start+0x16>
 8002b82:	333e      	adds	r3, #62	; 0x3e
    return HAL_ERROR;
 8002b84:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b86:	781a      	ldrb	r2, [r3, #0]
 8002b88:	4282      	cmp	r2, r0
 8002b8a:	d012      	beq.n	8002bb2 <HAL_TIM_OC_Start+0x3a>
}
 8002b8c:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b8e:	2904      	cmp	r1, #4
 8002b90:	d101      	bne.n	8002b96 <HAL_TIM_OC_Start+0x1e>
 8002b92:	333f      	adds	r3, #63	; 0x3f
 8002b94:	e7f6      	b.n	8002b84 <HAL_TIM_OC_Start+0xc>
 8002b96:	2908      	cmp	r1, #8
 8002b98:	d101      	bne.n	8002b9e <HAL_TIM_OC_Start+0x26>
 8002b9a:	3340      	adds	r3, #64	; 0x40
 8002b9c:	e7f2      	b.n	8002b84 <HAL_TIM_OC_Start+0xc>
 8002b9e:	290c      	cmp	r1, #12
 8002ba0:	d101      	bne.n	8002ba6 <HAL_TIM_OC_Start+0x2e>
 8002ba2:	3341      	adds	r3, #65	; 0x41
 8002ba4:	e7ee      	b.n	8002b84 <HAL_TIM_OC_Start+0xc>
 8002ba6:	2910      	cmp	r1, #16
 8002ba8:	d101      	bne.n	8002bae <HAL_TIM_OC_Start+0x36>
 8002baa:	3342      	adds	r3, #66	; 0x42
 8002bac:	e7ea      	b.n	8002b84 <HAL_TIM_OC_Start+0xc>
 8002bae:	3343      	adds	r3, #67	; 0x43
 8002bb0:	e7e8      	b.n	8002b84 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bb2:	2202      	movs	r2, #2
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bb4:	6820      	ldr	r0, [r4, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bb6:	701a      	strb	r2, [r3, #0]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f7ff ffcf 	bl	8002b5c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bbe:	6823      	ldr	r3, [r4, #0]
 8002bc0:	4918      	ldr	r1, [pc, #96]	; (8002c24 <HAL_TIM_OC_Start+0xac>)
 8002bc2:	428b      	cmp	r3, r1
 8002bc4:	d008      	beq.n	8002bd8 <HAL_TIM_OC_Start+0x60>
 8002bc6:	4a18      	ldr	r2, [pc, #96]	; (8002c28 <HAL_TIM_OC_Start+0xb0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d005      	beq.n	8002bd8 <HAL_TIM_OC_Start+0x60>
 8002bcc:	4a17      	ldr	r2, [pc, #92]	; (8002c2c <HAL_TIM_OC_Start+0xb4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d002      	beq.n	8002bd8 <HAL_TIM_OC_Start+0x60>
 8002bd2:	4a17      	ldr	r2, [pc, #92]	; (8002c30 <HAL_TIM_OC_Start+0xb8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d122      	bne.n	8002c1e <HAL_TIM_OC_Start+0xa6>
    __HAL_TIM_MOE_ENABLE(htim);
 8002bd8:	2280      	movs	r2, #128	; 0x80
 8002bda:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8002bdc:	0212      	lsls	r2, r2, #8
 8002bde:	4302      	orrs	r2, r0
 8002be0:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be2:	428b      	cmp	r3, r1
 8002be4:	d106      	bne.n	8002bf4 <HAL_TIM_OC_Start+0x7c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	4912      	ldr	r1, [pc, #72]	; (8002c34 <HAL_TIM_OC_Start+0xbc>)
 8002bea:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bec:	2a06      	cmp	r2, #6
 8002bee:	d10c      	bne.n	8002c0a <HAL_TIM_OC_Start+0x92>
  return HAL_OK;
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	e7cb      	b.n	8002b8c <HAL_TIM_OC_Start+0x14>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bf4:	4a10      	ldr	r2, [pc, #64]	; (8002c38 <HAL_TIM_OC_Start+0xc0>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d0f5      	beq.n	8002be6 <HAL_TIM_OC_Start+0x6e>
 8002bfa:	4a0b      	ldr	r2, [pc, #44]	; (8002c28 <HAL_TIM_OC_Start+0xb0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d0f2      	beq.n	8002be6 <HAL_TIM_OC_Start+0x6e>
    __HAL_TIM_ENABLE(htim);
 8002c00:	2201      	movs	r2, #1
 8002c02:	6819      	ldr	r1, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	e7f2      	b.n	8002bf0 <HAL_TIM_OC_Start+0x78>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c0a:	2180      	movs	r1, #128	; 0x80
  return HAL_OK;
 8002c0c:	2000      	movs	r0, #0
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c0e:	0249      	lsls	r1, r1, #9
 8002c10:	428a      	cmp	r2, r1
 8002c12:	d0bb      	beq.n	8002b8c <HAL_TIM_OC_Start+0x14>
      __HAL_TIM_ENABLE(htim);
 8002c14:	2201      	movs	r2, #1
 8002c16:	6819      	ldr	r1, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	e7b6      	b.n	8002b8c <HAL_TIM_OC_Start+0x14>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c1e:	4a06      	ldr	r2, [pc, #24]	; (8002c38 <HAL_TIM_OC_Start+0xc0>)
 8002c20:	e7ec      	b.n	8002bfc <HAL_TIM_OC_Start+0x84>
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	40012c00 	.word	0x40012c00
 8002c28:	40014000 	.word	0x40014000
 8002c2c:	40014400 	.word	0x40014400
 8002c30:	40014800 	.word	0x40014800
 8002c34:	00010007 	.word	0x00010007
 8002c38:	40000400 	.word	0x40000400

08002c3c <HAL_TIM_PWM_Start>:
 8002c3c:	b510      	push	{r4, lr}
 8002c3e:	f7ff ff9b 	bl	8002b78 <HAL_TIM_OC_Start>
 8002c42:	bd10      	pop	{r4, pc}

08002c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c44:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c46:	0004      	movs	r4, r0
 8002c48:	2202      	movs	r2, #2
 8002c4a:	343c      	adds	r4, #60	; 0x3c
 8002c4c:	7825      	ldrb	r5, [r4, #0]
{
 8002c4e:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8002c50:	0010      	movs	r0, r2
 8002c52:	2d01      	cmp	r5, #1
 8002c54:	d024      	beq.n	8002ca0 <HAL_TIMEx_MasterConfigSynchronization+0x5c>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c56:	001d      	movs	r5, r3
  __HAL_LOCK(htim);
 8002c58:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002c5a:	353d      	adds	r5, #61	; 0x3d
  __HAL_LOCK(htim);
 8002c5c:	7020      	strb	r0, [r4, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c5e:	4e11      	ldr	r6, [pc, #68]	; (8002ca4 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002c60:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002c66:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c68:	42b2      	cmp	r2, r6
 8002c6a:	d103      	bne.n	8002c74 <HAL_TIMEx_MasterConfigSynchronization+0x30>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c6c:	4f0e      	ldr	r7, [pc, #56]	; (8002ca8 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8002c6e:	403b      	ands	r3, r7
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c70:	684f      	ldr	r7, [r1, #4]
 8002c72:	433b      	orrs	r3, r7
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c74:	2770      	movs	r7, #112	; 0x70
 8002c76:	43bb      	bics	r3, r7
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c78:	680f      	ldr	r7, [r1, #0]
 8002c7a:	433b      	orrs	r3, r7

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c7c:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c7e:	42b2      	cmp	r2, r6
 8002c80:	d005      	beq.n	8002c8e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8002c82:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d002      	beq.n	8002c8e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8002c88:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d104      	bne.n	8002c98 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c8e:	2380      	movs	r3, #128	; 0x80
 8002c90:	4398      	bics	r0, r3
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c92:	688b      	ldr	r3, [r1, #8]
 8002c94:	4318      	orrs	r0, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c96:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c98:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8002c9a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002c9c:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8002c9e:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8002ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	40012c00 	.word	0x40012c00
 8002ca8:	ff0fffff 	.word	0xff0fffff
 8002cac:	40000400 	.word	0x40000400
 8002cb0:	40014000 	.word	0x40014000

08002cb4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002cb4:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cb6:	0004      	movs	r4, r0
 8002cb8:	343c      	adds	r4, #60	; 0x3c
 8002cba:	7823      	ldrb	r3, [r4, #0]
{
 8002cbc:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8002cbe:	2002      	movs	r0, #2
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d039      	beq.n	8002d38 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002cc4:	68c8      	ldr	r0, [r1, #12]
 8002cc6:	4b1d      	ldr	r3, [pc, #116]	; (8002d3c <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002cc8:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002cca:	4003      	ands	r3, r0
 8002ccc:	6888      	ldr	r0, [r1, #8]
 8002cce:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002cd0:	481b      	ldr	r0, [pc, #108]	; (8002d40 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8002cd2:	4003      	ands	r3, r0
 8002cd4:	6848      	ldr	r0, [r1, #4]
 8002cd6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002cd8:	481a      	ldr	r0, [pc, #104]	; (8002d44 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 8002cda:	4003      	ands	r3, r0
 8002cdc:	6808      	ldr	r0, [r1, #0]
 8002cde:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002ce0:	4819      	ldr	r0, [pc, #100]	; (8002d48 <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8002ce2:	4003      	ands	r3, r0
 8002ce4:	6908      	ldr	r0, [r1, #16]
 8002ce6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002ce8:	4818      	ldr	r0, [pc, #96]	; (8002d4c <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8002cea:	4003      	ands	r3, r0
 8002cec:	6948      	ldr	r0, [r1, #20]
 8002cee:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002cf0:	4817      	ldr	r0, [pc, #92]	; (8002d50 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8002cf2:	4003      	ands	r3, r0
 8002cf4:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8002cf6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002cf8:	4816      	ldr	r0, [pc, #88]	; (8002d54 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8002cfa:	4003      	ands	r3, r0
 8002cfc:	6988      	ldr	r0, [r1, #24]
 8002cfe:	0400      	lsls	r0, r0, #16
 8002d00:	4303      	orrs	r3, r0
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002d02:	4815      	ldr	r0, [pc, #84]	; (8002d58 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002d04:	4282      	cmp	r2, r0
 8002d06:	d114      	bne.n	8002d32 <HAL_TIMEx_ConfigBreakDeadTime+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002d08:	4814      	ldr	r0, [pc, #80]	; (8002d5c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002d0a:	4003      	ands	r3, r0
 8002d0c:	69c8      	ldr	r0, [r1, #28]
 8002d0e:	4303      	orrs	r3, r0
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002d10:	4813      	ldr	r0, [pc, #76]	; (8002d60 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002d12:	4018      	ands	r0, r3
 8002d14:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002d16:	051b      	lsls	r3, r3, #20
 8002d18:	4303      	orrs	r3, r0
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002d1a:	4812      	ldr	r0, [pc, #72]	; (8002d64 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002d1c:	4003      	ands	r3, r0
 8002d1e:	6a08      	ldr	r0, [r1, #32]
 8002d20:	4303      	orrs	r3, r0
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002d22:	4811      	ldr	r0, [pc, #68]	; (8002d68 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002d24:	4003      	ands	r3, r0
 8002d26:	6a48      	ldr	r0, [r1, #36]	; 0x24
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002d28:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002d2a:	4303      	orrs	r3, r0
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002d2c:	480f      	ldr	r0, [pc, #60]	; (8002d6c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002d2e:	4003      	ands	r3, r0
 8002d30:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8002d32:	2000      	movs	r0, #0
  htim->Instance->BDTR = tmpbdtr;
 8002d34:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8002d36:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8002d38:	bd10      	pop	{r4, pc}
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	fffffcff 	.word	0xfffffcff
 8002d40:	fffffbff 	.word	0xfffffbff
 8002d44:	fffff7ff 	.word	0xfffff7ff
 8002d48:	ffffefff 	.word	0xffffefff
 8002d4c:	ffffdfff 	.word	0xffffdfff
 8002d50:	ffffbfff 	.word	0xffffbfff
 8002d54:	fff0ffff 	.word	0xfff0ffff
 8002d58:	40012c00 	.word	0x40012c00
 8002d5c:	efffffff 	.word	0xefffffff
 8002d60:	ff0fffff 	.word	0xff0fffff
 8002d64:	feffffff 	.word	0xfeffffff
 8002d68:	fdffffff 	.word	0xfdffffff
 8002d6c:	dfffffff 	.word	0xdfffffff

08002d70 <HAL_TIMEx_CommutCallback>:
 8002d70:	4770      	bx	lr

08002d72 <HAL_TIMEx_BreakCallback>:
 8002d72:	4770      	bx	lr

08002d74 <HAL_TIMEx_Break2Callback>:
 8002d74:	4770      	bx	lr
	...

08002d78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d78:	b570      	push	{r4, r5, r6, lr}
 8002d7a:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d7c:	6903      	ldr	r3, [r0, #16]
 8002d7e:	6882      	ldr	r2, [r0, #8]
 8002d80:	69c1      	ldr	r1, [r0, #28]
 8002d82:	431a      	orrs	r2, r3
 8002d84:	6943      	ldr	r3, [r0, #20]
  tmpreg |= (uint32_t)huart->FifoMode;
 8002d86:	6e65      	ldr	r5, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d88:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d8a:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d8c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d8e:	6818      	ldr	r0, [r3, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 8002d90:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d92:	4d4d      	ldr	r5, [pc, #308]	; (8002ec8 <UART_SetConfig+0x150>)
 8002d94:	4028      	ands	r0, r5
 8002d96:	4302      	orrs	r2, r0
 8002d98:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	484b      	ldr	r0, [pc, #300]	; (8002ecc <UART_SetConfig+0x154>)
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d9e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002da0:	4002      	ands	r2, r0
 8002da2:	68e0      	ldr	r0, [r4, #12]
 8002da4:	4302      	orrs	r2, r0
 8002da6:	605a      	str	r2, [r3, #4]
    tmpreg |= huart->Init.OneBitSampling;
 8002da8:	69a2      	ldr	r2, [r4, #24]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002daa:	6898      	ldr	r0, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8002dac:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dae:	4d48      	ldr	r5, [pc, #288]	; (8002ed0 <UART_SetConfig+0x158>)
 8002db0:	4028      	ands	r0, r5
 8002db2:	4302      	orrs	r2, r0

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002db4:	200f      	movs	r0, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002db6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dba:	4382      	bics	r2, r0
 8002dbc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002dbe:	4302      	orrs	r2, r0
 8002dc0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dc2:	4a44      	ldr	r2, [pc, #272]	; (8002ed4 <UART_SetConfig+0x15c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d112      	bne.n	8002dee <UART_SetConfig+0x76>
 8002dc8:	2203      	movs	r2, #3
 8002dca:	4b43      	ldr	r3, [pc, #268]	; (8002ed8 <UART_SetConfig+0x160>)
 8002dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dce:	4013      	ands	r3, r2
 8002dd0:	4a42      	ldr	r2, [pc, #264]	; (8002edc <UART_SetConfig+0x164>)
 8002dd2:	5cd0      	ldrb	r0, [r2, r3]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dd4:	2380      	movs	r3, #128	; 0x80
 8002dd6:	021b      	lsls	r3, r3, #8
 8002dd8:	4299      	cmp	r1, r3
 8002dda:	d13c      	bne.n	8002e56 <UART_SetConfig+0xde>
  {
    switch (clocksource)
 8002ddc:	2808      	cmp	r0, #8
 8002dde:	d815      	bhi.n	8002e0c <UART_SetConfig+0x94>
 8002de0:	f7fd f9aa 	bl	8000138 <__gnu_thumb1_case_uqi>
 8002de4:	14191467 	.word	0x14191467
 8002de8:	14141416 	.word	0x14141416
 8002dec:	36          	.byte	0x36
 8002ded:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dee:	4a3c      	ldr	r2, [pc, #240]	; (8002ee0 <UART_SetConfig+0x168>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d105      	bne.n	8002e00 <UART_SetConfig+0x88>
 8002df4:	220c      	movs	r2, #12
 8002df6:	4b38      	ldr	r3, [pc, #224]	; (8002ed8 <UART_SetConfig+0x160>)
 8002df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	4a39      	ldr	r2, [pc, #228]	; (8002ee4 <UART_SetConfig+0x16c>)
 8002dfe:	e7e8      	b.n	8002dd2 <UART_SetConfig+0x5a>
 8002e00:	4a39      	ldr	r2, [pc, #228]	; (8002ee8 <UART_SetConfig+0x170>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d051      	beq.n	8002eaa <UART_SetConfig+0x132>
 8002e06:	4a39      	ldr	r2, [pc, #228]	; (8002eec <UART_SetConfig+0x174>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d04e      	beq.n	8002eaa <UART_SetConfig+0x132>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	e055      	b.n	8002ebc <UART_SetConfig+0x144>
        pclk = HAL_RCC_GetSysClockFreq();
 8002e10:	f7fe fd48 	bl	80018a4 <HAL_RCC_GetSysClockFreq>
        break;
 8002e14:	e04f      	b.n	8002eb6 <UART_SetConfig+0x13e>
        pclk = (uint32_t) HSI_VALUE;
 8002e16:	4836      	ldr	r0, [pc, #216]	; (8002ef0 <UART_SetConfig+0x178>)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e1a:	4a36      	ldr	r2, [pc, #216]	; (8002ef4 <UART_SetConfig+0x17c>)
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	5a99      	ldrh	r1, [r3, r2]
 8002e20:	f7fd f9a8 	bl	8000174 <__udivsi3>
 8002e24:	6865      	ldr	r5, [r4, #4]
 8002e26:	0040      	lsls	r0, r0, #1
 8002e28:	086b      	lsrs	r3, r5, #1
 8002e2a:	18c0      	adds	r0, r0, r3
 8002e2c:	0029      	movs	r1, r5
 8002e2e:	f7fd f9a1 	bl	8000174 <__udivsi3>
 8002e32:	0403      	lsls	r3, r0, #16
 8002e34:	0c1a      	lsrs	r2, r3, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e36:	4930      	ldr	r1, [pc, #192]	; (8002ef8 <UART_SetConfig+0x180>)
 8002e38:	3a10      	subs	r2, #16
 8002e3a:	428a      	cmp	r2, r1
 8002e3c:	d8e6      	bhi.n	8002e0c <UART_SetConfig+0x94>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e3e:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e40:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e42:	4390      	bics	r0, r2
 8002e44:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8002e46:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e48:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8002e4a:	4318      	orrs	r0, r3
 8002e4c:	60d0      	str	r0, [r2, #12]
 8002e4e:	e034      	b.n	8002eba <UART_SetConfig+0x142>
        pclk = (uint32_t) LSE_VALUE;
 8002e50:	2080      	movs	r0, #128	; 0x80
 8002e52:	0200      	lsls	r0, r0, #8
 8002e54:	e7e0      	b.n	8002e18 <UART_SetConfig+0xa0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e56:	2808      	cmp	r0, #8
 8002e58:	d8d8      	bhi.n	8002e0c <UART_SetConfig+0x94>
 8002e5a:	f7fd f963 	bl	8000124 <__gnu_thumb1_case_sqi>
 8002e5e:	d71c      	.short	0xd71c
 8002e60:	d721d724 	.word	0xd721d724
 8002e64:	d7d7      	.short	0xd7d7
 8002e66:	05          	.byte	0x05
 8002e67:	00          	.byte	0x00
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        break;
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e68:	2080      	movs	r0, #128	; 0x80
 8002e6a:	0200      	lsls	r0, r0, #8
    }

    if (pclk != 0U)
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e6e:	4a21      	ldr	r2, [pc, #132]	; (8002ef4 <UART_SetConfig+0x17c>)
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	5a99      	ldrh	r1, [r3, r2]
 8002e74:	f7fd f97e 	bl	8000174 <__udivsi3>
 8002e78:	6865      	ldr	r5, [r4, #4]
 8002e7a:	086b      	lsrs	r3, r5, #1
 8002e7c:	18c0      	adds	r0, r0, r3
 8002e7e:	0029      	movs	r1, r5
 8002e80:	f7fd f978 	bl	8000174 <__udivsi3>
 8002e84:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e86:	0002      	movs	r2, r0
 8002e88:	4b1b      	ldr	r3, [pc, #108]	; (8002ef8 <UART_SetConfig+0x180>)
 8002e8a:	3a10      	subs	r2, #16
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d8bd      	bhi.n	8002e0c <UART_SetConfig+0x94>
      {
        huart->Instance->BRR = usartdiv;
 8002e90:	6823      	ldr	r3, [r4, #0]
 8002e92:	60d8      	str	r0, [r3, #12]
 8002e94:	e011      	b.n	8002eba <UART_SetConfig+0x142>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e96:	f7fe fdf9 	bl	8001a8c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002e9a:	2800      	cmp	r0, #0
 8002e9c:	d1e6      	bne.n	8002e6c <UART_SetConfig+0xf4>
 8002e9e:	e00c      	b.n	8002eba <UART_SetConfig+0x142>
        pclk = HAL_RCC_GetSysClockFreq();
 8002ea0:	f7fe fd00 	bl	80018a4 <HAL_RCC_GetSysClockFreq>
        break;
 8002ea4:	e7f9      	b.n	8002e9a <UART_SetConfig+0x122>
        pclk = (uint32_t) HSI_VALUE;
 8002ea6:	4812      	ldr	r0, [pc, #72]	; (8002ef0 <UART_SetConfig+0x178>)
 8002ea8:	e7e0      	b.n	8002e6c <UART_SetConfig+0xf4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eaa:	2380      	movs	r3, #128	; 0x80
 8002eac:	021b      	lsls	r3, r3, #8
 8002eae:	4299      	cmp	r1, r3
 8002eb0:	d1f1      	bne.n	8002e96 <UART_SetConfig+0x11e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002eb2:	f7fe fdeb 	bl	8001a8c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002eb6:	2800      	cmp	r0, #0
 8002eb8:	d1ae      	bne.n	8002e18 <UART_SetConfig+0xa0>
 8002eba:	2000      	movs	r0, #0
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
 8002ebc:	4b0f      	ldr	r3, [pc, #60]	; (8002efc <UART_SetConfig+0x184>)
 8002ebe:	66a3      	str	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8002ec4:	6763      	str	r3, [r4, #116]	; 0x74

  return ret;
}
 8002ec6:	bd70      	pop	{r4, r5, r6, pc}
 8002ec8:	cfff69f3 	.word	0xcfff69f3
 8002ecc:	ffffcfff 	.word	0xffffcfff
 8002ed0:	11fff4ff 	.word	0x11fff4ff
 8002ed4:	40013800 	.word	0x40013800
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	0800e2dc 	.word	0x0800e2dc
 8002ee0:	40004400 	.word	0x40004400
 8002ee4:	0800e2e0 	.word	0x0800e2e0
 8002ee8:	40004800 	.word	0x40004800
 8002eec:	40004c00 	.word	0x40004c00
 8002ef0:	00f42400 	.word	0x00f42400
 8002ef4:	0800e2ee 	.word	0x0800e2ee
 8002ef8:	0000ffef 	.word	0x0000ffef
 8002efc:	00010001 	.word	0x00010001

08002f00 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f00:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8002f02:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f04:	07da      	lsls	r2, r3, #31
 8002f06:	d506      	bpl.n	8002f16 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f08:	6801      	ldr	r1, [r0, #0]
 8002f0a:	4c28      	ldr	r4, [pc, #160]	; (8002fac <UART_AdvFeatureConfig+0xac>)
 8002f0c:	684a      	ldr	r2, [r1, #4]
 8002f0e:	4022      	ands	r2, r4
 8002f10:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002f12:	4322      	orrs	r2, r4
 8002f14:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f16:	079a      	lsls	r2, r3, #30
 8002f18:	d506      	bpl.n	8002f28 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f1a:	6801      	ldr	r1, [r0, #0]
 8002f1c:	4c24      	ldr	r4, [pc, #144]	; (8002fb0 <UART_AdvFeatureConfig+0xb0>)
 8002f1e:	684a      	ldr	r2, [r1, #4]
 8002f20:	4022      	ands	r2, r4
 8002f22:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002f24:	4322      	orrs	r2, r4
 8002f26:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f28:	075a      	lsls	r2, r3, #29
 8002f2a:	d506      	bpl.n	8002f3a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f2c:	6801      	ldr	r1, [r0, #0]
 8002f2e:	4c21      	ldr	r4, [pc, #132]	; (8002fb4 <UART_AdvFeatureConfig+0xb4>)
 8002f30:	684a      	ldr	r2, [r1, #4]
 8002f32:	4022      	ands	r2, r4
 8002f34:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002f36:	4322      	orrs	r2, r4
 8002f38:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f3a:	071a      	lsls	r2, r3, #28
 8002f3c:	d506      	bpl.n	8002f4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f3e:	6801      	ldr	r1, [r0, #0]
 8002f40:	4c1d      	ldr	r4, [pc, #116]	; (8002fb8 <UART_AdvFeatureConfig+0xb8>)
 8002f42:	684a      	ldr	r2, [r1, #4]
 8002f44:	4022      	ands	r2, r4
 8002f46:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002f48:	4322      	orrs	r2, r4
 8002f4a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f4c:	06da      	lsls	r2, r3, #27
 8002f4e:	d506      	bpl.n	8002f5e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f50:	6801      	ldr	r1, [r0, #0]
 8002f52:	4c1a      	ldr	r4, [pc, #104]	; (8002fbc <UART_AdvFeatureConfig+0xbc>)
 8002f54:	688a      	ldr	r2, [r1, #8]
 8002f56:	4022      	ands	r2, r4
 8002f58:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002f5a:	4322      	orrs	r2, r4
 8002f5c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f5e:	069a      	lsls	r2, r3, #26
 8002f60:	d506      	bpl.n	8002f70 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f62:	6801      	ldr	r1, [r0, #0]
 8002f64:	4c16      	ldr	r4, [pc, #88]	; (8002fc0 <UART_AdvFeatureConfig+0xc0>)
 8002f66:	688a      	ldr	r2, [r1, #8]
 8002f68:	4022      	ands	r2, r4
 8002f6a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002f6c:	4322      	orrs	r2, r4
 8002f6e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f70:	065a      	lsls	r2, r3, #25
 8002f72:	d510      	bpl.n	8002f96 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f74:	6801      	ldr	r1, [r0, #0]
 8002f76:	4d13      	ldr	r5, [pc, #76]	; (8002fc4 <UART_AdvFeatureConfig+0xc4>)
 8002f78:	684a      	ldr	r2, [r1, #4]
 8002f7a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002f7c:	402a      	ands	r2, r5
 8002f7e:	4322      	orrs	r2, r4
 8002f80:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f82:	2280      	movs	r2, #128	; 0x80
 8002f84:	0352      	lsls	r2, r2, #13
 8002f86:	4294      	cmp	r4, r2
 8002f88:	d105      	bne.n	8002f96 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f8a:	684a      	ldr	r2, [r1, #4]
 8002f8c:	4c0e      	ldr	r4, [pc, #56]	; (8002fc8 <UART_AdvFeatureConfig+0xc8>)
 8002f8e:	4022      	ands	r2, r4
 8002f90:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8002f92:	4322      	orrs	r2, r4
 8002f94:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f96:	061b      	lsls	r3, r3, #24
 8002f98:	d506      	bpl.n	8002fa8 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f9a:	6802      	ldr	r2, [r0, #0]
 8002f9c:	490b      	ldr	r1, [pc, #44]	; (8002fcc <UART_AdvFeatureConfig+0xcc>)
 8002f9e:	6853      	ldr	r3, [r2, #4]
 8002fa0:	400b      	ands	r3, r1
 8002fa2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8002fa4:	430b      	orrs	r3, r1
 8002fa6:	6053      	str	r3, [r2, #4]
  }
}
 8002fa8:	bd30      	pop	{r4, r5, pc}
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	fffdffff 	.word	0xfffdffff
 8002fb0:	fffeffff 	.word	0xfffeffff
 8002fb4:	fffbffff 	.word	0xfffbffff
 8002fb8:	ffff7fff 	.word	0xffff7fff
 8002fbc:	ffffefff 	.word	0xffffefff
 8002fc0:	ffffdfff 	.word	0xffffdfff
 8002fc4:	ffefffff 	.word	0xffefffff
 8002fc8:	ff9fffff 	.word	0xff9fffff
 8002fcc:	fff7ffff 	.word	0xfff7ffff

08002fd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002fd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fd2:	2780      	movs	r7, #128	; 0x80
{
 8002fd4:	0004      	movs	r4, r0
 8002fd6:	000e      	movs	r6, r1
 8002fd8:	0015      	movs	r5, r2
 8002fda:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fdc:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fde:	6822      	ldr	r2, [r4, #0]
 8002fe0:	69d3      	ldr	r3, [r2, #28]
 8002fe2:	4033      	ands	r3, r6
 8002fe4:	1b9b      	subs	r3, r3, r6
 8002fe6:	4259      	negs	r1, r3
 8002fe8:	414b      	adcs	r3, r1
 8002fea:	42ab      	cmp	r3, r5
 8002fec:	d001      	beq.n	8002ff2 <UART_WaitOnFlagUntilTimeout+0x22>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002fee:	2000      	movs	r0, #0
 8002ff0:	e01f      	b.n	8003032 <UART_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 8002ff2:	9b08      	ldr	r3, [sp, #32]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	d0f3      	beq.n	8002fe0 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff8:	f7fe f85c 	bl	80010b4 <HAL_GetTick>
 8002ffc:	9b01      	ldr	r3, [sp, #4]
 8002ffe:	9a08      	ldr	r2, [sp, #32]
 8003000:	1ac0      	subs	r0, r0, r3
 8003002:	6823      	ldr	r3, [r4, #0]
 8003004:	4290      	cmp	r0, r2
 8003006:	d801      	bhi.n	800300c <UART_WaitOnFlagUntilTimeout+0x3c>
 8003008:	2a00      	cmp	r2, #0
 800300a:	d113      	bne.n	8003034 <UART_WaitOnFlagUntilTimeout+0x64>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	4916      	ldr	r1, [pc, #88]	; (8003068 <UART_WaitOnFlagUntilTimeout+0x98>)
 8003010:	400a      	ands	r2, r1
 8003012:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	31a3      	adds	r1, #163	; 0xa3
 8003018:	31ff      	adds	r1, #255	; 0xff
 800301a:	438a      	bics	r2, r1
 800301c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800301e:	0022      	movs	r2, r4
 8003020:	2320      	movs	r3, #32
 8003022:	3208      	adds	r2, #8
 8003024:	67d3      	str	r3, [r2, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003026:	3280      	adds	r2, #128	; 0x80
 8003028:	6013      	str	r3, [r2, #0]
          __HAL_UNLOCK(huart);
 800302a:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800302c:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800302e:	3480      	adds	r4, #128	; 0x80
 8003030:	7023      	strb	r3, [r4, #0]
}
 8003032:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003034:	2104      	movs	r1, #4
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	420a      	tst	r2, r1
 800303a:	d0d0      	beq.n	8002fde <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800303c:	69da      	ldr	r2, [r3, #28]
 800303e:	423a      	tst	r2, r7
 8003040:	d0cd      	beq.n	8002fde <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003042:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	4908      	ldr	r1, [pc, #32]	; (8003068 <UART_WaitOnFlagUntilTimeout+0x98>)
 8003048:	400a      	ands	r2, r1
 800304a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	31a3      	adds	r1, #163	; 0xa3
 8003050:	31ff      	adds	r1, #255	; 0xff
 8003052:	438a      	bics	r2, r1
 8003054:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8003056:	0022      	movs	r2, r4
 8003058:	2320      	movs	r3, #32
 800305a:	3208      	adds	r2, #8
 800305c:	67d3      	str	r3, [r2, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800305e:	3280      	adds	r2, #128	; 0x80
 8003060:	6013      	str	r3, [r2, #0]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003062:	6053      	str	r3, [r2, #4]
 8003064:	e7e1      	b.n	800302a <UART_WaitOnFlagUntilTimeout+0x5a>
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	fffffe5f 	.word	0xfffffe5f

0800306c <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800306c:	0003      	movs	r3, r0
{
 800306e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003070:	2600      	movs	r6, #0
{
 8003072:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003074:	338c      	adds	r3, #140	; 0x8c
 8003076:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8003078:	f7fe f81c 	bl	80010b4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800307c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800307e:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	071b      	lsls	r3, r3, #28
 8003084:	d419      	bmi.n	80030ba <UART_CheckIdleState+0x4e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003086:	6823      	ldr	r3, [r4, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	075b      	lsls	r3, r3, #29
 800308c:	d50a      	bpl.n	80030a4 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800308e:	2180      	movs	r1, #128	; 0x80
 8003090:	4b10      	ldr	r3, [pc, #64]	; (80030d4 <UART_CheckIdleState+0x68>)
 8003092:	2200      	movs	r2, #0
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	03c9      	lsls	r1, r1, #15
 8003098:	002b      	movs	r3, r5
 800309a:	0020      	movs	r0, r4
 800309c:	f7ff ff98 	bl	8002fd0 <UART_WaitOnFlagUntilTimeout>
 80030a0:	2800      	cmp	r0, #0
 80030a2:	d115      	bne.n	80030d0 <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 80030a4:	0022      	movs	r2, r4
 80030a6:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030a8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80030aa:	3208      	adds	r2, #8
 80030ac:	67d3      	str	r3, [r2, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80030ae:	3280      	adds	r2, #128	; 0x80
 80030b0:	6013      	str	r3, [r2, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b2:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 80030b4:	3480      	adds	r4, #128	; 0x80
 80030b6:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80030b8:	e00b      	b.n	80030d2 <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030ba:	2180      	movs	r1, #128	; 0x80
 80030bc:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <UART_CheckIdleState+0x68>)
 80030be:	0032      	movs	r2, r6
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	0389      	lsls	r1, r1, #14
 80030c4:	0003      	movs	r3, r0
 80030c6:	0020      	movs	r0, r4
 80030c8:	f7ff ff82 	bl	8002fd0 <UART_WaitOnFlagUntilTimeout>
 80030cc:	2800      	cmp	r0, #0
 80030ce:	d0da      	beq.n	8003086 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80030d0:	2003      	movs	r0, #3
}
 80030d2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80030d4:	01ffffff 	.word	0x01ffffff

080030d8 <HAL_UART_Init>:
{
 80030d8:	b570      	push	{r4, r5, r6, lr}
 80030da:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80030dc:	d101      	bne.n	80030e2 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80030de:	2001      	movs	r0, #1
}
 80030e0:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80030e2:	0005      	movs	r5, r0
 80030e4:	3508      	adds	r5, #8
 80030e6:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d104      	bne.n	80030f6 <HAL_UART_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 80030ec:	0002      	movs	r2, r0
 80030ee:	3280      	adds	r2, #128	; 0x80
 80030f0:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80030f2:	f7fd fd2b 	bl	8000b4c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80030f6:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80030f8:	2101      	movs	r1, #1
 80030fa:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80030fc:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80030fe:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003100:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8003102:	438b      	bics	r3, r1
 8003104:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003106:	f7ff fe37 	bl	8002d78 <UART_SetConfig>
 800310a:	2801      	cmp	r0, #1
 800310c:	d0e7      	beq.n	80030de <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800310e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <HAL_UART_Init+0x42>
    UART_AdvFeatureConfig(huart);
 8003114:	0020      	movs	r0, r4
 8003116:	f7ff fef3 	bl	8002f00 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	4907      	ldr	r1, [pc, #28]	; (800313c <HAL_UART_Init+0x64>)
 800311e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8003120:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003122:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003124:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003126:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	438a      	bics	r2, r1
 800312c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800312e:	2201      	movs	r2, #1
 8003130:	6819      	ldr	r1, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8003136:	f7ff ff99 	bl	800306c <UART_CheckIdleState>
 800313a:	e7d1      	b.n	80030e0 <HAL_UART_Init+0x8>
 800313c:	ffffb7ff 	.word	0xffffb7ff

08003140 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003140:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003142:	4b14      	ldr	r3, [pc, #80]	; (8003194 <UARTEx_SetNbDataToProcess+0x54>)
{
 8003144:	0004      	movs	r4, r0
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	2308      	movs	r3, #8
 800314a:	33ff      	adds	r3, #255	; 0xff
 800314c:	9301      	str	r3, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800314e:	4b12      	ldr	r3, [pc, #72]	; (8003198 <UARTEx_SetNbDataToProcess+0x58>)
 8003150:	9302      	str	r3, [sp, #8]
 8003152:	4b12      	ldr	r3, [pc, #72]	; (800319c <UARTEx_SetNbDataToProcess+0x5c>)
 8003154:	9303      	str	r3, [sp, #12]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003156:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8003158:	2b00      	cmp	r3, #0
 800315a:	d102      	bne.n	8003162 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 800315c:	4b10      	ldr	r3, [pc, #64]	; (80031a0 <UARTEx_SetNbDataToProcess+0x60>)
 800315e:	6683      	str	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003160:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003162:	466a      	mov	r2, sp
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003164:	6803      	ldr	r3, [r0, #0]
                               (uint16_t)denominator[tx_fifo_threshold];
 8003166:	ae02      	add	r6, sp, #8
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003168:	689d      	ldr	r5, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800316e:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 8003170:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003172:	00c0      	lsls	r0, r0, #3
 8003174:	f7fd f888 	bl	8000288 <__divsi3>
 8003178:	0023      	movs	r3, r4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800317a:	466a      	mov	r2, sp
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800317c:	336a      	adds	r3, #106	; 0x6a
 800317e:	8018      	strh	r0, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003180:	012b      	lsls	r3, r5, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003182:	0f5b      	lsrs	r3, r3, #29
 8003184:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 8003186:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003188:	00c0      	lsls	r0, r0, #3
 800318a:	f7fd f87d 	bl	8000288 <__divsi3>
 800318e:	3468      	adds	r4, #104	; 0x68
 8003190:	8020      	strh	r0, [r4, #0]
}
 8003192:	e7e5      	b.n	8003160 <UARTEx_SetNbDataToProcess+0x20>
 8003194:	03010101 	.word	0x03010101
 8003198:	04020408 	.word	0x04020408
 800319c:	01010108 	.word	0x01010108
 80031a0:	00010001 	.word	0x00010001

080031a4 <HAL_UARTEx_DisableFifoMode>:
{
 80031a4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80031a6:	0004      	movs	r4, r0
 80031a8:	3480      	adds	r4, #128	; 0x80
 80031aa:	7822      	ldrb	r2, [r4, #0]
 80031ac:	2302      	movs	r3, #2
 80031ae:	2a01      	cmp	r2, #1
 80031b0:	d011      	beq.n	80031d6 <HAL_UARTEx_DisableFifoMode+0x32>
  huart->gState = HAL_UART_STATE_BUSY;
 80031b2:	0005      	movs	r5, r0
  __HAL_UART_DISABLE(huart);
 80031b4:	2601      	movs	r6, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80031b6:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80031b8:	3508      	adds	r5, #8
 80031ba:	3322      	adds	r3, #34	; 0x22
 80031bc:	67eb      	str	r3, [r5, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80031be:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80031c0:	6813      	ldr	r3, [r2, #0]
 80031c2:	43b3      	bics	r3, r6
 80031c4:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80031c6:	4b05      	ldr	r3, [pc, #20]	; (80031dc <HAL_UARTEx_DisableFifoMode+0x38>)
 80031c8:	4019      	ands	r1, r3
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80031ca:	2300      	movs	r3, #0
 80031cc:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80031ce:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80031d0:	2220      	movs	r2, #32
 80031d2:	67ea      	str	r2, [r5, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 80031d4:	7023      	strb	r3, [r4, #0]
}
 80031d6:	0018      	movs	r0, r3
 80031d8:	bd70      	pop	{r4, r5, r6, pc}
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	dfffffff 	.word	0xdfffffff

080031e0 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80031e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 80031e2:	0005      	movs	r5, r0
 80031e4:	3580      	adds	r5, #128	; 0x80
 80031e6:	782b      	ldrb	r3, [r5, #0]
{
 80031e8:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 80031ea:	2002      	movs	r0, #2
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d018      	beq.n	8003222 <HAL_UARTEx_SetTxFifoThreshold+0x42>
  huart->gState = HAL_UART_STATE_BUSY;
 80031f0:	0026      	movs	r6, r4
 80031f2:	2324      	movs	r3, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80031f4:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(huart);
 80031f6:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80031f8:	3608      	adds	r6, #8
  __HAL_LOCK(huart);
 80031fa:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80031fc:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80031fe:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003200:	6813      	ldr	r3, [r2, #0]
 8003202:	4383      	bics	r3, r0
 8003204:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003206:	6893      	ldr	r3, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003208:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	08db      	lsrs	r3, r3, #3
 800320e:	4319      	orrs	r1, r3
 8003210:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003212:	f7ff ff95 	bl	8003140 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003216:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8003218:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800321a:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800321c:	2320      	movs	r3, #32
 800321e:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8003220:	7028      	strb	r0, [r5, #0]
}
 8003222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003224 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8003224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8003226:	0005      	movs	r5, r0
 8003228:	3580      	adds	r5, #128	; 0x80
 800322a:	782b      	ldrb	r3, [r5, #0]
{
 800322c:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 800322e:	2002      	movs	r0, #2
 8003230:	2b01      	cmp	r3, #1
 8003232:	d018      	beq.n	8003266 <HAL_UARTEx_SetRxFifoThreshold+0x42>
  huart->gState = HAL_UART_STATE_BUSY;
 8003234:	0026      	movs	r6, r4
 8003236:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8003238:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 800323a:	3608      	adds	r6, #8
  __HAL_LOCK(huart);
 800323c:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800323e:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003240:	6823      	ldr	r3, [r4, #0]
 8003242:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	4382      	bics	r2, r0
 8003248:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	4806      	ldr	r0, [pc, #24]	; (8003268 <HAL_UARTEx_SetRxFifoThreshold+0x44>)
 800324e:	4002      	ands	r2, r0
 8003250:	4311      	orrs	r1, r2
 8003252:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003254:	0020      	movs	r0, r4
 8003256:	f7ff ff73 	bl	8003140 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800325a:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 800325c:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800325e:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003260:	2320      	movs	r3, #32
 8003262:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8003264:	7028      	strb	r0, [r5, #0]
}
 8003266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003268:	f1ffffff 	.word	0xf1ffffff

0800326c <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 800326c:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 800326e:	2800      	cmp	r0, #0
 8003270:	d103      	bne.n	800327a <lv_disp_get_scr_act+0xe>
 8003272:	f008 f87f 	bl	800b374 <lv_disp_get_default>
    if(!disp) {
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
 8003276:	1e03      	subs	r3, r0, #0
    if(!disp) {
 8003278:	d000      	beq.n	800327c <lv_disp_get_scr_act+0x10>
    }

    return disp->act_scr;
 800327a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
}
 800327c:	0018      	movs	r0, r3
 800327e:	bd10      	pop	{r4, pc}

08003280 <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
 8003280:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 8003282:	2800      	cmp	r0, #0
 8003284:	d103      	bne.n	800328e <lv_disp_get_scr_prev+0xe>
 8003286:	f008 f875 	bl	800b374 <lv_disp_get_default>
    if(!disp) {
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
 800328a:	1e03      	subs	r3, r0, #0
    if(!disp) {
 800328c:	d000      	beq.n	8003290 <lv_disp_get_scr_prev+0x10>
    }

    return disp->prev_scr;
 800328e:	6c03      	ldr	r3, [r0, #64]	; 0x40
}
 8003290:	0018      	movs	r0, r3
 8003292:	bd10      	pop	{r4, pc}

08003294 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 8003294:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 8003296:	2800      	cmp	r0, #0
 8003298:	d103      	bne.n	80032a2 <lv_disp_get_layer_top+0xe>
 800329a:	f008 f86b 	bl	800b374 <lv_disp_get_default>
    if(!disp) {
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
 800329e:	1e03      	subs	r3, r0, #0
    if(!disp) {
 80032a0:	d000      	beq.n	80032a4 <lv_disp_get_layer_top+0x10>
    }

    return disp->top_layer;
 80032a2:	6c43      	ldr	r3, [r0, #68]	; 0x44
}
 80032a4:	0018      	movs	r0, r3
 80032a6:	bd10      	pop	{r4, pc}

080032a8 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 80032a8:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 80032aa:	2800      	cmp	r0, #0
 80032ac:	d103      	bne.n	80032b6 <lv_disp_get_layer_sys+0xe>
 80032ae:	f008 f861 	bl	800b374 <lv_disp_get_default>
    if(!disp) {
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
 80032b2:	1e03      	subs	r3, r0, #0
    if(!disp) {
 80032b4:	d000      	beq.n	80032b8 <lv_disp_get_layer_sys+0x10>
    }

    return disp->sys_layer;
 80032b6:	6c83      	ldr	r3, [r0, #72]	; 0x48
}
 80032b8:	0018      	movs	r0, r3
 80032ba:	bd10      	pop	{r4, pc}

080032bc <obj_to_foreground>:

    if(group->focus_cb) group->focus_cb(group);
}

static void obj_to_foreground(lv_obj_t * obj)
{
 80032bc:	b570      	push	{r4, r5, r6, lr}
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
    lv_obj_t * last_top = NULL;
 80032be:	2400      	movs	r4, #0
    while(i != NULL) {
        if(i->top != 0) last_top = i;
 80032c0:	2520      	movs	r5, #32
    while(i != NULL) {
 80032c2:	2800      	cmp	r0, #0
 80032c4:	d105      	bne.n	80032d2 <obj_to_foreground+0x16>
        i = lv_obj_get_parent(i);
    }

    if(last_top != NULL) {
 80032c6:	2c00      	cmp	r4, #0
 80032c8:	d002      	beq.n	80032d0 <obj_to_foreground+0x14>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
 80032ca:	0020      	movs	r0, r4
 80032cc:	f000 fb19 	bl	8003902 <lv_obj_move_foreground>
    }
}
 80032d0:	bd70      	pop	{r4, r5, r6, pc}
        if(i->top != 0) last_top = i;
 80032d2:	0003      	movs	r3, r0
 80032d4:	3334      	adds	r3, #52	; 0x34
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	422b      	tst	r3, r5
 80032da:	d000      	beq.n	80032de <obj_to_foreground+0x22>
 80032dc:	0004      	movs	r4, r0
        i = lv_obj_get_parent(i);
 80032de:	f000 fbad 	bl	8003a3c <lv_obj_get_parent>
 80032e2:	e7ee      	b.n	80032c2 <obj_to_foreground+0x6>

080032e4 <focus_next_core.part.0>:
    bool can_begin           = true;
 80032e4:	2301      	movs	r3, #1
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 80032e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032e8:	0004      	movs	r4, r0
    lv_obj_t ** obj_sentinel = NULL;
 80032ea:	2700      	movs	r7, #0
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 80032ec:	b085      	sub	sp, #20
    lv_obj_t ** obj_next     = group->obj_focus;
 80032ee:	68c5      	ldr	r5, [r0, #12]
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 80032f0:	9102      	str	r1, [sp, #8]
 80032f2:	9203      	str	r2, [sp, #12]
    bool can_begin           = true;
 80032f4:	9301      	str	r3, [sp, #4]
        if(obj_next == NULL) {
 80032f6:	2d00      	cmp	r5, #0
 80032f8:	d158      	bne.n	80033ac <focus_next_core.part.0+0xc8>
            if(group->wrap || obj_sentinel == NULL) {
 80032fa:	2210      	movs	r2, #16
 80032fc:	7d23      	ldrb	r3, [r4, #20]
 80032fe:	4213      	tst	r3, r2
 8003300:	d103      	bne.n	800330a <focus_next_core.part.0+0x26>
 8003302:	2f00      	cmp	r7, #0
 8003304:	d061      	beq.n	80033ca <focus_next_core.part.0+0xe6>
}
 8003306:	b005      	add	sp, #20
 8003308:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if(!can_begin) return;
 800330a:	9b01      	ldr	r3, [sp, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0fa      	beq.n	8003306 <focus_next_core.part.0+0x22>
                obj_next  = begin(&group->obj_ll);
 8003310:	0020      	movs	r0, r4
 8003312:	9b02      	ldr	r3, [sp, #8]
 8003314:	4798      	blx	r3
 8003316:	0006      	movs	r6, r0
        if(obj_sentinel == NULL) {
 8003318:	2f00      	cmp	r7, #0
 800331a:	d142      	bne.n	80033a2 <focus_next_core.part.0+0xbe>
            if(obj_sentinel == NULL) return; /*Group is empty*/
 800331c:	2e00      	cmp	r6, #0
 800331e:	d0f2      	beq.n	8003306 <focus_next_core.part.0+0x22>
                can_begin = false;
 8003320:	2300      	movs	r3, #0
            if(obj_sentinel == NULL) return; /*Group is empty*/
 8003322:	0035      	movs	r5, r6
                can_begin = false;
 8003324:	9301      	str	r3, [sp, #4]
        if(lv_obj_get_state(*obj_next, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) continue;
 8003326:	2100      	movs	r1, #0
 8003328:	6828      	ldr	r0, [r5, #0]
 800332a:	f000 fe9c 	bl	8004066 <lv_obj_get_state>
 800332e:	2320      	movs	r3, #32
 8003330:	4218      	tst	r0, r3
 8003332:	d148      	bne.n	80033c6 <focus_next_core.part.0+0xe2>
        if(!lv_obj_get_hidden(*obj_next)) break;
 8003334:	6828      	ldr	r0, [r5, #0]
 8003336:	f000 fe91 	bl	800405c <lv_obj_get_hidden>
 800333a:	1e07      	subs	r7, r0, #0
 800333c:	d143      	bne.n	80033c6 <focus_next_core.part.0+0xe2>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 800333e:	68e3      	ldr	r3, [r4, #12]
 8003340:	42ab      	cmp	r3, r5
 8003342:	d0e0      	beq.n	8003306 <focus_next_core.part.0+0x22>
    if(group->obj_focus) {
 8003344:	2b00      	cmp	r3, #0
 8003346:	d010      	beq.n	800336a <focus_next_core.part.0+0x86>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 8003348:	6818      	ldr	r0, [r3, #0]
 800334a:	003a      	movs	r2, r7
 800334c:	69c3      	ldr	r3, [r0, #28]
 800334e:	2117      	movs	r1, #23
 8003350:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 8003352:	68e3      	ldr	r3, [r4, #12]
 8003354:	003a      	movs	r2, r7
 8003356:	210e      	movs	r1, #14
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	f000 fa03 	bl	8003764 <lv_event_send>
        if(res != LV_RES_OK) return;
 800335e:	2801      	cmp	r0, #1
 8003360:	d1d1      	bne.n	8003306 <focus_next_core.part.0+0x22>
        lv_obj_invalidate(*group->obj_focus);
 8003362:	68e3      	ldr	r3, [r4, #12]
 8003364:	6818      	ldr	r0, [r3, #0]
 8003366:	f000 fab0 	bl	80038ca <lv_obj_invalidate>
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 800336a:	6828      	ldr	r0, [r5, #0]
 800336c:	2200      	movs	r2, #0
 800336e:	69c3      	ldr	r3, [r0, #28]
 8003370:	2116      	movs	r1, #22
    group->obj_focus = obj_next;
 8003372:	60e5      	str	r5, [r4, #12]
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8003374:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 8003376:	68e3      	ldr	r3, [r4, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	210d      	movs	r1, #13
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	f000 f9f1 	bl	8003764 <lv_event_send>
    if(res != LV_RES_OK) return;
 8003382:	2801      	cmp	r0, #1
 8003384:	d1bf      	bne.n	8003306 <focus_next_core.part.0+0x22>
    obj_to_foreground(*group->obj_focus);
 8003386:	68e3      	ldr	r3, [r4, #12]
 8003388:	6818      	ldr	r0, [r3, #0]
 800338a:	f7ff ff97 	bl	80032bc <obj_to_foreground>
    lv_obj_invalidate(*group->obj_focus);
 800338e:	68e3      	ldr	r3, [r4, #12]
 8003390:	6818      	ldr	r0, [r3, #0]
 8003392:	f000 fa9a 	bl	80038ca <lv_obj_invalidate>
    if(group->focus_cb) group->focus_cb(group);
 8003396:	6923      	ldr	r3, [r4, #16]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0b4      	beq.n	8003306 <focus_next_core.part.0+0x22>
 800339c:	0020      	movs	r0, r4
 800339e:	4798      	blx	r3
 80033a0:	e7b1      	b.n	8003306 <focus_next_core.part.0+0x22>
                can_begin = false;
 80033a2:	2300      	movs	r3, #0
                obj_next  = begin(&group->obj_ll);
 80033a4:	0005      	movs	r5, r0
        if(obj_sentinel == NULL) {
 80033a6:	003e      	movs	r6, r7
                can_begin = false;
 80033a8:	9301      	str	r3, [sp, #4]
 80033aa:	e00a      	b.n	80033c2 <focus_next_core.part.0+0xde>
        if(obj_sentinel == NULL) {
 80033ac:	002e      	movs	r6, r5
 80033ae:	2f00      	cmp	r7, #0
 80033b0:	d000      	beq.n	80033b4 <focus_next_core.part.0+0xd0>
 80033b2:	003e      	movs	r6, r7
            obj_next = move(&group->obj_ll, obj_next);
 80033b4:	0029      	movs	r1, r5
 80033b6:	0020      	movs	r0, r4
 80033b8:	9b03      	ldr	r3, [sp, #12]
 80033ba:	4798      	blx	r3
 80033bc:	0005      	movs	r5, r0
            if(obj_next == obj_sentinel) return;
 80033be:	42b0      	cmp	r0, r6
 80033c0:	d0a1      	beq.n	8003306 <focus_next_core.part.0+0x22>
        if(obj_next == NULL) continue;
 80033c2:	2d00      	cmp	r5, #0
 80033c4:	d1af      	bne.n	8003326 <focus_next_core.part.0+0x42>
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 80033c6:	0037      	movs	r7, r6
 80033c8:	e795      	b.n	80032f6 <focus_next_core.part.0+0x12>
                if(!can_begin) return;
 80033ca:	9b01      	ldr	r3, [sp, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d09a      	beq.n	8003306 <focus_next_core.part.0+0x22>
                obj_next  = begin(&group->obj_ll);
 80033d0:	0020      	movs	r0, r4
 80033d2:	9b02      	ldr	r3, [sp, #8]
 80033d4:	4798      	blx	r3
 80033d6:	0006      	movs	r6, r0
 80033d8:	e7a0      	b.n	800331c <focus_next_core.part.0+0x38>
	...

080033dc <_lv_group_init>:
{
 80033dc:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 80033de:	2118      	movs	r1, #24
 80033e0:	4801      	ldr	r0, [pc, #4]	; (80033e8 <_lv_group_init+0xc>)
 80033e2:	f008 fbd0 	bl	800bb86 <_lv_ll_init>
}
 80033e6:	bd10      	pop	{r4, pc}
 80033e8:	20007244 	.word	0x20007244

080033ec <lv_group_focus_next>:
    if(group->frozen) return;
 80033ec:	7d03      	ldrb	r3, [r0, #20]
{
 80033ee:	b510      	push	{r4, lr}
    if(group->frozen) return;
 80033f0:	07db      	lsls	r3, r3, #31
 80033f2:	d403      	bmi.n	80033fc <lv_group_focus_next+0x10>
 80033f4:	4a02      	ldr	r2, [pc, #8]	; (8003400 <lv_group_focus_next+0x14>)
 80033f6:	4903      	ldr	r1, [pc, #12]	; (8003404 <lv_group_focus_next+0x18>)
 80033f8:	f7ff ff74 	bl	80032e4 <focus_next_core.part.0>
}
 80033fc:	bd10      	pop	{r4, pc}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	0800bc27 	.word	0x0800bc27
 8003404:	0800bc17 	.word	0x0800bc17

08003408 <lv_group_focus_prev>:
    if(group->frozen) return;
 8003408:	7d03      	ldrb	r3, [r0, #20]
{
 800340a:	b510      	push	{r4, lr}
    if(group->frozen) return;
 800340c:	07db      	lsls	r3, r3, #31
 800340e:	d403      	bmi.n	8003418 <lv_group_focus_prev+0x10>
 8003410:	4a02      	ldr	r2, [pc, #8]	; (800341c <lv_group_focus_prev+0x14>)
 8003412:	4903      	ldr	r1, [pc, #12]	; (8003420 <lv_group_focus_prev+0x18>)
 8003414:	f7ff ff66 	bl	80032e4 <focus_next_core.part.0>
}
 8003418:	bd10      	pop	{r4, pc}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	0800bc33 	.word	0x0800bc33
 8003420:	0800bc1f 	.word	0x0800bc1f

08003424 <lv_group_refocus>:
    g->wrap           = 1;
 8003424:	2310      	movs	r3, #16
    uint8_t temp_wrap = g->wrap;
 8003426:	7d02      	ldrb	r2, [r0, #20]
{
 8003428:	b570      	push	{r4, r5, r6, lr}
    g->wrap           = 1;
 800342a:	4313      	orrs	r3, r2
    uint8_t temp_wrap = g->wrap;
 800342c:	06d5      	lsls	r5, r2, #27
{
 800342e:	0004      	movs	r4, r0
    uint8_t temp_wrap = g->wrap;
 8003430:	0fed      	lsrs	r5, r5, #31
    g->wrap           = 1;
 8003432:	7503      	strb	r3, [r0, #20]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8003434:	071b      	lsls	r3, r3, #28
 8003436:	d408      	bmi.n	800344a <lv_group_refocus+0x26>
        lv_group_focus_next(g);
 8003438:	f7ff ffd8 	bl	80033ec <lv_group_focus_next>
    g->wrap = temp_wrap;
 800343c:	2210      	movs	r2, #16
 800343e:	7d23      	ldrb	r3, [r4, #20]
 8003440:	012d      	lsls	r5, r5, #4
 8003442:	4393      	bics	r3, r2
 8003444:	432b      	orrs	r3, r5
 8003446:	7523      	strb	r3, [r4, #20]
}
 8003448:	bd70      	pop	{r4, r5, r6, pc}
        lv_group_focus_prev(g);
 800344a:	f7ff ffdd 	bl	8003408 <lv_group_focus_prev>
 800344e:	e7f5      	b.n	800343c <lv_group_refocus+0x18>

08003450 <lv_group_add_obj>:
{
 8003450:	b570      	push	{r4, r5, r6, lr}
 8003452:	0004      	movs	r4, r0
 8003454:	000d      	movs	r5, r1
    if(group == NULL) return;
 8003456:	2800      	cmp	r0, #0
 8003458:	d01d      	beq.n	8003496 <lv_group_add_obj+0x46>
    _LV_LL_READ(group->obj_ll, obj_i) {
 800345a:	f008 fbdc 	bl	800bc16 <_lv_ll_get_head>
 800345e:	2800      	cmp	r0, #0
 8003460:	d11a      	bne.n	8003498 <lv_group_add_obj+0x48>
    if(obj->group_p) {
 8003462:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <lv_group_add_obj+0x28>
        if(lv_obj_is_focused(obj)) {
 8003468:	0028      	movs	r0, r5
 800346a:	f001 fad6 	bl	8004a1a <lv_obj_is_focused>
 800346e:	2800      	cmp	r0, #0
 8003470:	d002      	beq.n	8003478 <lv_group_add_obj+0x28>
            lv_group_refocus(obj->group_p);
 8003472:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8003474:	f7ff ffd6 	bl	8003424 <lv_group_refocus>
    obj->group_p     = group;
 8003478:	63ac      	str	r4, [r5, #56]	; 0x38
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 800347a:	0020      	movs	r0, r4
 800347c:	f008 fbab 	bl	800bbd6 <_lv_ll_ins_tail>
 8003480:	1e06      	subs	r6, r0, #0
    if(next == NULL) return;
 8003482:	d008      	beq.n	8003496 <lv_group_add_obj+0x46>
    *next = obj;
 8003484:	6005      	str	r5, [r0, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
 8003486:	0020      	movs	r0, r4
 8003488:	f008 fbc5 	bl	800bc16 <_lv_ll_get_head>
 800348c:	42b0      	cmp	r0, r6
 800348e:	d102      	bne.n	8003496 <lv_group_add_obj+0x46>
        lv_group_refocus(group);
 8003490:	0020      	movs	r0, r4
 8003492:	f7ff ffc7 	bl	8003424 <lv_group_refocus>
}
 8003496:	bd70      	pop	{r4, r5, r6, pc}
        if((*obj_i) == obj) {
 8003498:	6803      	ldr	r3, [r0, #0]
 800349a:	42ab      	cmp	r3, r5
 800349c:	d0fb      	beq.n	8003496 <lv_group_add_obj+0x46>
    _LV_LL_READ(group->obj_ll, obj_i) {
 800349e:	0001      	movs	r1, r0
 80034a0:	0020      	movs	r0, r4
 80034a2:	f008 fbc0 	bl	800bc26 <_lv_ll_get_next>
 80034a6:	e7da      	b.n	800345e <lv_group_add_obj+0xe>

080034a8 <lv_group_get_focused>:
    if(!group) return NULL;
 80034a8:	1e03      	subs	r3, r0, #0
 80034aa:	d003      	beq.n	80034b4 <lv_group_get_focused+0xc>
    if(group->obj_focus == NULL) return NULL;
 80034ac:	68c2      	ldr	r2, [r0, #12]
    if(!group) return NULL;
 80034ae:	1e13      	subs	r3, r2, #0
    if(group->obj_focus == NULL) return NULL;
 80034b0:	d000      	beq.n	80034b4 <lv_group_get_focused+0xc>
    return *group->obj_focus;
 80034b2:	6813      	ldr	r3, [r2, #0]
}
 80034b4:	0018      	movs	r0, r3
 80034b6:	4770      	bx	lr

080034b8 <lv_group_get_editing>:
    if(!group) return false;
 80034b8:	2800      	cmp	r0, #0
 80034ba:	d002      	beq.n	80034c2 <lv_group_get_editing+0xa>
    return group->editing ? true : false;
 80034bc:	7d00      	ldrb	r0, [r0, #20]
 80034be:	0780      	lsls	r0, r0, #30
 80034c0:	0fc0      	lsrs	r0, r0, #31
}
 80034c2:	4770      	bx	lr

080034c4 <lv_indev_reset.part.3>:
/**
 * Reset one or all input devices
 * @param indev pointer to an input device to reset or NULL to reset all of them
 * @param obj pointer to an object which triggers the reset.
 */
void lv_indev_reset(lv_indev_t * indev, lv_obj_t * obj)
 80034c4:	b570      	push	{r4, r5, r6, lr}
 80034c6:	0004      	movs	r4, r0
        if(obj == NULL || indev->proc.types.pointer.last_obj == obj) {
            indev->proc.types.pointer.last_obj = NULL;
        }
    }
    else {
        lv_indev_t * i = lv_indev_get_next(NULL);
 80034c8:	2000      	movs	r0, #0
 80034ca:	f008 f857 	bl	800b57c <lv_indev_get_next>
        while(i) {
            i->proc.reset_query = 1;
 80034ce:	2502      	movs	r5, #2
        while(i) {
 80034d0:	2800      	cmp	r0, #0
 80034d2:	d100      	bne.n	80034d6 <lv_indev_reset.part.3+0x12>
                i->proc.types.pointer.last_obj = NULL;
            }
            i = lv_indev_get_next(i);
        }
    }
}
 80034d4:	bd70      	pop	{r4, r5, r6, pc}
            i->proc.reset_query = 1;
 80034d6:	0002      	movs	r2, r0
 80034d8:	3250      	adds	r2, #80	; 0x50
 80034da:	7813      	ldrb	r3, [r2, #0]
 80034dc:	432b      	orrs	r3, r5
 80034de:	7013      	strb	r3, [r2, #0]
            if(indev_act == i) indev_obj_act = NULL;
 80034e0:	4b0f      	ldr	r3, [pc, #60]	; (8003520 <lv_indev_reset.part.3+0x5c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4298      	cmp	r0, r3
 80034e6:	d102      	bne.n	80034ee <lv_indev_reset.part.3+0x2a>
 80034e8:	2200      	movs	r2, #0
 80034ea:	4b0e      	ldr	r3, [pc, #56]	; (8003524 <lv_indev_reset.part.3+0x60>)
 80034ec:	601a      	str	r2, [r3, #0]
            if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
 80034ee:	2c00      	cmp	r4, #0
 80034f0:	d011      	beq.n	8003516 <lv_indev_reset.part.3+0x52>
 80034f2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80034f4:	429c      	cmp	r4, r3
 80034f6:	d00e      	beq.n	8003516 <lv_indev_reset.part.3+0x52>
            if(obj == NULL || i->proc.types.pointer.act_obj == obj) {
 80034f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80034fa:	429c      	cmp	r4, r3
 80034fc:	d103      	bne.n	8003506 <lv_indev_reset.part.3+0x42>
                i->proc.types.pointer.act_obj = NULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	6343      	str	r3, [r0, #52]	; 0x34
            if(obj == NULL || i->proc.types.pointer.last_obj == obj) {
 8003502:	429c      	cmp	r4, r3
 8003504:	d002      	beq.n	800350c <lv_indev_reset.part.3+0x48>
 8003506:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003508:	429c      	cmp	r4, r3
 800350a:	d101      	bne.n	8003510 <lv_indev_reset.part.3+0x4c>
                i->proc.types.pointer.last_obj = NULL;
 800350c:	2300      	movs	r3, #0
 800350e:	6383      	str	r3, [r0, #56]	; 0x38
            i = lv_indev_get_next(i);
 8003510:	f008 f834 	bl	800b57c <lv_indev_get_next>
 8003514:	e7dc      	b.n	80034d0 <lv_indev_reset.part.3+0xc>
                i->proc.types.pointer.last_pressed = NULL;
 8003516:	2300      	movs	r3, #0
 8003518:	63c3      	str	r3, [r0, #60]	; 0x3c
            if(obj == NULL || i->proc.types.pointer.act_obj == obj) {
 800351a:	429c      	cmp	r4, r3
 800351c:	d0ef      	beq.n	80034fe <lv_indev_reset.part.3+0x3a>
 800351e:	e7eb      	b.n	80034f8 <lv_indev_reset.part.3+0x34>
 8003520:	20005d14 	.word	0x20005d14
 8003524:	20005d18 	.word	0x20005d18

08003528 <_lv_indev_init>:
{
 8003528:	b510      	push	{r4, lr}
 800352a:	2000      	movs	r0, #0
 800352c:	f7ff ffca 	bl	80034c4 <lv_indev_reset.part.3>
}
 8003530:	bd10      	pop	{r4, pc}
	...

08003534 <lv_indev_get_act>:
    return indev_act;
 8003534:	4b01      	ldr	r3, [pc, #4]	; (800353c <lv_indev_get_act+0x8>)
 8003536:	6818      	ldr	r0, [r3, #0]
}
 8003538:	4770      	bx	lr
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	20005d14 	.word	0x20005d14

08003540 <style_prop_is_cacheble>:
}

static bool style_prop_is_cacheble(lv_style_property_t prop)
{

    switch(prop) {
 8003540:	2850      	cmp	r0, #80	; 0x50
 8003542:	d00f      	beq.n	8003564 <style_prop_is_cacheble+0x24>
 8003544:	d81f      	bhi.n	8003586 <style_prop_is_cacheble+0x46>
 8003546:	2818      	cmp	r0, #24
 8003548:	d80e      	bhi.n	8003568 <style_prop_is_cacheble+0x28>
 800354a:	2815      	cmp	r0, #21
 800354c:	d20a      	bcs.n	8003564 <style_prop_is_cacheble+0x24>
 800354e:	2807      	cmp	r0, #7
 8003550:	d805      	bhi.n	800355e <style_prop_is_cacheble+0x1e>
 8003552:	2804      	cmp	r0, #4
 8003554:	d206      	bcs.n	8003564 <style_prop_is_cacheble+0x24>
 8003556:	3801      	subs	r0, #1
 8003558:	2801      	cmp	r0, #1
 800355a:	d80d      	bhi.n	8003578 <style_prop_is_cacheble+0x38>
 800355c:	e002      	b.n	8003564 <style_prop_is_cacheble+0x24>
 800355e:	3810      	subs	r0, #16
 8003560:	2803      	cmp	r0, #3
 8003562:	d809      	bhi.n	8003578 <style_prop_is_cacheble+0x38>
        case LV_STYLE_OUTLINE_BLEND_MODE:
        case LV_STYLE_PATTERN_BLEND_MODE:
        case LV_STYLE_SHADOW_BLEND_MODE:
        case LV_STYLE_TEXT_BLEND_MODE:
        case LV_STYLE_VALUE_BLEND_MODE:
            return true;
 8003564:	2001      	movs	r0, #1
 8003566:	e008      	b.n	800357a <style_prop_is_cacheble+0x3a>
    switch(prop) {
 8003568:	2833      	cmp	r0, #51	; 0x33
 800356a:	d807      	bhi.n	800357c <style_prop_is_cacheble+0x3c>
 800356c:	2830      	cmp	r0, #48	; 0x30
 800356e:	d2f9      	bcs.n	8003564 <style_prop_is_cacheble+0x24>
 8003570:	2820      	cmp	r0, #32
 8003572:	d0f7      	beq.n	8003564 <style_prop_is_cacheble+0x24>
 8003574:	282c      	cmp	r0, #44	; 0x2c
 8003576:	d0f5      	beq.n	8003564 <style_prop_is_cacheble+0x24>
            break;
        default:
            return false;
 8003578:	2000      	movs	r0, #0
    }
}
 800357a:	4770      	bx	lr
    switch(prop) {
 800357c:	2840      	cmp	r0, #64	; 0x40
 800357e:	d0f1      	beq.n	8003564 <style_prop_is_cacheble+0x24>
 8003580:	2842      	cmp	r0, #66	; 0x42
 8003582:	d1f9      	bne.n	8003578 <style_prop_is_cacheble+0x38>
 8003584:	e7ee      	b.n	8003564 <style_prop_is_cacheble+0x24>
 8003586:	28ff      	cmp	r0, #255	; 0xff
 8003588:	d0ec      	beq.n	8003564 <style_prop_is_cacheble+0x24>
 800358a:	d80e      	bhi.n	80035aa <style_prop_is_cacheble+0x6a>
 800358c:	286e      	cmp	r0, #110	; 0x6e
 800358e:	d0e9      	beq.n	8003564 <style_prop_is_cacheble+0x24>
 8003590:	d804      	bhi.n	800359c <style_prop_is_cacheble+0x5c>
 8003592:	2854      	cmp	r0, #84	; 0x54
 8003594:	d0e6      	beq.n	8003564 <style_prop_is_cacheble+0x24>
 8003596:	2860      	cmp	r0, #96	; 0x60
 8003598:	d1ee      	bne.n	8003578 <style_prop_is_cacheble+0x38>
 800359a:	e7e3      	b.n	8003564 <style_prop_is_cacheble+0x24>
 800359c:	287f      	cmp	r0, #127	; 0x7f
 800359e:	d0e1      	beq.n	8003564 <style_prop_is_cacheble+0x24>
 80035a0:	2891      	cmp	r0, #145	; 0x91
 80035a2:	d0df      	beq.n	8003564 <style_prop_is_cacheble+0x24>
 80035a4:	2872      	cmp	r0, #114	; 0x72
 80035a6:	d1e7      	bne.n	8003578 <style_prop_is_cacheble+0x38>
 80035a8:	e7dc      	b.n	8003564 <style_prop_is_cacheble+0x24>
 80035aa:	4b0a      	ldr	r3, [pc, #40]	; (80035d4 <style_prop_is_cacheble+0x94>)
 80035ac:	4298      	cmp	r0, r3
 80035ae:	d0d9      	beq.n	8003564 <style_prop_is_cacheble+0x24>
 80035b0:	d806      	bhi.n	80035c0 <style_prop_is_cacheble+0x80>
 80035b2:	4b09      	ldr	r3, [pc, #36]	; (80035d8 <style_prop_is_cacheble+0x98>)
 80035b4:	4298      	cmp	r0, r3
 80035b6:	d0d5      	beq.n	8003564 <style_prop_is_cacheble+0x24>
 80035b8:	d3de      	bcc.n	8003578 <style_prop_is_cacheble+0x38>
 80035ba:	4b08      	ldr	r3, [pc, #32]	; (80035dc <style_prop_is_cacheble+0x9c>)
 80035bc:	18c0      	adds	r0, r0, r3
 80035be:	e7cb      	b.n	8003558 <style_prop_is_cacheble+0x18>
 80035c0:	4b07      	ldr	r3, [pc, #28]	; (80035e0 <style_prop_is_cacheble+0xa0>)
 80035c2:	4298      	cmp	r0, r3
 80035c4:	d0ce      	beq.n	8003564 <style_prop_is_cacheble+0x24>
 80035c6:	4b07      	ldr	r3, [pc, #28]	; (80035e4 <style_prop_is_cacheble+0xa4>)
 80035c8:	4298      	cmp	r0, r3
 80035ca:	d0cb      	beq.n	8003564 <style_prop_is_cacheble+0x24>
 80035cc:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <style_prop_is_cacheble+0xa8>)
 80035ce:	4298      	cmp	r0, r3
 80035d0:	d1d2      	bne.n	8003578 <style_prop_is_cacheble+0x38>
 80035d2:	e7c7      	b.n	8003564 <style_prop_is_cacheble+0x24>
 80035d4:	00008083 	.word	0x00008083
 80035d8:	0000800c 	.word	0x0000800c
 80035dc:	ffff7f80 	.word	0xffff7f80
 80035e0:	000080a0 	.word	0x000080a0
 80035e4:	000080ad 	.word	0x000080ad
 80035e8:	0000808e 	.word	0x0000808e

080035ec <refresh_children_position>:
{
 80035ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _LV_LL_READ(obj->child_ll, i) {
 80035ee:	1d05      	adds	r5, r0, #4
 80035f0:	0028      	movs	r0, r5
{
 80035f2:	000e      	movs	r6, r1
 80035f4:	0017      	movs	r7, r2
    _LV_LL_READ(obj->child_ll, i) {
 80035f6:	f008 fb0e 	bl	800bc16 <_lv_ll_get_head>
 80035fa:	1e04      	subs	r4, r0, #0
 80035fc:	d100      	bne.n	8003600 <refresh_children_position+0x14>
}
 80035fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        i->coords.x1 += x_diff;
 8003600:	8a23      	ldrh	r3, [r4, #16]
 8003602:	b2b2      	uxth	r2, r6
        i->coords.y1 += y_diff;
 8003604:	8a61      	ldrh	r1, [r4, #18]
        i->coords.x1 += x_diff;
 8003606:	18d3      	adds	r3, r2, r3
 8003608:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
 800360a:	b2bb      	uxth	r3, r7
 800360c:	1859      	adds	r1, r3, r1
 800360e:	8261      	strh	r1, [r4, #18]
        i->coords.x2 += x_diff;
 8003610:	8aa1      	ldrh	r1, [r4, #20]
        refresh_children_position(i, x_diff, y_diff);
 8003612:	0020      	movs	r0, r4
        i->coords.x2 += x_diff;
 8003614:	1852      	adds	r2, r2, r1
 8003616:	82a2      	strh	r2, [r4, #20]
        i->coords.y2 += y_diff;
 8003618:	8ae2      	ldrh	r2, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
 800361a:	0031      	movs	r1, r6
        i->coords.y2 += y_diff;
 800361c:	189b      	adds	r3, r3, r2
 800361e:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
 8003620:	003a      	movs	r2, r7
 8003622:	f7ff ffe3 	bl	80035ec <refresh_children_position>
    _LV_LL_READ(obj->child_ll, i) {
 8003626:	0021      	movs	r1, r4
 8003628:	0028      	movs	r0, r5
 800362a:	f008 fafc 	bl	800bc26 <_lv_ll_get_next>
 800362e:	e7e4      	b.n	80035fa <refresh_children_position+0xe>

08003630 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 8003630:	2300      	movs	r3, #0
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
 8003632:	5cca      	ldrb	r2, [r1, r3]
 8003634:	54c2      	strb	r2, [r0, r3]
 8003636:	3301      	adds	r3, #1
    while(len) {
 8003638:	2b08      	cmp	r3, #8
 800363a:	d1fa      	bne.n	8003632 <lv_area_copy+0x2>
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
}
 800363c:	4770      	bx	lr
	...

08003640 <lv_init>:
{
 8003640:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if(lv_initialized) {
 8003642:	4c18      	ldr	r4, [pc, #96]	; (80036a4 <lv_init+0x64>)
 8003644:	7823      	ldrb	r3, [r4, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d12a      	bne.n	80036a0 <lv_init+0x60>
    _lv_mem_init();
 800364a:	f008 fc25 	bl	800be98 <_lv_mem_init>
    _lv_task_core_init();
 800364e:	f008 fe93 	bl	800c378 <_lv_task_core_init>
    _lv_group_init();
 8003652:	f7ff fec3 	bl	80033dc <_lv_group_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(lv_style_trans_t));
 8003656:	2110      	movs	r1, #16
 8003658:	4813      	ldr	r0, [pc, #76]	; (80036a8 <lv_init+0x68>)
 800365a:	f008 fa94 	bl	800bb86 <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 800365e:	21be      	movs	r1, #190	; 0xbe
 8003660:	4812      	ldr	r0, [pc, #72]	; (80036ac <lv_init+0x6c>)
 8003662:	0049      	lsls	r1, r1, #1
 8003664:	f008 fa8f 	bl	800bb86 <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8003668:	2160      	movs	r1, #96	; 0x60
 800366a:	4811      	ldr	r0, [pc, #68]	; (80036b0 <lv_init+0x70>)
 800366c:	f008 fa8b 	bl	800bb86 <_lv_ll_init>
    lv_theme_t * th = LV_THEME_DEFAULT_INIT(LV_THEME_DEFAULT_COLOR_PRIMARY, LV_THEME_DEFAULT_COLOR_SECONDARY,
 8003670:	4b10      	ldr	r3, [pc, #64]	; (80036b4 <lv_init+0x74>)
 8003672:	4911      	ldr	r1, [pc, #68]	; (80036b8 <lv_init+0x78>)
 8003674:	4811      	ldr	r0, [pc, #68]	; (80036bc <lv_init+0x7c>)
 8003676:	9302      	str	r3, [sp, #8]
 8003678:	9301      	str	r3, [sp, #4]
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	2202      	movs	r2, #2
 800367e:	8809      	ldrh	r1, [r1, #0]
 8003680:	8800      	ldrh	r0, [r0, #0]
 8003682:	f009 fb7b 	bl	800cd7c <lv_theme_material_init>
    lv_theme_set_act(th);
 8003686:	f009 fa61 	bl	800cb4c <lv_theme_set_act>
    _lv_refr_init();
 800368a:	f002 fb2b 	bl	8005ce4 <_lv_refr_init>
    _lv_indev_init();
 800368e:	f7ff ff4b 	bl	8003528 <_lv_indev_init>
    _lv_img_decoder_init();
 8003692:	f007 faff 	bl	800ac94 <_lv_img_decoder_init>
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
 8003696:	2001      	movs	r0, #1
 8003698:	f007 f9c4 	bl	800aa24 <lv_img_cache_set_size>
    lv_initialized = true;
 800369c:	2301      	movs	r3, #1
 800369e:	7023      	strb	r3, [r4, #0]
}
 80036a0:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	20005d24 	.word	0x20005d24
 80036a8:	20007194 	.word	0x20007194
 80036ac:	200070f0 	.word	0x200070f0
 80036b0:	200070e4 	.word	0x200070e4
 80036b4:	20000028 	.word	0x20000028
 80036b8:	0800e306 	.word	0x0800e306
 80036bc:	0800e308 	.word	0x0800e308

080036c0 <lv_obj_set_click>:
    obj->click = (en == true ? 1 : 0);
 80036c0:	2201      	movs	r2, #1
 80036c2:	000b      	movs	r3, r1
 80036c4:	3034      	adds	r0, #52	; 0x34
 80036c6:	7801      	ldrb	r1, [r0, #0]
 80036c8:	4013      	ands	r3, r2
 80036ca:	4391      	bics	r1, r2
 80036cc:	4319      	orrs	r1, r3
 80036ce:	7001      	strb	r1, [r0, #0]
}
 80036d0:	4770      	bx	lr
	...

080036d4 <lv_event_send_func>:
{
 80036d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036d6:	b089      	sub	sp, #36	; 0x24
 80036d8:	9302      	str	r3, [sp, #8]
    event_temp_data.deleted = false;
 80036da:	2300      	movs	r3, #0
    if(event_temp_data_head) {
 80036dc:	4e1f      	ldr	r6, [pc, #124]	; (800375c <lv_event_send_func+0x88>)
    event_temp_data.obj     = obj;
 80036de:	ad05      	add	r5, sp, #20
    event_temp_data.deleted = false;
 80036e0:	712b      	strb	r3, [r5, #4]
    event_temp_data.prev    = NULL;
 80036e2:	60ab      	str	r3, [r5, #8]
    if(event_temp_data_head) {
 80036e4:	6833      	ldr	r3, [r6, #0]
{
 80036e6:	9001      	str	r0, [sp, #4]
 80036e8:	000c      	movs	r4, r1
 80036ea:	9200      	str	r2, [sp, #0]
    event_temp_data.obj     = obj;
 80036ec:	9105      	str	r1, [sp, #20]
    if(event_temp_data_head) {
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d000      	beq.n	80036f4 <lv_event_send_func+0x20>
        event_temp_data.prev = event_temp_data_head;
 80036f2:	60ab      	str	r3, [r5, #8]
    const void * event_act_data_save = event_act_data;
 80036f4:	4f1a      	ldr	r7, [pc, #104]	; (8003760 <lv_event_send_func+0x8c>)
    event_temp_data_head = &event_temp_data;
 80036f6:	6035      	str	r5, [r6, #0]
    const void * event_act_data_save = event_act_data;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	9303      	str	r3, [sp, #12]
    event_act_data                   = data;
 80036fc:	9b02      	ldr	r3, [sp, #8]
 80036fe:	603b      	str	r3, [r7, #0]
    lv_indev_t * indev_act = lv_indev_get_act();
 8003700:	f7ff ff18 	bl	8003534 <lv_indev_get_act>
    if(indev_act) {
 8003704:	2800      	cmp	r0, #0
 8003706:	d004      	beq.n	8003712 <lv_event_send_func+0x3e>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
 8003708:	6883      	ldr	r3, [r0, #8]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <lv_event_send_func+0x3e>
 800370e:	9900      	ldr	r1, [sp, #0]
 8003710:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
 8003712:	9b01      	ldr	r3, [sp, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d002      	beq.n	800371e <lv_event_send_func+0x4a>
 8003718:	9900      	ldr	r1, [sp, #0]
 800371a:	0020      	movs	r0, r4
 800371c:	4798      	blx	r3
        return LV_RES_INV;
 800371e:	2000      	movs	r0, #0
    event_act_data = event_act_data_save;
 8003720:	9b03      	ldr	r3, [sp, #12]
 8003722:	603b      	str	r3, [r7, #0]
    event_temp_data_head = event_temp_data_head->prev;
 8003724:	6833      	ldr	r3, [r6, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	6033      	str	r3, [r6, #0]
    if(event_temp_data.deleted) {
 800372a:	792b      	ldrb	r3, [r5, #4]
 800372c:	4283      	cmp	r3, r0
 800372e:	d113      	bne.n	8003758 <lv_event_send_func+0x84>
    return LV_RES_OK;
 8003730:	3001      	adds	r0, #1
    if(obj) {
 8003732:	2c00      	cmp	r4, #0
 8003734:	d010      	beq.n	8003758 <lv_event_send_func+0x84>
        if(obj->parent_event && obj->parent) {
 8003736:	0023      	movs	r3, r4
 8003738:	3334      	adds	r3, #52	; 0x34
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	065b      	lsls	r3, r3, #25
 800373e:	d50b      	bpl.n	8003758 <lv_event_send_func+0x84>
 8003740:	6823      	ldr	r3, [r4, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d008      	beq.n	8003758 <lv_event_send_func+0x84>
            lv_res_t res = lv_event_send(obj->parent, event, data);
 8003746:	0018      	movs	r0, r3
 8003748:	9a02      	ldr	r2, [sp, #8]
 800374a:	9900      	ldr	r1, [sp, #0]
 800374c:	f000 f80a 	bl	8003764 <lv_event_send>
            if(res != LV_RES_OK) {
 8003750:	3801      	subs	r0, #1
 8003752:	4243      	negs	r3, r0
 8003754:	4158      	adcs	r0, r3
        return LV_RES_INV;
 8003756:	b2c0      	uxtb	r0, r0
}
 8003758:	b009      	add	sp, #36	; 0x24
 800375a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800375c:	20005d20 	.word	0x20005d20
 8003760:	20005d1c 	.word	0x20005d1c

08003764 <lv_event_send>:
{
 8003764:	b510      	push	{r4, lr}
 8003766:	0013      	movs	r3, r2
 8003768:	0004      	movs	r4, r0
    if(obj == NULL) return LV_RES_OK;
 800376a:	2001      	movs	r0, #1
 800376c:	2c00      	cmp	r4, #0
 800376e:	d004      	beq.n	800377a <lv_event_send+0x16>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
 8003770:	000a      	movs	r2, r1
 8003772:	69a0      	ldr	r0, [r4, #24]
 8003774:	0021      	movs	r1, r4
 8003776:	f7ff ffad 	bl	80036d4 <lv_event_send_func>
}
 800377a:	bd10      	pop	{r4, pc}

0800377c <lv_signal_send>:
{
 800377c:	b510      	push	{r4, lr}
    if(obj == NULL) return LV_RES_OK;
 800377e:	2301      	movs	r3, #1
 8003780:	2800      	cmp	r0, #0
 8003782:	d004      	beq.n	800378e <lv_signal_send+0x12>
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8003784:	69c4      	ldr	r4, [r0, #28]
 8003786:	2c00      	cmp	r4, #0
 8003788:	d001      	beq.n	800378e <lv_signal_send+0x12>
 800378a:	47a0      	blx	r4
 800378c:	0003      	movs	r3, r0
}
 800378e:	0018      	movs	r0, r3
 8003790:	bd10      	pop	{r4, pc}

08003792 <lv_obj_refresh_ext_draw_pad>:
    obj->ext_draw_pad = 0;
 8003792:	2200      	movs	r2, #0
{
 8003794:	b510      	push	{r4, lr}
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 8003796:	69c3      	ldr	r3, [r0, #28]
    obj->ext_draw_pad = 0;
 8003798:	8642      	strh	r2, [r0, #50]	; 0x32
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 800379a:	2106      	movs	r1, #6
 800379c:	4798      	blx	r3
}
 800379e:	bd10      	pop	{r4, pc}

080037a0 <lv_obj_get_disp>:
{
 80037a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(obj->parent == NULL)
 80037a2:	6803      	ldr	r3, [r0, #0]
{
 80037a4:	0005      	movs	r5, r0
    if(obj->parent == NULL)
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d108      	bne.n	80037bc <lv_obj_get_disp+0x1c>
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
 80037aa:	4e10      	ldr	r6, [pc, #64]	; (80037ec <lv_obj_get_disp+0x4c>)
 80037ac:	0030      	movs	r0, r6
 80037ae:	f008 fa32 	bl	800bc16 <_lv_ll_get_head>
 80037b2:	1e04      	subs	r4, r0, #0
 80037b4:	d106      	bne.n	80037c4 <lv_obj_get_disp+0x24>
}
 80037b6:	0020      	movs	r0, r4
 80037b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } while(par != NULL);
 80037ba:	001d      	movs	r5, r3
    return obj->parent;
 80037bc:	682b      	ldr	r3, [r5, #0]
    } while(par != NULL);
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1fb      	bne.n	80037ba <lv_obj_get_disp+0x1a>
 80037c2:	e7f2      	b.n	80037aa <lv_obj_get_disp+0xa>
        _LV_LL_READ(d->scr_ll, s) {
 80037c4:	0027      	movs	r7, r4
 80037c6:	3730      	adds	r7, #48	; 0x30
 80037c8:	0038      	movs	r0, r7
 80037ca:	f008 fa24 	bl	800bc16 <_lv_ll_get_head>
 80037ce:	2800      	cmp	r0, #0
 80037d0:	d104      	bne.n	80037dc <lv_obj_get_disp+0x3c>
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
 80037d2:	0021      	movs	r1, r4
 80037d4:	0030      	movs	r0, r6
 80037d6:	f008 fa26 	bl	800bc26 <_lv_ll_get_next>
 80037da:	e7ea      	b.n	80037b2 <lv_obj_get_disp+0x12>
            if(s == scr) return d;
 80037dc:	4285      	cmp	r5, r0
 80037de:	d0ea      	beq.n	80037b6 <lv_obj_get_disp+0x16>
        _LV_LL_READ(d->scr_ll, s) {
 80037e0:	0001      	movs	r1, r0
 80037e2:	0038      	movs	r0, r7
 80037e4:	f008 fa1f 	bl	800bc26 <_lv_ll_get_next>
 80037e8:	e7f1      	b.n	80037ce <lv_obj_get_disp+0x2e>
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	200070f0 	.word	0x200070f0

080037f0 <lv_obj_area_is_visible>:
    return obj->hidden == 0 ? false : true;
 80037f0:	0003      	movs	r3, r0
 80037f2:	3334      	adds	r3, #52	; 0x34
 80037f4:	781b      	ldrb	r3, [r3, #0]
{
 80037f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037f8:	0004      	movs	r4, r0
 80037fa:	000d      	movs	r5, r1
    if(lv_obj_get_hidden(obj)) return false;
 80037fc:	2600      	movs	r6, #0
 80037fe:	06db      	lsls	r3, r3, #27
 8003800:	d43c      	bmi.n	800387c <lv_obj_area_is_visible+0x8c>
 8003802:	0006      	movs	r6, r0
    return obj->parent;
 8003804:	6833      	ldr	r3, [r6, #0]
    } while(par != NULL);
 8003806:	2b00      	cmp	r3, #0
 8003808:	d126      	bne.n	8003858 <lv_obj_area_is_visible+0x68>
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 800380a:	0030      	movs	r0, r6
 800380c:	f7ff ffc8 	bl	80037a0 <lv_obj_get_disp>
 8003810:	0007      	movs	r7, r0
    if(obj_scr == lv_disp_get_scr_act(disp) ||
 8003812:	f7ff fd2b 	bl	800326c <lv_disp_get_scr_act>
 8003816:	42b0      	cmp	r0, r6
 8003818:	d120      	bne.n	800385c <lv_obj_area_is_visible+0x6c>
        lv_area_copy(&obj_coords, &obj->coords);
 800381a:	0021      	movs	r1, r4
 800381c:	4668      	mov	r0, sp
 800381e:	3110      	adds	r1, #16
        lv_coord_t ext_size = obj->ext_draw_pad;
 8003820:	2332      	movs	r3, #50	; 0x32
 8003822:	5ee6      	ldrsh	r6, [r4, r3]
        lv_area_copy(&obj_coords, &obj->coords);
 8003824:	f7ff ff04 	bl	8003630 <lv_area_copy>
        obj_coords.x1 -= ext_size;
 8003828:	466a      	mov	r2, sp
 800382a:	4669      	mov	r1, sp
 800382c:	8812      	ldrh	r2, [r2, #0]
 800382e:	b2b3      	uxth	r3, r6
 8003830:	1ad2      	subs	r2, r2, r3
 8003832:	800a      	strh	r2, [r1, #0]
        obj_coords.y1 -= ext_size;
 8003834:	884a      	ldrh	r2, [r1, #2]
        is_common = _lv_area_intersect(area, area, &obj_coords);
 8003836:	0028      	movs	r0, r5
        obj_coords.y1 -= ext_size;
 8003838:	1ad2      	subs	r2, r2, r3
 800383a:	804a      	strh	r2, [r1, #2]
        obj_coords.x2 += ext_size;
 800383c:	888a      	ldrh	r2, [r1, #4]
 800383e:	189a      	adds	r2, r3, r2
 8003840:	808a      	strh	r2, [r1, #4]
        obj_coords.y2 += ext_size;
 8003842:	88ca      	ldrh	r2, [r1, #6]
 8003844:	189b      	adds	r3, r3, r2
 8003846:	80cb      	strh	r3, [r1, #6]
 8003848:	466a      	mov	r2, sp
        is_common = _lv_area_intersect(area, area, &obj_coords);
 800384a:	0029      	movs	r1, r5
 800384c:	f007 fefd 	bl	800b64a <_lv_area_intersect>
 8003850:	1e06      	subs	r6, r0, #0
        if(is_common == false) return false;  /*The area is not on the object*/
 8003852:	d115      	bne.n	8003880 <lv_obj_area_is_visible+0x90>
 8003854:	2600      	movs	r6, #0
 8003856:	e011      	b.n	800387c <lv_obj_area_is_visible+0x8c>
    } while(par != NULL);
 8003858:	001e      	movs	r6, r3
 800385a:	e7d3      	b.n	8003804 <lv_obj_area_is_visible+0x14>
       obj_scr == lv_disp_get_scr_prev(disp) ||
 800385c:	0038      	movs	r0, r7
 800385e:	f7ff fd0f 	bl	8003280 <lv_disp_get_scr_prev>
    if(obj_scr == lv_disp_get_scr_act(disp) ||
 8003862:	42b0      	cmp	r0, r6
 8003864:	d0d9      	beq.n	800381a <lv_obj_area_is_visible+0x2a>
       obj_scr == lv_disp_get_layer_top(disp) ||
 8003866:	0038      	movs	r0, r7
 8003868:	f7ff fd14 	bl	8003294 <lv_disp_get_layer_top>
       obj_scr == lv_disp_get_scr_prev(disp) ||
 800386c:	42b0      	cmp	r0, r6
 800386e:	d0d4      	beq.n	800381a <lv_obj_area_is_visible+0x2a>
       obj_scr == lv_disp_get_layer_sys(disp)) {
 8003870:	0038      	movs	r0, r7
 8003872:	f7ff fd19 	bl	80032a8 <lv_disp_get_layer_sys>
       obj_scr == lv_disp_get_layer_top(disp) ||
 8003876:	42b0      	cmp	r0, r6
 8003878:	d0cf      	beq.n	800381a <lv_obj_area_is_visible+0x2a>
    return true;
 800387a:	2601      	movs	r6, #1
}
 800387c:	0030      	movs	r0, r6
 800387e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    return obj->hidden == 0 ? false : true;
 8003880:	2710      	movs	r7, #16
    return obj->parent;
 8003882:	6824      	ldr	r4, [r4, #0]
        while(par != NULL) {
 8003884:	2c00      	cmp	r4, #0
 8003886:	d0f9      	beq.n	800387c <lv_obj_area_is_visible+0x8c>
            is_common = _lv_area_intersect(area, area, &par->coords);
 8003888:	0022      	movs	r2, r4
 800388a:	0029      	movs	r1, r5
 800388c:	3210      	adds	r2, #16
 800388e:	0028      	movs	r0, r5
 8003890:	f007 fedb 	bl	800b64a <_lv_area_intersect>
            if(is_common == false) return false;       /*If no common parts with parent break;*/
 8003894:	2800      	cmp	r0, #0
 8003896:	d0dd      	beq.n	8003854 <lv_obj_area_is_visible+0x64>
    return obj->hidden == 0 ? false : true;
 8003898:	0023      	movs	r3, r4
 800389a:	3334      	adds	r3, #52	; 0x34
 800389c:	781b      	ldrb	r3, [r3, #0]
            if(lv_obj_get_hidden(par)) return false; /*If the parent is hidden then the child is hidden and won't be drawn*/
 800389e:	423b      	tst	r3, r7
 80038a0:	d1d8      	bne.n	8003854 <lv_obj_area_is_visible+0x64>
    return obj->parent;
 80038a2:	6824      	ldr	r4, [r4, #0]
 80038a4:	e7ee      	b.n	8003884 <lv_obj_area_is_visible+0x94>

080038a6 <lv_obj_invalidate_area>:
{
 80038a6:	b513      	push	{r0, r1, r4, lr}
 80038a8:	0004      	movs	r4, r0
    lv_area_copy(&area_tmp, area);
 80038aa:	4668      	mov	r0, sp
 80038ac:	f7ff fec0 	bl	8003630 <lv_area_copy>
    bool visible = lv_obj_area_is_visible(obj, &area_tmp);
 80038b0:	4669      	mov	r1, sp
 80038b2:	0020      	movs	r0, r4
 80038b4:	f7ff ff9c 	bl	80037f0 <lv_obj_area_is_visible>
    if(visible) _lv_inv_area(lv_obj_get_disp(obj), &area_tmp);
 80038b8:	2800      	cmp	r0, #0
 80038ba:	d005      	beq.n	80038c8 <lv_obj_invalidate_area+0x22>
 80038bc:	0020      	movs	r0, r4
 80038be:	f7ff ff6f 	bl	80037a0 <lv_obj_get_disp>
 80038c2:	4669      	mov	r1, sp
 80038c4:	f002 fa0f 	bl	8005ce6 <_lv_inv_area>
}
 80038c8:	bd13      	pop	{r0, r1, r4, pc}

080038ca <lv_obj_invalidate>:
{
 80038ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
    lv_area_copy(&obj_coords, &obj->coords);
 80038cc:	0001      	movs	r1, r0
{
 80038ce:	0005      	movs	r5, r0
    lv_coord_t ext_size = obj->ext_draw_pad;
 80038d0:	2332      	movs	r3, #50	; 0x32
 80038d2:	5ec4      	ldrsh	r4, [r0, r3]
    lv_area_copy(&obj_coords, &obj->coords);
 80038d4:	3110      	adds	r1, #16
 80038d6:	4668      	mov	r0, sp
 80038d8:	f7ff feaa 	bl	8003630 <lv_area_copy>
    obj_coords.x1 -= ext_size;
 80038dc:	466a      	mov	r2, sp
 80038de:	4669      	mov	r1, sp
 80038e0:	8812      	ldrh	r2, [r2, #0]
 80038e2:	b2a3      	uxth	r3, r4
 80038e4:	1ad2      	subs	r2, r2, r3
 80038e6:	800a      	strh	r2, [r1, #0]
    obj_coords.y1 -= ext_size;
 80038e8:	884a      	ldrh	r2, [r1, #2]
    lv_obj_invalidate_area(obj, &obj_coords);
 80038ea:	0028      	movs	r0, r5
    obj_coords.y1 -= ext_size;
 80038ec:	1ad2      	subs	r2, r2, r3
 80038ee:	804a      	strh	r2, [r1, #2]
    obj_coords.x2 += ext_size;
 80038f0:	888a      	ldrh	r2, [r1, #4]
 80038f2:	189a      	adds	r2, r3, r2
 80038f4:	808a      	strh	r2, [r1, #4]
    obj_coords.y2 += ext_size;
 80038f6:	88ca      	ldrh	r2, [r1, #6]
 80038f8:	189b      	adds	r3, r3, r2
 80038fa:	80cb      	strh	r3, [r1, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
 80038fc:	f7ff ffd3 	bl	80038a6 <lv_obj_invalidate_area>
}
 8003900:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

08003902 <lv_obj_move_foreground>:
{
 8003902:	b570      	push	{r4, r5, r6, lr}
    return obj->parent;
 8003904:	6804      	ldr	r4, [r0, #0]
{
 8003906:	0005      	movs	r5, r0
    if(_lv_ll_get_head(&parent->child_ll) == obj) return;
 8003908:	1d26      	adds	r6, r4, #4
 800390a:	0030      	movs	r0, r6
 800390c:	f008 f983 	bl	800bc16 <_lv_ll_get_head>
 8003910:	42a8      	cmp	r0, r5
 8003912:	d010      	beq.n	8003936 <lv_obj_move_foreground+0x34>
    lv_obj_invalidate(parent);
 8003914:	0020      	movs	r0, r4
 8003916:	f7ff ffd8 	bl	80038ca <lv_obj_invalidate>
    _lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
 800391a:	2301      	movs	r3, #1
 800391c:	002a      	movs	r2, r5
 800391e:	0031      	movs	r1, r6
 8003920:	0030      	movs	r0, r6
 8003922:	f008 f9f3 	bl	800bd0c <_lv_ll_chg_list>
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 8003926:	002a      	movs	r2, r5
 8003928:	2101      	movs	r1, #1
 800392a:	0020      	movs	r0, r4
 800392c:	69e3      	ldr	r3, [r4, #28]
 800392e:	4798      	blx	r3
    lv_obj_invalidate(parent);
 8003930:	0020      	movs	r0, r4
 8003932:	f7ff ffca 	bl	80038ca <lv_obj_invalidate>
}
 8003936:	bd70      	pop	{r4, r5, r6, pc}

08003938 <lv_obj_set_pos>:
{
 8003938:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_obj_t * par = obj->parent;
 800393a:	6807      	ldr	r7, [r0, #0]
{
 800393c:	b085      	sub	sp, #20
 800393e:	0004      	movs	r4, r0
    if(par) {
 8003940:	2f00      	cmp	r7, #0
 8003942:	d005      	beq.n	8003950 <lv_obj_set_pos+0x18>
        x = x + par->coords.x1;
 8003944:	8a3d      	ldrh	r5, [r7, #16]
        y = y + par->coords.y1;
 8003946:	8a7e      	ldrh	r6, [r7, #18]
        x = x + par->coords.x1;
 8003948:	1869      	adds	r1, r5, r1
        y = y + par->coords.y1;
 800394a:	18b2      	adds	r2, r6, r2
        x = x + par->coords.x1;
 800394c:	b209      	sxth	r1, r1
        y = y + par->coords.y1;
 800394e:	b212      	sxth	r2, r2
    diff.x = x - obj->coords.x1;
 8003950:	8a25      	ldrh	r5, [r4, #16]
    diff.y = y - obj->coords.y1;
 8003952:	8a66      	ldrh	r6, [r4, #18]
    diff.x = x - obj->coords.x1;
 8003954:	1b4d      	subs	r5, r1, r5
 8003956:	b2ad      	uxth	r5, r5
    diff.y = y - obj->coords.y1;
 8003958:	1b96      	subs	r6, r2, r6
    diff.x = x - obj->coords.x1;
 800395a:	b22b      	sxth	r3, r5
    diff.y = y - obj->coords.y1;
 800395c:	b2b6      	uxth	r6, r6
    diff.x = x - obj->coords.x1;
 800395e:	9300      	str	r3, [sp, #0]
    diff.y = y - obj->coords.y1;
 8003960:	b233      	sxth	r3, r6
 8003962:	9301      	str	r3, [sp, #4]
    if(diff.x == 0 && diff.y == 0) return;
 8003964:	9b00      	ldr	r3, [sp, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d102      	bne.n	8003970 <lv_obj_set_pos+0x38>
 800396a:	9b01      	ldr	r3, [sp, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d027      	beq.n	80039c0 <lv_obj_set_pos+0x88>
    lv_obj_invalidate(obj);
 8003970:	0020      	movs	r0, r4
 8003972:	f7ff ffaa 	bl	80038ca <lv_obj_invalidate>
    lv_area_copy(cords_p, &obj->coords);
 8003976:	0021      	movs	r1, r4
 8003978:	a802      	add	r0, sp, #8
 800397a:	3110      	adds	r1, #16
 800397c:	f7ff fe58 	bl	8003630 <lv_area_copy>
    obj->coords.x1 += diff.x;
 8003980:	8a23      	ldrh	r3, [r4, #16]
    obj->coords.x2 += diff.x;
 8003982:	8aa1      	ldrh	r1, [r4, #20]
    obj->coords.x1 += diff.x;
 8003984:	18eb      	adds	r3, r5, r3
    obj->coords.y2 += diff.y;
 8003986:	8ae2      	ldrh	r2, [r4, #22]
    obj->coords.x1 += diff.x;
 8003988:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
 800398a:	8a63      	ldrh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
 800398c:	186d      	adds	r5, r5, r1
    obj->coords.y1 += diff.y;
 800398e:	18f3      	adds	r3, r6, r3
    obj->coords.y2 += diff.y;
 8003990:	18b6      	adds	r6, r6, r2
    obj->coords.y1 += diff.y;
 8003992:	8263      	strh	r3, [r4, #18]
    refresh_children_position(obj, diff.x, diff.y);
 8003994:	9a01      	ldr	r2, [sp, #4]
 8003996:	9900      	ldr	r1, [sp, #0]
 8003998:	0020      	movs	r0, r4
    obj->coords.x2 += diff.x;
 800399a:	82a5      	strh	r5, [r4, #20]
    obj->coords.y2 += diff.y;
 800399c:	82e6      	strh	r6, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
 800399e:	f7ff fe25 	bl	80035ec <refresh_children_position>
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
 80039a2:	aa02      	add	r2, sp, #8
 80039a4:	2102      	movs	r1, #2
 80039a6:	0020      	movs	r0, r4
 80039a8:	69e3      	ldr	r3, [r4, #28]
 80039aa:	4798      	blx	r3
    if(par) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 80039ac:	2f00      	cmp	r7, #0
 80039ae:	d004      	beq.n	80039ba <lv_obj_set_pos+0x82>
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	0022      	movs	r2, r4
 80039b4:	2101      	movs	r1, #1
 80039b6:	0038      	movs	r0, r7
 80039b8:	4798      	blx	r3
    lv_obj_invalidate(obj);
 80039ba:	0020      	movs	r0, r4
 80039bc:	f7ff ff85 	bl	80038ca <lv_obj_invalidate>
}
 80039c0:	b005      	add	sp, #20
 80039c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039c4 <lv_obj_align>:
{
 80039c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039c6:	b085      	sub	sp, #20
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	ab0a      	add	r3, sp, #40	; 0x28
 80039cc:	0017      	movs	r7, r2
 80039ce:	2200      	movs	r2, #0
 80039d0:	5e9b      	ldrsh	r3, [r3, r2]
 80039d2:	0004      	movs	r4, r0
 80039d4:	1e0e      	subs	r6, r1, #0
 80039d6:	9301      	str	r3, [sp, #4]
    if(base == NULL) base = lv_obj_get_parent(obj);
 80039d8:	d100      	bne.n	80039dc <lv_obj_align+0x18>
    return obj->parent;
 80039da:	6806      	ldr	r6, [r0, #0]
    _lv_area_align(&base->coords, &obj->coords, align, &new_pos);
 80039dc:	0021      	movs	r1, r4
 80039de:	0030      	movs	r0, r6
 80039e0:	ad03      	add	r5, sp, #12
 80039e2:	002b      	movs	r3, r5
 80039e4:	003a      	movs	r2, r7
 80039e6:	3110      	adds	r1, #16
 80039e8:	3010      	adds	r0, #16
 80039ea:	f007 ff89 	bl	800b900 <_lv_area_align>
    return obj->parent;
 80039ee:	6820      	ldr	r0, [r4, #0]
    new_pos.y += y_ofs;
 80039f0:	9901      	ldr	r1, [sp, #4]
    lv_coord_t par_abs_y  = par->coords.y1;
 80039f2:	2312      	movs	r3, #18
 80039f4:	5ec2      	ldrsh	r2, [r0, r3]
    new_pos.x += x_ofs;
 80039f6:	9b00      	ldr	r3, [sp, #0]
    lv_coord_t par_abs_y  = par->coords.y1;
 80039f8:	4694      	mov	ip, r2
    new_pos.y += y_ofs;
 80039fa:	886a      	ldrh	r2, [r5, #2]
    new_pos.x -= par_abs_x;
 80039fc:	8a00      	ldrh	r0, [r0, #16]
    new_pos.y += y_ofs;
 80039fe:	1852      	adds	r2, r2, r1
    new_pos.x += x_ofs;
 8003a00:	8829      	ldrh	r1, [r5, #0]
 8003a02:	18c9      	adds	r1, r1, r3
    new_pos.y -= par_abs_y;
 8003a04:	4663      	mov	r3, ip
    new_pos.x -= par_abs_x;
 8003a06:	1a09      	subs	r1, r1, r0
    new_pos.y -= par_abs_y;
 8003a08:	1ad2      	subs	r2, r2, r3
    new_pos.x -= par_abs_x;
 8003a0a:	b209      	sxth	r1, r1
    new_pos.y -= par_abs_y;
 8003a0c:	b212      	sxth	r2, r2
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
 8003a0e:	0020      	movs	r0, r4
    new_pos.x -= par_abs_x;
 8003a10:	8029      	strh	r1, [r5, #0]
    new_pos.y -= par_abs_y;
 8003a12:	806a      	strh	r2, [r5, #2]
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
 8003a14:	f7ff ff90 	bl	8003938 <lv_obj_set_pos>
    obj->realign.align       = align;
 8003a18:	0022      	movs	r2, r4
 8003a1a:	0023      	movs	r3, r4
 8003a1c:	3248      	adds	r2, #72	; 0x48
    obj->realign.xofs        = x_ofs;
 8003a1e:	9900      	ldr	r1, [sp, #0]
    obj->realign.align       = align;
 8003a20:	7017      	strb	r7, [r2, #0]
    obj->realign.xofs        = x_ofs;
 8003a22:	1da2      	adds	r2, r4, #6
 8003a24:	87d1      	strh	r1, [r2, #62]	; 0x3e
    obj->realign.yofs        = y_ofs;
 8003a26:	9a01      	ldr	r2, [sp, #4]
    obj->realign.align       = align;
 8003a28:	3308      	adds	r3, #8
    obj->realign.yofs        = y_ofs;
 8003a2a:	87da      	strh	r2, [r3, #62]	; 0x3e
    obj->realign.mid_align = 0;
 8003a2c:	2202      	movs	r2, #2
    obj->realign.base        = base;
 8003a2e:	6426      	str	r6, [r4, #64]	; 0x40
    obj->realign.mid_align = 0;
 8003a30:	3449      	adds	r4, #73	; 0x49
 8003a32:	7823      	ldrb	r3, [r4, #0]
 8003a34:	4393      	bics	r3, r2
 8003a36:	7023      	strb	r3, [r4, #0]
}
 8003a38:	b005      	add	sp, #20
 8003a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a3c <lv_obj_get_parent>:
    return obj->parent;
 8003a3c:	6800      	ldr	r0, [r0, #0]
}
 8003a3e:	4770      	bx	lr

08003a40 <lv_obj_get_child>:
{
 8003a40:	b510      	push	{r4, lr}
 8003a42:	3004      	adds	r0, #4
    if(child == NULL) {
 8003a44:	2900      	cmp	r1, #0
 8003a46:	d102      	bne.n	8003a4e <lv_obj_get_child+0xe>
        result = _lv_ll_get_head(&obj->child_ll);
 8003a48:	f008 f8e5 	bl	800bc16 <_lv_ll_get_head>
}
 8003a4c:	bd10      	pop	{r4, pc}
        result = _lv_ll_get_next(&obj->child_ll, child);
 8003a4e:	f008 f8ea 	bl	800bc26 <_lv_ll_get_next>
    return result;
 8003a52:	e7fb      	b.n	8003a4c <lv_obj_get_child+0xc>

08003a54 <refresh_children_style>:
{
 8003a54:	b570      	push	{r4, r5, r6, lr}
 8003a56:	0005      	movs	r5, r0
        result = _lv_ll_get_head(&obj->child_ll);
 8003a58:	3004      	adds	r0, #4
 8003a5a:	f008 f8dc 	bl	800bc16 <_lv_ll_get_head>
        child = lv_obj_get_child(obj, child);
 8003a5e:	1e04      	subs	r4, r0, #0
    while(child != NULL) {
 8003a60:	d100      	bne.n	8003a64 <refresh_children_style+0x10>
}
 8003a62:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_invalidate(child);
 8003a64:	0020      	movs	r0, r4
 8003a66:	f7ff ff30 	bl	80038ca <lv_obj_invalidate>
        child->signal_cb(child, LV_SIGNAL_STYLE_CHG, NULL);
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2104      	movs	r1, #4
 8003a6e:	69e3      	ldr	r3, [r4, #28]
 8003a70:	0020      	movs	r0, r4
 8003a72:	4798      	blx	r3
        lv_obj_invalidate(child);
 8003a74:	0020      	movs	r0, r4
 8003a76:	f7ff ff28 	bl	80038ca <lv_obj_invalidate>
        refresh_children_style(child); /*Check children too*/
 8003a7a:	0020      	movs	r0, r4
 8003a7c:	f7ff ffea 	bl	8003a54 <refresh_children_style>
        child = lv_obj_get_child(obj, child);
 8003a80:	0021      	movs	r1, r4
 8003a82:	0028      	movs	r0, r5
 8003a84:	f7ff ffdc 	bl	8003a40 <lv_obj_get_child>
 8003a88:	e7e9      	b.n	8003a5e <refresh_children_style+0xa>

08003a8a <lv_obj_get_coords>:
{
 8003a8a:	0003      	movs	r3, r0
 8003a8c:	b510      	push	{r4, lr}
    lv_area_copy(cords_p, &obj->coords);
 8003a8e:	3310      	adds	r3, #16
{
 8003a90:	0008      	movs	r0, r1
    lv_area_copy(cords_p, &obj->coords);
 8003a92:	0019      	movs	r1, r3
 8003a94:	f7ff fdcc 	bl	8003630 <lv_area_copy>
}
 8003a98:	bd10      	pop	{r4, pc}

08003a9a <lv_obj_get_x>:
    return obj->parent;
 8003a9a:	6803      	ldr	r3, [r0, #0]
 8003a9c:	2210      	movs	r2, #16
 8003a9e:	5e80      	ldrsh	r0, [r0, r2]
    if(parent) {
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <lv_obj_get_x+0x10>
        rel_x             = obj->coords.x1 - parent->coords.x1;
 8003aa4:	8a1b      	ldrh	r3, [r3, #16]
 8003aa6:	1ac0      	subs	r0, r0, r3
 8003aa8:	b200      	sxth	r0, r0
}
 8003aaa:	4770      	bx	lr

08003aac <lv_obj_set_y>:
{
 8003aac:	b570      	push	{r4, r5, r6, lr}
 8003aae:	000d      	movs	r5, r1
 8003ab0:	0004      	movs	r4, r0
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
 8003ab2:	f7ff fff2 	bl	8003a9a <lv_obj_get_x>
 8003ab6:	002a      	movs	r2, r5
 8003ab8:	0001      	movs	r1, r0
 8003aba:	0020      	movs	r0, r4
 8003abc:	f7ff ff3c 	bl	8003938 <lv_obj_set_pos>
}
 8003ac0:	bd70      	pop	{r4, r5, r6, pc}

08003ac2 <lv_obj_get_y>:
    return obj->parent;
 8003ac2:	6803      	ldr	r3, [r0, #0]
 8003ac4:	2212      	movs	r2, #18
 8003ac6:	5e80      	ldrsh	r0, [r0, r2]
    if(parent) {
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <lv_obj_get_y+0x10>
        rel_y             = obj->coords.y1 - parent->coords.y1;
 8003acc:	8a5b      	ldrh	r3, [r3, #18]
 8003ace:	1ac0      	subs	r0, r0, r3
 8003ad0:	b200      	sxth	r0, r0
}
 8003ad2:	4770      	bx	lr

08003ad4 <lv_obj_set_x>:
{
 8003ad4:	b570      	push	{r4, r5, r6, lr}
 8003ad6:	000d      	movs	r5, r1
 8003ad8:	0004      	movs	r4, r0
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
 8003ada:	f7ff fff2 	bl	8003ac2 <lv_obj_get_y>
 8003ade:	0029      	movs	r1, r5
 8003ae0:	0002      	movs	r2, r0
 8003ae2:	0020      	movs	r0, r4
 8003ae4:	f7ff ff28 	bl	8003938 <lv_obj_set_pos>
}
 8003ae8:	bd70      	pop	{r4, r5, r6, pc}

08003aea <obj_align_mid_core>:
{
 8003aea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aec:	b087      	sub	sp, #28
 8003aee:	9303      	str	r3, [sp, #12]
 8003af0:	ab0c      	add	r3, sp, #48	; 0x30
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	9201      	str	r2, [sp, #4]
 8003af6:	9302      	str	r3, [sp, #8]
 8003af8:	ab0d      	add	r3, sp, #52	; 0x34
 8003afa:	2200      	movs	r2, #0
 8003afc:	5e9b      	ldrsh	r3, [r3, r2]
 8003afe:	0006      	movs	r6, r0
 8003b00:	9304      	str	r3, [sp, #16]
 8003b02:	ab0e      	add	r3, sp, #56	; 0x38
 8003b04:	2200      	movs	r2, #0
 8003b06:	5e9b      	ldrsh	r3, [r3, r2]
 8003b08:	000d      	movs	r5, r1
 8003b0a:	9305      	str	r3, [sp, #20]
    lv_coord_t new_x = lv_obj_get_x(obj);
 8003b0c:	f7ff ffc5 	bl	8003a9a <lv_obj_get_x>
 8003b10:	0004      	movs	r4, r0
    lv_coord_t new_y = lv_obj_get_y(obj);
 8003b12:	0030      	movs	r0, r6
 8003b14:	f7ff ffd5 	bl	8003ac2 <lv_obj_get_y>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8003b18:	8ab3      	ldrh	r3, [r6, #20]
 8003b1a:	8a32      	ldrh	r2, [r6, #16]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	1a9b      	subs	r3, r3, r2
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 8003b20:	b21b      	sxth	r3, r3
 8003b22:	0fd9      	lsrs	r1, r3, #31
 8003b24:	18cb      	adds	r3, r1, r3
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8003b26:	8af1      	ldrh	r1, [r6, #22]
 8003b28:	8a72      	ldrh	r2, [r6, #18]
 8003b2a:	3101      	adds	r1, #1
 8003b2c:	1a89      	subs	r1, r1, r2
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 8003b2e:	b209      	sxth	r1, r1
 8003b30:	0fca      	lsrs	r2, r1, #31
 8003b32:	1851      	adds	r1, r2, r1
 8003b34:	8a6a      	ldrh	r2, [r5, #18]
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 8003b36:	105b      	asrs	r3, r3, #1
 8003b38:	9200      	str	r2, [sp, #0]
    switch(align) {
 8003b3a:	9a01      	ldr	r2, [sp, #4]
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 8003b3c:	1049      	asrs	r1, r1, #1
 8003b3e:	8a2f      	ldrh	r7, [r5, #16]
    switch(align) {
 8003b40:	2a14      	cmp	r2, #20
 8003b42:	d82c      	bhi.n	8003b9e <obj_align_mid_core+0xb4>
 8003b44:	0010      	movs	r0, r2
 8003b46:	f7fc faf7 	bl	8000138 <__gnu_thumb1_case_uqi>
 8003b4a:	260b      	.short	0x260b
 8003b4c:	1d505714 	.word	0x1d505714
 8003b50:	265b435f 	.word	0x265b435f
 8003b54:	1d505714 	.word	0x1d505714
 8003b58:	5043265f 	.word	0x5043265f
 8003b5c:	5b57      	.short	0x5b57
 8003b5e:	5f          	.byte	0x5f
 8003b5f:	00          	.byte	0x00
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8003b60:	8aac      	ldrh	r4, [r5, #20]
 8003b62:	3401      	adds	r4, #1
 8003b64:	1be4      	subs	r4, r4, r7
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8003b66:	b224      	sxth	r4, r4
 8003b68:	0fe0      	lsrs	r0, r4, #31
 8003b6a:	1904      	adds	r4, r0, r4
 8003b6c:	1064      	asrs	r4, r4, #1
            new_x = lv_obj_get_width(base) - obj_w_half;
 8003b6e:	1ae4      	subs	r4, r4, r3
 8003b70:	e02f      	b.n	8003bd2 <obj_align_mid_core+0xe8>
 8003b72:	8aac      	ldrh	r4, [r5, #20]
 8003b74:	3401      	adds	r4, #1
 8003b76:	1be4      	subs	r4, r4, r7
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8003b78:	b224      	sxth	r4, r4
 8003b7a:	0fe0      	lsrs	r0, r4, #31
 8003b7c:	1904      	adds	r4, r0, r4
 8003b7e:	1064      	asrs	r4, r4, #1
            new_x = lv_obj_get_width(base) - obj_w_half;
 8003b80:	1ae4      	subs	r4, r4, r3
 8003b82:	e009      	b.n	8003b98 <obj_align_mid_core+0xae>
 8003b84:	8aac      	ldrh	r4, [r5, #20]
 8003b86:	3401      	adds	r4, #1
 8003b88:	1be4      	subs	r4, r4, r7
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8003b8a:	b224      	sxth	r4, r4
 8003b8c:	0fe0      	lsrs	r0, r4, #31
 8003b8e:	1904      	adds	r4, r0, r4
 8003b90:	1064      	asrs	r4, r4, #1
            new_x = lv_obj_get_width(base) - obj_w_half;
 8003b92:	1ae4      	subs	r4, r4, r3
 8003b94:	e02a      	b.n	8003bec <obj_align_mid_core+0x102>
            new_x = -obj_w_half;
 8003b96:	425c      	negs	r4, r3
            new_y = -obj_h_half;
 8003b98:	4249      	negs	r1, r1
            new_x = lv_obj_get_width(base) - obj_w_half;
 8003b9a:	b224      	sxth	r4, r4
            new_y = -obj_h_half;
 8003b9c:	b208      	sxth	r0, r1
    new_y -= par_abs_y;
 8003b9e:	9900      	ldr	r1, [sp, #0]
    return obj->parent;
 8003ba0:	6833      	ldr	r3, [r6, #0]
    new_y -= par_abs_y;
 8003ba2:	9a05      	ldr	r2, [sp, #20]
 8003ba4:	188a      	adds	r2, r1, r2
 8003ba6:	8a59      	ldrh	r1, [r3, #18]
 8003ba8:	1a52      	subs	r2, r2, r1
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
 8003baa:	9903      	ldr	r1, [sp, #12]
    new_y -= par_abs_y;
 8003bac:	1812      	adds	r2, r2, r0
 8003bae:	b212      	sxth	r2, r2
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
 8003bb0:	2900      	cmp	r1, #0
 8003bb2:	d030      	beq.n	8003c16 <obj_align_mid_core+0x12c>
    new_x -= par_abs_x;
 8003bb4:	9904      	ldr	r1, [sp, #16]
 8003bb6:	8a1b      	ldrh	r3, [r3, #16]
 8003bb8:	1879      	adds	r1, r7, r1
 8003bba:	1ac9      	subs	r1, r1, r3
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
 8003bbc:	9b02      	ldr	r3, [sp, #8]
    new_x -= par_abs_x;
 8003bbe:	1909      	adds	r1, r1, r4
 8003bc0:	b209      	sxth	r1, r1
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
 8003bc2:	0030      	movs	r0, r6
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d023      	beq.n	8003c10 <obj_align_mid_core+0x126>
 8003bc8:	f7ff feb6 	bl	8003938 <lv_obj_set_pos>
}
 8003bcc:	b007      	add	sp, #28
 8003bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
            new_x = -obj_w_half;
 8003bd0:	425c      	negs	r4, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8003bd2:	8ae8      	ldrh	r0, [r5, #22]
 8003bd4:	9b00      	ldr	r3, [sp, #0]
 8003bd6:	3001      	adds	r0, #1
 8003bd8:	1ac0      	subs	r0, r0, r3
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8003bda:	b200      	sxth	r0, r0
 8003bdc:	0fc3      	lsrs	r3, r0, #31
 8003bde:	1818      	adds	r0, r3, r0
            new_x = lv_obj_get_width(base) - obj_w_half;
 8003be0:	b224      	sxth	r4, r4
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8003be2:	1040      	asrs	r0, r0, #1
            new_y = lv_obj_get_height(base) - obj_h_half;
 8003be4:	1a40      	subs	r0, r0, r1
 8003be6:	b200      	sxth	r0, r0
            break;
 8003be8:	e7d9      	b.n	8003b9e <obj_align_mid_core+0xb4>
            new_x = -obj_w_half;
 8003bea:	425c      	negs	r4, r3
 8003bec:	8ae8      	ldrh	r0, [r5, #22]
 8003bee:	9b00      	ldr	r3, [sp, #0]
 8003bf0:	3001      	adds	r0, #1
            new_x = lv_obj_get_width(base) - obj_w_half;
 8003bf2:	b224      	sxth	r4, r4
 8003bf4:	1ac0      	subs	r0, r0, r3
 8003bf6:	e7f5      	b.n	8003be4 <obj_align_mid_core+0xfa>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8003bf8:	8aac      	ldrh	r4, [r5, #20]
 8003bfa:	3401      	adds	r4, #1
 8003bfc:	1be4      	subs	r4, r4, r7
 8003bfe:	e7bf      	b.n	8003b80 <obj_align_mid_core+0x96>
 8003c00:	8aac      	ldrh	r4, [r5, #20]
 8003c02:	3401      	adds	r4, #1
 8003c04:	1be4      	subs	r4, r4, r7
 8003c06:	e7b2      	b.n	8003b6e <obj_align_mid_core+0x84>
 8003c08:	8aac      	ldrh	r4, [r5, #20]
 8003c0a:	3401      	adds	r4, #1
 8003c0c:	1be4      	subs	r4, r4, r7
 8003c0e:	e7c0      	b.n	8003b92 <obj_align_mid_core+0xa8>
    else if(x_set) lv_obj_set_x(obj, new_x);
 8003c10:	f7ff ff60 	bl	8003ad4 <lv_obj_set_x>
 8003c14:	e7da      	b.n	8003bcc <obj_align_mid_core+0xe2>
    else if(y_set) lv_obj_set_y(obj, new_y);
 8003c16:	9b02      	ldr	r3, [sp, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0d7      	beq.n	8003bcc <obj_align_mid_core+0xe2>
 8003c1c:	0011      	movs	r1, r2
 8003c1e:	0030      	movs	r0, r6
 8003c20:	f7ff ff44 	bl	8003aac <lv_obj_set_y>
}
 8003c24:	e7d2      	b.n	8003bcc <obj_align_mid_core+0xe2>

08003c26 <lv_obj_align_mid>:
{
 8003c26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c28:	b087      	sub	sp, #28
 8003c2a:	001e      	movs	r6, r3
 8003c2c:	ab0c      	add	r3, sp, #48	; 0x30
 8003c2e:	0017      	movs	r7, r2
 8003c30:	2200      	movs	r2, #0
 8003c32:	5e9b      	ldrsh	r3, [r3, r2]
 8003c34:	0004      	movs	r4, r0
 8003c36:	1e0d      	subs	r5, r1, #0
 8003c38:	9305      	str	r3, [sp, #20]
    if(base == NULL) {
 8003c3a:	d100      	bne.n	8003c3e <lv_obj_align_mid+0x18>
    return obj->parent;
 8003c3c:	6805      	ldr	r5, [r0, #0]
    obj_align_mid_core(obj, base, align, true, true, x_ofs, y_ofs);
 8003c3e:	9b05      	ldr	r3, [sp, #20]
 8003c40:	003a      	movs	r2, r7
 8003c42:	9302      	str	r3, [sp, #8]
 8003c44:	2301      	movs	r3, #1
 8003c46:	0020      	movs	r0, r4
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	9601      	str	r6, [sp, #4]
 8003c4c:	0029      	movs	r1, r5
 8003c4e:	f7ff ff4c 	bl	8003aea <obj_align_mid_core>
    obj->realign.align       = align;
 8003c52:	0022      	movs	r2, r4
 8003c54:	0023      	movs	r3, r4
 8003c56:	3248      	adds	r2, #72	; 0x48
 8003c58:	7017      	strb	r7, [r2, #0]
    obj->realign.xofs        = x_ofs;
 8003c5a:	1da2      	adds	r2, r4, #6
 8003c5c:	87d6      	strh	r6, [r2, #62]	; 0x3e
    obj->realign.yofs        = y_ofs;
 8003c5e:	9a05      	ldr	r2, [sp, #20]
    obj->realign.align       = align;
 8003c60:	3308      	adds	r3, #8
    obj->realign.yofs        = y_ofs;
 8003c62:	87da      	strh	r2, [r3, #62]	; 0x3e
    obj->realign.mid_align = 1;
 8003c64:	2302      	movs	r3, #2
    obj->realign.base        = base;
 8003c66:	6425      	str	r5, [r4, #64]	; 0x40
    obj->realign.mid_align = 1;
 8003c68:	3449      	adds	r4, #73	; 0x49
 8003c6a:	7822      	ldrb	r2, [r4, #0]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	7023      	strb	r3, [r4, #0]
}
 8003c70:	b007      	add	sp, #28
 8003c72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c74 <lv_obj_realign>:
{
 8003c74:	0003      	movs	r3, r0
 8003c76:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c78:	0004      	movs	r4, r0
 8003c7a:	3348      	adds	r3, #72	; 0x48
 8003c7c:	781a      	ldrb	r2, [r3, #0]
 8003c7e:	3408      	adds	r4, #8
 8003c80:	1d83      	adds	r3, r0, #6
 8003c82:	253e      	movs	r5, #62	; 0x3e
 8003c84:	5f5b      	ldrsh	r3, [r3, r5]
 8003c86:	253e      	movs	r5, #62	; 0x3e
 8003c88:	5f64      	ldrsh	r4, [r4, r5]
    if(obj->realign.mid_align)
 8003c8a:	0005      	movs	r5, r0
 8003c8c:	3549      	adds	r5, #73	; 0x49
 8003c8e:	782d      	ldrb	r5, [r5, #0]
 8003c90:	6c01      	ldr	r1, [r0, #64]	; 0x40
        lv_obj_align_mid(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8003c92:	9400      	str	r4, [sp, #0]
    if(obj->realign.mid_align)
 8003c94:	07ad      	lsls	r5, r5, #30
 8003c96:	d502      	bpl.n	8003c9e <lv_obj_realign+0x2a>
        lv_obj_align_mid(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8003c98:	f7ff ffc5 	bl	8003c26 <lv_obj_align_mid>
}
 8003c9c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8003c9e:	f7ff fe91 	bl	80039c4 <lv_obj_align>
}
 8003ca2:	e7fb      	b.n	8003c9c <lv_obj_realign+0x28>

08003ca4 <lv_obj_create>:
{
 8003ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	9001      	str	r0, [sp, #4]
 8003caa:	000e      	movs	r6, r1
    if(parent == NULL) {
 8003cac:	2800      	cmp	r0, #0
 8003cae:	d000      	beq.n	8003cb2 <lv_obj_create+0xe>
 8003cb0:	e06b      	b.n	8003d8a <lv_obj_create+0xe6>
        lv_disp_t * disp = lv_disp_get_default();
 8003cb2:	f007 fb5f 	bl	800b374 <lv_disp_get_default>
        if(!disp) {
 8003cb6:	2800      	cmp	r0, #0
 8003cb8:	d103      	bne.n	8003cc2 <lv_obj_create+0x1e>
            return NULL;
 8003cba:	2400      	movs	r4, #0
}
 8003cbc:	0020      	movs	r0, r4
 8003cbe:	b007      	add	sp, #28
 8003cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        new_obj = _lv_ll_ins_head(&disp->scr_ll);
 8003cc2:	3030      	adds	r0, #48	; 0x30
 8003cc4:	f007 ff67 	bl	800bb96 <_lv_ll_ins_head>
 8003cc8:	1e04      	subs	r4, r0, #0
        if(new_obj == NULL) return NULL;
 8003cca:	d0f6      	beq.n	8003cba <lv_obj_create+0x16>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
 8003ccc:	214c      	movs	r1, #76	; 0x4c
 8003cce:	f008 fafd 	bl	800c2cc <_lv_memset_00>
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 8003cd2:	0022      	movs	r2, r4
 8003cd4:	2160      	movs	r1, #96	; 0x60
 8003cd6:	3234      	adds	r2, #52	; 0x34
 8003cd8:	7853      	ldrb	r3, [r2, #1]
 8003cda:	438b      	bics	r3, r1
 8003cdc:	7053      	strb	r3, [r2, #1]
        new_obj->signal_cb = lv_obj_signal;
 8003cde:	4bb9      	ldr	r3, [pc, #740]	; (8003fc4 <lv_obj_create+0x320>)
 8003ce0:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
 8003ce2:	4bb9      	ldr	r3, [pc, #740]	; (8003fc8 <lv_obj_create+0x324>)
 8003ce4:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
 8003ce6:	9b01      	ldr	r3, [sp, #4]
 8003ce8:	61a3      	str	r3, [r4, #24]
        new_obj->coords.x1    = 0;
 8003cea:	6123      	str	r3, [r4, #16]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
 8003cec:	0018      	movs	r0, r3
 8003cee:	f007 fb47 	bl	800b380 <lv_disp_get_hor_res>
 8003cf2:	3801      	subs	r0, #1
 8003cf4:	82a0      	strh	r0, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 8003cf6:	9801      	ldr	r0, [sp, #4]
 8003cf8:	f007 fb58 	bl	800b3ac <lv_disp_get_ver_res>
 8003cfc:	3801      	subs	r0, #1
 8003cfe:	82e0      	strh	r0, [r4, #22]
    _lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8003d00:	1d20      	adds	r0, r4, #4
 8003d02:	214c      	movs	r1, #76	; 0x4c
 8003d04:	f007 ff3f 	bl	800bb86 <_lv_ll_init>
    new_obj->realign.align        = LV_ALIGN_CENTER;
 8003d08:	0023      	movs	r3, r4
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	3308      	adds	r3, #8
 8003d0e:	9304      	str	r3, [sp, #16]
 8003d10:	3340      	adds	r3, #64	; 0x40
 8003d12:	701a      	strb	r2, [r3, #0]
 8003d14:	9305      	str	r3, [sp, #20]
    new_obj->realign.xofs         = 0;
 8003d16:	1da3      	adds	r3, r4, #6
 8003d18:	87da      	strh	r2, [r3, #62]	; 0x3e
    new_obj->realign.yofs         = 0;
 8003d1a:	9b04      	ldr	r3, [sp, #16]
    new_obj->realign.auto_realign = 0;
 8003d1c:	2701      	movs	r7, #1
    new_obj->realign.yofs         = 0;
 8003d1e:	87da      	strh	r2, [r3, #62]	; 0x3e
    new_obj->realign.auto_realign = 0;
 8003d20:	0023      	movs	r3, r4
    new_obj->realign.base         = NULL;
 8003d22:	6422      	str	r2, [r4, #64]	; 0x40
    new_obj->realign.auto_realign = 0;
 8003d24:	3349      	adds	r3, #73	; 0x49
 8003d26:	9302      	str	r3, [sp, #8]
    new_obj->drag_dir     = LV_DRAG_DIR_BOTH;
 8003d28:	0025      	movs	r5, r4
    new_obj->realign.auto_realign = 0;
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	9902      	ldr	r1, [sp, #8]
 8003d2e:	43bb      	bics	r3, r7
 8003d30:	700b      	strb	r3, [r1, #0]
    new_obj->drag_dir     = LV_DRAG_DIR_BOTH;
 8003d32:	231c      	movs	r3, #28
 8003d34:	3534      	adds	r5, #52	; 0x34
 8003d36:	7868      	ldrb	r0, [r5, #1]
    new_obj->gesture_parent = parent ? 1 : 0;
 8003d38:	9901      	ldr	r1, [sp, #4]
    new_obj->drag_dir     = LV_DRAG_DIR_BOTH;
 8003d3a:	4398      	bics	r0, r3
    new_obj->gesture_parent = parent ? 1 : 0;
 8003d3c:	1e4b      	subs	r3, r1, #1
 8003d3e:	4199      	sbcs	r1, r3
 8003d40:	230c      	movs	r3, #12
 8003d42:	4303      	orrs	r3, r0
 8003d44:	43bb      	bics	r3, r7
    new_obj->focus_parent  = 0;
 8003d46:	430b      	orrs	r3, r1
 8003d48:	2102      	movs	r1, #2
 8003d4a:	438b      	bics	r3, r1
    new_obj->ext_click_pad_hor = 0;
 8003d4c:	6322      	str	r2, [r4, #48]	; 0x30
    new_obj->focus_parent  = 0;
 8003d4e:	706b      	strb	r3, [r5, #1]
    lv_style_list_init(&new_obj->style_list);
 8003d50:	0023      	movs	r3, r4
 8003d52:	3328      	adds	r3, #40	; 0x28
    new_obj->ext_draw_pad = 0;
 8003d54:	702f      	strb	r7, [r5, #0]
    lv_style_list_init(&new_obj->style_list);
 8003d56:	0018      	movs	r0, r3
    new_obj->group_p = NULL;
 8003d58:	63a2      	str	r2, [r4, #56]	; 0x38
 8003d5a:	87a2      	strh	r2, [r4, #60]	; 0x3c
    new_obj->ext_attr = NULL;
 8003d5c:	6262      	str	r2, [r4, #36]	; 0x24
    lv_style_list_init(&new_obj->style_list);
 8003d5e:	9303      	str	r3, [sp, #12]
 8003d60:	f002 fae9 	bl	8006336 <lv_style_list_init>
    if(copy == NULL) {
 8003d64:	2e00      	cmp	r6, #0
 8003d66:	d162      	bne.n	8003e2e <lv_obj_create+0x18a>
        if(parent != NULL) lv_theme_apply(new_obj, LV_THEME_OBJ);
 8003d68:	9b01      	ldr	r3, [sp, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d05a      	beq.n	8003e24 <lv_obj_create+0x180>
 8003d6e:	2102      	movs	r1, #2
 8003d70:	0020      	movs	r0, r4
 8003d72:	f008 fef1 	bl	800cb58 <lv_theme_apply>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
 8003d76:	9b01      	ldr	r3, [sp, #4]
 8003d78:	0022      	movs	r2, r4
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	9801      	ldr	r0, [sp, #4]
 8003d80:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
 8003d82:	0020      	movs	r0, r4
 8003d84:	f7ff fda1 	bl	80038ca <lv_obj_invalidate>
 8003d88:	e798      	b.n	8003cbc <lv_obj_create+0x18>
        new_obj = _lv_ll_ins_head(&parent->child_ll);
 8003d8a:	9b01      	ldr	r3, [sp, #4]
 8003d8c:	1d18      	adds	r0, r3, #4
 8003d8e:	f007 ff02 	bl	800bb96 <_lv_ll_ins_head>
 8003d92:	1e04      	subs	r4, r0, #0
        if(new_obj == NULL) return NULL;
 8003d94:	d100      	bne.n	8003d98 <lv_obj_create+0xf4>
 8003d96:	e790      	b.n	8003cba <lv_obj_create+0x16>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
 8003d98:	214c      	movs	r1, #76	; 0x4c
 8003d9a:	f008 fa97 	bl	800c2cc <_lv_memset_00>
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 8003d9e:	0022      	movs	r2, r4
 8003da0:	2160      	movs	r1, #96	; 0x60
        new_obj->event_cb = NULL;
 8003da2:	2700      	movs	r7, #0
        new_obj->parent = parent;
 8003da4:	9b01      	ldr	r3, [sp, #4]
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 8003da6:	3234      	adds	r2, #52	; 0x34
        new_obj->parent = parent;
 8003da8:	6023      	str	r3, [r4, #0]
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 8003daa:	7853      	ldrb	r3, [r2, #1]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 8003dac:	0038      	movs	r0, r7
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 8003dae:	438b      	bics	r3, r1
 8003db0:	7053      	strb	r3, [r2, #1]
        new_obj->signal_cb = lv_obj_signal;
 8003db2:	4b84      	ldr	r3, [pc, #528]	; (8003fc4 <lv_obj_create+0x320>)
        new_obj->event_cb = NULL;
 8003db4:	61a7      	str	r7, [r4, #24]
        new_obj->signal_cb = lv_obj_signal;
 8003db6:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
 8003db8:	4b83      	ldr	r3, [pc, #524]	; (8003fc8 <lv_obj_create+0x324>)
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 8003dba:	2532      	movs	r5, #50	; 0x32
        new_obj->design_cb = lv_obj_design;
 8003dbc:	6223      	str	r3, [r4, #32]
        new_obj->coords.y1    = parent->coords.y1;
 8003dbe:	9b01      	ldr	r3, [sp, #4]
 8003dc0:	2212      	movs	r2, #18
 8003dc2:	5e9b      	ldrsh	r3, [r3, r2]
 8003dc4:	8263      	strh	r3, [r4, #18]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 8003dc6:	9b01      	ldr	r3, [sp, #4]
 8003dc8:	8a5b      	ldrh	r3, [r3, #18]
 8003dca:	9302      	str	r3, [sp, #8]
 8003dcc:	f007 fb04 	bl	800b3d8 <lv_disp_get_dpi>
 8003dd0:	4368      	muls	r0, r5
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	28ef      	cmp	r0, #239	; 0xef
 8003dd6:	dd08      	ble.n	8003dea <lv_obj_create+0x146>
 8003dd8:	0038      	movs	r0, r7
 8003dda:	f007 fafd 	bl	800b3d8 <lv_disp_get_dpi>
 8003dde:	4368      	muls	r0, r5
 8003de0:	21a0      	movs	r1, #160	; 0xa0
 8003de2:	3050      	adds	r0, #80	; 0x50
 8003de4:	f7fc fa50 	bl	8000288 <__divsi3>
 8003de8:	b283      	uxth	r3, r0
 8003dea:	9a02      	ldr	r2, [sp, #8]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 8003dec:	2000      	movs	r0, #0
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 8003dee:	18d3      	adds	r3, r2, r3
 8003df0:	82e3      	strh	r3, [r4, #22]
            new_obj->coords.x1    = parent->coords.x1;
 8003df2:	9b01      	ldr	r3, [sp, #4]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 8003df4:	2564      	movs	r5, #100	; 0x64
            new_obj->coords.x1    = parent->coords.x1;
 8003df6:	2210      	movs	r2, #16
 8003df8:	5e9b      	ldrsh	r3, [r3, r2]
 8003dfa:	8223      	strh	r3, [r4, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 8003dfc:	9b01      	ldr	r3, [sp, #4]
 8003dfe:	8a1f      	ldrh	r7, [r3, #16]
 8003e00:	f007 faea 	bl	800b3d8 <lv_disp_get_dpi>
 8003e04:	4368      	muls	r0, r5
 8003e06:	2301      	movs	r3, #1
 8003e08:	28ef      	cmp	r0, #239	; 0xef
 8003e0a:	dd08      	ble.n	8003e1e <lv_obj_create+0x17a>
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	f007 fae3 	bl	800b3d8 <lv_disp_get_dpi>
 8003e12:	4368      	muls	r0, r5
 8003e14:	21a0      	movs	r1, #160	; 0xa0
 8003e16:	3050      	adds	r0, #80	; 0x50
 8003e18:	f7fc fa36 	bl	8000288 <__divsi3>
 8003e1c:	b283      	uxth	r3, r0
 8003e1e:	18fb      	adds	r3, r7, r3
 8003e20:	82a3      	strh	r3, [r4, #20]
 8003e22:	e76d      	b.n	8003d00 <lv_obj_create+0x5c>
        else lv_theme_apply(new_obj, LV_THEME_SCR);
 8003e24:	0039      	movs	r1, r7
 8003e26:	0020      	movs	r0, r4
 8003e28:	f008 fe96 	bl	800cb58 <lv_theme_apply>
 8003e2c:	e746      	b.n	8003cbc <lv_obj_create+0x18>
        lv_style_list_copy(&new_obj->style_list, &copy->style_list);
 8003e2e:	0031      	movs	r1, r6
 8003e30:	9803      	ldr	r0, [sp, #12]
 8003e32:	3128      	adds	r1, #40	; 0x28
 8003e34:	f002 fcff 	bl	8006836 <lv_style_list_copy>
        lv_area_copy(&new_obj->coords, &copy->coords);
 8003e38:	0031      	movs	r1, r6
 8003e3a:	0020      	movs	r0, r4
 8003e3c:	3110      	adds	r1, #16
 8003e3e:	3010      	adds	r0, #16
 8003e40:	f7ff fbf6 	bl	8003630 <lv_area_copy>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 8003e44:	2232      	movs	r2, #50	; 0x32
 8003e46:	5eb3      	ldrsh	r3, [r6, r2]
        new_obj->base_dir = copy->base_dir;
 8003e48:	2160      	movs	r1, #96	; 0x60
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 8003e4a:	8663      	strh	r3, [r4, #50]	; 0x32
        new_obj->ext_click_pad_hor = copy->ext_click_pad_hor;
 8003e4c:	0033      	movs	r3, r6
 8003e4e:	3330      	adds	r3, #48	; 0x30
 8003e50:	781a      	ldrb	r2, [r3, #0]
 8003e52:	0023      	movs	r3, r4
 8003e54:	3330      	adds	r3, #48	; 0x30
 8003e56:	701a      	strb	r2, [r3, #0]
        new_obj->ext_click_pad_ver = copy->ext_click_pad_ver;
 8003e58:	0033      	movs	r3, r6
 8003e5a:	3331      	adds	r3, #49	; 0x31
 8003e5c:	781a      	ldrb	r2, [r3, #0]
 8003e5e:	0023      	movs	r3, r4
 8003e60:	3331      	adds	r3, #49	; 0x31
 8003e62:	701a      	strb	r2, [r3, #0]
        new_obj->base_dir = copy->base_dir;
 8003e64:	0032      	movs	r2, r6
 8003e66:	2060      	movs	r0, #96	; 0x60
 8003e68:	3235      	adds	r2, #53	; 0x35
 8003e6a:	7813      	ldrb	r3, [r2, #0]
 8003e6c:	9203      	str	r2, [sp, #12]
 8003e6e:	4019      	ands	r1, r3
 8003e70:	786b      	ldrb	r3, [r5, #1]
 8003e72:	4383      	bics	r3, r0
 8003e74:	430b      	orrs	r3, r1
 8003e76:	706b      	strb	r3, [r5, #1]
        new_obj->realign.align        = copy->realign.align;
 8003e78:	0033      	movs	r3, r6
 8003e7a:	3348      	adds	r3, #72	; 0x48
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	9a05      	ldr	r2, [sp, #20]
 8003e80:	7013      	strb	r3, [r2, #0]
        new_obj->realign.xofs         = copy->realign.xofs;
 8003e82:	1db3      	adds	r3, r6, #6
 8003e84:	223e      	movs	r2, #62	; 0x3e
 8003e86:	5e9b      	ldrsh	r3, [r3, r2]
 8003e88:	1da2      	adds	r2, r4, #6
 8003e8a:	87d3      	strh	r3, [r2, #62]	; 0x3e
        new_obj->realign.yofs         = copy->realign.yofs;
 8003e8c:	0033      	movs	r3, r6
 8003e8e:	3308      	adds	r3, #8
 8003e90:	223e      	movs	r2, #62	; 0x3e
 8003e92:	5e9b      	ldrsh	r3, [r3, r2]
 8003e94:	9a04      	ldr	r2, [sp, #16]
 8003e96:	87d3      	strh	r3, [r2, #62]	; 0x3e
        new_obj->realign.base         = copy->realign.base;
 8003e98:	6c33      	ldr	r3, [r6, #64]	; 0x40
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 8003e9a:	9a02      	ldr	r2, [sp, #8]
        new_obj->realign.base         = copy->realign.base;
 8003e9c:	6423      	str	r3, [r4, #64]	; 0x40
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 8003e9e:	0033      	movs	r3, r6
 8003ea0:	3349      	adds	r3, #73	; 0x49
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	07db      	lsls	r3, r3, #31
 8003ea6:	0fd9      	lsrs	r1, r3, #31
 8003ea8:	9b02      	ldr	r3, [sp, #8]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	43bb      	bics	r3, r7
 8003eae:	430b      	orrs	r3, r1
 8003eb0:	7013      	strb	r3, [r2, #0]
        new_obj->event_cb = copy->event_cb;
 8003eb2:	69b3      	ldr	r3, [r6, #24]
        new_obj->adv_hittest  = copy->adv_hittest;
 8003eb4:	227f      	movs	r2, #127	; 0x7f
        new_obj->event_cb = copy->event_cb;
 8003eb6:	61a3      	str	r3, [r4, #24]
        new_obj->adv_hittest  = copy->adv_hittest;
 8003eb8:	0033      	movs	r3, r6
 8003eba:	3334      	adds	r3, #52	; 0x34
 8003ebc:	7819      	ldrb	r1, [r3, #0]
 8003ebe:	09c9      	lsrs	r1, r1, #7
 8003ec0:	01c8      	lsls	r0, r1, #7
 8003ec2:	7829      	ldrb	r1, [r5, #0]
 8003ec4:	4011      	ands	r1, r2
 8003ec6:	4301      	orrs	r1, r0
 8003ec8:	7029      	strb	r1, [r5, #0]
        new_obj->click        = copy->click;
 8003eca:	7819      	ldrb	r1, [r3, #0]
        new_obj->drag         = copy->drag;
 8003ecc:	3a7d      	subs	r2, #125	; 0x7d
        new_obj->click        = copy->click;
 8003ece:	07c9      	lsls	r1, r1, #31
 8003ed0:	0fc8      	lsrs	r0, r1, #31
 8003ed2:	7829      	ldrb	r1, [r5, #0]
 8003ed4:	43b9      	bics	r1, r7
 8003ed6:	4301      	orrs	r1, r0
 8003ed8:	7029      	strb	r1, [r5, #0]
        new_obj->drag         = copy->drag;
 8003eda:	7819      	ldrb	r1, [r3, #0]
 8003edc:	7828      	ldrb	r0, [r5, #0]
 8003ede:	0849      	lsrs	r1, r1, #1
 8003ee0:	4039      	ands	r1, r7
 8003ee2:	4390      	bics	r0, r2
 8003ee4:	0049      	lsls	r1, r1, #1
        new_obj->drag_dir     = copy->drag_dir;
 8003ee6:	9a03      	ldr	r2, [sp, #12]
        new_obj->drag         = copy->drag;
 8003ee8:	4301      	orrs	r1, r0
        new_obj->drag_dir     = copy->drag_dir;
 8003eea:	201c      	movs	r0, #28
        new_obj->drag         = copy->drag;
 8003eec:	7029      	strb	r1, [r5, #0]
        new_obj->drag_dir     = copy->drag_dir;
 8003eee:	7811      	ldrb	r1, [r2, #0]
 8003ef0:	221c      	movs	r2, #28
 8003ef2:	4008      	ands	r0, r1
 8003ef4:	7869      	ldrb	r1, [r5, #1]
 8003ef6:	4391      	bics	r1, r2
 8003ef8:	4301      	orrs	r1, r0
 8003efa:	7069      	strb	r1, [r5, #1]
        new_obj->drag_throw   = copy->drag_throw;
 8003efc:	7819      	ldrb	r1, [r3, #0]
 8003efe:	7828      	ldrb	r0, [r5, #0]
 8003f00:	0889      	lsrs	r1, r1, #2
 8003f02:	4039      	ands	r1, r7
 8003f04:	3a18      	subs	r2, #24
 8003f06:	4390      	bics	r0, r2
 8003f08:	0089      	lsls	r1, r1, #2
 8003f0a:	4301      	orrs	r1, r0
 8003f0c:	7029      	strb	r1, [r5, #0]
        new_obj->drag_parent  = copy->drag_parent;
 8003f0e:	7819      	ldrb	r1, [r3, #0]
 8003f10:	7828      	ldrb	r0, [r5, #0]
 8003f12:	08c9      	lsrs	r1, r1, #3
 8003f14:	4039      	ands	r1, r7
 8003f16:	3204      	adds	r2, #4
 8003f18:	4390      	bics	r0, r2
 8003f1a:	00c9      	lsls	r1, r1, #3
 8003f1c:	4301      	orrs	r1, r0
 8003f1e:	7029      	strb	r1, [r5, #0]
        new_obj->hidden       = copy->hidden;
 8003f20:	7819      	ldrb	r1, [r3, #0]
 8003f22:	7828      	ldrb	r0, [r5, #0]
 8003f24:	0909      	lsrs	r1, r1, #4
 8003f26:	4039      	ands	r1, r7
 8003f28:	3208      	adds	r2, #8
 8003f2a:	4390      	bics	r0, r2
 8003f2c:	0109      	lsls	r1, r1, #4
 8003f2e:	4301      	orrs	r1, r0
 8003f30:	7029      	strb	r1, [r5, #0]
        new_obj->top          = copy->top;
 8003f32:	7819      	ldrb	r1, [r3, #0]
 8003f34:	7828      	ldrb	r0, [r5, #0]
 8003f36:	0949      	lsrs	r1, r1, #5
 8003f38:	4039      	ands	r1, r7
 8003f3a:	3210      	adds	r2, #16
 8003f3c:	4390      	bics	r0, r2
 8003f3e:	0149      	lsls	r1, r1, #5
 8003f40:	4301      	orrs	r1, r0
        new_obj->parent_event = copy->parent_event;
 8003f42:	2040      	movs	r0, #64	; 0x40
        new_obj->top          = copy->top;
 8003f44:	7029      	strb	r1, [r5, #0]
        new_obj->parent_event = copy->parent_event;
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	b2c9      	uxtb	r1, r1
 8003f4a:	099b      	lsrs	r3, r3, #6
 8003f4c:	403b      	ands	r3, r7
 8003f4e:	4381      	bics	r1, r0
 8003f50:	019b      	lsls	r3, r3, #6
 8003f52:	430b      	orrs	r3, r1
 8003f54:	702b      	strb	r3, [r5, #0]
        new_obj->protect      = copy->protect;
 8003f56:	0033      	movs	r3, r6
 8003f58:	333c      	adds	r3, #60	; 0x3c
 8003f5a:	7819      	ldrb	r1, [r3, #0]
 8003f5c:	0023      	movs	r3, r4
 8003f5e:	333c      	adds	r3, #60	; 0x3c
 8003f60:	7019      	strb	r1, [r3, #0]
        new_obj->gesture_parent = copy->gesture_parent;
 8003f62:	9b03      	ldr	r3, [sp, #12]
        new_obj->focus_parent = copy->focus_parent;
 8003f64:	3a1e      	subs	r2, #30
        new_obj->gesture_parent = copy->gesture_parent;
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	07db      	lsls	r3, r3, #31
 8003f6a:	0fd9      	lsrs	r1, r3, #31
 8003f6c:	786b      	ldrb	r3, [r5, #1]
 8003f6e:	43bb      	bics	r3, r7
 8003f70:	430b      	orrs	r3, r1
 8003f72:	706b      	strb	r3, [r5, #1]
        new_obj->focus_parent = copy->focus_parent;
 8003f74:	9b03      	ldr	r3, [sp, #12]
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	085b      	lsrs	r3, r3, #1
 8003f7a:	401f      	ands	r7, r3
 8003f7c:	786b      	ldrb	r3, [r5, #1]
 8003f7e:	007f      	lsls	r7, r7, #1
 8003f80:	4393      	bics	r3, r2
 8003f82:	431f      	orrs	r7, r3
 8003f84:	706f      	strb	r7, [r5, #1]
        if(copy->group_p != NULL) {
 8003f86:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	d002      	beq.n	8003f92 <lv_obj_create+0x2ee>
            lv_group_add_obj(copy->group_p, new_obj);
 8003f8c:	0021      	movs	r1, r4
 8003f8e:	f7ff fa5f 	bl	8003450 <lv_group_add_obj>
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
 8003f92:	6833      	ldr	r3, [r6, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d010      	beq.n	8003fba <lv_obj_create+0x316>
 8003f98:	9b01      	ldr	r3, [sp, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d100      	bne.n	8003fa0 <lv_obj_create+0x2fc>
 8003f9e:	e68d      	b.n	8003cbc <lv_obj_create+0x18>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 8003fa0:	0030      	movs	r0, r6
 8003fa2:	f7ff fd7a 	bl	8003a9a <lv_obj_get_x>
 8003fa6:	0005      	movs	r5, r0
 8003fa8:	0030      	movs	r0, r6
 8003faa:	f7ff fd8a 	bl	8003ac2 <lv_obj_get_y>
 8003fae:	0029      	movs	r1, r5
 8003fb0:	0002      	movs	r2, r0
 8003fb2:	0020      	movs	r0, r4
 8003fb4:	f7ff fcc0 	bl	8003938 <lv_obj_set_pos>
 8003fb8:	e6dd      	b.n	8003d76 <lv_obj_create+0xd2>
    if(parent != NULL) {
 8003fba:	9b01      	ldr	r3, [sp, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d000      	beq.n	8003fc2 <lv_obj_create+0x31e>
 8003fc0:	e6d9      	b.n	8003d76 <lv_obj_create+0xd2>
 8003fc2:	e67b      	b.n	8003cbc <lv_obj_create+0x18>
 8003fc4:	0800551d 	.word	0x0800551d
 8003fc8:	08004b01 	.word	0x08004b01

08003fcc <lv_obj_get_style_list>:
{
 8003fcc:	b513      	push	{r0, r1, r4, lr}
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 8003fce:	2900      	cmp	r1, #0
 8003fd0:	d101      	bne.n	8003fd6 <lv_obj_get_style_list+0xa>
 8003fd2:	3028      	adds	r0, #40	; 0x28
}
 8003fd4:	bd16      	pop	{r1, r2, r4, pc}
    info.part = part;
 8003fd6:	466b      	mov	r3, sp
    info.result = NULL;
 8003fd8:	2400      	movs	r4, #0
    info.part = part;
 8003fda:	7019      	strb	r1, [r3, #0]
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
 8003fdc:	466a      	mov	r2, sp
 8003fde:	2108      	movs	r1, #8
    info.result = NULL;
 8003fe0:	9401      	str	r4, [sp, #4]
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
 8003fe2:	f7ff fbcb 	bl	800377c <lv_signal_send>
 8003fe6:	0003      	movs	r3, r0
    if(res != LV_RES_OK) return NULL;
 8003fe8:	0020      	movs	r0, r4
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d1f2      	bne.n	8003fd4 <lv_obj_get_style_list+0x8>
    return info.result;
 8003fee:	9801      	ldr	r0, [sp, #4]
 8003ff0:	e7f0      	b.n	8003fd4 <lv_obj_get_style_list+0x8>

08003ff2 <lv_obj_clean_style_list>:
{
 8003ff2:	b510      	push	{r4, lr}
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
 8003ff4:	f7ff ffea 	bl	8003fcc <lv_obj_get_style_list>
    if(style_dsc == NULL) {
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	d001      	beq.n	8004000 <lv_obj_clean_style_list+0xe>
    _lv_style_list_reset(style_dsc);
 8003ffc:	f002 fbf1 	bl	80067e2 <_lv_style_list_reset>
}
 8004000:	bd10      	pop	{r4, pc}

08004002 <_lv_obj_disable_style_caching>:
{
 8004002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004004:	0006      	movs	r6, r0
 8004006:	000d      	movs	r5, r1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8004008:	2400      	movs	r4, #0
        list->ignore_cache = dis;
 800400a:	2701      	movs	r7, #1
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 800400c:	0021      	movs	r1, r4
 800400e:	0030      	movs	r0, r6
 8004010:	f7ff ffdc 	bl	8003fcc <lv_obj_get_style_list>
        if(list == NULL) break;
 8004014:	2800      	cmp	r0, #0
 8004016:	d114      	bne.n	8004042 <_lv_obj_disable_style_caching+0x40>
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8004018:	2440      	movs	r4, #64	; 0x40
        list->ignore_cache = dis;
 800401a:	2701      	movs	r7, #1
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 800401c:	0021      	movs	r1, r4
 800401e:	0030      	movs	r0, r6
 8004020:	f7ff ffd4 	bl	8003fcc <lv_obj_get_style_list>
        if(list == NULL) break;
 8004024:	2800      	cmp	r0, #0
 8004026:	d00b      	beq.n	8004040 <_lv_obj_disable_style_caching+0x3e>
        list->ignore_cache = dis;
 8004028:	002a      	movs	r2, r5
 800402a:	2108      	movs	r1, #8
 800402c:	7943      	ldrb	r3, [r0, #5]
 800402e:	403a      	ands	r2, r7
 8004030:	00d2      	lsls	r2, r2, #3
 8004032:	438b      	bics	r3, r1
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 8004034:	3401      	adds	r4, #1
        list->ignore_cache = dis;
 8004036:	4313      	orrs	r3, r2
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 8004038:	b2e4      	uxtb	r4, r4
        list->ignore_cache = dis;
 800403a:	7143      	strb	r3, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 800403c:	2cff      	cmp	r4, #255	; 0xff
 800403e:	d1ed      	bne.n	800401c <_lv_obj_disable_style_caching+0x1a>
}
 8004040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        list->ignore_cache = dis;
 8004042:	002a      	movs	r2, r5
 8004044:	2108      	movs	r1, #8
 8004046:	7943      	ldrb	r3, [r0, #5]
 8004048:	403a      	ands	r2, r7
 800404a:	00d2      	lsls	r2, r2, #3
 800404c:	438b      	bics	r3, r1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 800404e:	3401      	adds	r4, #1
        list->ignore_cache = dis;
 8004050:	4313      	orrs	r3, r2
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8004052:	b2e4      	uxtb	r4, r4
        list->ignore_cache = dis;
 8004054:	7143      	strb	r3, [r0, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8004056:	2c40      	cmp	r4, #64	; 0x40
 8004058:	d1d8      	bne.n	800400c <_lv_obj_disable_style_caching+0xa>
 800405a:	e7dd      	b.n	8004018 <_lv_obj_disable_style_caching+0x16>

0800405c <lv_obj_get_hidden>:
    return obj->hidden == 0 ? false : true;
 800405c:	3034      	adds	r0, #52	; 0x34
 800405e:	7800      	ldrb	r0, [r0, #0]
 8004060:	06c0      	lsls	r0, r0, #27
 8004062:	0fc0      	lsrs	r0, r0, #31
}
 8004064:	4770      	bx	lr

08004066 <lv_obj_get_state>:
{
 8004066:	b513      	push	{r0, r1, r4, lr}
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
 8004068:	293f      	cmp	r1, #63	; 0x3f
 800406a:	d802      	bhi.n	8004072 <lv_obj_get_state+0xc>
 800406c:	303d      	adds	r0, #61	; 0x3d
 800406e:	7800      	ldrb	r0, [r0, #0]
}
 8004070:	bd16      	pop	{r1, r2, r4, pc}
    info.result = LV_STATE_DEFAULT;
 8004072:	2300      	movs	r3, #0
    info.part = part;
 8004074:	ac01      	add	r4, sp, #4
 8004076:	7021      	strb	r1, [r4, #0]
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
 8004078:	0022      	movs	r2, r4
 800407a:	2109      	movs	r1, #9
    info.result = LV_STATE_DEFAULT;
 800407c:	7063      	strb	r3, [r4, #1]
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
 800407e:	f7ff fb7d 	bl	800377c <lv_signal_send>
    return info.result;
 8004082:	7860      	ldrb	r0, [r4, #1]
 8004084:	e7f4      	b.n	8004070 <lv_obj_get_state+0xa>
	...

08004088 <_lv_obj_get_style_color>:
{
 8004088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800408a:	0004      	movs	r4, r0
 800408c:	000d      	movs	r5, r1
 800408e:	0016      	movs	r6, r2
    while(parent) {
 8004090:	0017      	movs	r7, r2
{
 8004092:	b085      	sub	sp, #20
    attr = prop_ori >> 8;
 8004094:	0a13      	lsrs	r3, r2, #8
 8004096:	9300      	str	r3, [sp, #0]
    while(parent) {
 8004098:	2c00      	cmp	r4, #0
 800409a:	d108      	bne.n	80040ae <_lv_obj_get_style_color+0x26>
    switch(prop) {
 800409c:	4b14      	ldr	r3, [pc, #80]	; (80040f0 <_lv_obj_get_style_color+0x68>)
 800409e:	2000      	movs	r0, #0
 80040a0:	403b      	ands	r3, r7
 80040a2:	3b29      	subs	r3, #41	; 0x29
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d817      	bhi.n	80040d8 <_lv_obj_get_style_color+0x50>
            return LV_COLOR_WHITE;
 80040a8:	4b12      	ldr	r3, [pc, #72]	; (80040f4 <_lv_obj_get_style_color+0x6c>)
 80040aa:	8818      	ldrh	r0, [r3, #0]
 80040ac:	e014      	b.n	80040d8 <_lv_obj_get_style_color+0x50>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 80040ae:	0029      	movs	r1, r5
 80040b0:	0020      	movs	r0, r4
 80040b2:	f7ff ff8b 	bl	8003fcc <lv_obj_get_style_list>
        lv_state_t state = lv_obj_get_state(parent, part);
 80040b6:	0029      	movs	r1, r5
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 80040b8:	9001      	str	r0, [sp, #4]
        lv_state_t state = lv_obj_get_state(parent, part);
 80040ba:	0020      	movs	r0, r4
 80040bc:	f7ff ffd3 	bl	8004066 <lv_obj_get_state>
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 80040c0:	0200      	lsls	r0, r0, #8
 80040c2:	1830      	adds	r0, r6, r0
 80040c4:	b287      	uxth	r7, r0
        res = _lv_style_list_get_color(list, prop, &value_act);
 80040c6:	aa03      	add	r2, sp, #12
 80040c8:	0039      	movs	r1, r7
 80040ca:	9801      	ldr	r0, [sp, #4]
 80040cc:	f002 fc6d 	bl	80069aa <_lv_style_list_get_color>
        if(res == LV_RES_OK) return value_act;
 80040d0:	2801      	cmp	r0, #1
 80040d2:	d103      	bne.n	80040dc <_lv_obj_get_style_color+0x54>
 80040d4:	ab02      	add	r3, sp, #8
 80040d6:	8898      	ldrh	r0, [r3, #4]
}
 80040d8:	b005      	add	sp, #20
 80040da:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 80040dc:	466b      	mov	r3, sp
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	b25b      	sxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	dada      	bge.n	800409c <_lv_obj_get_style_color+0x14>
        if(part != LV_OBJ_PART_MAIN) {
 80040e6:	2d00      	cmp	r5, #0
 80040e8:	d100      	bne.n	80040ec <_lv_obj_get_style_color+0x64>
    return obj->parent;
 80040ea:	6824      	ldr	r4, [r4, #0]
 80040ec:	2500      	movs	r5, #0
 80040ee:	e7d3      	b.n	8004098 <_lv_obj_get_style_color+0x10>
 80040f0:	ffff80ff 	.word	0xffff80ff
 80040f4:	0800e080 	.word	0x0800e080

080040f8 <_lv_obj_get_style_int>:
{
 80040f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040fa:	0006      	movs	r6, r0
 80040fc:	000f      	movs	r7, r1
 80040fe:	b087      	sub	sp, #28
    attr = prop_ori >> 8;
 8004100:	0a13      	lsrs	r3, r2, #8
{
 8004102:	9202      	str	r2, [sp, #8]
    attr = prop_ori >> 8;
 8004104:	9303      	str	r3, [sp, #12]
    while(parent) {
 8004106:	9201      	str	r2, [sp, #4]
 8004108:	2e00      	cmp	r6, #0
 800410a:	d100      	bne.n	800410e <_lv_obj_get_style_int+0x16>
 800410c:	e07e      	b.n	800420c <_lv_obj_get_style_int+0x114>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 800410e:	0039      	movs	r1, r7
 8004110:	0030      	movs	r0, r6
 8004112:	f7ff ff5b 	bl	8003fcc <lv_obj_get_style_list>
        if(!list->ignore_cache && list->style_cnt > 0) {
 8004116:	2208      	movs	r2, #8
 8004118:	7943      	ldrb	r3, [r0, #5]
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 800411a:	0005      	movs	r5, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
 800411c:	4213      	tst	r3, r2
 800411e:	d11d      	bne.n	800415c <_lv_obj_get_style_int+0x64>
 8004120:	213f      	movs	r1, #63	; 0x3f
 8004122:	7902      	ldrb	r2, [r0, #4]
 8004124:	420a      	tst	r2, r1
 8004126:	d019      	beq.n	800415c <_lv_obj_get_style_int+0x64>
 8004128:	4c56      	ldr	r4, [pc, #344]	; (8004284 <_lv_obj_get_style_int+0x18c>)
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
 800412a:	075b      	lsls	r3, r3, #29
 800412c:	d405      	bmi.n	800413a <_lv_obj_get_style_int+0x42>
 800412e:	9a01      	ldr	r2, [sp, #4]
 8004130:	0039      	movs	r1, r7
 8004132:	4022      	ands	r2, r4
 8004134:	0030      	movs	r0, r6
 8004136:	f000 f8b7 	bl	80042a8 <update_style_cache>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 800413a:	9b01      	ldr	r3, [sp, #4]
 800413c:	401c      	ands	r4, r3
 800413e:	2c33      	cmp	r4, #51	; 0x33
 8004140:	d100      	bne.n	8004144 <_lv_obj_get_style_int+0x4c>
 8004142:	e073      	b.n	800422c <_lv_obj_get_style_int+0x134>
 8004144:	dc39      	bgt.n	80041ba <_lv_obj_get_style_int+0xc2>
 8004146:	2c13      	cmp	r4, #19
 8004148:	dc26      	bgt.n	8004198 <_lv_obj_get_style_int+0xa0>
 800414a:	2c10      	cmp	r4, #16
 800414c:	db00      	blt.n	8004150 <_lv_obj_get_style_int+0x58>
 800414e:	e07e      	b.n	800424e <_lv_obj_get_style_int+0x156>
 8004150:	2c02      	cmp	r4, #2
 8004152:	d054      	beq.n	80041fe <_lv_obj_get_style_int+0x106>
 8004154:	dc19      	bgt.n	800418a <_lv_obj_get_style_int+0x92>
 8004156:	2c01      	cmp	r4, #1
 8004158:	d100      	bne.n	800415c <_lv_obj_get_style_int+0x64>
 800415a:	e06e      	b.n	800423a <_lv_obj_get_style_int+0x142>
        lv_state_t state = lv_obj_get_state(parent, part);
 800415c:	0039      	movs	r1, r7
 800415e:	0030      	movs	r0, r6
 8004160:	f7ff ff81 	bl	8004066 <lv_obj_get_state>
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 8004164:	9b02      	ldr	r3, [sp, #8]
 8004166:	0200      	lsls	r0, r0, #8
 8004168:	1818      	adds	r0, r3, r0
 800416a:	b283      	uxth	r3, r0
 800416c:	9301      	str	r3, [sp, #4]
        res = _lv_style_list_get_int(list, prop, &value_act);
 800416e:	ab04      	add	r3, sp, #16
 8004170:	1d9c      	adds	r4, r3, #6
 8004172:	0022      	movs	r2, r4
 8004174:	9901      	ldr	r1, [sp, #4]
 8004176:	0028      	movs	r0, r5
 8004178:	f002 fbd7 	bl	800692a <_lv_style_list_get_int>
        if(res == LV_RES_OK) return value_act;
 800417c:	2801      	cmp	r0, #1
 800417e:	d000      	beq.n	8004182 <_lv_obj_get_style_int+0x8a>
 8004180:	e069      	b.n	8004256 <_lv_obj_get_style_int+0x15e>
 8004182:	2300      	movs	r3, #0
 8004184:	5ee0      	ldrsh	r0, [r4, r3]
}
 8004186:	b007      	add	sp, #28
 8004188:	bdf0      	pop	{r4, r5, r6, r7, pc}
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 800418a:	3c04      	subs	r4, #4
 800418c:	2c03      	cmp	r4, #3
 800418e:	d8e5      	bhi.n	800415c <_lv_obj_get_style_int+0x64>
                    if(list->transform_all_zero) def = true;
 8004190:	796b      	ldrb	r3, [r5, #5]
                    if(list->border_post_off) def = true;
 8004192:	2b7f      	cmp	r3, #127	; 0x7f
 8004194:	d9e2      	bls.n	800415c <_lv_obj_get_style_int+0x64>
 8004196:	e039      	b.n	800420c <_lv_obj_get_style_int+0x114>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 8004198:	2c20      	cmp	r4, #32
 800419a:	d018      	beq.n	80041ce <_lv_obj_get_style_int+0xd6>
 800419c:	dc06      	bgt.n	80041ac <_lv_obj_get_style_int+0xb4>
 800419e:	3c15      	subs	r4, #21
 80041a0:	2c03      	cmp	r4, #3
 80041a2:	d8db      	bhi.n	800415c <_lv_obj_get_style_int+0x64>
                    if(list->margin_all_zero) def = true;
 80041a4:	79ab      	ldrb	r3, [r5, #6]
 80041a6:	079b      	lsls	r3, r3, #30
 80041a8:	d5d8      	bpl.n	800415c <_lv_obj_get_style_int+0x64>
 80041aa:	e02f      	b.n	800420c <_lv_obj_get_style_int+0x114>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 80041ac:	2c31      	cmp	r4, #49	; 0x31
 80041ae:	d03b      	beq.n	8004228 <_lv_obj_get_style_int+0x130>
 80041b0:	dc0d      	bgt.n	80041ce <_lv_obj_get_style_int+0xd6>
 80041b2:	2c30      	cmp	r4, #48	; 0x30
 80041b4:	d1d2      	bne.n	800415c <_lv_obj_get_style_int+0x64>
                    if(list->border_width_zero) def = true;
 80041b6:	79ab      	ldrb	r3, [r5, #6]
 80041b8:	e026      	b.n	8004208 <_lv_obj_get_style_int+0x110>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 80041ba:	2c72      	cmp	r4, #114	; 0x72
 80041bc:	d007      	beq.n	80041ce <_lv_obj_get_style_int+0xd6>
 80041be:	dc0d      	bgt.n	80041dc <_lv_obj_get_style_int+0xe4>
 80041c0:	2c50      	cmp	r4, #80	; 0x50
 80041c2:	d03f      	beq.n	8004244 <_lv_obj_get_style_int+0x14c>
 80041c4:	dc05      	bgt.n	80041d2 <_lv_obj_get_style_int+0xda>
 80041c6:	2c40      	cmp	r4, #64	; 0x40
 80041c8:	d032      	beq.n	8004230 <_lv_obj_get_style_int+0x138>
 80041ca:	2c42      	cmp	r4, #66	; 0x42
 80041cc:	d1c6      	bne.n	800415c <_lv_obj_get_style_int+0x64>
                    if(list->blend_mode_all_normal) def = true;
 80041ce:	79ab      	ldrb	r3, [r5, #6]
 80041d0:	e039      	b.n	8004246 <_lv_obj_get_style_int+0x14e>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 80041d2:	2c54      	cmp	r4, #84	; 0x54
 80041d4:	d0fb      	beq.n	80041ce <_lv_obj_get_style_int+0xd6>
 80041d6:	2c60      	cmp	r4, #96	; 0x60
 80041d8:	d1c0      	bne.n	800415c <_lv_obj_get_style_int+0x64>
 80041da:	e7f8      	b.n	80041ce <_lv_obj_get_style_int+0xd6>
 80041dc:	4b2a      	ldr	r3, [pc, #168]	; (8004288 <_lv_obj_get_style_int+0x190>)
 80041de:	429c      	cmp	r4, r3
 80041e0:	dc05      	bgt.n	80041ee <_lv_obj_get_style_int+0xf6>
 80041e2:	4b2a      	ldr	r3, [pc, #168]	; (800428c <_lv_obj_get_style_int+0x194>)
 80041e4:	429c      	cmp	r4, r3
 80041e6:	da0e      	bge.n	8004206 <_lv_obj_get_style_int+0x10e>
 80041e8:	2c91      	cmp	r4, #145	; 0x91
 80041ea:	d1b7      	bne.n	800415c <_lv_obj_get_style_int+0x64>
 80041ec:	e7ef      	b.n	80041ce <_lv_obj_get_style_int+0xd6>
 80041ee:	4b28      	ldr	r3, [pc, #160]	; (8004290 <_lv_obj_get_style_int+0x198>)
 80041f0:	429c      	cmp	r4, r3
 80041f2:	d0ec      	beq.n	80041ce <_lv_obj_get_style_int+0xd6>
 80041f4:	db2d      	blt.n	8004252 <_lv_obj_get_style_int+0x15a>
 80041f6:	4b27      	ldr	r3, [pc, #156]	; (8004294 <_lv_obj_get_style_int+0x19c>)
 80041f8:	429c      	cmp	r4, r3
 80041fa:	d1af      	bne.n	800415c <_lv_obj_get_style_int+0x64>
 80041fc:	e7e7      	b.n	80041ce <_lv_obj_get_style_int+0xd6>
                    if(list->clip_corner_off) def = true;
 80041fe:	796b      	ldrb	r3, [r5, #5]
                    if(list->text_decor_none) def = true;
 8004200:	065b      	lsls	r3, r3, #25
 8004202:	d5ab      	bpl.n	800415c <_lv_obj_get_style_int+0x64>
 8004204:	e002      	b.n	800420c <_lv_obj_get_style_int+0x114>
                    if(list->text_space_zero) def = true;
 8004206:	79eb      	ldrb	r3, [r5, #7]
                    if(list->border_width_zero) def = true;
 8004208:	069b      	lsls	r3, r3, #26
 800420a:	d5a7      	bpl.n	800415c <_lv_obj_get_style_int+0x64>
    switch(prop) {
 800420c:	4b1d      	ldr	r3, [pc, #116]	; (8004284 <_lv_obj_get_style_int+0x18c>)
 800420e:	9a01      	ldr	r2, [sp, #4]
            return 255;
 8004210:	20ff      	movs	r0, #255	; 0xff
    switch(prop) {
 8004212:	401a      	ands	r2, r3
 8004214:	2a22      	cmp	r2, #34	; 0x22
 8004216:	d0b6      	beq.n	8004186 <_lv_obj_get_style_int+0x8e>
 8004218:	d827      	bhi.n	800426a <_lv_obj_get_style_int+0x172>
            return LV_DPI / 20;
 800421a:	38f9      	subs	r0, #249	; 0xf9
    switch(prop) {
 800421c:	2a03      	cmp	r2, #3
 800421e:	d0b2      	beq.n	8004186 <_lv_obj_get_style_int+0x8e>
 8004220:	2a07      	cmp	r2, #7
 8004222:	d02b      	beq.n	800427c <_lv_obj_get_style_int+0x184>
    return 0;
 8004224:	2000      	movs	r0, #0
 8004226:	e7ae      	b.n	8004186 <_lv_obj_get_style_int+0x8e>
                    if(list->border_side_full) def = true;
 8004228:	79ab      	ldrb	r3, [r5, #6]
 800422a:	e7e9      	b.n	8004200 <_lv_obj_get_style_int+0x108>
                    if(list->border_post_off) def = true;
 800422c:	79ab      	ldrb	r3, [r5, #6]
 800422e:	e7b0      	b.n	8004192 <_lv_obj_get_style_int+0x9a>
                    if(list->outline_width_zero) def = true;
 8004230:	79eb      	ldrb	r3, [r5, #7]
                    if(list->pad_all_zero) def = true;
 8004232:	07db      	lsls	r3, r3, #31
 8004234:	d400      	bmi.n	8004238 <_lv_obj_get_style_int+0x140>
 8004236:	e791      	b.n	800415c <_lv_obj_get_style_int+0x64>
 8004238:	e7e8      	b.n	800420c <_lv_obj_get_style_int+0x114>
                    if(list->radius_zero) def = true;
 800423a:	796b      	ldrb	r3, [r5, #5]
 800423c:	06db      	lsls	r3, r3, #27
 800423e:	d400      	bmi.n	8004242 <_lv_obj_get_style_int+0x14a>
 8004240:	e78c      	b.n	800415c <_lv_obj_get_style_int+0x64>
 8004242:	e7e3      	b.n	800420c <_lv_obj_get_style_int+0x114>
                    if(list->shadow_width_zero) def = true;
 8004244:	79eb      	ldrb	r3, [r5, #7]
                    if(list->blend_mode_all_normal) def = true;
 8004246:	075b      	lsls	r3, r3, #29
 8004248:	d400      	bmi.n	800424c <_lv_obj_get_style_int+0x154>
 800424a:	e787      	b.n	800415c <_lv_obj_get_style_int+0x64>
 800424c:	e7de      	b.n	800420c <_lv_obj_get_style_int+0x114>
                    if(list->pad_all_zero) def = true;
 800424e:	79ab      	ldrb	r3, [r5, #6]
 8004250:	e7ef      	b.n	8004232 <_lv_obj_get_style_int+0x13a>
                    if(list->text_decor_none) def = true;
 8004252:	79eb      	ldrb	r3, [r5, #7]
 8004254:	e7d4      	b.n	8004200 <_lv_obj_get_style_int+0x108>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8004256:	466b      	mov	r3, sp
 8004258:	7b1b      	ldrb	r3, [r3, #12]
 800425a:	b25b      	sxtb	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	dad5      	bge.n	800420c <_lv_obj_get_style_int+0x114>
        if(part != LV_OBJ_PART_MAIN) {
 8004260:	2f00      	cmp	r7, #0
 8004262:	d100      	bne.n	8004266 <_lv_obj_get_style_int+0x16e>
    return obj->parent;
 8004264:	6836      	ldr	r6, [r6, #0]
 8004266:	2700      	movs	r7, #0
 8004268:	e74e      	b.n	8004108 <_lv_obj_get_style_int+0x10>
            return LV_BORDER_SIDE_FULL;
 800426a:	200f      	movs	r0, #15
    switch(prop) {
 800426c:	2a31      	cmp	r2, #49	; 0x31
 800426e:	d100      	bne.n	8004272 <_lv_obj_get_style_int+0x17a>
 8004270:	e789      	b.n	8004186 <_lv_obj_get_style_int+0x8e>
            return LV_DPI / 8;
 8004272:	3001      	adds	r0, #1
    switch(prop) {
 8004274:	2ac0      	cmp	r2, #192	; 0xc0
 8004276:	d100      	bne.n	800427a <_lv_obj_get_style_int+0x182>
 8004278:	e785      	b.n	8004186 <_lv_obj_get_style_int+0x8e>
 800427a:	e7d3      	b.n	8004224 <_lv_obj_get_style_int+0x12c>
            return LV_IMG_ZOOM_NONE;
 800427c:	2080      	movs	r0, #128	; 0x80
 800427e:	0040      	lsls	r0, r0, #1
 8004280:	e781      	b.n	8004186 <_lv_obj_get_style_int+0x8e>
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	ffff80ff 	.word	0xffff80ff
 8004288:	00008081 	.word	0x00008081
 800428c:	00008080 	.word	0x00008080
 8004290:	00008083 	.word	0x00008083
 8004294:	000080a0 	.word	0x000080a0

08004298 <lv_obj_get_style_clip_corner>:
    _OBJ_GET_STYLE(prop_name, func_name, value_type, style_type)                                                         \
    _OBJ_SET_STYLE_LOCAL(prop_name, func_name, value_type, style_type)                                                   \
    _OBJ_SET_STYLE(prop_name, func_name, value_type, style_type)

_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int)
 8004298:	b510      	push	{r4, lr}
 800429a:	2202      	movs	r2, #2
 800429c:	f7ff ff2c 	bl	80040f8 <_lv_obj_get_style_int>
 80042a0:	1e43      	subs	r3, r0, #1
 80042a2:	4198      	sbcs	r0, r3
 80042a4:	b2c0      	uxtb	r0, r0
 80042a6:	bd10      	pop	{r4, pc}

080042a8 <update_style_cache>:
 * @param obj pointer to an object
 * @param part the part of the object
 * @param prop the property which triggered the update
 */
static void update_style_cache(lv_obj_t * obj, uint8_t part, uint16_t prop)
{
 80042a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042aa:	0005      	movs	r5, r0
    if(style_prop_is_cacheble(prop) == false) return;
 80042ac:	0010      	movs	r0, r2
{
 80042ae:	000e      	movs	r6, r1
    if(style_prop_is_cacheble(prop) == false) return;
 80042b0:	f7ff f946 	bl	8003540 <style_prop_is_cacheble>
 80042b4:	2800      	cmp	r0, #0
 80042b6:	d100      	bne.n	80042ba <update_style_cache+0x12>
 80042b8:	e106      	b.n	80044c8 <update_style_cache+0x220>

    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 80042ba:	0031      	movs	r1, r6
 80042bc:	0028      	movs	r0, r5
 80042be:	f7ff fe85 	bl	8003fcc <lv_obj_get_style_list>

    bool ignore_cache_ori = list->ignore_cache;
 80042c2:	7942      	ldrb	r2, [r0, #5]
    list->ignore_cache = 1;

#if LV_USE_OPA_SCALE
    list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
#else
    list->opa_scale_cover    = 1;
 80042c4:	2720      	movs	r7, #32
    bool ignore_cache_ori = list->ignore_cache;
 80042c6:	0713      	lsls	r3, r2, #28
 80042c8:	0fdb      	lsrs	r3, r3, #31
 80042ca:	9301      	str	r3, [sp, #4]
    list->opa_scale_cover    = 1;
 80042cc:	2308      	movs	r3, #8
 80042ce:	4313      	orrs	r3, r2
 80042d0:	433b      	orrs	r3, r7
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 80042d2:	0004      	movs	r4, r0
    list->opa_scale_cover    = 1;
 80042d4:	7143      	strb	r3, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int)
 80042d6:	4aa3      	ldr	r2, [pc, #652]	; (8004564 <update_style_cache+0x2bc>)
 80042d8:	0031      	movs	r1, r6
 80042da:	0028      	movs	r0, r5
 80042dc:	f7ff ff0c 	bl	80040f8 <_lv_obj_get_style_int>
#endif
    list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
 80042e0:	b2c0      	uxtb	r0, r0
 80042e2:	4243      	negs	r3, r0
 80042e4:	4158      	adcs	r0, r3
 80042e6:	2240      	movs	r2, #64	; 0x40
 80042e8:	79e3      	ldrb	r3, [r4, #7]
 80042ea:	0180      	lsls	r0, r0, #6
 80042ec:	4393      	bics	r3, r2
 80042ee:	4318      	orrs	r0, r3
 80042f0:	71e0      	strb	r0, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr)
 80042f2:	4a9d      	ldr	r2, [pc, #628]	; (8004568 <update_style_cache+0x2c0>)
 80042f4:	0031      	movs	r1, r6
 80042f6:	0028      	movs	r0, r5
 80042f8:	f000 f9ac 	bl	8004654 <_lv_obj_get_style_ptr>
    list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == LV_THEME_DEFAULT_FONT_NORMAL ? 1 : 0;
 80042fc:	4b9b      	ldr	r3, [pc, #620]	; (800456c <update_style_cache+0x2c4>)
 80042fe:	227f      	movs	r2, #127	; 0x7f
 8004300:	1ac0      	subs	r0, r0, r3
 8004302:	4243      	negs	r3, r0
 8004304:	4158      	adcs	r0, r3
 8004306:	79e3      	ldrb	r3, [r4, #7]
 8004308:	01c0      	lsls	r0, r0, #7
 800430a:	4013      	ands	r3, r2

    list->text_space_zero = 1;
 800430c:	4318      	orrs	r0, r3
 800430e:	4338      	orrs	r0, r7
 8004310:	71e0      	strb	r0, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int)
 8004312:	4a97      	ldr	r2, [pc, #604]	; (8004570 <update_style_cache+0x2c8>)
 8004314:	0031      	movs	r1, r6
 8004316:	0028      	movs	r0, r5
 8004318:	f7ff feee 	bl	80040f8 <_lv_obj_get_style_int>
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 800431c:	2800      	cmp	r0, #0
 800431e:	d100      	bne.n	8004322 <update_style_cache+0x7a>
 8004320:	e0d3      	b.n	80044ca <update_style_cache+0x222>
       lv_obj_get_style_text_line_space(obj, part) != 0) {
        list->text_space_zero = 0;
 8004322:	2220      	movs	r2, #32
 8004324:	79e3      	ldrb	r3, [r4, #7]
 8004326:	4393      	bics	r3, r2
 8004328:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 800432a:	222c      	movs	r2, #44	; 0x2c
 800432c:	0031      	movs	r1, r6
 800432e:	0028      	movs	r0, r5
 8004330:	f000 f924 	bl	800457c <_lv_obj_get_style_opa>
    }

    lv_opa_t bg_opa = lv_obj_get_style_bg_opa(obj, part);
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
 8004334:	2108      	movs	r1, #8
 8004336:	4242      	negs	r2, r0
 8004338:	4142      	adcs	r2, r0
 800433a:	79a3      	ldrb	r3, [r4, #6]
 800433c:	00d2      	lsls	r2, r2, #3
 800433e:	438b      	bics	r3, r1
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
 8004340:	38ff      	subs	r0, #255	; 0xff
 8004342:	4241      	negs	r1, r0
 8004344:	4148      	adcs	r0, r1
 8004346:	4313      	orrs	r3, r2
 8004348:	2210      	movs	r2, #16
 800434a:	0100      	lsls	r0, r0, #4
 800434c:	4393      	bics	r3, r2
 800434e:	4318      	orrs	r0, r3
 8004350:	71a0      	strb	r0, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int)
 8004352:	3220      	adds	r2, #32
 8004354:	0031      	movs	r1, r6
 8004356:	0028      	movs	r0, r5
 8004358:	f7ff fece 	bl	80040f8 <_lv_obj_get_style_int>

    list->border_width_zero = lv_obj_get_style_border_width(obj, part) == 0 ? 1 : 0;
 800435c:	4243      	negs	r3, r0
 800435e:	4158      	adcs	r0, r3
 8004360:	2220      	movs	r2, #32
 8004362:	0143      	lsls	r3, r0, #5
 8004364:	79a0      	ldrb	r0, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int)
 8004366:	0031      	movs	r1, r6
 8004368:	4390      	bics	r0, r2
 800436a:	4318      	orrs	r0, r3
 800436c:	71a0      	strb	r0, [r4, #6]
 800436e:	3211      	adds	r2, #17
 8004370:	0028      	movs	r0, r5
 8004372:	f7ff fec1 	bl	80040f8 <_lv_obj_get_style_int>
    list->border_side_full = lv_obj_get_style_border_side(obj, part) == LV_BORDER_SIDE_FULL ? 1 : 0;
 8004376:	b2c0      	uxtb	r0, r0
 8004378:	380f      	subs	r0, #15
 800437a:	2740      	movs	r7, #64	; 0x40
 800437c:	4243      	negs	r3, r0
 800437e:	4158      	adcs	r0, r3
 8004380:	79a3      	ldrb	r3, [r4, #6]
 8004382:	0180      	lsls	r0, r0, #6
 8004384:	43bb      	bics	r3, r7
 8004386:	4318      	orrs	r0, r3
 8004388:	71a0      	strb	r0, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int)
 800438a:	2233      	movs	r2, #51	; 0x33
 800438c:	0031      	movs	r1, r6
 800438e:	0028      	movs	r0, r5
 8004390:	f7ff feb2 	bl	80040f8 <_lv_obj_get_style_int>
    list->border_post_off = lv_obj_get_style_border_post(obj, part) == 0 ? 1 : 0;
 8004394:	4243      	negs	r3, r0
 8004396:	4158      	adcs	r0, r3
 8004398:	227f      	movs	r2, #127	; 0x7f
 800439a:	01c3      	lsls	r3, r0, #7
 800439c:	79a0      	ldrb	r0, [r4, #6]
    list->clip_corner_off   = lv_obj_get_style_clip_corner(obj, part) == false ? 1 : 0;
 800439e:	0031      	movs	r1, r6
    list->border_post_off = lv_obj_get_style_border_post(obj, part) == 0 ? 1 : 0;
 80043a0:	4010      	ands	r0, r2
 80043a2:	4318      	orrs	r0, r3
 80043a4:	71a0      	strb	r0, [r4, #6]
    list->clip_corner_off   = lv_obj_get_style_clip_corner(obj, part) == false ? 1 : 0;
 80043a6:	0028      	movs	r0, r5
 80043a8:	f7ff ff76 	bl	8004298 <lv_obj_get_style_clip_corner>
 80043ac:	2301      	movs	r3, #1
 80043ae:	4383      	bics	r3, r0
 80043b0:	019a      	lsls	r2, r3, #6
 80043b2:	7963      	ldrb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa)
 80043b4:	0031      	movs	r1, r6
 80043b6:	43bb      	bics	r3, r7
 80043b8:	4313      	orrs	r3, r2
 80043ba:	7163      	strb	r3, [r4, #5]
 80043bc:	4a6d      	ldr	r2, [pc, #436]	; (8004574 <update_style_cache+0x2cc>)
 80043be:	0028      	movs	r0, r5
 80043c0:	f000 f8dc 	bl	800457c <_lv_obj_get_style_opa>
    list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
 80043c4:	4243      	negs	r3, r0
 80043c6:	4158      	adcs	r0, r3
 80043c8:	2210      	movs	r2, #16
 80043ca:	0103      	lsls	r3, r0, #4
 80043cc:	79e0      	ldrb	r0, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int)
 80043ce:	0031      	movs	r1, r6
 80043d0:	4390      	bics	r0, r2
 80043d2:	4318      	orrs	r0, r3
 80043d4:	003a      	movs	r2, r7
 80043d6:	71e0      	strb	r0, [r4, #7]
 80043d8:	0028      	movs	r0, r5
 80043da:	f7ff fe8d 	bl	80040f8 <_lv_obj_get_style_int>
    list->outline_width_zero    = lv_obj_get_style_outline_width(obj, part) == 0 ? 1 : 0;
 80043de:	4243      	negs	r3, r0
 80043e0:	4143      	adcs	r3, r0
 80043e2:	79e0      	ldrb	r0, [r4, #7]
 80043e4:	3f3f      	subs	r7, #63	; 0x3f
 80043e6:	43b8      	bics	r0, r7
 80043e8:	4318      	orrs	r0, r3
 80043ea:	71e0      	strb	r0, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr)
 80043ec:	226e      	movs	r2, #110	; 0x6e
 80043ee:	0031      	movs	r1, r6
 80043f0:	0028      	movs	r0, r5
 80043f2:	f000 f92f 	bl	8004654 <_lv_obj_get_style_ptr>
    list->pattern_img_null    = lv_obj_get_style_pattern_image(obj, part) == NULL ? 1 : 0;
 80043f6:	4243      	negs	r3, r0
 80043f8:	4158      	adcs	r0, r3
 80043fa:	2202      	movs	r2, #2
 80043fc:	0043      	lsls	r3, r0, #1
 80043fe:	79e0      	ldrb	r0, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 8004400:	0031      	movs	r1, r6
 8004402:	4390      	bics	r0, r2
 8004404:	4318      	orrs	r0, r3
 8004406:	003a      	movs	r2, r7
 8004408:	71e0      	strb	r0, [r4, #7]
 800440a:	0028      	movs	r0, r5
 800440c:	f7ff fe74 	bl	80040f8 <_lv_obj_get_style_int>
    list->radius_zero    = lv_obj_get_style_radius(obj, part) == 0 ? 1 : 0;
 8004410:	4243      	negs	r3, r0
 8004412:	4158      	adcs	r0, r3
 8004414:	2210      	movs	r2, #16
 8004416:	0103      	lsls	r3, r0, #4
 8004418:	7960      	ldrb	r0, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int)
 800441a:	0031      	movs	r1, r6
 800441c:	4390      	bics	r0, r2
 800441e:	4318      	orrs	r0, r3
 8004420:	7160      	strb	r0, [r4, #5]
 8004422:	3240      	adds	r2, #64	; 0x40
 8004424:	0028      	movs	r0, r5
 8004426:	f7ff fe67 	bl	80040f8 <_lv_obj_get_style_int>
    list->shadow_width_zero    = lv_obj_get_style_shadow_width(obj, part) == 0 ? 1 : 0;
 800442a:	4243      	negs	r3, r0
 800442c:	4158      	adcs	r0, r3
 800442e:	0083      	lsls	r3, r0, #2
 8004430:	79e0      	ldrb	r0, [r4, #7]
 8004432:	3703      	adds	r7, #3
 8004434:	43b8      	bics	r0, r7
 8004436:	4318      	orrs	r0, r3
 8004438:	71e0      	strb	r0, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr)
 800443a:	227f      	movs	r2, #127	; 0x7f
 800443c:	0031      	movs	r1, r6
 800443e:	0028      	movs	r0, r5
 8004440:	f000 f908 	bl	8004654 <_lv_obj_get_style_ptr>
    list->value_txt_str    = lv_obj_get_style_value_str(obj, part) == NULL ? 1 : 0;
 8004444:	4243      	negs	r3, r0
 8004446:	4158      	adcs	r0, r3
 8004448:	2108      	movs	r1, #8
 800444a:	00c3      	lsls	r3, r0, #3
 800444c:	79e0      	ldrb	r0, [r4, #7]

    list->transform_all_zero  = 1;
 800444e:	7962      	ldrb	r2, [r4, #5]
    list->value_txt_str    = lv_obj_get_style_value_str(obj, part) == NULL ? 1 : 0;
 8004450:	4388      	bics	r0, r1
 8004452:	4318      	orrs	r0, r3
    list->transform_all_zero  = 1;
 8004454:	2380      	movs	r3, #128	; 0x80
 8004456:	425b      	negs	r3, r3
 8004458:	4313      	orrs	r3, r2
    list->value_txt_str    = lv_obj_get_style_value_str(obj, part) == NULL ? 1 : 0;
 800445a:	71e0      	strb	r0, [r4, #7]
    list->transform_all_zero  = 1;
 800445c:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int)
 800445e:	2206      	movs	r2, #6
 8004460:	0031      	movs	r1, r6
 8004462:	0028      	movs	r0, r5
 8004464:	f7ff fe48 	bl	80040f8 <_lv_obj_get_style_int>
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
 8004468:	2800      	cmp	r0, #0
 800446a:	d037      	beq.n	80044dc <update_style_cache+0x234>
       lv_obj_get_style_transform_width(obj, part) != 0 ||
       lv_obj_get_style_transform_height(obj, part) != 0 ||
       lv_obj_get_style_transform_zoom(obj, part) != LV_IMG_ZOOM_NONE) {
        list->transform_all_zero  = 0;
 800446c:	227f      	movs	r2, #127	; 0x7f
 800446e:	7963      	ldrb	r3, [r4, #5]
 8004470:	4013      	ands	r3, r2
 8004472:	7163      	strb	r3, [r4, #5]
    }

    list->pad_all_zero  = 1;
 8004474:	2301      	movs	r3, #1
 8004476:	79a2      	ldrb	r2, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 8004478:	0031      	movs	r1, r6
 800447a:	4313      	orrs	r3, r2
 800447c:	71a3      	strb	r3, [r4, #6]
 800447e:	2210      	movs	r2, #16
 8004480:	0028      	movs	r0, r5
 8004482:	f7ff fe39 	bl	80040f8 <_lv_obj_get_style_int>
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
 8004486:	2800      	cmp	r0, #0
 8004488:	d040      	beq.n	800450c <update_style_cache+0x264>
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
       lv_obj_get_style_pad_left(obj, part) != 0 ||
       lv_obj_get_style_pad_right(obj, part) != 0) {
        list->pad_all_zero  = 0;
 800448a:	2201      	movs	r2, #1
 800448c:	79a3      	ldrb	r3, [r4, #6]
 800448e:	4393      	bics	r3, r2
 8004490:	71a3      	strb	r3, [r4, #6]
    }

    list->margin_all_zero  = 1;
 8004492:	2302      	movs	r3, #2
 8004494:	79a2      	ldrb	r2, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int)
 8004496:	0031      	movs	r1, r6
 8004498:	4313      	orrs	r3, r2
 800449a:	71a3      	strb	r3, [r4, #6]
 800449c:	2215      	movs	r2, #21
 800449e:	0028      	movs	r0, r5
 80044a0:	f7ff fe2a 	bl	80040f8 <_lv_obj_get_style_int>
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
 80044a4:	2800      	cmp	r0, #0
 80044a6:	d047      	beq.n	8004538 <update_style_cache+0x290>
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
       lv_obj_get_style_margin_left(obj, part) != 0 ||
       lv_obj_get_style_margin_right(obj, part) != 0) {
        list->margin_all_zero  = 0;
 80044a8:	2202      	movs	r2, #2
 80044aa:	79a3      	ldrb	r3, [r4, #6]
 80044ac:	4393      	bics	r3, r2
 80044ae:	71a3      	strb	r3, [r4, #6]
    }

    list->blend_mode_all_normal = 1;
 80044b0:	2204      	movs	r2, #4
       lv_obj_get_style_image_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
       lv_obj_get_style_shadow_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL) {
        list->blend_mode_all_normal = 0;
    }
#endif
    list->ignore_cache = ignore_cache_ori;
 80044b2:	2008      	movs	r0, #8
    list->blend_mode_all_normal = 1;
 80044b4:	79a3      	ldrb	r3, [r4, #6]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	71a3      	strb	r3, [r4, #6]
    list->ignore_cache = ignore_cache_ori;
 80044ba:	9b01      	ldr	r3, [sp, #4]
 80044bc:	00d9      	lsls	r1, r3, #3
 80044be:	7963      	ldrb	r3, [r4, #5]
 80044c0:	4383      	bics	r3, r0
    list->valid_cache = 1;
 80044c2:	430b      	orrs	r3, r1
 80044c4:	4313      	orrs	r3, r2
 80044c6:	7163      	strb	r3, [r4, #5]
}
 80044c8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int)
 80044ca:	4a2b      	ldr	r2, [pc, #172]	; (8004578 <update_style_cache+0x2d0>)
 80044cc:	0031      	movs	r1, r6
 80044ce:	0028      	movs	r0, r5
 80044d0:	f7ff fe12 	bl	80040f8 <_lv_obj_get_style_int>
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 80044d4:	2800      	cmp	r0, #0
 80044d6:	d000      	beq.n	80044da <update_style_cache+0x232>
 80044d8:	e723      	b.n	8004322 <update_style_cache+0x7a>
 80044da:	e726      	b.n	800432a <update_style_cache+0x82>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 80044dc:	003a      	movs	r2, r7
 80044de:	0031      	movs	r1, r6
 80044e0:	0028      	movs	r0, r5
 80044e2:	f7ff fe09 	bl	80040f8 <_lv_obj_get_style_int>
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
 80044e6:	2800      	cmp	r0, #0
 80044e8:	d1c0      	bne.n	800446c <update_style_cache+0x1c4>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 80044ea:	2205      	movs	r2, #5
 80044ec:	0031      	movs	r1, r6
 80044ee:	0028      	movs	r0, r5
 80044f0:	f7ff fe02 	bl	80040f8 <_lv_obj_get_style_int>
       lv_obj_get_style_transform_width(obj, part) != 0 ||
 80044f4:	2800      	cmp	r0, #0
 80044f6:	d1b9      	bne.n	800446c <update_style_cache+0x1c4>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int)
 80044f8:	2207      	movs	r2, #7
 80044fa:	0031      	movs	r1, r6
 80044fc:	0028      	movs	r0, r5
 80044fe:	f7ff fdfb 	bl	80040f8 <_lv_obj_get_style_int>
       lv_obj_get_style_transform_height(obj, part) != 0 ||
 8004502:	2380      	movs	r3, #128	; 0x80
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	4298      	cmp	r0, r3
 8004508:	d1b0      	bne.n	800446c <update_style_cache+0x1c4>
 800450a:	e7b3      	b.n	8004474 <update_style_cache+0x1cc>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 800450c:	2211      	movs	r2, #17
 800450e:	0031      	movs	r1, r6
 8004510:	0028      	movs	r0, r5
 8004512:	f7ff fdf1 	bl	80040f8 <_lv_obj_get_style_int>
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
 8004516:	2800      	cmp	r0, #0
 8004518:	d1b7      	bne.n	800448a <update_style_cache+0x1e2>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 800451a:	2212      	movs	r2, #18
 800451c:	0031      	movs	r1, r6
 800451e:	0028      	movs	r0, r5
 8004520:	f7ff fdea 	bl	80040f8 <_lv_obj_get_style_int>
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
 8004524:	2800      	cmp	r0, #0
 8004526:	d1b0      	bne.n	800448a <update_style_cache+0x1e2>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 8004528:	2213      	movs	r2, #19
 800452a:	0031      	movs	r1, r6
 800452c:	0028      	movs	r0, r5
 800452e:	f7ff fde3 	bl	80040f8 <_lv_obj_get_style_int>
       lv_obj_get_style_pad_left(obj, part) != 0 ||
 8004532:	2800      	cmp	r0, #0
 8004534:	d1a9      	bne.n	800448a <update_style_cache+0x1e2>
 8004536:	e7ac      	b.n	8004492 <update_style_cache+0x1ea>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int)
 8004538:	2216      	movs	r2, #22
 800453a:	0031      	movs	r1, r6
 800453c:	0028      	movs	r0, r5
 800453e:	f7ff fddb 	bl	80040f8 <_lv_obj_get_style_int>
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
 8004542:	2800      	cmp	r0, #0
 8004544:	d1b0      	bne.n	80044a8 <update_style_cache+0x200>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int)
 8004546:	2217      	movs	r2, #23
 8004548:	0031      	movs	r1, r6
 800454a:	0028      	movs	r0, r5
 800454c:	f7ff fdd4 	bl	80040f8 <_lv_obj_get_style_int>
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
 8004550:	2800      	cmp	r0, #0
 8004552:	d1a9      	bne.n	80044a8 <update_style_cache+0x200>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int)
 8004554:	2218      	movs	r2, #24
 8004556:	0031      	movs	r1, r6
 8004558:	0028      	movs	r0, r5
 800455a:	f7ff fdcd 	bl	80040f8 <_lv_obj_get_style_int>
       lv_obj_get_style_margin_left(obj, part) != 0 ||
 800455e:	2800      	cmp	r0, #0
 8004560:	d1a2      	bne.n	80044a8 <update_style_cache+0x200>
 8004562:	e7a5      	b.n	80044b0 <update_style_cache+0x208>
 8004564:	00008082 	.word	0x00008082
 8004568:	0000808e 	.word	0x0000808e
 800456c:	20000028 	.word	0x20000028
 8004570:	00008080 	.word	0x00008080
 8004574:	000080ad 	.word	0x000080ad
 8004578:	00008081 	.word	0x00008081

0800457c <_lv_obj_get_style_opa>:
{
 800457c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800457e:	0004      	movs	r4, r0
 8004580:	000f      	movs	r7, r1
 8004582:	b087      	sub	sp, #28
    attr = prop_ori >> 8;
 8004584:	0a13      	lsrs	r3, r2, #8
{
 8004586:	9202      	str	r2, [sp, #8]
    attr = prop_ori >> 8;
 8004588:	9303      	str	r3, [sp, #12]
    while(parent) {
 800458a:	9201      	str	r2, [sp, #4]
 800458c:	2c00      	cmp	r4, #0
 800458e:	d03d      	beq.n	800460c <_lv_obj_get_style_opa+0x90>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 8004590:	0039      	movs	r1, r7
 8004592:	0020      	movs	r0, r4
 8004594:	f7ff fd1a 	bl	8003fcc <lv_obj_get_style_list>
        if(!list->ignore_cache && list->style_cnt > 0) {
 8004598:	2208      	movs	r2, #8
 800459a:	7943      	ldrb	r3, [r0, #5]
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 800459c:	0005      	movs	r5, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
 800459e:	4213      	tst	r3, r2
 80045a0:	d11c      	bne.n	80045dc <_lv_obj_get_style_opa+0x60>
 80045a2:	213f      	movs	r1, #63	; 0x3f
 80045a4:	7902      	ldrb	r2, [r0, #4]
 80045a6:	420a      	tst	r2, r1
 80045a8:	d018      	beq.n	80045dc <_lv_obj_get_style_opa+0x60>
 80045aa:	4e27      	ldr	r6, [pc, #156]	; (8004648 <_lv_obj_get_style_opa+0xcc>)
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
 80045ac:	075b      	lsls	r3, r3, #29
 80045ae:	d405      	bmi.n	80045bc <_lv_obj_get_style_opa+0x40>
 80045b0:	9a01      	ldr	r2, [sp, #4]
 80045b2:	0039      	movs	r1, r7
 80045b4:	4032      	ands	r2, r6
 80045b6:	0020      	movs	r0, r4
 80045b8:	f7ff fe76 	bl	80042a8 <update_style_cache>
            switch(prop & (~LV_STYLE_STATE_MASK)) {
 80045bc:	9b01      	ldr	r3, [sp, #4]
 80045be:	401e      	ands	r6, r3
 80045c0:	4b22      	ldr	r3, [pc, #136]	; (800464c <_lv_obj_get_style_opa+0xd0>)
 80045c2:	429e      	cmp	r6, r3
 80045c4:	d01f      	beq.n	8004606 <_lv_obj_get_style_opa+0x8a>
 80045c6:	4b22      	ldr	r3, [pc, #136]	; (8004650 <_lv_obj_get_style_opa+0xd4>)
 80045c8:	429e      	cmp	r6, r3
 80045ca:	d02c      	beq.n	8004626 <_lv_obj_get_style_opa+0xaa>
 80045cc:	2e2c      	cmp	r6, #44	; 0x2c
 80045ce:	d105      	bne.n	80045dc <_lv_obj_get_style_opa+0x60>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
 80045d0:	79ab      	ldrb	r3, [r5, #6]
 80045d2:	06da      	lsls	r2, r3, #27
 80045d4:	d425      	bmi.n	8004622 <_lv_obj_get_style_opa+0xa6>
                    if(list->bg_opa_transp) def = true;
 80045d6:	2208      	movs	r2, #8
 80045d8:	4213      	tst	r3, r2
 80045da:	d117      	bne.n	800460c <_lv_obj_get_style_opa+0x90>
        lv_state_t state = lv_obj_get_state(parent, part);
 80045dc:	0039      	movs	r1, r7
 80045de:	0020      	movs	r0, r4
 80045e0:	f7ff fd41 	bl	8004066 <lv_obj_get_state>
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 80045e4:	9b02      	ldr	r3, [sp, #8]
 80045e6:	0200      	lsls	r0, r0, #8
 80045e8:	1818      	adds	r0, r3, r0
 80045ea:	b283      	uxth	r3, r0
 80045ec:	9301      	str	r3, [sp, #4]
        res = _lv_style_list_get_opa(list, prop, &value_act);
 80045ee:	ab04      	add	r3, sp, #16
 80045f0:	1dde      	adds	r6, r3, #7
 80045f2:	0032      	movs	r2, r6
 80045f4:	9901      	ldr	r1, [sp, #4]
 80045f6:	0028      	movs	r0, r5
 80045f8:	f002 fa16 	bl	8006a28 <_lv_style_list_get_opa>
        if(res == LV_RES_OK) return value_act;
 80045fc:	2801      	cmp	r0, #1
 80045fe:	d116      	bne.n	800462e <_lv_obj_get_style_opa+0xb2>
 8004600:	7830      	ldrb	r0, [r6, #0]
}
 8004602:	b007      	add	sp, #28
 8004604:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    if(list->opa_scale_cover) def = true;
 8004606:	796b      	ldrb	r3, [r5, #5]
 8004608:	069b      	lsls	r3, r3, #26
 800460a:	d5e7      	bpl.n	80045dc <_lv_obj_get_style_opa+0x60>
    switch(prop) {
 800460c:	480e      	ldr	r0, [pc, #56]	; (8004648 <_lv_obj_get_style_opa+0xcc>)
 800460e:	9b01      	ldr	r3, [sp, #4]
 8004610:	4003      	ands	r3, r0
 8004612:	0018      	movs	r0, r3
 8004614:	2b6d      	cmp	r3, #109	; 0x6d
 8004616:	d014      	beq.n	8004642 <_lv_obj_get_style_opa+0xc6>
 8004618:	4b0d      	ldr	r3, [pc, #52]	; (8004650 <_lv_obj_get_style_opa+0xd4>)
 800461a:	4298      	cmp	r0, r3
 800461c:	d011      	beq.n	8004642 <_lv_obj_get_style_opa+0xc6>
 800461e:	282c      	cmp	r0, #44	; 0x2c
 8004620:	d00f      	beq.n	8004642 <_lv_obj_get_style_opa+0xc6>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
 8004622:	20ff      	movs	r0, #255	; 0xff
 8004624:	e7ed      	b.n	8004602 <_lv_obj_get_style_opa+0x86>
                    if(list->img_recolor_opa_transp) def = true;
 8004626:	79eb      	ldrb	r3, [r5, #7]
 8004628:	06db      	lsls	r3, r3, #27
 800462a:	d5d7      	bpl.n	80045dc <_lv_obj_get_style_opa+0x60>
 800462c:	e7ee      	b.n	800460c <_lv_obj_get_style_opa+0x90>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 800462e:	466b      	mov	r3, sp
 8004630:	7b1b      	ldrb	r3, [r3, #12]
 8004632:	b25b      	sxtb	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	dae9      	bge.n	800460c <_lv_obj_get_style_opa+0x90>
        if(part != LV_OBJ_PART_MAIN) {
 8004638:	2f00      	cmp	r7, #0
 800463a:	d100      	bne.n	800463e <_lv_obj_get_style_opa+0xc2>
    return obj->parent;
 800463c:	6824      	ldr	r4, [r4, #0]
 800463e:	2700      	movs	r7, #0
 8004640:	e7a4      	b.n	800458c <_lv_obj_get_style_opa+0x10>
            return LV_OPA_TRANSP;
 8004642:	2000      	movs	r0, #0
 8004644:	e7dd      	b.n	8004602 <_lv_obj_get_style_opa+0x86>
 8004646:	46c0      	nop			; (mov r8, r8)
 8004648:	ffff80ff 	.word	0xffff80ff
 800464c:	0000800c 	.word	0x0000800c
 8004650:	000080ad 	.word	0x000080ad

08004654 <_lv_obj_get_style_ptr>:
{
 8004654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004656:	0005      	movs	r5, r0
 8004658:	000f      	movs	r7, r1
    while(parent) {
 800465a:	0014      	movs	r4, r2
{
 800465c:	b085      	sub	sp, #20
    attr = prop_ori >> 8;
 800465e:	0a13      	lsrs	r3, r2, #8
{
 8004660:	9200      	str	r2, [sp, #0]
    attr = prop_ori >> 8;
 8004662:	9301      	str	r3, [sp, #4]
    while(parent) {
 8004664:	2d00      	cmp	r5, #0
 8004666:	d036      	beq.n	80046d6 <_lv_obj_get_style_ptr+0x82>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 8004668:	0039      	movs	r1, r7
 800466a:	0028      	movs	r0, r5
 800466c:	f7ff fcae 	bl	8003fcc <lv_obj_get_style_list>
        if(!list->ignore_cache && list->style_cnt > 0) {
 8004670:	2208      	movs	r2, #8
 8004672:	7943      	ldrb	r3, [r0, #5]
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 8004674:	0006      	movs	r6, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
 8004676:	4213      	tst	r3, r2
 8004678:	d117      	bne.n	80046aa <_lv_obj_get_style_ptr+0x56>
 800467a:	213f      	movs	r1, #63	; 0x3f
 800467c:	7902      	ldrb	r2, [r0, #4]
 800467e:	420a      	tst	r2, r1
 8004680:	d013      	beq.n	80046aa <_lv_obj_get_style_ptr+0x56>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
 8004682:	075b      	lsls	r3, r3, #29
 8004684:	d405      	bmi.n	8004692 <_lv_obj_get_style_ptr+0x3e>
 8004686:	4a20      	ldr	r2, [pc, #128]	; (8004708 <_lv_obj_get_style_ptr+0xb4>)
 8004688:	0039      	movs	r1, r7
 800468a:	4022      	ands	r2, r4
 800468c:	0028      	movs	r0, r5
 800468e:	f7ff fe0b 	bl	80042a8 <update_style_cache>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 8004692:	4b1d      	ldr	r3, [pc, #116]	; (8004708 <_lv_obj_get_style_ptr+0xb4>)
 8004694:	4023      	ands	r3, r4
 8004696:	2b7f      	cmp	r3, #127	; 0x7f
 8004698:	d019      	beq.n	80046ce <_lv_obj_get_style_ptr+0x7a>
 800469a:	4a1c      	ldr	r2, [pc, #112]	; (800470c <_lv_obj_get_style_ptr+0xb8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d025      	beq.n	80046ec <_lv_obj_get_style_ptr+0x98>
 80046a0:	2b6e      	cmp	r3, #110	; 0x6e
 80046a2:	d102      	bne.n	80046aa <_lv_obj_get_style_ptr+0x56>
                    if(list->pattern_img_null) def = true;
 80046a4:	79f3      	ldrb	r3, [r6, #7]
 80046a6:	079b      	lsls	r3, r3, #30
 80046a8:	d415      	bmi.n	80046d6 <_lv_obj_get_style_ptr+0x82>
        lv_state_t state = lv_obj_get_state(parent, part);
 80046aa:	0039      	movs	r1, r7
 80046ac:	0028      	movs	r0, r5
 80046ae:	f7ff fcda 	bl	8004066 <lv_obj_get_state>
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 80046b2:	9b00      	ldr	r3, [sp, #0]
 80046b4:	0204      	lsls	r4, r0, #8
 80046b6:	191c      	adds	r4, r3, r4
 80046b8:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_ptr(list, prop, &value_act);
 80046ba:	aa03      	add	r2, sp, #12
 80046bc:	0021      	movs	r1, r4
 80046be:	0030      	movs	r0, r6
 80046c0:	f002 f9f2 	bl	8006aa8 <_lv_style_list_get_ptr>
        if(res == LV_RES_OK)  return value_act;
 80046c4:	2801      	cmp	r0, #1
 80046c6:	d115      	bne.n	80046f4 <_lv_obj_get_style_ptr+0xa0>
 80046c8:	9803      	ldr	r0, [sp, #12]
}
 80046ca:	b005      	add	sp, #20
 80046cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    if(list->value_txt_str) def = true;
 80046ce:	2208      	movs	r2, #8
 80046d0:	79f3      	ldrb	r3, [r6, #7]
 80046d2:	4213      	tst	r3, r2
 80046d4:	d0e9      	beq.n	80046aa <_lv_obj_get_style_ptr+0x56>
    switch(prop) {
 80046d6:	480c      	ldr	r0, [pc, #48]	; (8004708 <_lv_obj_get_style_ptr+0xb4>)
 80046d8:	4004      	ands	r4, r0
 80046da:	2c7e      	cmp	r4, #126	; 0x7e
 80046dc:	d003      	beq.n	80046e6 <_lv_obj_get_style_ptr+0x92>
 80046de:	4b0b      	ldr	r3, [pc, #44]	; (800470c <_lv_obj_get_style_ptr+0xb8>)
    return NULL;
 80046e0:	2000      	movs	r0, #0
    switch(prop) {
 80046e2:	429c      	cmp	r4, r3
 80046e4:	d1f1      	bne.n	80046ca <_lv_obj_get_style_ptr+0x76>
            return lv_theme_get_font_normal();
 80046e6:	f008 fa57 	bl	800cb98 <lv_theme_get_font_normal>
 80046ea:	e7ee      	b.n	80046ca <_lv_obj_get_style_ptr+0x76>
                    if(list->text_font_normal) def = true;
 80046ec:	79f3      	ldrb	r3, [r6, #7]
 80046ee:	2b7f      	cmp	r3, #127	; 0x7f
 80046f0:	d9db      	bls.n	80046aa <_lv_obj_get_style_ptr+0x56>
 80046f2:	e7f0      	b.n	80046d6 <_lv_obj_get_style_ptr+0x82>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 80046f4:	466b      	mov	r3, sp
 80046f6:	791b      	ldrb	r3, [r3, #4]
 80046f8:	b25b      	sxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	daeb      	bge.n	80046d6 <_lv_obj_get_style_ptr+0x82>
        if(part != LV_OBJ_PART_MAIN) {
 80046fe:	2f00      	cmp	r7, #0
 8004700:	d100      	bne.n	8004704 <_lv_obj_get_style_ptr+0xb0>
    return obj->parent;
 8004702:	682d      	ldr	r5, [r5, #0]
 8004704:	2700      	movs	r7, #0
 8004706:	e7ad      	b.n	8004664 <_lv_obj_get_style_ptr+0x10>
 8004708:	ffff80ff 	.word	0xffff80ff
 800470c:	0000808e 	.word	0x0000808e

08004710 <update_style_cache_children>:
 * Update the cache of style list
 * @param obj pointer to an object
 * @param part the part of the object
 */
static void update_style_cache_children(lv_obj_t * obj)
{
 8004710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004712:	0006      	movs	r6, r0
    uint8_t part;
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 8004714:	2500      	movs	r5, #0
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8004716:	0029      	movs	r1, r5
 8004718:	0030      	movs	r0, r6
 800471a:	f7ff fc57 	bl	8003fcc <lv_obj_get_style_list>
 800471e:	1e04      	subs	r4, r0, #0
        if(list == NULL) break;
 8004720:	d058      	beq.n	80047d4 <update_style_cache_children+0xc4>

        bool ignore_cache_ori = list->ignore_cache;
 8004722:	7942      	ldrb	r2, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa)
 8004724:	0029      	movs	r1, r5
 8004726:	0713      	lsls	r3, r2, #28
 8004728:	0fdb      	lsrs	r3, r3, #31
 800472a:	9301      	str	r3, [sp, #4]
        list->ignore_cache = 1;
 800472c:	2308      	movs	r3, #8
 800472e:	4313      	orrs	r3, r2
 8004730:	7143      	strb	r3, [r0, #5]
 8004732:	4a33      	ldr	r2, [pc, #204]	; (8004800 <update_style_cache_children+0xf0>)
 8004734:	0030      	movs	r0, r6
 8004736:	f7ff ff21 	bl	800457c <_lv_obj_get_style_opa>

        list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
 800473a:	38ff      	subs	r0, #255	; 0xff
 800473c:	4243      	negs	r3, r0
 800473e:	4158      	adcs	r0, r3
 8004740:	2220      	movs	r2, #32
 8004742:	7963      	ldrb	r3, [r4, #5]
 8004744:	0140      	lsls	r0, r0, #5
 8004746:	4393      	bics	r3, r2
 8004748:	4318      	orrs	r0, r3
 800474a:	7160      	strb	r0, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int)
 800474c:	4a2d      	ldr	r2, [pc, #180]	; (8004804 <update_style_cache_children+0xf4>)
 800474e:	0029      	movs	r1, r5
 8004750:	0030      	movs	r0, r6
 8004752:	f7ff fcd1 	bl	80040f8 <_lv_obj_get_style_int>
        list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
 8004756:	b2c0      	uxtb	r0, r0
 8004758:	4243      	negs	r3, r0
 800475a:	4158      	adcs	r0, r3
 800475c:	2240      	movs	r2, #64	; 0x40
 800475e:	79e3      	ldrb	r3, [r4, #7]
 8004760:	0180      	lsls	r0, r0, #6
 8004762:	4393      	bics	r3, r2
 8004764:	4318      	orrs	r0, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr)
 8004766:	4a28      	ldr	r2, [pc, #160]	; (8004808 <update_style_cache_children+0xf8>)
 8004768:	0029      	movs	r1, r5
 800476a:	71e0      	strb	r0, [r4, #7]
 800476c:	0030      	movs	r0, r6
 800476e:	f7ff ff71 	bl	8004654 <_lv_obj_get_style_ptr>
 8004772:	0007      	movs	r7, r0
        list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == lv_theme_get_font_normal() ? 1 : 0;
 8004774:	f008 fa10 	bl	800cb98 <lv_theme_get_font_normal>
 8004778:	1bc7      	subs	r7, r0, r7
 800477a:	237f      	movs	r3, #127	; 0x7f
 800477c:	4278      	negs	r0, r7
 800477e:	4147      	adcs	r7, r0
 8004780:	79e0      	ldrb	r0, [r4, #7]
 8004782:	01ff      	lsls	r7, r7, #7
 8004784:	4018      	ands	r0, r3
 8004786:	4307      	orrs	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa)
 8004788:	4a20      	ldr	r2, [pc, #128]	; (800480c <update_style_cache_children+0xfc>)
 800478a:	0029      	movs	r1, r5
 800478c:	71e7      	strb	r7, [r4, #7]
 800478e:	0030      	movs	r0, r6
 8004790:	f7ff fef4 	bl	800457c <_lv_obj_get_style_opa>
        list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
 8004794:	4243      	negs	r3, r0
 8004796:	4158      	adcs	r0, r3
 8004798:	2210      	movs	r2, #16
 800479a:	0103      	lsls	r3, r0, #4
 800479c:	79e0      	ldrb	r0, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int)
 800479e:	0029      	movs	r1, r5
 80047a0:	4390      	bics	r0, r2

        list->text_space_zero = 1;
 80047a2:	4318      	orrs	r0, r3
 80047a4:	1892      	adds	r2, r2, r2
 80047a6:	4310      	orrs	r0, r2
 80047a8:	71e0      	strb	r0, [r4, #7]
 80047aa:	4a19      	ldr	r2, [pc, #100]	; (8004810 <update_style_cache_children+0x100>)
 80047ac:	0030      	movs	r0, r6
 80047ae:	f7ff fca3 	bl	80040f8 <_lv_obj_get_style_int>
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 80047b2:	2800      	cmp	r0, #0
 80047b4:	d014      	beq.n	80047e0 <update_style_cache_children+0xd0>
           lv_obj_get_style_text_line_space(obj, part) != 0) {
            list->text_space_zero = 0;
 80047b6:	2220      	movs	r2, #32
 80047b8:	79e3      	ldrb	r3, [r4, #7]
 80047ba:	4393      	bics	r3, r2
 80047bc:	71e3      	strb	r3, [r4, #7]
        }

        list->ignore_cache = ignore_cache_ori;
 80047be:	2108      	movs	r1, #8
 80047c0:	9b01      	ldr	r3, [sp, #4]
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 80047c2:	3501      	adds	r5, #1
        list->ignore_cache = ignore_cache_ori;
 80047c4:	00da      	lsls	r2, r3, #3
 80047c6:	7963      	ldrb	r3, [r4, #5]
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 80047c8:	b2ed      	uxtb	r5, r5
        list->ignore_cache = ignore_cache_ori;
 80047ca:	438b      	bics	r3, r1
 80047cc:	4313      	orrs	r3, r2
 80047ce:	7163      	strb	r3, [r4, #5]
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 80047d0:	2d40      	cmp	r5, #64	; 0x40
 80047d2:	d1a0      	bne.n	8004716 <update_style_cache_children+0x6>
        result = _lv_ll_get_head(&obj->child_ll);
 80047d4:	1d30      	adds	r0, r6, #4
 80047d6:	f007 fa1e 	bl	800bc16 <_lv_ll_get_head>
    }

    lv_obj_t * child = lv_obj_get_child(obj, NULL);
    while(child) {
        update_style_cache_children(child);
        child = lv_obj_get_child(obj, child);
 80047da:	1e04      	subs	r4, r0, #0
    while(child) {
 80047dc:	d108      	bne.n	80047f0 <update_style_cache_children+0xe0>
    }

}
 80047de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int)
 80047e0:	4a0c      	ldr	r2, [pc, #48]	; (8004814 <update_style_cache_children+0x104>)
 80047e2:	0029      	movs	r1, r5
 80047e4:	0030      	movs	r0, r6
 80047e6:	f7ff fc87 	bl	80040f8 <_lv_obj_get_style_int>
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 80047ea:	2800      	cmp	r0, #0
 80047ec:	d1e3      	bne.n	80047b6 <update_style_cache_children+0xa6>
 80047ee:	e7e6      	b.n	80047be <update_style_cache_children+0xae>
        update_style_cache_children(child);
 80047f0:	0020      	movs	r0, r4
 80047f2:	f7ff ff8d 	bl	8004710 <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
 80047f6:	0021      	movs	r1, r4
 80047f8:	0030      	movs	r0, r6
 80047fa:	f7ff f921 	bl	8003a40 <lv_obj_get_child>
 80047fe:	e7ec      	b.n	80047da <update_style_cache_children+0xca>
 8004800:	0000800c 	.word	0x0000800c
 8004804:	00008082 	.word	0x00008082
 8004808:	0000808e 	.word	0x0000808e
 800480c:	000080ad 	.word	0x000080ad
 8004810:	00008080 	.word	0x00008080
 8004814:	00008081 	.word	0x00008081

08004818 <lv_obj_refresh_style>:
{
 8004818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481a:	0005      	movs	r5, r0
 * The cache will be updated when a cached property asked nest time
 * @param obj pointer to an object
 */
static void invalidate_style_cache(lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
{
    if(style_prop_is_cacheble(prop) == false) return;
 800481c:	0010      	movs	r0, r2
{
 800481e:	0014      	movs	r4, r2
    if(style_prop_is_cacheble(prop) == false) return;
 8004820:	2600      	movs	r6, #0
 8004822:	f7fe fe8d 	bl	8003540 <style_prop_is_cacheble>

    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
        if(list == NULL) break;
        list->valid_cache = 0;
 8004826:	2704      	movs	r7, #4
    if(style_prop_is_cacheble(prop) == false) return;
 8004828:	42b0      	cmp	r0, r6
 800482a:	d150      	bne.n	80048ce <lv_obj_refresh_style+0xb6>
    switch(prop) {
 800482c:	2c71      	cmp	r4, #113	; 0x71
 800482e:	d834      	bhi.n	800489a <lv_obj_refresh_style+0x82>
 8004830:	2c70      	cmp	r4, #112	; 0x70
 8004832:	d20b      	bcs.n	800484c <lv_obj_refresh_style+0x34>
 8004834:	2c41      	cmp	r4, #65	; 0x41
 8004836:	d823      	bhi.n	8004880 <lv_obj_refresh_style+0x68>
 8004838:	2c40      	cmp	r4, #64	; 0x40
 800483a:	d207      	bcs.n	800484c <lv_obj_refresh_style+0x34>
 800483c:	2c02      	cmp	r4, #2
 800483e:	d325      	bcc.n	800488c <lv_obj_refresh_style+0x74>
 8004840:	2c07      	cmp	r4, #7
 8004842:	d903      	bls.n	800484c <lv_obj_refresh_style+0x34>
 8004844:	0023      	movs	r3, r4
 8004846:	3b10      	subs	r3, #16
 8004848:	2b08      	cmp	r3, #8
 800484a:	d81f      	bhi.n	800488c <lv_obj_refresh_style+0x74>
        lv_obj_invalidate(obj);
 800484c:	0028      	movs	r0, r5
 800484e:	f7ff f83c 	bl	80038ca <lv_obj_invalidate>
        obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
 8004852:	2200      	movs	r2, #0
 8004854:	2104      	movs	r1, #4
 8004856:	0028      	movs	r0, r5
 8004858:	69eb      	ldr	r3, [r5, #28]
 800485a:	4798      	blx	r3
        switch(prop) {
 800485c:	2c15      	cmp	r4, #21
 800485e:	d303      	bcc.n	8004868 <lv_obj_refresh_style+0x50>
 8004860:	2c18      	cmp	r4, #24
 8004862:	d95d      	bls.n	8004920 <lv_obj_refresh_style+0x108>
 8004864:	2cff      	cmp	r4, #255	; 0xff
 8004866:	d05b      	beq.n	8004920 <lv_obj_refresh_style+0x108>
        lv_obj_invalidate(obj);
 8004868:	0028      	movs	r0, r5
 800486a:	f7ff f82e 	bl	80038ca <lv_obj_invalidate>
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
 800486e:	2cff      	cmp	r4, #255	; 0xff
 8004870:	d002      	beq.n	8004878 <lv_obj_refresh_style+0x60>
 8004872:	b224      	sxth	r4, r4
 8004874:	2c00      	cmp	r4, #0
 8004876:	da0c      	bge.n	8004892 <lv_obj_refresh_style+0x7a>
 8004878:	0028      	movs	r0, r5
 800487a:	f7ff f8eb 	bl	8003a54 <refresh_children_style>
}
 800487e:	e008      	b.n	8004892 <lv_obj_refresh_style+0x7a>
    switch(prop) {
 8004880:	2c53      	cmp	r4, #83	; 0x53
 8004882:	d807      	bhi.n	8004894 <lv_obj_refresh_style+0x7c>
 8004884:	2c50      	cmp	r4, #80	; 0x50
 8004886:	d2e1      	bcs.n	800484c <lv_obj_refresh_style+0x34>
 8004888:	2c4c      	cmp	r4, #76	; 0x4c
 800488a:	d0df      	beq.n	800484c <lv_obj_refresh_style+0x34>
        lv_obj_invalidate(obj);
 800488c:	0028      	movs	r0, r5
 800488e:	f7ff f81c 	bl	80038ca <lv_obj_invalidate>
}
 8004892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(prop) {
 8004894:	2c5c      	cmp	r4, #92	; 0x5c
 8004896:	d1f9      	bne.n	800488c <lv_obj_refresh_style+0x74>
 8004898:	e7d8      	b.n	800484c <lv_obj_refresh_style+0x34>
 800489a:	2c7f      	cmp	r4, #127	; 0x7f
 800489c:	d808      	bhi.n	80048b0 <lv_obj_refresh_style+0x98>
 800489e:	2c7e      	cmp	r4, #126	; 0x7e
 80048a0:	d2d4      	bcs.n	800484c <lv_obj_refresh_style+0x34>
 80048a2:	2c73      	cmp	r4, #115	; 0x73
 80048a4:	d3f2      	bcc.n	800488c <lv_obj_refresh_style+0x74>
 80048a6:	2c75      	cmp	r4, #117	; 0x75
 80048a8:	d9d0      	bls.n	800484c <lv_obj_refresh_style+0x34>
 80048aa:	2c7c      	cmp	r4, #124	; 0x7c
 80048ac:	d1ee      	bne.n	800488c <lv_obj_refresh_style+0x74>
 80048ae:	e7cd      	b.n	800484c <lv_obj_refresh_style+0x34>
 80048b0:	4b1f      	ldr	r3, [pc, #124]	; (8004930 <lv_obj_refresh_style+0x118>)
 80048b2:	429c      	cmp	r4, r3
 80048b4:	d807      	bhi.n	80048c6 <lv_obj_refresh_style+0xae>
 80048b6:	4b1f      	ldr	r3, [pc, #124]	; (8004934 <lv_obj_refresh_style+0x11c>)
 80048b8:	429c      	cmp	r4, r3
 80048ba:	d2c7      	bcs.n	800484c <lv_obj_refresh_style+0x34>
 80048bc:	2c90      	cmp	r4, #144	; 0x90
 80048be:	d0c5      	beq.n	800484c <lv_obj_refresh_style+0x34>
 80048c0:	2cff      	cmp	r4, #255	; 0xff
 80048c2:	d1e3      	bne.n	800488c <lv_obj_refresh_style+0x74>
 80048c4:	e7c2      	b.n	800484c <lv_obj_refresh_style+0x34>
 80048c6:	4b1c      	ldr	r3, [pc, #112]	; (8004938 <lv_obj_refresh_style+0x120>)
 80048c8:	429c      	cmp	r4, r3
 80048ca:	d1df      	bne.n	800488c <lv_obj_refresh_style+0x74>
 80048cc:	e7be      	b.n	800484c <lv_obj_refresh_style+0x34>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 80048ce:	b2f1      	uxtb	r1, r6
 80048d0:	0028      	movs	r0, r5
 80048d2:	f7ff fb7b 	bl	8003fcc <lv_obj_get_style_list>
        if(list == NULL) break;
 80048d6:	2800      	cmp	r0, #0
 80048d8:	d005      	beq.n	80048e6 <lv_obj_refresh_style+0xce>
        list->valid_cache = 0;
 80048da:	7943      	ldrb	r3, [r0, #5]
 80048dc:	3601      	adds	r6, #1
 80048de:	43bb      	bics	r3, r7
 80048e0:	7143      	strb	r3, [r0, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 80048e2:	2e40      	cmp	r6, #64	; 0x40
 80048e4:	d1f3      	bne.n	80048ce <lv_obj_refresh_style+0xb6>
    if(style_prop_is_cacheble(prop) == false) return;
 80048e6:	2640      	movs	r6, #64	; 0x40
    }

    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
        if(list == NULL) break;
        list->valid_cache = 0;
 80048e8:	2704      	movs	r7, #4
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 80048ea:	0031      	movs	r1, r6
 80048ec:	0028      	movs	r0, r5
 80048ee:	f7ff fb6d 	bl	8003fcc <lv_obj_get_style_list>
        if(list == NULL) break;
 80048f2:	2800      	cmp	r0, #0
 80048f4:	d006      	beq.n	8004904 <lv_obj_refresh_style+0xec>
        list->valid_cache = 0;
 80048f6:	7943      	ldrb	r3, [r0, #5]
 80048f8:	3601      	adds	r6, #1
 80048fa:	43bb      	bics	r3, r7
 80048fc:	b2f6      	uxtb	r6, r6
 80048fe:	7143      	strb	r3, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 8004900:	2eff      	cmp	r6, #255	; 0xff
 8004902:	d1f2      	bne.n	80048ea <lv_obj_refresh_style+0xd2>
        result = _lv_ll_get_head(&obj->child_ll);
 8004904:	1d28      	adds	r0, r5, #4
 8004906:	f007 f986 	bl	800bc16 <_lv_ll_get_head>
    }

    lv_obj_t * child = lv_obj_get_child(obj, NULL);
    while(child) {
        update_style_cache_children(child);
        child = lv_obj_get_child(obj, child);
 800490a:	1e06      	subs	r6, r0, #0
    while(child) {
 800490c:	d100      	bne.n	8004910 <lv_obj_refresh_style+0xf8>
 800490e:	e78d      	b.n	800482c <lv_obj_refresh_style+0x14>
        update_style_cache_children(child);
 8004910:	0030      	movs	r0, r6
 8004912:	f7ff fefd 	bl	8004710 <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
 8004916:	0031      	movs	r1, r6
 8004918:	0028      	movs	r0, r5
 800491a:	f7ff f891 	bl	8003a40 <lv_obj_get_child>
 800491e:	e7f4      	b.n	800490a <lv_obj_refresh_style+0xf2>
                if(obj->parent) obj->parent->signal_cb(obj->parent, LV_SIGNAL_CHILD_CHG, NULL);
 8004920:	6828      	ldr	r0, [r5, #0]
 8004922:	2800      	cmp	r0, #0
 8004924:	d0a0      	beq.n	8004868 <lv_obj_refresh_style+0x50>
 8004926:	69c3      	ldr	r3, [r0, #28]
 8004928:	2200      	movs	r2, #0
 800492a:	2101      	movs	r1, #1
 800492c:	4798      	blx	r3
 800492e:	e79b      	b.n	8004868 <lv_obj_refresh_style+0x50>
 8004930:	00008081 	.word	0x00008081
 8004934:	00008080 	.word	0x00008080
 8004938:	0000808e 	.word	0x0000808e

0800493c <lv_obj_reset_style_list>:
{
 800493c:	b570      	push	{r4, r5, r6, lr}
 800493e:	000d      	movs	r5, r1
 8004940:	0004      	movs	r4, r0
    lv_obj_clean_style_list(obj, part);
 8004942:	f7ff fb56 	bl	8003ff2 <lv_obj_clean_style_list>
    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
 8004946:	0029      	movs	r1, r5
 8004948:	22ff      	movs	r2, #255	; 0xff
 800494a:	0020      	movs	r0, r4
 800494c:	f7ff ff64 	bl	8004818 <lv_obj_refresh_style>
}
 8004950:	bd70      	pop	{r4, r5, r6, pc}

08004952 <report_style_mod_core>:
{
 8004952:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004954:	0006      	movs	r6, r0
 8004956:	000d      	movs	r5, r1
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 8004958:	2400      	movs	r4, #0
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 800495a:	0021      	movs	r1, r4
 800495c:	0028      	movs	r0, r5
 800495e:	f7ff fb35 	bl	8003fcc <lv_obj_get_style_list>
        if(list == NULL) break;
 8004962:	2800      	cmp	r0, #0
 8004964:	d02d      	beq.n	80049c2 <report_style_mod_core+0x70>
void _lv_style_list_reset(lv_style_list_t * style_list);

static inline lv_style_t * lv_style_list_get_style(lv_style_list_t * list, uint8_t id)
{
    if(list->has_trans && list->skip_trans) id++;
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
 8004966:	223f      	movs	r2, #63	; 0x3f
        for(ci = 0; ci < list->style_cnt; ci++) {
 8004968:	2300      	movs	r3, #0
 800496a:	7901      	ldrb	r1, [r0, #4]
 800496c:	068f      	lsls	r7, r1, #26
 800496e:	4011      	ands	r1, r2
 8004970:	0ebf      	lsrs	r7, r7, #26
 8004972:	9101      	str	r1, [sp, #4]
 8004974:	429f      	cmp	r7, r3
 8004976:	d920      	bls.n	80049ba <report_style_mod_core+0x68>
    if(list->has_trans && list->skip_trans) id++;
 8004978:	21c0      	movs	r1, #192	; 0xc0
 800497a:	8882      	ldrh	r2, [r0, #4]
 800497c:	0049      	lsls	r1, r1, #1
 800497e:	4011      	ands	r1, r2
 8004980:	468c      	mov	ip, r1
 8004982:	21c0      	movs	r1, #192	; 0xc0
 8004984:	001a      	movs	r2, r3
 8004986:	0049      	lsls	r1, r1, #1
 8004988:	458c      	cmp	ip, r1
 800498a:	d101      	bne.n	8004990 <report_style_mod_core+0x3e>
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	b2d2      	uxtb	r2, r2
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
 8004990:	9901      	ldr	r1, [sp, #4]
 8004992:	468c      	mov	ip, r1
 8004994:	2900      	cmp	r1, #0
 8004996:	d007      	beq.n	80049a8 <report_style_mod_core+0x56>
 8004998:	2100      	movs	r1, #0
 800499a:	468c      	mov	ip, r1
 800499c:	4297      	cmp	r7, r2
 800499e:	d903      	bls.n	80049a8 <report_style_mod_core+0x56>
    return list->style_list[id];
 80049a0:	6801      	ldr	r1, [r0, #0]
 80049a2:	0092      	lsls	r2, r2, #2
 80049a4:	5852      	ldr	r2, [r2, r1]
 80049a6:	4694      	mov	ip, r2
            if(_class == style || style == NULL) {
 80049a8:	4566      	cmp	r6, ip
 80049aa:	d001      	beq.n	80049b0 <report_style_mod_core+0x5e>
 80049ac:	2e00      	cmp	r6, #0
 80049ae:	d10e      	bne.n	80049ce <report_style_mod_core+0x7c>
                lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
 80049b0:	22ff      	movs	r2, #255	; 0xff
 80049b2:	0021      	movs	r1, r4
 80049b4:	0028      	movs	r0, r5
 80049b6:	f7ff ff2f 	bl	8004818 <lv_obj_refresh_style>
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 80049ba:	3401      	adds	r4, #1
 80049bc:	b2e4      	uxtb	r4, r4
 80049be:	2c40      	cmp	r4, #64	; 0x40
 80049c0:	d1cb      	bne.n	800495a <report_style_mod_core+0x8>
        result = _lv_ll_get_head(&obj->child_ll);
 80049c2:	1d28      	adds	r0, r5, #4
 80049c4:	f007 f927 	bl	800bc16 <_lv_ll_get_head>
        child = lv_obj_get_child(obj, child);
 80049c8:	1e04      	subs	r4, r0, #0
    while(child) {
 80049ca:	d103      	bne.n	80049d4 <report_style_mod_core+0x82>
}
 80049cc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        for(ci = 0; ci < list->style_cnt; ci++) {
 80049ce:	3301      	adds	r3, #1
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	e7cf      	b.n	8004974 <report_style_mod_core+0x22>
        report_style_mod_core(style, child);
 80049d4:	0021      	movs	r1, r4
 80049d6:	0030      	movs	r0, r6
 80049d8:	f7ff ffbb 	bl	8004952 <report_style_mod_core>
        child = lv_obj_get_child(obj, child);
 80049dc:	0021      	movs	r1, r4
 80049de:	0028      	movs	r0, r5
 80049e0:	f7ff f82e 	bl	8003a40 <lv_obj_get_child>
 80049e4:	e7f0      	b.n	80049c8 <report_style_mod_core+0x76>

080049e6 <lv_obj_report_style_mod>:
{
 80049e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e8:	0007      	movs	r7, r0
    lv_disp_t * d = lv_disp_get_next(NULL);
 80049ea:	2000      	movs	r0, #0
        d = lv_disp_get_next(d);
 80049ec:	f006 fd2c 	bl	800b448 <lv_disp_get_next>
 80049f0:	1e04      	subs	r4, r0, #0
    while(d) {
 80049f2:	d100      	bne.n	80049f6 <lv_obj_report_style_mod+0x10>
}
 80049f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _LV_LL_READ(d->scr_ll, i) {
 80049f6:	0026      	movs	r6, r4
 80049f8:	3630      	adds	r6, #48	; 0x30
 80049fa:	0030      	movs	r0, r6
 80049fc:	f007 f90b 	bl	800bc16 <_lv_ll_get_head>
 8004a00:	1e05      	subs	r5, r0, #0
 8004a02:	d101      	bne.n	8004a08 <lv_obj_report_style_mod+0x22>
        d = lv_disp_get_next(d);
 8004a04:	0020      	movs	r0, r4
 8004a06:	e7f1      	b.n	80049ec <lv_obj_report_style_mod+0x6>
            report_style_mod_core(style, i);
 8004a08:	0029      	movs	r1, r5
 8004a0a:	0038      	movs	r0, r7
 8004a0c:	f7ff ffa1 	bl	8004952 <report_style_mod_core>
        _LV_LL_READ(d->scr_ll, i) {
 8004a10:	0029      	movs	r1, r5
 8004a12:	0030      	movs	r0, r6
 8004a14:	f007 f907 	bl	800bc26 <_lv_ll_get_next>
 8004a18:	e7f2      	b.n	8004a00 <lv_obj_report_style_mod+0x1a>

08004a1a <lv_obj_is_focused>:
{
 8004a1a:	b510      	push	{r4, lr}
    if(obj->group_p) {
 8004a1c:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
 8004a1e:	0004      	movs	r4, r0
    return false;
 8004a20:	2000      	movs	r0, #0
    if(obj->group_p) {
 8004a22:	4283      	cmp	r3, r0
 8004a24:	d006      	beq.n	8004a34 <lv_obj_is_focused+0x1a>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
 8004a26:	0018      	movs	r0, r3
 8004a28:	f7fe fd3e 	bl	80034a8 <lv_group_get_focused>
 8004a2c:	1b00      	subs	r0, r0, r4
 8004a2e:	4243      	negs	r3, r0
 8004a30:	4158      	adcs	r0, r3
 8004a32:	b2c0      	uxtb	r0, r0
}
 8004a34:	bd10      	pop	{r4, pc}

08004a36 <lv_obj_handle_get_type_signal>:
{
 8004a36:	2300      	movs	r3, #0
 8004a38:	b510      	push	{r4, lr}
        if(buf->type[i] == NULL) break;
 8004a3a:	009c      	lsls	r4, r3, #2
 8004a3c:	5904      	ldr	r4, [r0, r4]
 8004a3e:	b2da      	uxtb	r2, r3
 8004a40:	2c00      	cmp	r4, #0
 8004a42:	d003      	beq.n	8004a4c <lv_obj_handle_get_type_signal+0x16>
 8004a44:	3301      	adds	r3, #1
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8004a46:	2b07      	cmp	r3, #7
 8004a48:	d1f7      	bne.n	8004a3a <lv_obj_handle_get_type_signal+0x4>
 8004a4a:	001a      	movs	r2, r3
    buf->type[i] = name;
 8004a4c:	0092      	lsls	r2, r2, #2
 8004a4e:	5011      	str	r1, [r2, r0]
}
 8004a50:	2001      	movs	r0, #1
 8004a52:	bd10      	pop	{r4, pc}

08004a54 <lv_obj_init_draw_rect_dsc>:
{
 8004a54:	b570      	push	{r4, r5, r6, lr}
 8004a56:	0014      	movs	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 8004a58:	2201      	movs	r2, #1
 8004a5a:	0005      	movs	r5, r0
 8004a5c:	000e      	movs	r6, r1
 8004a5e:	f7ff fb4b 	bl	80040f8 <_lv_obj_get_style_int>
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 8004a62:	7b23      	ldrb	r3, [r4, #12]
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
 8004a64:	8020      	strh	r0, [r4, #0]
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d028      	beq.n	8004abc <lv_obj_init_draw_rect_dsc+0x68>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 8004a6a:	222c      	movs	r2, #44	; 0x2c
 8004a6c:	0031      	movs	r1, r6
 8004a6e:	0028      	movs	r0, r5
 8004a70:	f7ff fd84 	bl	800457c <_lv_obj_get_style_opa>
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
 8004a74:	7320      	strb	r0, [r4, #12]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 8004a76:	2802      	cmp	r0, #2
 8004a78:	d920      	bls.n	8004abc <lv_obj_init_draw_rect_dsc+0x68>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 8004a7a:	2229      	movs	r2, #41	; 0x29
 8004a7c:	0031      	movs	r1, r6
 8004a7e:	0028      	movs	r0, r5
 8004a80:	f7ff fb02 	bl	8004088 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int)
 8004a84:	2223      	movs	r2, #35	; 0x23
            draw_dsc->bg_color = lv_obj_get_style_bg_color(obj, part);
 8004a86:	8060      	strh	r0, [r4, #2]
 8004a88:	0031      	movs	r1, r6
 8004a8a:	0028      	movs	r0, r5
 8004a8c:	f7ff fb34 	bl	80040f8 <_lv_obj_get_style_int>
 8004a90:	b2c0      	uxtb	r0, r0
            draw_dsc->bg_grad_dir =  lv_obj_get_style_bg_grad_dir(obj, part);
 8004a92:	71a0      	strb	r0, [r4, #6]
            if(draw_dsc->bg_grad_dir != LV_GRAD_DIR_NONE) {
 8004a94:	2800      	cmp	r0, #0
 8004a96:	d011      	beq.n	8004abc <lv_obj_init_draw_rect_dsc+0x68>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color)
 8004a98:	222a      	movs	r2, #42	; 0x2a
 8004a9a:	0031      	movs	r1, r6
 8004a9c:	0028      	movs	r0, r5
 8004a9e:	f7ff faf3 	bl	8004088 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int)
 8004aa2:	2221      	movs	r2, #33	; 0x21
                draw_dsc->bg_grad_color = lv_obj_get_style_bg_grad_color(obj, part);
 8004aa4:	80a0      	strh	r0, [r4, #4]
 8004aa6:	0031      	movs	r1, r6
 8004aa8:	0028      	movs	r0, r5
 8004aaa:	f7ff fb25 	bl	80040f8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int)
 8004aae:	2222      	movs	r2, #34	; 0x22
                draw_dsc->bg_main_color_stop =  lv_obj_get_style_bg_main_stop(obj, part);
 8004ab0:	8120      	strh	r0, [r4, #8]
 8004ab2:	0031      	movs	r1, r6
 8004ab4:	0028      	movs	r0, r5
 8004ab6:	f7ff fb1f 	bl	80040f8 <_lv_obj_get_style_int>
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
 8004aba:	8160      	strh	r0, [r4, #10]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int)
 8004abc:	2230      	movs	r2, #48	; 0x30
 8004abe:	0031      	movs	r1, r6
 8004ac0:	0028      	movs	r0, r5
 8004ac2:	f7ff fb19 	bl	80040f8 <_lv_obj_get_style_int>
    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
 8004ac6:	8220      	strh	r0, [r4, #16]
    if(draw_dsc->border_width) {
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	d017      	beq.n	8004afc <lv_obj_init_draw_rect_dsc+0xa8>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
 8004acc:	7d23      	ldrb	r3, [r4, #20]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d014      	beq.n	8004afc <lv_obj_init_draw_rect_dsc+0xa8>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa)
 8004ad2:	223c      	movs	r2, #60	; 0x3c
 8004ad4:	0031      	movs	r1, r6
 8004ad6:	0028      	movs	r0, r5
 8004ad8:	f7ff fd50 	bl	800457c <_lv_obj_get_style_opa>
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
 8004adc:	7520      	strb	r0, [r4, #20]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 8004ade:	2802      	cmp	r0, #2
 8004ae0:	d90c      	bls.n	8004afc <lv_obj_init_draw_rect_dsc+0xa8>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int)
 8004ae2:	2231      	movs	r2, #49	; 0x31
 8004ae4:	0031      	movs	r1, r6
 8004ae6:	0028      	movs	r0, r5
 8004ae8:	f7ff fb06 	bl	80040f8 <_lv_obj_get_style_int>
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
 8004aec:	b2c0      	uxtb	r0, r0
 8004aee:	8260      	strh	r0, [r4, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color)
 8004af0:	2239      	movs	r2, #57	; 0x39
 8004af2:	0031      	movs	r1, r6
 8004af4:	0028      	movs	r0, r5
 8004af6:	f7ff fac7 	bl	8004088 <_lv_obj_get_style_color>
                draw_dsc->border_color = lv_obj_get_style_border_color(obj, part);
 8004afa:	81e0      	strh	r0, [r4, #14]
}
 8004afc:	bd70      	pop	{r4, r5, r6, pc}
	...

08004b00 <lv_obj_design>:
{
 8004b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b02:	b09f      	sub	sp, #124	; 0x7c
 8004b04:	0004      	movs	r4, r0
 8004b06:	9101      	str	r1, [sp, #4]
 8004b08:	0015      	movs	r5, r2
    if(mode == LV_DESIGN_COVER_CHK) {
 8004b0a:	2a02      	cmp	r2, #2
 8004b0c:	d155      	bne.n	8004bba <lv_obj_design+0xba>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
 8004b0e:	2100      	movs	r1, #0
 8004b10:	f7ff fbc2 	bl	8004298 <lv_obj_get_style_clip_corner>
 8004b14:	0006      	movs	r6, r0
 8004b16:	2003      	movs	r0, #3
 8004b18:	2e00      	cmp	r6, #0
 8004b1a:	d12e      	bne.n	8004b7a <lv_obj_design+0x7a>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	0031      	movs	r1, r6
 8004b20:	0020      	movs	r0, r4
 8004b22:	f7ff fae9 	bl	80040f8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 8004b26:	2204      	movs	r2, #4
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 8004b28:	9002      	str	r0, [sp, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 8004b2a:	0031      	movs	r1, r6
 8004b2c:	0020      	movs	r0, r4
 8004b2e:	f7ff fae3 	bl	80040f8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 8004b32:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 8004b34:	0007      	movs	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 8004b36:	0031      	movs	r1, r6
 8004b38:	0020      	movs	r0, r4
 8004b3a:	f7ff fadd 	bl	80040f8 <_lv_obj_get_style_int>
        lv_area_copy(&coords, &obj->coords);
 8004b3e:	0021      	movs	r1, r4
 8004b40:	ad09      	add	r5, sp, #36	; 0x24
 8004b42:	9003      	str	r0, [sp, #12]
 8004b44:	3110      	adds	r1, #16
 8004b46:	0028      	movs	r0, r5
 8004b48:	f7fe fd72 	bl	8003630 <lv_area_copy>
        coords.x1 -= w;
 8004b4c:	882b      	ldrh	r3, [r5, #0]
 8004b4e:	b2bf      	uxth	r7, r7
 8004b50:	1bdb      	subs	r3, r3, r7
 8004b52:	802b      	strh	r3, [r5, #0]
        coords.x2 += w;
 8004b54:	88ab      	ldrh	r3, [r5, #4]
        coords.y1 -= h;
 8004b56:	886a      	ldrh	r2, [r5, #2]
        coords.x2 += w;
 8004b58:	18ff      	adds	r7, r7, r3
        coords.y1 -= h;
 8004b5a:	466b      	mov	r3, sp
 8004b5c:	899b      	ldrh	r3, [r3, #12]
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
 8004b5e:	0029      	movs	r1, r5
        coords.y1 -= h;
 8004b60:	1ad2      	subs	r2, r2, r3
 8004b62:	806a      	strh	r2, [r5, #2]
        coords.y2 += h;
 8004b64:	88ea      	ldrh	r2, [r5, #6]
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
 8004b66:	9801      	ldr	r0, [sp, #4]
        coords.y2 += h;
 8004b68:	189b      	adds	r3, r3, r2
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
 8004b6a:	9a02      	ldr	r2, [sp, #8]
        coords.x2 += w;
 8004b6c:	80af      	strh	r7, [r5, #4]
        coords.y2 += h;
 8004b6e:	80eb      	strh	r3, [r5, #6]
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
 8004b70:	f006 fe7b 	bl	800b86a <_lv_area_is_in>
 8004b74:	2800      	cmp	r0, #0
 8004b76:	d102      	bne.n	8004b7e <lv_obj_design+0x7e>
 8004b78:	2002      	movs	r0, #2
}
 8004b7a:	b01f      	add	sp, #124	; 0x7c
 8004b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 8004b7e:	222c      	movs	r2, #44	; 0x2c
 8004b80:	0031      	movs	r1, r6
 8004b82:	0020      	movs	r0, r4
 8004b84:	f7ff fcfa 	bl	800457c <_lv_obj_get_style_opa>
        if(lv_obj_get_style_bg_opa(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
 8004b88:	28fc      	cmp	r0, #252	; 0xfc
 8004b8a:	d9f5      	bls.n	8004b78 <lv_obj_design+0x78>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int)
 8004b8c:	0031      	movs	r1, r6
 8004b8e:	2220      	movs	r2, #32
 8004b90:	0020      	movs	r0, r4
 8004b92:	f7ff fab1 	bl	80040f8 <_lv_obj_get_style_int>
        if(lv_obj_get_style_bg_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
 8004b96:	b2c1      	uxtb	r1, r0
 8004b98:	2900      	cmp	r1, #0
 8004b9a:	d1ed      	bne.n	8004b78 <lv_obj_design+0x78>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int)
 8004b9c:	2232      	movs	r2, #50	; 0x32
 8004b9e:	0020      	movs	r0, r4
 8004ba0:	f7ff faaa 	bl	80040f8 <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
 8004ba4:	b2c1      	uxtb	r1, r0
 8004ba6:	2900      	cmp	r1, #0
 8004ba8:	d1e6      	bne.n	8004b78 <lv_obj_design+0x78>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa)
 8004baa:	4a66      	ldr	r2, [pc, #408]	; (8004d44 <lv_obj_design+0x244>)
 8004bac:	0020      	movs	r0, r4
 8004bae:	f7ff fce5 	bl	800457c <_lv_obj_get_style_opa>
        if(lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
 8004bb2:	28fc      	cmp	r0, #252	; 0xfc
 8004bb4:	d9e0      	bls.n	8004b78 <lv_obj_design+0x78>
        return LV_DESIGN_RES_COVER;
 8004bb6:	2001      	movs	r0, #1
 8004bb8:	e7df      	b.n	8004b7a <lv_obj_design+0x7a>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8004bba:	2a00      	cmp	r2, #0
 8004bbc:	d171      	bne.n	8004ca2 <lv_obj_design+0x1a2>
        lv_draw_rect_dsc_init(&draw_dsc);
 8004bbe:	ae09      	add	r6, sp, #36	; 0x24
 8004bc0:	0030      	movs	r0, r6
 8004bc2:	f005 f877 	bl	8009cb4 <lv_draw_rect_dsc_init>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int)
 8004bc6:	2233      	movs	r2, #51	; 0x33
 8004bc8:	0029      	movs	r1, r5
 8004bca:	0020      	movs	r0, r4
 8004bcc:	f7ff fa94 	bl	80040f8 <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	d003      	beq.n	8004bdc <lv_obj_design+0xdc>
            draw_dsc.border_post = 1;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	7db2      	ldrb	r2, [r6, #22]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	75b3      	strb	r3, [r6, #22]
        lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
 8004bdc:	0032      	movs	r2, r6
 8004bde:	2100      	movs	r1, #0
 8004be0:	0020      	movs	r0, r4
 8004be2:	f7ff ff37 	bl	8004a54 <lv_obj_init_draw_rect_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 8004be6:	2204      	movs	r2, #4
 8004be8:	2100      	movs	r1, #0
 8004bea:	0020      	movs	r0, r4
 8004bec:	f7ff fa84 	bl	80040f8 <_lv_obj_get_style_int>
        lv_area_copy(&coords, &obj->coords);
 8004bf0:	0027      	movs	r7, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 8004bf2:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 8004bf4:	9002      	str	r0, [sp, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	0020      	movs	r0, r4
 8004bfa:	f7ff fa7d 	bl	80040f8 <_lv_obj_get_style_int>
 8004bfe:	ad05      	add	r5, sp, #20
 8004c00:	3710      	adds	r7, #16
 8004c02:	9003      	str	r0, [sp, #12]
 8004c04:	0039      	movs	r1, r7
 8004c06:	0028      	movs	r0, r5
 8004c08:	f7fe fd12 	bl	8003630 <lv_area_copy>
        coords.x1 -= w;
 8004c0c:	466b      	mov	r3, sp
 8004c0e:	882a      	ldrh	r2, [r5, #0]
 8004c10:	891b      	ldrh	r3, [r3, #8]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
 8004c12:	9901      	ldr	r1, [sp, #4]
        coords.x1 -= w;
 8004c14:	1ad2      	subs	r2, r2, r3
 8004c16:	802a      	strh	r2, [r5, #0]
        coords.x2 += w;
 8004c18:	88aa      	ldrh	r2, [r5, #4]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
 8004c1a:	0028      	movs	r0, r5
        coords.x2 += w;
 8004c1c:	189b      	adds	r3, r3, r2
 8004c1e:	80ab      	strh	r3, [r5, #4]
        coords.y1 -= h;
 8004c20:	466b      	mov	r3, sp
 8004c22:	886a      	ldrh	r2, [r5, #2]
 8004c24:	899b      	ldrh	r3, [r3, #12]
 8004c26:	1ad2      	subs	r2, r2, r3
 8004c28:	806a      	strh	r2, [r5, #2]
        coords.y2 += h;
 8004c2a:	88ea      	ldrh	r2, [r5, #6]
 8004c2c:	189b      	adds	r3, r3, r2
        lv_draw_rect(&coords, clip_area, &draw_dsc);
 8004c2e:	0032      	movs	r2, r6
        coords.y2 += h;
 8004c30:	80eb      	strh	r3, [r5, #6]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
 8004c32:	f005 f867 	bl	8009d04 <lv_draw_rect>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
 8004c36:	2100      	movs	r1, #0
 8004c38:	0020      	movs	r0, r4
 8004c3a:	f7ff fb2d 	bl	8004298 <lv_obj_get_style_clip_corner>
 8004c3e:	2800      	cmp	r0, #0
 8004c40:	d02a      	beq.n	8004c98 <lv_obj_design+0x198>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
 8004c42:	201c      	movs	r0, #28
 8004c44:	f007 faba 	bl	800c1bc <_lv_mem_buf_get>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 8004c48:	2201      	movs	r2, #1
 8004c4a:	0005      	movs	r5, r0
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	0020      	movs	r0, r4
 8004c50:	f7ff fa52 	bl	80040f8 <_lv_obj_get_style_int>
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
 8004c54:	7db3      	ldrb	r3, [r6, #22]
 8004c56:	0002      	movs	r2, r0
 8004c58:	07db      	lsls	r3, r3, #31
 8004c5a:	d51f      	bpl.n	8004c9c <lv_obj_design+0x19c>
 8004c5c:	7d33      	ldrb	r3, [r6, #20]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d91c      	bls.n	8004c9c <lv_obj_design+0x19c>
 8004c62:	2110      	movs	r1, #16
 8004c64:	5e73      	ldrsh	r3, [r6, r1]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	dd18      	ble.n	8004c9c <lv_obj_design+0x19c>
                cc_area.x1 = obj->coords.x1 + 1;
 8004c6a:	8a23      	ldrh	r3, [r4, #16]
 8004c6c:	a907      	add	r1, sp, #28
 8004c6e:	3301      	adds	r3, #1
 8004c70:	800b      	strh	r3, [r1, #0]
                cc_area.y1 = obj->coords.y1 + 1;
 8004c72:	8a63      	ldrh	r3, [r4, #18]
 8004c74:	3301      	adds	r3, #1
 8004c76:	804b      	strh	r3, [r1, #2]
                cc_area.x2 = obj->coords.x2 - 1;
 8004c78:	8aa3      	ldrh	r3, [r4, #20]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	808b      	strh	r3, [r1, #4]
                cc_area.y2 = obj->coords.y2 - 1;
 8004c7e:	8ae3      	ldrh	r3, [r4, #22]
 8004c80:	3b01      	subs	r3, #1
 8004c82:	80cb      	strh	r3, [r1, #6]
                lv_draw_mask_radius_init(mp, &cc_area, r, false);
 8004c84:	2300      	movs	r3, #0
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
 8004c86:	0028      	movs	r0, r5
 8004c88:	f004 ff96 	bl	8009bb8 <lv_draw_mask_radius_init>
            lv_draw_mask_add(mp, obj + 8);
 8004c8c:	2398      	movs	r3, #152	; 0x98
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	18e1      	adds	r1, r4, r3
 8004c92:	0028      	movs	r0, r5
 8004c94:	f004 fe9a 	bl	80099cc <lv_draw_mask_add>
    return LV_DESIGN_RES_OK;
 8004c98:	2000      	movs	r0, #0
 8004c9a:	e76e      	b.n	8004b7a <lv_obj_design+0x7a>
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	0039      	movs	r1, r7
 8004ca0:	e7f1      	b.n	8004c86 <lv_obj_design+0x186>
    else if(mode == LV_DESIGN_DRAW_POST) {
 8004ca2:	2a01      	cmp	r2, #1
 8004ca4:	d1f8      	bne.n	8004c98 <lv_obj_design+0x198>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	f7ff faf6 	bl	8004298 <lv_obj_get_style_clip_corner>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d006      	beq.n	8004cbe <lv_obj_design+0x1be>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
 8004cb0:	2398      	movs	r3, #152	; 0x98
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	18e0      	adds	r0, r4, r3
 8004cb6:	f004 fecd 	bl	8009a54 <lv_draw_mask_remove_custom>
            _lv_mem_buf_release(param);
 8004cba:	f007 f987 	bl	800bfcc <_lv_mem_buf_release>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int)
 8004cbe:	2233      	movs	r2, #51	; 0x33
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	0020      	movs	r0, r4
 8004cc4:	f7ff fa18 	bl	80040f8 <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
 8004cc8:	2800      	cmp	r0, #0
 8004cca:	d0e5      	beq.n	8004c98 <lv_obj_design+0x198>
            lv_draw_rect_dsc_init(&draw_dsc);
 8004ccc:	af09      	add	r7, sp, #36	; 0x24
 8004cce:	0038      	movs	r0, r7
 8004cd0:	f004 fff0 	bl	8009cb4 <lv_draw_rect_dsc_init>
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
 8004cd4:	234a      	movs	r3, #74	; 0x4a
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 8004cd6:	2500      	movs	r5, #0
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
 8004cd8:	aa04      	add	r2, sp, #16
 8004cda:	189b      	adds	r3, r3, r2
 8004cdc:	701d      	strb	r5, [r3, #0]
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
 8004cde:	233e      	movs	r3, #62	; 0x3e
 8004ce0:	189b      	adds	r3, r3, r2
 8004ce2:	701d      	strb	r5, [r3, #0]
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
 8004ce4:	0020      	movs	r0, r4
            draw_dsc.value_opa = LV_OPA_TRANSP;
 8004ce6:	ab1a      	add	r3, sp, #104	; 0x68
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
 8004ce8:	003a      	movs	r2, r7
 8004cea:	0029      	movs	r1, r5
            draw_dsc.value_opa = LV_OPA_TRANSP;
 8004cec:	701d      	strb	r5, [r3, #0]
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 8004cee:	733d      	strb	r5, [r7, #12]
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
 8004cf0:	f7ff feb0 	bl	8004a54 <lv_obj_init_draw_rect_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 8004cf4:	2204      	movs	r2, #4
 8004cf6:	0029      	movs	r1, r5
 8004cf8:	0020      	movs	r0, r4
 8004cfa:	f7ff f9fd 	bl	80040f8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 8004cfe:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 8004d00:	0006      	movs	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 8004d02:	0029      	movs	r1, r5
 8004d04:	0020      	movs	r0, r4
 8004d06:	f7ff f9f7 	bl	80040f8 <_lv_obj_get_style_int>
            lv_area_copy(&coords, &obj->coords);
 8004d0a:	0021      	movs	r1, r4
 8004d0c:	ac07      	add	r4, sp, #28
 8004d0e:	9002      	str	r0, [sp, #8]
 8004d10:	3110      	adds	r1, #16
 8004d12:	0020      	movs	r0, r4
 8004d14:	f7fe fc8c 	bl	8003630 <lv_area_copy>
            coords.x1 -= w;
 8004d18:	8823      	ldrh	r3, [r4, #0]
 8004d1a:	b2b6      	uxth	r6, r6
 8004d1c:	1b9b      	subs	r3, r3, r6
 8004d1e:	8023      	strh	r3, [r4, #0]
            coords.x2 += w;
 8004d20:	88a3      	ldrh	r3, [r4, #4]
            coords.y1 -= h;
 8004d22:	8862      	ldrh	r2, [r4, #2]
            coords.x2 += w;
 8004d24:	18f6      	adds	r6, r6, r3
            coords.y1 -= h;
 8004d26:	466b      	mov	r3, sp
 8004d28:	891b      	ldrh	r3, [r3, #8]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
 8004d2a:	0020      	movs	r0, r4
            coords.y1 -= h;
 8004d2c:	1ad2      	subs	r2, r2, r3
 8004d2e:	8062      	strh	r2, [r4, #2]
            coords.y2 += h;
 8004d30:	88e2      	ldrh	r2, [r4, #6]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
 8004d32:	9901      	ldr	r1, [sp, #4]
            coords.y2 += h;
 8004d34:	189b      	adds	r3, r3, r2
            lv_draw_rect(&coords, clip_area, &draw_dsc);
 8004d36:	003a      	movs	r2, r7
            coords.x2 += w;
 8004d38:	80a6      	strh	r6, [r4, #4]
            coords.y2 += h;
 8004d3a:	80e3      	strh	r3, [r4, #6]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
 8004d3c:	f004 ffe2 	bl	8009d04 <lv_draw_rect>
    return LV_DESIGN_RES_OK;
 8004d40:	0028      	movs	r0, r5
 8004d42:	e71a      	b.n	8004b7a <lv_obj_design+0x7a>
 8004d44:	0000800c 	.word	0x0000800c

08004d48 <lv_obj_init_draw_label_dsc>:
{
 8004d48:	b570      	push	{r4, r5, r6, lr}
 8004d4a:	0014      	movs	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa)
 8004d4c:	4a1d      	ldr	r2, [pc, #116]	; (8004dc4 <lv_obj_init_draw_label_dsc+0x7c>)
 8004d4e:	0005      	movs	r5, r0
 8004d50:	000e      	movs	r6, r1
 8004d52:	f7ff fc13 	bl	800457c <_lv_obj_get_style_opa>
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
 8004d56:	7320      	strb	r0, [r4, #12]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8004d58:	2802      	cmp	r0, #2
 8004d5a:	d931      	bls.n	8004dc0 <lv_obj_init_draw_label_dsc+0x78>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
 8004d5c:	4a1a      	ldr	r2, [pc, #104]	; (8004dc8 <lv_obj_init_draw_label_dsc+0x80>)
 8004d5e:	0031      	movs	r1, r6
 8004d60:	0028      	movs	r0, r5
 8004d62:	f7ff f991 	bl	8004088 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int)
 8004d66:	4a19      	ldr	r2, [pc, #100]	; (8004dcc <lv_obj_init_draw_label_dsc+0x84>)
    draw_dsc->color = lv_obj_get_style_text_color(obj, part);
 8004d68:	8020      	strh	r0, [r4, #0]
 8004d6a:	0031      	movs	r1, r6
 8004d6c:	0028      	movs	r0, r5
 8004d6e:	f7ff f9c3 	bl	80040f8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int)
 8004d72:	4a17      	ldr	r2, [pc, #92]	; (8004dd0 <lv_obj_init_draw_label_dsc+0x88>)
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
 8004d74:	8220      	strh	r0, [r4, #16]
 8004d76:	0031      	movs	r1, r6
 8004d78:	0028      	movs	r0, r5
 8004d7a:	f7ff f9bd 	bl	80040f8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int)
 8004d7e:	4a15      	ldr	r2, [pc, #84]	; (8004dd4 <lv_obj_init_draw_label_dsc+0x8c>)
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
 8004d80:	81e0      	strh	r0, [r4, #14]
 8004d82:	0031      	movs	r1, r6
 8004d84:	0028      	movs	r0, r5
 8004d86:	f7ff f9b7 	bl	80040f8 <_lv_obj_get_style_int>
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
 8004d8a:	1ce3      	adds	r3, r4, #3
 8004d8c:	77d8      	strb	r0, [r3, #31]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr)
 8004d8e:	4a12      	ldr	r2, [pc, #72]	; (8004dd8 <lv_obj_init_draw_label_dsc+0x90>)
 8004d90:	0031      	movs	r1, r6
 8004d92:	0028      	movs	r0, r5
 8004d94:	f7ff fc5e 	bl	8004654 <_lv_obj_get_style_ptr>
    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 8004d98:	4b10      	ldr	r3, [pc, #64]	; (8004ddc <lv_obj_init_draw_label_dsc+0x94>)
 8004d9a:	6962      	ldr	r2, [r4, #20]
    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
 8004d9c:	60a0      	str	r0, [r4, #8]
    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d00e      	beq.n	8004dc0 <lv_obj_init_draw_label_dsc+0x78>
 8004da2:	69a2      	ldr	r2, [r4, #24]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d00b      	beq.n	8004dc0 <lv_obj_init_draw_label_dsc+0x78>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color)
 8004da8:	4a0d      	ldr	r2, [pc, #52]	; (8004de0 <lv_obj_init_draw_label_dsc+0x98>)
 8004daa:	0031      	movs	r1, r6
 8004dac:	0028      	movs	r0, r5
 8004dae:	f7ff f96b 	bl	8004088 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color)
 8004db2:	4a0c      	ldr	r2, [pc, #48]	; (8004de4 <lv_obj_init_draw_label_dsc+0x9c>)
        draw_dsc->sel_color = lv_obj_get_style_text_sel_color(obj, part);
 8004db4:	8060      	strh	r0, [r4, #2]
 8004db6:	0031      	movs	r1, r6
 8004db8:	0028      	movs	r0, r5
 8004dba:	f7ff f965 	bl	8004088 <_lv_obj_get_style_color>
        draw_dsc->sel_bg_color = lv_obj_get_style_text_sel_bg_color(obj, part);
 8004dbe:	80a0      	strh	r0, [r4, #4]
}
 8004dc0:	bd70      	pop	{r4, r5, r6, pc}
 8004dc2:	46c0      	nop			; (mov r8, r8)
 8004dc4:	0000808c 	.word	0x0000808c
 8004dc8:	00008089 	.word	0x00008089
 8004dcc:	00008080 	.word	0x00008080
 8004dd0:	00008081 	.word	0x00008081
 8004dd4:	00008082 	.word	0x00008082
 8004dd8:	0000808e 	.word	0x0000808e
 8004ddc:	0000ffff 	.word	0x0000ffff
 8004de0:	0000808a 	.word	0x0000808a
 8004de4:	0000808b 	.word	0x0000808b

08004de8 <lv_obj_init_draw_img_dsc>:
{
 8004de8:	b570      	push	{r4, r5, r6, lr}
 8004dea:	0014      	movs	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa)
 8004dec:	4a16      	ldr	r2, [pc, #88]	; (8004e48 <lv_obj_init_draw_img_dsc+0x60>)
 8004dee:	0005      	movs	r5, r0
 8004df0:	000e      	movs	r6, r1
 8004df2:	f7ff fbc3 	bl	800457c <_lv_obj_get_style_opa>
    draw_dsc->opa = lv_obj_get_style_image_opa(obj, part);
 8004df6:	7020      	strb	r0, [r4, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8004df8:	2802      	cmp	r0, #2
 8004dfa:	d924      	bls.n	8004e46 <lv_obj_init_draw_img_dsc+0x5e>
    draw_dsc->angle = 0;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	8063      	strh	r3, [r4, #2]
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
 8004e00:	3301      	adds	r3, #1
 8004e02:	33ff      	adds	r3, #255	; 0xff
 8004e04:	8123      	strh	r3, [r4, #8]
 8004e06:	8aab      	ldrh	r3, [r5, #20]
 8004e08:	8a2a      	ldrh	r2, [r5, #16]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
 8004e0e:	b21b      	sxth	r3, r3
 8004e10:	0fda      	lsrs	r2, r3, #31
 8004e12:	18d3      	adds	r3, r2, r3
 8004e14:	105b      	asrs	r3, r3, #1
 8004e16:	80a3      	strh	r3, [r4, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8004e18:	8aeb      	ldrh	r3, [r5, #22]
 8004e1a:	8a6a      	ldrh	r2, [r5, #18]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
 8004e20:	b21b      	sxth	r3, r3
 8004e22:	0fda      	lsrs	r2, r3, #31
 8004e24:	18d3      	adds	r3, r2, r3
 8004e26:	105b      	asrs	r3, r3, #1
 8004e28:	80e3      	strh	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa)
 8004e2a:	4a08      	ldr	r2, [pc, #32]	; (8004e4c <lv_obj_init_draw_img_dsc+0x64>)
 8004e2c:	0031      	movs	r1, r6
 8004e2e:	0028      	movs	r0, r5
 8004e30:	f7ff fba4 	bl	800457c <_lv_obj_get_style_opa>
    draw_dsc->recolor_opa = lv_obj_get_style_image_recolor_opa(obj, part);
 8004e34:	72a0      	strb	r0, [r4, #10]
    if(draw_dsc->recolor_opa > 0) {
 8004e36:	2800      	cmp	r0, #0
 8004e38:	d005      	beq.n	8004e46 <lv_obj_init_draw_img_dsc+0x5e>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color)
 8004e3a:	4a05      	ldr	r2, [pc, #20]	; (8004e50 <lv_obj_init_draw_img_dsc+0x68>)
 8004e3c:	0031      	movs	r1, r6
 8004e3e:	0028      	movs	r0, r5
 8004e40:	f7ff f922 	bl	8004088 <_lv_obj_get_style_color>
        draw_dsc->recolor = lv_obj_get_style_image_recolor(obj, part);
 8004e44:	81a0      	strh	r0, [r4, #12]
}
 8004e46:	bd70      	pop	{r4, r5, r6, pc}
 8004e48:	000080ac 	.word	0x000080ac
 8004e4c:	000080ad 	.word	0x000080ad
 8004e50:	000080a9 	.word	0x000080a9

08004e54 <lv_obj_init_draw_line_dsc>:
{
 8004e54:	b570      	push	{r4, r5, r6, lr}
 8004e56:	0014      	movs	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int)
 8004e58:	2290      	movs	r2, #144	; 0x90
 8004e5a:	0005      	movs	r5, r0
 8004e5c:	000e      	movs	r6, r1
 8004e5e:	f7ff f94b 	bl	80040f8 <_lv_obj_get_style_int>
    draw_dsc->width = lv_obj_get_style_line_width(obj, part);
 8004e62:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
 8004e64:	2800      	cmp	r0, #0
 8004e66:	d02d      	beq.n	8004ec4 <lv_obj_init_draw_line_dsc+0x70>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa)
 8004e68:	229c      	movs	r2, #156	; 0x9c
 8004e6a:	0031      	movs	r1, r6
 8004e6c:	0028      	movs	r0, r5
 8004e6e:	f7ff fb85 	bl	800457c <_lv_obj_get_style_opa>
    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
 8004e72:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8004e74:	2802      	cmp	r0, #2
 8004e76:	d925      	bls.n	8004ec4 <lv_obj_init_draw_line_dsc+0x70>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color)
 8004e78:	2299      	movs	r2, #153	; 0x99
 8004e7a:	0031      	movs	r1, r6
 8004e7c:	0028      	movs	r0, r5
 8004e7e:	f7ff f903 	bl	8004088 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int)
 8004e82:	2292      	movs	r2, #146	; 0x92
    draw_dsc->color = lv_obj_get_style_line_color(obj, part);
 8004e84:	8020      	strh	r0, [r4, #0]
 8004e86:	0031      	movs	r1, r6
 8004e88:	0028      	movs	r0, r5
 8004e8a:	f7ff f935 	bl	80040f8 <_lv_obj_get_style_int>
    draw_dsc->dash_width = lv_obj_get_style_line_dash_width(obj, part);
 8004e8e:	80a0      	strh	r0, [r4, #4]
    if(draw_dsc->dash_width) {
 8004e90:	2800      	cmp	r0, #0
 8004e92:	d005      	beq.n	8004ea0 <lv_obj_init_draw_line_dsc+0x4c>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int)
 8004e94:	2293      	movs	r2, #147	; 0x93
 8004e96:	0031      	movs	r1, r6
 8004e98:	0028      	movs	r0, r5
 8004e9a:	f7ff f92d 	bl	80040f8 <_lv_obj_get_style_int>
        draw_dsc->dash_gap = lv_obj_get_style_line_dash_gap(obj, part);
 8004e9e:	80e0      	strh	r0, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int)
 8004ea0:	2294      	movs	r2, #148	; 0x94
 8004ea2:	0031      	movs	r1, r6
 8004ea4:	0028      	movs	r0, r5
 8004ea6:	f7ff f927 	bl	80040f8 <_lv_obj_get_style_int>
    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
 8004eaa:	0003      	movs	r3, r0
 8004eac:	2104      	movs	r1, #4
 8004eae:	1e58      	subs	r0, r3, #1
 8004eb0:	4183      	sbcs	r3, r0
 8004eb2:	7a60      	ldrb	r0, [r4, #9]
 8004eb4:	009a      	lsls	r2, r3, #2
 8004eb6:	4388      	bics	r0, r1
    draw_dsc->round_end = draw_dsc->round_start;
 8004eb8:	4310      	orrs	r0, r2
 8004eba:	2208      	movs	r2, #8
 8004ebc:	00db      	lsls	r3, r3, #3
 8004ebe:	4390      	bics	r0, r2
 8004ec0:	4318      	orrs	r0, r3
 8004ec2:	7260      	strb	r0, [r4, #9]
}
 8004ec4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004ec8 <style_snapshot>:
    }
}

static void style_snapshot(lv_obj_t * obj, uint8_t part, style_snapshot_t * shot)
{
 8004ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eca:	0014      	movs	r4, r2
 8004ecc:	b085      	sub	sp, #20
 8004ece:	000e      	movs	r6, r1
    _lv_obj_disable_style_caching(obj, true);
 8004ed0:	2101      	movs	r1, #1
{
 8004ed2:	0005      	movs	r5, r0
    _lv_obj_disable_style_caching(obj, true);
 8004ed4:	f7ff f895 	bl	8004002 <_lv_obj_disable_style_caching>
    _lv_memset_00(shot, sizeof(style_snapshot_t));
 8004ed8:	21bc      	movs	r1, #188	; 0xbc
 8004eda:	0020      	movs	r0, r4
 8004edc:	f007 f9f6 	bl	800c2cc <_lv_memset_00>
    lv_draw_rect_dsc_init(&shot->rect);
 8004ee0:	0020      	movs	r0, r4
 8004ee2:	f004 fee7 	bl	8009cb4 <lv_draw_rect_dsc_init>
    lv_draw_label_dsc_init(&shot->label);
 8004ee6:	0023      	movs	r3, r4
 8004ee8:	3354      	adds	r3, #84	; 0x54
 8004eea:	0018      	movs	r0, r3
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	f002 fe85 	bl	8007bfc <lv_draw_label_dsc_init>
    lv_draw_img_dsc_init(&shot->img);
 8004ef2:	0023      	movs	r3, r4
 8004ef4:	3382      	adds	r3, #130	; 0x82
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	9301      	str	r3, [sp, #4]
 8004efa:	f002 fd5d 	bl	80079b8 <lv_draw_img_dsc_init>
    lv_draw_line_dsc_init(&shot->line);
 8004efe:	0023      	movs	r3, r4
 8004f00:	3378      	adds	r3, #120	; 0x78
 8004f02:	0018      	movs	r0, r3
 8004f04:	9302      	str	r3, [sp, #8]
 8004f06:	f003 fcf5 	bl	80088f4 <lv_draw_line_dsc_init>

    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8004f0a:	0031      	movs	r1, r6
 8004f0c:	0028      	movs	r0, r5
 8004f0e:	f7ff f85d 	bl	8003fcc <lv_obj_get_style_list>
    bool trans_ori = list->skip_trans;
 8004f12:	7943      	ldrb	r3, [r0, #5]
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8004f14:	0007      	movs	r7, r0
    bool trans_ori = list->skip_trans;
 8004f16:	07da      	lsls	r2, r3, #31
 8004f18:	0fd2      	lsrs	r2, r2, #31
 8004f1a:	9203      	str	r2, [sp, #12]
    list->skip_trans = 1;
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	7143      	strb	r3, [r0, #5]

    lv_obj_init_draw_rect_dsc(obj, part, &shot->rect);
 8004f22:	0022      	movs	r2, r4
 8004f24:	0031      	movs	r1, r6
 8004f26:	0028      	movs	r0, r5
 8004f28:	f7ff fd94 	bl	8004a54 <lv_obj_init_draw_rect_dsc>
    lv_obj_init_draw_label_dsc(obj, part, &shot->label);
 8004f2c:	9a00      	ldr	r2, [sp, #0]
 8004f2e:	0031      	movs	r1, r6
 8004f30:	0028      	movs	r0, r5
 8004f32:	f7ff ff09 	bl	8004d48 <lv_obj_init_draw_label_dsc>
    lv_obj_init_draw_img_dsc(obj, part, &shot->img);
 8004f36:	9a01      	ldr	r2, [sp, #4]
 8004f38:	0031      	movs	r1, r6
 8004f3a:	0028      	movs	r0, r5
 8004f3c:	f7ff ff54 	bl	8004de8 <lv_obj_init_draw_img_dsc>
    lv_obj_init_draw_line_dsc(obj, part, &shot->line);
 8004f40:	9a02      	ldr	r2, [sp, #8]
 8004f42:	0031      	movs	r1, r6
 8004f44:	0028      	movs	r0, r5
 8004f46:	f7ff ff85 	bl	8004e54 <lv_obj_init_draw_line_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 8004f4a:	0031      	movs	r1, r6
 8004f4c:	2210      	movs	r2, #16
 8004f4e:	0028      	movs	r0, r5
 8004f50:	f7ff f8d2 	bl	80040f8 <_lv_obj_get_style_int>

    shot->pad_top = lv_obj_get_style_pad_top(obj, part);
 8004f54:	0023      	movs	r3, r4
 8004f56:	3392      	adds	r3, #146	; 0x92
 8004f58:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 8004f5a:	0031      	movs	r1, r6
 8004f5c:	2211      	movs	r2, #17
 8004f5e:	0028      	movs	r0, r5
 8004f60:	f7ff f8ca 	bl	80040f8 <_lv_obj_get_style_int>
    shot->pad_bottom = lv_obj_get_style_pad_bottom(obj, part);
 8004f64:	0023      	movs	r3, r4
 8004f66:	3394      	adds	r3, #148	; 0x94
 8004f68:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 8004f6a:	0031      	movs	r1, r6
 8004f6c:	2213      	movs	r2, #19
 8004f6e:	0028      	movs	r0, r5
 8004f70:	f7ff f8c2 	bl	80040f8 <_lv_obj_get_style_int>
    shot->pad_right = lv_obj_get_style_pad_right(obj, part);
 8004f74:	0023      	movs	r3, r4
 8004f76:	3396      	adds	r3, #150	; 0x96
 8004f78:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 8004f7a:	0031      	movs	r1, r6
 8004f7c:	2212      	movs	r2, #18
 8004f7e:	0028      	movs	r0, r5
 8004f80:	f7ff f8ba 	bl	80040f8 <_lv_obj_get_style_int>
    shot->pad_left = lv_obj_get_style_pad_left(obj, part);
 8004f84:	0023      	movs	r3, r4
 8004f86:	3398      	adds	r3, #152	; 0x98
 8004f88:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 8004f8a:	0031      	movs	r1, r6
 8004f8c:	2214      	movs	r2, #20
 8004f8e:	0028      	movs	r0, r5
 8004f90:	f7ff f8b2 	bl	80040f8 <_lv_obj_get_style_int>
    shot->pad_inner = lv_obj_get_style_pad_inner(obj, part);
 8004f94:	0023      	movs	r3, r4
 8004f96:	339a      	adds	r3, #154	; 0x9a
 8004f98:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int)
 8004f9a:	0031      	movs	r1, r6
 8004f9c:	2215      	movs	r2, #21
 8004f9e:	0028      	movs	r0, r5
 8004fa0:	f7ff f8aa 	bl	80040f8 <_lv_obj_get_style_int>
    shot->margin_top = lv_obj_get_style_margin_top(obj, part);
 8004fa4:	0023      	movs	r3, r4
 8004fa6:	339c      	adds	r3, #156	; 0x9c
 8004fa8:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int)
 8004faa:	0031      	movs	r1, r6
 8004fac:	2216      	movs	r2, #22
 8004fae:	0028      	movs	r0, r5
 8004fb0:	f7ff f8a2 	bl	80040f8 <_lv_obj_get_style_int>
    shot->margin_bottom = lv_obj_get_style_margin_bottom(obj, part);
 8004fb4:	0023      	movs	r3, r4
 8004fb6:	339e      	adds	r3, #158	; 0x9e
 8004fb8:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int)
 8004fba:	0031      	movs	r1, r6
 8004fbc:	2217      	movs	r2, #23
 8004fbe:	0028      	movs	r0, r5
 8004fc0:	f7ff f89a 	bl	80040f8 <_lv_obj_get_style_int>
    shot->margin_left = lv_obj_get_style_margin_left(obj, part);
 8004fc4:	0023      	movs	r3, r4
 8004fc6:	33a0      	adds	r3, #160	; 0xa0
 8004fc8:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int)
 8004fca:	0031      	movs	r1, r6
 8004fcc:	2218      	movs	r2, #24
 8004fce:	0028      	movs	r0, r5
 8004fd0:	f7ff f892 	bl	80040f8 <_lv_obj_get_style_int>
    shot->margin_right = lv_obj_get_style_margin_right(obj, part);
 8004fd4:	0023      	movs	r3, r4
 8004fd6:	33a2      	adds	r3, #162	; 0xa2
 8004fd8:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int)
 8004fda:	0031      	movs	r1, r6
 8004fdc:	2203      	movs	r2, #3
 8004fde:	0028      	movs	r0, r5
 8004fe0:	f7ff f88a 	bl	80040f8 <_lv_obj_get_style_int>
    shot->size = lv_obj_get_style_size(obj, part);
 8004fe4:	0023      	movs	r3, r4
 8004fe6:	33a4      	adds	r3, #164	; 0xa4
 8004fe8:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 8004fea:	0031      	movs	r1, r6
 8004fec:	2204      	movs	r2, #4
 8004fee:	0028      	movs	r0, r5
 8004ff0:	f7ff f882 	bl	80040f8 <_lv_obj_get_style_int>
    shot->transform_width = lv_obj_get_style_transform_width(obj, part);
 8004ff4:	0023      	movs	r3, r4
 8004ff6:	33a6      	adds	r3, #166	; 0xa6
 8004ff8:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 8004ffa:	0031      	movs	r1, r6
 8004ffc:	2205      	movs	r2, #5
 8004ffe:	0028      	movs	r0, r5
 8005000:	f7ff f87a 	bl	80040f8 <_lv_obj_get_style_int>
    shot->transform_height = lv_obj_get_style_transform_height(obj, part);
 8005004:	0023      	movs	r3, r4
 8005006:	33a8      	adds	r3, #168	; 0xa8
 8005008:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int)
 800500a:	0031      	movs	r1, r6
 800500c:	2206      	movs	r2, #6
 800500e:	0028      	movs	r0, r5
 8005010:	f7ff f872 	bl	80040f8 <_lv_obj_get_style_int>
    shot->transform_angle = lv_obj_get_style_transform_angle(obj, part);
 8005014:	0023      	movs	r3, r4
 8005016:	33aa      	adds	r3, #170	; 0xaa
 8005018:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int)
 800501a:	0031      	movs	r1, r6
 800501c:	2207      	movs	r2, #7
 800501e:	0028      	movs	r0, r5
 8005020:	f7ff f86a 	bl	80040f8 <_lv_obj_get_style_int>
    shot->transform_zoom = lv_obj_get_style_transform_zoom(obj, part);
 8005024:	0023      	movs	r3, r4
 8005026:	33ac      	adds	r3, #172	; 0xac
 8005028:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const lv_anim_path_t *, _ptr)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int)
 800502a:	0031      	movs	r1, r6
 800502c:	22c0      	movs	r2, #192	; 0xc0
 800502e:	0028      	movs	r0, r5
 8005030:	f7ff f862 	bl	80040f8 <_lv_obj_get_style_int>
    shot->scale_width = lv_obj_get_style_scale_width(obj, part);
 8005034:	0023      	movs	r3, r4
 8005036:	33ae      	adds	r3, #174	; 0xae
 8005038:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int)
 800503a:	0031      	movs	r1, r6
 800503c:	22c1      	movs	r2, #193	; 0xc1
 800503e:	0028      	movs	r0, r5
 8005040:	f7ff f85a 	bl	80040f8 <_lv_obj_get_style_int>
    shot->scale_border_width = lv_obj_get_style_scale_border_width(obj, part);
 8005044:	0023      	movs	r3, r4
 8005046:	33b0      	adds	r3, #176	; 0xb0
 8005048:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int)
 800504a:	0031      	movs	r1, r6
 800504c:	22c2      	movs	r2, #194	; 0xc2
 800504e:	0028      	movs	r0, r5
 8005050:	f7ff f852 	bl	80040f8 <_lv_obj_get_style_int>
    shot->scale_end_border_width = lv_obj_get_style_scale_end_border_width(obj, part);
 8005054:	0023      	movs	r3, r4
 8005056:	33b2      	adds	r3, #178	; 0xb2
 8005058:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int)
 800505a:	0031      	movs	r1, r6
 800505c:	22c3      	movs	r2, #195	; 0xc3
 800505e:	0028      	movs	r0, r5
 8005060:	f7ff f84a 	bl	80040f8 <_lv_obj_get_style_int>
    shot->scale_end_line_width = lv_obj_get_style_scale_end_line_width(obj, part);
 8005064:	0023      	movs	r3, r4
 8005066:	33b4      	adds	r3, #180	; 0xb4
 8005068:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color)
 800506a:	0031      	movs	r1, r6
 800506c:	22c9      	movs	r2, #201	; 0xc9
 800506e:	0028      	movs	r0, r5
 8005070:	f7ff f80a 	bl	8004088 <_lv_obj_get_style_color>
    shot->scale_grad_color = lv_obj_get_style_scale_grad_color(obj, part);
 8005074:	0023      	movs	r3, r4
 8005076:	33b6      	adds	r3, #182	; 0xb6
 8005078:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color)
 800507a:	0031      	movs	r1, r6
 800507c:	22ca      	movs	r2, #202	; 0xca
 800507e:	0028      	movs	r0, r5
 8005080:	f7ff f802 	bl	8004088 <_lv_obj_get_style_color>
    shot->scale_end_color = lv_obj_get_style_scale_end_color(obj, part);
 8005084:	0023      	movs	r3, r4
 8005086:	33b8      	adds	r3, #184	; 0xb8
 8005088:	8018      	strh	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa)
 800508a:	4a16      	ldr	r2, [pc, #88]	; (80050e4 <style_snapshot+0x21c>)
 800508c:	0031      	movs	r1, r6
 800508e:	0028      	movs	r0, r5
 8005090:	f7ff fa74 	bl	800457c <_lv_obj_get_style_opa>
    shot->opa_scale = lv_obj_get_style_opa_scale(obj, part);
 8005094:	0023      	movs	r3, r4
 8005096:	33ba      	adds	r3, #186	; 0xba
 8005098:	7018      	strb	r0, [r3, #0]
    shot->clip_corner = lv_obj_get_style_clip_corner(obj, part);
 800509a:	0031      	movs	r1, r6
 800509c:	0028      	movs	r0, r5
 800509e:	f7ff f8fb 	bl	8004298 <lv_obj_get_style_clip_corner>
 80050a2:	2301      	movs	r3, #1
 80050a4:	2201      	movs	r2, #1
 80050a6:	34bb      	adds	r4, #187	; 0xbb
 80050a8:	4003      	ands	r3, r0
 80050aa:	7820      	ldrb	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int)
 80050ac:	0031      	movs	r1, r6
 80050ae:	4390      	bics	r0, r2
 80050b0:	4318      	orrs	r0, r3
 80050b2:	7020      	strb	r0, [r4, #0]
 80050b4:	3232      	adds	r2, #50	; 0x32
 80050b6:	0028      	movs	r0, r5
 80050b8:	f7ff f81e 	bl	80040f8 <_lv_obj_get_style_int>
 80050bc:	1e43      	subs	r3, r0, #1
 80050be:	4198      	sbcs	r0, r3
    shot->border_post  = lv_obj_get_style_border_post(obj, part);
 80050c0:	2202      	movs	r2, #2
 80050c2:	0043      	lsls	r3, r0, #1
 80050c4:	7820      	ldrb	r0, [r4, #0]

    _lv_obj_disable_style_caching(obj, false);
 80050c6:	2100      	movs	r1, #0
    shot->border_post  = lv_obj_get_style_border_post(obj, part);
 80050c8:	4390      	bics	r0, r2
 80050ca:	4318      	orrs	r0, r3
 80050cc:	7020      	strb	r0, [r4, #0]
    _lv_obj_disable_style_caching(obj, false);
 80050ce:	0028      	movs	r0, r5
 80050d0:	f7fe ff97 	bl	8004002 <_lv_obj_disable_style_caching>
    list->skip_trans = trans_ori;
 80050d4:	2201      	movs	r2, #1
 80050d6:	797b      	ldrb	r3, [r7, #5]
 80050d8:	4393      	bics	r3, r2
 80050da:	9a03      	ldr	r2, [sp, #12]
 80050dc:	4313      	orrs	r3, r2
 80050de:	717b      	strb	r3, [r7, #5]
}
 80050e0:	b005      	add	sp, #20
 80050e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050e4:	0000800c 	.word	0x0000800c

080050e8 <lv_obj_set_state>:
    if(obj->state == new_state) return;
 80050e8:	0003      	movs	r3, r0
{
 80050ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050ec:	b0e3      	sub	sp, #396	; 0x18c
 80050ee:	9101      	str	r1, [sp, #4]
    if(obj->state == new_state) return;
 80050f0:	333d      	adds	r3, #61	; 0x3d
 80050f2:	781b      	ldrb	r3, [r3, #0]
{
 80050f4:	0006      	movs	r6, r0
    if(obj->state == new_state) return;
 80050f6:	9302      	str	r3, [sp, #8]
 80050f8:	428b      	cmp	r3, r1
 80050fa:	d100      	bne.n	80050fe <lv_obj_set_state+0x16>
 80050fc:	e0f9      	b.n	80052f2 <lv_obj_set_state+0x20a>
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 80050fe:	2500      	movs	r5, #0
    style_snapshot_res_t cmp_res = STYLE_COMPARE_SAME;
 8005100:	002c      	movs	r4, r5
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
 8005102:	0029      	movs	r1, r5
 8005104:	0030      	movs	r0, r6
 8005106:	f7fe ff61 	bl	8003fcc <lv_obj_get_style_list>
        if(style_list == NULL) break;   /*No more style lists*/
 800510a:	2800      	cmp	r0, #0
 800510c:	d100      	bne.n	8005110 <lv_obj_set_state+0x28>
 800510e:	e0e2      	b.n	80052d6 <lv_obj_set_state+0x1ee>
        obj->state = prev_state;
 8005110:	0037      	movs	r7, r6
 8005112:	9b02      	ldr	r3, [sp, #8]
 8005114:	373d      	adds	r7, #61	; 0x3d
 8005116:	703b      	strb	r3, [r7, #0]
        style_snapshot(obj, part, &shot_pre);
 8005118:	aa04      	add	r2, sp, #16
 800511a:	0029      	movs	r1, r5
 800511c:	0030      	movs	r0, r6
 800511e:	f7ff fed3 	bl	8004ec8 <style_snapshot>
        obj->state = new_state;
 8005122:	9b01      	ldr	r3, [sp, #4]
        style_snapshot(obj, part, &shot_post);
 8005124:	0029      	movs	r1, r5
        obj->state = new_state;
 8005126:	703b      	strb	r3, [r7, #0]
        style_snapshot(obj, part, &shot_post);
 8005128:	af33      	add	r7, sp, #204	; 0xcc
 800512a:	003a      	movs	r2, r7
 800512c:	0030      	movs	r0, r6
 800512e:	f7ff fecb 	bl	8004ec8 <style_snapshot>

static style_snapshot_res_t style_snapshot_compare(style_snapshot_t * shot1, style_snapshot_t * shot2)
{
    if(memcmp(shot1, shot2, sizeof(style_snapshot_t)) == 0) return STYLE_COMPARE_SAME;
 8005132:	22bc      	movs	r2, #188	; 0xbc
 8005134:	0039      	movs	r1, r7
 8005136:	a804      	add	r0, sp, #16
 8005138:	f008 ff6e 	bl	800e018 <memcmp>
 800513c:	2800      	cmp	r0, #0
 800513e:	d100      	bne.n	8005142 <lv_obj_set_state+0x5a>
 8005140:	e0c4      	b.n	80052cc <lv_obj_set_state+0x1e4>

    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
 8005142:	2392      	movs	r3, #146	; 0x92
 8005144:	aa04      	add	r2, sp, #16
 8005146:	189b      	adds	r3, r3, r2
 8005148:	2200      	movs	r2, #0
 800514a:	5e9a      	ldrsh	r2, [r3, r2]
 800514c:	23a7      	movs	r3, #167	; 0xa7
 800514e:	a904      	add	r1, sp, #16
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	185b      	adds	r3, r3, r1
 8005154:	2100      	movs	r1, #0
 8005156:	5e5b      	ldrsh	r3, [r3, r1]
 8005158:	429a      	cmp	r2, r3
 800515a:	d000      	beq.n	800515e <lv_obj_set_state+0x76>
 800515c:	e0cb      	b.n	80052f6 <lv_obj_set_state+0x20e>
    if(shot1->pad_bottom != shot2->pad_bottom) return STYLE_COMPARE_DIFF;
 800515e:	ab29      	add	r3, sp, #164	; 0xa4
 8005160:	2200      	movs	r2, #0
 8005162:	5e9a      	ldrsh	r2, [r3, r2]
 8005164:	ab58      	add	r3, sp, #352	; 0x160
 8005166:	2100      	movs	r1, #0
 8005168:	5e5b      	ldrsh	r3, [r3, r1]
 800516a:	429a      	cmp	r2, r3
 800516c:	d000      	beq.n	8005170 <lv_obj_set_state+0x88>
 800516e:	e0c2      	b.n	80052f6 <lv_obj_set_state+0x20e>
    if(shot1->pad_left != shot2->pad_right) return STYLE_COMPARE_DIFF;
 8005170:	ab2a      	add	r3, sp, #168	; 0xa8
 8005172:	2200      	movs	r2, #0
 8005174:	5e9a      	ldrsh	r2, [r3, r2]
 8005176:	23a9      	movs	r3, #169	; 0xa9
 8005178:	a904      	add	r1, sp, #16
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	185b      	adds	r3, r3, r1
 800517e:	2100      	movs	r1, #0
 8005180:	5e5b      	ldrsh	r3, [r3, r1]
 8005182:	4293      	cmp	r3, r2
 8005184:	d000      	beq.n	8005188 <lv_obj_set_state+0xa0>
 8005186:	e0b6      	b.n	80052f6 <lv_obj_set_state+0x20e>
    if(shot1->pad_right != shot2->pad_right) return STYLE_COMPARE_DIFF;
 8005188:	2296      	movs	r2, #150	; 0x96
 800518a:	a904      	add	r1, sp, #16
 800518c:	1852      	adds	r2, r2, r1
 800518e:	2100      	movs	r1, #0
 8005190:	5e52      	ldrsh	r2, [r2, r1]
 8005192:	429a      	cmp	r2, r3
 8005194:	d000      	beq.n	8005198 <lv_obj_set_state+0xb0>
 8005196:	e0ae      	b.n	80052f6 <lv_obj_set_state+0x20e>
    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
    if(shot1->pad_inner != shot2->pad_inner) return STYLE_COMPARE_DIFF;
 8005198:	239a      	movs	r3, #154	; 0x9a
 800519a:	aa04      	add	r2, sp, #16
 800519c:	189b      	adds	r3, r3, r2
 800519e:	2200      	movs	r2, #0
 80051a0:	5e9a      	ldrsh	r2, [r3, r2]
 80051a2:	23ab      	movs	r3, #171	; 0xab
 80051a4:	a904      	add	r1, sp, #16
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	185b      	adds	r3, r3, r1
 80051aa:	2100      	movs	r1, #0
 80051ac:	5e5b      	ldrsh	r3, [r3, r1]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d000      	beq.n	80051b4 <lv_obj_set_state+0xcc>
 80051b2:	e0a0      	b.n	80052f6 <lv_obj_set_state+0x20e>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
 80051b4:	ab2b      	add	r3, sp, #172	; 0xac
 80051b6:	2200      	movs	r2, #0
 80051b8:	5e9a      	ldrsh	r2, [r3, r2]
 80051ba:	ab5a      	add	r3, sp, #360	; 0x168
 80051bc:	2100      	movs	r1, #0
 80051be:	5e5b      	ldrsh	r3, [r3, r1]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d000      	beq.n	80051c6 <lv_obj_set_state+0xde>
 80051c4:	e097      	b.n	80052f6 <lv_obj_set_state+0x20e>
    if(shot1->margin_bottom != shot2->margin_bottom) return STYLE_COMPARE_DIFF;
 80051c6:	239e      	movs	r3, #158	; 0x9e
 80051c8:	aa04      	add	r2, sp, #16
 80051ca:	189b      	adds	r3, r3, r2
 80051cc:	2200      	movs	r2, #0
 80051ce:	5e9a      	ldrsh	r2, [r3, r2]
 80051d0:	23ad      	movs	r3, #173	; 0xad
 80051d2:	a904      	add	r1, sp, #16
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	185b      	adds	r3, r3, r1
 80051d8:	2100      	movs	r1, #0
 80051da:	5e5b      	ldrsh	r3, [r3, r1]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d000      	beq.n	80051e2 <lv_obj_set_state+0xfa>
 80051e0:	e089      	b.n	80052f6 <lv_obj_set_state+0x20e>
    if(shot1->margin_left != shot2->margin_right) return STYLE_COMPARE_DIFF;
 80051e2:	ab2c      	add	r3, sp, #176	; 0xb0
 80051e4:	2200      	movs	r2, #0
 80051e6:	5e9b      	ldrsh	r3, [r3, r2]
 80051e8:	22af      	movs	r2, #175	; 0xaf
 80051ea:	a904      	add	r1, sp, #16
 80051ec:	0052      	lsls	r2, r2, #1
 80051ee:	1852      	adds	r2, r2, r1
 80051f0:	2100      	movs	r1, #0
 80051f2:	5e52      	ldrsh	r2, [r2, r1]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d000      	beq.n	80051fa <lv_obj_set_state+0x112>
 80051f8:	e07d      	b.n	80052f6 <lv_obj_set_state+0x20e>
    if(shot1->margin_right != shot2->margin_right) return STYLE_COMPARE_DIFF;
 80051fa:	22a2      	movs	r2, #162	; 0xa2
 80051fc:	a904      	add	r1, sp, #16
 80051fe:	1852      	adds	r2, r2, r1
 8005200:	2100      	movs	r1, #0
 8005202:	5e52      	ldrsh	r2, [r2, r1]
 8005204:	429a      	cmp	r2, r3
 8005206:	d000      	beq.n	800520a <lv_obj_set_state+0x122>
 8005208:	e075      	b.n	80052f6 <lv_obj_set_state+0x20e>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
    if(shot1->transform_width != shot2->transform_width) return STYLE_COMPARE_DIFF;
 800520a:	23a6      	movs	r3, #166	; 0xa6
 800520c:	aa04      	add	r2, sp, #16
 800520e:	189b      	adds	r3, r3, r2
 8005210:	2200      	movs	r2, #0
 8005212:	5e9a      	ldrsh	r2, [r3, r2]
 8005214:	23b1      	movs	r3, #177	; 0xb1
 8005216:	a904      	add	r1, sp, #16
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	185b      	adds	r3, r3, r1
 800521c:	2100      	movs	r1, #0
 800521e:	5e5b      	ldrsh	r3, [r3, r1]
 8005220:	429a      	cmp	r2, r3
 8005222:	d168      	bne.n	80052f6 <lv_obj_set_state+0x20e>
    if(shot1->transform_height != shot2->transform_height) return STYLE_COMPARE_DIFF;
 8005224:	ab2e      	add	r3, sp, #184	; 0xb8
 8005226:	2200      	movs	r2, #0
 8005228:	5e9a      	ldrsh	r2, [r3, r2]
 800522a:	ab5d      	add	r3, sp, #372	; 0x174
 800522c:	2100      	movs	r1, #0
 800522e:	5e5b      	ldrsh	r3, [r3, r1]
 8005230:	429a      	cmp	r2, r3
 8005232:	d160      	bne.n	80052f6 <lv_obj_set_state+0x20e>
    if(shot1->transform_angle != shot2->transform_angle) return STYLE_COMPARE_DIFF;
 8005234:	23aa      	movs	r3, #170	; 0xaa
 8005236:	aa04      	add	r2, sp, #16
 8005238:	189b      	adds	r3, r3, r2
 800523a:	2200      	movs	r2, #0
 800523c:	5e9a      	ldrsh	r2, [r3, r2]
 800523e:	23b3      	movs	r3, #179	; 0xb3
 8005240:	a904      	add	r1, sp, #16
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	185b      	adds	r3, r3, r1
 8005246:	2100      	movs	r1, #0
 8005248:	5e5b      	ldrsh	r3, [r3, r1]
 800524a:	429a      	cmp	r2, r3
 800524c:	d153      	bne.n	80052f6 <lv_obj_set_state+0x20e>
    if(shot1->transform_zoom != shot2->transform_zoom) return STYLE_COMPARE_DIFF;
 800524e:	ab2f      	add	r3, sp, #188	; 0xbc
 8005250:	2200      	movs	r2, #0
 8005252:	5e9a      	ldrsh	r2, [r3, r2]
 8005254:	ab5e      	add	r3, sp, #376	; 0x178
 8005256:	2100      	movs	r1, #0
 8005258:	5e5b      	ldrsh	r3, [r3, r1]
 800525a:	429a      	cmp	r2, r3
 800525c:	d14b      	bne.n	80052f6 <lv_obj_set_state+0x20e>
    if(shot1->rect.outline_width != shot2->rect.outline_width) return STYLE_COMPARE_DIFF;
 800525e:	ab04      	add	r3, sp, #16
 8005260:	221a      	movs	r2, #26
 8005262:	5e9a      	ldrsh	r2, [r3, r2]
 8005264:	211a      	movs	r1, #26
 8005266:	5e7b      	ldrsh	r3, [r7, r1]
 8005268:	429a      	cmp	r2, r3
 800526a:	d144      	bne.n	80052f6 <lv_obj_set_state+0x20e>
    if(shot1->rect.outline_pad != shot2->rect.outline_pad) return STYLE_COMPARE_DIFF;
 800526c:	ab04      	add	r3, sp, #16
 800526e:	221c      	movs	r2, #28
 8005270:	5e9a      	ldrsh	r2, [r3, r2]
 8005272:	211c      	movs	r1, #28
 8005274:	5e7b      	ldrsh	r3, [r7, r1]
 8005276:	429a      	cmp	r2, r3
 8005278:	d13d      	bne.n	80052f6 <lv_obj_set_state+0x20e>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
 800527a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800527c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800527e:	9303      	str	r3, [sp, #12]
 8005280:	4293      	cmp	r3, r2
 8005282:	d138      	bne.n	80052f6 <lv_obj_set_state+0x20e>
    if(shot1->rect.value_align != shot2->rect.value_align) return STYLE_COMPARE_DIFF;
 8005284:	ab18      	add	r3, sp, #96	; 0x60
 8005286:	781a      	ldrb	r2, [r3, #0]
 8005288:	ab47      	add	r3, sp, #284	; 0x11c
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	429a      	cmp	r2, r3
 800528e:	d132      	bne.n	80052f6 <lv_obj_set_state+0x20e>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
    if(shot1->rect.shadow_spread != shot2->rect.shadow_spread) return STYLE_COMPARE_DIFF;
 8005290:	ab04      	add	r3, sp, #16
 8005292:	2228      	movs	r2, #40	; 0x28
 8005294:	5e9a      	ldrsh	r2, [r3, r2]
 8005296:	2128      	movs	r1, #40	; 0x28
 8005298:	5e7b      	ldrsh	r3, [r7, r1]
 800529a:	429a      	cmp	r2, r3
 800529c:	d12b      	bne.n	80052f6 <lv_obj_set_state+0x20e>
    if(shot1->rect.shadow_width != shot2->rect.shadow_width) return STYLE_COMPARE_DIFF;
 800529e:	aa04      	add	r2, sp, #16
 80052a0:	ab33      	add	r3, sp, #204	; 0xcc
 80052a2:	2122      	movs	r1, #34	; 0x22
 80052a4:	5e51      	ldrsh	r1, [r2, r1]
 80052a6:	2022      	movs	r0, #34	; 0x22
 80052a8:	5e1a      	ldrsh	r2, [r3, r0]
 80052aa:	4291      	cmp	r1, r2
 80052ac:	d123      	bne.n	80052f6 <lv_obj_set_state+0x20e>
    if(shot1->rect.shadow_ofs_x != shot2->rect.shadow_ofs_x) return STYLE_COMPARE_DIFF;
 80052ae:	aa04      	add	r2, sp, #16
 80052b0:	2124      	movs	r1, #36	; 0x24
 80052b2:	5e51      	ldrsh	r1, [r2, r1]
 80052b4:	2024      	movs	r0, #36	; 0x24
 80052b6:	5e1a      	ldrsh	r2, [r3, r0]
 80052b8:	4291      	cmp	r1, r2
 80052ba:	d11c      	bne.n	80052f6 <lv_obj_set_state+0x20e>
    if(shot1->rect.shadow_ofs_y != shot2->rect.shadow_ofs_y) return STYLE_COMPARE_DIFF;
 80052bc:	aa04      	add	r2, sp, #16
 80052be:	2126      	movs	r1, #38	; 0x26
 80052c0:	5e52      	ldrsh	r2, [r2, r1]
 80052c2:	2126      	movs	r1, #38	; 0x26
 80052c4:	5e5b      	ldrsh	r3, [r3, r1]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d115      	bne.n	80052f6 <lv_obj_set_state+0x20e>
            cmp_res = STYLE_COMPARE_VISUAL_DIFF;
 80052ca:	2401      	movs	r4, #1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 80052cc:	3501      	adds	r5, #1
 80052ce:	b2ed      	uxtb	r5, r5
 80052d0:	2d40      	cmp	r5, #64	; 0x40
 80052d2:	d000      	beq.n	80052d6 <lv_obj_set_state+0x1ee>
 80052d4:	e715      	b.n	8005102 <lv_obj_set_state+0x1a>
    obj->state = new_state;
 80052d6:	0033      	movs	r3, r6
 80052d8:	9a01      	ldr	r2, [sp, #4]
 80052da:	333d      	adds	r3, #61	; 0x3d
 80052dc:	701a      	strb	r2, [r3, #0]
    if(cmp_res == STYLE_COMPARE_SAME) {
 80052de:	2c00      	cmp	r4, #0
 80052e0:	d007      	beq.n	80052f2 <lv_obj_set_state+0x20a>
    if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
 80052e2:	22ff      	movs	r2, #255	; 0xff
 80052e4:	0029      	movs	r1, r5
 80052e6:	2c02      	cmp	r4, #2
 80052e8:	d000      	beq.n	80052ec <lv_obj_set_state+0x204>
    else if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 80052ea:	0011      	movs	r1, r2
 80052ec:	0030      	movs	r0, r6
 80052ee:	f7ff fa93 	bl	8004818 <lv_obj_refresh_style>
}
 80052f2:	b063      	add	sp, #396	; 0x18c
 80052f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            cmp_res = STYLE_COMPARE_DIFF;
 80052f6:	2402      	movs	r4, #2
 80052f8:	e7ed      	b.n	80052d6 <lv_obj_set_state+0x1ee>

080052fa <lv_obj_add_state>:
    lv_state_t new_state = obj->state | state;
 80052fa:	0003      	movs	r3, r0
{
 80052fc:	b510      	push	{r4, lr}
    lv_state_t new_state = obj->state | state;
 80052fe:	333d      	adds	r3, #61	; 0x3d
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	4319      	orrs	r1, r3
    if(obj->state != new_state) {
 8005304:	428b      	cmp	r3, r1
 8005306:	d001      	beq.n	800530c <lv_obj_add_state+0x12>
        lv_obj_set_state(obj, new_state);
 8005308:	f7ff feee 	bl	80050e8 <lv_obj_set_state>
}
 800530c:	bd10      	pop	{r4, pc}

0800530e <lv_obj_clear_state>:
    lv_state_t new_state = obj->state & (~state);
 800530e:	0003      	movs	r3, r0
{
 8005310:	b510      	push	{r4, lr}
    lv_state_t new_state = obj->state & (~state);
 8005312:	333d      	adds	r3, #61	; 0x3d
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	001a      	movs	r2, r3
 8005318:	438a      	bics	r2, r1
 800531a:	0011      	movs	r1, r2
    if(obj->state != new_state) {
 800531c:	4293      	cmp	r3, r2
 800531e:	d001      	beq.n	8005324 <lv_obj_clear_state+0x16>
        lv_obj_set_state(obj, new_state);
 8005320:	f7ff fee2 	bl	80050e8 <lv_obj_set_state>
}
 8005324:	bd10      	pop	{r4, pc}
	...

08005328 <lv_obj_get_draw_rect_ext_pad_size>:
{
 8005328:	b5f0      	push	{r4, r5, r6, r7, lr}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int)
 800532a:	2250      	movs	r2, #80	; 0x50
 800532c:	b08d      	sub	sp, #52	; 0x34
 800532e:	0004      	movs	r4, r0
 8005330:	000d      	movs	r5, r1
 8005332:	f7fe fee1 	bl	80040f8 <_lv_obj_get_style_int>
 8005336:	1e07      	subs	r7, r0, #0
    if(sh_width) {
 8005338:	d000      	beq.n	800533c <lv_obj_get_draw_rect_ext_pad_size+0x14>
 800533a:	e0b2      	b.n	80054a2 <lv_obj_get_draw_rect_ext_pad_size+0x17a>
    lv_coord_t s = 0;
 800533c:	2700      	movs	r7, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr)
 800533e:	227f      	movs	r2, #127	; 0x7f
 8005340:	0029      	movs	r1, r5
 8005342:	0020      	movs	r0, r4
 8005344:	f7ff f986 	bl	8004654 <_lv_obj_get_style_ptr>
 8005348:	1e06      	subs	r6, r0, #0
    if(value_str) {
 800534a:	d100      	bne.n	800534e <lv_obj_get_draw_rect_ext_pad_size+0x26>
 800534c:	e07a      	b.n	8005444 <lv_obj_get_draw_rect_ext_pad_size+0x11c>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa)
 800534e:	227c      	movs	r2, #124	; 0x7c
 8005350:	0029      	movs	r1, r5
 8005352:	0020      	movs	r0, r4
 8005354:	f7ff f912 	bl	800457c <_lv_obj_get_style_opa>
        if(value_opa > LV_OPA_MIN) {
 8005358:	2802      	cmp	r0, #2
 800535a:	d973      	bls.n	8005444 <lv_obj_get_draw_rect_ext_pad_size+0x11c>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int)
 800535c:	2270      	movs	r2, #112	; 0x70
 800535e:	0029      	movs	r1, r5
 8005360:	0020      	movs	r0, r4
 8005362:	f7fe fec9 	bl	80040f8 <_lv_obj_get_style_int>
 8005366:	2270      	movs	r2, #112	; 0x70
 8005368:	9005      	str	r0, [sp, #20]
 800536a:	0029      	movs	r1, r5
 800536c:	0020      	movs	r0, r4
 800536e:	f7fe fec3 	bl	80040f8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr)
 8005372:	227e      	movs	r2, #126	; 0x7e
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int)
 8005374:	9006      	str	r0, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr)
 8005376:	0029      	movs	r1, r5
 8005378:	0020      	movs	r0, r4
 800537a:	f7ff f96b 	bl	8004654 <_lv_obj_get_style_ptr>
            _lv_txt_get_size(&txt_size, value_str, font, letter_space, line_space, LV_COORD_MAX, LV_TXT_FLAG_NONE);
 800537e:	2300      	movs	r3, #0
 8005380:	9906      	ldr	r1, [sp, #24]
 8005382:	9302      	str	r3, [sp, #8]
 8005384:	4b5e      	ldr	r3, [pc, #376]	; (8005500 <lv_obj_get_draw_rect_ext_pad_size+0x1d8>)
 8005386:	0002      	movs	r2, r0
 8005388:	9301      	str	r3, [sp, #4]
 800538a:	9100      	str	r1, [sp, #0]
 800538c:	9b05      	ldr	r3, [sp, #20]
 800538e:	0031      	movs	r1, r6
 8005390:	a808      	add	r0, sp, #32
 8005392:	f007 fb37 	bl	800ca04 <_lv_txt_get_size>
            value_area.x1 = 0;
 8005396:	2300      	movs	r3, #0
 8005398:	930a      	str	r3, [sp, #40]	; 0x28
            value_area.x2 = txt_size.x - 1;
 800539a:	ab04      	add	r3, sp, #16
 800539c:	8a1b      	ldrh	r3, [r3, #16]
 800539e:	ae0a      	add	r6, sp, #40	; 0x28
 80053a0:	3b01      	subs	r3, #1
 80053a2:	80b3      	strh	r3, [r6, #4]
            value_area.y2 = txt_size.y - 1;
 80053a4:	ab04      	add	r3, sp, #16
 80053a6:	8a5b      	ldrh	r3, [r3, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int)
 80053a8:	2275      	movs	r2, #117	; 0x75
 80053aa:	3b01      	subs	r3, #1
 80053ac:	0029      	movs	r1, r5
 80053ae:	0020      	movs	r0, r4
 80053b0:	80f3      	strh	r3, [r6, #6]
 80053b2:	f7fe fea1 	bl	80040f8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int)
 80053b6:	2273      	movs	r2, #115	; 0x73
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int)
 80053b8:	9005      	str	r0, [sp, #20]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int)
 80053ba:	0029      	movs	r1, r5
 80053bc:	0020      	movs	r0, r4
 80053be:	f7fe fe9b 	bl	80040f8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int)
 80053c2:	2274      	movs	r2, #116	; 0x74
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int)
 80053c4:	9006      	str	r0, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int)
 80053c6:	0029      	movs	r1, r5
 80053c8:	0020      	movs	r0, r4
 80053ca:	f7fe fe95 	bl	80040f8 <_lv_obj_get_style_int>
            _lv_area_align(&obj->coords, &value_area, align, &p_align);
 80053ce:	466b      	mov	r3, sp
 80053d0:	9007      	str	r0, [sp, #28]
 80053d2:	0020      	movs	r0, r4
 80053d4:	7d1a      	ldrb	r2, [r3, #20]
 80053d6:	3010      	adds	r0, #16
 80053d8:	ab09      	add	r3, sp, #36	; 0x24
 80053da:	0031      	movs	r1, r6
 80053dc:	f006 fa90 	bl	800b900 <_lv_area_align>
            value_area.x1 += p_align.x + xofs;
 80053e0:	ab04      	add	r3, sp, #16
 80053e2:	9a06      	ldr	r2, [sp, #24]
 80053e4:	8a9b      	ldrh	r3, [r3, #20]
            value_area.y1 += p_align.y + yofs;
 80053e6:	9907      	ldr	r1, [sp, #28]
            value_area.x1 += p_align.x + xofs;
 80053e8:	189b      	adds	r3, r3, r2
            value_area.y1 += p_align.y + yofs;
 80053ea:	aa04      	add	r2, sp, #16
 80053ec:	8ad2      	ldrh	r2, [r2, #22]
            value_area.x1 += p_align.x + xofs;
 80053ee:	b29b      	uxth	r3, r3
            value_area.y1 += p_align.y + yofs;
 80053f0:	1852      	adds	r2, r2, r1
 80053f2:	b291      	uxth	r1, r2
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
 80053f4:	2010      	movs	r0, #16
 80053f6:	5e22      	ldrsh	r2, [r4, r0]
            value_area.x1 += p_align.x + xofs;
 80053f8:	8830      	ldrh	r0, [r6, #0]
 80053fa:	1818      	adds	r0, r3, r0
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
 80053fc:	b200      	sxth	r0, r0
 80053fe:	1a10      	subs	r0, r2, r0
 8005400:	42b8      	cmp	r0, r7
 8005402:	da00      	bge.n	8005406 <lv_obj_get_draw_rect_ext_pad_size+0xde>
 8005404:	0038      	movs	r0, r7
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
 8005406:	2212      	movs	r2, #18
 8005408:	5ea7      	ldrsh	r7, [r4, r2]
            value_area.y1 += p_align.y + yofs;
 800540a:	8872      	ldrh	r2, [r6, #2]
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
 800540c:	b200      	sxth	r0, r0
            value_area.y1 += p_align.y + yofs;
 800540e:	188a      	adds	r2, r1, r2
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
 8005410:	b212      	sxth	r2, r2
 8005412:	1aba      	subs	r2, r7, r2
 8005414:	4282      	cmp	r2, r0
 8005416:	da00      	bge.n	800541a <lv_obj_get_draw_rect_ext_pad_size+0xf2>
 8005418:	0002      	movs	r2, r0
            value_area.x2 += p_align.x + xofs;
 800541a:	88b0      	ldrh	r0, [r6, #4]
            s = LV_MATH_MAX(s, value_area.x2 - obj->coords.x2);
 800541c:	b212      	sxth	r2, r2
            value_area.x2 += p_align.x + xofs;
 800541e:	181b      	adds	r3, r3, r0
            s = LV_MATH_MAX(s, value_area.x2 - obj->coords.x2);
 8005420:	2714      	movs	r7, #20
 8005422:	5fe0      	ldrsh	r0, [r4, r7]
 8005424:	b21b      	sxth	r3, r3
 8005426:	1a1b      	subs	r3, r3, r0
 8005428:	4293      	cmp	r3, r2
 800542a:	da00      	bge.n	800542e <lv_obj_get_draw_rect_ext_pad_size+0x106>
 800542c:	0013      	movs	r3, r2
            value_area.y2 += p_align.y + yofs;
 800542e:	88f2      	ldrh	r2, [r6, #6]
            s = LV_MATH_MAX(s, value_area.y2 - obj->coords.y2);
 8005430:	b21b      	sxth	r3, r3
            value_area.y2 += p_align.y + yofs;
 8005432:	188a      	adds	r2, r1, r2
            s = LV_MATH_MAX(s, value_area.y2 - obj->coords.y2);
 8005434:	2016      	movs	r0, #22
 8005436:	5e21      	ldrsh	r1, [r4, r0]
 8005438:	b212      	sxth	r2, r2
 800543a:	1a52      	subs	r2, r2, r1
 800543c:	429a      	cmp	r2, r3
 800543e:	da00      	bge.n	8005442 <lv_obj_get_draw_rect_ext_pad_size+0x11a>
 8005440:	001a      	movs	r2, r3
 8005442:	b217      	sxth	r7, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int)
 8005444:	2240      	movs	r2, #64	; 0x40
 8005446:	0029      	movs	r1, r5
 8005448:	0020      	movs	r0, r4
 800544a:	f7fe fe55 	bl	80040f8 <_lv_obj_get_style_int>
 800544e:	1e06      	subs	r6, r0, #0
    if(outline_width) {
 8005450:	d010      	beq.n	8005474 <lv_obj_get_draw_rect_ext_pad_size+0x14c>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa)
 8005452:	224c      	movs	r2, #76	; 0x4c
 8005454:	0029      	movs	r1, r5
 8005456:	0020      	movs	r0, r4
 8005458:	f7ff f890 	bl	800457c <_lv_obj_get_style_opa>
        if(outline_opa > LV_OPA_MIN) {
 800545c:	2802      	cmp	r0, #2
 800545e:	d909      	bls.n	8005474 <lv_obj_get_draw_rect_ext_pad_size+0x14c>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int)
 8005460:	2241      	movs	r2, #65	; 0x41
 8005462:	0029      	movs	r1, r5
 8005464:	0020      	movs	r0, r4
 8005466:	f7fe fe47 	bl	80040f8 <_lv_obj_get_style_int>
            s = LV_MATH_MAX(s, outline_pad + outline_width);
 800546a:	1980      	adds	r0, r0, r6
 800546c:	42b8      	cmp	r0, r7
 800546e:	da00      	bge.n	8005472 <lv_obj_get_draw_rect_ext_pad_size+0x14a>
 8005470:	0038      	movs	r0, r7
 8005472:	b207      	sxth	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 8005474:	2204      	movs	r2, #4
 8005476:	0029      	movs	r1, r5
 8005478:	0020      	movs	r0, r4
 800547a:	f7fe fe3d 	bl	80040f8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 800547e:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 8005480:	0006      	movs	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 8005482:	0029      	movs	r1, r5
 8005484:	0020      	movs	r0, r4
 8005486:	f7fe fe37 	bl	80040f8 <_lv_obj_get_style_int>
    lv_coord_t wh = LV_MATH_MAX(w, h);
 800548a:	1c03      	adds	r3, r0, #0
 800548c:	42b0      	cmp	r0, r6
 800548e:	da00      	bge.n	8005492 <lv_obj_get_draw_rect_ext_pad_size+0x16a>
 8005490:	1c33      	adds	r3, r6, #0
 8005492:	b21a      	sxth	r2, r3
    if(wh > 0) s += wh;
 8005494:	2a00      	cmp	r2, #0
 8005496:	dd01      	ble.n	800549c <lv_obj_get_draw_rect_ext_pad_size+0x174>
 8005498:	18ff      	adds	r7, r7, r3
 800549a:	b23f      	sxth	r7, r7
}
 800549c:	0038      	movs	r0, r7
 800549e:	b00d      	add	sp, #52	; 0x34
 80054a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa)
 80054a2:	225c      	movs	r2, #92	; 0x5c
 80054a4:	0029      	movs	r1, r5
 80054a6:	0020      	movs	r0, r4
 80054a8:	f7ff f868 	bl	800457c <_lv_obj_get_style_opa>
        if(sh_opa > LV_OPA_MIN) {
 80054ac:	2802      	cmp	r0, #2
 80054ae:	d800      	bhi.n	80054b2 <lv_obj_get_draw_rect_ext_pad_size+0x18a>
 80054b0:	e744      	b.n	800533c <lv_obj_get_draw_rect_ext_pad_size+0x14>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int)
 80054b2:	2253      	movs	r2, #83	; 0x53
 80054b4:	0029      	movs	r1, r5
 80054b6:	0020      	movs	r0, r4
 80054b8:	f7fe fe1e 	bl	80040f8 <_lv_obj_get_style_int>
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
 80054bc:	0ffe      	lsrs	r6, r7, #31
 80054be:	19f6      	adds	r6, r6, r7
 80054c0:	1076      	asrs	r6, r6, #1
            sh_width++;
 80054c2:	3601      	adds	r6, #1
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 80054c4:	1836      	adds	r6, r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int)
 80054c6:	2251      	movs	r2, #81	; 0x51
 80054c8:	0029      	movs	r1, r5
 80054ca:	0020      	movs	r0, r4
 80054cc:	f7fe fe14 	bl	80040f8 <_lv_obj_get_style_int>
 80054d0:	0007      	movs	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int)
 80054d2:	2252      	movs	r2, #82	; 0x52
 80054d4:	0029      	movs	r1, r5
 80054d6:	0020      	movs	r0, r4
 80054d8:	f7fe fe0e 	bl	80040f8 <_lv_obj_get_style_int>
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
 80054dc:	17fb      	asrs	r3, r7, #31
 80054de:	18ff      	adds	r7, r7, r3
 80054e0:	405f      	eors	r7, r3
 80054e2:	17c3      	asrs	r3, r0, #31
 80054e4:	18c0      	adds	r0, r0, r3
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 80054e6:	b2b6      	uxth	r6, r6
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
 80054e8:	4058      	eors	r0, r3
 80054ea:	42b8      	cmp	r0, r7
 80054ec:	da00      	bge.n	80054f0 <lv_obj_get_draw_rect_ext_pad_size+0x1c8>
 80054ee:	0038      	movs	r0, r7
 80054f0:	1830      	adds	r0, r6, r0
            s = LV_MATH_MAX(s, sh_width);
 80054f2:	1c07      	adds	r7, r0, #0
 80054f4:	0403      	lsls	r3, r0, #16
 80054f6:	d500      	bpl.n	80054fa <lv_obj_get_draw_rect_ext_pad_size+0x1d2>
 80054f8:	2700      	movs	r7, #0
 80054fa:	b23f      	sxth	r7, r7
 80054fc:	e71f      	b.n	800533e <lv_obj_get_draw_rect_ext_pad_size+0x16>
 80054fe:	46c0      	nop			; (mov r8, r8)
 8005500:	00007c18 	.word	0x00007c18

08005504 <lv_obj_get_focused_obj>:
    return obj->focus_parent == 0 ? false : true;
 8005504:	2302      	movs	r3, #2
    if(obj == NULL) return NULL;
 8005506:	2800      	cmp	r0, #0
 8005508:	d101      	bne.n	800550e <lv_obj_get_focused_obj+0xa>
}
 800550a:	4770      	bx	lr
    return obj->parent;
 800550c:	6800      	ldr	r0, [r0, #0]
    return obj->focus_parent == 0 ? false : true;
 800550e:	0002      	movs	r2, r0
 8005510:	3235      	adds	r2, #53	; 0x35
 8005512:	7812      	ldrb	r2, [r2, #0]
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
 8005514:	421a      	tst	r2, r3
 8005516:	d1f9      	bne.n	800550c <lv_obj_get_focused_obj+0x8>
 8005518:	e7f7      	b.n	800550a <lv_obj_get_focused_obj+0x6>
	...

0800551c <lv_obj_signal>:
{
 800551c:	b570      	push	{r4, r5, r6, lr}
 800551e:	0005      	movs	r5, r0
    if(sign == LV_SIGNAL_GET_STYLE) {
 8005520:	2908      	cmp	r1, #8
 8005522:	d10a      	bne.n	800553a <lv_obj_signal+0x1e>
        if(info->part == LV_OBJ_PART_MAIN) info->result = &obj->style_list;
 8005524:	7813      	ldrb	r3, [r2, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d104      	bne.n	8005534 <lv_obj_signal+0x18>
 800552a:	3528      	adds	r5, #40	; 0x28
 800552c:	6055      	str	r5, [r2, #4]
        return LV_RES_OK;
 800552e:	2401      	movs	r4, #1
}
 8005530:	0020      	movs	r0, r4
 8005532:	bd70      	pop	{r4, r5, r6, pc}
        else info->result = NULL;
 8005534:	2300      	movs	r3, #0
 8005536:	6053      	str	r3, [r2, #4]
 8005538:	e7f9      	b.n	800552e <lv_obj_signal+0x12>
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 800553a:	2907      	cmp	r1, #7
 800553c:	d105      	bne.n	800554a <lv_obj_signal+0x2e>
 800553e:	492f      	ldr	r1, [pc, #188]	; (80055fc <lv_obj_signal+0xe0>)
 8005540:	0010      	movs	r0, r2
 8005542:	f7ff fa78 	bl	8004a36 <lv_obj_handle_get_type_signal>
 8005546:	0004      	movs	r4, r0
 8005548:	e7f2      	b.n	8005530 <lv_obj_signal+0x14>
    if(sign == LV_SIGNAL_CHILD_CHG) {
 800554a:	2901      	cmp	r1, #1
 800554c:	d104      	bne.n	8005558 <lv_obj_signal+0x3c>
    return (obj->protect & prot) == 0 ? false : true;
 800554e:	353c      	adds	r5, #60	; 0x3c
 8005550:	782b      	ldrb	r3, [r5, #0]
 8005552:	4399      	bics	r1, r3
 8005554:	000c      	movs	r4, r1
 8005556:	e7eb      	b.n	8005530 <lv_obj_signal+0x14>
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 8005558:	2906      	cmp	r1, #6
 800555a:	d10a      	bne.n	8005572 <lv_obj_signal+0x56>
        lv_coord_t d = lv_obj_get_draw_rect_ext_pad_size(obj, LV_OBJ_PART_MAIN);
 800555c:	2100      	movs	r1, #0
 800555e:	f7ff fee3 	bl	8005328 <lv_obj_get_draw_rect_ext_pad_size>
        obj->ext_draw_pad = LV_MATH_MAX(obj->ext_draw_pad, d);
 8005562:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 8005564:	1c1a      	adds	r2, r3, #0
 8005566:	b21b      	sxth	r3, r3
 8005568:	4283      	cmp	r3, r0
 800556a:	da00      	bge.n	800556e <lv_obj_signal+0x52>
 800556c:	1c02      	adds	r2, r0, #0
 800556e:	866a      	strh	r2, [r5, #50]	; 0x32
 8005570:	e7dd      	b.n	800552e <lv_obj_signal+0x12>
 8005572:	2401      	movs	r4, #1
    else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
 8005574:	2903      	cmp	r1, #3
 8005576:	d107      	bne.n	8005588 <lv_obj_signal+0x6c>
        if(obj->realign.auto_realign) {
 8005578:	0003      	movs	r3, r0
 800557a:	3349      	adds	r3, #73	; 0x49
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	4223      	tst	r3, r4
 8005580:	d0d6      	beq.n	8005530 <lv_obj_signal+0x14>
            lv_obj_realign(obj);
 8005582:	f7fe fb77 	bl	8003c74 <lv_obj_realign>
 8005586:	e7d3      	b.n	8005530 <lv_obj_signal+0x14>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
 8005588:	2904      	cmp	r1, #4
 800558a:	d102      	bne.n	8005592 <lv_obj_signal+0x76>
        lv_obj_refresh_ext_draw_pad(obj);
 800558c:	f7fe f901 	bl	8003792 <lv_obj_refresh_ext_draw_pad>
 8005590:	e7ce      	b.n	8005530 <lv_obj_signal+0x14>
    else if(sign == LV_SIGNAL_PRESSED) {
 8005592:	290b      	cmp	r1, #11
 8005594:	d103      	bne.n	800559e <lv_obj_signal+0x82>
        lv_obj_add_state(obj, LV_STATE_PRESSED);
 8005596:	3105      	adds	r1, #5
 8005598:	f7ff feaf 	bl	80052fa <lv_obj_add_state>
 800559c:	e7c8      	b.n	8005530 <lv_obj_signal+0x14>
    else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 800559e:	000b      	movs	r3, r1
 80055a0:	3b0d      	subs	r3, #13
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d803      	bhi.n	80055ae <lv_obj_signal+0x92>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 80055a6:	2110      	movs	r1, #16
 80055a8:	f7ff feb1 	bl	800530e <lv_obj_clear_state>
 80055ac:	e7c0      	b.n	8005530 <lv_obj_signal+0x14>
    else if(sign == LV_SIGNAL_FOCUS) {
 80055ae:	2916      	cmp	r1, #22
 80055b0:	d117      	bne.n	80055e2 <lv_obj_signal+0xc6>
        editing = lv_group_get_editing(lv_obj_get_group(obj));
 80055b2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80055b4:	f7fd ff80 	bl	80034b8 <lv_group_get_editing>
        if(editing) {
 80055b8:	2800      	cmp	r0, #0
 80055ba:	d006      	beq.n	80055ca <lv_obj_signal+0xae>
            obj = lv_obj_get_focused_obj(obj);
 80055bc:	0028      	movs	r0, r5
 80055be:	f7ff ffa1 	bl	8005504 <lv_obj_get_focused_obj>
            lv_obj_add_state(obj, state);
 80055c2:	2106      	movs	r1, #6
 80055c4:	f7ff fe99 	bl	80052fa <lv_obj_add_state>
 80055c8:	e7b1      	b.n	800552e <lv_obj_signal+0x12>
            obj = lv_obj_get_focused_obj(obj);
 80055ca:	0028      	movs	r0, r5
 80055cc:	f7ff ff9a 	bl	8005504 <lv_obj_get_focused_obj>
 80055d0:	0004      	movs	r4, r0
            lv_obj_add_state(obj, LV_STATE_FOCUSED);
 80055d2:	2102      	movs	r1, #2
 80055d4:	f7ff fe91 	bl	80052fa <lv_obj_add_state>
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 80055d8:	2104      	movs	r1, #4
 80055da:	0020      	movs	r0, r4
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
 80055dc:	f7ff fe97 	bl	800530e <lv_obj_clear_state>
 80055e0:	e7a5      	b.n	800552e <lv_obj_signal+0x12>
    else if(sign == LV_SIGNAL_DEFOCUS) {
 80055e2:	2917      	cmp	r1, #23
 80055e4:	d103      	bne.n	80055ee <lv_obj_signal+0xd2>
        obj = lv_obj_get_focused_obj(obj);
 80055e6:	f7ff ff8d 	bl	8005504 <lv_obj_get_focused_obj>
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
 80055ea:	2106      	movs	r1, #6
 80055ec:	e7f6      	b.n	80055dc <lv_obj_signal+0xc0>
    else if(sign == LV_SIGNAL_CLEANUP) {
 80055ee:	2401      	movs	r4, #1
 80055f0:	2900      	cmp	r1, #0
 80055f2:	d19d      	bne.n	8005530 <lv_obj_signal+0x14>
        lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
 80055f4:	f7fe fcfd 	bl	8003ff2 <lv_obj_clean_style_list>
 80055f8:	e79a      	b.n	8005530 <lv_obj_signal+0x14>
 80055fa:	46c0      	nop			; (mov r8, r8)
 80055fc:	0800e30a 	.word	0x0800e30a

08005600 <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
 8005600:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005602:	000c      	movs	r4, r1
    lv_obj_t * found_p = NULL;

    /*If this object is fully cover the draw area check the children too */
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
 8005604:	2200      	movs	r2, #0
 8005606:	3110      	adds	r1, #16
{
 8005608:	0006      	movs	r6, r0
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
 800560a:	f006 f92e 	bl	800b86a <_lv_area_is_in>
 800560e:	2800      	cmp	r0, #0
 8005610:	d101      	bne.n	8005616 <lv_refr_get_top_obj+0x16>
    lv_obj_t * found_p = NULL;
 8005612:	2000      	movs	r0, #0
            }
        }
    }

    return found_p;
}
 8005614:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
 8005616:	0023      	movs	r3, r4
 8005618:	3334      	adds	r3, #52	; 0x34
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	06db      	lsls	r3, r3, #27
 800561e:	d4f8      	bmi.n	8005612 <lv_refr_get_top_obj+0x12>
        lv_design_res_t design_res = obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK);
 8005620:	2202      	movs	r2, #2
 8005622:	0031      	movs	r1, r6
 8005624:	0020      	movs	r0, r4
 8005626:	6a23      	ldr	r3, [r4, #32]
 8005628:	4798      	blx	r3
 800562a:	9001      	str	r0, [sp, #4]
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
 800562c:	2803      	cmp	r0, #3
 800562e:	d0f0      	beq.n	8005612 <lv_refr_get_top_obj+0x12>
        _LV_LL_READ(obj->child_ll, i) {
 8005630:	1d27      	adds	r7, r4, #4
 8005632:	0038      	movs	r0, r7
 8005634:	f006 faef 	bl	800bc16 <_lv_ll_get_head>
 8005638:	1e05      	subs	r5, r0, #0
 800563a:	d104      	bne.n	8005646 <lv_refr_get_top_obj+0x46>
            if(design_res == LV_DESIGN_RES_COVER) {
 800563c:	9b01      	ldr	r3, [sp, #4]
 800563e:	0020      	movs	r0, r4
 8005640:	2b01      	cmp	r3, #1
 8005642:	d0e7      	beq.n	8005614 <lv_refr_get_top_obj+0x14>
 8005644:	e7e5      	b.n	8005612 <lv_refr_get_top_obj+0x12>
            found_p = lv_refr_get_top_obj(area_p, i);
 8005646:	0029      	movs	r1, r5
 8005648:	0030      	movs	r0, r6
 800564a:	f7ff ffd9 	bl	8005600 <lv_refr_get_top_obj>
            if(found_p != NULL) {
 800564e:	2800      	cmp	r0, #0
 8005650:	d1e0      	bne.n	8005614 <lv_refr_get_top_obj+0x14>
        _LV_LL_READ(obj->child_ll, i) {
 8005652:	0029      	movs	r1, r5
 8005654:	0038      	movs	r0, r7
 8005656:	f006 fae6 	bl	800bc26 <_lv_ll_get_next>
 800565a:	e7ed      	b.n	8005638 <lv_refr_get_top_obj+0x38>

0800565c <lv_refr_obj>:
 * @param mask_ori_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
{
    /*Do not refresh hidden objects*/
    if(obj->hidden != 0) return;
 800565c:	0003      	movs	r3, r0
 800565e:	3334      	adds	r3, #52	; 0x34
 8005660:	781a      	ldrb	r2, [r3, #0]
 8005662:	2310      	movs	r3, #16
{
 8005664:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(obj->hidden != 0) return;
 8005666:	401a      	ands	r2, r3
{
 8005668:	b08d      	sub	sp, #52	; 0x34
 800566a:	0005      	movs	r5, r0
 800566c:	000f      	movs	r7, r1
    if(obj->hidden != 0) return;
 800566e:	9201      	str	r2, [sp, #4]
 8005670:	2a00      	cmp	r2, #0
 8005672:	d138      	bne.n	80056e6 <lv_refr_obj+0x8a>
     * because the parent and its children are visible only here */
    lv_area_t obj_mask;
    lv_area_t obj_ext_mask;
    lv_area_t obj_area;
    lv_coord_t ext_size = obj->ext_draw_pad;
    lv_obj_get_coords(obj, &obj_area);
 8005674:	ac06      	add	r4, sp, #24
    lv_coord_t ext_size = obj->ext_draw_pad;
 8005676:	2332      	movs	r3, #50	; 0x32
 8005678:	5ec6      	ldrsh	r6, [r0, r3]
    lv_obj_get_coords(obj, &obj_area);
 800567a:	0021      	movs	r1, r4
 800567c:	f7fe fa05 	bl	8003a8a <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
 8005680:	8823      	ldrh	r3, [r4, #0]
 8005682:	b2b6      	uxth	r6, r6
 8005684:	1b9b      	subs	r3, r3, r6
 8005686:	8023      	strh	r3, [r4, #0]
    obj_area.y1 -= ext_size;
 8005688:	8863      	ldrh	r3, [r4, #2]
    obj_area.x2 += ext_size;
    obj_area.y2 += ext_size;
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 800568a:	0022      	movs	r2, r4
    obj_area.y1 -= ext_size;
 800568c:	1b9b      	subs	r3, r3, r6
 800568e:	8063      	strh	r3, [r4, #2]
    obj_area.x2 += ext_size;
 8005690:	88a3      	ldrh	r3, [r4, #4]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8005692:	0039      	movs	r1, r7
    obj_area.x2 += ext_size;
 8005694:	18f3      	adds	r3, r6, r3
 8005696:	80a3      	strh	r3, [r4, #4]
    obj_area.y2 += ext_size;
 8005698:	88e3      	ldrh	r3, [r4, #6]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 800569a:	a804      	add	r0, sp, #16
    obj_area.y2 += ext_size;
 800569c:	18f6      	adds	r6, r6, r3
 800569e:	80e6      	strh	r6, [r4, #6]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 80056a0:	f005 ffd3 	bl	800b64a <_lv_area_intersect>

    /*Draw the parent and its children only if they ore on 'mask_parent'*/
    if(union_ok != false) {
 80056a4:	2800      	cmp	r0, #0
 80056a6:	d01e      	beq.n	80056e6 <lv_refr_obj+0x8a>

        /* Redraw the object */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
 80056a8:	6a2b      	ldr	r3, [r5, #32]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <lv_refr_obj+0x5a>
 80056ae:	9a01      	ldr	r2, [sp, #4]
 80056b0:	a904      	add	r1, sp, #16
 80056b2:	0028      	movs	r0, r5
 80056b4:	4798      	blx	r3
#if LV_COLOR_DEPTH == 32
        debug_color.ch.alpha = 0xff;
#endif
#endif
        /*Create a new 'obj_mask' without 'ext_size' because the children can't be visible there*/
        lv_obj_get_coords(obj, &obj_area);
 80056b6:	0021      	movs	r1, r4
 80056b8:	0028      	movs	r0, r5
 80056ba:	f7fe f9e6 	bl	8003a8a <lv_obj_get_coords>
        union_ok = _lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
 80056be:	0022      	movs	r2, r4
 80056c0:	0039      	movs	r1, r7
 80056c2:	a802      	add	r0, sp, #8
 80056c4:	f005 ffc1 	bl	800b64a <_lv_area_intersect>
        if(union_ok != false) {
 80056c8:	2800      	cmp	r0, #0
 80056ca:	d005      	beq.n	80056d8 <lv_refr_obj+0x7c>
            lv_area_t mask_child; /*Mask from obj and its child*/
            lv_obj_t * child_p;
            lv_area_t child_area;
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
 80056cc:	1d2f      	adds	r7, r5, #4
 80056ce:	0038      	movs	r0, r7
 80056d0:	f006 faa5 	bl	800bc1e <_lv_ll_get_tail>
 80056d4:	1e06      	subs	r6, r0, #0
 80056d6:	d108      	bne.n	80056ea <lv_refr_obj+0x8e>
                }
            }
        }

        /* If all the children are redrawn make 'post draw' design */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
 80056d8:	6a2b      	ldr	r3, [r5, #32]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <lv_refr_obj+0x8a>
 80056de:	2201      	movs	r2, #1
 80056e0:	a904      	add	r1, sp, #16
 80056e2:	0028      	movs	r0, r5
 80056e4:	4798      	blx	r3
    }
}
 80056e6:	b00d      	add	sp, #52	; 0x34
 80056e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                lv_obj_get_coords(child_p, &child_area);
 80056ea:	ac0a      	add	r4, sp, #40	; 0x28
 80056ec:	0021      	movs	r1, r4
 80056ee:	0030      	movs	r0, r6
 80056f0:	f7fe f9cb 	bl	8003a8a <lv_obj_get_coords>
                child_area.x1 -= ext_size;
 80056f4:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 80056f6:	8822      	ldrh	r2, [r4, #0]
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 80056f8:	a902      	add	r1, sp, #8
                child_area.x1 -= ext_size;
 80056fa:	1ad2      	subs	r2, r2, r3
 80056fc:	8022      	strh	r2, [r4, #0]
                child_area.y1 -= ext_size;
 80056fe:	8862      	ldrh	r2, [r4, #2]
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8005700:	a808      	add	r0, sp, #32
                child_area.y1 -= ext_size;
 8005702:	1ad2      	subs	r2, r2, r3
 8005704:	8062      	strh	r2, [r4, #2]
                child_area.x2 += ext_size;
 8005706:	88a2      	ldrh	r2, [r4, #4]
 8005708:	189a      	adds	r2, r3, r2
 800570a:	80a2      	strh	r2, [r4, #4]
                child_area.y2 += ext_size;
 800570c:	88e2      	ldrh	r2, [r4, #6]
 800570e:	189b      	adds	r3, r3, r2
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8005710:	0022      	movs	r2, r4
                child_area.y2 += ext_size;
 8005712:	80e3      	strh	r3, [r4, #6]
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8005714:	f005 ff99 	bl	800b64a <_lv_area_intersect>
                if(union_ok) {
 8005718:	2800      	cmp	r0, #0
 800571a:	d003      	beq.n	8005724 <lv_refr_obj+0xc8>
                    lv_refr_obj(child_p, &mask_child);
 800571c:	a908      	add	r1, sp, #32
 800571e:	0030      	movs	r0, r6
 8005720:	f7ff ff9c 	bl	800565c <lv_refr_obj>
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
 8005724:	0031      	movs	r1, r6
 8005726:	0038      	movs	r0, r7
 8005728:	f006 fa83 	bl	800bc32 <_lv_ll_get_prev>
 800572c:	e7d2      	b.n	80056d4 <lv_refr_obj+0x78>
	...

08005730 <lv_refr_obj_and_children>:
{
 8005730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005732:	0005      	movs	r5, r0
 8005734:	000e      	movs	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
 8005736:	2800      	cmp	r0, #0
 8005738:	d105      	bne.n	8005746 <lv_refr_obj_and_children+0x16>
 800573a:	4b14      	ldr	r3, [pc, #80]	; (800578c <lv_refr_obj_and_children+0x5c>)
 800573c:	6818      	ldr	r0, [r3, #0]
 800573e:	f7fd fd95 	bl	800326c <lv_disp_get_scr_act>
 8005742:	1e05      	subs	r5, r0, #0
    if(top_p == NULL) return;  /*Shouldn't happen*/
 8005744:	d008      	beq.n	8005758 <lv_refr_obj_and_children+0x28>
    lv_refr_obj(top_p, mask_p);
 8005746:	0028      	movs	r0, r5
 8005748:	0031      	movs	r1, r6
 800574a:	f7ff ff87 	bl	800565c <lv_refr_obj>
    par = lv_obj_get_parent(top_p);
 800574e:	0028      	movs	r0, r5
 8005750:	f7fe f974 	bl	8003a3c <lv_obj_get_parent>
        par = lv_obj_get_parent(par);
 8005754:	1e04      	subs	r4, r0, #0
    while(par != NULL) {
 8005756:	d100      	bne.n	800575a <lv_refr_obj_and_children+0x2a>
}
 8005758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
 800575a:	1d27      	adds	r7, r4, #4
            i = _lv_ll_get_prev(&(par->child_ll), i);
 800575c:	0029      	movs	r1, r5
 800575e:	0038      	movs	r0, r7
 8005760:	f006 fa67 	bl	800bc32 <_lv_ll_get_prev>
 8005764:	1e05      	subs	r5, r0, #0
        while(i != NULL) {
 8005766:	d10b      	bne.n	8005780 <lv_refr_obj_and_children+0x50>
        if(par->design_cb) par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
 8005768:	6a23      	ldr	r3, [r4, #32]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d003      	beq.n	8005776 <lv_refr_obj_and_children+0x46>
 800576e:	2201      	movs	r2, #1
 8005770:	0031      	movs	r1, r6
 8005772:	0020      	movs	r0, r4
 8005774:	4798      	blx	r3
        par = lv_obj_get_parent(par);
 8005776:	0020      	movs	r0, r4
 8005778:	f7fe f960 	bl	8003a3c <lv_obj_get_parent>
 800577c:	0025      	movs	r5, r4
 800577e:	e7e9      	b.n	8005754 <lv_refr_obj_and_children+0x24>
            lv_refr_obj(i, mask_p);
 8005780:	0031      	movs	r1, r6
 8005782:	0028      	movs	r0, r5
 8005784:	f7ff ff6a 	bl	800565c <lv_refr_obj>
 8005788:	e7e8      	b.n	800575c <lv_refr_obj_and_children+0x2c>
 800578a:	46c0      	nop			; (mov r8, r8)
 800578c:	20005d28 	.word	0x20005d28

08005790 <lv_area_copy>:
{
 8005790:	2300      	movs	r3, #0
        *d8 = *s8;
 8005792:	5cca      	ldrb	r2, [r1, r3]
 8005794:	54c2      	strb	r2, [r0, r3]
 8005796:	3301      	adds	r3, #1
    while(len) {
 8005798:	2b08      	cmp	r3, #8
 800579a:	d1fa      	bne.n	8005792 <lv_area_copy+0x2>
}
 800579c:	4770      	bx	lr
	...

080057a0 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
 80057a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 80057a2:	4dc5      	ldr	r5, [pc, #788]	; (8005ab8 <lv_refr_vdb_flush+0x318>)
{
 80057a4:	b095      	sub	sp, #84	; 0x54
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 80057a6:	6828      	ldr	r0, [r5, #0]
 80057a8:	f005 fe5c 	bl	800b464 <lv_disp_get_buf>
 80057ac:	0007      	movs	r7, r0
    lv_color_t * color_p = vdb->buf_act;
 80057ae:	6886      	ldr	r6, [r0, #8]

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
 80057b0:	6828      	ldr	r0, [r5, #0]
 80057b2:	f005 fe59 	bl	800b468 <lv_disp_is_double_buf>
 80057b6:	2800      	cmp	r0, #0
 80057b8:	d10c      	bne.n	80057d4 <lv_refr_vdb_flush+0x34>
        while(vdb->flushing) {
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
        }
    }

    vdb->flushing = 1;
 80057ba:	2301      	movs	r3, #1

    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
 80057bc:	682c      	ldr	r4, [r5, #0]
    vdb->flushing = 1;
 80057be:	61bb      	str	r3, [r7, #24]
    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
 80057c0:	6862      	ldr	r2, [r4, #4]
 80057c2:	6a11      	ldr	r1, [r2, #32]
 80057c4:	07c9      	lsls	r1, r1, #31
 80057c6:	d40a      	bmi.n	80057de <lv_refr_vdb_flush+0x3e>
    else vdb->flushing_last = 0;
 80057c8:	2300      	movs	r3, #0
 80057ca:	e00b      	b.n	80057e4 <lv_refr_vdb_flush+0x44>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
 80057cc:	69c3      	ldr	r3, [r0, #28]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <lv_refr_vdb_flush+0x36>
 80057d2:	4798      	blx	r3
 80057d4:	6828      	ldr	r0, [r5, #0]
        while(vdb->flushing) {
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1f7      	bne.n	80057cc <lv_refr_vdb_flush+0x2c>
 80057dc:	e7ed      	b.n	80057ba <lv_refr_vdb_flush+0x1a>
    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
 80057de:	6a12      	ldr	r2, [r2, #32]
 80057e0:	0792      	lsls	r2, r2, #30
 80057e2:	d5f1      	bpl.n	80057c8 <lv_refr_vdb_flush+0x28>
    else vdb->flushing_last = 0;
 80057e4:	61fb      	str	r3, [r7, #28]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
 80057e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d001      	beq.n	80057f0 <lv_refr_vdb_flush+0x50>
 80057ec:	0020      	movs	r0, r4
 80057ee:	4798      	blx	r3

    if(disp->driver.flush_cb) {
 80057f0:	68e3      	ldr	r3, [r4, #12]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d100      	bne.n	80057f8 <lv_refr_vdb_flush+0x58>
 80057f6:	e0b9      	b.n	800596c <lv_refr_vdb_flush+0x1cc>
 80057f8:	0039      	movs	r1, r7
 80057fa:	3110      	adds	r1, #16
 80057fc:	910b      	str	r1, [sp, #44]	; 0x2c
        /*Rotate the buffer to the display's native orientation if necessary*/
        if(disp->driver.rotated != LV_DISP_ROT_NONE && disp->driver.sw_rotate) {
 80057fe:	2106      	movs	r1, #6
 8005800:	7a22      	ldrb	r2, [r4, #8]
 8005802:	420a      	tst	r2, r1
 8005804:	d100      	bne.n	8005808 <lv_refr_vdb_flush+0x68>
 8005806:	e1ce      	b.n	8005ba6 <lv_refr_vdb_flush+0x406>
 8005808:	3102      	adds	r1, #2
 800580a:	420a      	tst	r2, r1
 800580c:	d100      	bne.n	8005810 <lv_refr_vdb_flush+0x70>
 800580e:	e1ca      	b.n	8005ba6 <lv_refr_vdb_flush+0x406>
            lv_refr_vdb_rotate(&vdb->area, vdb->buf_act);
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	9302      	str	r3, [sp, #8]
    lv_disp_drv_t * drv = &disp_refr->driver;
 8005814:	682b      	ldr	r3, [r5, #0]
    if(lv_disp_is_true_double_buf(disp_refr) && drv->sw_rotate) {
 8005816:	0018      	movs	r0, r3
    lv_disp_drv_t * drv = &disp_refr->driver;
 8005818:	9300      	str	r3, [sp, #0]
    if(lv_disp_is_true_double_buf(disp_refr) && drv->sw_rotate) {
 800581a:	f005 fe2e 	bl	800b47a <lv_disp_is_true_double_buf>
 800581e:	9b00      	ldr	r3, [sp, #0]
 8005820:	7a1b      	ldrb	r3, [r3, #8]
 8005822:	2800      	cmp	r0, #0
 8005824:	d003      	beq.n	800582e <lv_refr_vdb_flush+0x8e>
 8005826:	2208      	movs	r2, #8
 8005828:	4213      	tst	r3, r2
 800582a:	d000      	beq.n	800582e <lv_refr_vdb_flush+0x8e>
 800582c:	e09e      	b.n	800596c <lv_refr_vdb_flush+0x1cc>
    if(drv->rotated == LV_DISP_ROT_180) {
 800582e:	2206      	movs	r2, #6
 8005830:	401a      	ands	r2, r3
 8005832:	2a04      	cmp	r2, #4
 8005834:	d13a      	bne.n	80058ac <lv_refr_vdb_flush+0x10c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005836:	8abb      	ldrh	r3, [r7, #20]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005838:	8afc      	ldrh	r4, [r7, #22]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800583a:	9301      	str	r3, [sp, #4]
 800583c:	8a3b      	ldrh	r3, [r7, #16]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800583e:	8a7a      	ldrh	r2, [r7, #18]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005840:	469c      	mov	ip, r3
 8005842:	4661      	mov	r1, ip
 8005844:	9b01      	ldr	r3, [sp, #4]
 8005846:	3301      	adds	r3, #1
 8005848:	1a5b      	subs	r3, r3, r1
    uint32_t total = area_w * area_h;
 800584a:	b219      	sxth	r1, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800584c:	1c63      	adds	r3, r4, #1
 800584e:	1a9b      	subs	r3, r3, r2
 8005850:	b21b      	sxth	r3, r3
 8005852:	434b      	muls	r3, r1
 8005854:	9902      	ldr	r1, [sp, #8]
    uint32_t i = total - 1, j = 0;
 8005856:	1e5d      	subs	r5, r3, #1
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	18cb      	adds	r3, r1, r3
 800585c:	0008      	movs	r0, r1
 800585e:	0029      	movs	r1, r5
 8005860:	3b02      	subs	r3, #2
    while(i > j) {
 8005862:	1a6e      	subs	r6, r5, r1
 8005864:	428e      	cmp	r6, r1
 8005866:	d318      	bcc.n	800589a <lv_refr_vdb_flush+0xfa>
 8005868:	9b00      	ldr	r3, [sp, #0]
        drv->flush_cb(drv, area, color_p);
 800586a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800586c:	885b      	ldrh	r3, [r3, #2]
 800586e:	9800      	ldr	r0, [sp, #0]
 8005870:	3b01      	subs	r3, #1
 8005872:	b29b      	uxth	r3, r3
    area->y2 = drv->ver_res - area->y1 - 1;
 8005874:	1a9a      	subs	r2, r3, r2
 8005876:	82fa      	strh	r2, [r7, #22]
    area->x2 = drv->hor_res - area->x1 - 1;
 8005878:	4662      	mov	r2, ip
    area->y1 = drv->ver_res - tmp_coord - 1;
 800587a:	1b1c      	subs	r4, r3, r4
 800587c:	9b00      	ldr	r3, [sp, #0]
 800587e:	827c      	strh	r4, [r7, #18]
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	3b01      	subs	r3, #1
 8005884:	b29b      	uxth	r3, r3
    area->x2 = drv->hor_res - area->x1 - 1;
 8005886:	1a9a      	subs	r2, r3, r2
 8005888:	82ba      	strh	r2, [r7, #20]
    area->x1 = drv->hor_res - tmp_coord - 1;
 800588a:	9a01      	ldr	r2, [sp, #4]
 800588c:	1a9b      	subs	r3, r3, r2
 800588e:	823b      	strh	r3, [r7, #16]
        drv->flush_cb(drv, area, color_p);
 8005890:	9b00      	ldr	r3, [sp, #0]
 8005892:	9a02      	ldr	r2, [sp, #8]
 8005894:	68db      	ldr	r3, [r3, #12]
        } else {
            disp->driver.flush_cb(&disp->driver, &vdb->area, color_p);
 8005896:	4798      	blx	r3
 8005898:	e068      	b.n	800596c <lv_refr_vdb_flush+0x1cc>
        tmp = color_p[i];
 800589a:	881e      	ldrh	r6, [r3, #0]
        i--;
 800589c:	3901      	subs	r1, #1
        tmp = color_p[i];
 800589e:	9603      	str	r6, [sp, #12]
        color_p[i] = color_p[j];
 80058a0:	8806      	ldrh	r6, [r0, #0]
 80058a2:	801e      	strh	r6, [r3, #0]
        color_p[j] = tmp;
 80058a4:	9e03      	ldr	r6, [sp, #12]
 80058a6:	8006      	strh	r6, [r0, #0]
 80058a8:	3002      	adds	r0, #2
 80058aa:	e7d9      	b.n	8005860 <lv_refr_vdb_flush+0xc0>
    } else if(drv->rotated == LV_DISP_ROT_90 || drv->rotated == LV_DISP_ROT_270) {
 80058ac:	079b      	lsls	r3, r3, #30
 80058ae:	d55d      	bpl.n	800596c <lv_refr_vdb_flush+0x1cc>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 80058b0:	6828      	ldr	r0, [r5, #0]
 80058b2:	f005 fdd7 	bl	800b464 <lv_disp_get_buf>
        lv_coord_t area_w = lv_area_get_width(area);
 80058b6:	2310      	movs	r3, #16
 80058b8:	5efd      	ldrsh	r5, [r7, r3]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80058ba:	8abb      	ldrh	r3, [r7, #20]
 80058bc:	b2ac      	uxth	r4, r5
 80058be:	3301      	adds	r3, #1
 80058c0:	1b1b      	subs	r3, r3, r4
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	9305      	str	r3, [sp, #20]
 80058c6:	466b      	mov	r3, sp
 80058c8:	2214      	movs	r2, #20
 80058ca:	5e9b      	ldrsh	r3, [r3, r2]
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 80058cc:	9009      	str	r0, [sp, #36]	; 0x24
 80058ce:	9301      	str	r3, [sp, #4]
        lv_coord_t area_h = lv_area_get_height(area);
 80058d0:	2212      	movs	r2, #18
 80058d2:	5ebb      	ldrsh	r3, [r7, r2]
        lv_coord_t max_row = LV_MATH_MIN((lv_coord_t)((LV_DISP_ROT_MAX_BUF/sizeof(lv_color_t)) / area_w), area_h);
 80058d4:	2080      	movs	r0, #128	; 0x80
        lv_coord_t area_h = lv_area_get_height(area);
 80058d6:	930c      	str	r3, [sp, #48]	; 0x30
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80058d8:	466b      	mov	r3, sp
 80058da:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
        lv_coord_t max_row = LV_MATH_MIN((lv_coord_t)((LV_DISP_ROT_MAX_BUF/sizeof(lv_color_t)) / area_w), area_h);
 80058dc:	9901      	ldr	r1, [sp, #4]
 80058de:	9306      	str	r3, [sp, #24]
 80058e0:	8afb      	ldrh	r3, [r7, #22]
 80058e2:	9a06      	ldr	r2, [sp, #24]
 80058e4:	3301      	adds	r3, #1
 80058e6:	1a9b      	subs	r3, r3, r2
 80058e8:	b21b      	sxth	r3, r3
 80058ea:	0100      	lsls	r0, r0, #4
 80058ec:	9307      	str	r3, [sp, #28]
 80058ee:	f7fa fc41 	bl	8000174 <__udivsi3>
 80058f2:	9a07      	ldr	r2, [sp, #28]
 80058f4:	1c03      	adds	r3, r0, #0
 80058f6:	b200      	sxth	r0, r0
 80058f8:	4290      	cmp	r0, r2
 80058fa:	dd01      	ble.n	8005900 <lv_refr_vdb_flush+0x160>
 80058fc:	466b      	mov	r3, sp
 80058fe:	8b9b      	ldrh	r3, [r3, #28]
        if(drv->rotated == LV_DISP_ROT_90) {
 8005900:	2206      	movs	r2, #6
        lv_coord_t max_row = LV_MATH_MIN((lv_coord_t)((LV_DISP_ROT_MAX_BUF/sizeof(lv_color_t)) / area_w), area_h);
 8005902:	b21b      	sxth	r3, r3
 8005904:	930d      	str	r3, [sp, #52]	; 0x34
        if(drv->rotated == LV_DISP_ROT_90) {
 8005906:	9b00      	ldr	r3, [sp, #0]
 8005908:	7a1b      	ldrb	r3, [r3, #8]
 800590a:	4013      	ands	r3, r2
 800590c:	2b02      	cmp	r3, #2
 800590e:	d13a      	bne.n	8005986 <lv_refr_vdb_flush+0x1e6>
            area->y2 = drv->ver_res - area->x1 - 1;
 8005910:	9b00      	ldr	r3, [sp, #0]
 8005912:	885b      	ldrh	r3, [r3, #2]
 8005914:	3b01      	subs	r3, #1
 8005916:	1b1c      	subs	r4, r3, r4
 8005918:	b2a4      	uxth	r4, r4
            area->y1 = area->y2 - area_w + 1;
 800591a:	9b05      	ldr	r3, [sp, #20]
            area->y2 = drv->ver_res - area->x1 - 1;
 800591c:	82fc      	strh	r4, [r7, #22]
            area->y1 = area->y2 - area_w + 1;
 800591e:	3401      	adds	r4, #1
 8005920:	1ae4      	subs	r4, r4, r3
 8005922:	827c      	strh	r4, [r7, #18]
        vdb->flushing = 0;
 8005924:	2200      	movs	r2, #0
 8005926:	9b09      	ldr	r3, [sp, #36]	; 0x24
    for(lv_coord_t i = 0; i < w/2; i++) {
 8005928:	9901      	ldr	r1, [sp, #4]
        vdb->flushing = 0;
 800592a:	619a      	str	r2, [r3, #24]
    for(lv_coord_t i = 0; i < w/2; i++) {
 800592c:	9b01      	ldr	r3, [sp, #4]
 800592e:	0fdb      	lsrs	r3, r3, #31
 8005930:	185b      	adds	r3, r3, r1
 8005932:	105b      	asrs	r3, r3, #1
        for(lv_coord_t j = 0; j < (w + 1)/2; j++) {
 8005934:	3101      	adds	r1, #1
    for(lv_coord_t i = 0; i < w/2; i++) {
 8005936:	9313      	str	r3, [sp, #76]	; 0x4c
        for(lv_coord_t j = 0; j < (w + 1)/2; j++) {
 8005938:	0fcb      	lsrs	r3, r1, #31
 800593a:	185b      	adds	r3, r3, r1
 800593c:	105b      	asrs	r3, r3, #1
 800593e:	9312      	str	r3, [sp, #72]	; 0x48
 8005940:	466b      	mov	r3, sp
 8005942:	9901      	ldr	r1, [sp, #4]
 8005944:	889b      	ldrh	r3, [r3, #4]
 8005946:	4291      	cmp	r1, r2
 8005948:	da00      	bge.n	800594c <lv_refr_vdb_flush+0x1ac>
 800594a:	1c13      	adds	r3, r2, #0
 800594c:	b21b      	sxth	r3, r3
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	9310      	str	r3, [sp, #64]	; 0x40
        lv_coord_t row = 0;
 8005952:	2300      	movs	r3, #0
 8005954:	9303      	str	r3, [sp, #12]
        lv_color_t * rot_buf = NULL; 
 8005956:	9304      	str	r3, [sp, #16]
        while(row < area_h) {
 8005958:	9b07      	ldr	r3, [sp, #28]
 800595a:	9a03      	ldr	r2, [sp, #12]
 800595c:	4293      	cmp	r3, r2
 800595e:	dc18      	bgt.n	8005992 <lv_refr_vdb_flush+0x1f2>
        if(rot_buf != NULL)
 8005960:	9b04      	ldr	r3, [sp, #16]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d002      	beq.n	800596c <lv_refr_vdb_flush+0x1cc>
            _lv_mem_buf_release(rot_buf);
 8005966:	0018      	movs	r0, r3
 8005968:	f006 fb30 	bl	800bfcc <_lv_mem_buf_release>
        }
    }
    if(vdb->buf1 && vdb->buf2) {
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d007      	beq.n	8005982 <lv_refr_vdb_flush+0x1e2>
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	2a00      	cmp	r2, #0
 8005976:	d004      	beq.n	8005982 <lv_refr_vdb_flush+0x1e2>
        if(vdb->buf_act == vdb->buf1)
 8005978:	68b9      	ldr	r1, [r7, #8]
 800597a:	428b      	cmp	r3, r1
 800597c:	d000      	beq.n	8005980 <lv_refr_vdb_flush+0x1e0>
 800597e:	e116      	b.n	8005bae <lv_refr_vdb_flush+0x40e>
            vdb->buf_act = vdb->buf2;
 8005980:	60ba      	str	r2, [r7, #8]
        else
            vdb->buf_act = vdb->buf1;
    }
}
 8005982:	b015      	add	sp, #84	; 0x54
 8005984:	bdf0      	pop	{r4, r5, r6, r7, pc}
            area->y2 = area->y1 + area_w - 1;
 8005986:	9b05      	ldr	r3, [sp, #20]
 8005988:	3c01      	subs	r4, #1
 800598a:	191c      	adds	r4, r3, r4
            area->y1 = area->x1;
 800598c:	827d      	strh	r5, [r7, #18]
            area->y2 = area->y1 + area_w - 1;
 800598e:	82fc      	strh	r4, [r7, #22]
 8005990:	e7c8      	b.n	8005924 <lv_refr_vdb_flush+0x184>
            lv_coord_t height = LV_MATH_MIN(max_row, area_h-row);
 8005992:	9b07      	ldr	r3, [sp, #28]
 8005994:	9a03      	ldr	r2, [sp, #12]
 8005996:	1a9d      	subs	r5, r3, r2
 8005998:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800599a:	429d      	cmp	r5, r3
 800599c:	dd00      	ble.n	80059a0 <lv_refr_vdb_flush+0x200>
 800599e:	001d      	movs	r5, r3
            vdb->flushing = 1;
 80059a0:	2201      	movs	r2, #1
 80059a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
            lv_coord_t height = LV_MATH_MIN(max_row, area_h-row);
 80059a4:	b22c      	sxth	r4, r5
            vdb->flushing = 1;
 80059a6:	619a      	str	r2, [r3, #24]
            if((row == 0) && (area_h >= area_w)) {
 80059a8:	9b03      	ldr	r3, [sp, #12]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d000      	beq.n	80059b0 <lv_refr_vdb_flush+0x210>
 80059ae:	e091      	b.n	8005ad4 <lv_refr_vdb_flush+0x334>
 80059b0:	9b01      	ldr	r3, [sp, #4]
 80059b2:	9a07      	ldr	r2, [sp, #28]
 80059b4:	4293      	cmp	r3, r2
 80059b6:	dd00      	ble.n	80059ba <lv_refr_vdb_flush+0x21a>
 80059b8:	e08c      	b.n	8005ad4 <lv_refr_vdb_flush+0x334>
                lv_refr_vdb_rotate_90_sqr(drv->rotated == LV_DISP_ROT_270, area_w, color_p);
 80059ba:	2206      	movs	r2, #6
 80059bc:	9b00      	ldr	r3, [sp, #0]
 80059be:	7a1b      	ldrb	r3, [r3, #8]
 80059c0:	401a      	ands	r2, r3
 80059c2:	9b03      	ldr	r3, [sp, #12]
 80059c4:	920f      	str	r2, [sp, #60]	; 0x3c
 80059c6:	469c      	mov	ip, r3
 80059c8:	001d      	movs	r5, r3
 80059ca:	9b05      	ldr	r3, [sp, #20]
 80059cc:	3b01      	subs	r3, #1
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	9308      	str	r3, [sp, #32]
    for(lv_coord_t i = 0; i < w/2; i++) {
 80059d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80059d4:	b22b      	sxth	r3, r5
 80059d6:	429a      	cmp	r2, r3
 80059d8:	dd46      	ble.n	8005a68 <lv_refr_vdb_flush+0x2c8>
 80059da:	9b08      	ldr	r3, [sp, #32]
                    &color_p[inv_i * w + inv_j],
 80059dc:	9c08      	ldr	r4, [sp, #32]
 80059de:	1b5b      	subs	r3, r3, r5
 80059e0:	b21b      	sxth	r3, r3
 80059e2:	930a      	str	r3, [sp, #40]	; 0x28
 80059e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059e6:	9b01      	ldr	r3, [sp, #4]
 80059e8:	4353      	muls	r3, r2
 80059ea:	9311      	str	r3, [sp, #68]	; 0x44
 80059ec:	e026      	b.n	8005a3c <lv_refr_vdb_flush+0x29c>
 80059ee:	4662      	mov	r2, ip
 80059f0:	1898      	adds	r0, r3, r2
 80059f2:	9a02      	ldr	r2, [sp, #8]
 80059f4:	0040      	lsls	r0, r0, #1
 80059f6:	9901      	ldr	r1, [sp, #4]
 80059f8:	1810      	adds	r0, r2, r0
 80059fa:	b222      	sxth	r2, r4
 80059fc:	4351      	muls	r1, r2
 80059fe:	9e02      	ldr	r6, [sp, #8]
 8005a00:	1949      	adds	r1, r1, r5
 8005a02:	0049      	lsls	r1, r1, #1
 8005a04:	1871      	adds	r1, r6, r1
 8005a06:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8005a08:	18b2      	adds	r2, r6, r2
 8005a0a:	9e02      	ldr	r6, [sp, #8]
 8005a0c:	0052      	lsls	r2, r2, #1
 8005a0e:	18b2      	adds	r2, r6, r2
 8005a10:	9e01      	ldr	r6, [sp, #4]
 8005a12:	4373      	muls	r3, r6
 8005a14:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005a16:	199b      	adds	r3, r3, r6
 8005a18:	9e02      	ldr	r6, [sp, #8]
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	18f3      	adds	r3, r6, r3
 8005a1e:	8806      	ldrh	r6, [r0, #0]
 8005a20:	960e      	str	r6, [sp, #56]	; 0x38
            if(is_270) {
 8005a22:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8005a24:	2e06      	cmp	r6, #6
 8005a26:	d116      	bne.n	8005a56 <lv_refr_vdb_flush+0x2b6>
    *a = *b;
 8005a28:	880e      	ldrh	r6, [r1, #0]
 8005a2a:	8006      	strh	r6, [r0, #0]
    *b = *c;
 8005a2c:	8810      	ldrh	r0, [r2, #0]
 8005a2e:	8008      	strh	r0, [r1, #0]
    *c = *d;
 8005a30:	8819      	ldrh	r1, [r3, #0]
 8005a32:	8011      	strh	r1, [r2, #0]
    *d = tmp;
 8005a34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a36:	801a      	strh	r2, [r3, #0]
 8005a38:	3c01      	subs	r4, #1
 8005a3a:	b2a4      	uxth	r4, r4
        for(lv_coord_t j = 0; j < (w + 1)/2; j++) {
 8005a3c:	9b08      	ldr	r3, [sp, #32]
 8005a3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a40:	1b1b      	subs	r3, r3, r4
 8005a42:	b21b      	sxth	r3, r3
 8005a44:	4293      	cmp	r3, r2
 8005a46:	dbd2      	blt.n	80059ee <lv_refr_vdb_flush+0x24e>
 8005a48:	9a01      	ldr	r2, [sp, #4]
 8005a4a:	4663      	mov	r3, ip
 8005a4c:	4694      	mov	ip, r2
 8005a4e:	4463      	add	r3, ip
 8005a50:	3501      	adds	r5, #1
 8005a52:	469c      	mov	ip, r3
 8005a54:	e7bd      	b.n	80059d2 <lv_refr_vdb_flush+0x232>
    *a = *b;
 8005a56:	881e      	ldrh	r6, [r3, #0]
 8005a58:	8006      	strh	r6, [r0, #0]
    *b = *c;
 8005a5a:	8810      	ldrh	r0, [r2, #0]
 8005a5c:	8018      	strh	r0, [r3, #0]
    *c = *d;
 8005a5e:	880b      	ldrh	r3, [r1, #0]
 8005a60:	8013      	strh	r3, [r2, #0]
    *d = tmp;
 8005a62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a64:	800b      	strh	r3, [r1, #0]
 8005a66:	e7e7      	b.n	8005a38 <lv_refr_vdb_flush+0x298>
                if(drv->rotated == LV_DISP_ROT_90) {
 8005a68:	2206      	movs	r2, #6
 8005a6a:	9b00      	ldr	r3, [sp, #0]
 8005a6c:	7a1b      	ldrb	r3, [r3, #8]
 8005a6e:	4013      	ands	r3, r2
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d123      	bne.n	8005abc <lv_refr_vdb_flush+0x31c>
                    area->x1 = init_y_off;
 8005a74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                    area->x2 = init_y_off+area_w-1;
 8005a76:	9a05      	ldr	r2, [sp, #20]
                    area->x1 = init_y_off;
 8005a78:	823b      	strh	r3, [r7, #16]
                    area->x2 = init_y_off+area_w-1;
 8005a7a:	9b06      	ldr	r3, [sp, #24]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	18d3      	adds	r3, r2, r3
 8005a80:	82bb      	strh	r3, [r7, #20]
                    area->x1 = area->x2 - area_w + 1;
 8005a82:	9c01      	ldr	r4, [sp, #4]
            drv->flush_cb(drv, area, rot_buf == NULL ? color_p : rot_buf);
 8005a84:	9b00      	ldr	r3, [sp, #0]
 8005a86:	9904      	ldr	r1, [sp, #16]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	9a02      	ldr	r2, [sp, #8]
 8005a8c:	2900      	cmp	r1, #0
 8005a8e:	d000      	beq.n	8005a92 <lv_refr_vdb_flush+0x2f2>
 8005a90:	000a      	movs	r2, r1
 8005a92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a94:	9800      	ldr	r0, [sp, #0]
 8005a96:	4798      	blx	r3
            while(vdb->flushing) {
 8005a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d000      	beq.n	8005aa2 <lv_refr_vdb_flush+0x302>
 8005aa0:	e079      	b.n	8005b96 <lv_refr_vdb_flush+0x3f6>
            color_p += area_w * height;
 8005aa2:	9b01      	ldr	r3, [sp, #4]
 8005aa4:	9a02      	ldr	r2, [sp, #8]
 8005aa6:	4363      	muls	r3, r4
 8005aa8:	005b      	lsls	r3, r3, #1
 8005aaa:	18d3      	adds	r3, r2, r3
 8005aac:	9302      	str	r3, [sp, #8]
            row += height;
 8005aae:	9b03      	ldr	r3, [sp, #12]
 8005ab0:	191c      	adds	r4, r3, r4
 8005ab2:	b223      	sxth	r3, r4
 8005ab4:	9303      	str	r3, [sp, #12]
 8005ab6:	e74f      	b.n	8005958 <lv_refr_vdb_flush+0x1b8>
 8005ab8:	20005d28 	.word	0x20005d28
                    area->x2 = drv->hor_res - 1 - init_y_off;
 8005abc:	9b00      	ldr	r3, [sp, #0]
 8005abe:	9a06      	ldr	r2, [sp, #24]
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	1a9b      	subs	r3, r3, r2
 8005ac6:	b29b      	uxth	r3, r3
                    area->x1 = area->x2 - area_w + 1;
 8005ac8:	9a05      	ldr	r2, [sp, #20]
                    area->x2 = drv->hor_res - 1 - init_y_off;
 8005aca:	82bb      	strh	r3, [r7, #20]
                    area->x1 = area->x2 - area_w + 1;
 8005acc:	3301      	adds	r3, #1
 8005ace:	1a9b      	subs	r3, r3, r2
 8005ad0:	823b      	strh	r3, [r7, #16]
 8005ad2:	e7d6      	b.n	8005a82 <lv_refr_vdb_flush+0x2e2>
                if(rot_buf == NULL)
 8005ad4:	9b04      	ldr	r3, [sp, #16]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d104      	bne.n	8005ae4 <lv_refr_vdb_flush+0x344>
                    rot_buf = _lv_mem_buf_get(LV_DISP_ROT_MAX_BUF);
 8005ada:	2080      	movs	r0, #128	; 0x80
 8005adc:	0140      	lsls	r0, r0, #5
 8005ade:	f006 fb6d 	bl	800c1bc <_lv_mem_buf_get>
 8005ae2:	9004      	str	r0, [sp, #16]
                lv_refr_vdb_rotate_90(drv->rotated == LV_DISP_ROT_270, area_w, height, color_p, rot_buf);
 8005ae4:	2206      	movs	r2, #6
 8005ae6:	9b00      	ldr	r3, [sp, #0]
 8005ae8:	7a1b      	ldrb	r3, [r3, #8]
 8005aea:	401a      	ands	r2, r3
    uint32_t invert = (area_w * area_h) - 1;
 8005aec:	9b01      	ldr	r3, [sp, #4]
                lv_refr_vdb_rotate_90(drv->rotated == LV_DISP_ROT_270, area_w, height, color_p, rot_buf);
 8005aee:	920e      	str	r2, [sp, #56]	; 0x38
    uint32_t invert = (area_w * area_h) - 1;
 8005af0:	4363      	muls	r3, r4
    uint32_t initial_i = ((area_w - 1) * area_h);
 8005af2:	1b1a      	subs	r2, r3, r4
 8005af4:	4694      	mov	ip, r2
 8005af6:	4661      	mov	r1, ip
 8005af8:	9a02      	ldr	r2, [sp, #8]
 8005afa:	1a5b      	subs	r3, r3, r1
 8005afc:	920a      	str	r2, [sp, #40]	; 0x28
 8005afe:	2200      	movs	r2, #0
 8005b00:	3b01      	subs	r3, #1
 8005b02:	9311      	str	r3, [sp, #68]	; 0x44
    for(lv_coord_t y = 0; y < area_h; y++) {
 8005b04:	b213      	sxth	r3, r2
 8005b06:	429c      	cmp	r4, r3
 8005b08:	dc10      	bgt.n	8005b2c <lv_refr_vdb_flush+0x38c>
 8005b0a:	466b      	mov	r3, sp
                if(drv->rotated == LV_DISP_ROT_90) {
 8005b0c:	2106      	movs	r1, #6
 8005b0e:	899a      	ldrh	r2, [r3, #12]
 8005b10:	9b00      	ldr	r3, [sp, #0]
 8005b12:	b2ad      	uxth	r5, r5
 8005b14:	7a1b      	ldrb	r3, [r3, #8]
 8005b16:	400b      	ands	r3, r1
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d130      	bne.n	8005b7e <lv_refr_vdb_flush+0x3de>
                    area->x1 = init_y_off+row;
 8005b1c:	9b06      	ldr	r3, [sp, #24]
 8005b1e:	189a      	adds	r2, r3, r2
 8005b20:	b293      	uxth	r3, r2
 8005b22:	823b      	strh	r3, [r7, #16]
                    area->x2 = init_y_off+row+height-1;
 8005b24:	3b01      	subs	r3, #1
 8005b26:	18ed      	adds	r5, r5, r3
 8005b28:	82bd      	strh	r5, [r7, #20]
 8005b2a:	e7ab      	b.n	8005a84 <lv_refr_vdb_flush+0x2e4>
 8005b2c:	4663      	mov	r3, ip
        if(invert_i)
 8005b2e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005b30:	18d3      	adds	r3, r2, r3
 8005b32:	2906      	cmp	r1, #6
 8005b34:	d101      	bne.n	8005b3a <lv_refr_vdb_flush+0x39a>
 8005b36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b38:	1a9b      	subs	r3, r3, r2
                lv_refr_vdb_rotate_90_sqr(drv->rotated == LV_DISP_ROT_270, area_w, color_p);
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	9108      	str	r1, [sp, #32]
        for(lv_coord_t x = 0; x < area_w; x++) {
 8005b3e:	9908      	ldr	r1, [sp, #32]
 8005b40:	b209      	sxth	r1, r1
 8005b42:	0008      	movs	r0, r1
 8005b44:	9901      	ldr	r1, [sp, #4]
 8005b46:	4281      	cmp	r1, r0
 8005b48:	dc05      	bgt.n	8005b56 <lv_refr_vdb_flush+0x3b6>
 8005b4a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b4e:	3201      	adds	r2, #1
 8005b50:	18cb      	adds	r3, r1, r3
 8005b52:	930a      	str	r3, [sp, #40]	; 0x28
 8005b54:	e7d6      	b.n	8005b04 <lv_refr_vdb_flush+0x364>
            rot_buf[i] = *(orig_color_p++);
 8005b56:	9908      	ldr	r1, [sp, #32]
 8005b58:	004e      	lsls	r6, r1, #1
 8005b5a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b5c:	5b8e      	ldrh	r6, [r1, r6]
 8005b5e:	960f      	str	r6, [sp, #60]	; 0x3c
 8005b60:	005e      	lsls	r6, r3, #1
 8005b62:	0031      	movs	r1, r6
 8005b64:	0008      	movs	r0, r1
 8005b66:	9e04      	ldr	r6, [sp, #16]
 8005b68:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005b6a:	5381      	strh	r1, [r0, r6]
            if(invert_i)
 8005b6c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005b6e:	2906      	cmp	r1, #6
 8005b70:	d103      	bne.n	8005b7a <lv_refr_vdb_flush+0x3da>
                i += area_h;
 8005b72:	191b      	adds	r3, r3, r4
 8005b74:	9908      	ldr	r1, [sp, #32]
 8005b76:	3101      	adds	r1, #1
 8005b78:	e7e0      	b.n	8005b3c <lv_refr_vdb_flush+0x39c>
                i -= area_h;
 8005b7a:	1b1b      	subs	r3, r3, r4
 8005b7c:	e7fa      	b.n	8005b74 <lv_refr_vdb_flush+0x3d4>
                    area->x2 = drv->hor_res - 1 - init_y_off - row;
 8005b7e:	9b00      	ldr	r3, [sp, #0]
 8005b80:	9906      	ldr	r1, [sp, #24]
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	3b01      	subs	r3, #1
 8005b86:	1a5b      	subs	r3, r3, r1
 8005b88:	1a9b      	subs	r3, r3, r2
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	82bb      	strh	r3, [r7, #20]
                    area->x1 = area->x2 - height + 1;
 8005b8e:	3301      	adds	r3, #1
 8005b90:	1b5b      	subs	r3, r3, r5
 8005b92:	823b      	strh	r3, [r7, #16]
 8005b94:	e776      	b.n	8005a84 <lv_refr_vdb_flush+0x2e4>
                if(drv->wait_cb) drv->wait_cb(drv);
 8005b96:	9b00      	ldr	r3, [sp, #0]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d100      	bne.n	8005ba0 <lv_refr_vdb_flush+0x400>
 8005b9e:	e77b      	b.n	8005a98 <lv_refr_vdb_flush+0x2f8>
 8005ba0:	9800      	ldr	r0, [sp, #0]
 8005ba2:	4798      	blx	r3
 8005ba4:	e778      	b.n	8005a98 <lv_refr_vdb_flush+0x2f8>
            disp->driver.flush_cb(&disp->driver, &vdb->area, color_p);
 8005ba6:	0032      	movs	r2, r6
 8005ba8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005baa:	0020      	movs	r0, r4
 8005bac:	e673      	b.n	8005896 <lv_refr_vdb_flush+0xf6>
            vdb->buf_act = vdb->buf1;
 8005bae:	60bb      	str	r3, [r7, #8]
}
 8005bb0:	e6e7      	b.n	8005982 <lv_refr_vdb_flush+0x1e2>
 8005bb2:	46c0      	nop			; (mov r8, r8)

08005bb4 <lv_refr_area_part>:
{
 8005bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8005bb6:	4c4a      	ldr	r4, [pc, #296]	; (8005ce0 <lv_refr_area_part+0x12c>)
{
 8005bb8:	b09d      	sub	sp, #116	; 0x74
 8005bba:	0006      	movs	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8005bbc:	6820      	ldr	r0, [r4, #0]
 8005bbe:	f005 fc51 	bl	800b464 <lv_disp_get_buf>
 8005bc2:	0005      	movs	r5, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
 8005bc4:	6820      	ldr	r0, [r4, #0]
 8005bc6:	f005 fc4f 	bl	800b468 <lv_disp_is_double_buf>
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	d018      	beq.n	8005c00 <lv_refr_area_part+0x4c>
    _lv_area_intersect(&start_mask, area_p, &vdb->area);
 8005bce:	002a      	movs	r2, r5
 8005bd0:	0031      	movs	r1, r6
 8005bd2:	3210      	adds	r2, #16
 8005bd4:	a803      	add	r0, sp, #12
 8005bd6:	f005 fd38 	bl	800b64a <_lv_area_intersect>
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 8005bda:	6820      	ldr	r0, [r4, #0]
 8005bdc:	f7fd fb46 	bl	800326c <lv_disp_get_scr_act>
 8005be0:	0001      	movs	r1, r0
 8005be2:	a803      	add	r0, sp, #12
 8005be4:	f7ff fd0c 	bl	8005600 <lv_refr_get_top_obj>
    if(disp_refr->prev_scr) {
 8005be8:	6823      	ldr	r3, [r4, #0]
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 8005bea:	0005      	movs	r5, r0
    if(disp_refr->prev_scr) {
 8005bec:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005bee:	2900      	cmp	r1, #0
 8005bf0:	d10b      	bne.n	8005c0a <lv_refr_area_part+0x56>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	d13b      	bne.n	8005c6e <lv_refr_area_part+0xba>
 8005bf6:	e00f      	b.n	8005c18 <lv_refr_area_part+0x64>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
 8005bf8:	69c3      	ldr	r3, [r0, #28]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <lv_refr_area_part+0x4e>
 8005bfe:	4798      	blx	r3
 8005c00:	6820      	ldr	r0, [r4, #0]
        while(vdb->flushing) {
 8005c02:	69ab      	ldr	r3, [r5, #24]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1f7      	bne.n	8005bf8 <lv_refr_area_part+0x44>
 8005c08:	e7e1      	b.n	8005bce <lv_refr_area_part+0x1a>
        top_prev_scr = lv_refr_get_top_obj(&start_mask, disp_refr->prev_scr);
 8005c0a:	a803      	add	r0, sp, #12
 8005c0c:	f7ff fcf8 	bl	8005600 <lv_refr_get_top_obj>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 8005c10:	2d00      	cmp	r5, #0
 8005c12:	d12d      	bne.n	8005c70 <lv_refr_area_part+0xbc>
 8005c14:	2800      	cmp	r0, #0
 8005c16:	d12b      	bne.n	8005c70 <lv_refr_area_part+0xbc>
        if(disp_refr->bg_img) {
 8005c18:	6823      	ldr	r3, [r4, #0]
 8005c1a:	af07      	add	r7, sp, #28
 8005c1c:	6d1e      	ldr	r6, [r3, #80]	; 0x50
            lv_draw_img_dsc_init(&dsc);
 8005c1e:	0038      	movs	r0, r7
        if(disp_refr->bg_img) {
 8005c20:	2e00      	cmp	r6, #0
 8005c22:	d04c      	beq.n	8005cbe <lv_refr_area_part+0x10a>
            lv_draw_img_dsc_init(&dsc);
 8005c24:	f001 fec8 	bl	80079b8 <lv_draw_img_dsc_init>
            dsc.opa = disp_refr->bg_opa;
 8005c28:	6823      	ldr	r3, [r4, #0]
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 8005c2a:	a902      	add	r1, sp, #8
            dsc.opa = disp_refr->bg_opa;
 8005c2c:	001a      	movs	r2, r3
 8005c2e:	3254      	adds	r2, #84	; 0x54
 8005c30:	7812      	ldrb	r2, [r2, #0]
 8005c32:	703a      	strb	r2, [r7, #0]
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 8005c34:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005c36:	f004 ff85 	bl	800ab44 <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
 8005c3a:	2801      	cmp	r0, #1
 8005c3c:	d117      	bne.n	8005c6e <lv_refr_area_part+0xba>
                lv_area_set(&a, 0, 0, header.w - 1, header.h - 1);
 8005c3e:	220a      	movs	r2, #10
 8005c40:	446a      	add	r2, sp
 8005c42:	8812      	ldrh	r2, [r2, #0]
 8005c44:	9b02      	ldr	r3, [sp, #8]
 8005c46:	0952      	lsrs	r2, r2, #5
 8005c48:	3a01      	subs	r2, #1
 8005c4a:	b212      	sxth	r2, r2
 8005c4c:	9200      	str	r2, [sp, #0]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	02db      	lsls	r3, r3, #11
 8005c52:	0d5b      	lsrs	r3, r3, #21
 8005c54:	3b01      	subs	r3, #1
 8005c56:	0011      	movs	r1, r2
 8005c58:	b21b      	sxth	r3, r3
 8005c5a:	a805      	add	r0, sp, #20
 8005c5c:	f005 fcd9 	bl	800b612 <lv_area_set>
                lv_draw_img(&a, &start_mask, disp_refr->bg_img, &dsc);
 8005c60:	6822      	ldr	r2, [r4, #0]
 8005c62:	003b      	movs	r3, r7
 8005c64:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005c66:	a903      	add	r1, sp, #12
 8005c68:	a805      	add	r0, sp, #20
 8005c6a:	f001 fed1 	bl	8007a10 <lv_draw_img>
 8005c6e:	2000      	movs	r0, #0
    if(disp_refr->prev_scr) {
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d005      	beq.n	8005c84 <lv_refr_area_part+0xd0>
        if(top_prev_scr == NULL) {
 8005c78:	2800      	cmp	r0, #0
 8005c7a:	d100      	bne.n	8005c7e <lv_refr_area_part+0xca>
 8005c7c:	0018      	movs	r0, r3
        lv_refr_obj_and_children(top_prev_scr, &start_mask);
 8005c7e:	a903      	add	r1, sp, #12
 8005c80:	f7ff fd56 	bl	8005730 <lv_refr_obj_and_children>
    if(top_act_scr == NULL) {
 8005c84:	2d00      	cmp	r5, #0
 8005c86:	d101      	bne.n	8005c8c <lv_refr_area_part+0xd8>
        top_act_scr = disp_refr->act_scr;
 8005c88:	6823      	ldr	r3, [r4, #0]
 8005c8a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    lv_refr_obj_and_children(top_act_scr, &start_mask);
 8005c8c:	a903      	add	r1, sp, #12
 8005c8e:	0028      	movs	r0, r5
 8005c90:	f7ff fd4e 	bl	8005730 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
 8005c94:	6820      	ldr	r0, [r4, #0]
 8005c96:	f7fd fafd 	bl	8003294 <lv_disp_get_layer_top>
 8005c9a:	a903      	add	r1, sp, #12
 8005c9c:	f7ff fd48 	bl	8005730 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
 8005ca0:	6820      	ldr	r0, [r4, #0]
 8005ca2:	f7fd fb01 	bl	80032a8 <lv_disp_get_layer_sys>
 8005ca6:	a903      	add	r1, sp, #12
 8005ca8:	f7ff fd42 	bl	8005730 <lv_refr_obj_and_children>
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
 8005cac:	6820      	ldr	r0, [r4, #0]
 8005cae:	f005 fbe4 	bl	800b47a <lv_disp_is_true_double_buf>
 8005cb2:	2800      	cmp	r0, #0
 8005cb4:	d101      	bne.n	8005cba <lv_refr_area_part+0x106>
        lv_refr_vdb_flush();
 8005cb6:	f7ff fd73 	bl	80057a0 <lv_refr_vdb_flush>
}
 8005cba:	b01d      	add	sp, #116	; 0x74
 8005cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            lv_draw_rect_dsc_init(&dsc);
 8005cbe:	f003 fff9 	bl	8009cb4 <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
 8005cc2:	6823      	ldr	r3, [r4, #0]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 8005cc4:	a903      	add	r1, sp, #12
            dsc.bg_color = disp_refr->bg_color;
 8005cc6:	001a      	movs	r2, r3
 8005cc8:	324e      	adds	r2, #78	; 0x4e
 8005cca:	8812      	ldrh	r2, [r2, #0]
            dsc.bg_opa = disp_refr->bg_opa;
 8005ccc:	3354      	adds	r3, #84	; 0x54
            dsc.bg_color = disp_refr->bg_color;
 8005cce:	807a      	strh	r2, [r7, #2]
            dsc.bg_opa = disp_refr->bg_opa;
 8005cd0:	781b      	ldrb	r3, [r3, #0]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 8005cd2:	0008      	movs	r0, r1
 8005cd4:	003a      	movs	r2, r7
            dsc.bg_opa = disp_refr->bg_opa;
 8005cd6:	733b      	strb	r3, [r7, #12]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 8005cd8:	f004 f814 	bl	8009d04 <lv_draw_rect>
 8005cdc:	0030      	movs	r0, r6
 8005cde:	e7c7      	b.n	8005c70 <lv_refr_area_part+0xbc>
 8005ce0:	20005d28 	.word	0x20005d28

08005ce4 <_lv_refr_init>:
}
 8005ce4:	4770      	bx	lr

08005ce6 <_lv_inv_area>:
{
 8005ce6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005ce8:	0004      	movs	r4, r0
 8005cea:	000d      	movs	r5, r1
    if(!disp) disp = lv_disp_get_default();
 8005cec:	2800      	cmp	r0, #0
 8005cee:	d103      	bne.n	8005cf8 <_lv_inv_area+0x12>
 8005cf0:	f005 fb40 	bl	800b374 <lv_disp_get_default>
 8005cf4:	1e04      	subs	r4, r0, #0
    if(!disp) return;
 8005cf6:	d007      	beq.n	8005d08 <_lv_inv_area+0x22>
    if(area_p == NULL) {
 8005cf8:	2d00      	cmp	r5, #0
 8005cfa:	d106      	bne.n	8005d0a <_lv_inv_area+0x24>
        disp->inv_p = 0;
 8005cfc:	22bb      	movs	r2, #187	; 0xbb
 8005cfe:	0052      	lsls	r2, r2, #1
 8005d00:	5aa3      	ldrh	r3, [r4, r2]
 8005d02:	0a9b      	lsrs	r3, r3, #10
 8005d04:	029b      	lsls	r3, r3, #10
 8005d06:	52a3      	strh	r3, [r4, r2]
}
 8005d08:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    scr_area.x1 = 0;
 8005d0a:	2300      	movs	r3, #0
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8005d0c:	0020      	movs	r0, r4
    scr_area.x1 = 0;
 8005d0e:	9300      	str	r3, [sp, #0]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8005d10:	f005 fb36 	bl	800b380 <lv_disp_get_hor_res>
 8005d14:	466b      	mov	r3, sp
 8005d16:	3801      	subs	r0, #1
 8005d18:	8098      	strh	r0, [r3, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 8005d1a:	0020      	movs	r0, r4
 8005d1c:	f005 fb46 	bl	800b3ac <lv_disp_get_ver_res>
 8005d20:	466b      	mov	r3, sp
 8005d22:	3801      	subs	r0, #1
 8005d24:	80d8      	strh	r0, [r3, #6]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 8005d26:	466a      	mov	r2, sp
 8005d28:	0029      	movs	r1, r5
 8005d2a:	a802      	add	r0, sp, #8
 8005d2c:	f005 fc8d 	bl	800b64a <_lv_area_intersect>
    if(suc != false) {
 8005d30:	2800      	cmp	r0, #0
 8005d32:	d0e9      	beq.n	8005d08 <_lv_inv_area+0x22>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
 8005d34:	6923      	ldr	r3, [r4, #16]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d002      	beq.n	8005d40 <_lv_inv_area+0x5a>
 8005d3a:	a902      	add	r1, sp, #8
 8005d3c:	0020      	movs	r0, r4
 8005d3e:	4798      	blx	r3
        for(i = 0; i < disp->inv_p; i++) {
 8005d40:	26bb      	movs	r6, #187	; 0xbb
{
 8005d42:	2500      	movs	r5, #0
        for(i = 0; i < disp->inv_p; i++) {
 8005d44:	0076      	lsls	r6, r6, #1
 8005d46:	5ba0      	ldrh	r0, [r4, r6]
 8005d48:	b2aa      	uxth	r2, r5
 8005d4a:	1c03      	adds	r3, r0, #0
 8005d4c:	0580      	lsls	r0, r0, #22
 8005d4e:	0d80      	lsrs	r0, r0, #22
 8005d50:	4290      	cmp	r0, r2
 8005d52:	d819      	bhi.n	8005d88 <_lv_inv_area+0xa2>
        if(disp->inv_p < LV_INV_BUF_SIZE) {
 8005d54:	281f      	cmp	r0, #31
 8005d56:	d823      	bhi.n	8005da0 <_lv_inv_area+0xba>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 8005d58:	00c0      	lsls	r0, r0, #3
 8005d5a:	3056      	adds	r0, #86	; 0x56
 8005d5c:	1820      	adds	r0, r4, r0
 8005d5e:	a902      	add	r1, sp, #8
            lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
 8005d60:	f7ff fd16 	bl	8005790 <lv_area_copy>
        disp->inv_p++;
 8005d64:	21bb      	movs	r1, #187	; 0xbb
 8005d66:	2080      	movs	r0, #128	; 0x80
 8005d68:	0049      	lsls	r1, r1, #1
 8005d6a:	5a63      	ldrh	r3, [r4, r1]
 8005d6c:	03c0      	lsls	r0, r0, #15
 8005d6e:	059a      	lsls	r2, r3, #22
 8005d70:	1812      	adds	r2, r2, r0
 8005d72:	0a9b      	lsrs	r3, r3, #10
 8005d74:	0d92      	lsrs	r2, r2, #22
 8005d76:	029b      	lsls	r3, r3, #10
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	5263      	strh	r3, [r4, r1]
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
 8005d7c:	3974      	subs	r1, #116	; 0x74
 8005d7e:	39ff      	subs	r1, #255	; 0xff
 8005d80:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005d82:	f006 fc39 	bl	800c5f8 <lv_task_set_prio>
 8005d86:	e7bf      	b.n	8005d08 <_lv_inv_area+0x22>
            if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 8005d88:	0021      	movs	r1, r4
 8005d8a:	00eb      	lsls	r3, r5, #3
 8005d8c:	3156      	adds	r1, #86	; 0x56
 8005d8e:	18c9      	adds	r1, r1, r3
 8005d90:	2200      	movs	r2, #0
 8005d92:	a802      	add	r0, sp, #8
 8005d94:	f005 fd69 	bl	800b86a <_lv_area_is_in>
 8005d98:	3501      	adds	r5, #1
 8005d9a:	2800      	cmp	r0, #0
 8005d9c:	d0d3      	beq.n	8005d46 <_lv_inv_area+0x60>
 8005d9e:	e7b3      	b.n	8005d08 <_lv_inv_area+0x22>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
 8005da0:	0020      	movs	r0, r4
            disp->inv_p = 0;
 8005da2:	0a9b      	lsrs	r3, r3, #10
 8005da4:	029b      	lsls	r3, r3, #10
 8005da6:	53a3      	strh	r3, [r4, r6]
            lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
 8005da8:	4669      	mov	r1, sp
 8005daa:	3056      	adds	r0, #86	; 0x56
 8005dac:	e7d8      	b.n	8005d60 <_lv_inv_area+0x7a>
	...

08005db0 <_lv_refr_get_disp_refreshing>:
    return disp_refr;
 8005db0:	4b01      	ldr	r3, [pc, #4]	; (8005db8 <_lv_refr_get_disp_refreshing+0x8>)
 8005db2:	6818      	ldr	r0, [r3, #0]
}
 8005db4:	4770      	bx	lr
 8005db6:	46c0      	nop			; (mov r8, r8)
 8005db8:	20005d28 	.word	0x20005d28

08005dbc <_lv_disp_refr_task>:
{
 8005dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dbe:	b08d      	sub	sp, #52	; 0x34
 8005dc0:	0005      	movs	r5, r0
    uint32_t start = lv_tick_get();
 8005dc2:	f005 fbf5 	bl	800b5b0 <lv_tick_get>
    disp_refr = task->user_data;
 8005dc6:	68eb      	ldr	r3, [r5, #12]
    uint32_t start = lv_tick_get();
 8005dc8:	9008      	str	r0, [sp, #32]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
 8005dca:	0028      	movs	r0, r5
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8005dcc:	2500      	movs	r5, #0
    disp_refr = task->user_data;
 8005dce:	4cca      	ldr	r4, [pc, #808]	; (80060f8 <_lv_disp_refr_task+0x33c>)
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
 8005dd0:	2100      	movs	r1, #0
    disp_refr = task->user_data;
 8005dd2:	6023      	str	r3, [r4, #0]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
 8005dd4:	f006 fc10 	bl	800c5f8 <lv_task_set_prio>
    if(disp_refr->act_scr == NULL) {
 8005dd8:	6822      	ldr	r2, [r4, #0]
 8005dda:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8005ddc:	42ab      	cmp	r3, r5
 8005dde:	d10e      	bne.n	8005dfe <_lv_disp_refr_task+0x42>
        disp_refr->inv_p = 0;
 8005de0:	21bb      	movs	r1, #187	; 0xbb
 8005de2:	0049      	lsls	r1, r1, #1
 8005de4:	5a53      	ldrh	r3, [r2, r1]
 8005de6:	0a9b      	lsrs	r3, r3, #10
 8005de8:	029b      	lsls	r3, r3, #10
 8005dea:	5253      	strh	r3, [r2, r1]
}
 8005dec:	b00d      	add	sp, #52	; 0x34
 8005dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 8005df0:	195b      	adds	r3, r3, r5
 8005df2:	3357      	adds	r3, #87	; 0x57
 8005df4:	33ff      	adds	r3, #255	; 0xff
 8005df6:	781c      	ldrb	r4, [r3, #0]
 8005df8:	2c00      	cmp	r4, #0
 8005dfa:	d073      	beq.n	8005ee4 <_lv_disp_refr_task+0x128>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8005dfc:	3501      	adds	r5, #1
 8005dfe:	22bb      	movs	r2, #187	; 0xbb
 8005e00:	4bbd      	ldr	r3, [pc, #756]	; (80060f8 <_lv_disp_refr_task+0x33c>)
 8005e02:	0052      	lsls	r2, r2, #1
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	5a9a      	ldrh	r2, [r3, r2]
 8005e08:	0592      	lsls	r2, r2, #22
 8005e0a:	0d91      	lsrs	r1, r2, #22
 8005e0c:	428d      	cmp	r5, r1
 8005e0e:	d3ef      	bcc.n	8005df0 <_lv_disp_refr_task+0x34>
    px_num = 0;
 8005e10:	2400      	movs	r4, #0
 8005e12:	48ba      	ldr	r0, [pc, #744]	; (80060fc <_lv_disp_refr_task+0x340>)
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 8005e14:	3901      	subs	r1, #1
    px_num = 0;
 8005e16:	6004      	str	r4, [r0, #0]
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 8005e18:	9104      	str	r1, [sp, #16]
    if(disp_refr->inv_p == 0) return;
 8005e1a:	42a2      	cmp	r2, r4
 8005e1c:	d000      	beq.n	8005e20 <_lv_disp_refr_task+0x64>
 8005e1e:	e0af      	b.n	8005f80 <_lv_disp_refr_task+0x1c4>
    if(disp_refr->inv_p != 0) {
 8005e20:	23bb      	movs	r3, #187	; 0xbb
 8005e22:	4cb5      	ldr	r4, [pc, #724]	; (80060f8 <_lv_disp_refr_task+0x33c>)
 8005e24:	005b      	lsls	r3, r3, #1
 8005e26:	6820      	ldr	r0, [r4, #0]
 8005e28:	5ac3      	ldrh	r3, [r0, r3]
 8005e2a:	059b      	lsls	r3, r3, #22
 8005e2c:	d055      	beq.n	8005eda <_lv_disp_refr_task+0x11e>
        if(lv_disp_is_true_double_buf(disp_refr)) {
 8005e2e:	f005 fb24 	bl	800b47a <lv_disp_is_true_double_buf>
 8005e32:	2800      	cmp	r0, #0
 8005e34:	d032      	beq.n	8005e9c <_lv_disp_refr_task+0xe0>
            if(disp_refr->driver.set_px_cb) {
 8005e36:	6820      	ldr	r0, [r4, #0]
 8005e38:	6943      	ldr	r3, [r0, #20]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d12e      	bne.n	8005e9c <_lv_disp_refr_task+0xe0>
                lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8005e3e:	f005 fb11 	bl	800b464 <lv_disp_get_buf>
 8005e42:	0005      	movs	r5, r0
                lv_refr_vdb_flush();
 8005e44:	f7ff fcac 	bl	80057a0 <lv_refr_vdb_flush>
                while(vdb->flushing);
 8005e48:	69ab      	ldr	r3, [r5, #24]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1fc      	bne.n	8005e48 <_lv_disp_refr_task+0x8c>
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
 8005e4e:	6823      	ldr	r3, [r4, #0]
 8005e50:	2000      	movs	r0, #0
 8005e52:	5e18      	ldrsh	r0, [r3, r0]
 8005e54:	0040      	lsls	r0, r0, #1
 8005e56:	f006 f9b1 	bl	800c1bc <_lv_mem_buf_get>
                uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 8005e5a:	68ab      	ldr	r3, [r5, #8]
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
 8005e5c:	0006      	movs	r6, r0
                uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 8005e5e:	9303      	str	r3, [sp, #12]
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 8005e60:	9a03      	ldr	r2, [sp, #12]
 8005e62:	682b      	ldr	r3, [r5, #0]
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d101      	bne.n	8005e6e <_lv_disp_refr_task+0xb2>
 8005e6a:	686b      	ldr	r3, [r5, #4]
 8005e6c:	9300      	str	r3, [sp, #0]
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 8005e6e:	6820      	ldr	r0, [r4, #0]
 8005e70:	f005 fa86 	bl	800b380 <lv_disp_get_hor_res>
                for(a = 0; a < disp_refr->inv_p; a++) {
 8005e74:	2700      	movs	r7, #0
                            start_offs += hres * sizeof(lv_color_t);
 8005e76:	0043      	lsls	r3, r0, #1
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 8005e78:	9005      	str	r0, [sp, #20]
                            start_offs += hres * sizeof(lv_color_t);
 8005e7a:	9302      	str	r3, [sp, #8]
                for(a = 0; a < disp_refr->inv_p; a++) {
 8005e7c:	4b9e      	ldr	r3, [pc, #632]	; (80060f8 <_lv_disp_refr_task+0x33c>)
 8005e7e:	6819      	ldr	r1, [r3, #0]
 8005e80:	23bb      	movs	r3, #187	; 0xbb
 8005e82:	005b      	lsls	r3, r3, #1
 8005e84:	5aca      	ldrh	r2, [r1, r3]
 8005e86:	b2bb      	uxth	r3, r7
 8005e88:	0592      	lsls	r2, r2, #22
 8005e8a:	0d92      	lsrs	r2, r2, #22
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d900      	bls.n	8005e92 <_lv_disp_refr_task+0xd6>
 8005e90:	e183      	b.n	800619a <_lv_disp_refr_task+0x3de>
                if(copy_buf) _lv_mem_buf_release(copy_buf);
 8005e92:	2e00      	cmp	r6, #0
 8005e94:	d002      	beq.n	8005e9c <_lv_disp_refr_task+0xe0>
 8005e96:	0030      	movs	r0, r6
 8005e98:	f006 f898 	bl	800bfcc <_lv_mem_buf_release>
        _lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
 8005e9c:	2180      	movs	r1, #128	; 0x80
 8005e9e:	4c96      	ldr	r4, [pc, #600]	; (80060f8 <_lv_disp_refr_task+0x33c>)
 8005ea0:	0049      	lsls	r1, r1, #1
 8005ea2:	6820      	ldr	r0, [r4, #0]
 8005ea4:	3056      	adds	r0, #86	; 0x56
 8005ea6:	f006 fa11 	bl	800c2cc <_lv_memset_00>
        _lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
 8005eaa:	6820      	ldr	r0, [r4, #0]
 8005eac:	2120      	movs	r1, #32
 8005eae:	3057      	adds	r0, #87	; 0x57
 8005eb0:	30ff      	adds	r0, #255	; 0xff
 8005eb2:	f006 fa0b 	bl	800c2cc <_lv_memset_00>
        disp_refr->inv_p = 0;
 8005eb6:	22bb      	movs	r2, #187	; 0xbb
 8005eb8:	6821      	ldr	r1, [r4, #0]
 8005eba:	0052      	lsls	r2, r2, #1
 8005ebc:	5a8b      	ldrh	r3, [r1, r2]
        elaps = lv_tick_elaps(start);
 8005ebe:	9808      	ldr	r0, [sp, #32]
        disp_refr->inv_p = 0;
 8005ec0:	0a9b      	lsrs	r3, r3, #10
 8005ec2:	029b      	lsls	r3, r3, #10
 8005ec4:	528b      	strh	r3, [r1, r2]
        elaps = lv_tick_elaps(start);
 8005ec6:	f005 fb81 	bl	800b5cc <lv_tick_elaps>
 8005eca:	0001      	movs	r1, r0
        if(disp_refr->driver.monitor_cb) {
 8005ecc:	6820      	ldr	r0, [r4, #0]
 8005ece:	6983      	ldr	r3, [r0, #24]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d002      	beq.n	8005eda <_lv_disp_refr_task+0x11e>
            disp_refr->driver.monitor_cb(&disp_refr->driver, elaps, px_num);
 8005ed4:	4a89      	ldr	r2, [pc, #548]	; (80060fc <_lv_disp_refr_task+0x340>)
 8005ed6:	6812      	ldr	r2, [r2, #0]
 8005ed8:	4798      	blx	r3
    _lv_mem_buf_free_all();
 8005eda:	f006 f897 	bl	800c00c <_lv_mem_buf_free_all>
    _lv_font_clean_up_fmt_txt();
 8005ede:	f005 fa0d 	bl	800b2fc <_lv_font_clean_up_fmt_txt>
 8005ee2:	e783      	b.n	8005dec <_lv_disp_refr_task+0x30>
 8005ee4:	00ef      	lsls	r7, r5, #3
 8005ee6:	3756      	adds	r7, #86	; 0x56
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 8005ee8:	23bb      	movs	r3, #187	; 0xbb
 8005eea:	4e83      	ldr	r6, [pc, #524]	; (80060f8 <_lv_disp_refr_task+0x33c>)
 8005eec:	005b      	lsls	r3, r3, #1
 8005eee:	6830      	ldr	r0, [r6, #0]
 8005ef0:	5ac3      	ldrh	r3, [r0, r3]
 8005ef2:	059b      	lsls	r3, r3, #22
 8005ef4:	0d9b      	lsrs	r3, r3, #22
 8005ef6:	429c      	cmp	r4, r3
 8005ef8:	d300      	bcc.n	8005efc <_lv_disp_refr_task+0x140>
 8005efa:	e77f      	b.n	8005dfc <_lv_disp_refr_task+0x40>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 8005efc:	1903      	adds	r3, r0, r4
 8005efe:	3357      	adds	r3, #87	; 0x57
 8005f00:	33ff      	adds	r3, #255	; 0xff
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d130      	bne.n	8005f6a <_lv_disp_refr_task+0x1ae>
 8005f08:	42a5      	cmp	r5, r4
 8005f0a:	d02e      	beq.n	8005f6a <_lv_disp_refr_task+0x1ae>
 8005f0c:	00e3      	lsls	r3, r4, #3
 8005f0e:	3356      	adds	r3, #86	; 0x56
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 8005f10:	18c1      	adds	r1, r0, r3
 8005f12:	19c0      	adds	r0, r0, r7
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	f005 fc89 	bl	800b82c <_lv_area_is_on>
 8005f1a:	2800      	cmp	r0, #0
 8005f1c:	d025      	beq.n	8005f6a <_lv_disp_refr_task+0x1ae>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 8005f1e:	9b00      	ldr	r3, [sp, #0]
 8005f20:	6831      	ldr	r1, [r6, #0]
 8005f22:	a80a      	add	r0, sp, #40	; 0x28
 8005f24:	18ca      	adds	r2, r1, r3
 8005f26:	19c9      	adds	r1, r1, r7
 8005f28:	f005 fbc4 	bl	800b6b4 <_lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 8005f2c:	a80a      	add	r0, sp, #40	; 0x28
 8005f2e:	f005 fb7e 	bl	800b62e <lv_area_get_size>
 8005f32:	6833      	ldr	r3, [r6, #0]
 8005f34:	9001      	str	r0, [sp, #4]
 8005f36:	19d8      	adds	r0, r3, r7
 8005f38:	f005 fb79 	bl	800b62e <lv_area_get_size>
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 8005f3c:	6832      	ldr	r2, [r6, #0]
 8005f3e:	9b00      	ldr	r3, [sp, #0]
 8005f40:	4694      	mov	ip, r2
 8005f42:	4463      	add	r3, ip
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 8005f44:	9002      	str	r0, [sp, #8]
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 8005f46:	0018      	movs	r0, r3
 8005f48:	f005 fb71 	bl	800b62e <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 8005f4c:	9b02      	ldr	r3, [sp, #8]
 8005f4e:	9a01      	ldr	r2, [sp, #4]
 8005f50:	181b      	adds	r3, r3, r0
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d209      	bcs.n	8005f6a <_lv_disp_refr_task+0x1ae>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 8005f56:	6836      	ldr	r6, [r6, #0]
 8005f58:	a90a      	add	r1, sp, #40	; 0x28
 8005f5a:	19f0      	adds	r0, r6, r7
 8005f5c:	f7ff fc18 	bl	8005790 <lv_area_copy>
                disp_refr->inv_area_joined[join_from] = 1;
 8005f60:	2301      	movs	r3, #1
 8005f62:	1936      	adds	r6, r6, r4
 8005f64:	3657      	adds	r6, #87	; 0x57
 8005f66:	36ff      	adds	r6, #255	; 0xff
 8005f68:	7033      	strb	r3, [r6, #0]
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 8005f6a:	3401      	adds	r4, #1
 8005f6c:	e7bc      	b.n	8005ee8 <_lv_disp_refr_task+0x12c>
        if(disp_refr->inv_area_joined[i] == 0) {
 8005f6e:	9a04      	ldr	r2, [sp, #16]
 8005f70:	3257      	adds	r2, #87	; 0x57
 8005f72:	32ff      	adds	r2, #255	; 0xff
 8005f74:	5c9a      	ldrb	r2, [r3, r2]
 8005f76:	2a00      	cmp	r2, #0
 8005f78:	d007      	beq.n	8005f8a <_lv_disp_refr_task+0x1ce>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 8005f7a:	9a04      	ldr	r2, [sp, #16]
 8005f7c:	3a01      	subs	r2, #1
 8005f7e:	9204      	str	r2, [sp, #16]
 8005f80:	9a04      	ldr	r2, [sp, #16]
 8005f82:	3201      	adds	r2, #1
 8005f84:	d1f3      	bne.n	8005f6e <_lv_disp_refr_task+0x1b2>
    int32_t last_i = 0;
 8005f86:	2200      	movs	r2, #0
 8005f88:	9204      	str	r2, [sp, #16]
    disp_refr->driver.buffer->last_area = 0;
 8005f8a:	2101      	movs	r1, #1
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	7fda      	ldrb	r2, [r3, #31]
 8005f92:	438a      	bics	r2, r1
 8005f94:	77da      	strb	r2, [r3, #31]
    disp_refr->driver.buffer->last_part = 0;
 8005f96:	7fda      	ldrb	r2, [r3, #31]
 8005f98:	1849      	adds	r1, r1, r1
 8005f9a:	438a      	bics	r2, r1
 8005f9c:	77da      	strb	r2, [r3, #31]
    for(i = 0; i < disp_refr->inv_p; i++) {
 8005f9e:	2300      	movs	r3, #0
            disp_refr->driver.buffer->last_part = 0;
 8005fa0:	9105      	str	r1, [sp, #20]
    for(i = 0; i < disp_refr->inv_p; i++) {
 8005fa2:	9301      	str	r3, [sp, #4]
 8005fa4:	4b54      	ldr	r3, [pc, #336]	; (80060f8 <_lv_disp_refr_task+0x33c>)
 8005fa6:	9a01      	ldr	r2, [sp, #4]
 8005fa8:	681c      	ldr	r4, [r3, #0]
 8005faa:	23bb      	movs	r3, #187	; 0xbb
 8005fac:	005b      	lsls	r3, r3, #1
 8005fae:	5ae3      	ldrh	r3, [r4, r3]
 8005fb0:	059b      	lsls	r3, r3, #22
 8005fb2:	0d9b      	lsrs	r3, r3, #22
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	db00      	blt.n	8005fba <_lv_disp_refr_task+0x1fe>
 8005fb8:	e732      	b.n	8005e20 <_lv_disp_refr_task+0x64>
        if(disp_refr->inv_area_joined[i] == 0) {
 8005fba:	9b01      	ldr	r3, [sp, #4]
 8005fbc:	18e3      	adds	r3, r4, r3
 8005fbe:	3357      	adds	r3, #87	; 0x57
 8005fc0:	33ff      	adds	r3, #255	; 0xff
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d000      	beq.n	8005fca <_lv_disp_refr_task+0x20e>
 8005fc8:	e08b      	b.n	80060e2 <_lv_disp_refr_task+0x326>
 8005fca:	6863      	ldr	r3, [r4, #4]
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
 8005fcc:	9904      	ldr	r1, [sp, #16]
 8005fce:	1c5a      	adds	r2, r3, #1
 8005fd0:	9b01      	ldr	r3, [sp, #4]
 8005fd2:	428b      	cmp	r3, r1
 8005fd4:	d103      	bne.n	8005fde <_lv_disp_refr_task+0x222>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	7fd1      	ldrb	r1, [r2, #31]
 8005fda:	430b      	orrs	r3, r1
 8005fdc:	77d3      	strb	r3, [r2, #31]
            disp_refr->driver.buffer->last_part = 0;
 8005fde:	7fd3      	ldrb	r3, [r2, #31]
 8005fe0:	9905      	ldr	r1, [sp, #20]
    if(lv_disp_is_true_double_buf(disp_refr)) {
 8005fe2:	0020      	movs	r0, r4
            disp_refr->driver.buffer->last_part = 0;
 8005fe4:	438b      	bics	r3, r1
 8005fe6:	77d3      	strb	r3, [r2, #31]
 8005fe8:	9b01      	ldr	r3, [sp, #4]
 8005fea:	00db      	lsls	r3, r3, #3
 8005fec:	9306      	str	r3, [sp, #24]
 8005fee:	3356      	adds	r3, #86	; 0x56
 8005ff0:	9307      	str	r3, [sp, #28]
            lv_refr_area(&disp_refr->inv_areas[i]);
 8005ff2:	18e3      	adds	r3, r4, r3
 8005ff4:	9302      	str	r3, [sp, #8]
    if(lv_disp_is_true_double_buf(disp_refr)) {
 8005ff6:	f005 fa40 	bl	800b47a <lv_disp_is_true_double_buf>
 8005ffa:	4d3f      	ldr	r5, [pc, #252]	; (80060f8 <_lv_disp_refr_task+0x33c>)
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	d01b      	beq.n	8006038 <_lv_disp_refr_task+0x27c>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8006000:	6828      	ldr	r0, [r5, #0]
 8006002:	f005 fa2f 	bl	800b464 <lv_disp_get_buf>
        vdb->area.x1        = 0;
 8006006:	2600      	movs	r6, #0
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8006008:	0004      	movs	r4, r0
        vdb->area.x1        = 0;
 800600a:	8206      	strh	r6, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 800600c:	6828      	ldr	r0, [r5, #0]
 800600e:	f005 f9b7 	bl	800b380 <lv_disp_get_hor_res>
 8006012:	3801      	subs	r0, #1
 8006014:	82a0      	strh	r0, [r4, #20]
        vdb->area.y1        = 0;
 8006016:	8266      	strh	r6, [r4, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 8006018:	6828      	ldr	r0, [r5, #0]
 800601a:	f005 f9c7 	bl	800b3ac <lv_disp_get_ver_res>
        disp_refr->driver.buffer->last_part = 1;
 800601e:	682b      	ldr	r3, [r5, #0]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 8006020:	3801      	subs	r0, #1
 8006022:	82e0      	strh	r0, [r4, #22]
            disp_refr->driver.buffer->last_part = 1;
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	9905      	ldr	r1, [sp, #20]
 8006028:	3301      	adds	r3, #1
 800602a:	7fda      	ldrb	r2, [r3, #31]
            lv_refr_area_part(area_p);
 800602c:	9802      	ldr	r0, [sp, #8]
            disp_refr->driver.buffer->last_part = 1;
 800602e:	430a      	orrs	r2, r1
 8006030:	77da      	strb	r2, [r3, #31]
            lv_refr_area_part(area_p);
 8006032:	f7ff fdbf 	bl	8005bb4 <lv_refr_area_part>
 8006036:	e04a      	b.n	80060ce <_lv_disp_refr_task+0x312>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8006038:	6828      	ldr	r0, [r5, #0]
 800603a:	f005 fa13 	bl	800b464 <lv_disp_get_buf>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800603e:	9b02      	ldr	r3, [sp, #8]
 8006040:	9a02      	ldr	r2, [sp, #8]
 8006042:	889b      	ldrh	r3, [r3, #4]
 8006044:	8812      	ldrh	r2, [r2, #0]
 8006046:	3301      	adds	r3, #1
 8006048:	1a9b      	subs	r3, r3, r2
 800604a:	b21b      	sxth	r3, r3
 800604c:	9300      	str	r3, [sp, #0]
        lv_coord_t h = lv_area_get_height(area_p);
 800604e:	9b02      	ldr	r3, [sp, #8]
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8006050:	0007      	movs	r7, r0
        lv_coord_t h = lv_area_get_height(area_p);
 8006052:	2606      	movs	r6, #6
 8006054:	5f9e      	ldrsh	r6, [r3, r6]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006056:	9b02      	ldr	r3, [sp, #8]
 8006058:	1c72      	adds	r2, r6, #1
 800605a:	885b      	ldrh	r3, [r3, #2]
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800605c:	6828      	ldr	r0, [r5, #0]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	b21b      	sxth	r3, r3
 8006062:	9309      	str	r3, [sp, #36]	; 0x24
 8006064:	f005 f9a2 	bl	800b3ac <lv_disp_get_ver_res>
        lv_coord_t y2 =
 8006068:	4286      	cmp	r6, r0
 800606a:	db3e      	blt.n	80060ea <_lv_disp_refr_task+0x32e>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800606c:	6828      	ldr	r0, [r5, #0]
 800606e:	f005 f99d 	bl	800b3ac <lv_disp_get_ver_res>
 8006072:	3801      	subs	r0, #1
        lv_coord_t y2 =
 8006074:	b203      	sxth	r3, r0
        int32_t max_row = (uint32_t)vdb->size / w;
 8006076:	9900      	ldr	r1, [sp, #0]
 8006078:	68f8      	ldr	r0, [r7, #12]
        lv_coord_t y2 =
 800607a:	9303      	str	r3, [sp, #12]
        int32_t max_row = (uint32_t)vdb->size / w;
 800607c:	f7fa f87a 	bl	8000174 <__udivsi3>
 8006080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	4283      	cmp	r3, r0
 8006086:	dd00      	ble.n	800608a <_lv_disp_refr_task+0x2ce>
 8006088:	9000      	str	r0, [sp, #0]
        if(disp_refr->driver.rounder_cb) {
 800608a:	4b1b      	ldr	r3, [pc, #108]	; (80060f8 <_lv_disp_refr_task+0x33c>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d038      	beq.n	8006106 <_lv_disp_refr_task+0x34a>
            tmp.x1 = 0;
 8006094:	2300      	movs	r3, #0
            tmp.y1 = 0;
 8006096:	aa0a      	add	r2, sp, #40	; 0x28
            tmp.x1 = 0;
 8006098:	930a      	str	r3, [sp, #40]	; 0x28
            tmp.y1 = 0;
 800609a:	8093      	strh	r3, [r2, #4]
            lv_coord_t h_tmp = max_row;
 800609c:	466b      	mov	r3, sp
 800609e:	2500      	movs	r5, #0
 80060a0:	5f5d      	ldrsh	r5, [r3, r5]
 80060a2:	1e6e      	subs	r6, r5, #1
                tmp.y2 = h_tmp - 1;
 80060a4:	ab0a      	add	r3, sp, #40	; 0x28
 80060a6:	b236      	sxth	r6, r6
 80060a8:	80de      	strh	r6, [r3, #6]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 80060aa:	4b13      	ldr	r3, [pc, #76]	; (80060f8 <_lv_disp_refr_task+0x33c>)
 80060ac:	a90a      	add	r1, sp, #40	; 0x28
 80060ae:	6818      	ldr	r0, [r3, #0]
 80060b0:	6903      	ldr	r3, [r0, #16]
 80060b2:	4798      	blx	r3
                if(lv_area_get_height(&tmp) <= max_row) break;
 80060b4:	ab0a      	add	r3, sp, #40	; 0x28
 80060b6:	2206      	movs	r2, #6
 80060b8:	5e9a      	ldrsh	r2, [r3, r2]
 80060ba:	ab0a      	add	r3, sp, #40	; 0x28
 80060bc:	885b      	ldrh	r3, [r3, #2]
 80060be:	3201      	adds	r2, #1
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	9900      	ldr	r1, [sp, #0]
 80060c4:	b21b      	sxth	r3, r3
 80060c6:	4299      	cmp	r1, r3
 80060c8:	da1a      	bge.n	8006100 <_lv_disp_refr_task+0x344>
 80060ca:	1e35      	subs	r5, r6, #0
            } while(h_tmp > 0);
 80060cc:	dce9      	bgt.n	80060a2 <_lv_disp_refr_task+0x2e6>
            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 80060ce:	4b0a      	ldr	r3, [pc, #40]	; (80060f8 <_lv_disp_refr_task+0x33c>)
 80060d0:	6818      	ldr	r0, [r3, #0]
 80060d2:	9b07      	ldr	r3, [sp, #28]
 80060d4:	18c0      	adds	r0, r0, r3
 80060d6:	f005 faaa 	bl	800b62e <lv_area_get_size>
 80060da:	4b08      	ldr	r3, [pc, #32]	; (80060fc <_lv_disp_refr_task+0x340>)
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	1810      	adds	r0, r2, r0
 80060e0:	6018      	str	r0, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 80060e2:	9b01      	ldr	r3, [sp, #4]
 80060e4:	3301      	adds	r3, #1
 80060e6:	9301      	str	r3, [sp, #4]
 80060e8:	e75c      	b.n	8005fa4 <_lv_disp_refr_task+0x1e8>
        lv_coord_t y2 =
 80060ea:	9b01      	ldr	r3, [sp, #4]
 80060ec:	330a      	adds	r3, #10
 80060ee:	00db      	lsls	r3, r3, #3
 80060f0:	18e3      	adds	r3, r4, r3
 80060f2:	220c      	movs	r2, #12
 80060f4:	5e9b      	ldrsh	r3, [r3, r2]
 80060f6:	e7be      	b.n	8006076 <_lv_disp_refr_task+0x2ba>
 80060f8:	20005d28 	.word	0x20005d28
 80060fc:	20005d2c 	.word	0x20005d2c
            if(h_tmp <= 0) {
 8006100:	2d00      	cmp	r5, #0
 8006102:	dde4      	ble.n	80060ce <_lv_disp_refr_task+0x312>
                max_row = tmp.y2 + 1;
 8006104:	9200      	str	r2, [sp, #0]
 8006106:	9b06      	ldr	r3, [sp, #24]
        lv_coord_t row_last = 0;
 8006108:	2600      	movs	r6, #0
 800610a:	18e4      	adds	r4, r4, r3
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800610c:	0023      	movs	r3, r4
 800610e:	3358      	adds	r3, #88	; 0x58
 8006110:	2500      	movs	r5, #0
 8006112:	5f5d      	ldrsh	r5, [r3, r5]
 8006114:	9b00      	ldr	r3, [sp, #0]
 8006116:	9a03      	ldr	r2, [sp, #12]
 8006118:	18eb      	adds	r3, r5, r3
 800611a:	3b01      	subs	r3, #1
 800611c:	4293      	cmp	r3, r2
 800611e:	dd10      	ble.n	8006142 <_lv_disp_refr_task+0x386>
        if(y2 != row_last) {
 8006120:	42b2      	cmp	r2, r6
 8006122:	d0d4      	beq.n	80060ce <_lv_disp_refr_task+0x312>
            vdb->area.x1 = area_p->x1;
 8006124:	0022      	movs	r2, r4
 8006126:	3256      	adds	r2, #86	; 0x56
 8006128:	2100      	movs	r1, #0
 800612a:	5e52      	ldrsh	r2, [r2, r1]
            vdb->area.x2 = area_p->x2;
 800612c:	345a      	adds	r4, #90	; 0x5a
            vdb->area.x1 = area_p->x1;
 800612e:	823a      	strh	r2, [r7, #16]
            vdb->area.x2 = area_p->x2;
 8006130:	2100      	movs	r1, #0
 8006132:	5e62      	ldrsh	r2, [r4, r1]
 8006134:	4b39      	ldr	r3, [pc, #228]	; (800621c <_lv_disp_refr_task+0x460>)
 8006136:	82ba      	strh	r2, [r7, #20]
            vdb->area.y2 = y2;
 8006138:	9a03      	ldr	r2, [sp, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
            vdb->area.y1 = row;
 800613c:	827d      	strh	r5, [r7, #18]
            vdb->area.y2 = y2;
 800613e:	82fa      	strh	r2, [r7, #22]
 8006140:	e770      	b.n	8006024 <_lv_disp_refr_task+0x268>
            vdb->area.x1 = area_p->x1;
 8006142:	0023      	movs	r3, r4
 8006144:	3356      	adds	r3, #86	; 0x56
 8006146:	2200      	movs	r2, #0
 8006148:	5e9b      	ldrsh	r3, [r3, r2]
 800614a:	823b      	strh	r3, [r7, #16]
            vdb->area.x2 = area_p->x2;
 800614c:	0023      	movs	r3, r4
 800614e:	335a      	adds	r3, #90	; 0x5a
 8006150:	2200      	movs	r2, #0
 8006152:	5e9b      	ldrsh	r3, [r3, r2]
            vdb->area.y1 = row;
 8006154:	827d      	strh	r5, [r7, #18]
            vdb->area.x2 = area_p->x2;
 8006156:	82bb      	strh	r3, [r7, #20]
            vdb->area.y2 = row + max_row - 1;
 8006158:	466b      	mov	r3, sp
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	b2ad      	uxth	r5, r5
 800615e:	9306      	str	r3, [sp, #24]
 8006160:	3b01      	subs	r3, #1
 8006162:	18eb      	adds	r3, r5, r3
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
 8006164:	9a03      	ldr	r2, [sp, #12]
 8006166:	b21b      	sxth	r3, r3
 8006168:	429a      	cmp	r2, r3
 800616a:	db14      	blt.n	8006196 <_lv_disp_refr_task+0x3da>
 800616c:	82fb      	strh	r3, [r7, #22]
            row_last = vdb->area.y2;
 800616e:	2316      	movs	r3, #22
 8006170:	5efe      	ldrsh	r6, [r7, r3]
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
 8006172:	9b03      	ldr	r3, [sp, #12]
 8006174:	42b3      	cmp	r3, r6
 8006176:	d107      	bne.n	8006188 <_lv_disp_refr_task+0x3cc>
 8006178:	4b28      	ldr	r3, [pc, #160]	; (800621c <_lv_disp_refr_task+0x460>)
 800617a:	9905      	ldr	r1, [sp, #20]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	3301      	adds	r3, #1
 8006182:	7fda      	ldrb	r2, [r3, #31]
 8006184:	430a      	orrs	r2, r1
 8006186:	77da      	strb	r2, [r3, #31]
            lv_refr_area_part(area_p);
 8006188:	9802      	ldr	r0, [sp, #8]
 800618a:	f7ff fd13 	bl	8005bb4 <lv_refr_area_part>
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800618e:	9b06      	ldr	r3, [sp, #24]
 8006190:	195d      	adds	r5, r3, r5
 8006192:	b22d      	sxth	r5, r5
 8006194:	e7be      	b.n	8006114 <_lv_disp_refr_task+0x358>
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
 8006196:	9b03      	ldr	r3, [sp, #12]
 8006198:	e7e8      	b.n	800616c <_lv_disp_refr_task+0x3b0>
                    if(disp_refr->inv_area_joined[a] == 0) {
 800619a:	19cb      	adds	r3, r1, r7
 800619c:	3357      	adds	r3, #87	; 0x57
 800619e:	33ff      	adds	r3, #255	; 0xff
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <_lv_disp_refr_task+0x3ee>
 80061a6:	3701      	adds	r7, #1
 80061a8:	e668      	b.n	8005e7c <_lv_disp_refr_task+0xc0>
 80061aa:	00fb      	lsls	r3, r7, #3
 80061ac:	18cb      	adds	r3, r1, r3
                            (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
 80061ae:	001a      	movs	r2, r3
 80061b0:	3356      	adds	r3, #86	; 0x56
 80061b2:	3258      	adds	r2, #88	; 0x58
 80061b4:	2500      	movs	r5, #0
 80061b6:	5f55      	ldrsh	r5, [r2, r5]
 80061b8:	2100      	movs	r1, #0
 80061ba:	5e5a      	ldrsh	r2, [r3, r1]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80061bc:	2101      	movs	r1, #1
 80061be:	9c05      	ldr	r4, [sp, #20]
 80061c0:	889b      	ldrh	r3, [r3, #4]
 80061c2:	436c      	muls	r4, r5
 80061c4:	18a4      	adds	r4, r4, r2
 80061c6:	1a8a      	subs	r2, r1, r2
 80061c8:	189b      	adds	r3, r3, r2
                        uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
 80061ca:	b21b      	sxth	r3, r3
 80061cc:	408b      	lsls	r3, r1
 80061ce:	9304      	str	r3, [sp, #16]
 80061d0:	9b00      	ldr	r3, [sp, #0]
                        uint32_t start_offs =
 80061d2:	0064      	lsls	r4, r4, #1
 80061d4:	191b      	adds	r3, r3, r4
 80061d6:	9301      	str	r3, [sp, #4]
 80061d8:	9b03      	ldr	r3, [sp, #12]
 80061da:	191c      	adds	r4, r3, r4
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 80061dc:	003b      	movs	r3, r7
 80061de:	330a      	adds	r3, #10
 80061e0:	00db      	lsls	r3, r3, #3
 80061e2:	9306      	str	r3, [sp, #24]
 80061e4:	4b0d      	ldr	r3, [pc, #52]	; (800621c <_lv_disp_refr_task+0x460>)
 80061e6:	9a06      	ldr	r2, [sp, #24]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	189b      	adds	r3, r3, r2
 80061ec:	220c      	movs	r2, #12
 80061ee:	5e9b      	ldrsh	r3, [r3, r2]
 80061f0:	42ab      	cmp	r3, r5
 80061f2:	dbd8      	blt.n	80061a6 <_lv_disp_refr_task+0x3ea>
                            _lv_memcpy(copy_buf, buf_ina + start_offs, line_length);
 80061f4:	9a04      	ldr	r2, [sp, #16]
 80061f6:	9901      	ldr	r1, [sp, #4]
 80061f8:	0030      	movs	r0, r6
 80061fa:	f005 ff27 	bl	800c04c <_lv_memcpy>
                            _lv_memcpy(buf_act + start_offs, copy_buf, line_length);
 80061fe:	9a04      	ldr	r2, [sp, #16]
 8006200:	0020      	movs	r0, r4
 8006202:	0031      	movs	r1, r6
 8006204:	f005 ff22 	bl	800c04c <_lv_memcpy>
 8006208:	9a02      	ldr	r2, [sp, #8]
 800620a:	9b01      	ldr	r3, [sp, #4]
 800620c:	4694      	mov	ip, r2
 800620e:	3501      	adds	r5, #1
 8006210:	4463      	add	r3, ip
 8006212:	b22d      	sxth	r5, r5
 8006214:	9301      	str	r3, [sp, #4]
 8006216:	18a4      	adds	r4, r4, r2
 8006218:	e7e4      	b.n	80061e4 <_lv_disp_refr_task+0x428>
 800621a:	46c0      	nop			; (mov r8, r8)
 800621c:	20005d28 	.word	0x20005d28

08006220 <_lv_memcpy_small>:
{
 8006220:	2300      	movs	r3, #0
 8006222:	b510      	push	{r4, lr}
        *d8 = *s8;
 8006224:	5ccc      	ldrb	r4, [r1, r3]
 8006226:	54c4      	strb	r4, [r0, r3]
 8006228:	3301      	adds	r3, #1
    while(len) {
 800622a:	4293      	cmp	r3, r2
 800622c:	d1fa      	bne.n	8006224 <_lv_memcpy_small+0x4>
        s8++;
        len--;
    }

    return dst;
}
 800622e:	bd10      	pop	{r4, pc}

08006230 <lv_style_list_get_style>:
    if(list->has_trans && list->skip_trans) id++;
 8006230:	22c0      	movs	r2, #192	; 0xc0
 8006232:	8883      	ldrh	r3, [r0, #4]
 8006234:	0052      	lsls	r2, r2, #1
{
 8006236:	b510      	push	{r4, lr}
    if(list->has_trans && list->skip_trans) id++;
 8006238:	4013      	ands	r3, r2
{
 800623a:	0004      	movs	r4, r0
    if(list->has_trans && list->skip_trans) id++;
 800623c:	4293      	cmp	r3, r2
 800623e:	d101      	bne.n	8006244 <lv_style_list_get_style+0x14>
 8006240:	3101      	adds	r1, #1
 8006242:	b2c9      	uxtb	r1, r1
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
 8006244:	223f      	movs	r2, #63	; 0x3f
 8006246:	7923      	ldrb	r3, [r4, #4]
 8006248:	401a      	ands	r2, r3
 800624a:	1e10      	subs	r0, r2, #0
 800624c:	d007      	beq.n	800625e <lv_style_list_get_style+0x2e>
 800624e:	069b      	lsls	r3, r3, #26
 8006250:	0e9b      	lsrs	r3, r3, #26
 8006252:	2000      	movs	r0, #0
 8006254:	428b      	cmp	r3, r1
 8006256:	d902      	bls.n	800625e <lv_style_list_get_style+0x2e>
    return list->style_list[id];
 8006258:	6823      	ldr	r3, [r4, #0]
 800625a:	0089      	lsls	r1, r1, #2
 800625c:	58c8      	ldr	r0, [r1, r3]
}
 800625e:	bd10      	pop	{r4, pc}

08006260 <get_style_prop_attr>:
 * @param style pointer to style.
 * @param idx index of the style in style->map
 * @return attribute of property in style->map + idx
 */
static inline uint8_t get_style_prop_attr(const lv_style_t * style, size_t idx)
{
 8006260:	b513      	push	{r0, r1, r4, lr}
    _lv_memcpy_small(&prop, &style->map[idx], sizeof(lv_style_property_t));
 8006262:	6803      	ldr	r3, [r0, #0]
 8006264:	2202      	movs	r2, #2
 8006266:	1859      	adds	r1, r3, r1
 8006268:	466b      	mov	r3, sp
 800626a:	1d9c      	adds	r4, r3, #6
 800626c:	0020      	movs	r0, r4
 800626e:	f7ff ffd7 	bl	8006220 <_lv_memcpy_small>
    return prop;
 8006272:	8820      	ldrh	r0, [r4, #0]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
 8006274:	0a00      	lsrs	r0, r0, #8
}
 8006276:	bd16      	pop	{r1, r2, r4, pc}

08006278 <get_prop_size>:
 * @param prop_id property id.
 * @return size of property
 */
static inline size_t get_prop_size(uint8_t prop_id)
{
    prop_id &= 0xF;
 8006278:	230f      	movs	r3, #15
 800627a:	4003      	ands	r3, r0
    size_t size = sizeof(lv_style_property_t);
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
 800627c:	2004      	movs	r0, #4
 800627e:	2b0b      	cmp	r3, #11
 8006280:	d903      	bls.n	800628a <get_prop_size+0x12>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
 8006282:	3801      	subs	r0, #1
 8006284:	2b0d      	cmp	r3, #13
 8006286:	d900      	bls.n	800628a <get_prop_size+0x12>
    else size += sizeof(const void *);
 8006288:	3003      	adds	r0, #3
    return size;
}
 800628a:	4770      	bx	lr

0800628c <style_resize>:
{
 800628c:	b570      	push	{r4, r5, r6, lr}
 800628e:	0004      	movs	r4, r0
    uint8_t * new_map = lv_mem_realloc(style->map, sz);
 8006290:	6800      	ldr	r0, [r0, #0]
{
 8006292:	000d      	movs	r5, r1
    uint8_t * new_map = lv_mem_realloc(style->map, sz);
 8006294:	f005 ff60 	bl	800c158 <lv_mem_realloc>
 8006298:	0003      	movs	r3, r0
    if(sz && new_map == NULL) return false;
 800629a:	2d00      	cmp	r5, #0
 800629c:	d001      	beq.n	80062a2 <style_resize+0x16>
 800629e:	2800      	cmp	r0, #0
 80062a0:	d001      	beq.n	80062a6 <style_resize+0x1a>
    return true;
 80062a2:	2001      	movs	r0, #1
    style->map = new_map;
 80062a4:	6023      	str	r3, [r4, #0]
}
 80062a6:	bd70      	pop	{r4, r5, r6, pc}

080062a8 <get_property_index>:
{
 80062a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062aa:	0005      	movs	r5, r0
 80062ac:	b087      	sub	sp, #28
    if(style == NULL) return -1;
 80062ae:	2800      	cmp	r0, #0
 80062b0:	d039      	beq.n	8006326 <get_property_index+0x7e>
    if(style->map == NULL) return -1;
 80062b2:	6803      	ldr	r3, [r0, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d036      	beq.n	8006326 <get_property_index+0x7e>
    uint8_t id_to_find = prop & 0xFF;
 80062b8:	b2cb      	uxtb	r3, r1
 80062ba:	9303      	str	r3, [sp, #12]
    attr = (prop >> 8) & 0xFF;
 80062bc:	0a0b      	lsrs	r3, r1, #8
 80062be:	9302      	str	r3, [sp, #8]
    int16_t id_guess = -1;
 80062c0:	2301      	movs	r3, #1
    size_t i = 0;
 80062c2:	2400      	movs	r4, #0
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 80062c4:	277f      	movs	r7, #127	; 0x7f
    int16_t id_guess = -1;
 80062c6:	425b      	negs	r3, r3
 80062c8:	9301      	str	r3, [sp, #4]
    int16_t weight = -1;
 80062ca:	9300      	str	r3, [sp, #0]
    _lv_memcpy_small(&prop, &style->map[idx], sizeof(lv_style_property_t));
 80062cc:	682b      	ldr	r3, [r5, #0]
 80062ce:	2202      	movs	r2, #2
 80062d0:	1919      	adds	r1, r3, r4
 80062d2:	ab04      	add	r3, sp, #16
 80062d4:	1d9e      	adds	r6, r3, #6
 80062d6:	0030      	movs	r0, r6
 80062d8:	f7ff ffa2 	bl	8006220 <_lv_memcpy_small>
    return get_style_prop(style, idx) & 0xFF;
 80062dc:	7836      	ldrb	r6, [r6, #0]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 80062de:	2eff      	cmp	r6, #255	; 0xff
 80062e0:	d101      	bne.n	80062e6 <get_property_index+0x3e>
    return id_guess;
 80062e2:	9801      	ldr	r0, [sp, #4]
 80062e4:	e00b      	b.n	80062fe <get_property_index+0x56>
        if(prop_id == id_to_find) {
 80062e6:	9b03      	ldr	r3, [sp, #12]
 80062e8:	42b3      	cmp	r3, r6
 80062ea:	d117      	bne.n	800631c <get_property_index+0x74>
            attr_i = get_style_prop_attr(style, i);
 80062ec:	0021      	movs	r1, r4
 80062ee:	0028      	movs	r0, r5
 80062f0:	f7ff ffb6 	bl	8006260 <get_style_prop_attr>
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 80062f4:	9b02      	ldr	r3, [sp, #8]
 80062f6:	4043      	eors	r3, r0
 80062f8:	423b      	tst	r3, r7
 80062fa:	d102      	bne.n	8006302 <get_property_index+0x5a>
                return i;
 80062fc:	0020      	movs	r0, r4
}
 80062fe:	b007      	add	sp, #28
 8006300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006302:	4038      	ands	r0, r7
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 8006304:	0002      	movs	r2, r0
 8006306:	9b02      	ldr	r3, [sp, #8]
 8006308:	403b      	ands	r3, r7
 800630a:	439a      	bics	r2, r3
 800630c:	d106      	bne.n	800631c <get_property_index+0x74>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
 800630e:	9b00      	ldr	r3, [sp, #0]
 8006310:	4298      	cmp	r0, r3
 8006312:	dd03      	ble.n	800631c <get_property_index+0x74>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
 8006314:	b203      	sxth	r3, r0
 8006316:	9300      	str	r3, [sp, #0]
                    id_guess = i;
 8006318:	b223      	sxth	r3, r4
 800631a:	9301      	str	r3, [sp, #4]
 * @param idx index of the style in style->map
 * @return index of next property in style->map
 */
static inline size_t get_next_prop_index(uint8_t prop_id, size_t idx)
{
    return idx + get_prop_size(prop_id);
 800631c:	0030      	movs	r0, r6
 800631e:	f7ff ffab 	bl	8006278 <get_prop_size>
 8006322:	1824      	adds	r4, r4, r0
 8006324:	e7d2      	b.n	80062cc <get_property_index+0x24>
    if(style == NULL) return -1;
 8006326:	2001      	movs	r0, #1
 8006328:	4240      	negs	r0, r0
 800632a:	e7e8      	b.n	80062fe <get_property_index+0x56>

0800632c <lv_style_init>:
{
 800632c:	b510      	push	{r4, lr}
    _lv_memset_00(style, sizeof(lv_style_t));
 800632e:	2104      	movs	r1, #4
 8006330:	f005 ffcc 	bl	800c2cc <_lv_memset_00>
}
 8006334:	bd10      	pop	{r4, pc}

08006336 <lv_style_list_init>:
{
 8006336:	b510      	push	{r4, lr}
    _lv_memset_00(list, sizeof(lv_style_list_t));
 8006338:	2108      	movs	r1, #8
 800633a:	f005 ffc7 	bl	800c2cc <_lv_memset_00>
}
 800633e:	bd10      	pop	{r4, pc}

08006340 <_lv_style_list_remove_style>:
{
 8006340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(list->style_cnt == 0) return;
 8006342:	223f      	movs	r2, #63	; 0x3f
 8006344:	7903      	ldrb	r3, [r0, #4]
{
 8006346:	0004      	movs	r4, r0
    if(list->style_cnt == 0) return;
 8006348:	401a      	ands	r2, r3
 800634a:	d005      	beq.n	8006358 <_lv_style_list_remove_style+0x18>
    for(i = 0; i < list->style_cnt; i++) {
 800634c:	2600      	movs	r6, #0
 800634e:	069b      	lsls	r3, r3, #26
 8006350:	0e9b      	lsrs	r3, r3, #26
 8006352:	b2f0      	uxtb	r0, r6
 8006354:	4283      	cmp	r3, r0
 8006356:	d800      	bhi.n	800635a <_lv_style_list_remove_style+0x1a>
}
 8006358:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        if(list->style_list[i] == style) {
 800635a:	6820      	ldr	r0, [r4, #0]
 800635c:	00b5      	lsls	r5, r6, #2
 800635e:	582d      	ldr	r5, [r5, r0]
 8006360:	3601      	adds	r6, #1
 8006362:	428d      	cmp	r5, r1
 8006364:	d1f5      	bne.n	8006352 <_lv_style_list_remove_style+0x12>
    if(list->style_cnt == 1) {
 8006366:	2a01      	cmp	r2, #1
 8006368:	d108      	bne.n	800637c <_lv_style_list_remove_style+0x3c>
        lv_mem_free(list->style_list);
 800636a:	f005 fdf5 	bl	800bf58 <lv_mem_free>
        list->style_list = NULL;
 800636e:	2300      	movs	r3, #0
        list->has_local = 0;
 8006370:	2280      	movs	r2, #128	; 0x80
        list->style_list = NULL;
 8006372:	6023      	str	r3, [r4, #0]
        list->style_cnt = 0;
 8006374:	7923      	ldrb	r3, [r4, #4]
        list->has_local = 0;
 8006376:	4013      	ands	r3, r2
 8006378:	7123      	strb	r3, [r4, #4]
        return;
 800637a:	e7ed      	b.n	8006358 <_lv_style_list_remove_style+0x18>
    lv_style_t ** new_styles = lv_mem_alloc(sizeof(lv_style_t *) * (list->style_cnt - 1));
 800637c:	1e58      	subs	r0, r3, #1
 800637e:	0080      	lsls	r0, r0, #2
 8006380:	f005 fd96 	bl	800beb0 <lv_mem_alloc>
 8006384:	1e06      	subs	r6, r0, #0
    if(new_styles == NULL) {
 8006386:	d0e7      	beq.n	8006358 <_lv_style_list_remove_style+0x18>
    for(i = 0, j = 0; i < list->style_cnt; i++) {
 8006388:	2200      	movs	r2, #0
 800638a:	0011      	movs	r1, r2
 800638c:	7923      	ldrb	r3, [r4, #4]
 800638e:	6820      	ldr	r0, [r4, #0]
 8006390:	069b      	lsls	r3, r3, #26
 8006392:	0e9b      	lsrs	r3, r3, #26
 8006394:	9301      	str	r3, [sp, #4]
 8006396:	9b01      	ldr	r3, [sp, #4]
 8006398:	b2d7      	uxtb	r7, r2
 800639a:	42bb      	cmp	r3, r7
 800639c:	d80c      	bhi.n	80063b8 <_lv_style_list_remove_style+0x78>
    lv_mem_free(list->style_list);
 800639e:	f005 fddb 	bl	800bf58 <lv_mem_free>
    list->style_cnt--;
 80063a2:	213f      	movs	r1, #63	; 0x3f
 80063a4:	7922      	ldrb	r2, [r4, #4]
    list->style_list = new_styles;
 80063a6:	6026      	str	r6, [r4, #0]
    list->style_cnt--;
 80063a8:	0693      	lsls	r3, r2, #26
 80063aa:	0e9b      	lsrs	r3, r3, #26
 80063ac:	333f      	adds	r3, #63	; 0x3f
 80063ae:	400b      	ands	r3, r1
 80063b0:	438a      	bics	r2, r1
 80063b2:	4313      	orrs	r3, r2
 80063b4:	7123      	strb	r3, [r4, #4]
 80063b6:	e7cf      	b.n	8006358 <_lv_style_list_remove_style+0x18>
        if(list->style_list[i] == style) continue;
 80063b8:	0097      	lsls	r7, r2, #2
 80063ba:	583f      	ldr	r7, [r7, r0]
 80063bc:	42bd      	cmp	r5, r7
 80063be:	d003      	beq.n	80063c8 <_lv_style_list_remove_style+0x88>
        new_styles[j++] = list->style_list[i];
 80063c0:	1c4b      	adds	r3, r1, #1
 80063c2:	0089      	lsls	r1, r1, #2
 80063c4:	518f      	str	r7, [r1, r6]
 80063c6:	b2d9      	uxtb	r1, r3
 80063c8:	3201      	adds	r2, #1
 80063ca:	e7e4      	b.n	8006396 <_lv_style_list_remove_style+0x56>

080063cc <_lv_style_list_add_style>:
{
 80063cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ce:	0004      	movs	r4, r0
 80063d0:	000d      	movs	r5, r1
    if(list == NULL) return;
 80063d2:	2800      	cmp	r0, #0
 80063d4:	d020      	beq.n	8006418 <_lv_style_list_add_style+0x4c>
    _lv_style_list_remove_style(list, style);
 80063d6:	f7ff ffb3 	bl	8006340 <_lv_style_list_remove_style>
    if(list->style_cnt == 0) new_styles = lv_mem_alloc(sizeof(lv_style_t *));
 80063da:	7921      	ldrb	r1, [r4, #4]
 80063dc:	068b      	lsls	r3, r1, #26
 80063de:	d11c      	bne.n	800641a <_lv_style_list_add_style+0x4e>
 80063e0:	2004      	movs	r0, #4
 80063e2:	f005 fd65 	bl	800beb0 <lv_mem_alloc>
    if(new_styles == NULL) {
 80063e6:	2800      	cmp	r0, #0
 80063e8:	d016      	beq.n	8006418 <_lv_style_list_add_style+0x4c>
    if(list->has_trans) first_style++;
 80063ea:	7923      	ldrb	r3, [r4, #4]
    uint8_t first_style = 0;
 80063ec:	09da      	lsrs	r2, r3, #7
    if(list->has_local) first_style++;
 80063ee:	0659      	lsls	r1, r3, #25
 80063f0:	d500      	bpl.n	80063f4 <_lv_style_list_add_style+0x28>
 80063f2:	3201      	adds	r2, #1
    for(i = list->style_cnt; i > first_style; i--) {
 80063f4:	069b      	lsls	r3, r3, #26
 80063f6:	0e9b      	lsrs	r3, r3, #26
 80063f8:	001e      	movs	r6, r3
 80063fa:	0099      	lsls	r1, r3, #2
 80063fc:	1841      	adds	r1, r0, r1
 80063fe:	3904      	subs	r1, #4
 8006400:	4296      	cmp	r6, r2
 8006402:	d811      	bhi.n	8006428 <_lv_style_list_add_style+0x5c>
    list->style_cnt++;
 8006404:	213f      	movs	r1, #63	; 0x3f
    new_styles[first_style] = style;
 8006406:	0092      	lsls	r2, r2, #2
 8006408:	5015      	str	r5, [r2, r0]
    list->style_cnt++;
 800640a:	7922      	ldrb	r2, [r4, #4]
 800640c:	3301      	adds	r3, #1
 800640e:	400b      	ands	r3, r1
 8006410:	438a      	bics	r2, r1
 8006412:	4313      	orrs	r3, r2
 8006414:	7123      	strb	r3, [r4, #4]
    list->style_list = new_styles;
 8006416:	6020      	str	r0, [r4, #0]
}
 8006418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else new_styles = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt + 1));
 800641a:	0689      	lsls	r1, r1, #26
 800641c:	0e09      	lsrs	r1, r1, #24
 800641e:	3104      	adds	r1, #4
 8006420:	6820      	ldr	r0, [r4, #0]
 8006422:	f005 fe99 	bl	800c158 <lv_mem_realloc>
 8006426:	e7de      	b.n	80063e6 <_lv_style_list_add_style+0x1a>
        new_styles[i] = new_styles[i - 1];
 8006428:	680f      	ldr	r7, [r1, #0]
    for(i = list->style_cnt; i > first_style; i--) {
 800642a:	3e01      	subs	r6, #1
        new_styles[i] = new_styles[i - 1];
 800642c:	604f      	str	r7, [r1, #4]
    for(i = list->style_cnt; i > first_style; i--) {
 800642e:	b2f6      	uxtb	r6, r6
 8006430:	e7e5      	b.n	80063fe <_lv_style_list_add_style+0x32>

08006432 <get_alloc_local_style>:
{
 8006432:	b570      	push	{r4, r5, r6, lr}
    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
 8006434:	2640      	movs	r6, #64	; 0x40
 8006436:	7901      	ldrb	r1, [r0, #4]
{
 8006438:	0005      	movs	r5, r0
    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
 800643a:	4231      	tst	r1, r6
 800643c:	d005      	beq.n	800644a <get_alloc_local_style+0x18>
 800643e:	09c9      	lsrs	r1, r1, #7
 8006440:	f7ff fef6 	bl	8006230 <lv_style_list_get_style>
 8006444:	0004      	movs	r4, r0
}
 8006446:	0020      	movs	r0, r4
 8006448:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_t * local_style = lv_mem_alloc(sizeof(lv_style_t));
 800644a:	2004      	movs	r0, #4
 800644c:	f005 fd30 	bl	800beb0 <lv_mem_alloc>
 8006450:	1e04      	subs	r4, r0, #0
    if(local_style == NULL) {
 8006452:	d0f8      	beq.n	8006446 <get_alloc_local_style+0x14>
    lv_style_init(local_style);
 8006454:	f7ff ff6a 	bl	800632c <lv_style_init>
    _lv_style_list_add_style(list, local_style);
 8006458:	0021      	movs	r1, r4
 800645a:	0028      	movs	r0, r5
 800645c:	f7ff ffb6 	bl	80063cc <_lv_style_list_add_style>
    list->has_local = 1;
 8006460:	792b      	ldrb	r3, [r5, #4]
 8006462:	431e      	orrs	r6, r3
 8006464:	712e      	strb	r6, [r5, #4]
 8006466:	e7ee      	b.n	8006446 <get_alloc_local_style+0x14>

08006468 <lv_style_reset>:
{
 8006468:	b510      	push	{r4, lr}
 800646a:	0004      	movs	r4, r0
    lv_mem_free(style->map);
 800646c:	6800      	ldr	r0, [r0, #0]
 800646e:	f005 fd73 	bl	800bf58 <lv_mem_free>
    lv_style_init(style);
 8006472:	0020      	movs	r0, r4
 8006474:	f7ff ff5a 	bl	800632c <lv_style_init>
}
 8006478:	bd10      	pop	{r4, pc}

0800647a <_lv_style_get_mem_size>:
{
 800647a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800647c:	1e05      	subs	r5, r0, #0
    if(style == NULL || style->map == NULL) return 0;
 800647e:	d003      	beq.n	8006488 <_lv_style_get_mem_size+0xe>
 8006480:	6800      	ldr	r0, [r0, #0]
    size_t i = 0;
 8006482:	2400      	movs	r4, #0
    if(style == NULL || style->map == NULL) return 0;
 8006484:	2800      	cmp	r0, #0
 8006486:	d103      	bne.n	8006490 <_lv_style_get_mem_size+0x16>
}
 8006488:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    return idx + get_prop_size(prop_id);
 800648a:	f7ff fef5 	bl	8006278 <get_prop_size>
 800648e:	1824      	adds	r4, r4, r0
    _lv_memcpy_small(&prop, &style->map[idx], sizeof(lv_style_property_t));
 8006490:	682b      	ldr	r3, [r5, #0]
 8006492:	2202      	movs	r2, #2
 8006494:	1919      	adds	r1, r3, r4
 8006496:	466b      	mov	r3, sp
 8006498:	1d9e      	adds	r6, r3, #6
 800649a:	0030      	movs	r0, r6
 800649c:	f7ff fec0 	bl	8006220 <_lv_memcpy_small>
    return get_style_prop(style, idx) & 0xFF;
 80064a0:	7830      	ldrb	r0, [r6, #0]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 80064a2:	28ff      	cmp	r0, #255	; 0xff
 80064a4:	d1f1      	bne.n	800648a <_lv_style_get_mem_size+0x10>
    return i + sizeof(lv_style_property_t);
 80064a6:	3402      	adds	r4, #2
 80064a8:	b2a0      	uxth	r0, r4
 80064aa:	e7ed      	b.n	8006488 <_lv_style_get_mem_size+0xe>

080064ac <lv_style_copy>:
{
 80064ac:	b570      	push	{r4, r5, r6, lr}
 80064ae:	0006      	movs	r6, r0
    uint16_t size = _lv_style_get_mem_size(style_src);
 80064b0:	0008      	movs	r0, r1
{
 80064b2:	000d      	movs	r5, r1
    uint16_t size = _lv_style_get_mem_size(style_src);
 80064b4:	f7ff ffe1 	bl	800647a <_lv_style_get_mem_size>
 80064b8:	1e04      	subs	r4, r0, #0
    if(size == 0) return;
 80064ba:	d008      	beq.n	80064ce <lv_style_copy+0x22>
    style_dest->map = lv_mem_alloc(size);
 80064bc:	f005 fcf8 	bl	800beb0 <lv_mem_alloc>
 80064c0:	6030      	str	r0, [r6, #0]
    if(style_dest->map)
 80064c2:	2800      	cmp	r0, #0
 80064c4:	d003      	beq.n	80064ce <lv_style_copy+0x22>
        _lv_memcpy(style_dest->map, style_src->map, size);
 80064c6:	0022      	movs	r2, r4
 80064c8:	6829      	ldr	r1, [r5, #0]
 80064ca:	f005 fdbf 	bl	800c04c <_lv_memcpy>
}
 80064ce:	bd70      	pop	{r4, r5, r6, pc}

080064d0 <_lv_style_set_int>:
{
 80064d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064d2:	b085      	sub	sp, #20
 80064d4:	466b      	mov	r3, sp
 80064d6:	ae01      	add	r6, sp, #4
 80064d8:	1d9f      	adds	r7, r3, #6
 80064da:	0005      	movs	r5, r0
 80064dc:	8039      	strh	r1, [r7, #0]
 80064de:	8032      	strh	r2, [r6, #0]
    int32_t id = get_property_index(style, prop);
 80064e0:	f7ff fee2 	bl	80062a8 <get_property_index>
 80064e4:	1e04      	subs	r4, r0, #0
    if(id >= 0) {
 80064e6:	db11      	blt.n	800650c <_lv_style_set_int+0x3c>
        attr_found = get_style_prop_attr(style, id);
 80064e8:	0001      	movs	r1, r0
 80064ea:	0028      	movs	r0, r5
 80064ec:	f7ff feb8 	bl	8006260 <get_style_prop_attr>
        attr_goal = (prop >> 8) & 0xFFU;
 80064f0:	883b      	ldrh	r3, [r7, #0]
 80064f2:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 80064f4:	4058      	eors	r0, r3
 80064f6:	0643      	lsls	r3, r0, #25
 80064f8:	d108      	bne.n	800650c <_lv_style_set_int+0x3c>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &value, sizeof(lv_style_int_t));
 80064fa:	2202      	movs	r2, #2
 80064fc:	0031      	movs	r1, r6
 80064fe:	6828      	ldr	r0, [r5, #0]
 8006500:	3402      	adds	r4, #2
 8006502:	1900      	adds	r0, r0, r4
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 8006504:	f7ff fe8c 	bl	8006220 <_lv_memcpy_small>
}
 8006508:	b005      	add	sp, #20
 800650a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 800650c:	23ff      	movs	r3, #255	; 0xff
 800650e:	466a      	mov	r2, sp
    uint16_t size = _lv_style_get_mem_size(style);
 8006510:	0028      	movs	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 8006512:	81d3      	strh	r3, [r2, #14]
    uint16_t size = _lv_style_get_mem_size(style);
 8006514:	f7ff ffb1 	bl	800647a <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
 8006518:	2800      	cmp	r0, #0
 800651a:	d100      	bne.n	800651e <_lv_style_set_int+0x4e>
 800651c:	3002      	adds	r0, #2
    size += new_prop_size;
 800651e:	3004      	adds	r0, #4
    if(!style_resize(style, size)) return;
 8006520:	b284      	uxth	r4, r0
 8006522:	0021      	movs	r1, r4
 8006524:	0028      	movs	r0, r5
 8006526:	f7ff feb1 	bl	800628c <style_resize>
 800652a:	2800      	cmp	r0, #0
 800652c:	d0ec      	beq.n	8006508 <_lv_style_set_int+0x38>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 800652e:	682b      	ldr	r3, [r5, #0]
 8006530:	1fa0      	subs	r0, r4, #6
 8006532:	1818      	adds	r0, r3, r0
 8006534:	2202      	movs	r2, #2
 8006536:	0039      	movs	r1, r7
 8006538:	f7ff fe72 	bl	8006220 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
 800653c:	682b      	ldr	r3, [r5, #0]
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 800653e:	1f20      	subs	r0, r4, #4
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
 8006540:	1818      	adds	r0, r3, r0
 8006542:	2202      	movs	r2, #2
 8006544:	0031      	movs	r1, r6
 8006546:	f7ff fe6b 	bl	8006220 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 800654a:	230e      	movs	r3, #14
 800654c:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
 800654e:	3c02      	subs	r4, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 8006550:	446b      	add	r3, sp
 8006552:	1900      	adds	r0, r0, r4
 8006554:	2202      	movs	r2, #2
 8006556:	0019      	movs	r1, r3
 8006558:	e7d4      	b.n	8006504 <_lv_style_set_int+0x34>

0800655a <_lv_style_set_color>:
{
 800655a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800655c:	b085      	sub	sp, #20
 800655e:	466b      	mov	r3, sp
 8006560:	ae01      	add	r6, sp, #4
 8006562:	1d9f      	adds	r7, r3, #6
 8006564:	0005      	movs	r5, r0
 8006566:	8032      	strh	r2, [r6, #0]
 8006568:	8039      	strh	r1, [r7, #0]
    int32_t id = get_property_index(style, prop);
 800656a:	f7ff fe9d 	bl	80062a8 <get_property_index>
 800656e:	1e04      	subs	r4, r0, #0
    if(id >= 0) {
 8006570:	db11      	blt.n	8006596 <_lv_style_set_color+0x3c>
        attr_found = get_style_prop_attr(style, id);
 8006572:	0001      	movs	r1, r0
 8006574:	0028      	movs	r0, r5
 8006576:	f7ff fe73 	bl	8006260 <get_style_prop_attr>
        attr_goal = (prop >> 8) & 0xFFU;
 800657a:	883b      	ldrh	r3, [r7, #0]
 800657c:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 800657e:	4058      	eors	r0, r3
 8006580:	0643      	lsls	r3, r0, #25
 8006582:	d108      	bne.n	8006596 <_lv_style_set_color+0x3c>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &color, sizeof(lv_color_t));
 8006584:	2202      	movs	r2, #2
 8006586:	0031      	movs	r1, r6
 8006588:	6828      	ldr	r0, [r5, #0]
 800658a:	3402      	adds	r4, #2
 800658c:	1900      	adds	r0, r0, r4
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 800658e:	f7ff fe47 	bl	8006220 <_lv_memcpy_small>
}
 8006592:	b005      	add	sp, #20
 8006594:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 8006596:	23ff      	movs	r3, #255	; 0xff
 8006598:	466a      	mov	r2, sp
    uint16_t size = _lv_style_get_mem_size(style);
 800659a:	0028      	movs	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 800659c:	81d3      	strh	r3, [r2, #14]
    uint16_t size = _lv_style_get_mem_size(style);
 800659e:	f7ff ff6c 	bl	800647a <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
 80065a2:	2800      	cmp	r0, #0
 80065a4:	d100      	bne.n	80065a8 <_lv_style_set_color+0x4e>
 80065a6:	3002      	adds	r0, #2
    size += new_prop_size;
 80065a8:	3004      	adds	r0, #4
    if(!style_resize(style, size)) return;
 80065aa:	b284      	uxth	r4, r0
 80065ac:	0021      	movs	r1, r4
 80065ae:	0028      	movs	r0, r5
 80065b0:	f7ff fe6c 	bl	800628c <style_resize>
 80065b4:	2800      	cmp	r0, #0
 80065b6:	d0ec      	beq.n	8006592 <_lv_style_set_color+0x38>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 80065b8:	682b      	ldr	r3, [r5, #0]
 80065ba:	1fa0      	subs	r0, r4, #6
 80065bc:	1818      	adds	r0, r3, r0
 80065be:	2202      	movs	r2, #2
 80065c0:	0039      	movs	r1, r7
 80065c2:	f7ff fe2d 	bl	8006220 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
 80065c6:	682b      	ldr	r3, [r5, #0]
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 80065c8:	1f20      	subs	r0, r4, #4
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
 80065ca:	1818      	adds	r0, r3, r0
 80065cc:	2202      	movs	r2, #2
 80065ce:	0031      	movs	r1, r6
 80065d0:	f7ff fe26 	bl	8006220 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 80065d4:	230e      	movs	r3, #14
 80065d6:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
 80065d8:	3c02      	subs	r4, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 80065da:	446b      	add	r3, sp
 80065dc:	1900      	adds	r0, r0, r4
 80065de:	2202      	movs	r2, #2
 80065e0:	0019      	movs	r1, r3
 80065e2:	e7d4      	b.n	800658e <_lv_style_set_color+0x34>

080065e4 <_lv_style_set_opa>:
{
 80065e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065e6:	b085      	sub	sp, #20
 80065e8:	466b      	mov	r3, sp
 80065ea:	1d9f      	adds	r7, r3, #6
 80065ec:	1d5e      	adds	r6, r3, #5
 80065ee:	0005      	movs	r5, r0
 80065f0:	8039      	strh	r1, [r7, #0]
 80065f2:	7032      	strb	r2, [r6, #0]
    int32_t id = get_property_index(style, prop);
 80065f4:	f7ff fe58 	bl	80062a8 <get_property_index>
 80065f8:	1e04      	subs	r4, r0, #0
    if(id >= 0) {
 80065fa:	db11      	blt.n	8006620 <_lv_style_set_opa+0x3c>
        attr_found = get_style_prop_attr(style, id);
 80065fc:	0001      	movs	r1, r0
 80065fe:	0028      	movs	r0, r5
 8006600:	f7ff fe2e 	bl	8006260 <get_style_prop_attr>
        attr_goal = (prop >> 8) & 0xFFU;
 8006604:	883b      	ldrh	r3, [r7, #0]
 8006606:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 8006608:	4058      	eors	r0, r3
 800660a:	0643      	lsls	r3, r0, #25
 800660c:	d108      	bne.n	8006620 <_lv_style_set_opa+0x3c>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &opa, sizeof(lv_opa_t));
 800660e:	2201      	movs	r2, #1
 8006610:	0031      	movs	r1, r6
 8006612:	6828      	ldr	r0, [r5, #0]
 8006614:	3402      	adds	r4, #2
 8006616:	1900      	adds	r0, r0, r4
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 8006618:	f7ff fe02 	bl	8006220 <_lv_memcpy_small>
}
 800661c:	b005      	add	sp, #20
 800661e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 8006620:	23ff      	movs	r3, #255	; 0xff
 8006622:	466a      	mov	r2, sp
    uint16_t size = _lv_style_get_mem_size(style);
 8006624:	0028      	movs	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 8006626:	81d3      	strh	r3, [r2, #14]
    uint16_t size = _lv_style_get_mem_size(style);
 8006628:	f7ff ff27 	bl	800647a <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
 800662c:	2800      	cmp	r0, #0
 800662e:	d100      	bne.n	8006632 <_lv_style_set_opa+0x4e>
 8006630:	3002      	adds	r0, #2
    size += new_prop_size;
 8006632:	3003      	adds	r0, #3
    if(!style_resize(style, size)) return;
 8006634:	b284      	uxth	r4, r0
 8006636:	0021      	movs	r1, r4
 8006638:	0028      	movs	r0, r5
 800663a:	f7ff fe27 	bl	800628c <style_resize>
 800663e:	2800      	cmp	r0, #0
 8006640:	d0ec      	beq.n	800661c <_lv_style_set_opa+0x38>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 8006642:	682b      	ldr	r3, [r5, #0]
 8006644:	1f60      	subs	r0, r4, #5
 8006646:	1818      	adds	r0, r3, r0
 8006648:	2202      	movs	r2, #2
 800664a:	0039      	movs	r1, r7
 800664c:	f7ff fde8 	bl	8006220 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
 8006650:	682b      	ldr	r3, [r5, #0]
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 8006652:	1ee0      	subs	r0, r4, #3
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
 8006654:	1818      	adds	r0, r3, r0
 8006656:	2201      	movs	r2, #1
 8006658:	0031      	movs	r1, r6
 800665a:	f7ff fde1 	bl	8006220 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 800665e:	230e      	movs	r3, #14
 8006660:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
 8006662:	3c02      	subs	r4, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 8006664:	446b      	add	r3, sp
 8006666:	1900      	adds	r0, r0, r4
 8006668:	2202      	movs	r2, #2
 800666a:	0019      	movs	r1, r3
 800666c:	e7d4      	b.n	8006618 <_lv_style_set_opa+0x34>

0800666e <_lv_style_set_ptr>:
{
 800666e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006670:	b085      	sub	sp, #20
 8006672:	466b      	mov	r3, sp
 8006674:	1d9f      	adds	r7, r3, #6
 8006676:	0005      	movs	r5, r0
 8006678:	9200      	str	r2, [sp, #0]
 800667a:	8039      	strh	r1, [r7, #0]
    int32_t id = get_property_index(style, prop);
 800667c:	f7ff fe14 	bl	80062a8 <get_property_index>
 8006680:	1e04      	subs	r4, r0, #0
    if(id >= 0) {
 8006682:	db11      	blt.n	80066a8 <_lv_style_set_ptr+0x3a>
        attr_found = get_style_prop_attr(style, id);
 8006684:	0001      	movs	r1, r0
 8006686:	0028      	movs	r0, r5
 8006688:	f7ff fdea 	bl	8006260 <get_style_prop_attr>
        attr_goal = (prop >> 8) & 0xFFU;
 800668c:	883b      	ldrh	r3, [r7, #0]
 800668e:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 8006690:	4058      	eors	r0, r3
 8006692:	0643      	lsls	r3, r0, #25
 8006694:	d108      	bne.n	80066a8 <_lv_style_set_ptr+0x3a>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &p, sizeof(const void *));
 8006696:	2204      	movs	r2, #4
 8006698:	4669      	mov	r1, sp
 800669a:	6828      	ldr	r0, [r5, #0]
 800669c:	3402      	adds	r4, #2
 800669e:	1900      	adds	r0, r0, r4
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 80066a0:	f7ff fdbe 	bl	8006220 <_lv_memcpy_small>
}
 80066a4:	b005      	add	sp, #20
 80066a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 80066a8:	260e      	movs	r6, #14
 80066aa:	23ff      	movs	r3, #255	; 0xff
 80066ac:	446e      	add	r6, sp
    uint16_t size = _lv_style_get_mem_size(style);
 80066ae:	0028      	movs	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 80066b0:	8033      	strh	r3, [r6, #0]
    uint16_t size = _lv_style_get_mem_size(style);
 80066b2:	f7ff fee2 	bl	800647a <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
 80066b6:	2800      	cmp	r0, #0
 80066b8:	d100      	bne.n	80066bc <_lv_style_set_ptr+0x4e>
 80066ba:	3002      	adds	r0, #2
    size += new_prop_size;
 80066bc:	3006      	adds	r0, #6
    if(!style_resize(style, size)) return;
 80066be:	b284      	uxth	r4, r0
 80066c0:	0021      	movs	r1, r4
 80066c2:	0028      	movs	r0, r5
 80066c4:	f7ff fde2 	bl	800628c <style_resize>
 80066c8:	2800      	cmp	r0, #0
 80066ca:	d0eb      	beq.n	80066a4 <_lv_style_set_ptr+0x36>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 80066cc:	0020      	movs	r0, r4
 80066ce:	682b      	ldr	r3, [r5, #0]
 80066d0:	3808      	subs	r0, #8
 80066d2:	1818      	adds	r0, r3, r0
 80066d4:	2202      	movs	r2, #2
 80066d6:	0039      	movs	r1, r7
 80066d8:	f7ff fda2 	bl	8006220 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - sizeof(const void *) - end_mark_size, &p, sizeof(const void *));
 80066dc:	682b      	ldr	r3, [r5, #0]
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 80066de:	1fa0      	subs	r0, r4, #6
    _lv_memcpy_small(style->map + size - sizeof(const void *) - end_mark_size, &p, sizeof(const void *));
 80066e0:	2204      	movs	r2, #4
 80066e2:	4669      	mov	r1, sp
 80066e4:	1818      	adds	r0, r3, r0
 80066e6:	f7ff fd9b 	bl	8006220 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 80066ea:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - sizeof(const void *) - end_mark_size, &p, sizeof(const void *));
 80066ec:	3c02      	subs	r4, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 80066ee:	1900      	adds	r0, r0, r4
 80066f0:	2202      	movs	r2, #2
 80066f2:	0031      	movs	r1, r6
 80066f4:	e7d4      	b.n	80066a0 <_lv_style_set_ptr+0x32>

080066f6 <_lv_style_get_int>:
{
 80066f6:	b570      	push	{r4, r5, r6, lr}
 80066f8:	0004      	movs	r4, r0
 80066fa:	0016      	movs	r6, r2
    int32_t id = get_property_index(style, prop);
 80066fc:	f7ff fdd4 	bl	80062a8 <get_property_index>
 8006700:	1e05      	subs	r5, r0, #0
    if(id < 0) {
 8006702:	db0d      	blt.n	8006720 <_lv_style_get_int+0x2a>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_style_int_t));
 8006704:	6823      	ldr	r3, [r4, #0]
 8006706:	1c81      	adds	r1, r0, #2
 8006708:	1859      	adds	r1, r3, r1
 800670a:	2202      	movs	r2, #2
 800670c:	0030      	movs	r0, r6
 800670e:	f7ff fd87 	bl	8006220 <_lv_memcpy_small>
        attr_act = get_style_prop_attr(style, id);
 8006712:	0029      	movs	r1, r5
 8006714:	0020      	movs	r0, r4
 8006716:	f7ff fda3 	bl	8006260 <get_style_prop_attr>
        return LV_STYLE_ATTR_GET_STATE(attr_act);
 800671a:	237f      	movs	r3, #127	; 0x7f
 800671c:	4018      	ands	r0, r3
}
 800671e:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
 8006720:	2001      	movs	r0, #1
 8006722:	4240      	negs	r0, r0
 8006724:	e7fb      	b.n	800671e <_lv_style_get_int+0x28>

08006726 <_lv_style_get_opa>:
{
 8006726:	b570      	push	{r4, r5, r6, lr}
 8006728:	0004      	movs	r4, r0
 800672a:	0016      	movs	r6, r2
    int32_t id = get_property_index(style, prop);
 800672c:	f7ff fdbc 	bl	80062a8 <get_property_index>
 8006730:	1e05      	subs	r5, r0, #0
    if(id < 0) {
 8006732:	db0d      	blt.n	8006750 <_lv_style_get_opa+0x2a>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_opa_t));
 8006734:	6823      	ldr	r3, [r4, #0]
 8006736:	1c81      	adds	r1, r0, #2
 8006738:	1859      	adds	r1, r3, r1
 800673a:	2201      	movs	r2, #1
 800673c:	0030      	movs	r0, r6
 800673e:	f7ff fd6f 	bl	8006220 <_lv_memcpy_small>
        attr_act = get_style_prop_attr(style, id);
 8006742:	0029      	movs	r1, r5
 8006744:	0020      	movs	r0, r4
 8006746:	f7ff fd8b 	bl	8006260 <get_style_prop_attr>
        return LV_STYLE_ATTR_GET_STATE(attr_act);
 800674a:	237f      	movs	r3, #127	; 0x7f
 800674c:	4018      	ands	r0, r3
}
 800674e:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
 8006750:	2001      	movs	r0, #1
 8006752:	4240      	negs	r0, r0
 8006754:	e7fb      	b.n	800674e <_lv_style_get_opa+0x28>

08006756 <_lv_style_get_color>:
{
 8006756:	b570      	push	{r4, r5, r6, lr}
 8006758:	0004      	movs	r4, r0
 800675a:	0016      	movs	r6, r2
    int32_t id = get_property_index(style, prop);
 800675c:	f7ff fda4 	bl	80062a8 <get_property_index>
 8006760:	1e05      	subs	r5, r0, #0
    if(id < 0) {
 8006762:	db0d      	blt.n	8006780 <_lv_style_get_color+0x2a>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_color_t));
 8006764:	6823      	ldr	r3, [r4, #0]
 8006766:	1c81      	adds	r1, r0, #2
 8006768:	1859      	adds	r1, r3, r1
 800676a:	2202      	movs	r2, #2
 800676c:	0030      	movs	r0, r6
 800676e:	f7ff fd57 	bl	8006220 <_lv_memcpy_small>
        attr_act = get_style_prop_attr(style, id);
 8006772:	0029      	movs	r1, r5
 8006774:	0020      	movs	r0, r4
 8006776:	f7ff fd73 	bl	8006260 <get_style_prop_attr>
        return LV_STYLE_ATTR_GET_STATE(attr_act);
 800677a:	237f      	movs	r3, #127	; 0x7f
 800677c:	4018      	ands	r0, r3
}
 800677e:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
 8006780:	2001      	movs	r0, #1
 8006782:	4240      	negs	r0, r0
 8006784:	e7fb      	b.n	800677e <_lv_style_get_color+0x28>

08006786 <_lv_style_get_ptr>:
{
 8006786:	b570      	push	{r4, r5, r6, lr}
 8006788:	0004      	movs	r4, r0
 800678a:	0016      	movs	r6, r2
    int32_t id = get_property_index(style, prop);
 800678c:	f7ff fd8c 	bl	80062a8 <get_property_index>
 8006790:	1e05      	subs	r5, r0, #0
    if(id < 0) {
 8006792:	db0d      	blt.n	80067b0 <_lv_style_get_ptr+0x2a>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(const void *));
 8006794:	6823      	ldr	r3, [r4, #0]
 8006796:	1c81      	adds	r1, r0, #2
 8006798:	1859      	adds	r1, r3, r1
 800679a:	2204      	movs	r2, #4
 800679c:	0030      	movs	r0, r6
 800679e:	f7ff fd3f 	bl	8006220 <_lv_memcpy_small>
        attr_act = get_style_prop_attr(style, id);
 80067a2:	0029      	movs	r1, r5
 80067a4:	0020      	movs	r0, r4
 80067a6:	f7ff fd5b 	bl	8006260 <get_style_prop_attr>
        return LV_STYLE_ATTR_GET_STATE(attr_act);
 80067aa:	237f      	movs	r3, #127	; 0x7f
 80067ac:	4018      	ands	r0, r3
}
 80067ae:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
 80067b0:	2001      	movs	r0, #1
 80067b2:	4240      	negs	r0, r0
 80067b4:	e7fb      	b.n	80067ae <_lv_style_get_ptr+0x28>

080067b6 <lv_style_list_get_local_style>:
    if(!list->has_local) return NULL;
 80067b6:	2240      	movs	r2, #64	; 0x40
 80067b8:	7903      	ldrb	r3, [r0, #4]
 80067ba:	401a      	ands	r2, r3
 80067bc:	1e11      	subs	r1, r2, #0
 80067be:	d004      	beq.n	80067ca <lv_style_list_get_local_style+0x14>
    if(list->has_trans) return list->style_list[1];
 80067c0:	b25b      	sxtb	r3, r3
 80067c2:	6802      	ldr	r2, [r0, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	da02      	bge.n	80067ce <lv_style_list_get_local_style+0x18>
 80067c8:	6851      	ldr	r1, [r2, #4]
}
 80067ca:	0008      	movs	r0, r1
 80067cc:	4770      	bx	lr
    else return list->style_list[0];
 80067ce:	6811      	ldr	r1, [r2, #0]
 80067d0:	e7fb      	b.n	80067ca <lv_style_list_get_local_style+0x14>

080067d2 <_lv_style_list_get_transition_style>:
    if(!list->has_trans) return NULL;
 80067d2:	7902      	ldrb	r2, [r0, #4]
 80067d4:	2300      	movs	r3, #0
 80067d6:	2a7f      	cmp	r2, #127	; 0x7f
 80067d8:	d901      	bls.n	80067de <_lv_style_list_get_transition_style+0xc>
    return list->style_list[0];
 80067da:	6803      	ldr	r3, [r0, #0]
 80067dc:	681b      	ldr	r3, [r3, #0]
}
 80067de:	0018      	movs	r0, r3
 80067e0:	4770      	bx	lr

080067e2 <_lv_style_list_reset>:
{
 80067e2:	b570      	push	{r4, r5, r6, lr}
 80067e4:	1e04      	subs	r4, r0, #0
    if(list == NULL) return;
 80067e6:	d025      	beq.n	8006834 <_lv_style_list_reset+0x52>
    if(list->has_local) {
 80067e8:	7903      	ldrb	r3, [r0, #4]
 80067ea:	065b      	lsls	r3, r3, #25
 80067ec:	d508      	bpl.n	8006800 <_lv_style_list_reset+0x1e>
        lv_style_t * local = lv_style_list_get_local_style(list);
 80067ee:	f7ff ffe2 	bl	80067b6 <lv_style_list_get_local_style>
 80067f2:	1e05      	subs	r5, r0, #0
        if(local) {
 80067f4:	d004      	beq.n	8006800 <_lv_style_list_reset+0x1e>
            lv_style_reset(local);
 80067f6:	f7ff fe37 	bl	8006468 <lv_style_reset>
            lv_mem_free(local);
 80067fa:	0028      	movs	r0, r5
 80067fc:	f005 fbac 	bl	800bf58 <lv_mem_free>
    if(list->has_trans) {
 8006800:	7923      	ldrb	r3, [r4, #4]
 8006802:	2b7f      	cmp	r3, #127	; 0x7f
 8006804:	d909      	bls.n	800681a <_lv_style_list_reset+0x38>
        lv_style_t * trans = _lv_style_list_get_transition_style(list);
 8006806:	0020      	movs	r0, r4
 8006808:	f7ff ffe3 	bl	80067d2 <_lv_style_list_get_transition_style>
 800680c:	1e05      	subs	r5, r0, #0
        if(trans) {
 800680e:	d004      	beq.n	800681a <_lv_style_list_reset+0x38>
            lv_style_reset(trans);
 8006810:	f7ff fe2a 	bl	8006468 <lv_style_reset>
            lv_mem_free(trans);
 8006814:	0028      	movs	r0, r5
 8006816:	f005 fb9f 	bl	800bf58 <lv_mem_free>
    if(list->style_cnt > 0) lv_mem_free(list->style_list);
 800681a:	7923      	ldrb	r3, [r4, #4]
 800681c:	069b      	lsls	r3, r3, #26
 800681e:	d002      	beq.n	8006826 <_lv_style_list_reset+0x44>
 8006820:	6820      	ldr	r0, [r4, #0]
 8006822:	f005 fb99 	bl	800bf58 <lv_mem_free>
    list->style_list = NULL;
 8006826:	2300      	movs	r3, #0
    list->skip_trans = 0;
 8006828:	2201      	movs	r2, #1
    list->style_list = NULL;
 800682a:	6023      	str	r3, [r4, #0]
    list->has_trans = 0;
 800682c:	7123      	strb	r3, [r4, #4]
    list->skip_trans = 0;
 800682e:	7963      	ldrb	r3, [r4, #5]
 8006830:	4393      	bics	r3, r2
 8006832:	7163      	strb	r3, [r4, #5]
}
 8006834:	bd70      	pop	{r4, r5, r6, pc}

08006836 <lv_style_list_copy>:
{
 8006836:	b570      	push	{r4, r5, r6, lr}
 8006838:	000c      	movs	r4, r1
 800683a:	0005      	movs	r5, r0
    _lv_style_list_reset(list_dest);
 800683c:	f7ff ffd1 	bl	80067e2 <_lv_style_list_reset>
    if(list_src == NULL || list_src->style_list == NULL) return;
 8006840:	2c00      	cmp	r4, #0
 8006842:	d023      	beq.n	800688c <lv_style_list_copy+0x56>
 8006844:	6823      	ldr	r3, [r4, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d020      	beq.n	800688c <lv_style_list_copy+0x56>
    if(list_src->has_local == 0) {
 800684a:	7923      	ldrb	r3, [r4, #4]
 800684c:	0698      	lsls	r0, r3, #26
 800684e:	b25a      	sxtb	r2, r3
 8006850:	0e80      	lsrs	r0, r0, #26
 8006852:	065b      	lsls	r3, r3, #25
 8006854:	d42d      	bmi.n	80068b2 <lv_style_list_copy+0x7c>
        if(list_src->has_trans) {
 8006856:	2a00      	cmp	r2, #0
 8006858:	da19      	bge.n	800688e <lv_style_list_copy+0x58>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
 800685a:	3801      	subs	r0, #1
 800685c:	0080      	lsls	r0, r0, #2
 800685e:	f005 fb27 	bl	800beb0 <lv_mem_alloc>
 8006862:	6028      	str	r0, [r5, #0]
            if(list_dest->style_list) {
 8006864:	2800      	cmp	r0, #0
 8006866:	d011      	beq.n	800688c <lv_style_list_copy+0x56>
                _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
 8006868:	7922      	ldrb	r2, [r4, #4]
 800686a:	6823      	ldr	r3, [r4, #0]
 800686c:	0692      	lsls	r2, r2, #26
 800686e:	0e12      	lsrs	r2, r2, #24
 8006870:	1d19      	adds	r1, r3, #4
 8006872:	3a04      	subs	r2, #4
 8006874:	f005 fbea 	bl	800c04c <_lv_memcpy>
                list_dest->style_cnt = list_src->style_cnt - 1;
 8006878:	213f      	movs	r1, #63	; 0x3f
 800687a:	7923      	ldrb	r3, [r4, #4]
 800687c:	792a      	ldrb	r2, [r5, #4]
 800687e:	069b      	lsls	r3, r3, #26
 8006880:	0e9b      	lsrs	r3, r3, #26
 8006882:	3b01      	subs	r3, #1
 8006884:	400b      	ands	r3, r1
 8006886:	438a      	bics	r2, r1
                list_dest->style_cnt = list_src->style_cnt;
 8006888:	4313      	orrs	r3, r2
 800688a:	712b      	strb	r3, [r5, #4]
}
 800688c:	bd70      	pop	{r4, r5, r6, pc}
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
 800688e:	0080      	lsls	r0, r0, #2
 8006890:	f005 fb0e 	bl	800beb0 <lv_mem_alloc>
 8006894:	6028      	str	r0, [r5, #0]
            if(list_dest->style_list) {
 8006896:	2800      	cmp	r0, #0
 8006898:	d0f8      	beq.n	800688c <lv_style_list_copy+0x56>
                _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
 800689a:	7922      	ldrb	r2, [r4, #4]
 800689c:	6821      	ldr	r1, [r4, #0]
 800689e:	0692      	lsls	r2, r2, #26
 80068a0:	0e12      	lsrs	r2, r2, #24
 80068a2:	f005 fbd3 	bl	800c04c <_lv_memcpy>
                list_dest->style_cnt = list_src->style_cnt;
 80068a6:	213f      	movs	r1, #63	; 0x3f
 80068a8:	7922      	ldrb	r2, [r4, #4]
 80068aa:	792b      	ldrb	r3, [r5, #4]
 80068ac:	400a      	ands	r2, r1
 80068ae:	438b      	bics	r3, r1
 80068b0:	e7ea      	b.n	8006888 <lv_style_list_copy+0x52>
        if(list_src->has_trans) {
 80068b2:	2a00      	cmp	r2, #0
 80068b4:	da25      	bge.n	8006902 <lv_style_list_copy+0xcc>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
 80068b6:	3802      	subs	r0, #2
 80068b8:	0080      	lsls	r0, r0, #2
 80068ba:	f005 faf9 	bl	800beb0 <lv_mem_alloc>
 80068be:	6028      	str	r0, [r5, #0]
            if(list_dest->style_list) {
 80068c0:	2800      	cmp	r0, #0
 80068c2:	d011      	beq.n	80068e8 <lv_style_list_copy+0xb2>
                _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
 80068c4:	7922      	ldrb	r2, [r4, #4]
 80068c6:	6821      	ldr	r1, [r4, #0]
 80068c8:	0692      	lsls	r2, r2, #26
 80068ca:	0e12      	lsrs	r2, r2, #24
 80068cc:	3a08      	subs	r2, #8
 80068ce:	3108      	adds	r1, #8
 80068d0:	f005 fbbc 	bl	800c04c <_lv_memcpy>
                list_dest->style_cnt = list_src->style_cnt - 2;
 80068d4:	7923      	ldrb	r3, [r4, #4]
 80068d6:	069b      	lsls	r3, r3, #26
 80068d8:	0e9b      	lsrs	r3, r3, #26
 80068da:	3b02      	subs	r3, #2
                list_dest->style_cnt = list_src->style_cnt - 1;
 80068dc:	213f      	movs	r1, #63	; 0x3f
 80068de:	792a      	ldrb	r2, [r5, #4]
 80068e0:	400b      	ands	r3, r1
 80068e2:	438a      	bics	r2, r1
 80068e4:	4313      	orrs	r3, r2
 80068e6:	712b      	strb	r3, [r5, #4]
        lv_style_t * local_style = get_alloc_local_style(list_dest);
 80068e8:	0028      	movs	r0, r5
 80068ea:	f7ff fda2 	bl	8006432 <get_alloc_local_style>
 80068ee:	1e05      	subs	r5, r0, #0
        if (local_style)
 80068f0:	d0cc      	beq.n	800688c <lv_style_list_copy+0x56>
            lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
 80068f2:	0020      	movs	r0, r4
 80068f4:	f7ff fd9d 	bl	8006432 <get_alloc_local_style>
 80068f8:	0001      	movs	r1, r0
 80068fa:	0028      	movs	r0, r5
 80068fc:	f7ff fdd6 	bl	80064ac <lv_style_copy>
 8006900:	e7c4      	b.n	800688c <lv_style_list_copy+0x56>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
 8006902:	3801      	subs	r0, #1
 8006904:	0080      	lsls	r0, r0, #2
 8006906:	f005 fad3 	bl	800beb0 <lv_mem_alloc>
 800690a:	6028      	str	r0, [r5, #0]
            if(list_dest->style_list) {
 800690c:	2800      	cmp	r0, #0
 800690e:	d0eb      	beq.n	80068e8 <lv_style_list_copy+0xb2>
                _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
 8006910:	7922      	ldrb	r2, [r4, #4]
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	0692      	lsls	r2, r2, #26
 8006916:	0e12      	lsrs	r2, r2, #24
 8006918:	1d19      	adds	r1, r3, #4
 800691a:	3a04      	subs	r2, #4
 800691c:	f005 fb96 	bl	800c04c <_lv_memcpy>
                list_dest->style_cnt = list_src->style_cnt - 1;
 8006920:	7923      	ldrb	r3, [r4, #4]
 8006922:	069b      	lsls	r3, r3, #26
 8006924:	0e9b      	lsrs	r3, r3, #26
 8006926:	3b01      	subs	r3, #1
 8006928:	e7d8      	b.n	80068dc <lv_style_list_copy+0xa6>

0800692a <_lv_style_list_get_int>:
{
 800692a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800692c:	b087      	sub	sp, #28
 800692e:	1e05      	subs	r5, r0, #0
 8006930:	9101      	str	r1, [sp, #4]
 8006932:	9202      	str	r2, [sp, #8]
    if(list == NULL) return LV_RES_INV;
 8006934:	d023      	beq.n	800697e <_lv_style_list_get_int+0x54>
 8006936:	6800      	ldr	r0, [r0, #0]
    if(list->style_list == NULL) return LV_RES_INV;
 8006938:	2800      	cmp	r0, #0
 800693a:	d020      	beq.n	800697e <_lv_style_list_get_int+0x54>
    lv_style_int_t value_act = 0;
 800693c:	2400      	movs	r4, #0
    int16_t weight = -1;
 800693e:	2701      	movs	r7, #1
    int16_t weight_goal = attr;
 8006940:	0a0b      	lsrs	r3, r1, #8
 8006942:	9303      	str	r3, [sp, #12]
    lv_style_int_t value_act = 0;
 8006944:	ab04      	add	r3, sp, #16
 8006946:	80dc      	strh	r4, [r3, #6]
    int16_t weight = -1;
 8006948:	427f      	negs	r7, r7
    for(ci = 0; ci < list->style_cnt; ci++) {
 800694a:	792b      	ldrb	r3, [r5, #4]
 800694c:	069b      	lsls	r3, r3, #26
 800694e:	0e9b      	lsrs	r3, r3, #26
 8006950:	429c      	cmp	r4, r3
 8006952:	db03      	blt.n	800695c <_lv_style_list_get_int+0x32>
    if(weight >= 0) return LV_RES_OK;
 8006954:	43f8      	mvns	r0, r7
 8006956:	b280      	uxth	r0, r0
    if(list == NULL) return LV_RES_INV;
 8006958:	0bc0      	lsrs	r0, r0, #15
 800695a:	e010      	b.n	800697e <_lv_style_list_get_int+0x54>
        lv_style_t * style = lv_style_list_get_style(list, ci);
 800695c:	b2e1      	uxtb	r1, r4
 800695e:	0028      	movs	r0, r5
 8006960:	f7ff fc66 	bl	8006230 <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_int(style, prop, &value_act);
 8006964:	ab04      	add	r3, sp, #16
 8006966:	1d9e      	adds	r6, r3, #6
 8006968:	0032      	movs	r2, r6
 800696a:	9901      	ldr	r1, [sp, #4]
 800696c:	f7ff fec3 	bl	80066f6 <_lv_style_get_int>
        if(weight_act == weight_goal) {
 8006970:	9b03      	ldr	r3, [sp, #12]
 8006972:	4283      	cmp	r3, r0
 8006974:	d105      	bne.n	8006982 <_lv_style_list_get_int+0x58>
            return LV_RES_OK;
 8006976:	2001      	movs	r0, #1
            *res = value_act;
 8006978:	8833      	ldrh	r3, [r6, #0]
 800697a:	9a02      	ldr	r2, [sp, #8]
 800697c:	8013      	strh	r3, [r2, #0]
}
 800697e:	b007      	add	sp, #28
 8006980:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 8006982:	792b      	ldrb	r3, [r5, #4]
 8006984:	2b7f      	cmp	r3, #127	; 0x7f
 8006986:	d907      	bls.n	8006998 <_lv_style_list_get_int+0x6e>
 8006988:	2800      	cmp	r0, #0
 800698a:	db05      	blt.n	8006998 <_lv_style_list_get_int+0x6e>
 800698c:	2c00      	cmp	r4, #0
 800698e:	d103      	bne.n	8006998 <_lv_style_list_get_int+0x6e>
 8006990:	2201      	movs	r2, #1
 8006992:	796b      	ldrb	r3, [r5, #5]
 8006994:	4213      	tst	r3, r2
 8006996:	d0ee      	beq.n	8006976 <_lv_style_list_get_int+0x4c>
        else if(weight_act > weight) {
 8006998:	4287      	cmp	r7, r0
 800699a:	da03      	bge.n	80069a4 <_lv_style_list_get_int+0x7a>
            *res = value_act;
 800699c:	0007      	movs	r7, r0
 800699e:	8833      	ldrh	r3, [r6, #0]
 80069a0:	9a02      	ldr	r2, [sp, #8]
 80069a2:	8013      	strh	r3, [r2, #0]
 80069a4:	3401      	adds	r4, #1
 80069a6:	b224      	sxth	r4, r4
 80069a8:	e7cf      	b.n	800694a <_lv_style_list_get_int+0x20>

080069aa <_lv_style_list_get_color>:
{
 80069aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ac:	b087      	sub	sp, #28
 80069ae:	1e05      	subs	r5, r0, #0
 80069b0:	9101      	str	r1, [sp, #4]
 80069b2:	9202      	str	r2, [sp, #8]
    if(list == NULL) return LV_RES_INV;
 80069b4:	d022      	beq.n	80069fc <_lv_style_list_get_color+0x52>
 80069b6:	6800      	ldr	r0, [r0, #0]
    if(list->style_list == NULL) return LV_RES_INV;
 80069b8:	2800      	cmp	r0, #0
 80069ba:	d01f      	beq.n	80069fc <_lv_style_list_get_color+0x52>
    value_act.full = 0;
 80069bc:	2400      	movs	r4, #0
    int16_t weight = -1;
 80069be:	2701      	movs	r7, #1
    int16_t weight_goal = attr;
 80069c0:	0a0b      	lsrs	r3, r1, #8
 80069c2:	9303      	str	r3, [sp, #12]
    value_act.full = 0;
 80069c4:	ab05      	add	r3, sp, #20
 80069c6:	801c      	strh	r4, [r3, #0]
    int16_t weight = -1;
 80069c8:	427f      	negs	r7, r7
    for(ci = 0; ci < list->style_cnt; ci++) {
 80069ca:	792b      	ldrb	r3, [r5, #4]
 80069cc:	069b      	lsls	r3, r3, #26
 80069ce:	0e9b      	lsrs	r3, r3, #26
 80069d0:	429c      	cmp	r4, r3
 80069d2:	db03      	blt.n	80069dc <_lv_style_list_get_color+0x32>
    if(weight >= 0)  return LV_RES_OK;
 80069d4:	43f8      	mvns	r0, r7
 80069d6:	b280      	uxth	r0, r0
    if(list == NULL) return LV_RES_INV;
 80069d8:	0bc0      	lsrs	r0, r0, #15
 80069da:	e00f      	b.n	80069fc <_lv_style_list_get_color+0x52>
        lv_style_t * style = lv_style_list_get_style(list, ci);
 80069dc:	b2e1      	uxtb	r1, r4
 80069de:	0028      	movs	r0, r5
        int16_t weight_act = _lv_style_get_color(style, prop, &value_act);
 80069e0:	ae05      	add	r6, sp, #20
        lv_style_t * style = lv_style_list_get_style(list, ci);
 80069e2:	f7ff fc25 	bl	8006230 <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_color(style, prop, &value_act);
 80069e6:	0032      	movs	r2, r6
 80069e8:	9901      	ldr	r1, [sp, #4]
 80069ea:	f7ff feb4 	bl	8006756 <_lv_style_get_color>
        if(weight_act == weight_goal) {
 80069ee:	9b03      	ldr	r3, [sp, #12]
 80069f0:	4283      	cmp	r3, r0
 80069f2:	d105      	bne.n	8006a00 <_lv_style_list_get_color+0x56>
            return LV_RES_OK;
 80069f4:	2001      	movs	r0, #1
            *res = value_act;
 80069f6:	8833      	ldrh	r3, [r6, #0]
 80069f8:	9a02      	ldr	r2, [sp, #8]
 80069fa:	8013      	strh	r3, [r2, #0]
}
 80069fc:	b007      	add	sp, #28
 80069fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 8006a00:	792b      	ldrb	r3, [r5, #4]
 8006a02:	2b7f      	cmp	r3, #127	; 0x7f
 8006a04:	d907      	bls.n	8006a16 <_lv_style_list_get_color+0x6c>
 8006a06:	2800      	cmp	r0, #0
 8006a08:	db05      	blt.n	8006a16 <_lv_style_list_get_color+0x6c>
 8006a0a:	2c00      	cmp	r4, #0
 8006a0c:	d103      	bne.n	8006a16 <_lv_style_list_get_color+0x6c>
 8006a0e:	2201      	movs	r2, #1
 8006a10:	796b      	ldrb	r3, [r5, #5]
 8006a12:	4213      	tst	r3, r2
 8006a14:	d0ee      	beq.n	80069f4 <_lv_style_list_get_color+0x4a>
        else if(weight_act > weight) {
 8006a16:	4287      	cmp	r7, r0
 8006a18:	da03      	bge.n	8006a22 <_lv_style_list_get_color+0x78>
            *res = value_act;
 8006a1a:	0007      	movs	r7, r0
 8006a1c:	8833      	ldrh	r3, [r6, #0]
 8006a1e:	9a02      	ldr	r2, [sp, #8]
 8006a20:	8013      	strh	r3, [r2, #0]
 8006a22:	3401      	adds	r4, #1
 8006a24:	b224      	sxth	r4, r4
 8006a26:	e7d0      	b.n	80069ca <_lv_style_list_get_color+0x20>

08006a28 <_lv_style_list_get_opa>:
{
 8006a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a2a:	b087      	sub	sp, #28
 8006a2c:	1e05      	subs	r5, r0, #0
 8006a2e:	9101      	str	r1, [sp, #4]
 8006a30:	9202      	str	r2, [sp, #8]
    if(list == NULL) return LV_RES_INV;
 8006a32:	d023      	beq.n	8006a7c <_lv_style_list_get_opa+0x54>
 8006a34:	6800      	ldr	r0, [r0, #0]
    if(list->style_list == NULL) return LV_RES_INV;
 8006a36:	2800      	cmp	r0, #0
 8006a38:	d020      	beq.n	8006a7c <_lv_style_list_get_opa+0x54>
    lv_opa_t value_act = LV_OPA_TRANSP;
 8006a3a:	2400      	movs	r4, #0
    int16_t weight = -1;
 8006a3c:	2701      	movs	r7, #1
    int16_t weight_goal = attr;
 8006a3e:	0a0b      	lsrs	r3, r1, #8
 8006a40:	9303      	str	r3, [sp, #12]
    lv_opa_t value_act = LV_OPA_TRANSP;
 8006a42:	ab04      	add	r3, sp, #16
 8006a44:	71dc      	strb	r4, [r3, #7]
    int16_t weight = -1;
 8006a46:	427f      	negs	r7, r7
    for(ci = 0; ci < list->style_cnt; ci++) {
 8006a48:	792b      	ldrb	r3, [r5, #4]
 8006a4a:	069b      	lsls	r3, r3, #26
 8006a4c:	0e9b      	lsrs	r3, r3, #26
 8006a4e:	429c      	cmp	r4, r3
 8006a50:	db03      	blt.n	8006a5a <_lv_style_list_get_opa+0x32>
    if(weight >= 0)  return LV_RES_OK;
 8006a52:	43f8      	mvns	r0, r7
 8006a54:	b280      	uxth	r0, r0
    if(list == NULL) return LV_RES_INV;
 8006a56:	0bc0      	lsrs	r0, r0, #15
 8006a58:	e010      	b.n	8006a7c <_lv_style_list_get_opa+0x54>
        lv_style_t * style = lv_style_list_get_style(list, ci);
 8006a5a:	b2e1      	uxtb	r1, r4
 8006a5c:	0028      	movs	r0, r5
 8006a5e:	f7ff fbe7 	bl	8006230 <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_opa(style, prop, &value_act);
 8006a62:	ab04      	add	r3, sp, #16
 8006a64:	1dde      	adds	r6, r3, #7
 8006a66:	0032      	movs	r2, r6
 8006a68:	9901      	ldr	r1, [sp, #4]
 8006a6a:	f7ff fe5c 	bl	8006726 <_lv_style_get_opa>
        if(weight_act == weight_goal) {
 8006a6e:	9b03      	ldr	r3, [sp, #12]
 8006a70:	4283      	cmp	r3, r0
 8006a72:	d105      	bne.n	8006a80 <_lv_style_list_get_opa+0x58>
            return LV_RES_OK;
 8006a74:	2001      	movs	r0, #1
            *res = value_act;
 8006a76:	7833      	ldrb	r3, [r6, #0]
 8006a78:	9a02      	ldr	r2, [sp, #8]
 8006a7a:	7013      	strb	r3, [r2, #0]
}
 8006a7c:	b007      	add	sp, #28
 8006a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 8006a80:	792b      	ldrb	r3, [r5, #4]
 8006a82:	2b7f      	cmp	r3, #127	; 0x7f
 8006a84:	d907      	bls.n	8006a96 <_lv_style_list_get_opa+0x6e>
 8006a86:	2800      	cmp	r0, #0
 8006a88:	db05      	blt.n	8006a96 <_lv_style_list_get_opa+0x6e>
 8006a8a:	2c00      	cmp	r4, #0
 8006a8c:	d103      	bne.n	8006a96 <_lv_style_list_get_opa+0x6e>
 8006a8e:	2201      	movs	r2, #1
 8006a90:	796b      	ldrb	r3, [r5, #5]
 8006a92:	4213      	tst	r3, r2
 8006a94:	d0ee      	beq.n	8006a74 <_lv_style_list_get_opa+0x4c>
        else if(weight_act > weight) {
 8006a96:	4287      	cmp	r7, r0
 8006a98:	da03      	bge.n	8006aa2 <_lv_style_list_get_opa+0x7a>
            *res = value_act;
 8006a9a:	0007      	movs	r7, r0
 8006a9c:	7833      	ldrb	r3, [r6, #0]
 8006a9e:	9a02      	ldr	r2, [sp, #8]
 8006aa0:	7013      	strb	r3, [r2, #0]
 8006aa2:	3401      	adds	r4, #1
 8006aa4:	b224      	sxth	r4, r4
 8006aa6:	e7cf      	b.n	8006a48 <_lv_style_list_get_opa+0x20>

08006aa8 <_lv_style_list_get_ptr>:
{
 8006aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	0005      	movs	r5, r0
 8006aae:	9100      	str	r1, [sp, #0]
 8006ab0:	0017      	movs	r7, r2
    if(list == NULL) return LV_RES_INV;
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	d01e      	beq.n	8006af4 <_lv_style_list_get_ptr+0x4c>
 8006ab6:	6800      	ldr	r0, [r0, #0]
    if(list->style_list == NULL) return LV_RES_INV;
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	d01b      	beq.n	8006af4 <_lv_style_list_get_ptr+0x4c>
    int16_t weight = -1;
 8006abc:	2601      	movs	r6, #1
    for(ci = 0; ci < list->style_cnt; ci++) {
 8006abe:	2400      	movs	r4, #0
    int16_t weight_goal = attr;
 8006ac0:	0a0b      	lsrs	r3, r1, #8
 8006ac2:	9301      	str	r3, [sp, #4]
    int16_t weight = -1;
 8006ac4:	4276      	negs	r6, r6
    for(ci = 0; ci < list->style_cnt; ci++) {
 8006ac6:	792b      	ldrb	r3, [r5, #4]
 8006ac8:	069b      	lsls	r3, r3, #26
 8006aca:	0e9b      	lsrs	r3, r3, #26
 8006acc:	429c      	cmp	r4, r3
 8006ace:	db03      	blt.n	8006ad8 <_lv_style_list_get_ptr+0x30>
    if(weight >= 0)  return LV_RES_OK;
 8006ad0:	43f0      	mvns	r0, r6
 8006ad2:	b280      	uxth	r0, r0
    if(list == NULL) return LV_RES_INV;
 8006ad4:	0bc0      	lsrs	r0, r0, #15
 8006ad6:	e00d      	b.n	8006af4 <_lv_style_list_get_ptr+0x4c>
        lv_style_t * style = lv_style_list_get_style(list, ci);
 8006ad8:	b2e1      	uxtb	r1, r4
 8006ada:	0028      	movs	r0, r5
 8006adc:	f7ff fba8 	bl	8006230 <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_ptr(style, prop, &value_act);
 8006ae0:	aa03      	add	r2, sp, #12
 8006ae2:	9900      	ldr	r1, [sp, #0]
 8006ae4:	f7ff fe4f 	bl	8006786 <_lv_style_get_ptr>
        if(weight_act == weight_goal) {
 8006ae8:	9b01      	ldr	r3, [sp, #4]
 8006aea:	4283      	cmp	r3, r0
 8006aec:	d104      	bne.n	8006af8 <_lv_style_list_get_ptr+0x50>
            return LV_RES_OK;
 8006aee:	2001      	movs	r0, #1
            *res = value_act;
 8006af0:	9b03      	ldr	r3, [sp, #12]
 8006af2:	603b      	str	r3, [r7, #0]
}
 8006af4:	b005      	add	sp, #20
 8006af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 8006af8:	792b      	ldrb	r3, [r5, #4]
 8006afa:	2b7f      	cmp	r3, #127	; 0x7f
 8006afc:	d907      	bls.n	8006b0e <_lv_style_list_get_ptr+0x66>
 8006afe:	2800      	cmp	r0, #0
 8006b00:	db05      	blt.n	8006b0e <_lv_style_list_get_ptr+0x66>
 8006b02:	2c00      	cmp	r4, #0
 8006b04:	d103      	bne.n	8006b0e <_lv_style_list_get_ptr+0x66>
 8006b06:	2201      	movs	r2, #1
 8006b08:	796b      	ldrb	r3, [r5, #5]
 8006b0a:	4213      	tst	r3, r2
 8006b0c:	d0ef      	beq.n	8006aee <_lv_style_list_get_ptr+0x46>
        else if(weight_act > weight) {
 8006b0e:	4286      	cmp	r6, r0
 8006b10:	da02      	bge.n	8006b18 <_lv_style_list_get_ptr+0x70>
            *res = value_act;
 8006b12:	0006      	movs	r6, r0
 8006b14:	9b03      	ldr	r3, [sp, #12]
 8006b16:	603b      	str	r3, [r7, #0]
 8006b18:	3401      	adds	r4, #1
 8006b1a:	b224      	sxth	r4, r4
 8006b1c:	e7d3      	b.n	8006ac6 <_lv_style_list_get_ptr+0x1e>
	...

08006b20 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 8006b20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8006b22:	26ff      	movs	r6, #255	; 0xff
 8006b24:	271f      	movs	r7, #31
 8006b26:	0403      	lsls	r3, r0, #16
 8006b28:	040c      	lsls	r4, r1, #16
 8006b2a:	1ab6      	subs	r6, r6, r2
 8006b2c:	0edb      	lsrs	r3, r3, #27
 8006b2e:	0ee4      	lsrs	r4, r4, #27
 8006b30:	4374      	muls	r4, r6
 8006b32:	4353      	muls	r3, r2
 8006b34:	4d11      	ldr	r5, [pc, #68]	; (8006b7c <lv_color_mix+0x5c>)
 8006b36:	191b      	adds	r3, r3, r4
 8006b38:	3380      	adds	r3, #128	; 0x80
 8006b3a:	436b      	muls	r3, r5
 8006b3c:	0ddb      	lsrs	r3, r3, #23
 8006b3e:	403b      	ands	r3, r7
 8006b40:	9301      	str	r3, [sp, #4]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8006b42:	054b      	lsls	r3, r1, #21
 8006b44:	0e9b      	lsrs	r3, r3, #26
 8006b46:	4373      	muls	r3, r6
 8006b48:	469c      	mov	ip, r3
 8006b4a:	0544      	lsls	r4, r0, #21
 8006b4c:	0ea4      	lsrs	r4, r4, #26
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8006b4e:	06c0      	lsls	r0, r0, #27
 8006b50:	06c9      	lsls	r1, r1, #27
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8006b52:	4354      	muls	r4, r2
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8006b54:	0ec0      	lsrs	r0, r0, #27
 8006b56:	0ec9      	lsrs	r1, r1, #27
 8006b58:	4371      	muls	r1, r6
 8006b5a:	4350      	muls	r0, r2
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8006b5c:	4464      	add	r4, ip
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8006b5e:	1840      	adds	r0, r0, r1
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8006b60:	3480      	adds	r4, #128	; 0x80
 8006b62:	436c      	muls	r4, r5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8006b64:	3080      	adds	r0, #128	; 0x80
 8006b66:	4368      	muls	r0, r5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8006b68:	00e4      	lsls	r4, r4, #3
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8006b6a:	9b01      	ldr	r3, [sp, #4]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8006b6c:	0dc0      	lsrs	r0, r0, #23
    return ret;
 8006b6e:	0ea4      	lsrs	r4, r4, #26
 8006b70:	4038      	ands	r0, r7
 8006b72:	0164      	lsls	r4, r4, #5
 8006b74:	02db      	lsls	r3, r3, #11
 8006b76:	4320      	orrs	r0, r4
 8006b78:	4318      	orrs	r0, r3
}
 8006b7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b7c:	00008081 	.word	0x00008081

08006b80 <_lv_blend_fill>:
 * @param mode blend mode from `lv_blend_mode_t`
 */
LV_ATTRIBUTE_FAST_MEM void _lv_blend_fill(const lv_area_t * clip_area, const lv_area_t * fill_area,
                                          lv_color_t color, lv_opa_t * mask, lv_draw_mask_res_t mask_res, lv_opa_t opa,
                                          lv_blend_mode_t mode)
{
 8006b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b82:	b095      	sub	sp, #84	; 0x54
 8006b84:	9306      	str	r3, [sp, #24]
 8006b86:	ab1a      	add	r3, sp, #104	; 0x68
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	9008      	str	r0, [sp, #32]
 8006b8c:	930c      	str	r3, [sp, #48]	; 0x30
 8006b8e:	ab1b      	add	r3, sp, #108	; 0x6c
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	910a      	str	r1, [sp, #40]	; 0x28
 8006b94:	9307      	str	r3, [sp, #28]
 8006b96:	ab1c      	add	r3, sp, #112	; 0x70
 8006b98:	781e      	ldrb	r6, [r3, #0]
    /*Do not draw transparent things*/
    if(opa < LV_OPA_MIN) return;
 8006b9a:	9b07      	ldr	r3, [sp, #28]
{
 8006b9c:	1c17      	adds	r7, r2, #0
    if(opa < LV_OPA_MIN) return;
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d800      	bhi.n	8006ba4 <_lv_blend_fill+0x24>
 8006ba2:	e0b6      	b.n	8006d12 <_lv_blend_fill+0x192>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 8006ba4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d100      	bne.n	8006bac <_lv_blend_fill+0x2c>
 8006baa:	e0b2      	b.n	8006d12 <_lv_blend_fill+0x192>

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8006bac:	f7ff f900 	bl	8005db0 <_lv_refr_get_disp_refreshing>
 8006bb0:	9005      	str	r0, [sp, #20]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8006bb2:	f004 fc57 	bl	800b464 <lv_disp_get_buf>
    const lv_area_t * disp_area = &vdb->area;
    lv_color_t * disp_buf = vdb->buf_act;
 8006bb6:	6883      	ldr	r3, [r0, #8]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8006bb8:	0005      	movs	r5, r0
    lv_color_t * disp_buf = vdb->buf_act;
 8006bba:	9309      	str	r3, [sp, #36]	; 0x24

    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
 8006bbc:	9b05      	ldr	r3, [sp, #20]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <_lv_blend_fill+0x48>
 8006bc4:	9805      	ldr	r0, [sp, #20]
 8006bc6:	4798      	blx	r3

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, clip_area, fill_area);
 8006bc8:	ac12      	add	r4, sp, #72	; 0x48
 8006bca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bcc:	9908      	ldr	r1, [sp, #32]
 8006bce:	0020      	movs	r0, r4
 8006bd0:	f004 fd3b 	bl	800b64a <_lv_area_intersect>
    if(!is_common) return;
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	d100      	bne.n	8006bda <_lv_blend_fill+0x5a>
 8006bd8:	e09b      	b.n	8006d12 <_lv_blend_fill+0x192>

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
 8006bda:	8a28      	ldrh	r0, [r5, #16]
 8006bdc:	8823      	ldrh	r3, [r4, #0]
 8006bde:	1a1b      	subs	r3, r3, r0
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	469c      	mov	ip, r3
 8006be4:	b21b      	sxth	r3, r3
 8006be6:	930a      	str	r3, [sp, #40]	; 0x28
 8006be8:	8023      	strh	r3, [r4, #0]
    draw_area.y1 -= disp_area->y1;
 8006bea:	8a69      	ldrh	r1, [r5, #18]
 8006bec:	8862      	ldrh	r2, [r4, #2]
 8006bee:	1a52      	subs	r2, r2, r1
 8006bf0:	b293      	uxth	r3, r2
 8006bf2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bf4:	466b      	mov	r3, sp
 8006bf6:	222c      	movs	r2, #44	; 0x2c
 8006bf8:	5e9b      	ldrsh	r3, [r3, r2]
 8006bfa:	930d      	str	r3, [sp, #52]	; 0x34
    draw_area.x2 -= disp_area->x1;
    draw_area.y2 -= disp_area->y1;
 8006bfc:	88e2      	ldrh	r2, [r4, #6]
    draw_area.y1 -= disp_area->y1;
 8006bfe:	8063      	strh	r3, [r4, #2]
    draw_area.x2 -= disp_area->x1;
 8006c00:	88a3      	ldrh	r3, [r4, #4]
    draw_area.y2 -= disp_area->y1;
 8006c02:	1a52      	subs	r2, r2, r1
    draw_area.x2 -= disp_area->x1;
 8006c04:	1a1b      	subs	r3, r3, r0

    /*Round the values in the mask if anti-aliasing is disabled*/
#if LV_ANTIALIAS
    if(mask && disp->driver.antialiasing == 0)
 8006c06:	9906      	ldr	r1, [sp, #24]
    draw_area.x2 -= disp_area->x1;
 8006c08:	b29b      	uxth	r3, r3
    draw_area.y2 -= disp_area->y1;
 8006c0a:	b292      	uxth	r2, r2
    draw_area.x2 -= disp_area->x1;
 8006c0c:	80a3      	strh	r3, [r4, #4]
    draw_area.y2 -= disp_area->y1;
 8006c0e:	80e2      	strh	r2, [r4, #6]
    if(mask && disp->driver.antialiasing == 0)
 8006c10:	2900      	cmp	r1, #0
 8006c12:	d152      	bne.n	8006cba <_lv_blend_fill+0x13a>
        int32_t mask_w = lv_area_get_width(&draw_area);
        int32_t i;
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
    }

    if(disp->driver.set_px_cb) {
 8006c14:	9905      	ldr	r1, [sp, #20]
 8006c16:	6949      	ldr	r1, [r1, #20]
 8006c18:	2900      	cmp	r1, #0
 8006c1a:	d164      	bne.n	8006ce6 <_lv_blend_fill+0x166>
        fill_set_px(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res);
    }
    else if(mode == LV_BLEND_MODE_NORMAL) {
 8006c1c:	2e00      	cmp	r6, #0
 8006c1e:	d178      	bne.n	8006d12 <_lv_blend_fill+0x192>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8006c20:	8aa9      	ldrh	r1, [r5, #20]
 8006c22:	8a28      	ldrh	r0, [r5, #16]
 8006c24:	3101      	adds	r1, #1
 8006c26:	1a09      	subs	r1, r1, r0
 8006c28:	4660      	mov	r0, ip
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	1a1b      	subs	r3, r3, r0
 8006c2e:	b21b      	sxth	r3, r3
 8006c30:	9308      	str	r3, [sp, #32]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c34:	3201      	adds	r2, #1
 8006c36:	1ad2      	subs	r2, r2, r3

    int32_t draw_area_w = lv_area_get_width(draw_area);
    int32_t draw_area_h = lv_area_get_height(draw_area);

    /*Create a temp. disp_buf which always point to the first pixel of the destination area*/
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 8006c38:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    int32_t draw_area_h = lv_area_get_height(draw_area);
 8006c3a:	b213      	sxth	r3, r2
 8006c3c:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 8006c3e:	002b      	movs	r3, r5
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8006c40:	b209      	sxth	r1, r1
 8006c42:	434b      	muls	r3, r1
 8006c44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c46:	189b      	adds	r3, r3, r2
 8006c48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c4a:	005b      	lsls	r3, r3, #1
 8006c4c:	18d3      	adds	r3, r2, r3
 8006c4e:	9305      	str	r3, [sp, #20]
 8006c50:	004b      	lsls	r3, r1, #1
 8006c52:	930a      	str	r3, [sp, #40]	; 0x28

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 8006c54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d000      	beq.n	8006c5c <_lv_blend_fill+0xdc>
 8006c5a:	e106      	b.n	8006e6a <_lv_blend_fill+0x2ea>
        if(opa > LV_OPA_MAX) {
 8006c5c:	9b07      	ldr	r3, [sp, #28]
                disp->driver.gpu_fill_cb(&disp->driver, disp_buf, disp_w, draw_area, color);
                return;
            }
#endif
            /*Software rendering*/
            for(y = 0; y < draw_area_h; y++) {
 8006c5e:	0034      	movs	r4, r6
        if(opa > LV_OPA_MAX) {
 8006c60:	2bfd      	cmp	r3, #253	; 0xfd
 8006c62:	d900      	bls.n	8006c66 <_lv_blend_fill+0xe6>
 8006c64:	e0b4      	b.n	8006dd0 <_lv_blend_fill+0x250>
                }

                return;
            }
#endif
            lv_color_t last_dest_color = LV_COLOR_BLACK;
 8006c66:	466b      	mov	r3, sp
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 8006c68:	9a07      	ldr	r2, [sp, #28]
 8006c6a:	1c31      	adds	r1, r6, #0
 8006c6c:	1c38      	adds	r0, r7, #0
            lv_color_t last_dest_color = LV_COLOR_BLACK;
 8006c6e:	875e      	strh	r6, [r3, #58]	; 0x3a
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 8006c70:	f7ff ff56 	bl	8006b20 <lv_color_mix>
 8006c74:	06c3      	lsls	r3, r0, #27
 8006c76:	0edb      	lsrs	r3, r3, #27
 8006c78:	9309      	str	r3, [sp, #36]	; 0x24
 8006c7a:	0543      	lsls	r3, r0, #21
 8006c7c:	0e9b      	lsrs	r3, r3, #26
 8006c7e:	0400      	lsls	r0, r0, #16
 8006c80:	930c      	str	r3, [sp, #48]	; 0x30
 8006c82:	0ec3      	lsrs	r3, r0, #27
 8006c84:	930d      	str	r3, [sp, #52]	; 0x34

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
#if LV_COLOR_DEPTH != 1
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
 8006c86:	466b      	mov	r3, sp
 8006c88:	043a      	lsls	r2, r7, #16
 8006c8a:	8b9b      	ldrh	r3, [r3, #28]
 8006c8c:	0ed2      	lsrs	r2, r2, #27
 8006c8e:	435a      	muls	r2, r3
 8006c90:	920f      	str	r2, [sp, #60]	; 0x3c
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 8006c92:	057a      	lsls	r2, r7, #21
 8006c94:	0e92      	lsrs	r2, r2, #26
 8006c96:	435a      	muls	r2, r3
 8006c98:	9210      	str	r2, [sp, #64]	; 0x40
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 8006c9a:	06fa      	lsls	r2, r7, #27
 8006c9c:	0ed2      	lsrs	r2, r2, #27
 8006c9e:	435a      	muls	r2, r3

            uint16_t color_premult[3];
            lv_color_premult(color, opa, color_premult);
            lv_opa_t opa_inv = 255 - opa;
 8006ca0:	9b07      	ldr	r3, [sp, #28]
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8006ca2:	261f      	movs	r6, #31
 8006ca4:	43db      	mvns	r3, r3
 8006ca6:	b2db      	uxtb	r3, r3
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 8006ca8:	9211      	str	r2, [sp, #68]	; 0x44
 8006caa:	9306      	str	r3, [sp, #24]

            for(y = 0; y < draw_area_h; y++) {
 8006cac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cae:	42a3      	cmp	r3, r4
 8006cb0:	dd2f      	ble.n	8006d12 <_lv_blend_fill+0x192>
 8006cb2:	9a05      	ldr	r2, [sp, #20]
                for(x = 0; x < draw_area_w; x++) {
 8006cb4:	2500      	movs	r5, #0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8006cb6:	49ba      	ldr	r1, [pc, #744]	; (8006fa0 <_lv_blend_fill+0x420>)
 8006cb8:	e0cd      	b.n	8006e56 <_lv_blend_fill+0x2d6>
    if(mask && disp->driver.antialiasing == 0)
 8006cba:	9905      	ldr	r1, [sp, #20]
 8006cbc:	7a09      	ldrb	r1, [r1, #8]
 8006cbe:	07c9      	lsls	r1, r1, #31
 8006cc0:	d4a8      	bmi.n	8006c14 <_lv_blend_fill+0x94>
 8006cc2:	4660      	mov	r0, ip
 8006cc4:	1c59      	adds	r1, r3, #1
 8006cc6:	1a09      	subs	r1, r1, r0
        int32_t mask_w = lv_area_get_width(&draw_area);
 8006cc8:	b209      	sxth	r1, r1
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 8006cca:	9806      	ldr	r0, [sp, #24]
        int32_t mask_w = lv_area_get_width(&draw_area);
 8006ccc:	9108      	str	r1, [sp, #32]
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 8006cce:	9906      	ldr	r1, [sp, #24]
 8006cd0:	1a44      	subs	r4, r0, r1
 8006cd2:	9908      	ldr	r1, [sp, #32]
 8006cd4:	42a1      	cmp	r1, r4
 8006cd6:	dd9d      	ble.n	8006c14 <_lv_blend_fill+0x94>
 8006cd8:	2180      	movs	r1, #128	; 0x80
 8006cda:	7804      	ldrb	r4, [r0, #0]
 8006cdc:	42a1      	cmp	r1, r4
 8006cde:	41a4      	sbcs	r4, r4
 8006ce0:	7004      	strb	r4, [r0, #0]
 8006ce2:	3001      	adds	r0, #1
 8006ce4:	e7f3      	b.n	8006cce <_lv_blend_fill+0x14e>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8006ce6:	f7ff f863 	bl	8005db0 <_lv_refr_get_disp_refreshing>
 8006cea:	8aab      	ldrh	r3, [r5, #20]
 8006cec:	8a2a      	ldrh	r2, [r5, #16]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	1a9b      	subs	r3, r3, r2
 8006cf2:	b21b      	sxth	r3, r3
 8006cf4:	9308      	str	r3, [sp, #32]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 8006cf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8006cf8:	0006      	movs	r6, r0
 8006cfa:	aa12      	add	r2, sp, #72	; 0x48
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d124      	bne.n	8006d4a <_lv_blend_fill+0x1ca>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8006d00:	2302      	movs	r3, #2
 8006d02:	5ed2      	ldrsh	r2, [r2, r3]
 8006d04:	9205      	str	r2, [sp, #20]
 8006d06:	ab12      	add	r3, sp, #72	; 0x48
 8006d08:	2106      	movs	r1, #6
 8006d0a:	5e5a      	ldrsh	r2, [r3, r1]
 8006d0c:	9905      	ldr	r1, [sp, #20]
 8006d0e:	4291      	cmp	r1, r2
 8006d10:	dd01      	ble.n	8006d16 <_lv_blend_fill+0x196>
}
 8006d12:	b015      	add	sp, #84	; 0x54
 8006d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8006d16:	2500      	movs	r5, #0
 8006d18:	5f5d      	ldrsh	r5, [r3, r5]
 8006d1a:	ab12      	add	r3, sp, #72	; 0x48
 8006d1c:	2204      	movs	r2, #4
 8006d1e:	5e9b      	ldrsh	r3, [r3, r2]
 8006d20:	429d      	cmp	r5, r3
 8006d22:	dd03      	ble.n	8006d2c <_lv_blend_fill+0x1ac>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8006d24:	9b05      	ldr	r3, [sp, #20]
 8006d26:	3301      	adds	r3, #1
 8006d28:	9305      	str	r3, [sp, #20]
 8006d2a:	e7ec      	b.n	8006d06 <_lv_blend_fill+0x186>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
 8006d2c:	9a07      	ldr	r2, [sp, #28]
 8006d2e:	b22b      	sxth	r3, r5
 8006d30:	9202      	str	r2, [sp, #8]
 8006d32:	aa01      	add	r2, sp, #4
 8006d34:	8017      	strh	r7, [r2, #0]
 8006d36:	9a05      	ldr	r2, [sp, #20]
 8006d38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d3a:	b212      	sxth	r2, r2
 8006d3c:	9200      	str	r2, [sp, #0]
 8006d3e:	0030      	movs	r0, r6
 8006d40:	9a08      	ldr	r2, [sp, #32]
 8006d42:	6974      	ldr	r4, [r6, #20]
 8006d44:	47a0      	blx	r4
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8006d46:	3501      	adds	r5, #1
 8006d48:	e7e7      	b.n	8006d1a <_lv_blend_fill+0x19a>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	5ed1      	ldrsh	r1, [r2, r3]
 8006d4e:	9b06      	ldr	r3, [sp, #24]
 8006d50:	1a5b      	subs	r3, r3, r1
 8006d52:	9306      	str	r3, [sp, #24]
 8006d54:	8893      	ldrh	r3, [r2, #4]
 8006d56:	3301      	adds	r3, #1
 8006d58:	1a5b      	subs	r3, r3, r1
 8006d5a:	b21b      	sxth	r3, r3
 8006d5c:	930a      	str	r3, [sp, #40]	; 0x28
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8006d5e:	2302      	movs	r3, #2
 8006d60:	5ed2      	ldrsh	r2, [r2, r3]
 8006d62:	9205      	str	r2, [sp, #20]
 8006d64:	ab12      	add	r3, sp, #72	; 0x48
 8006d66:	2106      	movs	r1, #6
 8006d68:	5e5a      	ldrsh	r2, [r3, r1]
 8006d6a:	9905      	ldr	r1, [sp, #20]
 8006d6c:	4291      	cmp	r1, r2
 8006d6e:	dcd0      	bgt.n	8006d12 <_lv_blend_fill+0x192>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8006d70:	2400      	movs	r4, #0
 8006d72:	5f1c      	ldrsh	r4, [r3, r4]
 8006d74:	ab12      	add	r3, sp, #72	; 0x48
 8006d76:	2204      	movs	r2, #4
 8006d78:	5e9b      	ldrsh	r3, [r3, r2]
 8006d7a:	429c      	cmp	r4, r3
 8006d7c:	dd08      	ble.n	8006d90 <_lv_blend_fill+0x210>
            mask_tmp += draw_area_w;
 8006d7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d80:	9b06      	ldr	r3, [sp, #24]
 8006d82:	4694      	mov	ip, r2
 8006d84:	4463      	add	r3, ip
 8006d86:	9306      	str	r3, [sp, #24]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8006d88:	9b05      	ldr	r3, [sp, #20]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	9305      	str	r3, [sp, #20]
 8006d8e:	e7e9      	b.n	8006d64 <_lv_blend_fill+0x1e4>
                if(mask_tmp[x]) {
 8006d90:	9b06      	ldr	r3, [sp, #24]
 8006d92:	5d1a      	ldrb	r2, [r3, r4]
 8006d94:	2a00      	cmp	r2, #0
 8006d96:	d00e      	beq.n	8006db6 <_lv_blend_fill+0x236>
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 8006d98:	9907      	ldr	r1, [sp, #28]
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
 8006d9a:	b223      	sxth	r3, r4
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 8006d9c:	434a      	muls	r2, r1
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
 8006d9e:	0a12      	lsrs	r2, r2, #8
 8006da0:	9202      	str	r2, [sp, #8]
 8006da2:	aa01      	add	r2, sp, #4
 8006da4:	8017      	strh	r7, [r2, #0]
 8006da6:	9a05      	ldr	r2, [sp, #20]
 8006da8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006daa:	b212      	sxth	r2, r2
 8006dac:	9200      	str	r2, [sp, #0]
 8006dae:	0030      	movs	r0, r6
 8006db0:	9a08      	ldr	r2, [sp, #32]
 8006db2:	6975      	ldr	r5, [r6, #20]
 8006db4:	47a8      	blx	r5
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8006db6:	3401      	adds	r4, #1
 8006db8:	e7dc      	b.n	8006d74 <_lv_blend_fill+0x1f4>
                lv_color_fill(disp_buf_first, color, draw_area_w);
 8006dba:	9a08      	ldr	r2, [sp, #32]
 8006dbc:	1c39      	adds	r1, r7, #0
 8006dbe:	9805      	ldr	r0, [sp, #20]
 8006dc0:	f004 feb2 	bl	800bb28 <lv_color_fill>
                disp_buf_first += disp_w;
 8006dc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006dc6:	9b05      	ldr	r3, [sp, #20]
 8006dc8:	4694      	mov	ip, r2
 8006dca:	4463      	add	r3, ip
 8006dcc:	9305      	str	r3, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
 8006dce:	3401      	adds	r4, #1
 8006dd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dd2:	42a3      	cmp	r3, r4
 8006dd4:	dcf1      	bgt.n	8006dba <_lv_blend_fill+0x23a>
 8006dd6:	e79c      	b.n	8006d12 <_lv_blend_fill+0x192>
                    if(last_dest_color.full != disp_buf_first[x].full) {
 8006dd8:	466b      	mov	r3, sp
 8006dda:	8817      	ldrh	r7, [r2, #0]
 8006ddc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006dde:	42bb      	cmp	r3, r7
 8006de0:	d024      	beq.n	8006e2c <_lv_blend_fill+0x2ac>
                        last_dest_color = disp_buf_first[x];
 8006de2:	466b      	mov	r3, sp
 8006de4:	7850      	ldrb	r0, [r2, #1]
 8006de6:	875f      	strh	r7, [r3, #58]	; 0x3a
 8006de8:	9b06      	ldr	r3, [sp, #24]
 8006dea:	08c0      	lsrs	r0, r0, #3
 8006dec:	4358      	muls	r0, r3
 8006dee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006df0:	18c0      	adds	r0, r0, r3
 8006df2:	3080      	adds	r0, #128	; 0x80
 8006df4:	4348      	muls	r0, r1
 8006df6:	0dc0      	lsrs	r0, r0, #23
 8006df8:	4030      	ands	r0, r6
 8006dfa:	900d      	str	r0, [sp, #52]	; 0x34
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8006dfc:	057b      	lsls	r3, r7, #21
 8006dfe:	9806      	ldr	r0, [sp, #24]
 8006e00:	0e9b      	lsrs	r3, r3, #26
 8006e02:	4343      	muls	r3, r0
 8006e04:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006e06:	181b      	adds	r3, r3, r0
 8006e08:	203f      	movs	r0, #63	; 0x3f
 8006e0a:	3380      	adds	r3, #128	; 0x80
 8006e0c:	434b      	muls	r3, r1
 8006e0e:	0ddb      	lsrs	r3, r3, #23
 8006e10:	4018      	ands	r0, r3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8006e12:	7813      	ldrb	r3, [r2, #0]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8006e14:	900c      	str	r0, [sp, #48]	; 0x30
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8006e16:	06db      	lsls	r3, r3, #27
 8006e18:	9806      	ldr	r0, [sp, #24]
 8006e1a:	0edb      	lsrs	r3, r3, #27
 8006e1c:	4343      	muls	r3, r0
 8006e1e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8006e20:	181b      	adds	r3, r3, r0
 8006e22:	3380      	adds	r3, #128	; 0x80
 8006e24:	434b      	muls	r3, r1
 8006e26:	0ddb      	lsrs	r3, r3, #23
 8006e28:	4033      	ands	r3, r6
 8006e2a:	9309      	str	r3, [sp, #36]	; 0x24
#endif
                        {
                            last_res_color = lv_color_mix_premult(color_premult, disp_buf_first[x], opa_inv);
                        }
                    }
                    disp_buf_first[x] = last_res_color;
 8006e2c:	7813      	ldrb	r3, [r2, #0]
 8006e2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e30:	43b3      	bics	r3, r6
 8006e32:	4303      	orrs	r3, r0
 8006e34:	7013      	strb	r3, [r2, #0]
 8006e36:	8817      	ldrh	r7, [r2, #0]
 8006e38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e3a:	485a      	ldr	r0, [pc, #360]	; (8006fa4 <_lv_blend_fill+0x424>)
 8006e3c:	015b      	lsls	r3, r3, #5
 8006e3e:	4038      	ands	r0, r7
 8006e40:	4318      	orrs	r0, r3
 8006e42:	8010      	strh	r0, [r2, #0]
 8006e44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e46:	0a00      	lsrs	r0, r0, #8
 8006e48:	00df      	lsls	r7, r3, #3
 8006e4a:	2307      	movs	r3, #7
 8006e4c:	4018      	ands	r0, r3
 8006e4e:	4307      	orrs	r7, r0
 8006e50:	7057      	strb	r7, [r2, #1]
                for(x = 0; x < draw_area_w; x++) {
 8006e52:	3501      	adds	r5, #1
 8006e54:	3202      	adds	r2, #2
 8006e56:	9b08      	ldr	r3, [sp, #32]
 8006e58:	42ab      	cmp	r3, r5
 8006e5a:	dcbd      	bgt.n	8006dd8 <_lv_blend_fill+0x258>
                }
                disp_buf_first += disp_w;
 8006e5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e5e:	9b05      	ldr	r3, [sp, #20]
 8006e60:	4694      	mov	ip, r2
 8006e62:	4463      	add	r3, ip
 8006e64:	9305      	str	r3, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
 8006e66:	3401      	adds	r4, #1
 8006e68:	e720      	b.n	8006cac <_lv_blend_fill+0x12c>
        last_res_color.full = disp_buf_first[0].full;

        int32_t x_end4 = draw_area_w - 4;

        /*Only the mask matters*/
        if(opa > LV_OPA_MAX) {
 8006e6a:	9b07      	ldr	r3, [sp, #28]
 8006e6c:	2bfd      	cmp	r3, #253	; 0xfd
 8006e6e:	d900      	bls.n	8006e72 <_lv_blend_fill+0x2f2>
 8006e70:	e094      	b.n	8006f9c <_lv_blend_fill+0x41c>
        last_dest_color.full = disp_buf_first[0].full;
 8006e72:	9b05      	ldr	r3, [sp, #20]
                mask += draw_area_w;
            }
        }
        /*Handle opa and mask values too*/
        else {
            lv_opa_t opa_tmp = LV_OPA_TRANSP;
 8006e74:	0034      	movs	r4, r6
        last_dest_color.full = disp_buf_first[0].full;
 8006e76:	881a      	ldrh	r2, [r3, #0]
        lv_opa_t last_mask = LV_OPA_TRANSP;
 8006e78:	960b      	str	r6, [sp, #44]	; 0x2c
        last_res_color.full = disp_buf_first[0].full;
 8006e7a:	0010      	movs	r0, r2
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8006e7c:	ab12      	add	r3, sp, #72	; 0x48
 8006e7e:	2106      	movs	r1, #6
 8006e80:	5e5b      	ldrsh	r3, [r3, r1]
 8006e82:	429d      	cmp	r5, r3
 8006e84:	dd00      	ble.n	8006e88 <_lv_blend_fill+0x308>
 8006e86:	e744      	b.n	8006d12 <_lv_blend_fill+0x192>
                const lv_opa_t * mask_tmp_x = mask;
 8006e88:	9b06      	ldr	r3, [sp, #24]
 8006e8a:	9e05      	ldr	r6, [sp, #20]
 8006e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e8e:	e0a6      	b.n	8006fde <_lv_blend_fill+0x45e>
                    FILL_NORMAL_MASK_PX(x, color)
 8006e90:	8831      	ldrh	r1, [r6, #0]
 8006e92:	1c38      	adds	r0, r7, #0
 8006e94:	f7ff fe44 	bl	8006b20 <lv_color_mix>
 8006e98:	8030      	strh	r0, [r6, #0]
 8006e9a:	e008      	b.n	8006eae <_lv_blend_fill+0x32e>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	421d      	tst	r5, r3
 8006ea0:	d00b      	beq.n	8006eba <_lv_blend_fill+0x33a>
                    FILL_NORMAL_MASK_PX(x, color)
 8006ea2:	782a      	ldrb	r2, [r5, #0]
 8006ea4:	2a00      	cmp	r2, #0
 8006ea6:	d002      	beq.n	8006eae <_lv_blend_fill+0x32e>
 8006ea8:	2aff      	cmp	r2, #255	; 0xff
 8006eaa:	d1f1      	bne.n	8006e90 <_lv_blend_fill+0x310>
 8006eac:	8037      	strh	r7, [r6, #0]
 8006eae:	3501      	adds	r5, #1
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8006eb0:	3401      	adds	r4, #1
 8006eb2:	3602      	adds	r6, #2
 8006eb4:	9b08      	ldr	r3, [sp, #32]
 8006eb6:	42a3      	cmp	r3, r4
 8006eb8:	dcf0      	bgt.n	8006e9c <_lv_blend_fill+0x31c>
 8006eba:	9b05      	ldr	r3, [sp, #20]
 8006ebc:	0066      	lsls	r6, r4, #1
 8006ebe:	199e      	adds	r6, r3, r6
        int32_t x_end4 = draw_area_w - 4;
 8006ec0:	9b08      	ldr	r3, [sp, #32]
 8006ec2:	3b04      	subs	r3, #4
                for(; x <= x_end4; x += 4) {
 8006ec4:	42a3      	cmp	r3, r4
 8006ec6:	da1c      	bge.n	8006f02 <_lv_blend_fill+0x382>
 8006ec8:	9b05      	ldr	r3, [sp, #20]
 8006eca:	0066      	lsls	r6, r4, #1
 8006ecc:	9409      	str	r4, [sp, #36]	; 0x24
 8006ece:	199e      	adds	r6, r3, r6
                for(; x < draw_area_w ; x++) {
 8006ed0:	9b08      	ldr	r3, [sp, #32]
 8006ed2:	42a3      	cmp	r3, r4
 8006ed4:	dc51      	bgt.n	8006f7a <_lv_blend_fill+0x3fa>
                disp_buf_first += disp_w;
 8006ed6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ed8:	9b05      	ldr	r3, [sp, #20]
 8006eda:	4694      	mov	ip, r2
                mask += draw_area_w;
 8006edc:	9a08      	ldr	r2, [sp, #32]
                disp_buf_first += disp_w;
 8006ede:	4463      	add	r3, ip
                mask += draw_area_w;
 8006ee0:	4694      	mov	ip, r2
                disp_buf_first += disp_w;
 8006ee2:	9305      	str	r3, [sp, #20]
                mask += draw_area_w;
 8006ee4:	9b06      	ldr	r3, [sp, #24]
 8006ee6:	4463      	add	r3, ip
 8006ee8:	9306      	str	r3, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
 8006eea:	9b07      	ldr	r3, [sp, #28]
 8006eec:	3301      	adds	r3, #1
 8006eee:	9307      	str	r3, [sp, #28]
 8006ef0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ef2:	9a07      	ldr	r2, [sp, #28]
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	dc00      	bgt.n	8006efa <_lv_blend_fill+0x37a>
 8006ef8:	e70b      	b.n	8006d12 <_lv_blend_fill+0x192>
 8006efa:	9e05      	ldr	r6, [sp, #20]
                const lv_opa_t * mask_tmp_x = mask;
 8006efc:	9d06      	ldr	r5, [sp, #24]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8006efe:	2400      	movs	r4, #0
 8006f00:	e7d8      	b.n	8006eb4 <_lv_blend_fill+0x334>
                    if(*mask32) {
 8006f02:	682b      	ldr	r3, [r5, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d005      	beq.n	8006f14 <_lv_blend_fill+0x394>
                        if((*mask32) == 0xFFFFFFFF) {
 8006f08:	3301      	adds	r3, #1
 8006f0a:	d107      	bne.n	8006f1c <_lv_blend_fill+0x39c>
                            disp_buf_first[x] = color;
 8006f0c:	8037      	strh	r7, [r6, #0]
                            disp_buf_first[x + 1] = color;
 8006f0e:	8077      	strh	r7, [r6, #2]
                            disp_buf_first[x + 2] = color;
 8006f10:	80b7      	strh	r7, [r6, #4]
                            FILL_NORMAL_MASK_PX(x + 3, color)
 8006f12:	80f7      	strh	r7, [r6, #6]
                    mask32++;
 8006f14:	3504      	adds	r5, #4
                for(; x <= x_end4; x += 4) {
 8006f16:	3404      	adds	r4, #4
 8006f18:	3608      	adds	r6, #8
 8006f1a:	e7d1      	b.n	8006ec0 <_lv_blend_fill+0x340>
                            FILL_NORMAL_MASK_PX(x, color)
 8006f1c:	782a      	ldrb	r2, [r5, #0]
 8006f1e:	2a00      	cmp	r2, #0
 8006f20:	d002      	beq.n	8006f28 <_lv_blend_fill+0x3a8>
 8006f22:	2aff      	cmp	r2, #255	; 0xff
 8006f24:	d117      	bne.n	8006f56 <_lv_blend_fill+0x3d6>
 8006f26:	8037      	strh	r7, [r6, #0]
                            FILL_NORMAL_MASK_PX(x + 1, color)
 8006f28:	786a      	ldrb	r2, [r5, #1]
 8006f2a:	2a00      	cmp	r2, #0
 8006f2c:	d002      	beq.n	8006f34 <_lv_blend_fill+0x3b4>
 8006f2e:	2aff      	cmp	r2, #255	; 0xff
 8006f30:	d117      	bne.n	8006f62 <_lv_blend_fill+0x3e2>
 8006f32:	8077      	strh	r7, [r6, #2]
                            FILL_NORMAL_MASK_PX(x + 2, color)
 8006f34:	78aa      	ldrb	r2, [r5, #2]
 8006f36:	2a00      	cmp	r2, #0
 8006f38:	d002      	beq.n	8006f40 <_lv_blend_fill+0x3c0>
 8006f3a:	2aff      	cmp	r2, #255	; 0xff
 8006f3c:	d117      	bne.n	8006f6e <_lv_blend_fill+0x3ee>
 8006f3e:	80b7      	strh	r7, [r6, #4]
                            FILL_NORMAL_MASK_PX(x + 3, color)
 8006f40:	78ea      	ldrb	r2, [r5, #3]
 8006f42:	2a00      	cmp	r2, #0
 8006f44:	d0e6      	beq.n	8006f14 <_lv_blend_fill+0x394>
 8006f46:	2aff      	cmp	r2, #255	; 0xff
 8006f48:	d0e3      	beq.n	8006f12 <_lv_blend_fill+0x392>
 8006f4a:	88f1      	ldrh	r1, [r6, #6]
 8006f4c:	1c38      	adds	r0, r7, #0
 8006f4e:	f7ff fde7 	bl	8006b20 <lv_color_mix>
 8006f52:	80f0      	strh	r0, [r6, #6]
 8006f54:	e7de      	b.n	8006f14 <_lv_blend_fill+0x394>
                            FILL_NORMAL_MASK_PX(x, color)
 8006f56:	8831      	ldrh	r1, [r6, #0]
 8006f58:	1c38      	adds	r0, r7, #0
 8006f5a:	f7ff fde1 	bl	8006b20 <lv_color_mix>
 8006f5e:	8030      	strh	r0, [r6, #0]
 8006f60:	e7e2      	b.n	8006f28 <_lv_blend_fill+0x3a8>
                            FILL_NORMAL_MASK_PX(x + 1, color)
 8006f62:	8871      	ldrh	r1, [r6, #2]
 8006f64:	1c38      	adds	r0, r7, #0
 8006f66:	f7ff fddb 	bl	8006b20 <lv_color_mix>
 8006f6a:	8070      	strh	r0, [r6, #2]
 8006f6c:	e7e2      	b.n	8006f34 <_lv_blend_fill+0x3b4>
                            FILL_NORMAL_MASK_PX(x + 2, color)
 8006f6e:	88b1      	ldrh	r1, [r6, #4]
 8006f70:	1c38      	adds	r0, r7, #0
 8006f72:	f7ff fdd5 	bl	8006b20 <lv_color_mix>
 8006f76:	80b0      	strh	r0, [r6, #4]
 8006f78:	e7e2      	b.n	8006f40 <_lv_blend_fill+0x3c0>
                    FILL_NORMAL_MASK_PX(x, color)
 8006f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f7c:	1aeb      	subs	r3, r5, r3
 8006f7e:	5d1a      	ldrb	r2, [r3, r4]
 8006f80:	2a00      	cmp	r2, #0
 8006f82:	d002      	beq.n	8006f8a <_lv_blend_fill+0x40a>
 8006f84:	2aff      	cmp	r2, #255	; 0xff
 8006f86:	d103      	bne.n	8006f90 <_lv_blend_fill+0x410>
 8006f88:	8037      	strh	r7, [r6, #0]
                for(; x < draw_area_w ; x++) {
 8006f8a:	3401      	adds	r4, #1
 8006f8c:	3602      	adds	r6, #2
 8006f8e:	e79f      	b.n	8006ed0 <_lv_blend_fill+0x350>
                    FILL_NORMAL_MASK_PX(x, color)
 8006f90:	8831      	ldrh	r1, [r6, #0]
 8006f92:	1c38      	adds	r0, r7, #0
 8006f94:	f7ff fdc4 	bl	8006b20 <lv_color_mix>
 8006f98:	8030      	strh	r0, [r6, #0]
 8006f9a:	e7f6      	b.n	8006f8a <_lv_blend_fill+0x40a>
            for(y = 0; y < draw_area_h; y++) {
 8006f9c:	9607      	str	r6, [sp, #28]
 8006f9e:	e7a7      	b.n	8006ef0 <_lv_blend_fill+0x370>
 8006fa0:	00008081 	.word	0x00008081
 8006fa4:	fffff81f 	.word	0xfffff81f
                for(x = 0; x < draw_area_w; x++) {
                    if(*mask_tmp_x) {
 8006fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d012      	beq.n	8006fd6 <_lv_blend_fill+0x456>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
 8006fb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fb2:	428b      	cmp	r3, r1
 8006fb4:	d025      	beq.n	8007002 <_lv_blend_fill+0x482>
 8006fb6:	9c07      	ldr	r4, [sp, #28]
 8006fb8:	2bff      	cmp	r3, #255	; 0xff
 8006fba:	d001      	beq.n	8006fc0 <_lv_blend_fill+0x440>
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
 8006fbc:	435c      	muls	r4, r3
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
 8006fbe:	0a24      	lsrs	r4, r4, #8
                            }
                            else
#endif
                            {
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
                                else last_res_color = lv_color_mix(color, disp_buf_first[x], opa_tmp);
 8006fc0:	0022      	movs	r2, r4
 8006fc2:	8831      	ldrh	r1, [r6, #0]
 8006fc4:	1c38      	adds	r0, r7, #0
 8006fc6:	f7ff fdab 	bl	8006b20 <lv_color_mix>
                            }
                            last_mask = *mask_tmp_x;
 8006fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
                            last_dest_color.full = disp_buf_first[x].full;
 8006fcc:	8832      	ldrh	r2, [r6, #0]
                            last_mask = *mask_tmp_x;
 8006fce:	781b      	ldrb	r3, [r3, #0]
                                else last_res_color = lv_color_mix(color, disp_buf_first[x], opa_tmp);
 8006fd0:	b280      	uxth	r0, r0
                            last_mask = *mask_tmp_x;
 8006fd2:	930b      	str	r3, [sp, #44]	; 0x2c
                        }
                        disp_buf_first[x] = last_res_color;
 8006fd4:	8030      	strh	r0, [r6, #0]
                    }
                    mask_tmp_x++;
 8006fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fd8:	3602      	adds	r6, #2
 8006fda:	3301      	adds	r3, #1
 8006fdc:	9309      	str	r3, [sp, #36]	; 0x24
                for(x = 0; x < draw_area_w; x++) {
 8006fde:	9906      	ldr	r1, [sp, #24]
 8006fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fe2:	1a5b      	subs	r3, r3, r1
 8006fe4:	9908      	ldr	r1, [sp, #32]
 8006fe6:	4299      	cmp	r1, r3
 8006fe8:	dcde      	bgt.n	8006fa8 <_lv_blend_fill+0x428>
                }
                disp_buf_first += disp_w;
 8006fea:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006fec:	9b05      	ldr	r3, [sp, #20]
 8006fee:	468c      	mov	ip, r1
                mask += draw_area_w;
 8006ff0:	9908      	ldr	r1, [sp, #32]
                disp_buf_first += disp_w;
 8006ff2:	4463      	add	r3, ip
                mask += draw_area_w;
 8006ff4:	468c      	mov	ip, r1
                disp_buf_first += disp_w;
 8006ff6:	9305      	str	r3, [sp, #20]
                mask += draw_area_w;
 8006ff8:	9b06      	ldr	r3, [sp, #24]
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8006ffa:	3501      	adds	r5, #1
                mask += draw_area_w;
 8006ffc:	4463      	add	r3, ip
 8006ffe:	9306      	str	r3, [sp, #24]
 8007000:	e73c      	b.n	8006e7c <_lv_blend_fill+0x2fc>
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
 8007002:	8833      	ldrh	r3, [r6, #0]
 8007004:	4293      	cmp	r3, r2
 8007006:	d1db      	bne.n	8006fc0 <_lv_blend_fill+0x440>
 8007008:	e7e4      	b.n	8006fd4 <_lv_blend_fill+0x454>
 800700a:	46c0      	nop			; (mov r8, r8)

0800700c <_lv_blend_map>:
{
 800700c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800700e:	b091      	sub	sp, #68	; 0x44
 8007010:	9306      	str	r3, [sp, #24]
 8007012:	ab16      	add	r3, sp, #88	; 0x58
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	000c      	movs	r4, r1
 8007018:	930c      	str	r3, [sp, #48]	; 0x30
 800701a:	ab17      	add	r3, sp, #92	; 0x5c
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	920d      	str	r2, [sp, #52]	; 0x34
 8007020:	9305      	str	r3, [sp, #20]
 8007022:	ab18      	add	r3, sp, #96	; 0x60
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	9308      	str	r3, [sp, #32]
    if(opa < LV_OPA_MIN) return;
 8007028:	9b05      	ldr	r3, [sp, #20]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d800      	bhi.n	8007030 <_lv_blend_map+0x24>
 800702e:	e0d0      	b.n	80071d2 <_lv_blend_map+0x1c6>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 8007030:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007032:	2b00      	cmp	r3, #0
 8007034:	d100      	bne.n	8007038 <_lv_blend_map+0x2c>
 8007036:	e0cc      	b.n	80071d2 <_lv_blend_map+0x1c6>
    is_common = _lv_area_intersect(&draw_area, clip_area, map_area);
 8007038:	000a      	movs	r2, r1
 800703a:	0001      	movs	r1, r0
 800703c:	a80e      	add	r0, sp, #56	; 0x38
 800703e:	f004 fb04 	bl	800b64a <_lv_area_intersect>
    if(!is_common) return;
 8007042:	2800      	cmp	r0, #0
 8007044:	d100      	bne.n	8007048 <_lv_blend_map+0x3c>
 8007046:	e0c4      	b.n	80071d2 <_lv_blend_map+0x1c6>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8007048:	f7fe feb2 	bl	8005db0 <_lv_refr_get_disp_refreshing>
 800704c:	0005      	movs	r5, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800704e:	f004 fa09 	bl	800b464 <lv_disp_get_buf>
    lv_color_t * disp_buf = vdb->buf_act;
 8007052:	6883      	ldr	r3, [r0, #8]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8007054:	0006      	movs	r6, r0
    lv_color_t * disp_buf = vdb->buf_act;
 8007056:	930b      	str	r3, [sp, #44]	; 0x2c
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
 8007058:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <_lv_blend_map+0x56>
 800705e:	0028      	movs	r0, r5
 8007060:	4798      	blx	r3
    draw_area.x1 -= disp_area->x1;
 8007062:	a90e      	add	r1, sp, #56	; 0x38
 8007064:	880b      	ldrh	r3, [r1, #0]
 8007066:	8a37      	ldrh	r7, [r6, #16]
 8007068:	1bdb      	subs	r3, r3, r7
 800706a:	b29b      	uxth	r3, r3
 800706c:	9304      	str	r3, [sp, #16]
 800706e:	466b      	mov	r3, sp
 8007070:	2210      	movs	r2, #16
 8007072:	5e9b      	ldrsh	r3, [r3, r2]
    draw_area.y1 -= disp_area->y1;
 8007074:	884a      	ldrh	r2, [r1, #2]
    draw_area.x1 -= disp_area->x1;
 8007076:	800b      	strh	r3, [r1, #0]
    draw_area.y1 -= disp_area->y1;
 8007078:	8a70      	ldrh	r0, [r6, #18]
    draw_area.x1 -= disp_area->x1;
 800707a:	469c      	mov	ip, r3
    draw_area.y1 -= disp_area->y1;
 800707c:	1a12      	subs	r2, r2, r0
 800707e:	b293      	uxth	r3, r2
 8007080:	9309      	str	r3, [sp, #36]	; 0x24
 8007082:	466b      	mov	r3, sp
 8007084:	2224      	movs	r2, #36	; 0x24
 8007086:	5e9b      	ldrsh	r3, [r3, r2]
 8007088:	930a      	str	r3, [sp, #40]	; 0x28
    draw_area.y2 -= disp_area->y1;
 800708a:	88ca      	ldrh	r2, [r1, #6]
    draw_area.y1 -= disp_area->y1;
 800708c:	804b      	strh	r3, [r1, #2]
    draw_area.x2 -= disp_area->x1;
 800708e:	888b      	ldrh	r3, [r1, #4]
    draw_area.y2 -= disp_area->y1;
 8007090:	1a12      	subs	r2, r2, r0
    draw_area.x2 -= disp_area->x1;
 8007092:	1bdb      	subs	r3, r3, r7
 8007094:	b29b      	uxth	r3, r3
    draw_area.y2 -= disp_area->y1;
 8007096:	b292      	uxth	r2, r2
    draw_area.x2 -= disp_area->x1;
 8007098:	808b      	strh	r3, [r1, #4]
    draw_area.y2 -= disp_area->y1;
 800709a:	80ca      	strh	r2, [r1, #6]
    if(mask && disp->driver.antialiasing == 0)
 800709c:	9906      	ldr	r1, [sp, #24]
 800709e:	2900      	cmp	r1, #0
 80070a0:	d152      	bne.n	8007148 <_lv_blend_map+0x13c>
    if(disp->driver.set_px_cb) {
 80070a2:	6969      	ldr	r1, [r5, #20]
 80070a4:	2900      	cmp	r1, #0
 80070a6:	d164      	bne.n	8007172 <_lv_blend_map+0x166>
    else if(mode == LV_BLEND_MODE_NORMAL) {
 80070a8:	9908      	ldr	r1, [sp, #32]
 80070aa:	2900      	cmp	r1, #0
 80070ac:	d000      	beq.n	80070b0 <_lv_blend_map+0xa4>
 80070ae:	e090      	b.n	80071d2 <_lv_blend_map+0x1c6>
 80070b0:	9d04      	ldr	r5, [sp, #16]
 80070b2:	3301      	adds	r3, #1
 80070b4:	1b5b      	subs	r3, r3, r5
 80070b6:	b21b      	sxth	r3, r3
 80070b8:	9307      	str	r3, [sp, #28]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80070ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070bc:	3201      	adds	r2, #1
 80070be:	1ad2      	subs	r2, r2, r3

    /*Get the width of the `disp_area` it will be used to go to the next line*/
    int32_t disp_w = lv_area_get_width(disp_area);

    int32_t draw_area_w = lv_area_get_width(draw_area);
    int32_t draw_area_h = lv_area_get_height(draw_area);
 80070c0:	b213      	sxth	r3, r2
    int32_t disp_w = lv_area_get_width(disp_area);
 80070c2:	2110      	movs	r1, #16
 80070c4:	5e70      	ldrsh	r0, [r6, r1]
    int32_t draw_area_h = lv_area_get_height(draw_area);
 80070c6:	9309      	str	r3, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80070c8:	8ab1      	ldrh	r1, [r6, #20]

    /*Get the width of the `mask_area` it will be used to go to the next line*/
    int32_t map_w = lv_area_get_width(map_area);
 80070ca:	2300      	movs	r3, #0
 80070cc:	5ee2      	ldrsh	r2, [r4, r3]
 80070ce:	88a3      	ldrh	r3, [r4, #4]
 80070d0:	3101      	adds	r1, #1
 80070d2:	3301      	adds	r3, #1
 80070d4:	1a09      	subs	r1, r1, r0
 80070d6:	1a9b      	subs	r3, r3, r2
    /*Create a temp. disp_buf which always point to first pixel to draw*/
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;

    /*Create a temp. map_buf which always point to first pixel to draw from the map*/
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 80070d8:	1a10      	subs	r0, r2, r0
 80070da:	4662      	mov	r2, ip
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 80070dc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80070de:	b209      	sxth	r1, r1
 80070e0:	434d      	muls	r5, r1
 80070e2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80070e4:	4465      	add	r5, ip
 80070e6:	006d      	lsls	r5, r5, #1
 80070e8:	197f      	adds	r7, r7, r5
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 80070ea:	2502      	movs	r5, #2
 80070ec:	5f64      	ldrsh	r4, [r4, r5]
 80070ee:	2512      	movs	r5, #18
 80070f0:	5f75      	ldrsh	r5, [r6, r5]
 80070f2:	b21b      	sxth	r3, r3
 80070f4:	1b64      	subs	r4, r4, r5
 80070f6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 80070f8:	1a10      	subs	r0, r2, r0
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 80070fa:	1b2c      	subs	r4, r5, r4
 80070fc:	435c      	muls	r4, r3
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 80070fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007100:	1824      	adds	r4, r4, r0
 8007102:	005b      	lsls	r3, r3, #1
 8007104:	0064      	lsls	r4, r4, #1
 8007106:	1912      	adds	r2, r2, r4
 8007108:	930b      	str	r3, [sp, #44]	; 0x2c

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800710a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 800710c:	9204      	str	r2, [sp, #16]
 800710e:	004a      	lsls	r2, r1, #1
 8007110:	920a      	str	r2, [sp, #40]	; 0x28
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 8007112:	2b01      	cmp	r3, #1
 8007114:	d000      	beq.n	8007118 <_lv_blend_map+0x10c>
 8007116:	e0d1      	b.n	80072bc <_lv_blend_map+0x2b0>
            }
            return;
        }
#endif

        if(opa > LV_OPA_MAX) {
 8007118:	9b05      	ldr	r3, [sp, #20]
 800711a:	2bfd      	cmp	r3, #253	; 0xfd
 800711c:	d800      	bhi.n	8007120 <_lv_blend_map+0x114>
 800711e:	e0cb      	b.n	80072b8 <_lv_blend_map+0x2ac>
            }
#endif

            /*Software rendering*/
            for(y = 0; y < draw_area_h; y++) {
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
 8007120:	9b07      	ldr	r3, [sp, #28]
            for(y = 0; y < draw_area_h; y++) {
 8007122:	9c08      	ldr	r4, [sp, #32]
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
 8007124:	005d      	lsls	r5, r3, #1
            for(y = 0; y < draw_area_h; y++) {
 8007126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007128:	42a3      	cmp	r3, r4
 800712a:	dd52      	ble.n	80071d2 <_lv_blend_map+0x1c6>
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
 800712c:	002a      	movs	r2, r5
 800712e:	0038      	movs	r0, r7
 8007130:	9904      	ldr	r1, [sp, #16]
 8007132:	f004 ff8b 	bl	800c04c <_lv_memcpy>
                disp_buf_first += disp_w;
                map_buf_first += map_w;
 8007136:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                disp_buf_first += disp_w;
 8007138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                map_buf_first += map_w;
 800713a:	4694      	mov	ip, r2
                disp_buf_first += disp_w;
 800713c:	18ff      	adds	r7, r7, r3
                map_buf_first += map_w;
 800713e:	9b04      	ldr	r3, [sp, #16]
            for(y = 0; y < draw_area_h; y++) {
 8007140:	3401      	adds	r4, #1
                map_buf_first += map_w;
 8007142:	4463      	add	r3, ip
 8007144:	9304      	str	r3, [sp, #16]
 8007146:	e7ee      	b.n	8007126 <_lv_blend_map+0x11a>
    if(mask && disp->driver.antialiasing == 0)
 8007148:	7a29      	ldrb	r1, [r5, #8]
 800714a:	07c9      	lsls	r1, r1, #31
 800714c:	d4a9      	bmi.n	80070a2 <_lv_blend_map+0x96>
 800714e:	9804      	ldr	r0, [sp, #16]
 8007150:	1c59      	adds	r1, r3, #1
 8007152:	1a09      	subs	r1, r1, r0
        int32_t mask_w = lv_area_get_width(&draw_area);
 8007154:	b209      	sxth	r1, r1
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 8007156:	9806      	ldr	r0, [sp, #24]
        int32_t mask_w = lv_area_get_width(&draw_area);
 8007158:	9107      	str	r1, [sp, #28]
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 800715a:	9906      	ldr	r1, [sp, #24]
 800715c:	1a47      	subs	r7, r0, r1
 800715e:	9907      	ldr	r1, [sp, #28]
 8007160:	42b9      	cmp	r1, r7
 8007162:	dd9e      	ble.n	80070a2 <_lv_blend_map+0x96>
 8007164:	2180      	movs	r1, #128	; 0x80
 8007166:	7807      	ldrb	r7, [r0, #0]
 8007168:	42b9      	cmp	r1, r7
 800716a:	41bf      	sbcs	r7, r7
 800716c:	7007      	strb	r7, [r0, #0]
 800716e:	3001      	adds	r0, #1
 8007170:	e7f3      	b.n	800715a <_lv_blend_map+0x14e>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8007172:	f7fe fe1d 	bl	8005db0 <_lv_refr_get_disp_refreshing>
    int32_t disp_w = lv_area_get_width(disp_area);
 8007176:	2210      	movs	r2, #16
 8007178:	5eb3      	ldrsh	r3, [r6, r2]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800717a:	0007      	movs	r7, r0
    int32_t disp_w = lv_area_get_width(disp_area);
 800717c:	469c      	mov	ip, r3
 800717e:	4662      	mov	r2, ip
 8007180:	8ab3      	ldrh	r3, [r6, #20]
    int32_t draw_area_w = lv_area_get_width(draw_area);
 8007182:	a80e      	add	r0, sp, #56	; 0x38
 8007184:	3301      	adds	r3, #1
 8007186:	1a9b      	subs	r3, r3, r2
 8007188:	b21b      	sxth	r3, r3
 800718a:	9307      	str	r3, [sp, #28]
 800718c:	2200      	movs	r2, #0
 800718e:	5e83      	ldrsh	r3, [r0, r2]
 8007190:	88a2      	ldrh	r2, [r4, #4]
 8007192:	9308      	str	r3, [sp, #32]
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 8007194:	2302      	movs	r3, #2
 8007196:	5ec5      	ldrsh	r5, [r0, r3]
    int32_t map_w = lv_area_get_width(map_area);
 8007198:	2300      	movs	r3, #0
 800719a:	5ee1      	ldrsh	r1, [r4, r3]
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 800719c:	2302      	movs	r3, #2
 800719e:	5ee3      	ldrsh	r3, [r4, r3]
 80071a0:	2412      	movs	r4, #18
 80071a2:	5f34      	ldrsh	r4, [r6, r4]
 80071a4:	3201      	adds	r2, #1
 80071a6:	1b1c      	subs	r4, r3, r4
    map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 80071a8:	4663      	mov	r3, ip
 80071aa:	1a52      	subs	r2, r2, r1
 80071ac:	b212      	sxth	r2, r2
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 80071ae:	1b2c      	subs	r4, r5, r4
 80071b0:	4354      	muls	r4, r2
    map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 80071b2:	1ac9      	subs	r1, r1, r3
    map_buf_tmp -= draw_area->x1;
 80071b4:	1a64      	subs	r4, r4, r1
 80071b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071b8:	0064      	lsls	r4, r4, #1
 80071ba:	191b      	adds	r3, r3, r4
 80071bc:	9304      	str	r3, [sp, #16]
 80071be:	0053      	lsls	r3, r2, #1
 80071c0:	9309      	str	r3, [sp, #36]	; 0x24
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 80071c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d124      	bne.n	8007212 <_lv_blend_map+0x206>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 80071c8:	ab0e      	add	r3, sp, #56	; 0x38
 80071ca:	2106      	movs	r1, #6
 80071cc:	5e5a      	ldrsh	r2, [r3, r1]
 80071ce:	4295      	cmp	r5, r2
 80071d0:	dd01      	ble.n	80071d6 <_lv_blend_map+0x1ca>
}
 80071d2:	b011      	add	sp, #68	; 0x44
 80071d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 80071d6:	2600      	movs	r6, #0
 80071d8:	5f9e      	ldrsh	r6, [r3, r6]
 80071da:	ab0e      	add	r3, sp, #56	; 0x38
 80071dc:	2204      	movs	r2, #4
 80071de:	5e9b      	ldrsh	r3, [r3, r2]
 80071e0:	429e      	cmp	r6, r3
 80071e2:	dd05      	ble.n	80071f0 <_lv_blend_map+0x1e4>
            map_buf_tmp += map_w;
 80071e4:	9a04      	ldr	r2, [sp, #16]
 80071e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 80071e8:	3501      	adds	r5, #1
            map_buf_tmp += map_w;
 80071ea:	18d3      	adds	r3, r2, r3
 80071ec:	9304      	str	r3, [sp, #16]
 80071ee:	e7eb      	b.n	80071c8 <_lv_blend_map+0x1bc>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
 80071f0:	9a05      	ldr	r2, [sp, #20]
 80071f2:	9804      	ldr	r0, [sp, #16]
 80071f4:	9202      	str	r2, [sp, #8]
 80071f6:	0071      	lsls	r1, r6, #1
 80071f8:	5a09      	ldrh	r1, [r1, r0]
 80071fa:	aa01      	add	r2, sp, #4
 80071fc:	8011      	strh	r1, [r2, #0]
 80071fe:	b22a      	sxth	r2, r5
 8007200:	9200      	str	r2, [sp, #0]
 8007202:	b233      	sxth	r3, r6
 8007204:	9a07      	ldr	r2, [sp, #28]
 8007206:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007208:	0038      	movs	r0, r7
 800720a:	697c      	ldr	r4, [r7, #20]
 800720c:	47a0      	blx	r4
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800720e:	3601      	adds	r6, #1
 8007210:	e7e3      	b.n	80071da <_lv_blend_map+0x1ce>
    int32_t draw_area_w = lv_area_get_width(draw_area);
 8007212:	2204      	movs	r2, #4
 8007214:	5e83      	ldrsh	r3, [r0, r2]
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 8007216:	9a08      	ldr	r2, [sp, #32]
    int32_t draw_area_w = lv_area_get_width(draw_area);
 8007218:	930a      	str	r3, [sp, #40]	; 0x28
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 800721a:	9b06      	ldr	r3, [sp, #24]
 800721c:	1a9b      	subs	r3, r3, r2
 800721e:	9306      	str	r3, [sp, #24]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8007220:	ab0e      	add	r3, sp, #56	; 0x38
 8007222:	2106      	movs	r1, #6
 8007224:	5e5a      	ldrsh	r2, [r3, r1]
 8007226:	4295      	cmp	r5, r2
 8007228:	dcd3      	bgt.n	80071d2 <_lv_blend_map+0x1c6>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800722a:	2600      	movs	r6, #0
 800722c:	5f9e      	ldrsh	r6, [r3, r6]
 800722e:	ab0e      	add	r3, sp, #56	; 0x38
 8007230:	2204      	movs	r2, #4
 8007232:	5e9b      	ldrsh	r3, [r3, r2]
 8007234:	429e      	cmp	r6, r3
 8007236:	dd0d      	ble.n	8007254 <_lv_blend_map+0x248>
 8007238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800723a:	9a08      	ldr	r2, [sp, #32]
 800723c:	3301      	adds	r3, #1
 800723e:	1a9b      	subs	r3, r3, r2
            mask_tmp += draw_area_w;
 8007240:	9a06      	ldr	r2, [sp, #24]
 8007242:	b21b      	sxth	r3, r3
 8007244:	18d3      	adds	r3, r2, r3
 8007246:	9306      	str	r3, [sp, #24]
            map_buf_tmp += map_w;
 8007248:	9a04      	ldr	r2, [sp, #16]
 800724a:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800724c:	3501      	adds	r5, #1
            map_buf_tmp += map_w;
 800724e:	18d3      	adds	r3, r2, r3
 8007250:	9304      	str	r3, [sp, #16]
 8007252:	e7e5      	b.n	8007220 <_lv_blend_map+0x214>
                if(mask_tmp[x]) {
 8007254:	9b06      	ldr	r3, [sp, #24]
 8007256:	5d9a      	ldrb	r2, [r3, r6]
 8007258:	2a00      	cmp	r2, #0
 800725a:	d010      	beq.n	800727e <_lv_blend_map+0x272>
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 800725c:	9905      	ldr	r1, [sp, #20]
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 800725e:	9804      	ldr	r0, [sp, #16]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 8007260:	434a      	muls	r2, r1
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 8007262:	0a12      	lsrs	r2, r2, #8
 8007264:	9202      	str	r2, [sp, #8]
 8007266:	0072      	lsls	r2, r6, #1
 8007268:	5a12      	ldrh	r2, [r2, r0]
 800726a:	a901      	add	r1, sp, #4
 800726c:	800a      	strh	r2, [r1, #0]
 800726e:	b22a      	sxth	r2, r5
 8007270:	9200      	str	r2, [sp, #0]
 8007272:	b233      	sxth	r3, r6
 8007274:	9a07      	ldr	r2, [sp, #28]
 8007276:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007278:	0038      	movs	r0, r7
 800727a:	697c      	ldr	r4, [r7, #20]
 800727c:	47a0      	blx	r4
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800727e:	3601      	adds	r6, #1
 8007280:	e7d5      	b.n	800722e <_lv_blend_map+0x222>
 8007282:	006b      	lsls	r3, r5, #1
                                                &disp_buf_first[x].ch.alpha);
                    }
                    else
#endif
                    {
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
 8007284:	9804      	ldr	r0, [sp, #16]
 8007286:	18fe      	adds	r6, r7, r3
 8007288:	9a05      	ldr	r2, [sp, #20]
 800728a:	8831      	ldrh	r1, [r6, #0]
 800728c:	5ac0      	ldrh	r0, [r0, r3]
 800728e:	f7ff fc47 	bl	8006b20 <lv_color_mix>
                for(x = 0; x < draw_area_w; x++) {
 8007292:	3501      	adds	r5, #1
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
 8007294:	8030      	strh	r0, [r6, #0]
                for(x = 0; x < draw_area_w; x++) {
 8007296:	9b07      	ldr	r3, [sp, #28]
 8007298:	42ab      	cmp	r3, r5
 800729a:	dcf2      	bgt.n	8007282 <_lv_blend_map+0x276>
                    }
                }
                disp_buf_first += disp_w;
                map_buf_first += map_w;
 800729c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                disp_buf_first += disp_w;
 800729e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                map_buf_first += map_w;
 80072a0:	4694      	mov	ip, r2
                disp_buf_first += disp_w;
 80072a2:	18ff      	adds	r7, r7, r3
                map_buf_first += map_w;
 80072a4:	9b04      	ldr	r3, [sp, #16]
            for(y = 0; y < draw_area_h; y++) {
 80072a6:	3401      	adds	r4, #1
                map_buf_first += map_w;
 80072a8:	4463      	add	r3, ip
 80072aa:	9304      	str	r3, [sp, #16]
            for(y = 0; y < draw_area_h; y++) {
 80072ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ae:	42a3      	cmp	r3, r4
 80072b0:	dc00      	bgt.n	80072b4 <_lv_blend_map+0x2a8>
 80072b2:	e78e      	b.n	80071d2 <_lv_blend_map+0x1c6>
                for(x = 0; x < draw_area_w; x++) {
 80072b4:	2500      	movs	r5, #0
 80072b6:	e7ee      	b.n	8007296 <_lv_blend_map+0x28a>
            for(y = 0; y < draw_area_h; y++) {
 80072b8:	9c08      	ldr	r4, [sp, #32]
 80072ba:	e7f7      	b.n	80072ac <_lv_blend_map+0x2a0>
        }
    }
    /*Masked*/
    else {
        /*Only the mask matters*/
        if(opa > LV_OPA_MAX) {
 80072bc:	9b05      	ldr	r3, [sp, #20]
 80072be:	2bfd      	cmp	r3, #253	; 0xfd
 80072c0:	d800      	bhi.n	80072c4 <_lv_blend_map+0x2b8>
 80072c2:	e0ce      	b.n	8007462 <_lv_blend_map+0x456>
            /*Go to the first pixel of the row */

            int32_t x_end4 = draw_area_w - 4;
 80072c4:	9b07      	ldr	r3, [sp, #28]
 80072c6:	3b04      	subs	r3, #4
 80072c8:	930c      	str	r3, [sp, #48]	; 0x30

            for(y = 0; y < draw_area_h; y++) {
 80072ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072cc:	9a08      	ldr	r2, [sp, #32]
 80072ce:	4293      	cmp	r3, r2
 80072d0:	dc00      	bgt.n	80072d4 <_lv_blend_map+0x2c8>
 80072d2:	e77e      	b.n	80071d2 <_lv_blend_map+0x1c6>
                const lv_opa_t * mask_tmp_x = mask;
 80072d4:	9b06      	ldr	r3, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
 80072d6:	003c      	movs	r4, r7
 80072d8:	9d04      	ldr	r5, [sp, #16]
                const lv_opa_t * mask_tmp_x = mask;
 80072da:	9305      	str	r3, [sp, #20]
#if 0
                for(x = 0; x < draw_area_w; x++) {
                    MAP_NORMAL_MASK_PX(x);
                }
#else
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 80072dc:	2600      	movs	r6, #0
 80072de:	e017      	b.n	8007310 <_lv_blend_map+0x304>
#if LV_COLOR_SCREEN_TRANSP
                    MAP_NORMAL_MASK_PX_SCR_TRANSP(x)
#else
                    MAP_NORMAL_MASK_PX(x)
 80072e0:	8821      	ldrh	r1, [r4, #0]
 80072e2:	8828      	ldrh	r0, [r5, #0]
 80072e4:	f7ff fc1c 	bl	8006b20 <lv_color_mix>
 80072e8:	8020      	strh	r0, [r4, #0]
 80072ea:	e00b      	b.n	8007304 <_lv_blend_map+0x2f8>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 80072ec:	2203      	movs	r2, #3
 80072ee:	9b05      	ldr	r3, [sp, #20]
 80072f0:	4213      	tst	r3, r2
 80072f2:	d010      	beq.n	8007316 <_lv_blend_map+0x30a>
                    MAP_NORMAL_MASK_PX(x)
 80072f4:	9b05      	ldr	r3, [sp, #20]
 80072f6:	781a      	ldrb	r2, [r3, #0]
 80072f8:	2a00      	cmp	r2, #0
 80072fa:	d003      	beq.n	8007304 <_lv_blend_map+0x2f8>
 80072fc:	2aff      	cmp	r2, #255	; 0xff
 80072fe:	d1ef      	bne.n	80072e0 <_lv_blend_map+0x2d4>
 8007300:	882b      	ldrh	r3, [r5, #0]
 8007302:	8023      	strh	r3, [r4, #0]
 8007304:	9b05      	ldr	r3, [sp, #20]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8007306:	3601      	adds	r6, #1
                    MAP_NORMAL_MASK_PX(x)
 8007308:	3301      	adds	r3, #1
 800730a:	9305      	str	r3, [sp, #20]
 800730c:	3502      	adds	r5, #2
 800730e:	3402      	adds	r4, #2
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8007310:	9b07      	ldr	r3, [sp, #28]
 8007312:	42b3      	cmp	r3, r6
 8007314:	dcea      	bgt.n	80072ec <_lv_blend_map+0x2e0>
 8007316:	9b04      	ldr	r3, [sp, #16]
 8007318:	0074      	lsls	r4, r6, #1
 800731a:	191d      	adds	r5, r3, r4
 800731c:	193c      	adds	r4, r7, r4
#endif
                }

                uint32_t * mask32 = (uint32_t *) mask_tmp_x;
                for(; x < x_end4; x += 4) {
 800731e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007320:	42b3      	cmp	r3, r6
 8007322:	dc14      	bgt.n	800734e <_lv_blend_map+0x342>
 8007324:	960d      	str	r6, [sp, #52]	; 0x34
 8007326:	0074      	lsls	r4, r6, #1
                    }
                    mask32++;
                }

                mask_tmp_x = (const lv_opa_t *)mask32;
                for(; x < draw_area_w ; x++) {
 8007328:	9b07      	ldr	r3, [sp, #28]
 800732a:	42b3      	cmp	r3, r6
 800732c:	dc5a      	bgt.n	80073e4 <_lv_blend_map+0x3d8>
                    MAP_NORMAL_MASK_PX(x)
#endif
                }
#endif
                disp_buf_first += disp_w;
                mask += draw_area_w;
 800732e:	9a07      	ldr	r2, [sp, #28]
                disp_buf_first += disp_w;
 8007330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                mask += draw_area_w;
 8007332:	4694      	mov	ip, r2
                disp_buf_first += disp_w;
 8007334:	18ff      	adds	r7, r7, r3
                map_buf_first += map_w;
 8007336:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                mask += draw_area_w;
 8007338:	9b06      	ldr	r3, [sp, #24]
 800733a:	4463      	add	r3, ip
                map_buf_first += map_w;
 800733c:	4694      	mov	ip, r2
                mask += draw_area_w;
 800733e:	9306      	str	r3, [sp, #24]
                map_buf_first += map_w;
 8007340:	9b04      	ldr	r3, [sp, #16]
 8007342:	4463      	add	r3, ip
 8007344:	9304      	str	r3, [sp, #16]
            for(y = 0; y < draw_area_h; y++) {
 8007346:	9b08      	ldr	r3, [sp, #32]
 8007348:	3301      	adds	r3, #1
 800734a:	9308      	str	r3, [sp, #32]
 800734c:	e7bd      	b.n	80072ca <_lv_blend_map+0x2be>
                    if(*mask32) {
 800734e:	9b05      	ldr	r3, [sp, #20]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d009      	beq.n	800736a <_lv_blend_map+0x35e>
                        if((*mask32) == 0xFFFFFFFF) {
 8007356:	3301      	adds	r3, #1
 8007358:	d10e      	bne.n	8007378 <_lv_blend_map+0x36c>
                            disp_buf_first[x] = map_buf_first[x];
 800735a:	882b      	ldrh	r3, [r5, #0]
 800735c:	8023      	strh	r3, [r4, #0]
                            disp_buf_first[x + 1] = map_buf_first[x + 1];
 800735e:	886b      	ldrh	r3, [r5, #2]
 8007360:	8063      	strh	r3, [r4, #2]
                            disp_buf_first[x + 2] = map_buf_first[x + 2];
 8007362:	88ab      	ldrh	r3, [r5, #4]
 8007364:	80a3      	strh	r3, [r4, #4]
                            MAP_NORMAL_MASK_PX(x + 3)
 8007366:	88eb      	ldrh	r3, [r5, #6]
 8007368:	80e3      	strh	r3, [r4, #6]
                    mask32++;
 800736a:	9b05      	ldr	r3, [sp, #20]
                for(; x < x_end4; x += 4) {
 800736c:	3604      	adds	r6, #4
                    mask32++;
 800736e:	3304      	adds	r3, #4
 8007370:	9305      	str	r3, [sp, #20]
 8007372:	3508      	adds	r5, #8
 8007374:	3408      	adds	r4, #8
 8007376:	e7d2      	b.n	800731e <_lv_blend_map+0x312>
                            MAP_NORMAL_MASK_PX(x)
 8007378:	9b05      	ldr	r3, [sp, #20]
 800737a:	781a      	ldrb	r2, [r3, #0]
 800737c:	2a00      	cmp	r2, #0
 800737e:	d003      	beq.n	8007388 <_lv_blend_map+0x37c>
 8007380:	2aff      	cmp	r2, #255	; 0xff
 8007382:	d11d      	bne.n	80073c0 <_lv_blend_map+0x3b4>
 8007384:	882b      	ldrh	r3, [r5, #0]
 8007386:	8023      	strh	r3, [r4, #0]
                            MAP_NORMAL_MASK_PX(x + 1)
 8007388:	9b05      	ldr	r3, [sp, #20]
 800738a:	785a      	ldrb	r2, [r3, #1]
 800738c:	2a00      	cmp	r2, #0
 800738e:	d003      	beq.n	8007398 <_lv_blend_map+0x38c>
 8007390:	2aff      	cmp	r2, #255	; 0xff
 8007392:	d11b      	bne.n	80073cc <_lv_blend_map+0x3c0>
 8007394:	886b      	ldrh	r3, [r5, #2]
 8007396:	8063      	strh	r3, [r4, #2]
                            MAP_NORMAL_MASK_PX(x + 2)
 8007398:	9b05      	ldr	r3, [sp, #20]
 800739a:	789a      	ldrb	r2, [r3, #2]
 800739c:	2a00      	cmp	r2, #0
 800739e:	d003      	beq.n	80073a8 <_lv_blend_map+0x39c>
 80073a0:	2aff      	cmp	r2, #255	; 0xff
 80073a2:	d119      	bne.n	80073d8 <_lv_blend_map+0x3cc>
 80073a4:	88ab      	ldrh	r3, [r5, #4]
 80073a6:	80a3      	strh	r3, [r4, #4]
                            MAP_NORMAL_MASK_PX(x + 3)
 80073a8:	9b05      	ldr	r3, [sp, #20]
 80073aa:	78da      	ldrb	r2, [r3, #3]
 80073ac:	2a00      	cmp	r2, #0
 80073ae:	d0dc      	beq.n	800736a <_lv_blend_map+0x35e>
 80073b0:	2aff      	cmp	r2, #255	; 0xff
 80073b2:	d0d8      	beq.n	8007366 <_lv_blend_map+0x35a>
 80073b4:	88e1      	ldrh	r1, [r4, #6]
 80073b6:	88e8      	ldrh	r0, [r5, #6]
 80073b8:	f7ff fbb2 	bl	8006b20 <lv_color_mix>
 80073bc:	80e0      	strh	r0, [r4, #6]
 80073be:	e7d4      	b.n	800736a <_lv_blend_map+0x35e>
                            MAP_NORMAL_MASK_PX(x)
 80073c0:	8821      	ldrh	r1, [r4, #0]
 80073c2:	8828      	ldrh	r0, [r5, #0]
 80073c4:	f7ff fbac 	bl	8006b20 <lv_color_mix>
 80073c8:	8020      	strh	r0, [r4, #0]
 80073ca:	e7dd      	b.n	8007388 <_lv_blend_map+0x37c>
                            MAP_NORMAL_MASK_PX(x + 1)
 80073cc:	8861      	ldrh	r1, [r4, #2]
 80073ce:	8868      	ldrh	r0, [r5, #2]
 80073d0:	f7ff fba6 	bl	8006b20 <lv_color_mix>
 80073d4:	8060      	strh	r0, [r4, #2]
 80073d6:	e7df      	b.n	8007398 <_lv_blend_map+0x38c>
                            MAP_NORMAL_MASK_PX(x + 2)
 80073d8:	88a1      	ldrh	r1, [r4, #4]
 80073da:	88a8      	ldrh	r0, [r5, #4]
 80073dc:	f7ff fba0 	bl	8006b20 <lv_color_mix>
 80073e0:	80a0      	strh	r0, [r4, #4]
 80073e2:	e7e1      	b.n	80073a8 <_lv_blend_map+0x39c>
                    MAP_NORMAL_MASK_PX(x)
 80073e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073e6:	9b05      	ldr	r3, [sp, #20]
 80073e8:	1a9b      	subs	r3, r3, r2
 80073ea:	5d9a      	ldrb	r2, [r3, r6]
 80073ec:	2a00      	cmp	r2, #0
 80073ee:	d007      	beq.n	8007400 <_lv_blend_map+0x3f4>
 80073f0:	9b04      	ldr	r3, [sp, #16]
 80073f2:	193d      	adds	r5, r7, r4
 80073f4:	191b      	adds	r3, r3, r4
 80073f6:	2aff      	cmp	r2, #255	; 0xff
 80073f8:	d105      	bne.n	8007406 <_lv_blend_map+0x3fa>
 80073fa:	9b04      	ldr	r3, [sp, #16]
 80073fc:	5b1b      	ldrh	r3, [r3, r4]
 80073fe:	533b      	strh	r3, [r7, r4]
                for(; x < draw_area_w ; x++) {
 8007400:	3601      	adds	r6, #1
 8007402:	3402      	adds	r4, #2
 8007404:	e790      	b.n	8007328 <_lv_blend_map+0x31c>
                    MAP_NORMAL_MASK_PX(x)
 8007406:	8829      	ldrh	r1, [r5, #0]
 8007408:	8818      	ldrh	r0, [r3, #0]
 800740a:	f7ff fb89 	bl	8006b20 <lv_color_mix>
 800740e:	8028      	strh	r0, [r5, #0]
 8007410:	e7f6      	b.n	8007400 <_lv_blend_map+0x3f4>
        }
        /*Handle opa and mask values too*/
        else {
            for(y = 0; y < draw_area_h; y++) {
                for(x = 0; x < draw_area_w; x++) {
                    if(mask[x]) {
 8007412:	9b06      	ldr	r3, [sp, #24]
 8007414:	5d5b      	ldrb	r3, [r3, r5]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00c      	beq.n	8007434 <_lv_blend_map+0x428>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 800741a:	9a05      	ldr	r2, [sp, #20]
 800741c:	2bfc      	cmp	r3, #252	; 0xfc
 800741e:	d801      	bhi.n	8007424 <_lv_blend_map+0x418>
 8007420:	4353      	muls	r3, r2
 8007422:	0a1a      	lsrs	r2, r3, #8
 8007424:	0068      	lsls	r0, r5, #1
                                                    &disp_buf_first[x].ch.alpha);
                        }
                        else
#endif
                        {
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
 8007426:	9b04      	ldr	r3, [sp, #16]
 8007428:	183e      	adds	r6, r7, r0
 800742a:	8831      	ldrh	r1, [r6, #0]
 800742c:	5a18      	ldrh	r0, [r3, r0]
 800742e:	f7ff fb77 	bl	8006b20 <lv_color_mix>
 8007432:	8030      	strh	r0, [r6, #0]
                for(x = 0; x < draw_area_w; x++) {
 8007434:	3501      	adds	r5, #1
 8007436:	9b07      	ldr	r3, [sp, #28]
 8007438:	42ab      	cmp	r3, r5
 800743a:	dcea      	bgt.n	8007412 <_lv_blend_map+0x406>
                        }
                    }
                }
                disp_buf_first += disp_w;
                mask += draw_area_w;
 800743c:	9a07      	ldr	r2, [sp, #28]
                disp_buf_first += disp_w;
 800743e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                mask += draw_area_w;
 8007440:	4694      	mov	ip, r2
                disp_buf_first += disp_w;
 8007442:	18ff      	adds	r7, r7, r3
                map_buf_first += map_w;
 8007444:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                mask += draw_area_w;
 8007446:	9b06      	ldr	r3, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
 8007448:	3401      	adds	r4, #1
                mask += draw_area_w;
 800744a:	4463      	add	r3, ip
                map_buf_first += map_w;
 800744c:	4694      	mov	ip, r2
                mask += draw_area_w;
 800744e:	9306      	str	r3, [sp, #24]
                map_buf_first += map_w;
 8007450:	9b04      	ldr	r3, [sp, #16]
 8007452:	4463      	add	r3, ip
 8007454:	9304      	str	r3, [sp, #16]
            for(y = 0; y < draw_area_h; y++) {
 8007456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007458:	42a3      	cmp	r3, r4
 800745a:	dc00      	bgt.n	800745e <_lv_blend_map+0x452>
 800745c:	e6b9      	b.n	80071d2 <_lv_blend_map+0x1c6>
                for(x = 0; x < draw_area_w; x++) {
 800745e:	2500      	movs	r5, #0
 8007460:	e7e9      	b.n	8007436 <_lv_blend_map+0x42a>
            for(y = 0; y < draw_area_h; y++) {
 8007462:	9c08      	ldr	r4, [sp, #32]
 8007464:	e7f7      	b.n	8007456 <_lv_blend_map+0x44a>
	...

08007468 <show_error>:
        }
    }
}

static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)
{
 8007468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800746a:	0005      	movs	r5, r0
 800746c:	000e      	movs	r6, r1
 800746e:	b0a1      	sub	sp, #132	; 0x84
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
 8007470:	ac0b      	add	r4, sp, #44	; 0x2c
 8007472:	0020      	movs	r0, r4
{
 8007474:	0017      	movs	r7, r2
    lv_draw_rect_dsc_init(&rect_dsc);
 8007476:	f002 fc1d 	bl	8009cb4 <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = LV_COLOR_WHITE;
 800747a:	4b0a      	ldr	r3, [pc, #40]	; (80074a4 <show_error+0x3c>)
    lv_draw_rect(coords, clip_area, &rect_dsc);
 800747c:	0022      	movs	r2, r4
    rect_dsc.bg_color = LV_COLOR_WHITE;
 800747e:	881b      	ldrh	r3, [r3, #0]
    lv_draw_rect(coords, clip_area, &rect_dsc);
 8007480:	0031      	movs	r1, r6
 8007482:	0028      	movs	r0, r5
    rect_dsc.bg_color = LV_COLOR_WHITE;
 8007484:	8063      	strh	r3, [r4, #2]
    lv_draw_rect(coords, clip_area, &rect_dsc);
 8007486:	f002 fc3d 	bl	8009d04 <lv_draw_rect>

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 800748a:	a802      	add	r0, sp, #8
 800748c:	f000 fbb6 	bl	8007bfc <lv_draw_label_dsc_init>
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
 8007490:	2300      	movs	r3, #0
 8007492:	aa02      	add	r2, sp, #8
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	0031      	movs	r1, r6
 8007498:	003b      	movs	r3, r7
 800749a:	0028      	movs	r0, r5
 800749c:	f000 fbc6 	bl	8007c2c <lv_draw_label>
}
 80074a0:	b021      	add	sp, #132	; 0x84
 80074a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074a4:	0800e082 	.word	0x0800e082

080074a8 <lv_area_copy>:
{
 80074a8:	2300      	movs	r3, #0
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
 80074aa:	5cca      	ldrb	r2, [r1, r3]
 80074ac:	54c2      	strb	r2, [r0, r3]
 80074ae:	3301      	adds	r3, #1
    while(len) {
 80074b0:	2b08      	cmp	r3, #8
 80074b2:	d1fa      	bne.n	80074aa <lv_area_copy+0x2>
}
 80074b4:	4770      	bx	lr
	...

080074b8 <lv_draw_map>:
{
 80074b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074ba:	b0a3      	sub	sp, #140	; 0x8c
 80074bc:	001e      	movs	r6, r3
 80074be:	ab28      	add	r3, sp, #160	; 0xa0
 80074c0:	781b      	ldrb	r3, [r3, #0]
    lv_area_copy(&draw_area, clip_area);
 80074c2:	ac1e      	add	r4, sp, #120	; 0x78
{
 80074c4:	9312      	str	r3, [sp, #72]	; 0x48
 80074c6:	ab29      	add	r3, sp, #164	; 0xa4
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	0005      	movs	r5, r0
    lv_area_copy(&draw_area, clip_area);
 80074cc:	0020      	movs	r0, r4
{
 80074ce:	910c      	str	r1, [sp, #48]	; 0x30
 80074d0:	9208      	str	r2, [sp, #32]
 80074d2:	930d      	str	r3, [sp, #52]	; 0x34
    lv_area_copy(&draw_area, clip_area);
 80074d4:	f7ff ffe8 	bl	80074a8 <lv_area_copy>
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 80074d8:	f7fe fc6a 	bl	8005db0 <_lv_refr_get_disp_refreshing>
 80074dc:	9006      	str	r0, [sp, #24]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80074de:	f003 ffc1 	bl	800b464 <lv_disp_get_buf>
    draw_area.x1 -= disp_area->x1;
 80074e2:	8822      	ldrh	r2, [r4, #0]
 80074e4:	8a03      	ldrh	r3, [r0, #16]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80074e6:	900a      	str	r0, [sp, #40]	; 0x28
    draw_area.x1 -= disp_area->x1;
 80074e8:	1ad2      	subs	r2, r2, r3
 80074ea:	8022      	strh	r2, [r4, #0]
    draw_area.x2 -= disp_area->x1;
 80074ec:	88a2      	ldrh	r2, [r4, #4]
    draw_area.y1 -= disp_area->y1;
 80074ee:	8a40      	ldrh	r0, [r0, #18]
 80074f0:	8861      	ldrh	r1, [r4, #2]
    draw_area.x2 -= disp_area->x1;
 80074f2:	1ad2      	subs	r2, r2, r3
    draw_area.y2 -= disp_area->y1;
 80074f4:	88e3      	ldrh	r3, [r4, #6]
    draw_area.y1 -= disp_area->y1;
 80074f6:	1a09      	subs	r1, r1, r0
    draw_area.y2 -= disp_area->y1;
 80074f8:	1a1b      	subs	r3, r3, r0
    draw_area.y1 -= disp_area->y1;
 80074fa:	8061      	strh	r1, [r4, #2]
    draw_area.x2 -= disp_area->x1;
 80074fc:	80a2      	strh	r2, [r4, #4]
    draw_area.y2 -= disp_area->y1;
 80074fe:	80e3      	strh	r3, [r4, #6]
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 8007500:	f002 fabc 	bl	8009a7c <lv_draw_mask_get_cnt>
 8007504:	900e      	str	r0, [sp, #56]	; 0x38
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
 8007506:	2800      	cmp	r0, #0
 8007508:	d120      	bne.n	800754c <lv_draw_map+0x94>
 800750a:	8873      	ldrh	r3, [r6, #2]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d11d      	bne.n	800754c <lv_draw_map+0x94>
 8007510:	3301      	adds	r3, #1
 8007512:	8932      	ldrh	r2, [r6, #8]
 8007514:	33ff      	adds	r3, #255	; 0xff
 8007516:	429a      	cmp	r2, r3
 8007518:	d118      	bne.n	800754c <lv_draw_map+0x94>
 800751a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800751c:	2b00      	cmp	r3, #0
 800751e:	d115      	bne.n	800754c <lv_draw_map+0x94>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 8007520:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007522:	2b00      	cmp	r3, #0
 8007524:	d000      	beq.n	8007528 <lv_draw_map+0x70>
 8007526:	e089      	b.n	800763c <lv_draw_map+0x184>
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 8007528:	2202      	movs	r2, #2
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 800752a:	7ab3      	ldrb	r3, [r6, #10]
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 800752c:	9207      	str	r2, [sp, #28]
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 800752e:	2b00      	cmp	r3, #0
 8007530:	d111      	bne.n	8007556 <lv_draw_map+0x9e>
        _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, draw_dsc->opa,
 8007532:	7bb2      	ldrb	r2, [r6, #14]
 8007534:	0029      	movs	r1, r5
 8007536:	9202      	str	r2, [sp, #8]
 8007538:	7832      	ldrb	r2, [r6, #0]
 800753a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800753c:	9201      	str	r2, [sp, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	9200      	str	r2, [sp, #0]
 8007542:	9a08      	ldr	r2, [sp, #32]
 8007544:	f7ff fd62 	bl	800700c <_lv_blend_map>
}
 8007548:	b023      	add	sp, #140	; 0x8c
 800754a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 800754c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800754e:	1e5a      	subs	r2, r3, #1
 8007550:	4193      	sbcs	r3, r2
 8007552:	3302      	adds	r3, #2
 8007554:	9307      	str	r3, [sp, #28]
        int32_t map_w = lv_area_get_width(map_area);
 8007556:	2300      	movs	r3, #0
 8007558:	5eea      	ldrsh	r2, [r5, r3]
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
 800755a:	ac1e      	add	r4, sp, #120	; 0x78
        int32_t map_w = lv_area_get_width(map_area);
 800755c:	4694      	mov	ip, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800755e:	4663      	mov	r3, ip
 8007560:	88aa      	ldrh	r2, [r5, #4]
 8007562:	3201      	adds	r2, #1
 8007564:	1ad2      	subs	r2, r2, r3
 8007566:	b212      	sxth	r2, r2
 8007568:	920f      	str	r2, [sp, #60]	; 0x3c
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
 800756a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800756c:	2302      	movs	r3, #2
 800756e:	5eed      	ldrsh	r5, [r5, r3]
 8007570:	2312      	movs	r3, #18
 8007572:	5ed1      	ldrsh	r1, [r2, r3]
 8007574:	2302      	movs	r3, #2
 8007576:	5ee0      	ldrsh	r0, [r4, r3]
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 8007578:	2300      	movs	r3, #0
 800757a:	5ee7      	ldrsh	r7, [r4, r3]
 800757c:	2310      	movs	r3, #16
 800757e:	5ed2      	ldrsh	r2, [r2, r3]
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
 8007580:	1a6d      	subs	r5, r5, r1
 8007582:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007584:	1b45      	subs	r5, r0, r5
 8007586:	435d      	muls	r5, r3
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 8007588:	4663      	mov	r3, ip
 800758a:	1a9b      	subs	r3, r3, r2
 800758c:	1afb      	subs	r3, r7, r3
 800758e:	195b      	adds	r3, r3, r5
 8007590:	9d07      	ldr	r5, [sp, #28]
        blend_area.x1 = draw_area.x1 + disp_area->x1;
 8007592:	b2bf      	uxth	r7, r7
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 8007594:	436b      	muls	r3, r5
 8007596:	9d08      	ldr	r5, [sp, #32]
        blend_area.x1 = draw_area.x1 + disp_area->x1;
 8007598:	18ba      	adds	r2, r7, r2
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 800759a:	18eb      	adds	r3, r5, r3
 800759c:	9309      	str	r3, [sp, #36]	; 0x24
 800759e:	88a3      	ldrh	r3, [r4, #4]
        blend_area.x1 = draw_area.x1 + disp_area->x1;
 80075a0:	b292      	uxth	r2, r2
 80075a2:	3301      	adds	r3, #1
 80075a4:	1bdf      	subs	r7, r3, r7
 80075a6:	b2bf      	uxth	r7, r7
 80075a8:	b23b      	sxth	r3, r7
 80075aa:	930b      	str	r3, [sp, #44]	; 0x2c
        blend_area.y1 = disp_area->y1 + draw_area.y1;
 80075ac:	b283      	uxth	r3, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80075ae:	88e0      	ldrh	r0, [r4, #6]
 80075b0:	1859      	adds	r1, r3, r1
 80075b2:	3001      	adds	r0, #1
 80075b4:	1ac0      	subs	r0, r0, r3
 80075b6:	b203      	sxth	r3, r0
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
 80075b8:	3f01      	subs	r7, #1
 80075ba:	9317      	str	r3, [sp, #92]	; 0x5c
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
 80075bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        blend_area.x1 = draw_area.x1 + disp_area->x1;
 80075be:	ad20      	add	r5, sp, #128	; 0x80
        blend_area.y1 = disp_area->y1 + draw_area.y1;
 80075c0:	b209      	sxth	r1, r1
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
 80075c2:	19d7      	adds	r7, r2, r7
        blend_area.x1 = draw_area.x1 + disp_area->x1;
 80075c4:	802a      	strh	r2, [r5, #0]
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
 80075c6:	80af      	strh	r7, [r5, #4]
        blend_area.y1 = disp_area->y1 + draw_area.y1;
 80075c8:	8069      	strh	r1, [r5, #2]
        blend_area.y2 = blend_area.y1;
 80075ca:	80e9      	strh	r1, [r5, #6]
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d000      	beq.n	80075d2 <lv_draw_map+0x11a>
 80075d0:	e09a      	b.n	8007708 <lv_draw_map+0x250>
 80075d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d000      	beq.n	80075da <lv_draw_map+0x122>
 80075d8:	e096      	b.n	8007708 <lv_draw_map+0x250>
 80075da:	7ab3      	ldrb	r3, [r6, #10]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d000      	beq.n	80075e2 <lv_draw_map+0x12a>
 80075e0:	e092      	b.n	8007708 <lv_draw_map+0x250>
 80075e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d100      	bne.n	80075ea <lv_draw_map+0x132>
 80075e8:	e08e      	b.n	8007708 <lv_draw_map+0x250>
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
 80075ea:	9806      	ldr	r0, [sp, #24]
 80075ec:	f003 fec8 	bl	800b380 <lv_disp_get_hor_res>
 80075f0:	0005      	movs	r5, r0
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
 80075f2:	0020      	movs	r0, r4
 80075f4:	f004 f81b 	bl	800b62e <lv_area_get_size>
 80075f8:	42a8      	cmp	r0, r5
 80075fa:	d803      	bhi.n	8007604 <lv_draw_map+0x14c>
 80075fc:	0020      	movs	r0, r4
 80075fe:	f004 f816 	bl	800b62e <lv_area_get_size>
 8007602:	0005      	movs	r5, r0
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 8007604:	0068      	lsls	r0, r5, #1
 8007606:	f004 fdd9 	bl	800c1bc <_lv_mem_buf_get>
 800760a:	0007      	movs	r7, r0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800760c:	0028      	movs	r0, r5
 800760e:	f004 fdd5 	bl	800c1bc <_lv_mem_buf_get>
                map_buf_tmp += map_w * px_size_byte;
 8007612:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007614:	9a07      	ldr	r2, [sp, #28]
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 8007616:	9008      	str	r0, [sp, #32]
                map_buf_tmp += map_w * px_size_byte;
 8007618:	4353      	muls	r3, r2
 800761a:	930d      	str	r3, [sp, #52]	; 0x34
            for(y = 0; y < draw_area_h; y++) {
 800761c:	2300      	movs	r3, #0
 800761e:	930a      	str	r3, [sp, #40]	; 0x28
 8007620:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007622:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007624:	428a      	cmp	r2, r1
 8007626:	dd54      	ble.n	80076d2 <lv_draw_map+0x21a>
 8007628:	005a      	lsls	r2, r3, #1
 800762a:	18ba      	adds	r2, r7, r2
 800762c:	920e      	str	r2, [sp, #56]	; 0x38
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800762e:	2200      	movs	r2, #0
 8007630:	9206      	str	r2, [sp, #24]
                    mask_buf[px_i] = px_opa;
 8007632:	9a08      	ldr	r2, [sp, #32]
                map_px = map_buf_tmp;
 8007634:	9909      	ldr	r1, [sp, #36]	; 0x24
                    mask_buf[px_i] = px_opa;
 8007636:	18d2      	adds	r2, r2, r3
 8007638:	920f      	str	r2, [sp, #60]	; 0x3c
 800763a:	e015      	b.n	8007668 <lv_draw_map+0x1b0>
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 800763c:	2303      	movs	r3, #3
 800763e:	e789      	b.n	8007554 <lv_draw_map+0x9c>
                    lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8007640:	7888      	ldrb	r0, [r1, #2]
                    mask_buf[px_i] = px_opa;
 8007642:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8007644:	9a06      	ldr	r2, [sp, #24]
 8007646:	54a0      	strb	r0, [r4, r2]
                    if(px_opa) {
 8007648:	2800      	cmp	r0, #0
 800764a:	d008      	beq.n	800765e <lv_draw_map+0x1a6>
                        map2[px_i].full =  map_px[0] + (map_px[1] << 8);
 800764c:	7848      	ldrb	r0, [r1, #1]
 800764e:	0054      	lsls	r4, r2, #1
 8007650:	0202      	lsls	r2, r0, #8
 8007652:	7808      	ldrb	r0, [r1, #0]
 8007654:	4684      	mov	ip, r0
 8007656:	4462      	add	r2, ip
 8007658:	0010      	movs	r0, r2
 800765a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800765c:	5310      	strh	r0, [r2, r4]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800765e:	9a06      	ldr	r2, [sp, #24]
 8007660:	3201      	adds	r2, #1
 8007662:	9206      	str	r2, [sp, #24]
 8007664:	9a07      	ldr	r2, [sp, #28]
 8007666:	1889      	adds	r1, r1, r2
 8007668:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800766a:	9806      	ldr	r0, [sp, #24]
 800766c:	4282      	cmp	r2, r0
 800766e:	dce7      	bgt.n	8007640 <lv_draw_map+0x188>
 8007670:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007672:	aa02      	add	r2, sp, #8
 8007674:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8007676:	2900      	cmp	r1, #0
 8007678:	da00      	bge.n	800767c <lv_draw_map+0x1c4>
 800767a:	2200      	movs	r2, #0
                map_buf_tmp += map_w * px_size_byte;
 800767c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800767e:	b212      	sxth	r2, r2
 8007680:	468c      	mov	ip, r1
 8007682:	189b      	adds	r3, r3, r2
 8007684:	9a09      	ldr	r2, [sp, #36]	; 0x24
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 8007686:	a91e      	add	r1, sp, #120	; 0x78
                map_buf_tmp += map_w * px_size_byte;
 8007688:	4462      	add	r2, ip
 800768a:	9209      	str	r2, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800768c:	888a      	ldrh	r2, [r1, #4]
 800768e:	8809      	ldrh	r1, [r1, #0]
 8007690:	3201      	adds	r2, #1
 8007692:	1a52      	subs	r2, r2, r1
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 8007694:	b212      	sxth	r2, r2
 8007696:	18d2      	adds	r2, r2, r3
 8007698:	ac20      	add	r4, sp, #128	; 0x80
 800769a:	42aa      	cmp	r2, r5
 800769c:	d206      	bcs.n	80076ac <lv_draw_map+0x1f4>
                    blend_area.y2 ++;
 800769e:	88e2      	ldrh	r2, [r4, #6]
 80076a0:	3201      	adds	r2, #1
 80076a2:	80e2      	strh	r2, [r4, #6]
            for(y = 0; y < draw_area_h; y++) {
 80076a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076a6:	3201      	adds	r2, #1
 80076a8:	920a      	str	r2, [sp, #40]	; 0x28
 80076aa:	e7b9      	b.n	8007620 <lv_draw_map+0x168>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
 80076ac:	7bb3      	ldrb	r3, [r6, #14]
 80076ae:	003a      	movs	r2, r7
 80076b0:	9302      	str	r3, [sp, #8]
 80076b2:	7833      	ldrb	r3, [r6, #0]
 80076b4:	0021      	movs	r1, r4
 80076b6:	9301      	str	r3, [sp, #4]
 80076b8:	2302      	movs	r3, #2
 80076ba:	980c      	ldr	r0, [sp, #48]	; 0x30
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	9b08      	ldr	r3, [sp, #32]
 80076c0:	f7ff fca4 	bl	800700c <_lv_blend_map>
                    blend_area.y1 = blend_area.y2 + 1;
 80076c4:	88e3      	ldrh	r3, [r4, #6]
 80076c6:	3301      	adds	r3, #1
 80076c8:	b21b      	sxth	r3, r3
 80076ca:	8063      	strh	r3, [r4, #2]
                    blend_area.y2 = blend_area.y1;
 80076cc:	80e3      	strh	r3, [r4, #6]
                    px_i = 0;
 80076ce:	2300      	movs	r3, #0
 80076d0:	e7e8      	b.n	80076a4 <lv_draw_map+0x1ec>
            if(blend_area.y1 != blend_area.y2) {
 80076d2:	a920      	add	r1, sp, #128	; 0x80
 80076d4:	2206      	movs	r2, #6
 80076d6:	5e8b      	ldrsh	r3, [r1, r2]
 80076d8:	2002      	movs	r0, #2
 80076da:	5e0a      	ldrsh	r2, [r1, r0]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d00c      	beq.n	80076fa <lv_draw_map+0x242>
                blend_area.y2--;
 80076e0:	3b01      	subs	r3, #1
 80076e2:	80cb      	strh	r3, [r1, #6]
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
 80076e4:	7bb3      	ldrb	r3, [r6, #14]
 80076e6:	003a      	movs	r2, r7
 80076e8:	9302      	str	r3, [sp, #8]
 80076ea:	7833      	ldrb	r3, [r6, #0]
 80076ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80076ee:	9301      	str	r3, [sp, #4]
 80076f0:	2302      	movs	r3, #2
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	9b08      	ldr	r3, [sp, #32]
 80076f6:	f7ff fc89 	bl	800700c <_lv_blend_map>
            _lv_mem_buf_release(mask_buf);
 80076fa:	9808      	ldr	r0, [sp, #32]
 80076fc:	f004 fc66 	bl	800bfcc <_lv_mem_buf_release>
            _lv_mem_buf_release(map2);
 8007700:	0038      	movs	r0, r7
            _lv_mem_buf_release(map2);
 8007702:	f004 fc63 	bl	800bfcc <_lv_mem_buf_release>
}
 8007706:	e71f      	b.n	8007548 <lv_draw_map+0x90>
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
 8007708:	9806      	ldr	r0, [sp, #24]
 800770a:	f003 fe39 	bl	800b380 <lv_disp_get_hor_res>
 800770e:	9008      	str	r0, [sp, #32]
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
 8007710:	a81e      	add	r0, sp, #120	; 0x78
 8007712:	f003 ff8c 	bl	800b62e <lv_area_get_size>
 8007716:	9b08      	ldr	r3, [sp, #32]
 8007718:	4298      	cmp	r0, r3
 800771a:	d803      	bhi.n	8007724 <lv_draw_map+0x26c>
 800771c:	a81e      	add	r0, sp, #120	; 0x78
 800771e:	f003 ff86 	bl	800b62e <lv_area_get_size>
 8007722:	9008      	str	r0, [sp, #32]
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 8007724:	9b08      	ldr	r3, [sp, #32]
 8007726:	0058      	lsls	r0, r3, #1
 8007728:	f004 fd48 	bl	800c1bc <_lv_mem_buf_get>
 800772c:	9010      	str	r0, [sp, #64]	; 0x40
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800772e:	9808      	ldr	r0, [sp, #32]
 8007730:	f004 fd44 	bl	800c1bc <_lv_mem_buf_get>
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
 8007734:	7ab3      	ldrb	r3, [r6, #10]
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 8007736:	0007      	movs	r7, r0
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
 8007738:	43da      	mvns	r2, r3
 800773a:	b2d2      	uxtb	r2, r2
 800773c:	9213      	str	r2, [sp, #76]	; 0x4c
            if(draw_dsc->recolor_opa != 0) {
 800773e:	2b00      	cmp	r3, #0
 8007740:	d042      	beq.n	80077c8 <lv_draw_map+0x310>
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
 8007742:	7b72      	ldrb	r2, [r6, #13]
 8007744:	b29b      	uxth	r3, r3
 8007746:	08d2      	lsrs	r2, r2, #3
 8007748:	435a      	muls	r2, r3
 800774a:	9215      	str	r2, [sp, #84]	; 0x54
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 800774c:	89b2      	ldrh	r2, [r6, #12]
 800774e:	0552      	lsls	r2, r2, #21
 8007750:	0e92      	lsrs	r2, r2, #26
 8007752:	435a      	muls	r2, r3
 8007754:	9218      	str	r2, [sp, #96]	; 0x60
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 8007756:	7b32      	ldrb	r2, [r6, #12]
 8007758:	06d2      	lsls	r2, r2, #27
 800775a:	0ed2      	lsrs	r2, r2, #27
 800775c:	435a      	muls	r2, r3
 800775e:	9211      	str	r2, [sp, #68]	; 0x44
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 8007760:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007762:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007764:	4313      	orrs	r3, r2
 8007766:	9316      	str	r3, [sp, #88]	; 0x58
 8007768:	2302      	movs	r3, #2
 800776a:	9306      	str	r3, [sp, #24]
 800776c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800776e:	2b00      	cmp	r3, #0
 8007770:	d109      	bne.n	8007786 <lv_draw_map+0x2ce>
 8007772:	8873      	ldrh	r3, [r6, #2]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d106      	bne.n	8007786 <lv_draw_map+0x2ce>
 8007778:	8933      	ldrh	r3, [r6, #8]
 800777a:	3b01      	subs	r3, #1
 800777c:	3bff      	subs	r3, #255	; 0xff
 800777e:	1e5a      	subs	r2, r3, #1
 8007780:	4193      	sbcs	r3, r2
 8007782:	3301      	adds	r3, #1
 8007784:	9306      	str	r3, [sp, #24]
            if(other_mask_cnt) {
 8007786:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <lv_draw_map+0x2dc>
                _lv_memset_ff(mask_buf, mask_buf_size);
 800778c:	9908      	ldr	r1, [sp, #32]
 800778e:	0038      	movs	r0, r7
 8007790:	f004 fdc6 	bl	800c320 <_lv_memset_ff>
                map_buf_tmp += map_w * px_size_byte;
 8007794:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007796:	9a07      	ldr	r2, [sp, #28]
 8007798:	4353      	muls	r3, r2
 800779a:	9319      	str	r3, [sp, #100]	; 0x64
 800779c:	2300      	movs	r3, #0
 800779e:	0018      	movs	r0, r3
 80077a0:	930f      	str	r3, [sp, #60]	; 0x3c
            for(y = 0; y < draw_area_h; y++) {
 80077a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077a6:	4293      	cmp	r3, r2
 80077a8:	dc00      	bgt.n	80077ac <lv_draw_map+0x2f4>
 80077aa:	e0e7      	b.n	800797c <lv_draw_map+0x4c4>
                            if(c.full == chroma_keyed_color.full) {
 80077ac:	23fc      	movs	r3, #252	; 0xfc
 80077ae:	00db      	lsls	r3, r3, #3
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80077b4:	931a      	str	r3, [sp, #104]	; 0x68
 80077b6:	0043      	lsls	r3, r0, #1
 80077b8:	18d3      	adds	r3, r2, r3
 80077ba:	931c      	str	r3, [sp, #112]	; 0x70
                map_px = map_buf_tmp;
 80077bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 80077be:	2500      	movs	r5, #0
                map_px = map_buf_tmp;
 80077c0:	469c      	mov	ip, r3
 80077c2:	183b      	adds	r3, r7, r0
 80077c4:	9314      	str	r3, [sp, #80]	; 0x50
 80077c6:	e00f      	b.n	80077e8 <lv_draw_map+0x330>
            uint16_t recolor_premult[3] = {0};
 80077c8:	9311      	str	r3, [sp, #68]	; 0x44
 80077ca:	9318      	str	r3, [sp, #96]	; 0x60
 80077cc:	9315      	str	r3, [sp, #84]	; 0x54
 80077ce:	e7c7      	b.n	8007760 <lv_draw_map+0x2a8>
                        if(alpha_byte) {
 80077d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d050      	beq.n	8007878 <lv_draw_map+0x3c0>
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 80077d6:	4663      	mov	r3, ip
                            mask_buf[px_i] = px_opa;
 80077d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 80077da:	789b      	ldrb	r3, [r3, #2]
                            mask_buf[px_i] = px_opa;
 80077dc:	5553      	strb	r3, [r2, r5]
                            if(px_opa == 0) {
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d14d      	bne.n	800787e <lv_draw_map+0x3c6>
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 80077e2:	9b07      	ldr	r3, [sp, #28]
 80077e4:	3501      	adds	r5, #1
 80077e6:	449c      	add	ip, r3
 80077e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077ea:	42ab      	cmp	r3, r5
 80077ec:	dcf0      	bgt.n	80077d0 <lv_draw_map+0x318>
 80077ee:	ab02      	add	r3, sp, #8
 80077f0:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
 80077f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	da00      	bge.n	80077fa <lv_draw_map+0x342>
 80077f8:	2400      	movs	r4, #0
                if(other_mask_cnt) {
 80077fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077fc:	b224      	sxth	r4, r4
 80077fe:	1824      	adds	r4, r4, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d021      	beq.n	8007848 <lv_draw_map+0x390>
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + vdb->area.x1, y + draw_area.y1 + vdb->area.y1,
 8007804:	183b      	adds	r3, r7, r0
 8007806:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007808:	9314      	str	r3, [sp, #80]	; 0x50
 800780a:	ad1e      	add	r5, sp, #120	; 0x78
 800780c:	8a40      	ldrh	r0, [r0, #18]
 800780e:	886a      	ldrh	r2, [r5, #2]
 8007810:	88ab      	ldrh	r3, [r5, #4]
 8007812:	1812      	adds	r2, r2, r0
 8007814:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007816:	8829      	ldrh	r1, [r5, #0]
 8007818:	1812      	adds	r2, r2, r0
 800781a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800781c:	3301      	adds	r3, #1
 800781e:	8a00      	ldrh	r0, [r0, #16]
 8007820:	1a5b      	subs	r3, r3, r1
 8007822:	1809      	adds	r1, r1, r0
 8007824:	b21b      	sxth	r3, r3
 8007826:	b212      	sxth	r2, r2
 8007828:	b209      	sxth	r1, r1
 800782a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800782c:	f002 f8e4 	bl	80099f8 <lv_draw_mask_apply>
                    if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
 8007830:	2800      	cmp	r0, #0
 8007832:	d175      	bne.n	8007920 <lv_draw_map+0x468>
 8007834:	88a9      	ldrh	r1, [r5, #4]
 8007836:	882b      	ldrh	r3, [r5, #0]
 8007838:	3101      	adds	r1, #1
 800783a:	1ac9      	subs	r1, r1, r3
                        _lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
 800783c:	b209      	sxth	r1, r1
 800783e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007840:	f004 fd44 	bl	800c2cc <_lv_memset_00>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
 8007844:	2302      	movs	r3, #2
 8007846:	9306      	str	r3, [sp, #24]
                map_buf_tmp += map_w * px_size_byte;
 8007848:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800784a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800784c:	4694      	mov	ip, r2
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 800784e:	aa1e      	add	r2, sp, #120	; 0x78
                map_buf_tmp += map_w * px_size_byte;
 8007850:	4463      	add	r3, ip
 8007852:	9309      	str	r3, [sp, #36]	; 0x24
 8007854:	8893      	ldrh	r3, [r2, #4]
 8007856:	8812      	ldrh	r2, [r2, #0]
 8007858:	3301      	adds	r3, #1
 800785a:	1a9b      	subs	r3, r3, r2
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 800785c:	b21b      	sxth	r3, r3
 800785e:	9a08      	ldr	r2, [sp, #32]
 8007860:	191b      	adds	r3, r3, r4
 8007862:	ad20      	add	r5, sp, #128	; 0x80
 8007864:	4293      	cmp	r3, r2
 8007866:	d25f      	bcs.n	8007928 <lv_draw_map+0x470>
                    blend_area.y2 ++;
 8007868:	88eb      	ldrh	r3, [r5, #6]
 800786a:	3301      	adds	r3, #1
 800786c:	80eb      	strh	r3, [r5, #6]
            for(y = 0; y < draw_area_h; y++) {
 800786e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007870:	0020      	movs	r0, r4
 8007872:	3301      	adds	r3, #1
 8007874:	930f      	str	r3, [sp, #60]	; 0x3c
 8007876:	e794      	b.n	80077a2 <lv_draw_map+0x2ea>
                            mask_buf[px_i] = 0xFF;
 8007878:	22ff      	movs	r2, #255	; 0xff
 800787a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800787c:	555a      	strb	r2, [r3, r5]
                        c.full =  map_px[0] + (map_px[1] << 8);
 800787e:	4663      	mov	r3, ip
 8007880:	785a      	ldrb	r2, [r3, #1]
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	0212      	lsls	r2, r2, #8
 8007886:	189b      	adds	r3, r3, r2
                        if(chroma_key) {
 8007888:	9a12      	ldr	r2, [sp, #72]	; 0x48
                        c.full =  map_px[0] + (map_px[1] << 8);
 800788a:	b29b      	uxth	r3, r3
                        if(chroma_key) {
 800788c:	2a00      	cmp	r2, #0
 800788e:	d006      	beq.n	800789e <lv_draw_map+0x3e6>
                            if(c.full == chroma_keyed_color.full) {
 8007890:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007892:	4293      	cmp	r3, r2
 8007894:	d103      	bne.n	800789e <lv_draw_map+0x3e6>
                                mask_buf[px_i] = LV_OPA_TRANSP;
 8007896:	2300      	movs	r3, #0
 8007898:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800789a:	5553      	strb	r3, [r2, r5]
                                continue;
 800789c:	e7a1      	b.n	80077e2 <lv_draw_map+0x32a>
                    if(draw_dsc->recolor_opa != 0) {
 800789e:	7ab2      	ldrb	r2, [r6, #10]
 80078a0:	2a00      	cmp	r2, #0
 80078a2:	d039      	beq.n	8007918 <lv_draw_map+0x460>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80078a4:	211f      	movs	r1, #31
 80078a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80078a8:	0adc      	lsrs	r4, r3, #11
 80078aa:	4354      	muls	r4, r2
 80078ac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80078ae:	18a4      	adds	r4, r4, r2
 80078b0:	4a3f      	ldr	r2, [pc, #252]	; (80079b0 <lv_draw_map+0x4f8>)
 80078b2:	3480      	adds	r4, #128	; 0x80
 80078b4:	4354      	muls	r4, r2
 80078b6:	0de4      	lsrs	r4, r4, #23
 80078b8:	400c      	ands	r4, r1
 80078ba:	941b      	str	r4, [sp, #108]	; 0x6c
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80078bc:	0559      	lsls	r1, r3, #21
 80078be:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80078c0:	0e89      	lsrs	r1, r1, #26
 80078c2:	4361      	muls	r1, r4
 80078c4:	9c18      	ldr	r4, [sp, #96]	; 0x60
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80078c6:	06db      	lsls	r3, r3, #27
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80078c8:	1909      	adds	r1, r1, r4
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80078ca:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80078cc:	0edb      	lsrs	r3, r3, #27
 80078ce:	4363      	muls	r3, r4
 80078d0:	9c11      	ldr	r4, [sp, #68]	; 0x44
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80078d2:	3180      	adds	r1, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80078d4:	191b      	adds	r3, r3, r4
 80078d6:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80078d8:	4351      	muls	r1, r2
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80078da:	435a      	muls	r2, r3
 80078dc:	231f      	movs	r3, #31
 80078de:	0dd2      	lsrs	r2, r2, #23
 80078e0:	401a      	ands	r2, r3
 80078e2:	9305      	str	r3, [sp, #20]
 80078e4:	ac02      	add	r4, sp, #8
 80078e6:	334d      	adds	r3, #77	; 0x4d
 80078e8:	18e4      	adds	r4, r4, r3
 80078ea:	8824      	ldrh	r4, [r4, #0]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80078ec:	0dc9      	lsrs	r1, r1, #23
 80078ee:	1c23      	adds	r3, r4, #0
 80078f0:	001c      	movs	r4, r3
 80078f2:	231f      	movs	r3, #31
 80078f4:	439c      	bics	r4, r3
 80078f6:	233f      	movs	r3, #63	; 0x3f
 80078f8:	4019      	ands	r1, r3
 80078fa:	4b2e      	ldr	r3, [pc, #184]	; (80079b4 <lv_draw_map+0x4fc>)
 80078fc:	4322      	orrs	r2, r4
 80078fe:	401a      	ands	r2, r3
 8007900:	0149      	lsls	r1, r1, #5
 8007902:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007904:	430a      	orrs	r2, r1
 8007906:	0552      	lsls	r2, r2, #21
 8007908:	02dc      	lsls	r4, r3, #11
 800790a:	0d52      	lsrs	r2, r2, #21
 800790c:	4314      	orrs	r4, r2
 800790e:	226c      	movs	r2, #108	; 0x6c
 8007910:	ab02      	add	r3, sp, #8
 8007912:	189b      	adds	r3, r3, r2
 8007914:	801c      	strh	r4, [r3, #0]
 8007916:	b2a3      	uxth	r3, r4
                    map2[px_i].full = c.full;
 8007918:	991c      	ldr	r1, [sp, #112]	; 0x70
 800791a:	006a      	lsls	r2, r5, #1
 800791c:	528b      	strh	r3, [r1, r2]
 800791e:	e760      	b.n	80077e2 <lv_draw_map+0x32a>
                    else if(mask_res_sub == LV_DRAW_MASK_RES_CHANGED) {
 8007920:	2802      	cmp	r0, #2
 8007922:	d191      	bne.n	8007848 <lv_draw_map+0x390>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
 8007924:	9006      	str	r0, [sp, #24]
 8007926:	e78f      	b.n	8007848 <lv_draw_map+0x390>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
 8007928:	7bb3      	ldrb	r3, [r6, #14]
 800792a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800792c:	9302      	str	r3, [sp, #8]
 800792e:	7833      	ldrb	r3, [r6, #0]
 8007930:	0029      	movs	r1, r5
 8007932:	9301      	str	r3, [sp, #4]
 8007934:	9b06      	ldr	r3, [sp, #24]
 8007936:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007938:	9300      	str	r3, [sp, #0]
 800793a:	003b      	movs	r3, r7
 800793c:	f7ff fb66 	bl	800700c <_lv_blend_map>
                    blend_area.y1 = blend_area.y2 + 1;
 8007940:	88eb      	ldrh	r3, [r5, #6]
 8007942:	3301      	adds	r3, #1
 8007944:	b21b      	sxth	r3, r3
 8007946:	806b      	strh	r3, [r5, #2]
                    blend_area.y2 = blend_area.y1;
 8007948:	80eb      	strh	r3, [r5, #6]
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 800794a:	2302      	movs	r3, #2
 800794c:	9306      	str	r3, [sp, #24]
 800794e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007950:	2b00      	cmp	r3, #0
 8007952:	d109      	bne.n	8007968 <lv_draw_map+0x4b0>
 8007954:	8873      	ldrh	r3, [r6, #2]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d106      	bne.n	8007968 <lv_draw_map+0x4b0>
 800795a:	8933      	ldrh	r3, [r6, #8]
 800795c:	3b01      	subs	r3, #1
 800795e:	3bff      	subs	r3, #255	; 0xff
 8007960:	1e5a      	subs	r2, r3, #1
 8007962:	4193      	sbcs	r3, r2
 8007964:	3301      	adds	r3, #1
 8007966:	9306      	str	r3, [sp, #24]
                    px_i = 0;
 8007968:	2400      	movs	r4, #0
                    if(other_mask_cnt) {
 800796a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800796c:	42a3      	cmp	r3, r4
 800796e:	d100      	bne.n	8007972 <lv_draw_map+0x4ba>
 8007970:	e77d      	b.n	800786e <lv_draw_map+0x3b6>
                        _lv_memset_ff(mask_buf, mask_buf_size);
 8007972:	9908      	ldr	r1, [sp, #32]
 8007974:	0038      	movs	r0, r7
 8007976:	f004 fcd3 	bl	800c320 <_lv_memset_ff>
 800797a:	e778      	b.n	800786e <lv_draw_map+0x3b6>
            if(blend_area.y1 != blend_area.y2) {
 800797c:	a920      	add	r1, sp, #128	; 0x80
 800797e:	2206      	movs	r2, #6
 8007980:	5e8b      	ldrsh	r3, [r1, r2]
 8007982:	2002      	movs	r0, #2
 8007984:	5e0a      	ldrsh	r2, [r1, r0]
 8007986:	429a      	cmp	r2, r3
 8007988:	d00c      	beq.n	80079a4 <lv_draw_map+0x4ec>
                blend_area.y2--;
 800798a:	3b01      	subs	r3, #1
 800798c:	80cb      	strh	r3, [r1, #6]
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
 800798e:	7bb3      	ldrb	r3, [r6, #14]
 8007990:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007992:	9302      	str	r3, [sp, #8]
 8007994:	7833      	ldrb	r3, [r6, #0]
 8007996:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007998:	9301      	str	r3, [sp, #4]
 800799a:	9b06      	ldr	r3, [sp, #24]
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	003b      	movs	r3, r7
 80079a0:	f7ff fb34 	bl	800700c <_lv_blend_map>
            _lv_mem_buf_release(mask_buf);
 80079a4:	0038      	movs	r0, r7
 80079a6:	f004 fb11 	bl	800bfcc <_lv_mem_buf_release>
            _lv_mem_buf_release(map2);
 80079aa:	9810      	ldr	r0, [sp, #64]	; 0x40
 80079ac:	e6a9      	b.n	8007702 <lv_draw_map+0x24a>
 80079ae:	46c0      	nop			; (mov r8, r8)
 80079b0:	00008081 	.word	0x00008081
 80079b4:	fffff81f 	.word	0xfffff81f

080079b8 <lv_draw_img_dsc_init>:
{
 80079b8:	b510      	push	{r4, lr}
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 80079ba:	2110      	movs	r1, #16
{
 80079bc:	0004      	movs	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 80079be:	f004 fc85 	bl	800c2cc <_lv_memset_00>
    dsc->recolor = LV_COLOR_BLACK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	81a3      	strh	r3, [r4, #12]
    dsc->opa = LV_OPA_COVER;
 80079c6:	33ff      	adds	r3, #255	; 0xff
    dsc->antialias = LV_ANTIALIAS;
 80079c8:	7be2      	ldrb	r2, [r4, #15]
    dsc->opa = LV_OPA_COVER;
 80079ca:	7023      	strb	r3, [r4, #0]
    dsc->zoom = LV_IMG_ZOOM_NONE;
 80079cc:	3301      	adds	r3, #1
 80079ce:	8123      	strh	r3, [r4, #8]
    dsc->antialias = LV_ANTIALIAS;
 80079d0:	3bff      	subs	r3, #255	; 0xff
 80079d2:	4313      	orrs	r3, r2
 80079d4:	73e3      	strb	r3, [r4, #15]
}
 80079d6:	bd10      	pop	{r4, pc}

080079d8 <lv_img_cf_is_chroma_keyed>:
            is_chroma_keyed = false;
 80079d8:	2300      	movs	r3, #0
 80079da:	280a      	cmp	r0, #10
 80079dc:	d807      	bhi.n	80079ee <lv_img_cf_is_chroma_keyed+0x16>
 80079de:	3301      	adds	r3, #1
 80079e0:	4083      	lsls	r3, r0
 80079e2:	20f9      	movs	r0, #249	; 0xf9
 80079e4:	00c0      	lsls	r0, r0, #3
 80079e6:	4003      	ands	r3, r0
 80079e8:	1e58      	subs	r0, r3, #1
 80079ea:	4183      	sbcs	r3, r0
 80079ec:	b2db      	uxtb	r3, r3
}
 80079ee:	0018      	movs	r0, r3
 80079f0:	4770      	bx	lr
	...

080079f4 <lv_img_cf_has_alpha>:
            has_alpha = false;
 80079f4:	2300      	movs	r3, #0
 80079f6:	280e      	cmp	r0, #14
 80079f8:	d806      	bhi.n	8007a08 <lv_img_cf_has_alpha+0x14>
 80079fa:	3301      	adds	r3, #1
 80079fc:	4083      	lsls	r3, r0
 80079fe:	4803      	ldr	r0, [pc, #12]	; (8007a0c <lv_img_cf_has_alpha+0x18>)
 8007a00:	4003      	ands	r3, r0
 8007a02:	1e58      	subs	r0, r3, #1
 8007a04:	4183      	sbcs	r3, r0
 8007a06:	b2db      	uxtb	r3, r3
}
 8007a08:	0018      	movs	r0, r3
 8007a0a:	4770      	bx	lr
 8007a0c:	00007fa4 	.word	0x00007fa4

08007a10 <lv_draw_img>:
{
 8007a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a12:	b093      	sub	sp, #76	; 0x4c
 8007a14:	0004      	movs	r4, r0
 8007a16:	9103      	str	r1, [sp, #12]
 8007a18:	001f      	movs	r7, r3
    if(src == NULL) {
 8007a1a:	2a00      	cmp	r2, #0
 8007a1c:	d106      	bne.n	8007a2c <lv_draw_img+0x1c>
        show_error(coords, mask, "No\ndata");
 8007a1e:	4a65      	ldr	r2, [pc, #404]	; (8007bb4 <lv_draw_img+0x1a4>)
        show_error(coords, clip_area, cdsc->dec_dsc.error_msg);
 8007a20:	9903      	ldr	r1, [sp, #12]
 8007a22:	0020      	movs	r0, r4
 8007a24:	f7ff fd20 	bl	8007468 <show_error>
}
 8007a28:	b013      	add	sp, #76	; 0x4c
 8007a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(dsc->opa <= LV_OPA_MIN) return;
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d9fa      	bls.n	8007a28 <lv_draw_img+0x18>
    lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor);
 8007a32:	89b9      	ldrh	r1, [r7, #12]
 8007a34:	0010      	movs	r0, r2
 8007a36:	f002 ff4d 	bl	800a8d4 <_lv_img_cache_open>
 8007a3a:	1e05      	subs	r5, r0, #0
    if(cdsc == NULL) return LV_RES_INV;
 8007a3c:	d0ef      	beq.n	8007a1e <lv_draw_img+0xe>
    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
 8007a3e:	7b06      	ldrb	r6, [r0, #12]
 8007a40:	06f6      	lsls	r6, r6, #27
 8007a42:	0ef6      	lsrs	r6, r6, #27
 8007a44:	0030      	movs	r0, r6
 8007a46:	f7ff ffc7 	bl	80079d8 <lv_img_cf_is_chroma_keyed>
 8007a4a:	9008      	str	r0, [sp, #32]
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
 8007a4c:	0030      	movs	r0, r6
 8007a4e:	f7ff ffd1 	bl	80079f4 <lv_img_cf_has_alpha>
    if(cdsc->dec_dsc.error_msg != NULL) {
 8007a52:	69aa      	ldr	r2, [r5, #24]
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
 8007a54:	9009      	str	r0, [sp, #36]	; 0x24
    if(cdsc->dec_dsc.error_msg != NULL) {
 8007a56:	2a00      	cmp	r2, #0
 8007a58:	d1e2      	bne.n	8007a20 <lv_draw_img+0x10>
    else if(cdsc->dec_dsc.img_data) {
 8007a5a:	692b      	ldr	r3, [r5, #16]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d03f      	beq.n	8007ae0 <lv_draw_img+0xd0>
        lv_area_copy(&map_area_rot, coords);
 8007a60:	a80e      	add	r0, sp, #56	; 0x38
 8007a62:	0021      	movs	r1, r4
 8007a64:	f7ff fd20 	bl	80074a8 <lv_area_copy>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 8007a68:	887b      	ldrh	r3, [r7, #2]
 8007a6a:	8938      	ldrh	r0, [r7, #8]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d103      	bne.n	8007a78 <lv_draw_img+0x68>
 8007a70:	2280      	movs	r2, #128	; 0x80
 8007a72:	0052      	lsls	r2, r2, #1
 8007a74:	4290      	cmp	r0, r2
 8007a76:	d021      	beq.n	8007abc <lv_draw_img+0xac>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007a78:	88e2      	ldrh	r2, [r4, #6]
 8007a7a:	8861      	ldrh	r1, [r4, #2]
 8007a7c:	3201      	adds	r2, #1
 8007a7e:	1a52      	subs	r2, r2, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007a80:	88a1      	ldrh	r1, [r4, #4]
 8007a82:	8826      	ldrh	r6, [r4, #0]
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
 8007a84:	b21b      	sxth	r3, r3
 8007a86:	3101      	adds	r1, #1
 8007a88:	9304      	str	r3, [sp, #16]
 8007a8a:	1b89      	subs	r1, r1, r6
 8007a8c:	1d3b      	adds	r3, r7, #4
 8007a8e:	ae0e      	add	r6, sp, #56	; 0x38
 8007a90:	b212      	sxth	r2, r2
 8007a92:	b209      	sxth	r1, r1
 8007a94:	9301      	str	r3, [sp, #4]
 8007a96:	9000      	str	r0, [sp, #0]
 8007a98:	9b04      	ldr	r3, [sp, #16]
 8007a9a:	0030      	movs	r0, r6
 8007a9c:	f002 fef5 	bl	800a88a <_lv_img_buf_get_transformed_area>
            map_area_rot.x1 += coords->x1;
 8007aa0:	8822      	ldrh	r2, [r4, #0]
 8007aa2:	8833      	ldrh	r3, [r6, #0]
            map_area_rot.y1 += coords->y1;
 8007aa4:	8871      	ldrh	r1, [r6, #2]
            map_area_rot.x1 += coords->x1;
 8007aa6:	18d3      	adds	r3, r2, r3
 8007aa8:	8033      	strh	r3, [r6, #0]
            map_area_rot.y1 += coords->y1;
 8007aaa:	8863      	ldrh	r3, [r4, #2]
 8007aac:	1859      	adds	r1, r3, r1
 8007aae:	8071      	strh	r1, [r6, #2]
            map_area_rot.x2 += coords->x1;
 8007ab0:	88b1      	ldrh	r1, [r6, #4]
 8007ab2:	1852      	adds	r2, r2, r1
 8007ab4:	80b2      	strh	r2, [r6, #4]
            map_area_rot.y2 += coords->y1;
 8007ab6:	88f2      	ldrh	r2, [r6, #6]
 8007ab8:	189b      	adds	r3, r3, r2
 8007aba:	80f3      	strh	r3, [r6, #6]
        union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
 8007abc:	aa0e      	add	r2, sp, #56	; 0x38
 8007abe:	9903      	ldr	r1, [sp, #12]
 8007ac0:	a810      	add	r0, sp, #64	; 0x40
 8007ac2:	f003 fdc2 	bl	800b64a <_lv_area_intersect>
        if(union_ok == false) {
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	d0ae      	beq.n	8007a28 <lv_draw_img+0x18>
        lv_draw_map(coords, &mask_com, cdsc->dec_dsc.img_data, draw_dsc, chroma_keyed, alpha_byte);
 8007aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007acc:	a910      	add	r1, sp, #64	; 0x40
 8007ace:	9301      	str	r3, [sp, #4]
 8007ad0:	9b08      	ldr	r3, [sp, #32]
 8007ad2:	0020      	movs	r0, r4
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	692a      	ldr	r2, [r5, #16]
 8007ad8:	003b      	movs	r3, r7
 8007ada:	f7ff fced 	bl	80074b8 <lv_draw_map>
 8007ade:	e7a3      	b.n	8007a28 <lv_draw_img+0x18>
        union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
 8007ae0:	ae0c      	add	r6, sp, #48	; 0x30
 8007ae2:	0022      	movs	r2, r4
 8007ae4:	9903      	ldr	r1, [sp, #12]
 8007ae6:	0030      	movs	r0, r6
 8007ae8:	f003 fdaf 	bl	800b64a <_lv_area_intersect>
        if(union_ok == false) {
 8007aec:	2800      	cmp	r0, #0
 8007aee:	d100      	bne.n	8007af2 <lv_draw_img+0xe2>
 8007af0:	e79a      	b.n	8007a28 <lv_draw_img+0x18>
        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
 8007af2:	2003      	movs	r0, #3
 8007af4:	88b3      	ldrh	r3, [r6, #4]
 8007af6:	8832      	ldrh	r2, [r6, #0]
 8007af8:	3301      	adds	r3, #1
 8007afa:	1a9b      	subs	r3, r3, r2
 8007afc:	b21b      	sxth	r3, r3
 8007afe:	4358      	muls	r0, r3
 8007b00:	9307      	str	r3, [sp, #28]
 8007b02:	f004 fb5b 	bl	800c1bc <_lv_mem_buf_get>
        lv_area_copy(&line, &mask_com);
 8007b06:	0031      	movs	r1, r6
        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
 8007b08:	9004      	str	r0, [sp, #16]
        lv_area_copy(&line, &mask_com);
 8007b0a:	a80e      	add	r0, sp, #56	; 0x38
 8007b0c:	f7ff fccc 	bl	80074a8 <lv_area_copy>
        lv_area_set_height(&line, 1);
 8007b10:	2101      	movs	r1, #1
 8007b12:	a80e      	add	r0, sp, #56	; 0x38
 8007b14:	f003 fd86 	bl	800b624 <lv_area_set_height>
        int32_t x = mask_com.x1 - coords->x1;
 8007b18:	2200      	movs	r2, #0
 8007b1a:	5eb3      	ldrsh	r3, [r6, r2]
 8007b1c:	930a      	str	r3, [sp, #40]	; 0x28
 8007b1e:	2200      	movs	r2, #0
 8007b20:	5ea3      	ldrsh	r3, [r4, r2]
 8007b22:	930b      	str	r3, [sp, #44]	; 0x2c
        int32_t y = mask_com.y1 - coords->y1;
 8007b24:	2202      	movs	r2, #2
 8007b26:	5eb3      	ldrsh	r3, [r6, r2]
 8007b28:	9305      	str	r3, [sp, #20]
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	5ea3      	ldrsh	r3, [r4, r2]
 8007b2e:	9a05      	ldr	r2, [sp, #20]
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	9306      	str	r3, [sp, #24]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 8007b34:	ab0c      	add	r3, sp, #48	; 0x30
 8007b36:	2206      	movs	r2, #6
 8007b38:	5e9b      	ldrsh	r3, [r3, r2]
 8007b3a:	9a05      	ldr	r2, [sp, #20]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	dd03      	ble.n	8007b48 <lv_draw_img+0x138>
        _lv_mem_buf_release(buf);
 8007b40:	9804      	ldr	r0, [sp, #16]
 8007b42:	f004 fa43 	bl	800bfcc <_lv_mem_buf_release>
 8007b46:	e76f      	b.n	8007a28 <lv_draw_img+0x18>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
 8007b48:	ae0e      	add	r6, sp, #56	; 0x38
 8007b4a:	0032      	movs	r2, r6
 8007b4c:	9903      	ldr	r1, [sp, #12]
 8007b4e:	a810      	add	r0, sp, #64	; 0x40
 8007b50:	f003 fd7b 	bl	800b64a <_lv_area_intersect>
            if(union_ok == false) continue;
 8007b54:	2800      	cmp	r0, #0
 8007b56:	d028      	beq.n	8007baa <lv_draw_img+0x19a>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 8007b58:	466b      	mov	r3, sp
 8007b5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b5c:	2218      	movs	r2, #24
 8007b5e:	5e9a      	ldrsh	r2, [r3, r2]
 8007b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b62:	0028      	movs	r0, r5
 8007b64:	1a59      	subs	r1, r3, r1
 8007b66:	9b04      	ldr	r3, [sp, #16]
 8007b68:	b209      	sxth	r1, r1
 8007b6a:	9300      	str	r3, [sp, #0]
 8007b6c:	9b07      	ldr	r3, [sp, #28]
 8007b6e:	f003 f861 	bl	800ac34 <lv_img_decoder_read_line>
            if(read_res != LV_RES_OK) {
 8007b72:	2801      	cmp	r0, #1
 8007b74:	d006      	beq.n	8007b84 <lv_draw_img+0x174>
                lv_img_decoder_close(&cdsc->dec_dsc);
 8007b76:	0028      	movs	r0, r5
 8007b78:	f003 f86b 	bl	800ac52 <lv_img_decoder_close>
                _lv_mem_buf_release(buf);
 8007b7c:	9804      	ldr	r0, [sp, #16]
 8007b7e:	f004 fa25 	bl	800bfcc <_lv_mem_buf_release>
 8007b82:	e74c      	b.n	8007a1e <lv_draw_img+0xe>
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
 8007b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b86:	9a04      	ldr	r2, [sp, #16]
 8007b88:	9301      	str	r3, [sp, #4]
 8007b8a:	9b08      	ldr	r3, [sp, #32]
 8007b8c:	a910      	add	r1, sp, #64	; 0x40
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	0030      	movs	r0, r6
 8007b92:	003b      	movs	r3, r7
 8007b94:	f7ff fc90 	bl	80074b8 <lv_draw_map>
            line.y1++;
 8007b98:	8873      	ldrh	r3, [r6, #2]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	8073      	strh	r3, [r6, #2]
            line.y2++;
 8007b9e:	88f3      	ldrh	r3, [r6, #6]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	80f3      	strh	r3, [r6, #6]
            y++;
 8007ba4:	9b06      	ldr	r3, [sp, #24]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	9306      	str	r3, [sp, #24]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 8007baa:	9b05      	ldr	r3, [sp, #20]
 8007bac:	3301      	adds	r3, #1
 8007bae:	9305      	str	r3, [sp, #20]
 8007bb0:	e7c0      	b.n	8007b34 <lv_draw_img+0x124>
 8007bb2:	46c0      	nop			; (mov r8, r8)
 8007bb4:	0800e311 	.word	0x0800e311

08007bb8 <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	d007      	beq.n	8007bce <lv_img_src_get_type+0x16>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 8007bbe:	7802      	ldrb	r2, [r0, #0]
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 8007bc0:	3b02      	subs	r3, #2
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 8007bc2:	0011      	movs	r1, r2
 8007bc4:	3920      	subs	r1, #32
 8007bc6:	295f      	cmp	r1, #95	; 0x5f
 8007bc8:	d901      	bls.n	8007bce <lv_img_src_get_type+0x16>
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
 8007bca:	09d3      	lsrs	r3, r2, #7
 8007bcc:	005b      	lsls	r3, r3, #1
}
 8007bce:	0018      	movs	r0, r3
 8007bd0:	4770      	bx	lr
	...

08007bd4 <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
 8007bd4:	0003      	movs	r3, r0
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
 8007bd6:	3830      	subs	r0, #48	; 0x30
 8007bd8:	b2c0      	uxtb	r0, r0
 8007bda:	2809      	cmp	r0, #9
 8007bdc:	d90a      	bls.n	8007bf4 <hex_char_to_num+0x20>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 8007bde:	2b60      	cmp	r3, #96	; 0x60
 8007be0:	d901      	bls.n	8007be6 <hex_char_to_num+0x12>
 8007be2:	3b20      	subs	r3, #32
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	3b41      	subs	r3, #65	; 0x41
 8007be8:	b2db      	uxtb	r3, r3
{
 8007bea:	2000      	movs	r0, #0
 8007bec:	2b05      	cmp	r3, #5
 8007bee:	d801      	bhi.n	8007bf4 <hex_char_to_num+0x20>
 8007bf0:	4a01      	ldr	r2, [pc, #4]	; (8007bf8 <hex_char_to_num+0x24>)
 8007bf2:	5cd0      	ldrb	r0, [r2, r3]
                break;
        }
    }

    return result;
}
 8007bf4:	4770      	bx	lr
 8007bf6:	46c0      	nop			; (mov r8, r8)
 8007bf8:	0800e31a 	.word	0x0800e31a

08007bfc <lv_draw_label_dsc_init>:
{
 8007bfc:	b510      	push	{r4, lr}
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 8007bfe:	2124      	movs	r1, #36	; 0x24
{
 8007c00:	0004      	movs	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 8007c02:	f004 fb63 	bl	800c2cc <_lv_memset_00>
    dsc->opa = LV_OPA_COVER;
 8007c06:	23ff      	movs	r3, #255	; 0xff
 8007c08:	7323      	strb	r3, [r4, #12]
    dsc->font = LV_THEME_DEFAULT_FONT_NORMAL;
 8007c0a:	4b06      	ldr	r3, [pc, #24]	; (8007c24 <lv_draw_label_dsc_init+0x28>)
    dsc->sel_color = LV_COLOR_BLACK;
 8007c0c:	221f      	movs	r2, #31
    dsc->font = LV_THEME_DEFAULT_FONT_NORMAL;
 8007c0e:	60a3      	str	r3, [r4, #8]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 8007c10:	4b05      	ldr	r3, [pc, #20]	; (8007c28 <lv_draw_label_dsc_init+0x2c>)
    dsc->sel_color = LV_COLOR_BLACK;
 8007c12:	80a2      	strh	r2, [r4, #4]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 8007c14:	6163      	str	r3, [r4, #20]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
 8007c16:	61a3      	str	r3, [r4, #24]
    dsc->color = LV_COLOR_BLACK;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	6023      	str	r3, [r4, #0]
    dsc->bidi_dir = LV_BIDI_DIR_LTR;
 8007c1c:	3401      	adds	r4, #1
 8007c1e:	77e3      	strb	r3, [r4, #31]
}
 8007c20:	bd10      	pop	{r4, pc}
 8007c22:	46c0      	nop			; (mov r8, r8)
 8007c24:	20000028 	.word	0x20000028
 8007c28:	0000ffff 	.word	0x0000ffff

08007c2c <lv_draw_label>:
{
 8007c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c2e:	b0d7      	sub	sp, #348	; 0x15c
 8007c30:	9006      	str	r0, [sp, #24]
 8007c32:	9104      	str	r1, [sp, #16]
 8007c34:	9310      	str	r3, [sp, #64]	; 0x40
    if(dsc->opa <= LV_OPA_MIN) return;
 8007c36:	7b13      	ldrb	r3, [r2, #12]
{
 8007c38:	0017      	movs	r7, r2
 8007c3a:	9c5c      	ldr	r4, [sp, #368]	; 0x170
    if(dsc->opa <= LV_OPA_MIN) return;
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d800      	bhi.n	8007c42 <lv_draw_label+0x16>
 8007c40:	e0d7      	b.n	8007df2 <lv_draw_label+0x1c6>
    if(txt[0] == '\0')  return;
 8007c42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d100      	bne.n	8007c4c <lv_draw_label+0x20>
 8007c4a:	e0d2      	b.n	8007df2 <lv_draw_label+0x1c6>
    const lv_font_t * font = dsc->font;
 8007c4c:	6893      	ldr	r3, [r2, #8]
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
 8007c4e:	000a      	movs	r2, r1
 8007c50:	0001      	movs	r1, r0
 8007c52:	a837      	add	r0, sp, #220	; 0xdc
    const lv_font_t * font = dsc->font;
 8007c54:	9305      	str	r3, [sp, #20]
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
 8007c56:	f003 fcf8 	bl	800b64a <_lv_area_intersect>
    if(!clip_ok) return;
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	d100      	bne.n	8007c60 <lv_draw_label+0x34>
 8007c5e:	e0c8      	b.n	8007df2 <lv_draw_label+0x1c6>
    if((dsc->flag & LV_TXT_FLAG_EXPAND) == 0) {
 8007c60:	1cbb      	adds	r3, r7, #2
 8007c62:	7fda      	ldrb	r2, [r3, #31]
 8007c64:	0793      	lsls	r3, r2, #30
 8007c66:	d500      	bpl.n	8007c6a <lv_draw_label+0x3e>
 8007c68:	e0c5      	b.n	8007df6 <lv_draw_label+0x1ca>
 8007c6a:	9b06      	ldr	r3, [sp, #24]
 8007c6c:	9a06      	ldr	r2, [sp, #24]
 8007c6e:	889b      	ldrh	r3, [r3, #4]
 8007c70:	8812      	ldrh	r2, [r2, #0]
 8007c72:	3301      	adds	r3, #1
 8007c74:	1a9b      	subs	r3, r3, r2
        w = lv_area_get_width(coords);
 8007c76:	b21b      	sxth	r3, r3
    int32_t line_height_font = lv_font_get_line_height(font);
 8007c78:	9a05      	ldr	r2, [sp, #20]
 8007c7a:	2108      	movs	r1, #8
 8007c7c:	5e52      	ldrsh	r2, [r2, r1]
 8007c7e:	920a      	str	r2, [sp, #40]	; 0x28
    int32_t line_height = line_height_font + dsc->line_space;
 8007c80:	210e      	movs	r1, #14
 8007c82:	5e7a      	ldrsh	r2, [r7, r1]
 8007c84:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007c86:	1855      	adds	r5, r2, r1
    pos.x = coords->x1;
 8007c88:	9a06      	ldr	r2, [sp, #24]
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	5e52      	ldrsh	r2, [r2, r1]
 8007c8e:	9211      	str	r2, [sp, #68]	; 0x44
    pos.y = coords->y1;
 8007c90:	9a06      	ldr	r2, [sp, #24]
 8007c92:	2002      	movs	r0, #2
 8007c94:	5e10      	ldrsh	r0, [r2, r0]
    x_ofs = dsc->ofs_x;
 8007c96:	211c      	movs	r1, #28
 8007c98:	5e7a      	ldrsh	r2, [r7, r1]
 8007c9a:	922b      	str	r2, [sp, #172]	; 0xac
    y_ofs = dsc->ofs_y;
 8007c9c:	221e      	movs	r2, #30
 8007c9e:	5eb9      	ldrsh	r1, [r7, r2]
    uint32_t line_start     = 0;
 8007ca0:	9407      	str	r4, [sp, #28]
    pos.y += y_ofs;
 8007ca2:	1842      	adds	r2, r0, r1
 8007ca4:	b292      	uxth	r2, r2
 8007ca6:	b216      	sxth	r6, r2
 8007ca8:	9608      	str	r6, [sp, #32]
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 8007caa:	2c00      	cmp	r4, #0
 8007cac:	d01e      	beq.n	8007cec <lv_draw_label+0xc0>
    uint32_t line_start     = 0;
 8007cae:	2600      	movs	r6, #0
 8007cb0:	9607      	str	r6, [sp, #28]
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 8007cb2:	42b1      	cmp	r1, r6
 8007cb4:	d11a      	bne.n	8007cec <lv_draw_label+0xc0>
    uint32_t line_start     = 0;
 8007cb6:	9107      	str	r1, [sp, #28]
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 8007cb8:	42b0      	cmp	r0, r6
 8007cba:	da17      	bge.n	8007cec <lv_draw_label+0xc0>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 8007cbc:	68a1      	ldr	r1, [r4, #8]
 8007cbe:	1a08      	subs	r0, r1, r0
 8007cc0:	17c1      	asrs	r1, r0, #31
 8007cc2:	1840      	adds	r0, r0, r1
 8007cc4:	4048      	eors	r0, r1
 8007cc6:	2180      	movs	r1, #128	; 0x80
 8007cc8:	0089      	lsls	r1, r1, #2
 8007cca:	1b49      	subs	r1, r1, r5
 8007ccc:	0049      	lsls	r1, r1, #1
 8007cce:	4288      	cmp	r0, r1
 8007cd0:	dd02      	ble.n	8007cd8 <lv_draw_label+0xac>
            hint->line_start = -1;
 8007cd2:	2101      	movs	r1, #1
 8007cd4:	4249      	negs	r1, r1
 8007cd6:	6021      	str	r1, [r4, #0]
    uint32_t line_start     = 0;
 8007cd8:	2000      	movs	r0, #0
        last_line_start = hint->line_start;
 8007cda:	6821      	ldr	r1, [r4, #0]
    uint32_t line_start     = 0;
 8007cdc:	9007      	str	r0, [sp, #28]
    if(hint && last_line_start >= 0) {
 8007cde:	4281      	cmp	r1, r0
 8007ce0:	db04      	blt.n	8007cec <lv_draw_label+0xc0>
        line_start = last_line_start;
 8007ce2:	9107      	str	r1, [sp, #28]
        pos.y += hint->y;
 8007ce4:	6861      	ldr	r1, [r4, #4]
 8007ce6:	1852      	adds	r2, r2, r1
 8007ce8:	b212      	sxth	r2, r2
 8007cea:	9208      	str	r2, [sp, #32]
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 8007cec:	b21b      	sxth	r3, r3
 8007cee:	9324      	str	r3, [sp, #144]	; 0x90
 8007cf0:	2310      	movs	r3, #16
 8007cf2:	5efa      	ldrsh	r2, [r7, r3]
 8007cf4:	9907      	ldr	r1, [sp, #28]
 8007cf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007cf8:	1858      	adds	r0, r3, r1
 8007cfa:	1cbb      	adds	r3, r7, #2
 8007cfc:	7fdb      	ldrb	r3, [r3, #31]
 8007cfe:	9905      	ldr	r1, [sp, #20]
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007d04:	f004 fd9a 	bl	800c83c <_lv_txt_get_next_line>
 8007d08:	9b07      	ldr	r3, [sp, #28]
 8007d0a:	18c3      	adds	r3, r0, r3
 8007d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d0e:	1cbb      	adds	r3, r7, #2
    while(pos.y + line_height_font < mask->y1) {
 8007d10:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007d12:	7fda      	ldrb	r2, [r3, #31]
 8007d14:	9b08      	ldr	r3, [sp, #32]
 8007d16:	185b      	adds	r3, r3, r1
 8007d18:	9904      	ldr	r1, [sp, #16]
 8007d1a:	2002      	movs	r0, #2
 8007d1c:	5e09      	ldrsh	r1, [r1, r0]
 8007d1e:	428b      	cmp	r3, r1
 8007d20:	da00      	bge.n	8007d24 <lv_draw_label+0xf8>
 8007d22:	e079      	b.n	8007e18 <lv_draw_label+0x1ec>
 8007d24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d26:	9907      	ldr	r1, [sp, #28]
 8007d28:	1858      	adds	r0, r3, r1
    if(dsc->flag & LV_TXT_FLAG_CENTER) {
 8007d2a:	0753      	lsls	r3, r2, #29
 8007d2c:	d400      	bmi.n	8007d30 <lv_draw_label+0x104>
 8007d2e:	e09e      	b.n	8007e6e <lv_draw_label+0x242>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8007d30:	2110      	movs	r1, #16
 8007d32:	5e7b      	ldrsh	r3, [r7, r1]
 8007d34:	9c07      	ldr	r4, [sp, #28]
 8007d36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d38:	9200      	str	r2, [sp, #0]
 8007d3a:	1b09      	subs	r1, r1, r4
 8007d3c:	9a05      	ldr	r2, [sp, #20]
 8007d3e:	f004 fd33 	bl	800c7a8 <_lv_txt_get_width>
 8007d42:	9b06      	ldr	r3, [sp, #24]
 8007d44:	9a06      	ldr	r2, [sp, #24]
 8007d46:	889b      	ldrh	r3, [r3, #4]
 8007d48:	8812      	ldrh	r2, [r2, #0]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 8007d4e:	b21b      	sxth	r3, r3
 8007d50:	1a18      	subs	r0, r3, r0
 8007d52:	0fc3      	lsrs	r3, r0, #31
 8007d54:	1818      	adds	r0, r3, r0
 8007d56:	1040      	asrs	r0, r0, #1
        pos.x += lv_area_get_width(coords) - line_width;
 8007d58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d5a:	18c0      	adds	r0, r0, r3
 8007d5c:	b203      	sxth	r3, r0
 8007d5e:	9311      	str	r3, [sp, #68]	; 0x44
    lv_opa_t opa = dsc->opa;
 8007d60:	7b3b      	ldrb	r3, [r7, #12]
 8007d62:	9326      	str	r3, [sp, #152]	; 0x98
    uint32_t sel_start = dsc->sel_start;
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	9315      	str	r3, [sp, #84]	; 0x54
    uint32_t sel_end = dsc->sel_end;
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	9314      	str	r3, [sp, #80]	; 0x50
    if(sel_start > sel_end) {
 8007d6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007d6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d803      	bhi.n	8007d7c <lv_draw_label+0x150>
 8007d74:	0013      	movs	r3, r2
 8007d76:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007d78:	9315      	str	r3, [sp, #84]	; 0x54
 8007d7a:	9214      	str	r2, [sp, #80]	; 0x50
    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
 8007d7c:	1cfb      	adds	r3, r7, #3
 8007d7e:	7fdb      	ldrb	r3, [r3, #31]
 8007d80:	079b      	lsls	r3, r3, #30
 8007d82:	d016      	beq.n	8007db2 <lv_draw_label+0x186>
        lv_draw_line_dsc_init(&line_dsc);
 8007d84:	ac3b      	add	r4, sp, #236	; 0xec
 8007d86:	0020      	movs	r0, r4
 8007d88:	f000 fdb4 	bl	80088f4 <lv_draw_line_dsc_init>
        line_dsc.color = dsc->color;
 8007d8c:	883b      	ldrh	r3, [r7, #0]
 8007d8e:	8023      	strh	r3, [r4, #0]
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 8007d90:	9b05      	ldr	r3, [sp, #20]
 8007d92:	7b9b      	ldrb	r3, [r3, #14]
 8007d94:	b25b      	sxtb	r3, r3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d100      	bne.n	8007d9c <lv_draw_label+0x170>
 8007d9a:	3301      	adds	r3, #1
        line_dsc.blend_mode = dsc->blend_mode;
 8007d9c:	2103      	movs	r1, #3
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 8007d9e:	8063      	strh	r3, [r4, #2]
        line_dsc.opa = dsc->opa;
 8007da0:	7b3b      	ldrb	r3, [r7, #12]
 8007da2:	7223      	strb	r3, [r4, #8]
        line_dsc.blend_mode = dsc->blend_mode;
 8007da4:	1d3b      	adds	r3, r7, #4
 8007da6:	7fda      	ldrb	r2, [r3, #31]
 8007da8:	7a63      	ldrb	r3, [r4, #9]
 8007daa:	400a      	ands	r2, r1
 8007dac:	438b      	bics	r3, r1
 8007dae:	4313      	orrs	r3, r2
 8007db0:	7263      	strb	r3, [r4, #9]
    lv_draw_rect_dsc_init(&draw_dsc_sel);
 8007db2:	ac41      	add	r4, sp, #260	; 0x104
 8007db4:	0020      	movs	r0, r4
 8007db6:	f001 ff7d 	bl	8009cb4 <lv_draw_rect_dsc_init>
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
 8007dba:	88bb      	ldrh	r3, [r7, #4]
 8007dbc:	8063      	strh	r3, [r4, #2]
 8007dbe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007dc0:	2bfd      	cmp	r3, #253	; 0xfd
 8007dc2:	d900      	bls.n	8007dc6 <lv_draw_label+0x19a>
 8007dc4:	e068      	b.n	8007e98 <lv_draw_label+0x26c>
 8007dc6:	466b      	mov	r3, sp
 8007dc8:	2298      	movs	r2, #152	; 0x98
 8007dca:	189b      	adds	r3, r3, r2
 8007dcc:	781b      	ldrb	r3, [r3, #0]
    while(txt[line_start] != '\0') {
 8007dce:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dd4:	b2ab      	uxth	r3, r5
 8007dd6:	9327      	str	r3, [sp, #156]	; 0x9c
 8007dd8:	466b      	mov	r3, sp
 8007dda:	8c1b      	ldrh	r3, [r3, #32]
 8007ddc:	9323      	str	r3, [sp, #140]	; 0x8c
    uint32_t par_start = 0;
 8007dde:	2300      	movs	r3, #0
 8007de0:	9325      	str	r3, [sp, #148]	; 0x94
    while(txt[line_start] != '\0') {
 8007de2:	9a07      	ldr	r2, [sp, #28]
 8007de4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007de6:	4694      	mov	ip, r2
 8007de8:	4463      	add	r3, ip
 8007dea:	9321      	str	r3, [sp, #132]	; 0x84
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d154      	bne.n	8007e9c <lv_draw_label+0x270>
}
 8007df2:	b057      	add	sp, #348	; 0x15c
 8007df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        _lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
 8007df6:	2110      	movs	r1, #16
 8007df8:	5e7b      	ldrsh	r3, [r7, r1]
 8007dfa:	9202      	str	r2, [sp, #8]
 8007dfc:	4ad0      	ldr	r2, [pc, #832]	; (8008140 <lv_draw_label+0x514>)
 8007dfe:	ad41      	add	r5, sp, #260	; 0x104
 8007e00:	9201      	str	r2, [sp, #4]
 8007e02:	210e      	movs	r1, #14
 8007e04:	5e7a      	ldrsh	r2, [r7, r1]
 8007e06:	0028      	movs	r0, r5
 8007e08:	9200      	str	r2, [sp, #0]
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007e0e:	f004 fdf9 	bl	800ca04 <_lv_txt_get_size>
        w = p.x;
 8007e12:	2200      	movs	r2, #0
 8007e14:	5eab      	ldrsh	r3, [r5, r2]
 8007e16:	e72f      	b.n	8007c78 <lv_draw_label+0x4c>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 8007e18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e1c:	185e      	adds	r6, r3, r1
 8007e1e:	2310      	movs	r3, #16
 8007e20:	5ef9      	ldrsh	r1, [r7, r3]
 8007e22:	0030      	movs	r0, r6
 8007e24:	9200      	str	r2, [sp, #0]
 8007e26:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007e28:	000a      	movs	r2, r1
 8007e2a:	9905      	ldr	r1, [sp, #20]
 8007e2c:	f004 fd06 	bl	800c83c <_lv_txt_get_next_line>
 8007e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e32:	1818      	adds	r0, r3, r0
 8007e34:	9b08      	ldr	r3, [sp, #32]
 8007e36:	18eb      	adds	r3, r5, r3
 8007e38:	b21b      	sxth	r3, r3
 8007e3a:	9308      	str	r3, [sp, #32]
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 8007e3c:	2c00      	cmp	r4, #0
 8007e3e:	d00f      	beq.n	8007e60 <lv_draw_label+0x234>
 8007e40:	4bc0      	ldr	r3, [pc, #768]	; (8008144 <lv_draw_label+0x518>)
 8007e42:	9a08      	ldr	r2, [sp, #32]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	db0b      	blt.n	8007e60 <lv_draw_label+0x234>
 8007e48:	6823      	ldr	r3, [r4, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	da08      	bge.n	8007e60 <lv_draw_label+0x234>
            hint->line_start = line_start;
 8007e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e50:	6023      	str	r3, [r4, #0]
            hint->y          = pos.y - coords->y1;
 8007e52:	9b06      	ldr	r3, [sp, #24]
 8007e54:	2202      	movs	r2, #2
 8007e56:	5e9b      	ldrsh	r3, [r3, r2]
 8007e58:	9a08      	ldr	r2, [sp, #32]
            hint->coord_y    = coords->y1;
 8007e5a:	60a3      	str	r3, [r4, #8]
            hint->y          = pos.y - coords->y1;
 8007e5c:	1ad2      	subs	r2, r2, r3
 8007e5e:	6062      	str	r2, [r4, #4]
 8007e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e62:	9307      	str	r3, [sp, #28]
        if(txt[line_start] == '\0') return;
 8007e64:	7833      	ldrb	r3, [r6, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d0c3      	beq.n	8007df2 <lv_draw_label+0x1c6>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 8007e6a:	9009      	str	r0, [sp, #36]	; 0x24
 8007e6c:	e74f      	b.n	8007d0e <lv_draw_label+0xe2>
    else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
 8007e6e:	0713      	lsls	r3, r2, #28
 8007e70:	d400      	bmi.n	8007e74 <lv_draw_label+0x248>
 8007e72:	e775      	b.n	8007d60 <lv_draw_label+0x134>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8007e74:	2110      	movs	r1, #16
 8007e76:	5e7b      	ldrsh	r3, [r7, r1]
 8007e78:	9c07      	ldr	r4, [sp, #28]
 8007e7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e7c:	9200      	str	r2, [sp, #0]
 8007e7e:	1b09      	subs	r1, r1, r4
 8007e80:	9a05      	ldr	r2, [sp, #20]
 8007e82:	f004 fc91 	bl	800c7a8 <_lv_txt_get_width>
 8007e86:	9b06      	ldr	r3, [sp, #24]
 8007e88:	9a06      	ldr	r2, [sp, #24]
 8007e8a:	889b      	ldrh	r3, [r3, #4]
 8007e8c:	8812      	ldrh	r2, [r2, #0]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
 8007e92:	b21b      	sxth	r3, r3
 8007e94:	1a18      	subs	r0, r3, r0
 8007e96:	e75f      	b.n	8007d58 <lv_draw_label+0x12c>
 8007e98:	4bab      	ldr	r3, [pc, #684]	; (8008148 <lv_draw_label+0x51c>)
 8007e9a:	e797      	b.n	8007dcc <lv_draw_label+0x1a0>
        pos.x += x_ofs;
 8007e9c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8007e9e:	18e4      	adds	r4, r4, r3
 8007ea0:	b223      	sxth	r3, r4
 8007ea2:	9312      	str	r3, [sp, #72]	; 0x48
        i         = 0;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	9336      	str	r3, [sp, #216]	; 0xd8
                        cmd_state = CMD_STATE_WAIT;
 8007ea8:	930c      	str	r3, [sp, #48]	; 0x30
 8007eaa:	e0bd      	b.n	8008028 <lv_draw_label+0x3fc>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 8007eac:	9b14      	ldr	r3, [sp, #80]	; 0x50
            uint32_t logical_char_pos = 0;
 8007eae:	2500      	movs	r5, #0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 8007eb0:	001a      	movs	r2, r3
 8007eb2:	4ba6      	ldr	r3, [pc, #664]	; (800814c <lv_draw_label+0x520>)
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d009      	beq.n	8007ecc <lv_draw_label+0x2a0>
 8007eb8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d006      	beq.n	8007ecc <lv_draw_label+0x2a0>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
 8007ebe:	9b07      	ldr	r3, [sp, #28]
 8007ec0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007ec2:	18c9      	adds	r1, r1, r3
 8007ec4:	4ba2      	ldr	r3, [pc, #648]	; (8008150 <lv_draw_label+0x524>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4798      	blx	r3
 8007eca:	0005      	movs	r5, r0
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
 8007ecc:	4ca1      	ldr	r4, [pc, #644]	; (8008154 <lv_draw_label+0x528>)
 8007ece:	a936      	add	r1, sp, #216	; 0xd8
 8007ed0:	6823      	ldr	r3, [r4, #0]
 8007ed2:	9821      	ldr	r0, [sp, #132]	; 0x84
 8007ed4:	4798      	blx	r3
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
 8007ed6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ed8:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8007eda:	2100      	movs	r1, #0
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
 8007edc:	0006      	movs	r6, r0
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
 8007ede:	1898      	adds	r0, r3, r2
 8007ee0:	6823      	ldr	r3, [r4, #0]
 8007ee2:	4798      	blx	r3
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8007ee4:	2101      	movs	r1, #1
 8007ee6:	1cbb      	adds	r3, r7, #2
 8007ee8:	7fdb      	ldrb	r3, [r3, #31]
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
 8007eea:	0002      	movs	r2, r0
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8007eec:	420b      	tst	r3, r1
 8007eee:	d100      	bne.n	8007ef2 <lv_draw_label+0x2c6>
 8007ef0:	e11e      	b.n	8008130 <lv_draw_label+0x504>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 8007ef2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8007ef4:	2e23      	cmp	r6, #35	; 0x23
 8007ef6:	d10d      	bne.n	8007f14 <lv_draw_label+0x2e8>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d103      	bne.n	8007f04 <lv_draw_label+0x2d8>
                        par_start = i;
 8007efc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8007efe:	9325      	str	r3, [sp, #148]	; 0x94
                        cmd_state = CMD_STATE_PAR;
 8007f00:	000b      	movs	r3, r1
 8007f02:	e7d1      	b.n	8007ea8 <lv_draw_label+0x27c>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char */
 8007f04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d054      	beq.n	8007fb4 <lv_draw_label+0x388>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end */
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d000      	beq.n	8007f10 <lv_draw_label+0x2e4>
 8007f0e:	e10f      	b.n	8008130 <lv_draw_label+0x504>
                        cmd_state = CMD_STATE_WAIT;
 8007f10:	2300      	movs	r3, #0
 8007f12:	e7c9      	b.n	8007ea8 <lv_draw_label+0x27c>
                if(cmd_state == CMD_STATE_PAR) {
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d000      	beq.n	8007f1a <lv_draw_label+0x2ee>
 8007f18:	e10a      	b.n	8008130 <lv_draw_label+0x504>
                    if(letter == ' ') {
 8007f1a:	2e20      	cmp	r6, #32
 8007f1c:	d000      	beq.n	8007f20 <lv_draw_label+0x2f4>
 8007f1e:	e083      	b.n	8008028 <lv_draw_label+0x3fc>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 8007f20:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8007f22:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8007f24:	1a9b      	subs	r3, r3, r2
 8007f26:	2b07      	cmp	r3, #7
 8007f28:	d142      	bne.n	8007fb0 <lv_draw_label+0x384>
                            _lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 8007f2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
        *d8 = *s8;
 8007f2c:	ae3e      	add	r6, sp, #248	; 0xf8
 8007f2e:	1899      	adds	r1, r3, r2
 8007f30:	2300      	movs	r3, #0
 8007f32:	5cca      	ldrb	r2, [r1, r3]
 8007f34:	559a      	strb	r2, [r3, r6]
 8007f36:	3301      	adds	r3, #1
    while(len) {
 8007f38:	2b06      	cmp	r3, #6
 8007f3a:	d1fa      	bne.n	8007f32 <lv_draw_label+0x306>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 8007f3c:	7830      	ldrb	r0, [r6, #0]
 8007f3e:	f7ff fe49 	bl	8007bd4 <hex_char_to_num>
 8007f42:	0004      	movs	r4, r0
 8007f44:	7870      	ldrb	r0, [r6, #1]
 8007f46:	f7ff fe45 	bl	8007bd4 <hex_char_to_num>
 8007f4a:	0124      	lsls	r4, r4, #4
 8007f4c:	1824      	adds	r4, r4, r0
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 8007f4e:	78b0      	ldrb	r0, [r6, #2]
 8007f50:	f7ff fe40 	bl	8007bd4 <hex_char_to_num>
 8007f54:	0005      	movs	r5, r0
 8007f56:	78f0      	ldrb	r0, [r6, #3]
 8007f58:	f7ff fe3c 	bl	8007bd4 <hex_char_to_num>
 8007f5c:	012d      	lsls	r5, r5, #4
 8007f5e:	182d      	adds	r5, r5, r0
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 8007f60:	7930      	ldrb	r0, [r6, #4]
 8007f62:	f7ff fe37 	bl	8007bd4 <hex_char_to_num>
 8007f66:	900a      	str	r0, [sp, #40]	; 0x28
 8007f68:	7970      	ldrb	r0, [r6, #5]
 8007f6a:	f7ff fe33 	bl	8007bd4 <hex_char_to_num>
 8007f6e:	21c8      	movs	r1, #200	; 0xc8
 8007f70:	466a      	mov	r2, sp
 8007f72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f74:	1852      	adds	r2, r2, r1
 8007f76:	011e      	lsls	r6, r3, #4
 8007f78:	1836      	adds	r6, r6, r0
 8007f7a:	8812      	ldrh	r2, [r2, #0]
 8007f7c:	08f6      	lsrs	r6, r6, #3
 8007f7e:	231f      	movs	r3, #31
 8007f80:	0030      	movs	r0, r6
 8007f82:	0016      	movs	r6, r2
 8007f84:	4018      	ands	r0, r3
 8007f86:	439e      	bics	r6, r3
 8007f88:	466b      	mov	r3, sp
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
 8007f8a:	b2ed      	uxtb	r5, r5
 8007f8c:	08ad      	lsrs	r5, r5, #2
 8007f8e:	4306      	orrs	r6, r0
 8007f90:	0168      	lsls	r0, r5, #5
 8007f92:	4d71      	ldr	r5, [pc, #452]	; (8008158 <lv_draw_label+0x52c>)
 8007f94:	b2e4      	uxtb	r4, r4
 8007f96:	4035      	ands	r5, r6
 8007f98:	4305      	orrs	r5, r0
 8007f9a:	08e4      	lsrs	r4, r4, #3
 8007f9c:	02e0      	lsls	r0, r4, #11
 8007f9e:	056c      	lsls	r4, r5, #21
 8007fa0:	0d64      	lsrs	r4, r4, #21
 8007fa2:	4304      	orrs	r4, r0
 8007fa4:	185b      	adds	r3, r3, r1
 8007fa6:	801c      	strh	r4, [r3, #0]
 8007fa8:	b2a3      	uxth	r3, r4
                            recolor.full = dsc->color.full;
 8007faa:	9329      	str	r3, [sp, #164]	; 0xa4
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 8007fac:	2302      	movs	r3, #2
 8007fae:	e77b      	b.n	8007ea8 <lv_draw_label+0x27c>
                            recolor.full = dsc->color.full;
 8007fb0:	883b      	ldrh	r3, [r7, #0]
 8007fb2:	e7fa      	b.n	8007faa <lv_draw_label+0x37e>
                        cmd_state = CMD_STATE_WAIT;
 8007fb4:	2300      	movs	r3, #0
            lv_color_t color = dsc->color;
 8007fb6:	883c      	ldrh	r4, [r7, #0]
                        cmd_state = CMD_STATE_WAIT;
 8007fb8:	930c      	str	r3, [sp, #48]	; 0x30
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8007fba:	0031      	movs	r1, r6
 8007fbc:	9805      	ldr	r0, [sp, #20]
 8007fbe:	f002 fe8d 	bl	800acdc <lv_font_get_glyph_width>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 8007fc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8007fc4:	9028      	str	r0, [sp, #160]	; 0xa0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 8007fc6:	001a      	movs	r2, r3
 8007fc8:	4b60      	ldr	r3, [pc, #384]	; (800814c <lv_draw_label+0x520>)
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d01d      	beq.n	800800a <lv_draw_label+0x3de>
 8007fce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d01a      	beq.n	800800a <lv_draw_label+0x3de>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
 8007fd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007fd6:	42ab      	cmp	r3, r5
 8007fd8:	d817      	bhi.n	800800a <lv_draw_label+0x3de>
 8007fda:	42aa      	cmp	r2, r5
 8007fdc:	d915      	bls.n	800800a <lv_draw_label+0x3de>
                    sel_coords.x1 = pos.x;
 8007fde:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007fe0:	a83e      	add	r0, sp, #248	; 0xf8
 8007fe2:	8003      	strh	r3, [r0, #0]
                    sel_coords.y1 = pos.y;
 8007fe4:	9b08      	ldr	r3, [sp, #32]
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 8007fe6:	9a12      	ldr	r2, [sp, #72]	; 0x48
                    sel_coords.y1 = pos.y;
 8007fe8:	8043      	strh	r3, [r0, #2]
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 8007fea:	8a3b      	ldrh	r3, [r7, #16]
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
 8007fec:	9904      	ldr	r1, [sp, #16]
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	18d3      	adds	r3, r2, r3
 8007ff2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8007ff4:	18d3      	adds	r3, r2, r3
 8007ff6:	8083      	strh	r3, [r0, #4]
                    sel_coords.y2 = pos.y + line_height - 1;
 8007ff8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8007ffa:	9a08      	ldr	r2, [sp, #32]
 8007ffc:	3b01      	subs	r3, #1
 8007ffe:	18d3      	adds	r3, r2, r3
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
 8008000:	aa41      	add	r2, sp, #260	; 0x104
                    sel_coords.y2 = pos.y + line_height - 1;
 8008002:	80c3      	strh	r3, [r0, #6]
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
 8008004:	f001 fe7e 	bl	8009d04 <lv_draw_rect>
                    color = dsc->sel_color;
 8008008:	887c      	ldrh	r4, [r7, #2]
    if(opa < LV_OPA_MIN) return;
 800800a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800800c:	2b01      	cmp	r3, #1
 800800e:	d901      	bls.n	8008014 <lv_draw_label+0x3e8>
 8008010:	f000 fbee 	bl	80087f0 <lv_draw_label+0xbc4>
            if(letter_w > 0) {
 8008014:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d006      	beq.n	8008028 <lv_draw_label+0x3fc>
                pos.x += letter_w + dsc->letter_space;
 800801a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800801c:	8a3c      	ldrh	r4, [r7, #16]
 800801e:	18e4      	adds	r4, r4, r3
 8008020:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008022:	191c      	adds	r4, r3, r4
 8008024:	b223      	sxth	r3, r4
 8008026:	9312      	str	r3, [sp, #72]	; 0x48
        while(i < line_end - line_start) {
 8008028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800802a:	9a07      	ldr	r2, [sp, #28]
 800802c:	9936      	ldr	r1, [sp, #216]	; 0xd8
 800802e:	1a9b      	subs	r3, r3, r2
 8008030:	428b      	cmp	r3, r1
 8008032:	d900      	bls.n	8008036 <lv_draw_label+0x40a>
 8008034:	e73a      	b.n	8007eac <lv_draw_label+0x280>
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
 8008036:	1cfb      	adds	r3, r7, #3
 8008038:	7fdb      	ldrb	r3, [r3, #31]
 800803a:	079b      	lsls	r3, r3, #30
 800803c:	d51a      	bpl.n	8008074 <lv_draw_label+0x448>
            p1.x = pos_x_start;
 800803e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008040:	a839      	add	r0, sp, #228	; 0xe4
 8008042:	8003      	strh	r3, [r0, #0]
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	2208      	movs	r2, #8
 8008048:	5e9b      	ldrsh	r3, [r3, r2]
 800804a:	0fda      	lsrs	r2, r3, #31
 800804c:	18d2      	adds	r2, r2, r3
 800804e:	ab3b      	add	r3, sp, #236	; 0xec
 8008050:	2102      	movs	r1, #2
 8008052:	5e5c      	ldrsh	r4, [r3, r1]
 8008054:	1052      	asrs	r2, r2, #1
 8008056:	0fe1      	lsrs	r1, r4, #31
 8008058:	1909      	adds	r1, r1, r4
 800805a:	1049      	asrs	r1, r1, #1
 800805c:	1852      	adds	r2, r2, r1
 800805e:	9923      	ldr	r1, [sp, #140]	; 0x8c
            p2.x = pos.x;
 8008060:	9c12      	ldr	r4, [sp, #72]	; 0x48
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 8008062:	188a      	adds	r2, r1, r2
 8008064:	b212      	sxth	r2, r2
            p2.x = pos.x;
 8008066:	a93e      	add	r1, sp, #248	; 0xf8
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 8008068:	8042      	strh	r2, [r0, #2]
            p2.y = p1.y;
 800806a:	804a      	strh	r2, [r1, #2]
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800806c:	9a04      	ldr	r2, [sp, #16]
            p2.x = pos.x;
 800806e:	800c      	strh	r4, [r1, #0]
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 8008070:	f000 fc4c 	bl	800890c <lv_draw_line>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
 8008074:	2201      	movs	r2, #1
 8008076:	1cfb      	adds	r3, r7, #3
 8008078:	7fdb      	ldrb	r3, [r3, #31]
 800807a:	4213      	tst	r3, r2
 800807c:	d016      	beq.n	80080ac <lv_draw_label+0x480>
            p1.x = pos_x_start;
 800807e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008080:	a839      	add	r0, sp, #228	; 0xe4
 8008082:	8003      	strh	r3, [r0, #0]
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 8008084:	9b05      	ldr	r3, [sp, #20]
 8008086:	68b9      	ldr	r1, [r7, #8]
 8008088:	7b5b      	ldrb	r3, [r3, #13]
 800808a:	894a      	ldrh	r2, [r1, #10]
 800808c:	b25b      	sxtb	r3, r3
 800808e:	189a      	adds	r2, r3, r2
 8008090:	890b      	ldrh	r3, [r1, #8]
            p2.x = pos.x;
 8008092:	a93e      	add	r1, sp, #248	; 0xf8
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 8008094:	1a9b      	subs	r3, r3, r2
 8008096:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008098:	18d3      	adds	r3, r2, r3
            p2.x = pos.x;
 800809a:	9a12      	ldr	r2, [sp, #72]	; 0x48
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800809c:	b21b      	sxth	r3, r3
 800809e:	8043      	strh	r3, [r0, #2]
            p2.x = pos.x;
 80080a0:	800a      	strh	r2, [r1, #0]
            p2.y = p1.y;
 80080a2:	804b      	strh	r3, [r1, #2]
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 80080a4:	9a04      	ldr	r2, [sp, #16]
 80080a6:	ab3b      	add	r3, sp, #236	; 0xec
 80080a8:	f000 fc30 	bl	800890c <lv_draw_line>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 80080ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080b0:	1cbe      	adds	r6, r7, #2
 80080b2:	189d      	adds	r5, r3, r2
 80080b4:	2310      	movs	r3, #16
 80080b6:	5efa      	ldrsh	r2, [r7, r3]
 80080b8:	7ff3      	ldrb	r3, [r6, #31]
 80080ba:	9905      	ldr	r1, [sp, #20]
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	0028      	movs	r0, r5
 80080c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80080c2:	f004 fbbb 	bl	800c83c <_lv_txt_get_next_line>
 80080c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c8:	0001      	movs	r1, r0
 80080ca:	181b      	adds	r3, r3, r0
 80080cc:	930a      	str	r3, [sp, #40]	; 0x28
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
 80080ce:	7ff2      	ldrb	r2, [r6, #31]
        pos.x = coords->x1;
 80080d0:	9b06      	ldr	r3, [sp, #24]
 80080d2:	2400      	movs	r4, #0
 80080d4:	5f1c      	ldrsh	r4, [r3, r4]
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
 80080d6:	0753      	lsls	r3, r2, #29
 80080d8:	d400      	bmi.n	80080dc <lv_draw_label+0x4b0>
 80080da:	e368      	b.n	80087ae <lv_draw_label+0xb82>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 80080dc:	2010      	movs	r0, #16
 80080de:	5e3b      	ldrsh	r3, [r7, r0]
 80080e0:	9200      	str	r2, [sp, #0]
 80080e2:	0028      	movs	r0, r5
 80080e4:	9a05      	ldr	r2, [sp, #20]
 80080e6:	f004 fb5f 	bl	800c7a8 <_lv_txt_get_width>
 80080ea:	9b06      	ldr	r3, [sp, #24]
 80080ec:	9a06      	ldr	r2, [sp, #24]
 80080ee:	889b      	ldrh	r3, [r3, #4]
 80080f0:	8812      	ldrh	r2, [r2, #0]
 80080f2:	3301      	adds	r3, #1
 80080f4:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 80080f6:	b21b      	sxth	r3, r3
 80080f8:	1a18      	subs	r0, r3, r0
 80080fa:	0fc3      	lsrs	r3, r0, #31
 80080fc:	1818      	adds	r0, r3, r0
 80080fe:	1040      	asrs	r0, r0, #1
            pos.x += lv_area_get_width(coords) - line_width;
 8008100:	1904      	adds	r4, r0, r4
 8008102:	b224      	sxth	r4, r4
 8008104:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8008106:	9b08      	ldr	r3, [sp, #32]
 8008108:	4694      	mov	ip, r2
 800810a:	4463      	add	r3, ip
 800810c:	b21b      	sxth	r3, r3
 800810e:	9308      	str	r3, [sp, #32]
 8008110:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008112:	4463      	add	r3, ip
 8008114:	b29b      	uxth	r3, r3
 8008116:	9323      	str	r3, [sp, #140]	; 0x8c
        line_start = line_end;
 8008118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800811a:	9307      	str	r3, [sp, #28]
        if(pos.y > mask->y2) return;
 800811c:	9b04      	ldr	r3, [sp, #16]
 800811e:	2206      	movs	r2, #6
 8008120:	5e9b      	ldrsh	r3, [r3, r2]
 8008122:	9a08      	ldr	r2, [sp, #32]
 8008124:	4293      	cmp	r3, r2
 8008126:	da00      	bge.n	800812a <lv_draw_label+0x4fe>
 8008128:	e663      	b.n	8007df2 <lv_draw_label+0x1c6>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800812a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800812c:	9309      	str	r3, [sp, #36]	; 0x24
 800812e:	e658      	b.n	8007de2 <lv_draw_label+0x1b6>
            if(cmd_state == CMD_STATE_IN) color = recolor;
 8008130:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            lv_color_t color = dsc->color;
 8008132:	883c      	ldrh	r4, [r7, #0]
            if(cmd_state == CMD_STATE_IN) color = recolor;
 8008134:	2b02      	cmp	r3, #2
 8008136:	d000      	beq.n	800813a <lv_draw_label+0x50e>
 8008138:	e73f      	b.n	8007fba <lv_draw_label+0x38e>
 800813a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800813c:	e73d      	b.n	8007fba <lv_draw_label+0x38e>
 800813e:	46c0      	nop			; (mov r8, r8)
 8008140:	00007c18 	.word	0x00007c18
 8008144:	fffffc00 	.word	0xfffffc00
 8008148:	0800e319 	.word	0x0800e319
 800814c:	0000ffff 	.word	0x0000ffff
 8008150:	2000004c 	.word	0x2000004c
 8008154:	20000050 	.word	0x20000050
 8008158:	fffff81f 	.word	0xfffff81f
    switch(bpp) {
 800815c:	2302      	movs	r3, #2
 800815e:	930a      	str	r3, [sp, #40]	; 0x28
            bitmask_init  = 0xC0;
 8008160:	33be      	adds	r3, #190	; 0xbe
 8008162:	9317      	str	r3, [sp, #92]	; 0x5c
            bpp_opa_table = _lv_bpp2_opa_table;
 8008164:	4bd8      	ldr	r3, [pc, #864]	; (80084c8 <lv_draw_label+0x89c>)
            bpp_opa_table = _lv_bpp1_opa_table;
 8008166:	9318      	str	r3, [sp, #96]	; 0x60
    int32_t box_w = g->box_w;
 8008168:	ab3e      	add	r3, sp, #248	; 0xf8
 800816a:	885a      	ldrh	r2, [r3, #2]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 800816c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    int32_t box_w = g->box_w;
 800816e:	921b      	str	r2, [sp, #108]	; 0x6c
    int32_t box_h = g->box_h;
 8008170:	889e      	ldrh	r6, [r3, #4]
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
 8008172:	9b04      	ldr	r3, [sp, #16]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 8008174:	4354      	muls	r4, r2
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
 8008176:	2200      	movs	r2, #0
 8008178:	5e9b      	ldrsh	r3, [r3, r2]
 800817a:	2200      	movs	r2, #0
 800817c:	9216      	str	r2, [sp, #88]	; 0x58
 800817e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008180:	4293      	cmp	r3, r2
 8008182:	dd03      	ble.n	800818c <lv_draw_label+0x560>
 8008184:	1a9b      	subs	r3, r3, r2
 8008186:	2203      	movs	r2, #3
 8008188:	435a      	muls	r2, r3
 800818a:	9216      	str	r2, [sp, #88]	; 0x58
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
 800818c:	9b04      	ldr	r3, [sp, #16]
 800818e:	2103      	movs	r1, #3
 8008190:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008192:	2504      	movs	r5, #4
 8008194:	5f5d      	ldrsh	r5, [r3, r5]
 8008196:	f7f8 f877 	bl	8000288 <__divsi3>
 800819a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800819c:	18c0      	adds	r0, r0, r3
 800819e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081a0:	931d      	str	r3, [sp, #116]	; 0x74
 80081a2:	42a8      	cmp	r0, r5
 80081a4:	dd05      	ble.n	80081b2 <lv_draw_label+0x586>
 80081a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081a8:	1aed      	subs	r5, r5, r3
 80081aa:	2303      	movs	r3, #3
 80081ac:	3501      	adds	r5, #1
 80081ae:	436b      	muls	r3, r5
 80081b0:	931d      	str	r3, [sp, #116]	; 0x74
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
 80081b2:	9b04      	ldr	r3, [sp, #16]
 80081b4:	2202      	movs	r2, #2
 80081b6:	5e9b      	ldrsh	r3, [r3, r2]
 80081b8:	2200      	movs	r2, #0
 80081ba:	9213      	str	r2, [sp, #76]	; 0x4c
 80081bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081be:	4293      	cmp	r3, r2
 80081c0:	dd01      	ble.n	80081c6 <lv_draw_label+0x59a>
 80081c2:	1a9b      	subs	r3, r3, r2
 80081c4:	9313      	str	r3, [sp, #76]	; 0x4c
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 80081c6:	9b04      	ldr	r3, [sp, #16]
 80081c8:	2206      	movs	r2, #6
 80081ca:	5e9b      	ldrsh	r3, [r3, r2]
 80081cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081ce:	962a      	str	r6, [sp, #168]	; 0xa8
 80081d0:	18b2      	adds	r2, r6, r2
 80081d2:	429a      	cmp	r2, r3
 80081d4:	dd03      	ble.n	80081de <lv_draw_label+0x5b2>
 80081d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081d8:	1a9b      	subs	r3, r3, r2
 80081da:	3301      	adds	r3, #1
 80081dc:	932a      	str	r3, [sp, #168]	; 0xa8
    int32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 80081de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80081e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081e2:	435c      	muls	r4, r3
 80081e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80081e6:	4353      	muls	r3, r2
    map_p += bit_ofs >> 3;
 80081e8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    int32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 80081ea:	18e4      	adds	r4, r4, r3
    map_p += bit_ofs >> 3;
 80081ec:	10e3      	asrs	r3, r4, #3
 80081ee:	18d3      	adds	r3, r2, r3
 80081f0:	931e      	str	r3, [sp, #120]	; 0x78
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 80081f2:	2307      	movs	r3, #7
 80081f4:	401c      	ands	r4, r3
    int32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : g->box_w * g->box_h;
 80081f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 80081f8:	940f      	str	r4, [sp, #60]	; 0x3c
    int32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : g->box_w * g->box_h;
 80081fa:	4373      	muls	r3, r6
 80081fc:	931f      	str	r3, [sp, #124]	; 0x7c
 80081fe:	2ba0      	cmp	r3, #160	; 0xa0
 8008200:	dd01      	ble.n	8008206 <lv_draw_label+0x5da>
 8008202:	23a0      	movs	r3, #160	; 0xa0
 8008204:	931f      	str	r3, [sp, #124]	; 0x7c
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 8008206:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8008208:	f003 ffd8 	bl	800c1bc <_lv_mem_buf_get>
    lv_color_t * color_buf = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800820c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800820e:	901c      	str	r0, [sp, #112]	; 0x70
    lv_color_t * color_buf = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 8008210:	0058      	lsls	r0, r3, #1
 8008212:	f003 ffd3 	bl	800c1bc <_lv_mem_buf_get>
 8008216:	9022      	str	r0, [sp, #136]	; 0x88
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 8008218:	f7fd fdca 	bl	8005db0 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800821c:	f003 f922 	bl	800b464 <lv_disp_get_buf>
 8008220:	0005      	movs	r5, r0
    int32_t vdb_width     = lv_area_get_width(&vdb->area);
 8008222:	2310      	movs	r3, #16
 8008224:	5ec6      	ldrsh	r6, [r0, r3]
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 8008226:	6883      	ldr	r3, [r0, #8]
 8008228:	8a84      	ldrh	r4, [r0, #20]
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
 800822a:	2103      	movs	r1, #3
 800822c:	9816      	ldr	r0, [sp, #88]	; 0x58
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 800822e:	932c      	str	r3, [sp, #176]	; 0xb0
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
 8008230:	f7f8 f82a 	bl	8000288 <__divsi3>
 8008234:	3401      	adds	r4, #1
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 8008236:	2212      	movs	r2, #18
 8008238:	5eab      	ldrsh	r3, [r5, r2]
 800823a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800823c:	1ba4      	subs	r4, r4, r6
 800823e:	b224      	sxth	r4, r4
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	4363      	muls	r3, r4
 8008244:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    map_area.x1 = col_start / 3 + pos_x;
 8008246:	ad39      	add	r5, sp, #228	; 0xe4
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 8008248:	189b      	adds	r3, r3, r2
 800824a:	1b9e      	subs	r6, r3, r6
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
 800824c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    map_area.x1 = col_start / 3 + pos_x;
 800824e:	2264      	movs	r2, #100	; 0x64
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
 8008250:	4363      	muls	r3, r4
 8008252:	181b      	adds	r3, r3, r0
 8008254:	18f6      	adds	r6, r6, r3
 8008256:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8008258:	0076      	lsls	r6, r6, #1
 800825a:	199b      	adds	r3, r3, r6
 800825c:	930d      	str	r3, [sp, #52]	; 0x34
    map_area.x1 = col_start / 3 + pos_x;
 800825e:	466b      	mov	r3, sp
 8008260:	189b      	adds	r3, r3, r2
 8008262:	881e      	ldrh	r6, [r3, #0]
    map_area.x2 = col_end / 3  + pos_x - 1;
 8008264:	2103      	movs	r1, #3
    map_area.x1 = col_start / 3 + pos_x;
 8008266:	1830      	adds	r0, r6, r0
 8008268:	8028      	strh	r0, [r5, #0]
    map_area.x2 = col_end / 3  + pos_x - 1;
 800826a:	981d      	ldr	r0, [sp, #116]	; 0x74
 800826c:	f7f8 f80c 	bl	8000288 <__divsi3>
    map_area.y1 = row_start + pos_y;
 8008270:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008272:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008274:	4694      	mov	ip, r2
    map_area.x2 = col_end / 3  + pos_x - 1;
 8008276:	3e01      	subs	r6, #1
    map_area.y1 = row_start + pos_y;
 8008278:	4463      	add	r3, ip
 800827a:	b21b      	sxth	r3, r3
    map_area.x2 = col_end / 3  + pos_x - 1;
 800827c:	1986      	adds	r6, r0, r6
    map_area.y1 = row_start + pos_y;
 800827e:	806b      	strh	r3, [r5, #2]
    map_area.y2 = map_area.y1;
 8008280:	80eb      	strh	r3, [r5, #6]
    map_area.x2 = col_end / 3  + pos_x - 1;
 8008282:	80ae      	strh	r6, [r5, #4]
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 8008284:	f001 fbfa 	bl	8009a7c <lv_draw_mask_get_cnt>
        if((int32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 8008288:	9a16      	ldr	r2, [sp, #88]	; 0x58
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
 800828a:	2103      	movs	r1, #3
        col_bit += ((box_w - col_end) + col_start) * bpp;
 800828c:	4694      	mov	ip, r2
        if((int32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 800828e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 8008290:	9033      	str	r0, [sp, #204]	; 0xcc
        if((int32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 8008292:	1a9b      	subs	r3, r3, r2
 8008294:	931a      	str	r3, [sp, #104]	; 0x68
        col_bit += ((box_w - col_end) + col_start) * bpp;
 8008296:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008298:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800829a:	4463      	add	r3, ip
 800829c:	1a9b      	subs	r3, r3, r2
 800829e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
 80082a0:	4249      	negs	r1, r1
        col_bit += ((box_w - col_end) + col_start) * bpp;
 80082a2:	435a      	muls	r2, r3
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
 80082a4:	981a      	ldr	r0, [sp, #104]	; 0x68
        col_bit += ((box_w - col_end) + col_start) * bpp;
 80082a6:	922d      	str	r2, [sp, #180]	; 0xb4
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
 80082a8:	f7f7 ffee 	bl	8000288 <__divsi3>
 80082ac:	1904      	adds	r4, r0, r4
 80082ae:	0063      	lsls	r3, r4, #1
 80082b0:	932e      	str	r3, [sp, #184]	; 0xb8
    int32_t mask_p = 0;
 80082b2:	2300      	movs	r3, #0
 80082b4:	9319      	str	r3, [sp, #100]	; 0x64
    for(row = row_start ; row < row_end; row++) {
 80082b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80082b8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80082ba:	4293      	cmp	r3, r2
 80082bc:	db2c      	blt.n	8008318 <lv_draw_label+0x6ec>
    if(map_area.y1 != map_area.y2) {
 80082be:	a939      	add	r1, sp, #228	; 0xe4
 80082c0:	2206      	movs	r2, #6
 80082c2:	5e8b      	ldrsh	r3, [r1, r2]
 80082c4:	2002      	movs	r0, #2
 80082c6:	5e0a      	ldrsh	r2, [r1, r0]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d00c      	beq.n	80082e6 <lv_draw_label+0x6ba>
        map_area.y2--;
 80082cc:	3b01      	subs	r3, #1
 80082ce:	80cb      	strh	r3, [r1, #6]
        _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
 80082d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80082d2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80082d4:	9302      	str	r3, [sp, #8]
 80082d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082d8:	9804      	ldr	r0, [sp, #16]
 80082da:	9301      	str	r3, [sp, #4]
 80082dc:	2302      	movs	r3, #2
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80082e2:	f7fe fe93 	bl	800700c <_lv_blend_map>
    _lv_mem_buf_release(mask_buf);
 80082e6:	981c      	ldr	r0, [sp, #112]	; 0x70
 80082e8:	f003 fe70 	bl	800bfcc <_lv_mem_buf_release>
    _lv_mem_buf_release(color_buf);
 80082ec:	9822      	ldr	r0, [sp, #136]	; 0x88
    _lv_mem_buf_release(mask_buf);
 80082ee:	f003 fe6d 	bl	800bfcc <_lv_mem_buf_release>
 80082f2:	e68f      	b.n	8008014 <lv_draw_label+0x3e8>
        case 8:
 80082f4:	2308      	movs	r3, #8
 80082f6:	930a      	str	r3, [sp, #40]	; 0x28
            bitmask_init  = 0xFF;
 80082f8:	33f7      	adds	r3, #247	; 0xf7
 80082fa:	9317      	str	r3, [sp, #92]	; 0x5c
            bpp_opa_table = _lv_bpp8_opa_table;
 80082fc:	4b73      	ldr	r3, [pc, #460]	; (80084cc <lv_draw_label+0x8a0>)
 80082fe:	e732      	b.n	8008166 <lv_draw_label+0x53a>
    if(bpp == 3) bpp = 4;
 8008300:	2304      	movs	r3, #4
 8008302:	930a      	str	r3, [sp, #40]	; 0x28
            bitmask_init  = 0xF0;
 8008304:	33ec      	adds	r3, #236	; 0xec
 8008306:	9317      	str	r3, [sp, #92]	; 0x5c
            bpp_opa_table = _lv_bpp4_opa_table;
 8008308:	4b71      	ldr	r3, [pc, #452]	; (80084d0 <lv_draw_label+0x8a4>)
 800830a:	e72c      	b.n	8008166 <lv_draw_label+0x53a>
    switch(bpp) {
 800830c:	2301      	movs	r3, #1
 800830e:	930a      	str	r3, [sp, #40]	; 0x28
            bitmask_init  = 0x80;
 8008310:	337f      	adds	r3, #127	; 0x7f
 8008312:	9317      	str	r3, [sp, #92]	; 0x5c
            bpp_opa_table = _lv_bpp1_opa_table;
 8008314:	4b6f      	ldr	r3, [pc, #444]	; (80084d4 <lv_draw_label+0x8a8>)
 8008316:	e726      	b.n	8008166 <lv_draw_label+0x53a>
        bitmask = bitmask_init >> col_bit;
 8008318:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800831a:	9917      	ldr	r1, [sp, #92]	; 0x5c
        uint32_t subpx_cnt = 0;
 800831c:	2200      	movs	r2, #0
        bitmask = bitmask_init >> col_bit;
 800831e:	40d9      	lsrs	r1, r3
        for(col = col_start; col < col_end; col++) {
 8008320:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008322:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008324:	930e      	str	r3, [sp, #56]	; 0x38
 8008326:	2308      	movs	r3, #8
        bitmask = bitmask_init >> col_bit;
 8008328:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800832a:	1a1b      	subs	r3, r3, r0
 800832c:	931b      	str	r3, [sp, #108]	; 0x6c
        for(col = col_start; col < col_end; col++) {
 800832e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008330:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008332:	4283      	cmp	r3, r0
 8008334:	dc3c      	bgt.n	80083b0 <lv_draw_label+0x784>
        if(other_mask_cnt) {
 8008336:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8008338:	2b00      	cmp	r3, #0
 800833a:	d019      	beq.n	8008370 <lv_draw_label+0x744>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, map_area.x1, map_area.y2,
 800833c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800833e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008340:	ac39      	add	r4, sp, #228	; 0xe4
 8008342:	189b      	adds	r3, r3, r2
 8008344:	001e      	movs	r6, r3
 8008346:	2300      	movs	r3, #0
 8008348:	5ee1      	ldrsh	r1, [r4, r3]
 800834a:	88a3      	ldrh	r3, [r4, #4]
 800834c:	2006      	movs	r0, #6
 800834e:	5e22      	ldrsh	r2, [r4, r0]
 8008350:	3301      	adds	r3, #1
 8008352:	1a5b      	subs	r3, r3, r1
 8008354:	b21b      	sxth	r3, r3
 8008356:	0030      	movs	r0, r6
 8008358:	f001 fb4e 	bl	80099f8 <lv_draw_mask_apply>
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800835c:	2800      	cmp	r0, #0
 800835e:	d107      	bne.n	8008370 <lv_draw_label+0x744>
 8008360:	88a1      	ldrh	r1, [r4, #4]
 8008362:	8823      	ldrh	r3, [r4, #0]
 8008364:	3101      	adds	r1, #1
 8008366:	1ac9      	subs	r1, r1, r3
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&map_area));
 8008368:	b209      	sxth	r1, r1
 800836a:	0030      	movs	r0, r6
 800836c:	f003 ffae 	bl	800c2cc <_lv_memset_00>
        if((int32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 8008370:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008372:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008374:	18eb      	adds	r3, r5, r3
 8008376:	ac39      	add	r4, sp, #228	; 0xe4
 8008378:	4293      	cmp	r3, r2
 800837a:	db00      	blt.n	800837e <lv_draw_label+0x752>
 800837c:	e0ae      	b.n	80084dc <lv_draw_label+0x8b0>
            map_area.y2 ++;
 800837e:	88e3      	ldrh	r3, [r4, #6]
 8008380:	3301      	adds	r3, #1
 8008382:	80e3      	strh	r3, [r4, #6]
        col_bit += ((box_w - col_end) + col_start) * bpp;
 8008384:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8008386:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008388:	4694      	mov	ip, r2
        map_p += (col_bit >> 3);
 800838a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
        col_bit += ((box_w - col_end) + col_start) * bpp;
 800838c:	4463      	add	r3, ip
 800838e:	001c      	movs	r4, r3
        map_p += (col_bit >> 3);
 8008390:	10db      	asrs	r3, r3, #3
 8008392:	18d3      	adds	r3, r2, r3
 8008394:	931e      	str	r3, [sp, #120]	; 0x78
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
 8008396:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
        col_bit = col_bit & 0x7;
 8008398:	2307      	movs	r3, #7
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
 800839a:	4694      	mov	ip, r2
        col_bit = col_bit & 0x7;
 800839c:	401c      	ands	r4, r3
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
 800839e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        col_bit = col_bit & 0x7;
 80083a0:	940f      	str	r4, [sp, #60]	; 0x3c
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
 80083a2:	4463      	add	r3, ip
 80083a4:	930d      	str	r3, [sp, #52]	; 0x34
    for(row = row_start ; row < row_end; row++) {
 80083a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083a8:	9519      	str	r5, [sp, #100]	; 0x64
 80083aa:	3301      	adds	r3, #1
 80083ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80083ae:	e782      	b.n	80082b6 <lv_draw_label+0x68a>
            letter_px = (*map_p & bitmask) >> (8 - col_bit - bpp);
 80083b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80083b2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80083b4:	7818      	ldrb	r0, [r3, #0]
 80083b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083b8:	4008      	ands	r0, r1
 80083ba:	1b1b      	subs	r3, r3, r4
 80083bc:	40d8      	lsrs	r0, r3
 80083be:	b2c3      	uxtb	r3, r0
            if(letter_px != 0) {
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d009      	beq.n	80083d8 <lv_draw_label+0x7ac>
                if(opa == LV_OPA_COVER) {
 80083c4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80083c6:	2cff      	cmp	r4, #255	; 0xff
 80083c8:	d165      	bne.n	8008496 <lv_draw_label+0x86a>
                    px_opa = bpp == 8 ? letter_px : bpp_opa_table[letter_px];
 80083ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80083cc:	2c08      	cmp	r4, #8
 80083ce:	d003      	beq.n	80083d8 <lv_draw_label+0x7ac>
 80083d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083d2:	4018      	ands	r0, r3
 80083d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80083d6:	5c1b      	ldrb	r3, [r3, r0]
            font_rgb[subpx_cnt] = px_opa;
 80083d8:	ac35      	add	r4, sp, #212	; 0xd4
 80083da:	54a3      	strb	r3, [r4, r2]
            subpx_cnt ++;
 80083dc:	3201      	adds	r2, #1
            if(subpx_cnt == 3) {
 80083de:	2a03      	cmp	r2, #3
 80083e0:	d14c      	bne.n	800847c <lv_draw_label+0x850>
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
 80083e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
 80083e4:	7826      	ldrb	r6, [r4, #0]
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
 80083e6:	785b      	ldrb	r3, [r3, #1]
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
 80083e8:	32fc      	adds	r2, #252	; 0xfc
 80083ea:	982f      	ldr	r0, [sp, #188]	; 0xbc
 80083ec:	1b92      	subs	r2, r2, r6
 80083ee:	08db      	lsrs	r3, r3, #3
 80083f0:	4353      	muls	r3, r2
 80083f2:	4370      	muls	r0, r6
 80083f4:	181b      	adds	r3, r3, r0
 80083f6:	201f      	movs	r0, #31
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
 80083f8:	22ff      	movs	r2, #255	; 0xff
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
 80083fa:	0a1b      	lsrs	r3, r3, #8
 80083fc:	4018      	ands	r0, r3
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
 80083fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
 8008400:	4684      	mov	ip, r0
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
 8008402:	781b      	ldrb	r3, [r3, #0]
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
 8008404:	78a0      	ldrb	r0, [r4, #2]
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
 8008406:	06db      	lsls	r3, r3, #27
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
 8008408:	1a12      	subs	r2, r2, r0
 800840a:	0edb      	lsrs	r3, r3, #27
 800840c:	4353      	muls	r3, r2
 800840e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8008410:	4342      	muls	r2, r0
 8008412:	189a      	adds	r2, r3, r2
 8008414:	231f      	movs	r3, #31
 8008416:	0a12      	lsrs	r2, r2, #8
 8008418:	4013      	ands	r3, r2
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
 800841a:	22ff      	movs	r2, #255	; 0xff
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
 800841c:	932c      	str	r3, [sp, #176]	; 0xb0
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
 800841e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
 8008420:	7864      	ldrb	r4, [r4, #1]
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
 8008422:	881b      	ldrh	r3, [r3, #0]
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
 8008424:	1b12      	subs	r2, r2, r4
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
 8008426:	055b      	lsls	r3, r3, #21
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
 8008428:	0e9b      	lsrs	r3, r3, #26
 800842a:	4353      	muls	r3, r2
 800842c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800842e:	4362      	muls	r2, r4
 8008430:	189b      	adds	r3, r3, r2
 8008432:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008434:	049b      	lsls	r3, r3, #18
 8008436:	0e9b      	lsrs	r3, r3, #26
 8008438:	1952      	adds	r2, r2, r5
                if(font_rgb[0] == 0 && font_rgb[1] == 0 && font_rgb[2] == 0) mask_buf[mask_p] = LV_OPA_TRANSP;
 800843a:	2e00      	cmp	r6, #0
 800843c:	d13a      	bne.n	80084b4 <lv_draw_label+0x888>
 800843e:	2c00      	cmp	r4, #0
 8008440:	d138      	bne.n	80084b4 <lv_draw_label+0x888>
 8008442:	2800      	cmp	r0, #0
 8008444:	d136      	bne.n	80084b4 <lv_draw_label+0x888>
                color_buf[mask_p] = res_color;
 8008446:	261f      	movs	r6, #31
                else mask_buf[mask_p] = LV_OPA_COVER;
 8008448:	7010      	strb	r0, [r2, #0]
                color_buf[mask_p] = res_color;
 800844a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800844c:	0068      	lsls	r0, r5, #1
 800844e:	1810      	adds	r0, r2, r0
 8008450:	7804      	ldrb	r4, [r0, #0]
 8008452:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8008454:	43b4      	bics	r4, r6
 8008456:	4314      	orrs	r4, r2
 8008458:	7004      	strb	r4, [r0, #0]
 800845a:	8802      	ldrh	r2, [r0, #0]
 800845c:	4c1e      	ldr	r4, [pc, #120]	; (80084d8 <lv_draw_label+0x8ac>)
 800845e:	015b      	lsls	r3, r3, #5
 8008460:	4022      	ands	r2, r4
 8008462:	4313      	orrs	r3, r2
 8008464:	4662      	mov	r2, ip
 8008466:	00d6      	lsls	r6, r2, #3
                subpx_cnt = 0;
 8008468:	2200      	movs	r2, #0
                color_buf[mask_p] = res_color;
 800846a:	8003      	strh	r3, [r0, #0]
 800846c:	055b      	lsls	r3, r3, #21
 800846e:	0f5b      	lsrs	r3, r3, #29
 8008470:	4333      	orrs	r3, r6
 8008472:	7043      	strb	r3, [r0, #1]
                vdb_buf_tmp++;
 8008474:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                mask_p++;
 8008476:	3501      	adds	r5, #1
                vdb_buf_tmp++;
 8008478:	3302      	adds	r3, #2
 800847a:	930d      	str	r3, [sp, #52]	; 0x34
            if(col_bit < (int32_t)(8 - bpp)) {
 800847c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800847e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008480:	4283      	cmp	r3, r0
 8008482:	da19      	bge.n	80084b8 <lv_draw_label+0x88c>
                col_bit += bpp;
 8008484:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008486:	4684      	mov	ip, r0
                bitmask = bitmask >> bpp;
 8008488:	40c1      	lsrs	r1, r0
                col_bit += bpp;
 800848a:	4463      	add	r3, ip
 800848c:	930f      	str	r3, [sp, #60]	; 0x3c
        for(col = col_start; col < col_end; col++) {
 800848e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008490:	3301      	adds	r3, #1
 8008492:	930e      	str	r3, [sp, #56]	; 0x38
 8008494:	e74b      	b.n	800832e <lv_draw_label+0x702>
 8008496:	23ff      	movs	r3, #255	; 0xff
 8008498:	4018      	ands	r0, r3
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
 800849a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800849c:	2b08      	cmp	r3, #8
 800849e:	d103      	bne.n	80084a8 <lv_draw_label+0x87c>
 80084a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084a2:	4358      	muls	r0, r3
 80084a4:	0a03      	lsrs	r3, r0, #8
 80084a6:	e797      	b.n	80083d8 <lv_draw_label+0x7ac>
                             : (uint32_t)((uint32_t)bpp_opa_table[letter_px] * opa) >> 8;
 80084a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80084aa:	5c1b      	ldrb	r3, [r3, r0]
 80084ac:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80084ae:	4343      	muls	r3, r0
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
 80084b0:	0a1b      	lsrs	r3, r3, #8
 80084b2:	e791      	b.n	80083d8 <lv_draw_label+0x7ac>
                else mask_buf[mask_p] = LV_OPA_COVER;
 80084b4:	20ff      	movs	r0, #255	; 0xff
 80084b6:	e7c6      	b.n	8008446 <lv_draw_label+0x81a>
                map_p++;
 80084b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
                bitmask = bitmask_init;
 80084ba:	9917      	ldr	r1, [sp, #92]	; 0x5c
                map_p++;
 80084bc:	3301      	adds	r3, #1
 80084be:	931e      	str	r3, [sp, #120]	; 0x78
                col_bit = 0;
 80084c0:	2300      	movs	r3, #0
 80084c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80084c4:	e7e3      	b.n	800848e <lv_draw_label+0x862>
 80084c6:	46c0      	nop			; (mov r8, r8)
 80084c8:	0800e322 	.word	0x0800e322
 80084cc:	0800e336 	.word	0x0800e336
 80084d0:	0800e326 	.word	0x0800e326
 80084d4:	0800e320 	.word	0x0800e320
 80084d8:	fffff81f 	.word	0xfffff81f
            _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
 80084dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80084de:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80084e0:	9302      	str	r3, [sp, #8]
 80084e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084e4:	0021      	movs	r1, r4
 80084e6:	9301      	str	r3, [sp, #4]
 80084e8:	2302      	movs	r3, #2
 80084ea:	9804      	ldr	r0, [sp, #16]
 80084ec:	9300      	str	r3, [sp, #0]
 80084ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80084f0:	f7fe fd8c 	bl	800700c <_lv_blend_map>
            map_area.y1 = map_area.y2 + 1;
 80084f4:	88e3      	ldrh	r3, [r4, #6]
            mask_p = 0;
 80084f6:	2500      	movs	r5, #0
            map_area.y1 = map_area.y2 + 1;
 80084f8:	3301      	adds	r3, #1
 80084fa:	b21b      	sxth	r3, r3
 80084fc:	8063      	strh	r3, [r4, #2]
            map_area.y2 = map_area.y1;
 80084fe:	80e3      	strh	r3, [r4, #6]
 8008500:	e740      	b.n	8008384 <lv_draw_label+0x758>
 8008502:	466b      	mov	r3, sp
 8008504:	2278      	movs	r2, #120	; 0x78
 8008506:	189b      	adds	r3, r3, r2
 8008508:	801c      	strh	r4, [r3, #0]
    if(bpp == 3) bpp = 4;
 800850a:	2803      	cmp	r0, #3
 800850c:	d100      	bne.n	8008510 <lv_draw_label+0x8e4>
 800850e:	e0c0      	b.n	8008692 <lv_draw_label+0xa66>
    switch(bpp) {
 8008510:	3801      	subs	r0, #1
 8008512:	2807      	cmp	r0, #7
 8008514:	d900      	bls.n	8008518 <lv_draw_label+0x8ec>
 8008516:	e57d      	b.n	8008014 <lv_draw_label+0x3e8>
 8008518:	f7f7 fe18 	bl	800014c <__gnu_thumb1_case_shi>
 800851c:	000800c2 	.word	0x000800c2
 8008520:	00bbfd7c 	.word	0x00bbfd7c
 8008524:	fd7cfd7c 	.word	0xfd7cfd7c
 8008528:	00b4fd7c 	.word	0x00b4fd7c
            bitmask_init  = 0xC0;
 800852c:	22c0      	movs	r2, #192	; 0xc0
    switch(bpp) {
 800852e:	2302      	movs	r3, #2
            bitmask_init  = 0xC0;
 8008530:	9216      	str	r2, [sp, #88]	; 0x58
            bpp_opa_table_p = _lv_bpp2_opa_table;
 8008532:	4aa8      	ldr	r2, [pc, #672]	; (80087d4 <lv_draw_label+0xba8>)
    switch(bpp) {
 8008534:	930a      	str	r3, [sp, #40]	; 0x28
            shades = 4;
 8008536:	18db      	adds	r3, r3, r3
            bpp_opa_table_p = _lv_bpp1_opa_table;
 8008538:	920f      	str	r2, [sp, #60]	; 0x3c
    if(opa < LV_OPA_MAX) {
 800853a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800853c:	2afc      	cmp	r2, #252	; 0xfc
 800853e:	d814      	bhi.n	800856a <lv_draw_label+0x93e>
        if(prev_opa != opa || prev_bpp != bpp) {
 8008540:	4aa5      	ldr	r2, [pc, #660]	; (80087d8 <lv_draw_label+0xbac>)
 8008542:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008544:	7811      	ldrb	r1, [r2, #0]
 8008546:	2200      	movs	r2, #0
 8008548:	4281      	cmp	r1, r0
 800854a:	d000      	beq.n	800854e <lv_draw_label+0x922>
 800854c:	e0af      	b.n	80086ae <lv_draw_label+0xa82>
 800854e:	49a3      	ldr	r1, [pc, #652]	; (80087dc <lv_draw_label+0xbb0>)
 8008550:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008552:	6809      	ldr	r1, [r1, #0]
 8008554:	4281      	cmp	r1, r0
 8008556:	d000      	beq.n	800855a <lv_draw_label+0x92e>
 8008558:	e0a9      	b.n	80086ae <lv_draw_label+0xa82>
        prev_opa = opa;
 800855a:	4b9f      	ldr	r3, [pc, #636]	; (80087d8 <lv_draw_label+0xbac>)
 800855c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800855e:	701a      	strb	r2, [r3, #0]
        prev_bpp = bpp;
 8008560:	4b9e      	ldr	r3, [pc, #632]	; (80087dc <lv_draw_label+0xbb0>)
 8008562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008564:	601a      	str	r2, [r3, #0]
        bpp_opa_table_p = opa_table;
 8008566:	4b9e      	ldr	r3, [pc, #632]	; (80087e0 <lv_draw_label+0xbb4>)
 8008568:	930f      	str	r3, [sp, #60]	; 0x3c
    int32_t box_w = g->box_w;
 800856a:	ab3e      	add	r3, sp, #248	; 0xf8
 800856c:	885d      	ldrh	r5, [r3, #2]
    int32_t box_h = g->box_h;
 800856e:	889b      	ldrh	r3, [r3, #4]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 8008570:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    int32_t box_h = g->box_h;
 8008572:	931b      	str	r3, [sp, #108]	; 0x6c
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
 8008574:	9b04      	ldr	r3, [sp, #16]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 8008576:	436c      	muls	r4, r5
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
 8008578:	2200      	movs	r2, #0
 800857a:	5e9b      	ldrsh	r3, [r3, r2]
 800857c:	2200      	movs	r2, #0
 800857e:	9213      	str	r2, [sp, #76]	; 0x4c
 8008580:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008582:	4293      	cmp	r3, r2
 8008584:	dd01      	ble.n	800858a <lv_draw_label+0x95e>
 8008586:	1a9b      	subs	r3, r3, r2
 8008588:	9313      	str	r3, [sp, #76]	; 0x4c
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
 800858a:	9b04      	ldr	r3, [sp, #16]
 800858c:	2604      	movs	r6, #4
 800858e:	5f9e      	ldrsh	r6, [r3, r6]
 8008590:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008592:	9517      	str	r5, [sp, #92]	; 0x5c
 8008594:	18eb      	adds	r3, r5, r3
 8008596:	42b3      	cmp	r3, r6
 8008598:	dd03      	ble.n	80085a2 <lv_draw_label+0x976>
 800859a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800859c:	1af6      	subs	r6, r6, r3
 800859e:	1c73      	adds	r3, r6, #1
 80085a0:	9317      	str	r3, [sp, #92]	; 0x5c
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
 80085a2:	9b04      	ldr	r3, [sp, #16]
 80085a4:	2202      	movs	r2, #2
 80085a6:	5e9b      	ldrsh	r3, [r3, r2]
 80085a8:	2200      	movs	r2, #0
 80085aa:	920e      	str	r2, [sp, #56]	; 0x38
 80085ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80085ae:	4293      	cmp	r3, r2
 80085b0:	dd01      	ble.n	80085b6 <lv_draw_label+0x98a>
 80085b2:	1a9b      	subs	r3, r3, r2
 80085b4:	930e      	str	r3, [sp, #56]	; 0x38
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 80085b6:	9b04      	ldr	r3, [sp, #16]
 80085b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80085ba:	2206      	movs	r2, #6
 80085bc:	5e9b      	ldrsh	r3, [r3, r2]
 80085be:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80085c0:	1852      	adds	r2, r2, r1
 80085c2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80085c4:	911d      	str	r1, [sp, #116]	; 0x74
 80085c6:	429a      	cmp	r2, r3
 80085c8:	dd03      	ble.n	80085d2 <lv_draw_label+0x9a6>
 80085ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80085cc:	1a9b      	subs	r3, r3, r2
 80085ce:	3301      	adds	r3, #1
 80085d0:	931d      	str	r3, [sp, #116]	; 0x74
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 80085d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085d6:	435c      	muls	r4, r3
 80085d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80085da:	4353      	muls	r3, r2
    map_p += bit_ofs >> 3;
 80085dc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 80085de:	18e4      	adds	r4, r4, r3
    map_p += bit_ofs >> 3;
 80085e0:	08e3      	lsrs	r3, r4, #3
 80085e2:	18d3      	adds	r3, r2, r3
 80085e4:	9318      	str	r3, [sp, #96]	; 0x60
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 80085e6:	2307      	movs	r3, #7
 80085e8:	401c      	ands	r4, r3
    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 80085ea:	f7fd fbe1 	bl	8005db0 <_lv_refr_get_disp_refreshing>
 80085ee:	f002 fec7 	bl	800b380 <lv_disp_get_hor_res>
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 80085f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80085f4:	436b      	muls	r3, r5
 80085f6:	931b      	str	r3, [sp, #108]	; 0x6c
 80085f8:	4283      	cmp	r3, r0
 80085fa:	dd00      	ble.n	80085fe <lv_draw_label+0x9d2>
 80085fc:	901b      	str	r0, [sp, #108]	; 0x6c
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 80085fe:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008600:	f003 fddc 	bl	800c1bc <_lv_mem_buf_get>
    fill_area.x1 = col_start + pos_x;
 8008604:	2264      	movs	r2, #100	; 0x64
 8008606:	466b      	mov	r3, sp
    fill_area.y1 = row_start + pos_y;
 8008608:	990e      	ldr	r1, [sp, #56]	; 0x38
    fill_area.x1 = col_start + pos_x;
 800860a:	189b      	adds	r3, r3, r2
    fill_area.y1 = row_start + pos_y;
 800860c:	468c      	mov	ip, r1
    fill_area.x1 = col_start + pos_x;
 800860e:	881e      	ldrh	r6, [r3, #0]
 8008610:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008612:	ab39      	add	r3, sp, #228	; 0xe4
 8008614:	18b2      	adds	r2, r6, r2
 8008616:	801a      	strh	r2, [r3, #0]
    fill_area.x2 = col_end  + pos_x - 1;
 8008618:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800861a:	3e01      	subs	r6, #1
 800861c:	18b6      	adds	r6, r6, r2
    fill_area.y1 = row_start + pos_y;
 800861e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    fill_area.x2 = col_end  + pos_x - 1;
 8008620:	809e      	strh	r6, [r3, #4]
    fill_area.y1 = row_start + pos_y;
 8008622:	4462      	add	r2, ip
 8008624:	b212      	sxth	r2, r2
 8008626:	805a      	strh	r2, [r3, #2]
    fill_area.y2 = fill_area.y1;
 8008628:	80da      	strh	r2, [r3, #6]
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800862a:	900d      	str	r0, [sp, #52]	; 0x34
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800862c:	f001 fa26 	bl	8009a7c <lv_draw_mask_get_cnt>
    uint32_t col_bit_max = 8 - bpp;
 8008630:	2308      	movs	r3, #8
 8008632:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    int32_t mask_p = 0;
 8008634:	2600      	movs	r6, #0
    uint32_t col_bit_max = 8 - bpp;
 8008636:	1a9b      	subs	r3, r3, r2
 8008638:	9319      	str	r3, [sp, #100]	; 0x64
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800863a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800863c:	901f      	str	r0, [sp, #124]	; 0x7c
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800863e:	18ed      	adds	r5, r5, r3
 8008640:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008642:	1aed      	subs	r5, r5, r3
 8008644:	0013      	movs	r3, r2
 8008646:	436b      	muls	r3, r5
 8008648:	931c      	str	r3, [sp, #112]	; 0x70
    for(row = row_start ; row < row_end; row++) {
 800864a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800864c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800864e:	4293      	cmp	r3, r2
 8008650:	db3a      	blt.n	80086c8 <lv_draw_label+0xa9c>
    if(fill_area.y1 != fill_area.y2) {
 8008652:	a939      	add	r1, sp, #228	; 0xe4
 8008654:	2206      	movs	r2, #6
 8008656:	5e8b      	ldrsh	r3, [r1, r2]
 8008658:	2002      	movs	r0, #2
 800865a:	5e0a      	ldrsh	r2, [r1, r0]
 800865c:	429a      	cmp	r2, r3
 800865e:	d00f      	beq.n	8008680 <lv_draw_label+0xa54>
        fill_area.y2--;
 8008660:	3b01      	subs	r3, #1
 8008662:	80cb      	strh	r3, [r1, #6]
        _lv_blend_fill(clip_area, &fill_area,
 8008664:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008666:	2078      	movs	r0, #120	; 0x78
 8008668:	9302      	str	r3, [sp, #8]
 800866a:	23ff      	movs	r3, #255	; 0xff
 800866c:	466a      	mov	r2, sp
 800866e:	9301      	str	r3, [sp, #4]
 8008670:	3bfd      	subs	r3, #253	; 0xfd
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	1812      	adds	r2, r2, r0
 8008676:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008678:	8812      	ldrh	r2, [r2, #0]
 800867a:	9804      	ldr	r0, [sp, #16]
 800867c:	f7fe fa80 	bl	8006b80 <_lv_blend_fill>
    _lv_mem_buf_release(mask_buf);
 8008680:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008682:	e634      	b.n	80082ee <lv_draw_label+0x6c2>
        case 8:
 8008684:	2308      	movs	r3, #8
            bitmask_init  = 0xFF;
 8008686:	22ff      	movs	r2, #255	; 0xff
        case 8:
 8008688:	930a      	str	r3, [sp, #40]	; 0x28
            bitmask_init  = 0xFF;
 800868a:	9216      	str	r2, [sp, #88]	; 0x58
            shades = 256;
 800868c:	33f8      	adds	r3, #248	; 0xf8
            bpp_opa_table_p = _lv_bpp8_opa_table;
 800868e:	4a55      	ldr	r2, [pc, #340]	; (80087e4 <lv_draw_label+0xbb8>)
 8008690:	e752      	b.n	8008538 <lv_draw_label+0x90c>
    if(bpp == 3) bpp = 4;
 8008692:	2304      	movs	r3, #4
            bitmask_init  = 0xF0;
 8008694:	22f0      	movs	r2, #240	; 0xf0
    if(bpp == 3) bpp = 4;
 8008696:	930a      	str	r3, [sp, #40]	; 0x28
            bitmask_init  = 0xF0;
 8008698:	9216      	str	r2, [sp, #88]	; 0x58
            shades = 16;
 800869a:	330c      	adds	r3, #12
            bpp_opa_table_p = _lv_bpp4_opa_table;
 800869c:	4a52      	ldr	r2, [pc, #328]	; (80087e8 <lv_draw_label+0xbbc>)
 800869e:	e74b      	b.n	8008538 <lv_draw_label+0x90c>
    switch(bpp) {
 80086a0:	2301      	movs	r3, #1
            bitmask_init  = 0x80;
 80086a2:	2280      	movs	r2, #128	; 0x80
    switch(bpp) {
 80086a4:	930a      	str	r3, [sp, #40]	; 0x28
            bitmask_init  = 0x80;
 80086a6:	9216      	str	r2, [sp, #88]	; 0x58
            shades = 2;
 80086a8:	18db      	adds	r3, r3, r3
            bpp_opa_table_p = _lv_bpp1_opa_table;
 80086aa:	4a50      	ldr	r2, [pc, #320]	; (80087ec <lv_draw_label+0xbc0>)
 80086ac:	e744      	b.n	8008538 <lv_draw_label+0x90c>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 80086ae:	484c      	ldr	r0, [pc, #304]	; (80087e0 <lv_draw_label+0xbb4>)
 80086b0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80086b2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80086b4:	5c89      	ldrb	r1, [r1, r2]
 80086b6:	29ff      	cmp	r1, #255	; 0xff
 80086b8:	d001      	beq.n	80086be <lv_draw_label+0xa92>
 80086ba:	4361      	muls	r1, r4
 80086bc:	0a0c      	lsrs	r4, r1, #8
 80086be:	5484      	strb	r4, [r0, r2]
            for(i = 0; i < shades; i++) {
 80086c0:	3201      	adds	r2, #1
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d1f4      	bne.n	80086b0 <lv_draw_label+0xa84>
 80086c6:	e748      	b.n	800855a <lv_draw_label+0x92e>
        bitmask = bitmask_init >> col_bit;
 80086c8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80086ca:	0035      	movs	r5, r6
 80086cc:	40e2      	lsrs	r2, r4
        for(col = col_start; col < col_end; col++) {
 80086ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80086d0:	1b99      	subs	r1, r3, r6
 80086d2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80086d4:	194b      	adds	r3, r1, r5
 80086d6:	4283      	cmp	r3, r0
 80086d8:	db33      	blt.n	8008742 <lv_draw_label+0xb16>
        if(other_mask_cnt) {
 80086da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d018      	beq.n	8008712 <lv_draw_label+0xae6>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
 80086e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086e2:	199b      	adds	r3, r3, r6
 80086e4:	ae39      	add	r6, sp, #228	; 0xe4
 80086e6:	931a      	str	r3, [sp, #104]	; 0x68
 80086e8:	2300      	movs	r3, #0
 80086ea:	5ef1      	ldrsh	r1, [r6, r3]
 80086ec:	88b3      	ldrh	r3, [r6, #4]
 80086ee:	2006      	movs	r0, #6
 80086f0:	5e32      	ldrsh	r2, [r6, r0]
 80086f2:	3301      	adds	r3, #1
 80086f4:	1a5b      	subs	r3, r3, r1
 80086f6:	b21b      	sxth	r3, r3
 80086f8:	981a      	ldr	r0, [sp, #104]	; 0x68
 80086fa:	f001 f97d 	bl	80099f8 <lv_draw_mask_apply>
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 80086fe:	2800      	cmp	r0, #0
 8008700:	d107      	bne.n	8008712 <lv_draw_label+0xae6>
 8008702:	88b1      	ldrh	r1, [r6, #4]
 8008704:	8833      	ldrh	r3, [r6, #0]
 8008706:	3101      	adds	r1, #1
 8008708:	1ac9      	subs	r1, r1, r3
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&fill_area));
 800870a:	b209      	sxth	r1, r1
 800870c:	981a      	ldr	r0, [sp, #104]	; 0x68
 800870e:	f003 fddd 	bl	800c2cc <_lv_memset_00>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 8008712:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008714:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008716:	ae39      	add	r6, sp, #228	; 0xe4
 8008718:	1a9b      	subs	r3, r3, r2
 800871a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800871c:	195b      	adds	r3, r3, r5
 800871e:	429a      	cmp	r2, r3
 8008720:	d92f      	bls.n	8008782 <lv_draw_label+0xb56>
            fill_area.y2 ++;
 8008722:	88f3      	ldrh	r3, [r6, #6]
 8008724:	3301      	adds	r3, #1
 8008726:	80f3      	strh	r3, [r6, #6]
        col_bit += col_bit_row_ofs;
 8008728:	9b1c      	ldr	r3, [sp, #112]	; 0x70
        map_p += (col_bit >> 3);
 800872a:	9a18      	ldr	r2, [sp, #96]	; 0x60
        col_bit += col_bit_row_ofs;
 800872c:	191c      	adds	r4, r3, r4
        map_p += (col_bit >> 3);
 800872e:	08e3      	lsrs	r3, r4, #3
 8008730:	18d3      	adds	r3, r2, r3
 8008732:	9318      	str	r3, [sp, #96]	; 0x60
        col_bit = col_bit & 0x7;
 8008734:	2307      	movs	r3, #7
 8008736:	401c      	ands	r4, r3
    for(row = row_start ; row < row_end; row++) {
 8008738:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800873a:	002e      	movs	r6, r5
 800873c:	3301      	adds	r3, #1
 800873e:	930e      	str	r3, [sp, #56]	; 0x38
 8008740:	e783      	b.n	800864a <lv_draw_label+0xa1e>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 8008742:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008744:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	1b00      	subs	r0, r0, r4
 800874a:	4013      	ands	r3, r2
 800874c:	40c3      	lsrs	r3, r0
            if(letter_px) {
 800874e:	b2d8      	uxtb	r0, r3
 8008750:	2800      	cmp	r0, #0
 8008752:	d00d      	beq.n	8008770 <lv_draw_label+0xb44>
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
 8008754:	20ff      	movs	r0, #255	; 0xff
 8008756:	4003      	ands	r3, r0
 8008758:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800875a:	5cc3      	ldrb	r3, [r0, r3]
 800875c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800875e:	5543      	strb	r3, [r0, r5]
            if(col_bit < col_bit_max) {
 8008760:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008762:	42a3      	cmp	r3, r4
 8008764:	d907      	bls.n	8008776 <lv_draw_label+0xb4a>
                col_bit += bpp;
 8008766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                bitmask = bitmask >> bpp;
 8008768:	40da      	lsrs	r2, r3
                col_bit += bpp;
 800876a:	18e4      	adds	r4, r4, r3
            mask_p++;
 800876c:	3501      	adds	r5, #1
 800876e:	e7b0      	b.n	80086d2 <lv_draw_label+0xaa6>
                mask_buf[mask_p] = 0;
 8008770:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008772:	5558      	strb	r0, [r3, r5]
 8008774:	e7f4      	b.n	8008760 <lv_draw_label+0xb34>
                map_p++;
 8008776:	9b18      	ldr	r3, [sp, #96]	; 0x60
                bitmask = bitmask_init;
 8008778:	9a16      	ldr	r2, [sp, #88]	; 0x58
                map_p++;
 800877a:	3301      	adds	r3, #1
 800877c:	9318      	str	r3, [sp, #96]	; 0x60
                col_bit = 0;
 800877e:	2400      	movs	r4, #0
 8008780:	e7f4      	b.n	800876c <lv_draw_label+0xb40>
            _lv_blend_fill(clip_area, &fill_area,
 8008782:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008784:	2178      	movs	r1, #120	; 0x78
 8008786:	9302      	str	r3, [sp, #8]
 8008788:	23ff      	movs	r3, #255	; 0xff
 800878a:	466a      	mov	r2, sp
 800878c:	9301      	str	r3, [sp, #4]
 800878e:	3bfd      	subs	r3, #253	; 0xfd
 8008790:	9300      	str	r3, [sp, #0]
 8008792:	1852      	adds	r2, r2, r1
 8008794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008796:	8812      	ldrh	r2, [r2, #0]
 8008798:	0031      	movs	r1, r6
 800879a:	9804      	ldr	r0, [sp, #16]
 800879c:	f7fe f9f0 	bl	8006b80 <_lv_blend_fill>
            fill_area.y1 = fill_area.y2 + 1;
 80087a0:	88f3      	ldrh	r3, [r6, #6]
            mask_p = 0;
 80087a2:	2500      	movs	r5, #0
            fill_area.y1 = fill_area.y2 + 1;
 80087a4:	3301      	adds	r3, #1
 80087a6:	b21b      	sxth	r3, r3
 80087a8:	8073      	strh	r3, [r6, #2]
            fill_area.y2 = fill_area.y1;
 80087aa:	80f3      	strh	r3, [r6, #6]
 80087ac:	e7bc      	b.n	8008728 <lv_draw_label+0xafc>
        else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
 80087ae:	0713      	lsls	r3, r2, #28
 80087b0:	d400      	bmi.n	80087b4 <lv_draw_label+0xb88>
 80087b2:	e4a7      	b.n	8008104 <lv_draw_label+0x4d8>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 80087b4:	2010      	movs	r0, #16
 80087b6:	5e3b      	ldrsh	r3, [r7, r0]
 80087b8:	9200      	str	r2, [sp, #0]
 80087ba:	0028      	movs	r0, r5
 80087bc:	9a05      	ldr	r2, [sp, #20]
 80087be:	f003 fff3 	bl	800c7a8 <_lv_txt_get_width>
 80087c2:	9b06      	ldr	r3, [sp, #24]
 80087c4:	9a06      	ldr	r2, [sp, #24]
 80087c6:	889b      	ldrh	r3, [r3, #4]
 80087c8:	8812      	ldrh	r2, [r2, #0]
 80087ca:	3301      	adds	r3, #1
 80087cc:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
 80087ce:	b21b      	sxth	r3, r3
 80087d0:	1a18      	subs	r0, r3, r0
 80087d2:	e495      	b.n	8008100 <lv_draw_label+0x4d4>
 80087d4:	0800e322 	.word	0x0800e322
 80087d8:	20005e34 	.word	0x20005e34
 80087dc:	20005e30 	.word	0x20005e30
 80087e0:	20005d30 	.word	0x20005d30
 80087e4:	0800e336 	.word	0x0800e336
 80087e8:	0800e326 	.word	0x0800e326
 80087ec:	0800e320 	.word	0x0800e320
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
 80087f0:	1d3b      	adds	r3, r7, #4
 80087f2:	7fdb      	ldrb	r3, [r3, #31]
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
 80087f4:	ad3e      	add	r5, sp, #248	; 0xf8
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
 80087f6:	9320      	str	r3, [sp, #128]	; 0x80
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
 80087f8:	0032      	movs	r2, r6
 80087fa:	2300      	movs	r3, #0
 80087fc:	0029      	movs	r1, r5
 80087fe:	9805      	ldr	r0, [sp, #20]
 8008800:	f002 fa68 	bl	800acd4 <lv_font_get_glyph_dsc>
    if(g_ret == false)  {
 8008804:	2800      	cmp	r0, #0
 8008806:	d101      	bne.n	800880c <lv_draw_label+0xbe0>
 8008808:	f7ff fc04 	bl	8008014 <lv_draw_label+0x3e8>
    if((g.box_h == 0) || (g.box_w == 0)) return;
 800880c:	88aa      	ldrh	r2, [r5, #4]
 800880e:	2a00      	cmp	r2, #0
 8008810:	d101      	bne.n	8008816 <lv_draw_label+0xbea>
 8008812:	f7ff fbff 	bl	8008014 <lv_draw_label+0x3e8>
 8008816:	886b      	ldrh	r3, [r5, #2]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d101      	bne.n	8008820 <lv_draw_label+0xbf4>
 800881c:	f7ff fbfa 	bl	8008014 <lv_draw_label+0x3e8>
    int32_t pos_x = pos_p->x + g.ofs_x;
 8008820:	2106      	movs	r1, #6
 8008822:	5e68      	ldrsh	r0, [r5, r1]
 8008824:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008826:	1841      	adds	r1, r0, r1
 8008828:	9119      	str	r1, [sp, #100]	; 0x64
    if(pos_x + g.box_w < clip_area->x1 ||
 800882a:	185b      	adds	r3, r3, r1
 800882c:	9904      	ldr	r1, [sp, #16]
 800882e:	2000      	movs	r0, #0
 8008830:	5e09      	ldrsh	r1, [r1, r0]
 8008832:	428b      	cmp	r3, r1
 8008834:	da01      	bge.n	800883a <lv_draw_label+0xc0e>
 8008836:	f7ff fbed 	bl	8008014 <lv_draw_label+0x3e8>
       pos_x > clip_area->x2 ||
 800883a:	9b04      	ldr	r3, [sp, #16]
 800883c:	2104      	movs	r1, #4
 800883e:	5e5b      	ldrsh	r3, [r3, r1]
    if(pos_x + g.box_w < clip_area->x1 ||
 8008840:	9919      	ldr	r1, [sp, #100]	; 0x64
 8008842:	4299      	cmp	r1, r3
 8008844:	dd01      	ble.n	800884a <lv_draw_label+0xc1e>
 8008846:	f7ff fbe5 	bl	8008014 <lv_draw_label+0x3e8>
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 800884a:	9b05      	ldr	r3, [sp, #20]
 800884c:	2108      	movs	r1, #8
 800884e:	5e5b      	ldrsh	r3, [r3, r1]
 8008850:	9905      	ldr	r1, [sp, #20]
 8008852:	200a      	movs	r0, #10
 8008854:	5e09      	ldrsh	r1, [r1, r0]
 8008856:	1a5b      	subs	r3, r3, r1
 8008858:	9908      	ldr	r1, [sp, #32]
 800885a:	185b      	adds	r3, r3, r1
 800885c:	2008      	movs	r0, #8
 800885e:	5e29      	ldrsh	r1, [r5, r0]
 8008860:	1a9b      	subs	r3, r3, r2
 8008862:	1a5b      	subs	r3, r3, r1
 8008864:	931a      	str	r3, [sp, #104]	; 0x68
       pos_y + g.box_h < clip_area->y1 ||
 8008866:	18d2      	adds	r2, r2, r3
 8008868:	9b04      	ldr	r3, [sp, #16]
 800886a:	2102      	movs	r1, #2
 800886c:	5e5b      	ldrsh	r3, [r3, r1]
       pos_x > clip_area->x2 ||
 800886e:	429a      	cmp	r2, r3
 8008870:	da01      	bge.n	8008876 <lv_draw_label+0xc4a>
 8008872:	f7ff fbcf 	bl	8008014 <lv_draw_label+0x3e8>
       pos_y > clip_area->y2)  {
 8008876:	9b04      	ldr	r3, [sp, #16]
 8008878:	2206      	movs	r2, #6
 800887a:	5e9b      	ldrsh	r3, [r3, r2]
       pos_y + g.box_h < clip_area->y1 ||
 800887c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800887e:	429a      	cmp	r2, r3
 8008880:	dd01      	ble.n	8008886 <lv_draw_label+0xc5a>
 8008882:	f7ff fbc7 	bl	8008014 <lv_draw_label+0x3e8>
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 8008886:	0031      	movs	r1, r6
 8008888:	9805      	ldr	r0, [sp, #20]
 800888a:	f002 fa1f 	bl	800accc <lv_font_get_glyph_bitmap>
 800888e:	901c      	str	r0, [sp, #112]	; 0x70
    if(map_p == NULL) {
 8008890:	2800      	cmp	r0, #0
 8008892:	d101      	bne.n	8008898 <lv_draw_label+0xc6c>
 8008894:	f7ff fbbe 	bl	8008014 <lv_draw_label+0x3e8>
 8008898:	2264      	movs	r2, #100	; 0x64
 800889a:	466b      	mov	r3, sp
 800889c:	189b      	adds	r3, r3, r2
 800889e:	2200      	movs	r2, #0
 80088a0:	5e9b      	ldrsh	r3, [r3, r2]
 80088a2:	2268      	movs	r2, #104	; 0x68
 80088a4:	930e      	str	r3, [sp, #56]	; 0x38
 80088a6:	466b      	mov	r3, sp
 80088a8:	189b      	adds	r3, r3, r2
 80088aa:	2200      	movs	r2, #0
 80088ac:	5e9b      	ldrsh	r3, [r3, r2]
    if(font_p->subpx) {
 80088ae:	2203      	movs	r2, #3
 80088b0:	930d      	str	r3, [sp, #52]	; 0x34
 80088b2:	9b05      	ldr	r3, [sp, #20]
 80088b4:	7aa8      	ldrb	r0, [r5, #10]
 80088b6:	7b1b      	ldrb	r3, [r3, #12]
 80088b8:	4213      	tst	r3, r2
 80088ba:	d100      	bne.n	80088be <lv_draw_label+0xc92>
 80088bc:	e621      	b.n	8008502 <lv_draw_label+0x8d6>
 80088be:	06e3      	lsls	r3, r4, #27
 80088c0:	0edb      	lsrs	r3, r3, #27
 80088c2:	9330      	str	r3, [sp, #192]	; 0xc0
 80088c4:	0563      	lsls	r3, r4, #21
 80088c6:	0e9b      	lsrs	r3, r3, #26
 80088c8:	0424      	lsls	r4, r4, #16
 80088ca:	9331      	str	r3, [sp, #196]	; 0xc4
 80088cc:	0ee3      	lsrs	r3, r4, #27
 80088ce:	932f      	str	r3, [sp, #188]	; 0xbc
    if(bpp == 3) bpp = 4;
 80088d0:	4290      	cmp	r0, r2
 80088d2:	d100      	bne.n	80088d6 <lv_draw_label+0xcaa>
 80088d4:	e514      	b.n	8008300 <lv_draw_label+0x6d4>
    switch(bpp) {
 80088d6:	3801      	subs	r0, #1
 80088d8:	2807      	cmp	r0, #7
 80088da:	d901      	bls.n	80088e0 <lv_draw_label+0xcb4>
 80088dc:	f7ff fb9a 	bl	8008014 <lv_draw_label+0x3e8>
 80088e0:	f7f7 fc34 	bl	800014c <__gnu_thumb1_case_shi>
 80088e4:	fc3cfd14 	.word	0xfc3cfd14
 80088e8:	fd0efb98 	.word	0xfd0efb98
 80088ec:	fb98fb98 	.word	0xfb98fb98
 80088f0:	fd08fb98 	.word	0xfd08fb98

080088f4 <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
 80088f4:	b510      	push	{r4, lr}
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 80088f6:	210a      	movs	r1, #10
{
 80088f8:	0004      	movs	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 80088fa:	f003 fce7 	bl	800c2cc <_lv_memset_00>
    dsc->width = 1;
    dsc->opa = LV_OPA_COVER;
 80088fe:	23ff      	movs	r3, #255	; 0xff
 8008900:	7223      	strb	r3, [r4, #8]
    dsc->color = LV_COLOR_BLACK;
 8008902:	2300      	movs	r3, #0
 8008904:	8023      	strh	r3, [r4, #0]
 8008906:	3301      	adds	r3, #1
 8008908:	8063      	strh	r3, [r4, #2]
}
 800890a:	bd10      	pop	{r4, pc}

0800890c <lv_draw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_line(const lv_point_t * point1, const lv_point_t * point2, const lv_area_t * clip,
                                        const lv_draw_line_dsc_t * dsc)
{
 800890c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800890e:	001f      	movs	r7, r3
 8008910:	b0cd      	sub	sp, #308	; 0x134
 8008912:	9008      	str	r0, [sp, #32]
 8008914:	9109      	str	r1, [sp, #36]	; 0x24
 8008916:	920c      	str	r2, [sp, #48]	; 0x30
    if(dsc->width == 0) return;
 8008918:	2302      	movs	r3, #2
 800891a:	5efd      	ldrsh	r5, [r7, r3]
 800891c:	2d00      	cmp	r5, #0
 800891e:	d100      	bne.n	8008922 <lv_draw_line+0x16>
 8008920:	e0d9      	b.n	8008ad6 <lv_draw_line+0x1ca>
    if(dsc->opa <= LV_OPA_MIN) return;
 8008922:	7a3b      	ldrb	r3, [r7, #8]
 8008924:	2b02      	cmp	r3, #2
 8008926:	d800      	bhi.n	800892a <lv_draw_line+0x1e>
 8008928:	e0d5      	b.n	8008ad6 <lv_draw_line+0x1ca>

    if(point1->x == point2->x && point1->y == point2->y) return;
 800892a:	0003      	movs	r3, r0
 800892c:	2400      	movs	r4, #0
 800892e:	5f1c      	ldrsh	r4, [r3, r4]
 8008930:	000b      	movs	r3, r1
 8008932:	2000      	movs	r0, #0
 8008934:	5e18      	ldrsh	r0, [r3, r0]
 8008936:	9b08      	ldr	r3, [sp, #32]
 8008938:	2102      	movs	r1, #2
 800893a:	5e59      	ldrsh	r1, [r3, r1]
 800893c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800893e:	2202      	movs	r2, #2
 8008940:	5e9a      	ldrsh	r2, [r3, r2]
 8008942:	4284      	cmp	r4, r0
 8008944:	d102      	bne.n	800894c <lv_draw_line+0x40>
 8008946:	4291      	cmp	r1, r2
 8008948:	d100      	bne.n	800894c <lv_draw_line+0x40>
 800894a:	e0c4      	b.n	8008ad6 <lv_draw_line+0x1ca>

    lv_area_t clip_line;
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
 800894c:	0feb      	lsrs	r3, r5, #31
 800894e:	195b      	adds	r3, r3, r5
 8008950:	105b      	asrs	r3, r3, #1
 8008952:	b29b      	uxth	r3, r3
 8008954:	ad10      	add	r5, sp, #64	; 0x40
 8008956:	1c26      	adds	r6, r4, #0
 8008958:	4284      	cmp	r4, r0
 800895a:	dd00      	ble.n	800895e <lv_draw_line+0x52>
 800895c:	1c06      	adds	r6, r0, #0
 800895e:	1af6      	subs	r6, r6, r3
 8008960:	802e      	strh	r6, [r5, #0]
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
 8008962:	1c26      	adds	r6, r4, #0
 8008964:	4284      	cmp	r4, r0
 8008966:	da00      	bge.n	800896a <lv_draw_line+0x5e>
 8008968:	1c06      	adds	r6, r0, #0
 800896a:	199e      	adds	r6, r3, r6
 800896c:	80ae      	strh	r6, [r5, #4]
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
 800896e:	a810      	add	r0, sp, #64	; 0x40
 8008970:	1c0c      	adds	r4, r1, #0
 8008972:	4291      	cmp	r1, r2
 8008974:	dd00      	ble.n	8008978 <lv_draw_line+0x6c>
 8008976:	1c14      	adds	r4, r2, #0
 8008978:	1ae4      	subs	r4, r4, r3
 800897a:	8044      	strh	r4, [r0, #2]
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
 800897c:	1c0c      	adds	r4, r1, #0
 800897e:	4291      	cmp	r1, r2
 8008980:	da00      	bge.n	8008984 <lv_draw_line+0x78>
 8008982:	1c14      	adds	r4, r2, #0
 8008984:	191b      	adds	r3, r3, r4

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
 8008986:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008988:	0001      	movs	r1, r0
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
 800898a:	80c3      	strh	r3, [r0, #6]
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
 800898c:	f002 fe5d 	bl	800b64a <_lv_area_intersect>
    if(!is_common) return;
 8008990:	2800      	cmp	r0, #0
 8008992:	d100      	bne.n	8008996 <lv_draw_line+0x8a>
 8008994:	e09f      	b.n	8008ad6 <lv_draw_line+0x1ca>

    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
 8008996:	9b08      	ldr	r3, [sp, #32]
 8008998:	2202      	movs	r2, #2
 800899a:	5e9b      	ldrsh	r3, [r3, r2]
 800899c:	9306      	str	r3, [sp, #24]
 800899e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089a0:	2202      	movs	r2, #2
 80089a2:	5e9b      	ldrsh	r3, [r3, r2]
 80089a4:	9307      	str	r3, [sp, #28]
 80089a6:	9a07      	ldr	r2, [sp, #28]
 80089a8:	9b06      	ldr	r3, [sp, #24]
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d000      	beq.n	80089b0 <lv_draw_line+0xa4>
 80089ae:	e12c      	b.n	8008c0a <lv_draw_line+0x2fe>

LV_ATTRIBUTE_FAST_MEM static void draw_line_hor(const lv_point_t * point1, const lv_point_t * point2,
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
    lv_opa_t opa = dsc->opa;
 80089b0:	7a3b      	ldrb	r3, [r7, #8]
 80089b2:	9306      	str	r3, [sp, #24]

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 80089b4:	f7fd f9fc 	bl	8005db0 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80089b8:	f002 fd54 	bl	800b464 <lv_disp_get_buf>
 80089bc:	9004      	str	r0, [sp, #16]

    const lv_area_t * disp_area = &vdb->area;

    int32_t w = dsc->width - 1;
 80089be:	2302      	movs	r3, #2
 80089c0:	5efd      	ldrsh	r5, [r7, r3]
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 80089c2:	2301      	movs	r3, #1
    int32_t w = dsc->width - 1;
 80089c4:	3d01      	subs	r5, #1
    int32_t w_half0 = w >> 1;
 80089c6:	106e      	asrs	r6, r5, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 80089c8:	401d      	ands	r5, r3

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 80089ca:	2206      	movs	r2, #6
 80089cc:	5ebb      	ldrsh	r3, [r7, r2]
 80089ce:	2200      	movs	r2, #0
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 80089d0:	19ad      	adds	r5, r5, r6
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 80089d2:	9205      	str	r2, [sp, #20]
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d005      	beq.n	80089e4 <lv_draw_line+0xd8>
 80089d8:	2204      	movs	r2, #4
 80089da:	5ebb      	ldrsh	r3, [r7, r2]
 80089dc:	001a      	movs	r2, r3
 80089de:	1e53      	subs	r3, r2, #1
 80089e0:	419a      	sbcs	r2, r3
 80089e2:	9205      	str	r2, [sp, #20]

    bool simple_mode = true;
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 80089e4:	f001 f84a 	bl	8009a7c <lv_draw_mask_get_cnt>
 80089e8:	2300      	movs	r3, #0
 80089ea:	9307      	str	r3, [sp, #28]
 80089ec:	4298      	cmp	r0, r3
 80089ee:	d104      	bne.n	80089fa <lv_draw_line+0xee>
    else if(dashed) simple_mode = false;
 80089f0:	2101      	movs	r1, #1
 80089f2:	9b05      	ldr	r3, [sp, #20]
 80089f4:	404b      	eors	r3, r1
 80089f6:	400b      	ands	r3, r1
 80089f8:	9307      	str	r3, [sp, #28]

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
 80089fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089fc:	a92c      	add	r1, sp, #176	; 0xb0
 80089fe:	2000      	movs	r0, #0
 8008a00:	5e18      	ldrsh	r0, [r3, r0]
 8008a02:	9b08      	ldr	r3, [sp, #32]
 8008a04:	2200      	movs	r2, #0
 8008a06:	5e9a      	ldrsh	r2, [r3, r2]
 8008a08:	1c03      	adds	r3, r0, #0
 8008a0a:	4290      	cmp	r0, r2
 8008a0c:	dd00      	ble.n	8008a10 <lv_draw_line+0x104>
 8008a0e:	1c13      	adds	r3, r2, #0
 8008a10:	800b      	strh	r3, [r1, #0]
    draw_area.x2 = LV_MATH_MAX(point1->x, point2->x)  - 1;
 8008a12:	1c03      	adds	r3, r0, #0
 8008a14:	4290      	cmp	r0, r2
 8008a16:	da00      	bge.n	8008a1a <lv_draw_line+0x10e>
 8008a18:	1c13      	adds	r3, r2, #0
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	808b      	strh	r3, [r1, #4]
    draw_area.y1 = point1->y - w_half1;
 8008a1e:	9b08      	ldr	r3, [sp, #32]
 8008a20:	ac2c      	add	r4, sp, #176	; 0xb0
 8008a22:	885b      	ldrh	r3, [r3, #2]
 8008a24:	1b5d      	subs	r5, r3, r5
    draw_area.y2 = point1->y + w_half0;
 8008a26:	199e      	adds	r6, r3, r6

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 8008a28:	9b07      	ldr	r3, [sp, #28]
    draw_area.y1 = point1->y - w_half1;
 8008a2a:	8065      	strh	r5, [r4, #2]
    draw_area.y2 = point1->y + w_half0;
 8008a2c:	80e6      	strh	r6, [r4, #6]
    if(simple_mode) {
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d053      	beq.n	8008ada <lv_draw_line+0x1ce>
        _lv_blend_fill(clip, &draw_area,
                       dsc->color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
 8008a32:	7a7b      	ldrb	r3, [r7, #9]
        _lv_blend_fill(clip, &draw_area,
 8008a34:	0021      	movs	r1, r4
                       dsc->blend_mode);
 8008a36:	079b      	lsls	r3, r3, #30
        _lv_blend_fill(clip, &draw_area,
 8008a38:	0f9b      	lsrs	r3, r3, #30
 8008a3a:	9302      	str	r3, [sp, #8]
 8008a3c:	9b06      	ldr	r3, [sp, #24]
 8008a3e:	9301      	str	r3, [sp, #4]
 8008a40:	2301      	movs	r3, #1
 8008a42:	9300      	str	r3, [sp, #0]
 8008a44:	2300      	movs	r3, #0
 8008a46:	883a      	ldrh	r2, [r7, #0]
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
        _lv_blend_fill(clip, &draw_area,
 8008a48:	a810      	add	r0, sp, #64	; 0x40
 8008a4a:	f7fe f899 	bl	8006b80 <_lv_blend_fill>
    if(dsc->round_end || dsc->round_start) {
 8008a4e:	230c      	movs	r3, #12
 8008a50:	7a7a      	ldrb	r2, [r7, #9]
 8008a52:	421a      	tst	r2, r3
 8008a54:	d03f      	beq.n	8008ad6 <lv_draw_line+0x1ca>
 8008a56:	2501      	movs	r5, #1
        lv_draw_rect_dsc_init(&cir_dsc);
 8008a58:	ae37      	add	r6, sp, #220	; 0xdc
 8008a5a:	0030      	movs	r0, r6
 8008a5c:	f001 f92a 	bl	8009cb4 <lv_draw_rect_dsc_init>
        cir_dsc.bg_color = dsc->color;
 8008a60:	883b      	ldrh	r3, [r7, #0]
 8008a62:	8073      	strh	r3, [r6, #2]
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 8008a64:	4bbb      	ldr	r3, [pc, #748]	; (8008d54 <lv_draw_line+0x448>)
 8008a66:	8033      	strh	r3, [r6, #0]
        cir_dsc.bg_opa = dsc->opa;
 8008a68:	7a3b      	ldrb	r3, [r7, #8]
 8008a6a:	7333      	strb	r3, [r6, #12]
        int32_t r = (dsc->width >> 1);
 8008a6c:	2202      	movs	r2, #2
 8008a6e:	5ebb      	ldrsh	r3, [r7, r2]
 8008a70:	105c      	asrs	r4, r3, #1
 8008a72:	439d      	bics	r5, r3
        if(dsc->round_start) {
 8008a74:	7a7b      	ldrb	r3, [r7, #9]
 8008a76:	075b      	lsls	r3, r3, #29
 8008a78:	d516      	bpl.n	8008aa8 <lv_draw_line+0x19c>
            cir_area.x1 = point1->x - r;
 8008a7a:	9b08      	ldr	r3, [sp, #32]
 8008a7c:	a82c      	add	r0, sp, #176	; 0xb0
 8008a7e:	881b      	ldrh	r3, [r3, #0]
 8008a80:	9304      	str	r3, [sp, #16]
 8008a82:	9a04      	ldr	r2, [sp, #16]
 8008a84:	b2a3      	uxth	r3, r4
 8008a86:	1ad1      	subs	r1, r2, r3
 8008a88:	8001      	strh	r1, [r0, #0]
            cir_area.y1 = point1->y - r;
 8008a8a:	9908      	ldr	r1, [sp, #32]
 8008a8c:	8849      	ldrh	r1, [r1, #2]
 8008a8e:	1aca      	subs	r2, r1, r3
 8008a90:	8042      	strh	r2, [r0, #2]
            cir_area.x2 = point1->x + r - r_corr;
 8008a92:	9a04      	ldr	r2, [sp, #16]
 8008a94:	18d2      	adds	r2, r2, r3
 8008a96:	1b52      	subs	r2, r2, r5
            cir_area.y2 = point1->y + r - r_corr ;
 8008a98:	185b      	adds	r3, r3, r1
            cir_area.x2 = point1->x + r - r_corr;
 8008a9a:	8082      	strh	r2, [r0, #4]
            cir_area.y2 = point1->y + r - r_corr ;
 8008a9c:	1b5b      	subs	r3, r3, r5
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 8008a9e:	0032      	movs	r2, r6
 8008aa0:	990c      	ldr	r1, [sp, #48]	; 0x30
            cir_area.y2 = point1->y + r - r_corr ;
 8008aa2:	80c3      	strh	r3, [r0, #6]
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 8008aa4:	f001 f92e 	bl	8009d04 <lv_draw_rect>
        if(dsc->round_end) {
 8008aa8:	7a7b      	ldrb	r3, [r7, #9]
 8008aaa:	071b      	lsls	r3, r3, #28
 8008aac:	d513      	bpl.n	8008ad6 <lv_draw_line+0x1ca>
            cir_area.x1 = point2->x - r;
 8008aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ab0:	b2a4      	uxth	r4, r4
 8008ab2:	881b      	ldrh	r3, [r3, #0]
 8008ab4:	a82c      	add	r0, sp, #176	; 0xb0
 8008ab6:	1b1a      	subs	r2, r3, r4
 8008ab8:	8002      	strh	r2, [r0, #0]
            cir_area.y1 = point2->y - r;
 8008aba:	9a09      	ldr	r2, [sp, #36]	; 0x24
            cir_area.x2 = point2->x + r - r_corr;
 8008abc:	191b      	adds	r3, r3, r4
            cir_area.y1 = point2->y - r;
 8008abe:	8852      	ldrh	r2, [r2, #2]
            cir_area.x2 = point2->x + r - r_corr;
 8008ac0:	1b5b      	subs	r3, r3, r5
            cir_area.y1 = point2->y - r;
 8008ac2:	1b11      	subs	r1, r2, r4
            cir_area.y2 = point2->y + r - r_corr ;
 8008ac4:	18a4      	adds	r4, r4, r2
            cir_area.y1 = point2->y - r;
 8008ac6:	8041      	strh	r1, [r0, #2]
            cir_area.y2 = point2->y + r - r_corr ;
 8008ac8:	1b65      	subs	r5, r4, r5
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 8008aca:	aa37      	add	r2, sp, #220	; 0xdc
 8008acc:	990c      	ldr	r1, [sp, #48]	; 0x30
            cir_area.x2 = point2->x + r - r_corr;
 8008ace:	8083      	strh	r3, [r0, #4]
            cir_area.y2 = point2->y + r - r_corr ;
 8008ad0:	80c5      	strh	r5, [r0, #6]
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 8008ad2:	f001 f917 	bl	8009d04 <lv_draw_rect>
}
 8008ad6:	b04d      	add	sp, #308	; 0x134
 8008ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
 8008ada:	0022      	movs	r2, r4
 8008adc:	a910      	add	r1, sp, #64	; 0x40
 8008ade:	0020      	movs	r0, r4
 8008ae0:	f002 fdb3 	bl	800b64a <_lv_area_intersect>
        if(!is_common) return;
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	d0b2      	beq.n	8008a4e <lv_draw_line+0x142>
        draw_area.x1 -= disp_area->x1;
 8008ae8:	2200      	movs	r2, #0
 8008aea:	5ea3      	ldrsh	r3, [r4, r2]
 8008aec:	930a      	str	r3, [sp, #40]	; 0x28
 8008aee:	9b04      	ldr	r3, [sp, #16]
 8008af0:	2210      	movs	r2, #16
 8008af2:	5e9b      	ldrsh	r3, [r3, r2]
 8008af4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008af6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008af8:	466b      	mov	r3, sp
 8008afa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
        draw_area.y1 -= disp_area->y1;
 8008afc:	2502      	movs	r5, #2
 8008afe:	5f61      	ldrsh	r1, [r4, r5]
        draw_area.x1 -= disp_area->x1;
 8008b00:	1ad2      	subs	r2, r2, r3
 8008b02:	b292      	uxth	r2, r2
 8008b04:	b210      	sxth	r0, r2
        draw_area.y1 -= disp_area->y1;
 8008b06:	9d04      	ldr	r5, [sp, #16]
        draw_area.x1 -= disp_area->x1;
 8008b08:	8020      	strh	r0, [r4, #0]
        draw_area.y1 -= disp_area->y1;
 8008b0a:	8a6d      	ldrh	r5, [r5, #18]
 8008b0c:	46ac      	mov	ip, r5
 8008b0e:	1b4d      	subs	r5, r1, r5
 8008b10:	8065      	strh	r5, [r4, #2]
        draw_area.x2 -= disp_area->x1;
 8008b12:	2504      	movs	r5, #4
 8008b14:	5f66      	ldrsh	r6, [r4, r5]
 8008b16:	1af3      	subs	r3, r6, r3
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	9306      	str	r3, [sp, #24]
 8008b1c:	80a3      	strh	r3, [r4, #4]
        draw_area.y2 -= disp_area->y1;
 8008b1e:	4663      	mov	r3, ip
 8008b20:	88e5      	ldrh	r5, [r4, #6]
 8008b22:	1aed      	subs	r5, r5, r3
 8008b24:	9b06      	ldr	r3, [sp, #24]
 8008b26:	80e5      	strh	r5, [r4, #6]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	1a9b      	subs	r3, r3, r2
 8008b2c:	b21b      	sxth	r3, r3
        fill_area.x1 = draw_area.x1 + disp_area->x1;
 8008b2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b30:	9306      	str	r3, [sp, #24]
 8008b32:	ab37      	add	r3, sp, #220	; 0xdc
 8008b34:	801a      	strh	r2, [r3, #0]
        fill_area.x2 = draw_area.x2 + disp_area->x1;
 8008b36:	809e      	strh	r6, [r3, #4]
        fill_area.y1 = draw_area.y1 + disp_area->y1;
 8008b38:	8059      	strh	r1, [r3, #2]
        fill_area.y2 = fill_area.y1;
 8008b3a:	80d9      	strh	r1, [r3, #6]
        if(dashed) {
 8008b3c:	9b05      	ldr	r3, [sp, #20]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d00a      	beq.n	8008b58 <lv_draw_line+0x24c>
            dash_start = (vdb->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
 8008b42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b44:	1818      	adds	r0, r3, r0
 8008b46:	2306      	movs	r3, #6
 8008b48:	5ef9      	ldrsh	r1, [r7, r3]
 8008b4a:	2204      	movs	r2, #4
 8008b4c:	5ebb      	ldrsh	r3, [r7, r2]
 8008b4e:	18c9      	adds	r1, r1, r3
 8008b50:	f7f7 fc80 	bl	8000454 <__aeabi_idivmod>
 8008b54:	b20b      	sxth	r3, r1
 8008b56:	9307      	str	r3, [sp, #28]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 8008b58:	9806      	ldr	r0, [sp, #24]
 8008b5a:	f003 fb2f 	bl	800c1bc <_lv_mem_buf_get>
 8008b5e:	0004      	movs	r4, r0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8008b60:	ab2c      	add	r3, sp, #176	; 0xb0
 8008b62:	2602      	movs	r6, #2
 8008b64:	5f9e      	ldrsh	r6, [r3, r6]
 8008b66:	ad2c      	add	r5, sp, #176	; 0xb0
 8008b68:	2206      	movs	r2, #6
 8008b6a:	5eab      	ldrsh	r3, [r5, r2]
 8008b6c:	429e      	cmp	r6, r3
 8008b6e:	dd03      	ble.n	8008b78 <lv_draw_line+0x26c>
        _lv_mem_buf_release(mask_buf);
 8008b70:	0020      	movs	r0, r4
                           LV_BLEND_MODE_NORMAL);

            fill_area.y1++;
            fill_area.y2++;
        }
        _lv_mem_buf_release(mask_buf);
 8008b72:	f003 fa2b 	bl	800bfcc <_lv_mem_buf_release>
 8008b76:	e76a      	b.n	8008a4e <lv_draw_line+0x142>
            _lv_memset_ff(mask_buf, draw_area_w);
 8008b78:	9906      	ldr	r1, [sp, #24]
 8008b7a:	0020      	movs	r0, r4
 8008b7c:	f003 fbd0 	bl	800c320 <_lv_memset_ff>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 8008b80:	9b04      	ldr	r3, [sp, #16]
 8008b82:	0020      	movs	r0, r4
 8008b84:	8a5a      	ldrh	r2, [r3, #18]
 8008b86:	8a19      	ldrh	r1, [r3, #16]
 8008b88:	882b      	ldrh	r3, [r5, #0]
 8008b8a:	1992      	adds	r2, r2, r6
 8008b8c:	18c9      	adds	r1, r1, r3
 8008b8e:	b212      	sxth	r2, r2
 8008b90:	9b06      	ldr	r3, [sp, #24]
 8008b92:	b209      	sxth	r1, r1
 8008b94:	f000 ff30 	bl	80099f8 <lv_draw_mask_apply>
            if(dashed) {
 8008b98:	9b05      	ldr	r3, [sp, #20]
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 8008b9a:	0002      	movs	r2, r0
            if(dashed) {
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d014      	beq.n	8008bca <lv_draw_line+0x2be>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
 8008ba0:	2800      	cmp	r0, #0
 8008ba2:	d012      	beq.n	8008bca <lv_draw_line+0x2be>
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
 8008ba4:	2200      	movs	r2, #0
                    lv_style_int_t dash_cnt = dash_start;
 8008ba6:	9907      	ldr	r1, [sp, #28]
 8008ba8:	4694      	mov	ip, r2
 8008baa:	e00a      	b.n	8008bc2 <lv_draw_line+0x2b6>
                        if(dash_cnt <= dsc->dash_width) {
 8008bac:	2504      	movs	r5, #4
 8008bae:	5f7b      	ldrsh	r3, [r7, r5]
 8008bb0:	428b      	cmp	r3, r1
 8008bb2:	db20      	blt.n	8008bf6 <lv_draw_line+0x2ea>
                            i += diff;
 8008bb4:	189a      	adds	r2, r3, r2
 8008bb6:	1a52      	subs	r2, r2, r1
 8008bb8:	b212      	sxth	r2, r2
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
 8008bba:	3201      	adds	r2, #1
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	b212      	sxth	r2, r2
 8008bc0:	b219      	sxth	r1, r3
 8008bc2:	9b06      	ldr	r3, [sp, #24]
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	dcf1      	bgt.n	8008bac <lv_draw_line+0x2a0>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
 8008bc8:	2202      	movs	r2, #2
                           dsc->blend_mode);
 8008bca:	7a7b      	ldrb	r3, [r7, #9]
            _lv_blend_fill(clip, &fill_area,
 8008bcc:	ad37      	add	r5, sp, #220	; 0xdc
                           dsc->blend_mode);
 8008bce:	079b      	lsls	r3, r3, #30
            _lv_blend_fill(clip, &fill_area,
 8008bd0:	0f9b      	lsrs	r3, r3, #30
 8008bd2:	9302      	str	r3, [sp, #8]
 8008bd4:	7a3b      	ldrb	r3, [r7, #8]
 8008bd6:	9200      	str	r2, [sp, #0]
 8008bd8:	9301      	str	r3, [sp, #4]
 8008bda:	883a      	ldrh	r2, [r7, #0]
 8008bdc:	0023      	movs	r3, r4
 8008bde:	0029      	movs	r1, r5
 8008be0:	a810      	add	r0, sp, #64	; 0x40
 8008be2:	f7fd ffcd 	bl	8006b80 <_lv_blend_fill>
            fill_area.y1++;
 8008be6:	886b      	ldrh	r3, [r5, #2]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8008be8:	3601      	adds	r6, #1
            fill_area.y1++;
 8008bea:	3301      	adds	r3, #1
 8008bec:	806b      	strh	r3, [r5, #2]
            fill_area.y2++;
 8008bee:	88eb      	ldrh	r3, [r5, #6]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	80eb      	strh	r3, [r5, #6]
 8008bf4:	e7b7      	b.n	8008b66 <lv_draw_line+0x25a>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 8008bf6:	2006      	movs	r0, #6
 8008bf8:	5e3d      	ldrsh	r5, [r7, r0]
 8008bfa:	18ed      	adds	r5, r5, r3
                            dash_cnt = 0;
 8008bfc:	2300      	movs	r3, #0
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 8008bfe:	42a9      	cmp	r1, r5
 8008c00:	dadb      	bge.n	8008bba <lv_draw_line+0x2ae>
                            mask_buf[i] = 0x00;
 8008c02:	4663      	mov	r3, ip
 8008c04:	54a3      	strb	r3, [r4, r2]
 8008c06:	000b      	movs	r3, r1
 8008c08:	e7d7      	b.n	8008bba <lv_draw_line+0x2ae>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
 8008c0a:	9b08      	ldr	r3, [sp, #32]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	5e9b      	ldrsh	r3, [r3, r2]
 8008c10:	9304      	str	r3, [sp, #16]
 8008c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c14:	2200      	movs	r2, #0
 8008c16:	5e9b      	ldrsh	r3, [r3, r2]
 8008c18:	9305      	str	r3, [sp, #20]
 8008c1a:	9a05      	ldr	r2, [sp, #20]
 8008c1c:	9b04      	ldr	r3, [sp, #16]
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d000      	beq.n	8008c24 <lv_draw_line+0x318>
 8008c22:	e0d2      	b.n	8008dca <lv_draw_line+0x4be>
    lv_opa_t opa = dsc->opa;
 8008c24:	7a3b      	ldrb	r3, [r7, #8]
 8008c26:	9306      	str	r3, [sp, #24]
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 8008c28:	f7fd f8c2 	bl	8005db0 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8008c2c:	f002 fc1a 	bl	800b464 <lv_disp_get_buf>
 8008c30:	9004      	str	r0, [sp, #16]
    int32_t w = dsc->width - 1;
 8008c32:	2302      	movs	r3, #2
 8008c34:	5efc      	ldrsh	r4, [r7, r3]
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 8008c36:	2301      	movs	r3, #1
    int32_t w = dsc->width - 1;
 8008c38:	3c01      	subs	r4, #1
    int32_t w_half0 = w >> 1;
 8008c3a:	1066      	asrs	r6, r4, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 8008c3c:	401c      	ands	r4, r3
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 8008c3e:	2206      	movs	r2, #6
 8008c40:	5ebb      	ldrsh	r3, [r7, r2]
 8008c42:	2200      	movs	r2, #0
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 8008c44:	19a4      	adds	r4, r4, r6
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 8008c46:	9205      	str	r2, [sp, #20]
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d005      	beq.n	8008c58 <lv_draw_line+0x34c>
 8008c4c:	2204      	movs	r2, #4
 8008c4e:	5ebb      	ldrsh	r3, [r7, r2]
 8008c50:	001a      	movs	r2, r3
 8008c52:	1e53      	subs	r3, r2, #1
 8008c54:	419a      	sbcs	r2, r3
 8008c56:	9205      	str	r2, [sp, #20]
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 8008c58:	f000 ff10 	bl	8009a7c <lv_draw_mask_get_cnt>
 8008c5c:	2500      	movs	r5, #0
 8008c5e:	42a8      	cmp	r0, r5
 8008c60:	d103      	bne.n	8008c6a <lv_draw_line+0x35e>
    else if(dashed) simple_mode = false;
 8008c62:	2101      	movs	r1, #1
 8008c64:	9d05      	ldr	r5, [sp, #20]
 8008c66:	404d      	eors	r5, r1
 8008c68:	400d      	ands	r5, r1
    draw_area.x1 = point1->x - w_half1;
 8008c6a:	9b08      	ldr	r3, [sp, #32]
 8008c6c:	a92c      	add	r1, sp, #176	; 0xb0
 8008c6e:	881b      	ldrh	r3, [r3, #0]
 8008c70:	1b1c      	subs	r4, r3, r4
    draw_area.x2 = point1->x + w_half0;
 8008c72:	199e      	adds	r6, r3, r6
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
 8008c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
    draw_area.x1 = point1->x - w_half1;
 8008c76:	800c      	strh	r4, [r1, #0]
    draw_area.x2 = point1->x + w_half0;
 8008c78:	808e      	strh	r6, [r1, #4]
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
 8008c7a:	2002      	movs	r0, #2
 8008c7c:	5e18      	ldrsh	r0, [r3, r0]
 8008c7e:	9b08      	ldr	r3, [sp, #32]
 8008c80:	2202      	movs	r2, #2
 8008c82:	5e9a      	ldrsh	r2, [r3, r2]
 8008c84:	1c03      	adds	r3, r0, #0
 8008c86:	4290      	cmp	r0, r2
 8008c88:	dd00      	ble.n	8008c8c <lv_draw_line+0x380>
 8008c8a:	1c13      	adds	r3, r2, #0
 8008c8c:	804b      	strh	r3, [r1, #2]
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
 8008c8e:	1c03      	adds	r3, r0, #0
 8008c90:	4290      	cmp	r0, r2
 8008c92:	da00      	bge.n	8008c96 <lv_draw_line+0x38a>
 8008c94:	1c13      	adds	r3, r2, #0
 8008c96:	3b01      	subs	r3, #1
 8008c98:	80cb      	strh	r3, [r1, #6]
    if(simple_mode) {
 8008c9a:	2d00      	cmp	r5, #0
 8008c9c:	d00a      	beq.n	8008cb4 <lv_draw_line+0x3a8>
                       dsc->blend_mode);
 8008c9e:	7a7b      	ldrb	r3, [r7, #9]
 8008ca0:	079b      	lsls	r3, r3, #30
        _lv_blend_fill(clip, &draw_area,
 8008ca2:	0f9b      	lsrs	r3, r3, #30
 8008ca4:	9302      	str	r3, [sp, #8]
 8008ca6:	9b06      	ldr	r3, [sp, #24]
 8008ca8:	9301      	str	r3, [sp, #4]
 8008caa:	2301      	movs	r3, #1
 8008cac:	9300      	str	r3, [sp, #0]
 8008cae:	883a      	ldrh	r2, [r7, #0]
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	e6c9      	b.n	8008a48 <lv_draw_line+0x13c>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
 8008cb4:	ac2c      	add	r4, sp, #176	; 0xb0
 8008cb6:	0022      	movs	r2, r4
 8008cb8:	a910      	add	r1, sp, #64	; 0x40
 8008cba:	0020      	movs	r0, r4
 8008cbc:	f002 fcc5 	bl	800b64a <_lv_area_intersect>
        if(!is_common) return;
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	d100      	bne.n	8008cc6 <lv_draw_line+0x3ba>
 8008cc4:	e6c3      	b.n	8008a4e <lv_draw_line+0x142>
        draw_area.x1 -= vdb->area.x1;
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	5ea3      	ldrsh	r3, [r4, r2]
 8008cca:	9306      	str	r3, [sp, #24]
 8008ccc:	9b04      	ldr	r3, [sp, #16]
 8008cce:	9a06      	ldr	r2, [sp, #24]
 8008cd0:	8a1b      	ldrh	r3, [r3, #16]
        draw_area.y1 -= vdb->area.y1;
 8008cd2:	2002      	movs	r0, #2
 8008cd4:	5e21      	ldrsh	r1, [r4, r0]
        draw_area.x1 -= vdb->area.x1;
 8008cd6:	1ad2      	subs	r2, r2, r3
 8008cd8:	b292      	uxth	r2, r2
        draw_area.y1 -= vdb->area.y1;
 8008cda:	9804      	ldr	r0, [sp, #16]
        draw_area.x1 -= vdb->area.x1;
 8008cdc:	8022      	strh	r2, [r4, #0]
        draw_area.y1 -= vdb->area.y1;
 8008cde:	8a40      	ldrh	r0, [r0, #18]
 8008ce0:	4684      	mov	ip, r0
 8008ce2:	1a08      	subs	r0, r1, r0
 8008ce4:	8060      	strh	r0, [r4, #2]
        draw_area.x2 -= vdb->area.x1;
 8008ce6:	2004      	movs	r0, #4
 8008ce8:	5e26      	ldrsh	r6, [r4, r0]
 8008cea:	1af3      	subs	r3, r6, r3
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	9307      	str	r3, [sp, #28]
 8008cf0:	80a3      	strh	r3, [r4, #4]
        draw_area.y2 -= vdb->area.y1;
 8008cf2:	4663      	mov	r3, ip
 8008cf4:	88e0      	ldrh	r0, [r4, #6]
 8008cf6:	1ac0      	subs	r0, r0, r3
 8008cf8:	9b07      	ldr	r3, [sp, #28]
 8008cfa:	80e0      	strh	r0, [r4, #6]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	1a9a      	subs	r2, r3, r2
 8008d00:	b213      	sxth	r3, r2
 8008d02:	9307      	str	r3, [sp, #28]
        fill_area.x1 = draw_area.x1 + disp_area->x1;
 8008d04:	9a06      	ldr	r2, [sp, #24]
 8008d06:	ab37      	add	r3, sp, #220	; 0xdc
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 8008d08:	9807      	ldr	r0, [sp, #28]
        fill_area.x2 = draw_area.x2 + disp_area->x1;
 8008d0a:	809e      	strh	r6, [r3, #4]
        fill_area.x1 = draw_area.x1 + disp_area->x1;
 8008d0c:	801a      	strh	r2, [r3, #0]
        fill_area.y1 = draw_area.y1 + disp_area->y1;
 8008d0e:	8059      	strh	r1, [r3, #2]
        fill_area.y2 = fill_area.y1;
 8008d10:	80d9      	strh	r1, [r3, #6]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 8008d12:	f003 fa53 	bl	800c1bc <_lv_mem_buf_get>
        if(dashed) {
 8008d16:	9b05      	ldr	r3, [sp, #20]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 8008d18:	0006      	movs	r6, r0
        if(dashed) {
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00d      	beq.n	8008d3a <lv_draw_line+0x42e>
            dash_start = (vdb->area.y1 + draw_area.y1) % (dsc->dash_gap + dsc->dash_width);
 8008d1e:	9b04      	ldr	r3, [sp, #16]
 8008d20:	2012      	movs	r0, #18
 8008d22:	5e18      	ldrsh	r0, [r3, r0]
 8008d24:	2202      	movs	r2, #2
 8008d26:	5ea3      	ldrsh	r3, [r4, r2]
 8008d28:	18c0      	adds	r0, r0, r3
 8008d2a:	2306      	movs	r3, #6
 8008d2c:	5ef9      	ldrsh	r1, [r7, r3]
 8008d2e:	2204      	movs	r2, #4
 8008d30:	5ebb      	ldrsh	r3, [r7, r2]
 8008d32:	18c9      	adds	r1, r1, r3
 8008d34:	f7f7 fb8e 	bl	8000454 <__aeabi_idivmod>
 8008d38:	b20d      	sxth	r5, r1
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8008d3a:	ab2c      	add	r3, sp, #176	; 0xb0
 8008d3c:	2202      	movs	r2, #2
 8008d3e:	5e9b      	ldrsh	r3, [r3, r2]
 8008d40:	9306      	str	r3, [sp, #24]
 8008d42:	ac2c      	add	r4, sp, #176	; 0xb0
 8008d44:	2206      	movs	r2, #6
 8008d46:	5ea3      	ldrsh	r3, [r4, r2]
 8008d48:	9a06      	ldr	r2, [sp, #24]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	dd04      	ble.n	8008d58 <lv_draw_line+0x44c>
        _lv_mem_buf_release(mask_buf);
 8008d4e:	0030      	movs	r0, r6
 8008d50:	e70f      	b.n	8008b72 <lv_draw_line+0x266>
 8008d52:	46c0      	nop			; (mov r8, r8)
 8008d54:	00007fff 	.word	0x00007fff
            _lv_memset_ff(mask_buf, draw_area_w);
 8008d58:	9907      	ldr	r1, [sp, #28]
 8008d5a:	0030      	movs	r0, r6
 8008d5c:	f003 fae0 	bl	800c320 <_lv_memset_ff>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 8008d60:	9b04      	ldr	r3, [sp, #16]
 8008d62:	0030      	movs	r0, r6
 8008d64:	8a5a      	ldrh	r2, [r3, #18]
 8008d66:	9b06      	ldr	r3, [sp, #24]
 8008d68:	18d2      	adds	r2, r2, r3
 8008d6a:	9b04      	ldr	r3, [sp, #16]
 8008d6c:	b212      	sxth	r2, r2
 8008d6e:	8a19      	ldrh	r1, [r3, #16]
 8008d70:	8823      	ldrh	r3, [r4, #0]
 8008d72:	18c9      	adds	r1, r1, r3
 8008d74:	b209      	sxth	r1, r1
 8008d76:	9b07      	ldr	r3, [sp, #28]
 8008d78:	f000 fe3e 	bl	80099f8 <lv_draw_mask_apply>
            if(dashed) {
 8008d7c:	9b05      	ldr	r3, [sp, #20]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00e      	beq.n	8008da0 <lv_draw_line+0x494>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
 8008d82:	2800      	cmp	r0, #0
 8008d84:	d00a      	beq.n	8008d9c <lv_draw_line+0x490>
                    if(dash_cnt > dsc->dash_width) {
 8008d86:	2304      	movs	r3, #4
 8008d88:	5efa      	ldrsh	r2, [r7, r3]
 8008d8a:	42aa      	cmp	r2, r5
 8008d8c:	da00      	bge.n	8008d90 <lv_draw_line+0x484>
                        mask_res = LV_DRAW_MASK_RES_TRANSP;
 8008d8e:	2000      	movs	r0, #0
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 8008d90:	2106      	movs	r1, #6
 8008d92:	5e7b      	ldrsh	r3, [r7, r1]
 8008d94:	189b      	adds	r3, r3, r2
 8008d96:	429d      	cmp	r5, r3
 8008d98:	db00      	blt.n	8008d9c <lv_draw_line+0x490>
                        dash_cnt = 0;
 8008d9a:	2500      	movs	r5, #0
                dash_cnt ++;
 8008d9c:	3501      	adds	r5, #1
 8008d9e:	b22d      	sxth	r5, r5
            _lv_blend_fill(clip, &fill_area,
 8008da0:	2300      	movs	r3, #0
 8008da2:	9302      	str	r3, [sp, #8]
 8008da4:	7a3b      	ldrb	r3, [r7, #8]
 8008da6:	ac37      	add	r4, sp, #220	; 0xdc
 8008da8:	9301      	str	r3, [sp, #4]
 8008daa:	9000      	str	r0, [sp, #0]
 8008dac:	0033      	movs	r3, r6
 8008dae:	883a      	ldrh	r2, [r7, #0]
 8008db0:	0021      	movs	r1, r4
 8008db2:	a810      	add	r0, sp, #64	; 0x40
 8008db4:	f7fd fee4 	bl	8006b80 <_lv_blend_fill>
            fill_area.y1++;
 8008db8:	8863      	ldrh	r3, [r4, #2]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	8063      	strh	r3, [r4, #2]
            fill_area.y2++;
 8008dbe:	88e3      	ldrh	r3, [r4, #6]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	80e3      	strh	r3, [r4, #6]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8008dc4:	9b06      	ldr	r3, [sp, #24]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	e7ba      	b.n	8008d40 <lv_draw_line+0x434>
                                                 const lv_draw_line_dsc_t * dsc)
{
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
 8008dca:	9b06      	ldr	r3, [sp, #24]
 8008dcc:	9a07      	ldr	r2, [sp, #28]
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	da07      	bge.n	8008de2 <lv_draw_line+0x4d6>
 8008dd2:	0013      	movs	r3, r2
 8008dd4:	9a06      	ldr	r2, [sp, #24]
 8008dd6:	9306      	str	r3, [sp, #24]
 8008dd8:	9207      	str	r2, [sp, #28]
 8008dda:	9b05      	ldr	r3, [sp, #20]
 8008ddc:	9a04      	ldr	r2, [sp, #16]
 8008dde:	9304      	str	r3, [sp, #16]
 8008de0:	9205      	str	r2, [sp, #20]
        p2.y = point1->y;
        p1.x = point2->x;
        p2.x = point1->x;
    }

    int32_t xdiff = p2.x - p1.x;
 8008de2:	9a05      	ldr	r2, [sp, #20]
 8008de4:	9b04      	ldr	r3, [sp, #16]
 8008de6:	1a9b      	subs	r3, r3, r2
 8008de8:	930b      	str	r3, [sp, #44]	; 0x2c
    int32_t ydiff = p2.y - p1.y;
 8008dea:	9a07      	ldr	r2, [sp, #28]
 8008dec:	9b06      	ldr	r3, [sp, #24]
 8008dee:	1a9b      	subs	r3, r3, r2
 8008df0:	930d      	str	r3, [sp, #52]	; 0x34
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
 8008df2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008df4:	17da      	asrs	r2, r3, #31
 8008df6:	189b      	adds	r3, r3, r2
 8008df8:	4053      	eors	r3, r2
 8008dfa:	930a      	str	r3, [sp, #40]	; 0x28
 8008dfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008dfe:	17da      	asrs	r2, r3, #31
 8008e00:	189e      	adds	r6, r3, r2
        143, 145, 147, 149, 151, 153, 155, 158,
        160, 162, 165, 167, 170, 173, 175, 178,
        181,
    };

    int32_t w = dsc->width;
 8008e02:	2302      	movs	r3, #2
 8008e04:	5efd      	ldrsh	r5, [r7, r3]
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
 8008e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
 8008e08:	4056      	eors	r6, r2
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
 8008e0a:	42b3      	cmp	r3, r6
 8008e0c:	dc00      	bgt.n	8008e10 <lv_draw_line+0x504>
 8008e0e:	e11f      	b.n	8009050 <lv_draw_line+0x744>
 8008e10:	0019      	movs	r1, r3
 8008e12:	0170      	lsls	r0, r6, #5
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
 8008e14:	f7f7 fa38 	bl	8000288 <__divsi3>

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 8008e18:	4bc2      	ldr	r3, [pc, #776]	; (8009124 <lv_draw_line+0x818>)
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
 8008e1a:	466a      	mov	r2, sp
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 8008e1c:	5c19      	ldrb	r1, [r3, r0]
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
 8008e1e:	9804      	ldr	r0, [sp, #16]
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 8008e20:	434d      	muls	r5, r1
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
 8008e22:	4684      	mov	ip, r0
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 8008e24:	353f      	adds	r5, #63	; 0x3f
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
 8008e26:	9805      	ldr	r0, [sp, #20]
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 8008e28:	11ec      	asrs	r4, r5, #7
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
 8008e2a:	b2a3      	uxth	r3, r4
 8008e2c:	a912      	add	r1, sp, #72	; 0x48
 8008e2e:	8a12      	ldrh	r2, [r2, #16]
 8008e30:	4584      	cmp	ip, r0
 8008e32:	dd01      	ble.n	8008e38 <lv_draw_line+0x52c>
 8008e34:	466a      	mov	r2, sp
 8008e36:	8a92      	ldrh	r2, [r2, #20]
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
 8008e38:	9804      	ldr	r0, [sp, #16]
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
 8008e3a:	1ad2      	subs	r2, r2, r3
 8008e3c:	800a      	strh	r2, [r1, #0]
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
 8008e3e:	4684      	mov	ip, r0
 8008e40:	466a      	mov	r2, sp
 8008e42:	9805      	ldr	r0, [sp, #20]
 8008e44:	8a12      	ldrh	r2, [r2, #16]
 8008e46:	4584      	cmp	ip, r0
 8008e48:	da01      	bge.n	8008e4e <lv_draw_line+0x542>
 8008e4a:	466a      	mov	r2, sp
 8008e4c:	8a92      	ldrh	r2, [r2, #20]
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
 8008e4e:	9806      	ldr	r0, [sp, #24]
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
 8008e50:	189a      	adds	r2, r3, r2
 8008e52:	808a      	strh	r2, [r1, #4]
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
 8008e54:	4684      	mov	ip, r0
 8008e56:	466a      	mov	r2, sp
 8008e58:	9807      	ldr	r0, [sp, #28]
 8008e5a:	a912      	add	r1, sp, #72	; 0x48
 8008e5c:	8b12      	ldrh	r2, [r2, #24]
 8008e5e:	4584      	cmp	ip, r0
 8008e60:	dd01      	ble.n	8008e66 <lv_draw_line+0x55a>
 8008e62:	466a      	mov	r2, sp
 8008e64:	8b92      	ldrh	r2, [r2, #28]
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
 8008e66:	9806      	ldr	r0, [sp, #24]
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
 8008e68:	1ad2      	subs	r2, r2, r3
 8008e6a:	804a      	strh	r2, [r1, #2]
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
 8008e6c:	4684      	mov	ip, r0
 8008e6e:	466a      	mov	r2, sp
 8008e70:	9807      	ldr	r0, [sp, #28]
 8008e72:	8b12      	ldrh	r2, [r2, #24]
 8008e74:	4584      	cmp	ip, r0
 8008e76:	da01      	bge.n	8008e7c <lv_draw_line+0x570>
 8008e78:	466a      	mov	r2, sp
 8008e7a:	8b92      	ldrh	r2, [r2, #28]
 8008e7c:	189b      	adds	r3, r3, r2
 8008e7e:	80cb      	strh	r3, [r1, #6]

    /* Get the union of `coords` and `clip`*/
    /* `clip` is already truncated to the `vdb` size
     * in 'lv_refr_area' function */
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
 8008e80:	a912      	add	r1, sp, #72	; 0x48
 8008e82:	aa10      	add	r2, sp, #64	; 0x40
 8008e84:	0008      	movs	r0, r1
 8008e86:	f002 fbe0 	bl	800b64a <_lv_area_intersect>
    if(is_common == false) return;
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	d100      	bne.n	8008e90 <lv_draw_line+0x584>
 8008e8e:	e5de      	b.n	8008a4e <lv_draw_line+0x142>
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 8008e90:	2301      	movs	r3, #1
    int32_t w_half0 = w >> 1;
 8008e92:	122d      	asrs	r5, r5, #8
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 8008e94:	401c      	ands	r4, r3
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
 8008e96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 8008e98:	1964      	adds	r4, r4, r5
 8008e9a:	b2a4      	uxth	r4, r4
 8008e9c:	b2ad      	uxth	r5, r5
 8008e9e:	466b      	mov	r3, sp
    if(flat) {
 8008ea0:	42b2      	cmp	r2, r6
 8008ea2:	dc00      	bgt.n	8008ea6 <lv_draw_line+0x59a>
 8008ea4:	e0e5      	b.n	8009072 <lv_draw_line+0x766>
 8008ea6:	8b9e      	ldrh	r6, [r3, #28]
 8008ea8:	19a3      	adds	r3, r4, r6
 8008eaa:	b21a      	sxth	r2, r3
 8008eac:	466b      	mov	r3, sp
 8008eae:	8b1b      	ldrh	r3, [r3, #24]
 8008eb0:	1b76      	subs	r6, r6, r5
 8008eb2:	18e4      	adds	r4, r4, r3
 8008eb4:	1b5d      	subs	r5, r3, r5
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	920a      	str	r2, [sp, #40]	; 0x28
        if(xdiff > 0) {
 8008eba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ebc:	b224      	sxth	r4, r4
 8008ebe:	b236      	sxth	r6, r6
 8008ec0:	b22d      	sxth	r5, r5
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 8008ec2:	9301      	str	r3, [sp, #4]
        if(xdiff > 0) {
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	dc00      	bgt.n	8008eca <lv_draw_line+0x5be>
 8008ec8:	e0c6      	b.n	8009058 <lv_draw_line+0x74c>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 8008eca:	9b04      	ldr	r3, [sp, #16]
 8008ecc:	0032      	movs	r2, r6
 8008ece:	9500      	str	r5, [sp, #0]
 8008ed0:	9905      	ldr	r1, [sp, #20]
 8008ed2:	a816      	add	r0, sp, #88	; 0x58
 8008ed4:	f000 fde2 	bl	8009a9c <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 8008ed8:	2301      	movs	r3, #1
 8008eda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008edc:	9301      	str	r3, [sp, #4]
 8008ede:	9b04      	ldr	r3, [sp, #16]
 8008ee0:	9400      	str	r4, [sp, #0]
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
        else {
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 8008ee2:	9905      	ldr	r1, [sp, #20]
        }
    }
    else {
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
                                      LV_DRAW_MASK_LINE_SIDE_LEFT);
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 8008ee4:	a821      	add	r0, sp, #132	; 0x84
 8008ee6:	f000 fdd9 	bl	8009a9c <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 8008eea:	2100      	movs	r1, #0
 8008eec:	a816      	add	r0, sp, #88	; 0x58
 8008eee:	f000 fd6d 	bl	80099cc <lv_draw_mask_add>
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 8008ef2:	2100      	movs	r1, #0
    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 8008ef4:	900e      	str	r0, [sp, #56]	; 0x38
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 8008ef6:	a821      	add	r0, sp, #132	; 0x84
 8008ef8:	f000 fd68 	bl	80099cc <lv_draw_mask_add>
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
 8008efc:	2310      	movs	r3, #16
 8008efe:	7a7e      	ldrb	r6, [r7, #9]
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 8008f00:	900f      	str	r0, [sp, #60]	; 0x3c
    if(!dsc->raw_end) {
 8008f02:	401e      	ands	r6, r3
 8008f04:	d000      	beq.n	8008f08 <lv_draw_line+0x5fc>
 8008f06:	e0ce      	b.n	80090a6 <lv_draw_line+0x79a>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
 8008f08:	466b      	mov	r3, sp
 8008f0a:	2203      	movs	r2, #3
 8008f0c:	8e9d      	ldrh	r5, [r3, #52]	; 0x34
 8008f0e:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
 8008f10:	9201      	str	r2, [sp, #4]
 8008f12:	9a07      	ldr	r2, [sp, #28]
 8008f14:	9b05      	ldr	r3, [sp, #20]
 8008f16:	18a2      	adds	r2, r4, r2
 8008f18:	b212      	sxth	r2, r2
 8008f1a:	1b5b      	subs	r3, r3, r5
 8008f1c:	b21b      	sxth	r3, r3
 8008f1e:	9200      	str	r2, [sp, #0]
 8008f20:	9905      	ldr	r1, [sp, #20]
 8008f22:	9a07      	ldr	r2, [sp, #28]
 8008f24:	a82c      	add	r0, sp, #176	; 0xb0
 8008f26:	f000 fdb9 	bl	8009a9c <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
 8008f2a:	2202      	movs	r2, #2
 8008f2c:	9201      	str	r2, [sp, #4]
 8008f2e:	9a06      	ldr	r2, [sp, #24]
 8008f30:	9b04      	ldr	r3, [sp, #16]
 8008f32:	18a4      	adds	r4, r4, r2
 8008f34:	1b5b      	subs	r3, r3, r5
 8008f36:	b224      	sxth	r4, r4
 8008f38:	b21b      	sxth	r3, r3
 8008f3a:	9904      	ldr	r1, [sp, #16]
 8008f3c:	a837      	add	r0, sp, #220	; 0xdc
 8008f3e:	9400      	str	r4, [sp, #0]
 8008f40:	f000 fdac 	bl	8009a9c <lv_draw_mask_line_points_init>
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 8008f44:	0031      	movs	r1, r6
 8008f46:	a82c      	add	r0, sp, #176	; 0xb0
 8008f48:	f000 fd40 	bl	80099cc <lv_draw_mask_add>
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 8008f4c:	0031      	movs	r1, r6
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 8008f4e:	900b      	str	r0, [sp, #44]	; 0x2c
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 8008f50:	a837      	add	r0, sp, #220	; 0xdc
 8008f52:	f000 fd3b 	bl	80099cc <lv_draw_mask_add>
 8008f56:	900d      	str	r0, [sp, #52]	; 0x34
    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 8008f58:	f7fc ff2a 	bl	8005db0 <_lv_refr_get_disp_refreshing>
 8008f5c:	0005      	movs	r5, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8008f5e:	f002 fa81 	bl	800b464 <lv_disp_get_buf>

    const lv_area_t * disp_area = &vdb->area;

    /*Store the coordinates of the `draw_a` relative to the VDB */
    draw_area.x1 -= disp_area->x1;
 8008f62:	ac12      	add	r4, sp, #72	; 0x48
 8008f64:	8a06      	ldrh	r6, [r0, #16]
 8008f66:	8823      	ldrh	r3, [r4, #0]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8008f68:	9004      	str	r0, [sp, #16]
    draw_area.x1 -= disp_area->x1;
 8008f6a:	1b9b      	subs	r3, r3, r6
 8008f6c:	b29a      	uxth	r2, r3
 8008f6e:	8022      	strh	r2, [r4, #0]
    draw_area.y1 -= disp_area->y1;
    draw_area.x2 -= disp_area->x1;
 8008f70:	88a3      	ldrh	r3, [r4, #4]
    draw_area.y1 -= disp_area->y1;
 8008f72:	8a41      	ldrh	r1, [r0, #18]
 8008f74:	8860      	ldrh	r0, [r4, #2]
    draw_area.x2 -= disp_area->x1;
 8008f76:	1b9b      	subs	r3, r3, r6
    draw_area.y1 -= disp_area->y1;
 8008f78:	1a40      	subs	r0, r0, r1
    draw_area.x2 -= disp_area->x1;
 8008f7a:	b29b      	uxth	r3, r3
    draw_area.y1 -= disp_area->y1;
 8008f7c:	8060      	strh	r0, [r4, #2]
    draw_area.x2 -= disp_area->x1;
 8008f7e:	80a3      	strh	r3, [r4, #4]
    draw_area.y2 -= disp_area->y1;
 8008f80:	88e0      	ldrh	r0, [r4, #6]
 8008f82:	3301      	adds	r3, #1
 8008f84:	1a9b      	subs	r3, r3, r2
 8008f86:	1a41      	subs	r1, r0, r1
 8008f88:	b21b      	sxth	r3, r3
     * So deal with it only with steep lines. */
    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(disp);
 8008f8a:	0028      	movs	r0, r5
    draw_area.y2 -= disp_area->y1;
 8008f8c:	80e1      	strh	r1, [r4, #6]
 8008f8e:	9306      	str	r3, [sp, #24]
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(disp);
 8008f90:	f002 f9f6 	bl	800b380 <lv_disp_get_hor_res>
 8008f94:	0005      	movs	r5, r0
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), hor_res);
 8008f96:	0020      	movs	r0, r4
 8008f98:	f002 fb49 	bl	800b62e <lv_area_get_size>
 8008f9c:	4285      	cmp	r5, r0
 8008f9e:	d903      	bls.n	8008fa8 <lv_draw_line+0x69c>
 8008fa0:	0020      	movs	r0, r4
 8008fa2:	f002 fb44 	bl	800b62e <lv_area_get_size>
 8008fa6:	0005      	movs	r5, r0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 8008fa8:	0028      	movs	r0, r5
 8008faa:	f003 f907 	bl	800c1bc <_lv_mem_buf_get>

    lv_area_t fill_area;
    fill_area.x1 = draw_area.x1 + disp_area->x1;
 8008fae:	9b04      	ldr	r3, [sp, #16]
 8008fb0:	ae12      	add	r6, sp, #72	; 0x48
 8008fb2:	8a1b      	ldrh	r3, [r3, #16]
 8008fb4:	8832      	ldrh	r2, [r6, #0]
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 8008fb6:	0004      	movs	r4, r0
    fill_area.x1 = draw_area.x1 + disp_area->x1;
 8008fb8:	189a      	adds	r2, r3, r2
 8008fba:	b212      	sxth	r2, r2
 8008fbc:	920a      	str	r2, [sp, #40]	; 0x28
 8008fbe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008fc0:	aa14      	add	r2, sp, #80	; 0x50
 8008fc2:	8011      	strh	r1, [r2, #0]
    fill_area.x2 = draw_area.x2 + disp_area->x1;
 8008fc4:	88b1      	ldrh	r1, [r6, #4]
 8008fc6:	185b      	adds	r3, r3, r1
    fill_area.y1 = draw_area.y1 + disp_area->y1;
 8008fc8:	9904      	ldr	r1, [sp, #16]
    fill_area.x2 = draw_area.x2 + disp_area->x1;
 8008fca:	8093      	strh	r3, [r2, #4]
    fill_area.y1 = draw_area.y1 + disp_area->y1;
 8008fcc:	8a49      	ldrh	r1, [r1, #18]
 8008fce:	8873      	ldrh	r3, [r6, #2]
 8008fd0:	185b      	adds	r3, r3, r1
 8008fd2:	b21b      	sxth	r3, r3

    int32_t x = vdb->area.x1 + draw_area.x1;

    uint32_t mask_p = 0;

    _lv_memset_ff(mask_buf, mask_buf_size);
 8008fd4:	0029      	movs	r1, r5
    fill_area.y1 = draw_area.y1 + disp_area->y1;
 8008fd6:	8053      	strh	r3, [r2, #2]
    fill_area.y2 = fill_area.y1;
 8008fd8:	80d3      	strh	r3, [r2, #6]
    _lv_memset_ff(mask_buf, mask_buf_size);
 8008fda:	f003 f9a1 	bl	800c320 <_lv_memset_ff>
    /*Fill the first row with 'color'*/
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
 8008fde:	2302      	movs	r3, #2
 8008fe0:	5ef2      	ldrsh	r2, [r6, r3]
 8008fe2:	9b04      	ldr	r3, [sp, #16]
 8008fe4:	2112      	movs	r1, #18
 8008fe6:	5e5b      	ldrsh	r3, [r3, r1]
 8008fe8:	18d3      	adds	r3, r2, r3
 8008fea:	9307      	str	r3, [sp, #28]
    uint32_t mask_p = 0;
 8008fec:	2300      	movs	r3, #0
 8008fee:	9305      	str	r3, [sp, #20]
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
 8008ff0:	ab12      	add	r3, sp, #72	; 0x48
 8008ff2:	2206      	movs	r2, #6
 8008ff4:	5e9b      	ldrsh	r3, [r3, r2]
 8008ff6:	9a04      	ldr	r2, [sp, #16]
 8008ff8:	2112      	movs	r1, #18
 8008ffa:	5e52      	ldrsh	r2, [r2, r1]
 8008ffc:	189b      	adds	r3, r3, r2
 8008ffe:	9a07      	ldr	r2, [sp, #28]
 8009000:	429a      	cmp	r2, r3
 8009002:	dd55      	ble.n	80090b0 <lv_draw_line+0x7a4>
            _lv_memset_ff(mask_buf, mask_buf_size);
        }
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
 8009004:	a814      	add	r0, sp, #80	; 0x50
 8009006:	2206      	movs	r2, #6
 8009008:	5e83      	ldrsh	r3, [r0, r2]
 800900a:	2102      	movs	r1, #2
 800900c:	5e42      	ldrsh	r2, [r0, r1]
 800900e:	429a      	cmp	r2, r3
 8009010:	d00e      	beq.n	8009030 <lv_draw_line+0x724>
        fill_area.y2--;
 8009012:	3b01      	subs	r3, #1
 8009014:	80c3      	strh	r3, [r0, #6]
        _lv_blend_fill(&fill_area, clip,
                       dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                       dsc->blend_mode);
 8009016:	7a7b      	ldrb	r3, [r7, #9]
        _lv_blend_fill(&fill_area, clip,
 8009018:	a910      	add	r1, sp, #64	; 0x40
                       dsc->blend_mode);
 800901a:	079b      	lsls	r3, r3, #30
        _lv_blend_fill(&fill_area, clip,
 800901c:	0f9b      	lsrs	r3, r3, #30
 800901e:	9302      	str	r3, [sp, #8]
 8009020:	7a3b      	ldrb	r3, [r7, #8]
 8009022:	9301      	str	r3, [sp, #4]
 8009024:	2302      	movs	r3, #2
 8009026:	9300      	str	r3, [sp, #0]
 8009028:	883a      	ldrh	r2, [r7, #0]
 800902a:	0023      	movs	r3, r4
 800902c:	f7fd fda8 	bl	8006b80 <_lv_blend_fill>

    }

    _lv_mem_buf_release(mask_buf);
 8009030:	0020      	movs	r0, r4
 8009032:	f002 ffcb 	bl	800bfcc <_lv_mem_buf_release>

    lv_draw_mask_remove_id(mask_left_id);
 8009036:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009038:	f000 fcfe 	bl	8009a38 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_right_id);
 800903c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800903e:	f000 fcfb 	bl	8009a38 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_top_id);
 8009042:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009044:	f000 fcf8 	bl	8009a38 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bottom_id);
 8009048:	980d      	ldr	r0, [sp, #52]	; 0x34
 800904a:	f000 fcf5 	bl	8009a38 <lv_draw_mask_remove_id>
 800904e:	e4fe      	b.n	8008a4e <lv_draw_line+0x142>
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
 8009050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009052:	0031      	movs	r1, r6
 8009054:	0158      	lsls	r0, r3, #5
 8009056:	e6dd      	b.n	8008e14 <lv_draw_line+0x508>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 8009058:	9b04      	ldr	r3, [sp, #16]
 800905a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800905c:	9400      	str	r4, [sp, #0]
 800905e:	9905      	ldr	r1, [sp, #20]
 8009060:	a816      	add	r0, sp, #88	; 0x58
 8009062:	f000 fd1b 	bl	8009a9c <lv_draw_mask_line_points_init>
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 8009066:	2301      	movs	r3, #1
 8009068:	9500      	str	r5, [sp, #0]
 800906a:	9301      	str	r3, [sp, #4]
 800906c:	0032      	movs	r2, r6
 800906e:	9b04      	ldr	r3, [sp, #16]
 8009070:	e737      	b.n	8008ee2 <lv_draw_line+0x5d6>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
 8009072:	2200      	movs	r2, #0
 8009074:	8a9e      	ldrh	r6, [r3, #20]
 8009076:	8a1b      	ldrh	r3, [r3, #16]
 8009078:	9201      	str	r2, [sp, #4]
 800907a:	9a06      	ldr	r2, [sp, #24]
 800907c:	930a      	str	r3, [sp, #40]	; 0x28
 800907e:	191b      	adds	r3, r3, r4
 8009080:	1934      	adds	r4, r6, r4
 8009082:	b21b      	sxth	r3, r3
 8009084:	b221      	sxth	r1, r4
 8009086:	9200      	str	r2, [sp, #0]
 8009088:	a816      	add	r0, sp, #88	; 0x58
 800908a:	9a07      	ldr	r2, [sp, #28]
 800908c:	f000 fd06 	bl	8009a9c <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 8009090:	2201      	movs	r2, #1
 8009092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009094:	9201      	str	r2, [sp, #4]
 8009096:	9a06      	ldr	r2, [sp, #24]
 8009098:	1b5b      	subs	r3, r3, r5
 800909a:	1b75      	subs	r5, r6, r5
 800909c:	9200      	str	r2, [sp, #0]
 800909e:	b21b      	sxth	r3, r3
 80090a0:	b229      	sxth	r1, r5
 80090a2:	9a07      	ldr	r2, [sp, #28]
 80090a4:	e71e      	b.n	8008ee4 <lv_draw_line+0x5d8>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
 80090a6:	2301      	movs	r3, #1
 80090a8:	425b      	negs	r3, r3
 80090aa:	930d      	str	r3, [sp, #52]	; 0x34
    int16_t mask_top_id = LV_MASK_ID_INV;
 80090ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80090ae:	e753      	b.n	8008f58 <lv_draw_line+0x64c>
        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
 80090b0:	9b05      	ldr	r3, [sp, #20]
 80090b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80090b4:	18e6      	adds	r6, r4, r3
 80090b6:	466b      	mov	r3, sp
 80090b8:	0030      	movs	r0, r6
 80090ba:	221c      	movs	r2, #28
 80090bc:	5e9a      	ldrsh	r2, [r3, r2]
 80090be:	9b06      	ldr	r3, [sp, #24]
 80090c0:	f000 fc9a 	bl	80099f8 <lv_draw_mask_apply>
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 80090c4:	2800      	cmp	r0, #0
 80090c6:	d103      	bne.n	80090d0 <lv_draw_line+0x7c4>
            _lv_memset_00(&mask_buf[mask_p], draw_area_w);
 80090c8:	9906      	ldr	r1, [sp, #24]
 80090ca:	0030      	movs	r0, r6
 80090cc:	f003 f8fe 	bl	800c2cc <_lv_memset_00>
        mask_p += draw_area_w;
 80090d0:	9a06      	ldr	r2, [sp, #24]
 80090d2:	9b05      	ldr	r3, [sp, #20]
 80090d4:	4694      	mov	ip, r2
 80090d6:	4463      	add	r3, ip
 80090d8:	9305      	str	r3, [sp, #20]
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
 80090da:	189b      	adds	r3, r3, r2
 80090dc:	ae14      	add	r6, sp, #80	; 0x50
 80090de:	429d      	cmp	r5, r3
 80090e0:	d906      	bls.n	80090f0 <lv_draw_line+0x7e4>
            fill_area.y2 ++;
 80090e2:	88f3      	ldrh	r3, [r6, #6]
 80090e4:	3301      	adds	r3, #1
 80090e6:	80f3      	strh	r3, [r6, #6]
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
 80090e8:	9b07      	ldr	r3, [sp, #28]
 80090ea:	3301      	adds	r3, #1
 80090ec:	9307      	str	r3, [sp, #28]
 80090ee:	e77f      	b.n	8008ff0 <lv_draw_line+0x6e4>
                           dsc->blend_mode);
 80090f0:	7a7b      	ldrb	r3, [r7, #9]
            _lv_blend_fill(&fill_area, clip,
 80090f2:	a910      	add	r1, sp, #64	; 0x40
                           dsc->blend_mode);
 80090f4:	079b      	lsls	r3, r3, #30
            _lv_blend_fill(&fill_area, clip,
 80090f6:	0f9b      	lsrs	r3, r3, #30
 80090f8:	9302      	str	r3, [sp, #8]
 80090fa:	7a3b      	ldrb	r3, [r7, #8]
 80090fc:	0030      	movs	r0, r6
 80090fe:	9301      	str	r3, [sp, #4]
 8009100:	2302      	movs	r3, #2
 8009102:	9300      	str	r3, [sp, #0]
 8009104:	883a      	ldrh	r2, [r7, #0]
 8009106:	0023      	movs	r3, r4
 8009108:	f7fd fd3a 	bl	8006b80 <_lv_blend_fill>
            fill_area.y1 = fill_area.y2 + 1;
 800910c:	88f3      	ldrh	r3, [r6, #6]
            _lv_memset_ff(mask_buf, mask_buf_size);
 800910e:	0029      	movs	r1, r5
            fill_area.y1 = fill_area.y2 + 1;
 8009110:	3301      	adds	r3, #1
 8009112:	b21b      	sxth	r3, r3
            _lv_memset_ff(mask_buf, mask_buf_size);
 8009114:	0020      	movs	r0, r4
            fill_area.y1 = fill_area.y2 + 1;
 8009116:	8073      	strh	r3, [r6, #2]
            fill_area.y2 = fill_area.y1;
 8009118:	80f3      	strh	r3, [r6, #6]
            _lv_memset_ff(mask_buf, mask_buf_size);
 800911a:	f003 f901 	bl	800c320 <_lv_memset_ff>
            mask_p = 0;
 800911e:	2300      	movs	r3, #0
 8009120:	9305      	str	r3, [sp, #20]
 8009122:	e7e1      	b.n	80090e8 <lv_draw_line+0x7dc>
 8009124:	0800e436 	.word	0x0800e436

08009128 <mask_mix>:
    return LV_DRAW_MASK_RES_CHANGED;
}

LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
 8009128:	29fc      	cmp	r1, #252	; 0xfc
 800912a:	d806      	bhi.n	800913a <mask_mix+0x12>
    if(mask_new <= LV_OPA_MIN) return 0;
 800912c:	2902      	cmp	r1, #2
 800912e:	d905      	bls.n	800913c <mask_mix+0x14>

    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
 8009130:	4341      	muls	r1, r0
 8009132:	4803      	ldr	r0, [pc, #12]	; (8009140 <mask_mix+0x18>)
 8009134:	4348      	muls	r0, r1
 8009136:	0dc0      	lsrs	r0, r0, #23
 8009138:	b2c0      	uxtb	r0, r0
}
 800913a:	4770      	bx	lr
    if(mask_new <= LV_OPA_MIN) return 0;
 800913c:	2000      	movs	r0, #0
 800913e:	e7fc      	b.n	800913a <mask_mix+0x12>
 8009140:	00008081 	.word	0x00008081

08009144 <lv_draw_mask_line>:
{
 8009144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009146:	b087      	sub	sp, #28
 8009148:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800914a:	9301      	str	r3, [sp, #4]
 800914c:	002b      	movs	r3, r5
 800914e:	9002      	str	r0, [sp, #8]
    abs_y -= p->origo.y;
 8009150:	8aa8      	ldrh	r0, [r5, #20]
 8009152:	3328      	adds	r3, #40	; 0x28
 8009154:	1a12      	subs	r2, r2, r0
 8009156:	7818      	ldrb	r0, [r3, #0]
    abs_x -= p->origo.x;
 8009158:	8a6f      	ldrh	r7, [r5, #18]
 800915a:	0004      	movs	r4, r0
 800915c:	9303      	str	r3, [sp, #12]
 800915e:	2301      	movs	r3, #1
 8009160:	1bcf      	subs	r7, r1, r7
    if(p->steep == 0) {
 8009162:	6a29      	ldr	r1, [r5, #32]
    abs_y -= p->origo.y;
 8009164:	b212      	sxth	r2, r2
    abs_x -= p->origo.x;
 8009166:	b23f      	sxth	r7, r7
 8009168:	401c      	ands	r4, r3
    if(p->steep == 0) {
 800916a:	2900      	cmp	r1, #0
 800916c:	d133      	bne.n	80091d6 <lv_draw_mask_line+0x92>
 800916e:	2003      	movs	r0, #3
 8009170:	7c2d      	ldrb	r5, [r5, #16]
 8009172:	4028      	ands	r0, r5
        if(p->flat) {
 8009174:	2c00      	cmp	r4, #0
 8009176:	d00f      	beq.n	8009198 <lv_draw_mask_line+0x54>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 8009178:	001d      	movs	r5, r3
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 800917a:	4298      	cmp	r0, r3
 800917c:	d905      	bls.n	800918a <lv_draw_mask_line+0x46>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800917e:	2802      	cmp	r0, #2
 8009180:	d106      	bne.n	8009190 <lv_draw_mask_line+0x4c>
 8009182:	3201      	adds	r2, #1
 8009184:	db00      	blt.n	8009188 <lv_draw_mask_line+0x44>
 8009186:	1c0b      	adds	r3, r1, #0
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 8009188:	b2dd      	uxtb	r5, r3
}
 800918a:	0028      	movs	r0, r5
 800918c:	b007      	add	sp, #28
 800918e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 8009190:	17d5      	asrs	r5, r2, #31
 8009192:	1aad      	subs	r5, r5, r2
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 8009194:	0fed      	lsrs	r5, r5, #31
 8009196:	e7f8      	b.n	800918a <lv_draw_mask_line+0x46>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 8009198:	1e82      	subs	r2, r0, #2
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800919a:	001d      	movs	r5, r3
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 800919c:	2a01      	cmp	r2, #1
 800919e:	d9f4      	bls.n	800918a <lv_draw_mask_line+0x46>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 80091a0:	2801      	cmp	r0, #1
 80091a2:	d10a      	bne.n	80091ba <lv_draw_mask_line+0x76>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 80091a4:	0005      	movs	r5, r0
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 80091a6:	2f00      	cmp	r7, #0
 80091a8:	dcef      	bgt.n	800918a <lv_draw_mask_line+0x46>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 80091aa:	9b01      	ldr	r3, [sp, #4]
 80091ac:	42df      	cmn	r7, r3
 80091ae:	d409      	bmi.n	80091c4 <lv_draw_mask_line+0x80>
                    int32_t k = - abs_x;
 80091b0:	4279      	negs	r1, r7
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 80091b2:	428b      	cmp	r3, r1
 80091b4:	dd06      	ble.n	80091c4 <lv_draw_mask_line+0x80>
                else if(k > 0) _lv_memset_00(&mask_buf[0],  k);
 80091b6:	9802      	ldr	r0, [sp, #8]
 80091b8:	e125      	b.n	8009406 <lv_draw_mask_line+0x2c2>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 80091ba:	9b01      	ldr	r3, [sp, #4]
 80091bc:	19d9      	adds	r1, r3, r7
 80091be:	d4e4      	bmi.n	800918a <lv_draw_mask_line+0x46>
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
 80091c0:	2f00      	cmp	r7, #0
 80091c2:	dd01      	ble.n	80091c8 <lv_draw_mask_line+0x84>
 80091c4:	2500      	movs	r5, #0
 80091c6:	e7e0      	b.n	800918a <lv_draw_mask_line+0x46>
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
 80091c8:	9b01      	ldr	r3, [sp, #4]
                    int32_t k = - abs_x;
 80091ca:	4278      	negs	r0, r7
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
 80091cc:	4298      	cmp	r0, r3
 80091ce:	da00      	bge.n	80091d2 <lv_draw_mask_line+0x8e>
 80091d0:	e117      	b.n	8009402 <lv_draw_mask_line+0x2be>
                    return LV_DRAW_MASK_RES_CHANGED;
 80091d2:	2502      	movs	r5, #2
 80091d4:	e7d9      	b.n	800918a <lv_draw_mask_line+0x46>
 80091d6:	2302      	movs	r3, #2
 80091d8:	4018      	ands	r0, r3
    if(p->flat) {
 80091da:	2c00      	cmp	r4, #0
 80091dc:	d100      	bne.n	80091e0 <lv_draw_mask_line+0x9c>
 80091de:	e09b      	b.n	8009318 <lv_draw_mask_line+0x1d4>
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 80091e0:	003b      	movs	r3, r7
 80091e2:	69e9      	ldr	r1, [r5, #28]
 80091e4:	434b      	muls	r3, r1
 80091e6:	129b      	asrs	r3, r3, #10
    if(p->yx_steep > 0) {
 80091e8:	2900      	cmp	r1, #0
 80091ea:	dd05      	ble.n	80091f8 <lv_draw_mask_line+0xb4>
        if(y_at_x > abs_y) {
 80091ec:	4293      	cmp	r3, r2
 80091ee:	dd05      	ble.n	80091fc <lv_draw_mask_line+0xb8>
        if(p->inv) {
 80091f0:	1e45      	subs	r5, r0, #1
 80091f2:	41a8      	sbcs	r0, r5
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 80091f4:	b2c5      	uxtb	r5, r0
 80091f6:	e7c8      	b.n	800918a <lv_draw_mask_line+0x46>
        if(y_at_x < abs_y) {
 80091f8:	4293      	cmp	r3, r2
 80091fa:	dbf9      	blt.n	80091f0 <lv_draw_mask_line+0xac>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 80091fc:	9b01      	ldr	r3, [sp, #4]
 80091fe:	19db      	adds	r3, r3, r7
 8009200:	434b      	muls	r3, r1
 8009202:	129b      	asrs	r3, r3, #10
    if(p->yx_steep > 0) {
 8009204:	2900      	cmp	r1, #0
 8009206:	dd05      	ble.n	8009214 <lv_draw_mask_line+0xd0>
        if(y_at_x < abs_y) {
 8009208:	4293      	cmp	r3, r2
 800920a:	da06      	bge.n	800921a <lv_draw_mask_line+0xd6>
        if(p->inv) {
 800920c:	4245      	negs	r5, r0
 800920e:	4145      	adcs	r5, r0
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 8009210:	b2ed      	uxtb	r5, r5
 8009212:	e7ba      	b.n	800918a <lv_draw_mask_line+0x46>
        if(y_at_x > abs_y) {
 8009214:	4293      	cmp	r3, r2
 8009216:	dcf9      	bgt.n	800920c <lv_draw_mask_line+0xc8>
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
 8009218:	3201      	adds	r2, #1
    int32_t xef = xe & 0xFF;
 800921a:	24ff      	movs	r4, #255	; 0xff
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
 800921c:	69ab      	ldr	r3, [r5, #24]
 800921e:	0212      	lsls	r2, r2, #8
 8009220:	435a      	muls	r2, r3
 8009222:	1292      	asrs	r2, r2, #10
    int32_t xei = xe >> 8;
 8009224:	1216      	asrs	r6, r2, #8
    int32_t xef = xe & 0xFF;
 8009226:	4022      	ands	r2, r4
    if(xef == 0) px_h = 255;
 8009228:	d004      	beq.n	8009234 <lv_draw_mask_line+0xf0>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 800922a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800922c:	1aa3      	subs	r3, r4, r2
 800922e:	434b      	muls	r3, r1
 8009230:	121b      	asrs	r3, r3, #8
 8009232:	1ae4      	subs	r4, r4, r3
    int32_t k = xei - abs_x;
 8009234:	1bf7      	subs	r7, r6, r7
 8009236:	003e      	movs	r6, r7
    if(xef) {
 8009238:	2a00      	cmp	r2, #0
 800923a:	d015      	beq.n	8009268 <lv_draw_mask_line+0x124>
        if(k >= 0 && k < len) {
 800923c:	2f00      	cmp	r7, #0
 800923e:	db12      	blt.n	8009266 <lv_draw_mask_line+0x122>
 8009240:	9b01      	ldr	r3, [sp, #4]
 8009242:	42bb      	cmp	r3, r7
 8009244:	dd0f      	ble.n	8009266 <lv_draw_mask_line+0x122>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 8009246:	21ff      	movs	r1, #255	; 0xff
 8009248:	1a8a      	subs	r2, r1, r2
 800924a:	1b09      	subs	r1, r1, r4
 800924c:	4351      	muls	r1, r2
 800924e:	1249      	asrs	r1, r1, #9
 8009250:	b2c9      	uxtb	r1, r1
            if(p->inv) m = 255 - m;
 8009252:	2800      	cmp	r0, #0
 8009254:	d101      	bne.n	800925a <lv_draw_mask_line+0x116>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 8009256:	43c9      	mvns	r1, r1
 8009258:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800925a:	9b02      	ldr	r3, [sp, #8]
 800925c:	19de      	adds	r6, r3, r7
 800925e:	7830      	ldrb	r0, [r6, #0]
 8009260:	f7ff ff62 	bl	8009128 <mask_mix>
 8009264:	7030      	strb	r0, [r6, #0]
        k++;
 8009266:	1c7e      	adds	r6, r7, #1
 8009268:	002b      	movs	r3, r5
 800926a:	3328      	adds	r3, #40	; 0x28
 800926c:	9303      	str	r3, [sp, #12]
 800926e:	2202      	movs	r2, #2
 8009270:	9b03      	ldr	r3, [sp, #12]
    while(px_h > p->spx) {
 8009272:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	4013      	ands	r3, r2
 8009278:	428c      	cmp	r4, r1
 800927a:	dc1a      	bgt.n	80092b2 <lv_draw_mask_line+0x16e>
    if(k < len && k >= 0) {
 800927c:	9a01      	ldr	r2, [sp, #4]
 800927e:	42b2      	cmp	r2, r6
 8009280:	dd2f      	ble.n	80092e2 <lv_draw_mask_line+0x19e>
 8009282:	2e00      	cmp	r6, #0
 8009284:	db2d      	blt.n	80092e2 <lv_draw_mask_line+0x19e>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 8009286:	69a9      	ldr	r1, [r5, #24]
        if(p->yx_steep < 0) m = 255 - m;
 8009288:	69ea      	ldr	r2, [r5, #28]
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 800928a:	4361      	muls	r1, r4
 800928c:	1289      	asrs	r1, r1, #10
        m = (x_inters * px_h) >> 9;
 800928e:	434c      	muls	r4, r1
 8009290:	1264      	asrs	r4, r4, #9
 8009292:	b2e1      	uxtb	r1, r4
        if(p->yx_steep < 0) m = 255 - m;
 8009294:	2a00      	cmp	r2, #0
 8009296:	da01      	bge.n	800929c <lv_draw_mask_line+0x158>
 8009298:	43c9      	mvns	r1, r1
 800929a:	b2c9      	uxtb	r1, r1
        if(p->inv) m = 255 - m;
 800929c:	2b00      	cmp	r3, #0
 800929e:	d001      	beq.n	80092a4 <lv_draw_mask_line+0x160>
 80092a0:	43c9      	mvns	r1, r1
 80092a2:	b2c9      	uxtb	r1, r1
        mask_buf[k] = mask_mix(mask_buf[k], m);
 80092a4:	9b02      	ldr	r3, [sp, #8]
 80092a6:	199d      	adds	r5, r3, r6
 80092a8:	7828      	ldrb	r0, [r5, #0]
 80092aa:	f7ff ff3d 	bl	8009128 <mask_mix>
 80092ae:	7028      	strb	r0, [r5, #0]
 80092b0:	e017      	b.n	80092e2 <lv_draw_mask_line+0x19e>
        if(k >= 0 && k < len) {
 80092b2:	2e00      	cmp	r6, #0
 80092b4:	db0f      	blt.n	80092d6 <lv_draw_mask_line+0x192>
 80092b6:	9a01      	ldr	r2, [sp, #4]
 80092b8:	42b2      	cmp	r2, r6
 80092ba:	dd0c      	ble.n	80092d6 <lv_draw_mask_line+0x192>
            m = px_h - (p->spx >> 1);
 80092bc:	1049      	asrs	r1, r1, #1
 80092be:	1a61      	subs	r1, r4, r1
 80092c0:	b2c9      	uxtb	r1, r1
            if(p->inv) m = 255 - m;
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d001      	beq.n	80092ca <lv_draw_mask_line+0x186>
 80092c6:	43c9      	mvns	r1, r1
 80092c8:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 80092ca:	9b02      	ldr	r3, [sp, #8]
 80092cc:	5d98      	ldrb	r0, [r3, r6]
 80092ce:	f7ff ff2b 	bl	8009128 <mask_mix>
 80092d2:	9b02      	ldr	r3, [sp, #8]
 80092d4:	5598      	strb	r0, [r3, r6]
        px_h -= p->spx;
 80092d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
        k++;
 80092d8:	3601      	adds	r6, #1
        px_h -= p->spx;
 80092da:	1ae4      	subs	r4, r4, r3
        if(k >= len) break;
 80092dc:	9b01      	ldr	r3, [sp, #4]
 80092de:	42b3      	cmp	r3, r6
 80092e0:	dcc5      	bgt.n	800926e <lv_draw_mask_line+0x12a>
    if(p->inv) {
 80092e2:	2502      	movs	r5, #2
 80092e4:	9b03      	ldr	r3, [sp, #12]
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	422b      	tst	r3, r5
 80092ea:	d008      	beq.n	80092fe <lv_draw_mask_line+0x1ba>
        if(k > len) {
 80092ec:	9b01      	ldr	r3, [sp, #4]
 80092ee:	42bb      	cmp	r3, r7
 80092f0:	da00      	bge.n	80092f4 <lv_draw_mask_line+0x1b0>
 80092f2:	e767      	b.n	80091c4 <lv_draw_mask_line+0x80>
            _lv_memset_00(&mask_buf[0], k);
 80092f4:	1e39      	subs	r1, r7, #0
        if(k >= 0) {
 80092f6:	da00      	bge.n	80092fa <lv_draw_mask_line+0x1b6>
 80092f8:	e76b      	b.n	80091d2 <lv_draw_mask_line+0x8e>
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
 80092fa:	9802      	ldr	r0, [sp, #8]
 80092fc:	e009      	b.n	8009312 <lv_draw_mask_line+0x1ce>
        if(k < 0) {
 80092fe:	1c70      	adds	r0, r6, #1
 8009300:	d500      	bpl.n	8009304 <lv_draw_mask_line+0x1c0>
 8009302:	e75f      	b.n	80091c4 <lv_draw_mask_line+0x80>
        if(k <= len) {
 8009304:	9b01      	ldr	r3, [sp, #4]
 8009306:	4283      	cmp	r3, r0
 8009308:	da00      	bge.n	800930c <lv_draw_mask_line+0x1c8>
 800930a:	e762      	b.n	80091d2 <lv_draw_mask_line+0x8e>
            _lv_memset_00(&mask_buf[k], len - k);
 800930c:	1a19      	subs	r1, r3, r0
 800930e:	9b02      	ldr	r3, [sp, #8]
 8009310:	1818      	adds	r0, r3, r0
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
 8009312:	f002 ffdb 	bl	800c2cc <_lv_memset_00>
 8009316:	e738      	b.n	800918a <lv_draw_mask_line+0x46>
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 8009318:	0014      	movs	r4, r2
 800931a:	69ab      	ldr	r3, [r5, #24]
 800931c:	435c      	muls	r4, r3
    if(p->xy_steep > 0) x_at_y++;
 800931e:	17d9      	asrs	r1, r3, #31
 8009320:	1ac9      	subs	r1, r1, r3
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 8009322:	12a4      	asrs	r4, r4, #10
    if(p->xy_steep > 0) x_at_y++;
 8009324:	0fc9      	lsrs	r1, r1, #31
 8009326:	1861      	adds	r1, r4, r1
    if(x_at_y < abs_x) {
 8009328:	42b9      	cmp	r1, r7
 800932a:	da00      	bge.n	800932e <lv_draw_mask_line+0x1ea>
 800932c:	e760      	b.n	80091f0 <lv_draw_mask_line+0xac>
    if(x_at_y > abs_x + len) {
 800932e:	9901      	ldr	r1, [sp, #4]
 8009330:	19c9      	adds	r1, r1, r7
 8009332:	428c      	cmp	r4, r1
 8009334:	dd00      	ble.n	8009338 <lv_draw_mask_line+0x1f4>
 8009336:	e769      	b.n	800920c <lv_draw_mask_line+0xc8>
    int32_t xsf = xs & 0xFF;
 8009338:	24ff      	movs	r4, #255	; 0xff
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
 800933a:	0211      	lsls	r1, r2, #8
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
 800933c:	3201      	adds	r2, #1
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
 800933e:	4359      	muls	r1, r3
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
 8009340:	0212      	lsls	r2, r2, #8
 8009342:	435a      	muls	r2, r3
    int32_t xsi = xs >> 8;
 8009344:	148e      	asrs	r6, r1, #18
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
 8009346:	1289      	asrs	r1, r1, #10
    int32_t xsf = xs & 0xFF;
 8009348:	46a4      	mov	ip, r4
 800934a:	4021      	ands	r1, r4
    int32_t xei = xe >> 8;
 800934c:	1494      	asrs	r4, r2, #18
 800934e:	9405      	str	r4, [sp, #20]
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
 8009350:	9204      	str	r2, [sp, #16]
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 8009352:	9a05      	ldr	r2, [sp, #20]
    k = xsi - abs_x;
 8009354:	1bf4      	subs	r4, r6, r7
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 8009356:	4296      	cmp	r6, r2
 8009358:	d100      	bne.n	800935c <lv_draw_mask_line+0x218>
 800935a:	e0a8      	b.n	80094ae <lv_draw_mask_line+0x36a>
 800935c:	2b00      	cmp	r3, #0
 800935e:	da62      	bge.n	8009426 <lv_draw_mask_line+0x2e2>
 8009360:	1e66      	subs	r6, r4, #1
 8009362:	2900      	cmp	r1, #0
 8009364:	d100      	bne.n	8009368 <lv_draw_mask_line+0x224>
 8009366:	e0c6      	b.n	80094f6 <lv_draw_mask_line+0x3b2>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 8009368:	69eb      	ldr	r3, [r5, #28]
 800936a:	425b      	negs	r3, r3
 800936c:	434b      	muls	r3, r1
 800936e:	129b      	asrs	r3, r3, #10
 8009370:	9304      	str	r3, [sp, #16]
            if(k >= 0 && k < len) {
 8009372:	2c00      	cmp	r4, #0
 8009374:	db10      	blt.n	8009398 <lv_draw_mask_line+0x254>
 8009376:	9b01      	ldr	r3, [sp, #4]
 8009378:	42a3      	cmp	r3, r4
 800937a:	dd0d      	ble.n	8009398 <lv_draw_mask_line+0x254>
                m = (y_inters * xsf) >> 9;
 800937c:	9b04      	ldr	r3, [sp, #16]
 800937e:	4359      	muls	r1, r3
 8009380:	1249      	asrs	r1, r1, #9
 8009382:	b2c9      	uxtb	r1, r1
                if(p->inv) m = 255 - m;
 8009384:	2800      	cmp	r0, #0
 8009386:	d001      	beq.n	800938c <lv_draw_mask_line+0x248>
 8009388:	43c9      	mvns	r1, r1
 800938a:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800938c:	9b02      	ldr	r3, [sp, #8]
 800938e:	191f      	adds	r7, r3, r4
 8009390:	7838      	ldrb	r0, [r7, #0]
 8009392:	f7ff fec9 	bl	8009128 <mask_mix>
 8009396:	7038      	strb	r0, [r7, #0]
            if(k >= 0 && k < len) {
 8009398:	2e00      	cmp	r6, #0
 800939a:	db18      	blt.n	80093ce <lv_draw_mask_line+0x28a>
 800939c:	9b01      	ldr	r3, [sp, #4]
 800939e:	42b3      	cmp	r3, r6
 80093a0:	dd15      	ble.n	80093ce <lv_draw_mask_line+0x28a>
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 80093a2:	21ff      	movs	r1, #255	; 0xff
 80093a4:	9b04      	ldr	r3, [sp, #16]
 80093a6:	1ac9      	subs	r1, r1, r3
 80093a8:	69ab      	ldr	r3, [r5, #24]
 80093aa:	425b      	negs	r3, r3
 80093ac:	434b      	muls	r3, r1
 80093ae:	129b      	asrs	r3, r3, #10
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 80093b0:	4359      	muls	r1, r3
                if(p->inv) m = 255 - m;
 80093b2:	9b03      	ldr	r3, [sp, #12]
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 80093b4:	1249      	asrs	r1, r1, #9
                if(p->inv) m = 255 - m;
 80093b6:	781b      	ldrb	r3, [r3, #0]
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 80093b8:	b2c9      	uxtb	r1, r1
                if(p->inv) m = 255 - m;
 80093ba:	079b      	lsls	r3, r3, #30
 80093bc:	d401      	bmi.n	80093c2 <lv_draw_mask_line+0x27e>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 80093be:	43c9      	mvns	r1, r1
 80093c0:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 80093c2:	9b02      	ldr	r3, [sp, #8]
 80093c4:	199d      	adds	r5, r3, r6
 80093c6:	7828      	ldrb	r0, [r5, #0]
 80093c8:	f7ff feae 	bl	8009128 <mask_mix>
 80093cc:	7028      	strb	r0, [r5, #0]
            if(p->inv) {
 80093ce:	2702      	movs	r7, #2
 80093d0:	9b03      	ldr	r3, [sp, #12]
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	423b      	tst	r3, r7
 80093d6:	d019      	beq.n	800940c <lv_draw_mask_line+0x2c8>
                if(k > len) k = len;
 80093d8:	9b01      	ldr	r3, [sp, #4]
 80093da:	42b3      	cmp	r3, r6
 80093dc:	da00      	bge.n	80093e0 <lv_draw_mask_line+0x29c>
 80093de:	e6f8      	b.n	80091d2 <lv_draw_mask_line+0x8e>
                else if(k > 0) _lv_memset_00(&mask_buf[0],  k);
 80093e0:	2e00      	cmp	r6, #0
 80093e2:	dc00      	bgt.n	80093e6 <lv_draw_mask_line+0x2a2>
 80093e4:	e6f5      	b.n	80091d2 <lv_draw_mask_line+0x8e>
 80093e6:	0031      	movs	r1, r6
 80093e8:	e6e5      	b.n	80091b6 <lv_draw_mask_line+0x72>
 80093ea:	9801      	ldr	r0, [sp, #4]
        k++;
 80093ec:	3601      	adds	r6, #1
 80093ee:	42b0      	cmp	r0, r6
 80093f0:	dd00      	ble.n	80093f4 <lv_draw_mask_line+0x2b0>
 80093f2:	0030      	movs	r0, r6
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 80093f4:	2800      	cmp	r0, #0
 80093f6:	d100      	bne.n	80093fa <lv_draw_mask_line+0x2b6>
 80093f8:	e6e4      	b.n	80091c4 <lv_draw_mask_line+0x80>
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
 80093fa:	dc00      	bgt.n	80093fe <lv_draw_mask_line+0x2ba>
 80093fc:	e6e9      	b.n	80091d2 <lv_draw_mask_line+0x8e>
 80093fe:	9b01      	ldr	r3, [sp, #4]
 8009400:	1a19      	subs	r1, r3, r0
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
 8009402:	9b02      	ldr	r3, [sp, #8]
 8009404:	1818      	adds	r0, r3, r0
 8009406:	f002 ff61 	bl	800c2cc <_lv_memset_00>
 800940a:	e6e2      	b.n	80091d2 <lv_draw_mask_line+0x8e>
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 800940c:	9b01      	ldr	r3, [sp, #4]
            k += 2;
 800940e:	3401      	adds	r4, #1
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 8009410:	2501      	movs	r5, #1
 8009412:	42a3      	cmp	r3, r4
 8009414:	da00      	bge.n	8009418 <lv_draw_mask_line+0x2d4>
 8009416:	e6b8      	b.n	800918a <lv_draw_mask_line+0x46>
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
 8009418:	2c00      	cmp	r4, #0
 800941a:	da00      	bge.n	800941e <lv_draw_mask_line+0x2da>
 800941c:	e6d9      	b.n	80091d2 <lv_draw_mask_line+0x8e>
 800941e:	1b19      	subs	r1, r3, r4
 8009420:	9b02      	ldr	r3, [sp, #8]
 8009422:	1918      	adds	r0, r3, r4
 8009424:	e7ef      	b.n	8009406 <lv_draw_mask_line+0x2c2>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 8009426:	4663      	mov	r3, ip
 8009428:	69ee      	ldr	r6, [r5, #28]
 800942a:	1a59      	subs	r1, r3, r1
 800942c:	434e      	muls	r6, r1
 800942e:	12b6      	asrs	r6, r6, #10
            if(k >= 0 && k < len) {
 8009430:	2c00      	cmp	r4, #0
 8009432:	db0f      	blt.n	8009454 <lv_draw_mask_line+0x310>
 8009434:	9b01      	ldr	r3, [sp, #4]
 8009436:	42a3      	cmp	r3, r4
 8009438:	dd0c      	ble.n	8009454 <lv_draw_mask_line+0x310>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 800943a:	4371      	muls	r1, r6
 800943c:	1249      	asrs	r1, r1, #9
 800943e:	b2c9      	uxtb	r1, r1
                if(p->inv) m = 255 - m;
 8009440:	2800      	cmp	r0, #0
 8009442:	d101      	bne.n	8009448 <lv_draw_mask_line+0x304>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 8009444:	43c9      	mvns	r1, r1
 8009446:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8009448:	9b02      	ldr	r3, [sp, #8]
 800944a:	191f      	adds	r7, r3, r4
 800944c:	7838      	ldrb	r0, [r7, #0]
 800944e:	f7ff fe6b 	bl	8009128 <mask_mix>
 8009452:	7038      	strb	r0, [r7, #0]
            if(k >= 0 && k < len) {
 8009454:	1c63      	adds	r3, r4, #1
 8009456:	d416      	bmi.n	8009486 <lv_draw_mask_line+0x342>
 8009458:	9a01      	ldr	r2, [sp, #4]
 800945a:	429a      	cmp	r2, r3
 800945c:	dd13      	ble.n	8009486 <lv_draw_mask_line+0x342>
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 800945e:	21ff      	movs	r1, #255	; 0xff
 8009460:	1b8e      	subs	r6, r1, r6
 8009462:	69a9      	ldr	r1, [r5, #24]
                if(p->inv) m = 255 - m;
 8009464:	9a03      	ldr	r2, [sp, #12]
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 8009466:	4371      	muls	r1, r6
 8009468:	1289      	asrs	r1, r1, #10
                m = ((255 - y_inters) * x_inters) >> 9;
 800946a:	434e      	muls	r6, r1
                if(p->inv) m = 255 - m;
 800946c:	7812      	ldrb	r2, [r2, #0]
                m = ((255 - y_inters) * x_inters) >> 9;
 800946e:	1276      	asrs	r6, r6, #9
 8009470:	b2f1      	uxtb	r1, r6
                if(p->inv) m = 255 - m;
 8009472:	0792      	lsls	r2, r2, #30
 8009474:	d501      	bpl.n	800947a <lv_draw_mask_line+0x336>
 8009476:	43c9      	mvns	r1, r1
 8009478:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800947a:	9a02      	ldr	r2, [sp, #8]
 800947c:	18d5      	adds	r5, r2, r3
 800947e:	7828      	ldrb	r0, [r5, #0]
 8009480:	f7ff fe52 	bl	8009128 <mask_mix>
 8009484:	7028      	strb	r0, [r5, #0]
            if(p->inv) {
 8009486:	2502      	movs	r5, #2
 8009488:	9b03      	ldr	r3, [sp, #12]
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	422b      	tst	r3, r5
 800948e:	d008      	beq.n	80094a2 <lv_draw_mask_line+0x35e>
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
 8009490:	9b01      	ldr	r3, [sp, #4]
 8009492:	42a3      	cmp	r3, r4
 8009494:	da00      	bge.n	8009498 <lv_draw_mask_line+0x354>
 8009496:	e695      	b.n	80091c4 <lv_draw_mask_line+0x80>
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
 8009498:	2c00      	cmp	r4, #0
 800949a:	da00      	bge.n	800949e <lv_draw_mask_line+0x35a>
 800949c:	e699      	b.n	80091d2 <lv_draw_mask_line+0x8e>
 800949e:	0021      	movs	r1, r4
 80094a0:	e72b      	b.n	80092fa <lv_draw_mask_line+0x1b6>
 80094a2:	9801      	ldr	r0, [sp, #4]
            k++;
 80094a4:	3402      	adds	r4, #2
 80094a6:	42a0      	cmp	r0, r4
 80094a8:	dda4      	ble.n	80093f4 <lv_draw_mask_line+0x2b0>
 80094aa:	0020      	movs	r0, r4
 80094ac:	e7a2      	b.n	80093f4 <lv_draw_mask_line+0x2b0>
    k = xsi - abs_x;
 80094ae:	0026      	movs	r6, r4
        if(k >= 0 && k < len) {
 80094b0:	2e00      	cmp	r6, #0
 80094b2:	db11      	blt.n	80094d8 <lv_draw_mask_line+0x394>
 80094b4:	9b01      	ldr	r3, [sp, #4]
 80094b6:	42b3      	cmp	r3, r6
 80094b8:	dd0e      	ble.n	80094d8 <lv_draw_mask_line+0x394>
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
 80094ba:	9b04      	ldr	r3, [sp, #16]
 80094bc:	129a      	asrs	r2, r3, #10
    int32_t xef = xe & 0xFF;
 80094be:	b2d2      	uxtb	r2, r2
            m = (xsf + xef) >> 1;
 80094c0:	1851      	adds	r1, r2, r1
 80094c2:	0849      	lsrs	r1, r1, #1
            if(p->inv) m = 255 - m;
 80094c4:	2800      	cmp	r0, #0
 80094c6:	d001      	beq.n	80094cc <lv_draw_mask_line+0x388>
 80094c8:	43c9      	mvns	r1, r1
 80094ca:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 80094cc:	9b02      	ldr	r3, [sp, #8]
 80094ce:	199c      	adds	r4, r3, r6
 80094d0:	7820      	ldrb	r0, [r4, #0]
 80094d2:	f7ff fe29 	bl	8009128 <mask_mix>
 80094d6:	7020      	strb	r0, [r4, #0]
        if(p->inv) {
 80094d8:	3528      	adds	r5, #40	; 0x28
 80094da:	782b      	ldrb	r3, [r5, #0]
 80094dc:	2502      	movs	r5, #2
 80094de:	422b      	tst	r3, r5
 80094e0:	d083      	beq.n	80093ea <lv_draw_mask_line+0x2a6>
            k = xsi - abs_x;
 80094e2:	9b05      	ldr	r3, [sp, #20]
 80094e4:	1bd9      	subs	r1, r3, r7
            if(k >= len) {
 80094e6:	9b01      	ldr	r3, [sp, #4]
 80094e8:	428b      	cmp	r3, r1
 80094ea:	dc00      	bgt.n	80094ee <lv_draw_mask_line+0x3aa>
 80094ec:	e66a      	b.n	80091c4 <lv_draw_mask_line+0x80>
            if(k >= 0) _lv_memset_00(&mask_buf[0], k);
 80094ee:	2900      	cmp	r1, #0
 80094f0:	da00      	bge.n	80094f4 <lv_draw_mask_line+0x3b0>
 80094f2:	e66e      	b.n	80091d2 <lv_draw_mask_line+0x8e>
 80094f4:	e701      	b.n	80092fa <lv_draw_mask_line+0x1b6>
        xsf = 0xFF;
 80094f6:	4661      	mov	r1, ip
 80094f8:	e7da      	b.n	80094b0 <lv_draw_mask_line+0x36c>

080094fa <_lv_memcpy_small.constprop.4>:
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
 80094fa:	2300      	movs	r3, #0
        *d8 = *s8;
 80094fc:	5cca      	ldrb	r2, [r1, r3]
 80094fe:	54c2      	strb	r2, [r0, r3]
 8009500:	3301      	adds	r3, #1
    while(len) {
 8009502:	2b08      	cmp	r3, #8
 8009504:	d1fa      	bne.n	80094fc <_lv_memcpy_small.constprop.4+0x2>
        s8++;
        len--;
    }

    return dst;
}
 8009506:	4770      	bx	lr

08009508 <lv_draw_mask_radius>:
{
 8009508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800950a:	b08f      	sub	sp, #60	; 0x3c
 800950c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800950e:	000c      	movs	r4, r1
    lv_area_copy(&rect, &p->cfg.rect);
 8009510:	0031      	movs	r1, r6
{
 8009512:	9300      	str	r3, [sp, #0]
    bool outer = p->cfg.outer;
 8009514:	7cb3      	ldrb	r3, [r6, #18]
{
 8009516:	9001      	str	r0, [sp, #4]
    bool outer = p->cfg.outer;
 8009518:	07db      	lsls	r3, r3, #31
 800951a:	0fdb      	lsrs	r3, r3, #31
 800951c:	9303      	str	r3, [sp, #12]
{
 800951e:	0015      	movs	r5, r2
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
 8009520:	af0c      	add	r7, sp, #48	; 0x30
    int32_t radius = p->cfg.radius;
 8009522:	2210      	movs	r2, #16
 8009524:	5eb3      	ldrsh	r3, [r6, r2]
    lv_area_copy(&rect, &p->cfg.rect);
 8009526:	3108      	adds	r1, #8
 8009528:	0038      	movs	r0, r7
    int32_t radius = p->cfg.radius;
 800952a:	9302      	str	r3, [sp, #8]
 800952c:	f7ff ffe5 	bl	80094fa <_lv_memcpy_small.constprop.4>
 8009530:	2202      	movs	r2, #2
 8009532:	5ebb      	ldrsh	r3, [r7, r2]
    if(outer == false) {
 8009534:	9a03      	ldr	r2, [sp, #12]
 8009536:	2a00      	cmp	r2, #0
 8009538:	d13b      	bne.n	80095b2 <lv_draw_mask_radius+0xaa>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 800953a:	42ab      	cmp	r3, r5
 800953c:	dd01      	ble.n	8009542 <lv_draw_mask_radius+0x3a>
                    return LV_DRAW_MASK_RES_TRANSP;
 800953e:	2000      	movs	r0, #0
 8009540:	e03a      	b.n	80095b8 <lv_draw_mask_radius+0xb0>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 8009542:	2206      	movs	r2, #6
 8009544:	5ebb      	ldrsh	r3, [r7, r2]
 8009546:	42ab      	cmp	r3, r5
 8009548:	dbf9      	blt.n	800953e <lv_draw_mask_radius+0x36>
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 800954a:	2300      	movs	r3, #0
 800954c:	5efa      	ldrsh	r2, [r7, r3]
 800954e:	9b02      	ldr	r3, [sp, #8]
 8009550:	18d3      	adds	r3, r2, r3
 8009552:	429c      	cmp	r4, r3
 8009554:	db07      	blt.n	8009566 <lv_draw_mask_radius+0x5e>
 8009556:	9b00      	ldr	r3, [sp, #0]
 8009558:	1919      	adds	r1, r3, r4
 800955a:	2004      	movs	r0, #4
 800955c:	5e3b      	ldrsh	r3, [r7, r0]
 800955e:	9802      	ldr	r0, [sp, #8]
 8009560:	1a1b      	subs	r3, r3, r0
 8009562:	4299      	cmp	r1, r3
 8009564:	dd0c      	ble.n	8009580 <lv_draw_mask_radius+0x78>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 8009566:	a90c      	add	r1, sp, #48	; 0x30
 8009568:	2002      	movs	r0, #2
 800956a:	5e0b      	ldrsh	r3, [r1, r0]
 800956c:	2706      	movs	r7, #6
 800956e:	5fc8      	ldrsh	r0, [r1, r7]
 8009570:	9f02      	ldr	r7, [sp, #8]
 8009572:	19df      	adds	r7, r3, r7
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 8009574:	42bd      	cmp	r5, r7
 8009576:	db45      	blt.n	8009604 <lv_draw_mask_radius+0xfc>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 8009578:	9f02      	ldr	r7, [sp, #8]
 800957a:	1bc7      	subs	r7, r0, r7
 800957c:	42bd      	cmp	r5, r7
 800957e:	dc41      	bgt.n	8009604 <lv_draw_mask_radius+0xfc>
        if(outer == false) {
 8009580:	9b03      	ldr	r3, [sp, #12]
 8009582:	1b16      	subs	r6, r2, r4
 8009584:	2b00      	cmp	r3, #0
 8009586:	d125      	bne.n	80095d4 <lv_draw_mask_radius+0xcc>
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
 8009588:	9b00      	ldr	r3, [sp, #0]
 800958a:	42b3      	cmp	r3, r6
 800958c:	dbd7      	blt.n	800953e <lv_draw_mask_radius+0x36>
            if(last >= 0) {
 800958e:	2e00      	cmp	r6, #0
 8009590:	db03      	blt.n	800959a <lv_draw_mask_radius+0x92>
                _lv_memset_00(&mask_buf[0], last);
 8009592:	0031      	movs	r1, r6
 8009594:	9801      	ldr	r0, [sp, #4]
 8009596:	f002 fe99 	bl	800c2cc <_lv_memset_00>
            int32_t first = rect.x2 - abs_x + 1;
 800959a:	ab0c      	add	r3, sp, #48	; 0x30
 800959c:	2004      	movs	r0, #4
 800959e:	5e18      	ldrsh	r0, [r3, r0]
 80095a0:	1b00      	subs	r0, r0, r4
 80095a2:	3001      	adds	r0, #1
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
 80095a4:	2800      	cmp	r0, #0
 80095a6:	ddca      	ble.n	800953e <lv_draw_mask_radius+0x36>
            else if(first < len) {
 80095a8:	9b00      	ldr	r3, [sp, #0]
 80095aa:	4298      	cmp	r0, r3
 80095ac:	da0b      	bge.n	80095c6 <lv_draw_mask_radius+0xbe>
                    _lv_memset_00(&mask_buf[kr], len - kr);
 80095ae:	1a19      	subs	r1, r3, r0
 80095b0:	e023      	b.n	80095fa <lv_draw_mask_radius+0xf2>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 80095b2:	42ab      	cmp	r3, r5
 80095b4:	dd02      	ble.n	80095bc <lv_draw_mask_radius+0xb4>
            return LV_DRAW_MASK_RES_FULL_COVER;
 80095b6:	2001      	movs	r0, #1
}
 80095b8:	b00f      	add	sp, #60	; 0x3c
 80095ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 80095bc:	2206      	movs	r2, #6
 80095be:	5ebb      	ldrsh	r3, [r7, r2]
 80095c0:	42ab      	cmp	r3, r5
 80095c2:	dac2      	bge.n	800954a <lv_draw_mask_radius+0x42>
 80095c4:	e7f7      	b.n	80095b6 <lv_draw_mask_radius+0xae>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
 80095c6:	2e00      	cmp	r6, #0
 80095c8:	d102      	bne.n	80095d0 <lv_draw_mask_radius+0xc8>
 80095ca:	9b00      	ldr	r3, [sp, #0]
 80095cc:	4298      	cmp	r0, r3
 80095ce:	d0f2      	beq.n	80095b6 <lv_draw_mask_radius+0xae>
    return LV_DRAW_MASK_RES_CHANGED;
 80095d0:	2002      	movs	r0, #2
 80095d2:	e7f1      	b.n	80095b8 <lv_draw_mask_radius+0xb0>
 80095d4:	43f0      	mvns	r0, r6
            if(first <= len) {
 80095d6:	9b00      	ldr	r3, [sp, #0]
 80095d8:	17c0      	asrs	r0, r0, #31
 80095da:	4030      	ands	r0, r6
 80095dc:	4298      	cmp	r0, r3
 80095de:	dcf7      	bgt.n	80095d0 <lv_draw_mask_radius+0xc8>
                int32_t last =  rect.x2 - abs_x - first + 1;
 80095e0:	ab0c      	add	r3, sp, #48	; 0x30
 80095e2:	2104      	movs	r1, #4
 80095e4:	5e59      	ldrsh	r1, [r3, r1]
                if(first + last > len) last = len - first;
 80095e6:	9a00      	ldr	r2, [sp, #0]
                int32_t last =  rect.x2 - abs_x - first + 1;
 80095e8:	1b09      	subs	r1, r1, r4
 80095ea:	1a09      	subs	r1, r1, r0
 80095ec:	3101      	adds	r1, #1
                if(first + last > len) last = len - first;
 80095ee:	180b      	adds	r3, r1, r0
 80095f0:	4293      	cmp	r3, r2
 80095f2:	dd00      	ble.n	80095f6 <lv_draw_mask_radius+0xee>
 80095f4:	1a11      	subs	r1, r2, r0
                if(last >= 0) {
 80095f6:	2900      	cmp	r1, #0
 80095f8:	dbea      	blt.n	80095d0 <lv_draw_mask_radius+0xc8>
                    _lv_memset_00(&mask_buf[kr], len - kr);
 80095fa:	9b01      	ldr	r3, [sp, #4]
 80095fc:	1818      	adds	r0, r3, r0
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
 80095fe:	f002 fe65 	bl	800c2cc <_lv_memset_00>
 8009602:	e7e5      	b.n	80095d0 <lv_draw_mask_radius+0xc8>
    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
 8009604:	1b14      	subs	r4, r2, r4
 8009606:	9405      	str	r4, [sp, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009608:	888c      	ldrh	r4, [r1, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800960a:	b29b      	uxth	r3, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800960c:	3401      	adds	r4, #1
 800960e:	1aa4      	subs	r4, r4, r2
    int32_t w = lv_area_get_width(&rect);
 8009610:	b222      	sxth	r2, r4
 8009612:	9206      	str	r2, [sp, #24]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009614:	3001      	adds	r0, #1
 8009616:	1ac0      	subs	r0, r0, r3
    abs_y -= rect.y1;
 8009618:	1aed      	subs	r5, r5, r3
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
 800961a:	2210      	movs	r2, #16
 800961c:	5eb3      	ldrsh	r3, [r6, r2]
    abs_y -= rect.y1;
 800961e:	b22d      	sxth	r5, r5
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
 8009620:	435b      	muls	r3, r3
 8009622:	9304      	str	r3, [sp, #16]
    if(abs_y < radius || abs_y > h - radius - 1) {
 8009624:	9b02      	ldr	r3, [sp, #8]
    int32_t h = lv_area_get_height(&rect);
 8009626:	b200      	sxth	r0, r0
    if(abs_y < radius || abs_y > h - radius - 1) {
 8009628:	42ab      	cmp	r3, r5
 800962a:	dd00      	ble.n	800962e <lv_draw_mask_radius+0x126>
 800962c:	e1c5      	b.n	80099ba <lv_draw_mask_radius+0x4b2>
 800962e:	1ac3      	subs	r3, r0, r3
 8009630:	429d      	cmp	r5, r3
 8009632:	dbcd      	blt.n	80095d0 <lv_draw_mask_radius+0xc8>
        if(radius <= 256) sqrt_mask = 0x800;
 8009634:	2380      	movs	r3, #128	; 0x80
 8009636:	2780      	movs	r7, #128	; 0x80
 8009638:	9a02      	ldr	r2, [sp, #8]
 800963a:	005b      	lsls	r3, r3, #1
 800963c:	013f      	lsls	r7, r7, #4
 800963e:	429a      	cmp	r2, r3
 8009640:	dd01      	ble.n	8009646 <lv_draw_mask_radius+0x13e>
        else sqrt_mask = 0x8000;
 8009642:	2780      	movs	r7, #128	; 0x80
 8009644:	023f      	lsls	r7, r7, #8
            y = radius - (h - abs_y) + 1;
 8009646:	9b02      	ldr	r3, [sp, #8]
 8009648:	1b40      	subs	r0, r0, r5
 800964a:	1a18      	subs	r0, r3, r0
            if((y - 1) == p->y_prev) {
 800964c:	6973      	ldr	r3, [r6, #20]
            y = radius - (h - abs_y) + 1;
 800964e:	1c45      	adds	r5, r0, #1
 8009650:	a909      	add	r1, sp, #36	; 0x24
            if((y - 1) == p->y_prev) {
 8009652:	4298      	cmp	r0, r3
 8009654:	d000      	beq.n	8009658 <lv_draw_mask_radius+0x150>
 8009656:	e086      	b.n	8009766 <lv_draw_mask_radius+0x25e>
                x1.f = p->y_prev_x.f;
 8009658:	8b73      	ldrh	r3, [r6, #26]
 800965a:	804b      	strh	r3, [r1, #2]
                x1.i = p->y_prev_x.i;
 800965c:	8b33      	ldrh	r3, [r6, #24]
 800965e:	800b      	strh	r3, [r1, #0]
            _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
 8009660:	0028      	movs	r0, r5
 8009662:	4368      	muls	r0, r5
 8009664:	9b04      	ldr	r3, [sp, #16]
 8009666:	003a      	movs	r2, r7
 8009668:	1a18      	subs	r0, r3, r0
 800966a:	a908      	add	r1, sp, #32
 800966c:	f002 fbd0 	bl	800be10 <_lv_sqrt>
            p->y_prev = y;
 8009670:	6175      	str	r5, [r6, #20]
            p->y_prev_x.f = x0.f;
 8009672:	ab08      	add	r3, sp, #32
 8009674:	885b      	ldrh	r3, [r3, #2]
 8009676:	8373      	strh	r3, [r6, #26]
            p->y_prev_x.i = x0.i;
 8009678:	ab08      	add	r3, sp, #32
 800967a:	881b      	ldrh	r3, [r3, #0]
 800967c:	e019      	b.n	80096b2 <lv_draw_mask_radius+0x1aa>
        else sqrt_mask = 0x8000;
 800967e:	023f      	lsls	r7, r7, #8
            y = radius - abs_y;
 8009680:	9b02      	ldr	r3, [sp, #8]
 8009682:	1b5d      	subs	r5, r3, r5
            if(y == p->y_prev) {
 8009684:	6973      	ldr	r3, [r6, #20]
 8009686:	42ab      	cmp	r3, r5
 8009688:	d164      	bne.n	8009754 <lv_draw_mask_radius+0x24c>
                x0.f = p->y_prev_x.f;
 800968a:	8b73      	ldrh	r3, [r6, #26]
 800968c:	aa08      	add	r2, sp, #32
 800968e:	8053      	strh	r3, [r2, #2]
                x0.i = p->y_prev_x.i;
 8009690:	8b33      	ldrh	r3, [r6, #24]
 8009692:	8013      	strh	r3, [r2, #0]
            _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
 8009694:	1e6c      	subs	r4, r5, #1
 8009696:	0020      	movs	r0, r4
 8009698:	4360      	muls	r0, r4
 800969a:	9b04      	ldr	r3, [sp, #16]
 800969c:	003a      	movs	r2, r7
 800969e:	1a18      	subs	r0, r3, r0
 80096a0:	a909      	add	r1, sp, #36	; 0x24
 80096a2:	f002 fbb5 	bl	800be10 <_lv_sqrt>
            p->y_prev = y - 1;
 80096a6:	6174      	str	r4, [r6, #20]
            p->y_prev_x.f = x1.f;
 80096a8:	ab08      	add	r3, sp, #32
 80096aa:	88db      	ldrh	r3, [r3, #6]
 80096ac:	8373      	strh	r3, [r6, #26]
            p->y_prev_x.i = x1.i;
 80096ae:	ab08      	add	r3, sp, #32
 80096b0:	889b      	ldrh	r3, [r3, #4]
            p->y_prev_x.i = x0.i;
 80096b2:	8333      	strh	r3, [r6, #24]
        if(x0.i == x1.i - 1 && x1.f == 0) {
 80096b4:	ab08      	add	r3, sp, #32
 80096b6:	881c      	ldrh	r4, [r3, #0]
 80096b8:	ab09      	add	r3, sp, #36	; 0x24
 80096ba:	881a      	ldrh	r2, [r3, #0]
 80096bc:	3a01      	subs	r2, #1
 80096be:	4294      	cmp	r4, r2
 80096c0:	d105      	bne.n	80096ce <lv_draw_mask_radius+0x1c6>
 80096c2:	885a      	ldrh	r2, [r3, #2]
 80096c4:	2a00      	cmp	r2, #0
 80096c6:	d102      	bne.n	80096ce <lv_draw_mask_radius+0x1c6>
            x1.f = 0xFF;
 80096c8:	32ff      	adds	r2, #255	; 0xff
            x1.i--;
 80096ca:	801c      	strh	r4, [r3, #0]
            x1.f = 0xFF;
 80096cc:	805a      	strh	r2, [r3, #2]
        if(x0.i == x1.i) {
 80096ce:	881a      	ldrh	r2, [r3, #0]
 80096d0:	42a2      	cmp	r2, r4
 80096d2:	d162      	bne.n	800979a <lv_draw_mask_radius+0x292>
            lv_opa_t m = (x0.f + x1.f) >> 1;
 80096d4:	aa08      	add	r2, sp, #32
 80096d6:	885b      	ldrh	r3, [r3, #2]
 80096d8:	8856      	ldrh	r6, [r2, #2]
 80096da:	18f6      	adds	r6, r6, r3
            if(outer) m = 255 - m;
 80096dc:	9b03      	ldr	r3, [sp, #12]
            lv_opa_t m = (x0.f + x1.f) >> 1;
 80096de:	1076      	asrs	r6, r6, #1
 80096e0:	b2f6      	uxtb	r6, r6
            if(outer) m = 255 - m;
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d001      	beq.n	80096ea <lv_draw_mask_radius+0x1e2>
 80096e6:	43f6      	mvns	r6, r6
 80096e8:	b2f6      	uxtb	r6, r6
            int32_t ofs = radius - x0.i - 1;
 80096ea:	9b02      	ldr	r3, [sp, #8]
 80096ec:	1b1c      	subs	r4, r3, r4
            if(kl >= 0 && kl < len) {
 80096ee:	9b05      	ldr	r3, [sp, #20]
            int32_t ofs = radius - x0.i - 1;
 80096f0:	3c01      	subs	r4, #1
            if(kl >= 0 && kl < len) {
 80096f2:	191d      	adds	r5, r3, r4
 80096f4:	d409      	bmi.n	800970a <lv_draw_mask_radius+0x202>
 80096f6:	9b00      	ldr	r3, [sp, #0]
 80096f8:	429d      	cmp	r5, r3
 80096fa:	da06      	bge.n	800970a <lv_draw_mask_radius+0x202>
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
 80096fc:	9b01      	ldr	r3, [sp, #4]
 80096fe:	0031      	movs	r1, r6
 8009700:	195f      	adds	r7, r3, r5
 8009702:	7838      	ldrb	r0, [r7, #0]
 8009704:	f7ff fd10 	bl	8009128 <mask_mix>
 8009708:	7038      	strb	r0, [r7, #0]
            int32_t kr = k + (w - ofs - 1);
 800970a:	9b06      	ldr	r3, [sp, #24]
 800970c:	1b1c      	subs	r4, r3, r4
            if(kr >= 0 && kr < len) {
 800970e:	9b05      	ldr	r3, [sp, #20]
            int32_t kr = k + (w - ofs - 1);
 8009710:	3c01      	subs	r4, #1
            if(kr >= 0 && kr < len) {
 8009712:	18e4      	adds	r4, r4, r3
 8009714:	d409      	bmi.n	800972a <lv_draw_mask_radius+0x222>
 8009716:	9b00      	ldr	r3, [sp, #0]
 8009718:	429c      	cmp	r4, r3
 800971a:	da06      	bge.n	800972a <lv_draw_mask_radius+0x222>
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800971c:	9b01      	ldr	r3, [sp, #4]
 800971e:	0031      	movs	r1, r6
 8009720:	191f      	adds	r7, r3, r4
 8009722:	7838      	ldrb	r0, [r7, #0]
 8009724:	f7ff fd00 	bl	8009128 <mask_mix>
 8009728:	7038      	strb	r0, [r7, #0]
            if(outer == false) {
 800972a:	9b03      	ldr	r3, [sp, #12]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d121      	bne.n	8009774 <lv_draw_mask_radius+0x26c>
                if(kl > len)  {
 8009730:	9b00      	ldr	r3, [sp, #0]
 8009732:	429d      	cmp	r5, r3
 8009734:	dd00      	ble.n	8009738 <lv_draw_mask_radius+0x230>
 8009736:	e702      	b.n	800953e <lv_draw_mask_radius+0x36>
                if(kl >= 0) {
 8009738:	2d00      	cmp	r5, #0
 800973a:	db03      	blt.n	8009744 <lv_draw_mask_radius+0x23c>
                    _lv_memset_00(&mask_buf[0], kl);
 800973c:	0029      	movs	r1, r5
 800973e:	9801      	ldr	r0, [sp, #4]
 8009740:	f002 fdc4 	bl	800c2cc <_lv_memset_00>
                if(kr < 0) {
 8009744:	1c60      	adds	r0, r4, #1
 8009746:	d500      	bpl.n	800974a <lv_draw_mask_radius+0x242>
 8009748:	e6f9      	b.n	800953e <lv_draw_mask_radius+0x36>
                if(kr <= len) {
 800974a:	9b00      	ldr	r3, [sp, #0]
 800974c:	4298      	cmp	r0, r3
 800974e:	dd00      	ble.n	8009752 <lv_draw_mask_radius+0x24a>
 8009750:	e73e      	b.n	80095d0 <lv_draw_mask_radius+0xc8>
 8009752:	e72c      	b.n	80095ae <lv_draw_mask_radius+0xa6>
                _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
 8009754:	0028      	movs	r0, r5
 8009756:	4368      	muls	r0, r5
 8009758:	9b04      	ldr	r3, [sp, #16]
 800975a:	003a      	movs	r2, r7
 800975c:	1a18      	subs	r0, r3, r0
 800975e:	a908      	add	r1, sp, #32
 8009760:	f002 fb56 	bl	800be10 <_lv_sqrt>
 8009764:	e796      	b.n	8009694 <lv_draw_mask_radius+0x18c>
                _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
 8009766:	4340      	muls	r0, r0
 8009768:	9b04      	ldr	r3, [sp, #16]
 800976a:	003a      	movs	r2, r7
 800976c:	1a18      	subs	r0, r3, r0
 800976e:	f002 fb4f 	bl	800be10 <_lv_sqrt>
 8009772:	e775      	b.n	8009660 <lv_draw_mask_radius+0x158>
                kl++;
 8009774:	3501      	adds	r5, #1
 8009776:	43eb      	mvns	r3, r5
 8009778:	17db      	asrs	r3, r3, #31
 800977a:	401d      	ands	r5, r3
                if(len_tmp + first > len) len_tmp = len - first;
 800977c:	9b00      	ldr	r3, [sp, #0]
 800977e:	1b59      	subs	r1, r3, r5
 8009780:	429c      	cmp	r4, r3
 8009782:	dc00      	bgt.n	8009786 <lv_draw_mask_radius+0x27e>
                int32_t len_tmp = kr - first;
 8009784:	1b61      	subs	r1, r4, r5
                if(first < len && len_tmp >= 0) {
 8009786:	9b00      	ldr	r3, [sp, #0]
 8009788:	429d      	cmp	r5, r3
 800978a:	db00      	blt.n	800978e <lv_draw_mask_radius+0x286>
 800978c:	e720      	b.n	80095d0 <lv_draw_mask_radius+0xc8>
 800978e:	2900      	cmp	r1, #0
 8009790:	da00      	bge.n	8009794 <lv_draw_mask_radius+0x28c>
 8009792:	e71d      	b.n	80095d0 <lv_draw_mask_radius+0xc8>
                    _lv_memset_00(&mask_buf[first], len_tmp);
 8009794:	9b01      	ldr	r3, [sp, #4]
 8009796:	1958      	adds	r0, r3, r5
 8009798:	e731      	b.n	80095fe <lv_draw_mask_radius+0xf6>
            int32_t ofs = radius - (x0.i + 1);
 800979a:	9b02      	ldr	r3, [sp, #8]
 800979c:	3401      	adds	r4, #1
 800979e:	1b1c      	subs	r4, r3, r4
            int32_t kl = k + ofs;
 80097a0:	9b05      	ldr	r3, [sp, #20]
 80097a2:	191b      	adds	r3, r3, r4
 80097a4:	9302      	str	r3, [sp, #8]
            int32_t kr = k + (w - ofs - 1);
 80097a6:	9b06      	ldr	r3, [sp, #24]
 80097a8:	1b1c      	subs	r4, r3, r4
 80097aa:	9b05      	ldr	r3, [sp, #20]
 80097ac:	3c01      	subs	r4, #1
 80097ae:	18e4      	adds	r4, r4, r3
            if(outer) {
 80097b0:	9b03      	ldr	r3, [sp, #12]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d012      	beq.n	80097dc <lv_draw_mask_radius+0x2d4>
                int32_t first = kl + 1;
 80097b6:	9b02      	ldr	r3, [sp, #8]
 80097b8:	1c58      	adds	r0, r3, #1
 80097ba:	43c3      	mvns	r3, r0
 80097bc:	17db      	asrs	r3, r3, #31
 80097be:	4018      	ands	r0, r3
                if(len_tmp + first > len) len_tmp = len - first;
 80097c0:	9b00      	ldr	r3, [sp, #0]
 80097c2:	1a19      	subs	r1, r3, r0
 80097c4:	42a3      	cmp	r3, r4
 80097c6:	db00      	blt.n	80097ca <lv_draw_mask_radius+0x2c2>
                int32_t len_tmp = kr - first;
 80097c8:	1a21      	subs	r1, r4, r0
                if(first < len && len_tmp >= 0) {
 80097ca:	9b00      	ldr	r3, [sp, #0]
 80097cc:	4283      	cmp	r3, r0
 80097ce:	dd05      	ble.n	80097dc <lv_draw_mask_radius+0x2d4>
 80097d0:	2900      	cmp	r1, #0
 80097d2:	db03      	blt.n	80097dc <lv_draw_mask_radius+0x2d4>
                    _lv_memset_00(&mask_buf[first], len_tmp);
 80097d4:	9b01      	ldr	r3, [sp, #4]
 80097d6:	1818      	adds	r0, r3, r0
 80097d8:	f002 fd78 	bl	800c2cc <_lv_memset_00>
            uint32_t i = x0.i + 1;
 80097dc:	ab08      	add	r3, sp, #32
 80097de:	8818      	ldrh	r0, [r3, #0]
            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
 80097e0:	ae0a      	add	r6, sp, #40	; 0x28
            uint32_t i = x0.i + 1;
 80097e2:	1c43      	adds	r3, r0, #1
            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
 80097e4:	4340      	muls	r0, r0
            uint32_t i = x0.i + 1;
 80097e6:	9305      	str	r3, [sp, #20]
            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
 80097e8:	9b04      	ldr	r3, [sp, #16]
 80097ea:	003a      	movs	r2, r7
 80097ec:	1a18      	subs	r0, r3, r0
 80097ee:	0031      	movs	r1, r6
 80097f0:	f002 fb0e 	bl	800be10 <_lv_sqrt>
            if(y_prev.f == 0) {
 80097f4:	8873      	ldrh	r3, [r6, #2]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d104      	bne.n	8009804 <lv_draw_mask_radius+0x2fc>
                y_prev.i--;
 80097fa:	8833      	ldrh	r3, [r6, #0]
 80097fc:	3b01      	subs	r3, #1
 80097fe:	8033      	strh	r3, [r6, #0]
                y_prev.f = 0xFF;
 8009800:	23ff      	movs	r3, #255	; 0xff
 8009802:	8073      	strh	r3, [r6, #2]
            if(y_prev.i >= y) {
 8009804:	ab0a      	add	r3, sp, #40	; 0x28
 8009806:	881b      	ldrh	r3, [r3, #0]
 8009808:	42ab      	cmp	r3, r5
 800980a:	db39      	blt.n	8009880 <lv_draw_mask_radius+0x378>
                _lv_sqrt(r2 - (i * i), &y_next, sqrt_mask);
 800980c:	9805      	ldr	r0, [sp, #20]
 800980e:	9b04      	ldr	r3, [sp, #16]
 8009810:	4340      	muls	r0, r0
 8009812:	ad0b      	add	r5, sp, #44	; 0x2c
 8009814:	1a18      	subs	r0, r3, r0
 8009816:	003a      	movs	r2, r7
 8009818:	0029      	movs	r1, r5
 800981a:	f002 faf9 	bl	800be10 <_lv_sqrt>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
 800981e:	ab08      	add	r3, sp, #32
 8009820:	885a      	ldrh	r2, [r3, #2]
 8009822:	23ff      	movs	r3, #255	; 0xff
 8009824:	886e      	ldrh	r6, [r5, #2]
 8009826:	1a9a      	subs	r2, r3, r2
 8009828:	1b9d      	subs	r5, r3, r6
 800982a:	4355      	muls	r5, r2
                if(outer) m = 255 - m;
 800982c:	9b03      	ldr	r3, [sp, #12]
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
 800982e:	126d      	asrs	r5, r5, #9
 8009830:	b2ed      	uxtb	r5, r5
                if(outer) m = 255 - m;
 8009832:	2b00      	cmp	r3, #0
 8009834:	d101      	bne.n	800983a <lv_draw_mask_radius+0x332>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
 8009836:	43ed      	mvns	r5, r5
 8009838:	b2ed      	uxtb	r5, r5
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800983a:	9b02      	ldr	r3, [sp, #8]
 800983c:	2b00      	cmp	r3, #0
 800983e:	db0a      	blt.n	8009856 <lv_draw_mask_radius+0x34e>
 8009840:	9b00      	ldr	r3, [sp, #0]
 8009842:	9a02      	ldr	r2, [sp, #8]
 8009844:	4293      	cmp	r3, r2
 8009846:	dd06      	ble.n	8009856 <lv_draw_mask_radius+0x34e>
 8009848:	9b01      	ldr	r3, [sp, #4]
 800984a:	0029      	movs	r1, r5
 800984c:	189f      	adds	r7, r3, r2
 800984e:	7838      	ldrb	r0, [r7, #0]
 8009850:	f7ff fc6a 	bl	8009128 <mask_mix>
 8009854:	7038      	strb	r0, [r7, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 8009856:	2c00      	cmp	r4, #0
 8009858:	db09      	blt.n	800986e <lv_draw_mask_radius+0x366>
 800985a:	9b00      	ldr	r3, [sp, #0]
 800985c:	42a3      	cmp	r3, r4
 800985e:	dd06      	ble.n	800986e <lv_draw_mask_radius+0x366>
 8009860:	9b01      	ldr	r3, [sp, #4]
 8009862:	0029      	movs	r1, r5
 8009864:	191f      	adds	r7, r3, r4
 8009866:	7838      	ldrb	r0, [r7, #0]
 8009868:	f7ff fc5e 	bl	8009128 <mask_mix>
 800986c:	7038      	strb	r0, [r7, #0]
                kl--;
 800986e:	9b02      	ldr	r3, [sp, #8]
                kr++;
 8009870:	3401      	adds	r4, #1
                kl--;
 8009872:	3b01      	subs	r3, #1
 8009874:	9302      	str	r3, [sp, #8]
                y_prev.f = y_next.f;
 8009876:	ab0a      	add	r3, sp, #40	; 0x28
 8009878:	805e      	strh	r6, [r3, #2]
                i++;
 800987a:	9b05      	ldr	r3, [sp, #20]
 800987c:	3301      	adds	r3, #1
 800987e:	9305      	str	r3, [sp, #20]
            for(; i <= x1.i; i++) {
 8009880:	ab09      	add	r3, sp, #36	; 0x24
 8009882:	881b      	ldrh	r3, [r3, #0]
 8009884:	9306      	str	r3, [sp, #24]
 */
LV_ATTRIBUTE_FAST_MEM static inline void sqrt_approx(lv_sqrt_res_t * q, lv_sqrt_res_t * ref, uint32_t x)
{
    x = x << 8; /*Upscale for extra precision*/

    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
 8009886:	ab0a      	add	r3, sp, #40	; 0x28
 8009888:	881a      	ldrh	r2, [r3, #0]
 800988a:	0112      	lsls	r2, r2, #4
 800988c:	9207      	str	r2, [sp, #28]
 800988e:	885d      	ldrh	r5, [r3, #2]
 8009890:	9b05      	ldr	r3, [sp, #20]
 8009892:	aa0b      	add	r2, sp, #44	; 0x2c
 8009894:	1b1b      	subs	r3, r3, r4
 8009896:	8856      	ldrh	r6, [r2, #2]
 8009898:	8817      	ldrh	r7, [r2, #0]
 800989a:	9305      	str	r3, [sp, #20]
 800989c:	2200      	movs	r2, #0
 800989e:	e03b      	b.n	8009918 <lv_draw_mask_radius+0x410>
 80098a0:	9a07      	ldr	r2, [sp, #28]
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
 80098a2:	435b      	muls	r3, r3
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
 80098a4:	092e      	lsrs	r6, r5, #4
 80098a6:	18b6      	adds	r6, r6, r2
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
 80098a8:	9a04      	ldr	r2, [sp, #16]
    uint32_t raw2 = raw * raw;

    int32_t d = x - raw2;
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
 80098aa:	0071      	lsls	r1, r6, #1
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
 80098ac:	1ad0      	subs	r0, r2, r3
    uint32_t raw2 = raw * raw;
 80098ae:	0033      	movs	r3, r6
 80098b0:	4373      	muls	r3, r6
    x = x << 8; /*Upscale for extra precision*/
 80098b2:	0200      	lsls	r0, r0, #8
    int32_t d = x - raw2;
 80098b4:	1ac0      	subs	r0, r0, r3
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
 80098b6:	f7f6 fce7 	bl	8000288 <__divsi3>

    q->i = d >> 4;
    q->f = (d & 0xF) << 4;
 80098ba:	23ff      	movs	r3, #255	; 0xff
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
 80098bc:	1986      	adds	r6, r0, r6
    q->i = d >> 4;
 80098be:	1137      	asrs	r7, r6, #4
    q->f = (d & 0xF) << 4;
 80098c0:	0136      	lsls	r6, r6, #4
 80098c2:	401e      	ands	r6, r3
                m = (y_prev.f + y_next.f) >> 1;
 80098c4:	19ad      	adds	r5, r5, r6
                if(outer) m = 255 - m;
 80098c6:	9b03      	ldr	r3, [sp, #12]
                m = (y_prev.f + y_next.f) >> 1;
 80098c8:	106d      	asrs	r5, r5, #1
    q->i = d >> 4;
 80098ca:	b2bf      	uxth	r7, r7
                m = (y_prev.f + y_next.f) >> 1;
 80098cc:	b2ed      	uxtb	r5, r5
                if(outer) m = 255 - m;
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d001      	beq.n	80098d6 <lv_draw_mask_radius+0x3ce>
 80098d2:	43ed      	mvns	r5, r5
 80098d4:	b2ed      	uxtb	r5, r5
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 80098d6:	9b02      	ldr	r3, [sp, #8]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	db0b      	blt.n	80098f4 <lv_draw_mask_radius+0x3ec>
 80098dc:	9b00      	ldr	r3, [sp, #0]
 80098de:	9a02      	ldr	r2, [sp, #8]
 80098e0:	4293      	cmp	r3, r2
 80098e2:	dd07      	ble.n	80098f4 <lv_draw_mask_radius+0x3ec>
 80098e4:	9b01      	ldr	r3, [sp, #4]
 80098e6:	0029      	movs	r1, r5
 80098e8:	5c98      	ldrb	r0, [r3, r2]
 80098ea:	f7ff fc1d 	bl	8009128 <mask_mix>
 80098ee:	9b01      	ldr	r3, [sp, #4]
 80098f0:	9a02      	ldr	r2, [sp, #8]
 80098f2:	5498      	strb	r0, [r3, r2]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 80098f4:	2c00      	cmp	r4, #0
 80098f6:	db09      	blt.n	800990c <lv_draw_mask_radius+0x404>
 80098f8:	9b00      	ldr	r3, [sp, #0]
 80098fa:	42a3      	cmp	r3, r4
 80098fc:	dd06      	ble.n	800990c <lv_draw_mask_radius+0x404>
 80098fe:	9b01      	ldr	r3, [sp, #4]
 8009900:	0029      	movs	r1, r5
 8009902:	5d18      	ldrb	r0, [r3, r4]
 8009904:	f7ff fc10 	bl	8009128 <mask_mix>
 8009908:	9b01      	ldr	r3, [sp, #4]
 800990a:	5518      	strb	r0, [r3, r4]
 800990c:	2201      	movs	r2, #1
                y_prev.f = y_next.f;
 800990e:	0035      	movs	r5, r6
                kl--;
 8009910:	9b02      	ldr	r3, [sp, #8]
                kr++;
 8009912:	3401      	adds	r4, #1
                kl--;
 8009914:	3b01      	subs	r3, #1
 8009916:	9302      	str	r3, [sp, #8]
 8009918:	9b05      	ldr	r3, [sp, #20]
            for(; i <= x1.i; i++) {
 800991a:	9906      	ldr	r1, [sp, #24]
 800991c:	191b      	adds	r3, r3, r4
 800991e:	4299      	cmp	r1, r3
 8009920:	d2be      	bcs.n	80098a0 <lv_draw_mask_radius+0x398>
 8009922:	ab0a      	add	r3, sp, #40	; 0x28
 8009924:	2a00      	cmp	r2, #0
 8009926:	d003      	beq.n	8009930 <lv_draw_mask_radius+0x428>
 8009928:	aa0b      	add	r2, sp, #44	; 0x2c
 800992a:	805d      	strh	r5, [r3, #2]
 800992c:	8017      	strh	r7, [r2, #0]
 800992e:	8056      	strh	r6, [r2, #2]
            if(y_prev.f) {
 8009930:	885d      	ldrh	r5, [r3, #2]
 8009932:	2d00      	cmp	r5, #0
 8009934:	d027      	beq.n	8009986 <lv_draw_mask_radius+0x47e>
                m = (y_prev.f * x1.f) >> 9;
 8009936:	ab09      	add	r3, sp, #36	; 0x24
 8009938:	885b      	ldrh	r3, [r3, #2]
 800993a:	435d      	muls	r5, r3
                if(outer) m = 255 - m;
 800993c:	9b03      	ldr	r3, [sp, #12]
                m = (y_prev.f * x1.f) >> 9;
 800993e:	126d      	asrs	r5, r5, #9
 8009940:	b2ed      	uxtb	r5, r5
                if(outer) m = 255 - m;
 8009942:	2b00      	cmp	r3, #0
 8009944:	d001      	beq.n	800994a <lv_draw_mask_radius+0x442>
 8009946:	43ed      	mvns	r5, r5
 8009948:	b2ed      	uxtb	r5, r5
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800994a:	9b02      	ldr	r3, [sp, #8]
 800994c:	2b00      	cmp	r3, #0
 800994e:	db0a      	blt.n	8009966 <lv_draw_mask_radius+0x45e>
 8009950:	9b00      	ldr	r3, [sp, #0]
 8009952:	9a02      	ldr	r2, [sp, #8]
 8009954:	4293      	cmp	r3, r2
 8009956:	dd06      	ble.n	8009966 <lv_draw_mask_radius+0x45e>
 8009958:	9b01      	ldr	r3, [sp, #4]
 800995a:	0029      	movs	r1, r5
 800995c:	189e      	adds	r6, r3, r2
 800995e:	7830      	ldrb	r0, [r6, #0]
 8009960:	f7ff fbe2 	bl	8009128 <mask_mix>
 8009964:	7030      	strb	r0, [r6, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 8009966:	2c00      	cmp	r4, #0
 8009968:	db09      	blt.n	800997e <lv_draw_mask_radius+0x476>
 800996a:	9b00      	ldr	r3, [sp, #0]
 800996c:	42a3      	cmp	r3, r4
 800996e:	dd06      	ble.n	800997e <lv_draw_mask_radius+0x476>
 8009970:	9b01      	ldr	r3, [sp, #4]
 8009972:	0029      	movs	r1, r5
 8009974:	191e      	adds	r6, r3, r4
 8009976:	7830      	ldrb	r0, [r6, #0]
 8009978:	f7ff fbd6 	bl	8009128 <mask_mix>
 800997c:	7030      	strb	r0, [r6, #0]
                kl--;
 800997e:	9b02      	ldr	r3, [sp, #8]
                kr++;
 8009980:	3401      	adds	r4, #1
                kl--;
 8009982:	3b01      	subs	r3, #1
 8009984:	9302      	str	r3, [sp, #8]
            if(outer == 0) {
 8009986:	9b03      	ldr	r3, [sp, #12]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d000      	beq.n	800998e <lv_draw_mask_radius+0x486>
 800998c:	e620      	b.n	80095d0 <lv_draw_mask_radius+0xc8>
                kl++;
 800998e:	9902      	ldr	r1, [sp, #8]
                if(kl > len) {
 8009990:	9b00      	ldr	r3, [sp, #0]
                kl++;
 8009992:	3101      	adds	r1, #1
                if(kl > len) {
 8009994:	428b      	cmp	r3, r1
 8009996:	da00      	bge.n	800999a <lv_draw_mask_radius+0x492>
 8009998:	e5d1      	b.n	800953e <lv_draw_mask_radius+0x36>
                if(kl >= 0) _lv_memset_00(&mask_buf[0], kl);
 800999a:	2900      	cmp	r1, #0
 800999c:	db02      	blt.n	80099a4 <lv_draw_mask_radius+0x49c>
 800999e:	9801      	ldr	r0, [sp, #4]
 80099a0:	f002 fc94 	bl	800c2cc <_lv_memset_00>
                if(kr < 0) {
 80099a4:	2c00      	cmp	r4, #0
 80099a6:	da00      	bge.n	80099aa <lv_draw_mask_radius+0x4a2>
 80099a8:	e5c9      	b.n	800953e <lv_draw_mask_radius+0x36>
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
 80099aa:	9b00      	ldr	r3, [sp, #0]
 80099ac:	42a3      	cmp	r3, r4
 80099ae:	dc00      	bgt.n	80099b2 <lv_draw_mask_radius+0x4aa>
 80099b0:	e60e      	b.n	80095d0 <lv_draw_mask_radius+0xc8>
 80099b2:	1b19      	subs	r1, r3, r4
 80099b4:	9b01      	ldr	r3, [sp, #4]
 80099b6:	1918      	adds	r0, r3, r4
 80099b8:	e621      	b.n	80095fe <lv_draw_mask_radius+0xf6>
        if(radius <= 256) sqrt_mask = 0x800;
 80099ba:	2380      	movs	r3, #128	; 0x80
 80099bc:	9a02      	ldr	r2, [sp, #8]
 80099be:	005b      	lsls	r3, r3, #1
 80099c0:	2780      	movs	r7, #128	; 0x80
 80099c2:	429a      	cmp	r2, r3
 80099c4:	dd00      	ble.n	80099c8 <lv_draw_mask_radius+0x4c0>
 80099c6:	e65a      	b.n	800967e <lv_draw_mask_radius+0x176>
 80099c8:	013f      	lsls	r7, r7, #4
 80099ca:	e659      	b.n	8009680 <lv_draw_mask_radius+0x178>

080099cc <lv_draw_mask_add>:
{
 80099cc:	2300      	movs	r3, #0
 80099ce:	b5f0      	push	{r4, r5, r6, r7, lr}
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 80099d0:	4d08      	ldr	r5, [pc, #32]	; (80099f4 <lv_draw_mask_add+0x28>)
 80099d2:	00de      	lsls	r6, r3, #3
 80099d4:	1974      	adds	r4, r6, r5
 80099d6:	6827      	ldr	r7, [r4, #0]
 80099d8:	b2da      	uxtb	r2, r3
 80099da:	2f00      	cmp	r7, #0
 80099dc:	d005      	beq.n	80099ea <lv_draw_mask_add+0x1e>
 80099de:	3301      	adds	r3, #1
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 80099e0:	2b10      	cmp	r3, #16
 80099e2:	d1f6      	bne.n	80099d2 <lv_draw_mask_add+0x6>
        return LV_MASK_ID_INV;
 80099e4:	2001      	movs	r0, #1
 80099e6:	4240      	negs	r0, r0
}
 80099e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
 80099ea:	5170      	str	r0, [r6, r5]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
 80099ec:	6061      	str	r1, [r4, #4]
    return i;
 80099ee:	b210      	sxth	r0, r2
 80099f0:	e7fa      	b.n	80099e8 <lv_draw_mask_add+0x1c>
 80099f2:	46c0      	nop			; (mov r8, r8)
 80099f4:	200071c4 	.word	0x200071c4

080099f8 <lv_draw_mask_apply>:
{
 80099f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    while(m->param) {
 80099fa:	2400      	movs	r4, #0
{
 80099fc:	001e      	movs	r6, r3
    bool changed = false;
 80099fe:	0025      	movs	r5, r4
{
 8009a00:	b087      	sub	sp, #28
 8009a02:	9003      	str	r0, [sp, #12]
 8009a04:	9104      	str	r1, [sp, #16]
 8009a06:	9205      	str	r2, [sp, #20]
    while(m->param) {
 8009a08:	4b0a      	ldr	r3, [pc, #40]	; (8009a34 <lv_draw_mask_apply+0x3c>)
 8009a0a:	591b      	ldr	r3, [r3, r4]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d102      	bne.n	8009a16 <lv_draw_mask_apply+0x1e>
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 8009a10:	1c68      	adds	r0, r5, #1
}
 8009a12:	b007      	add	sp, #28
 8009a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
 8009a16:	9300      	str	r3, [sp, #0]
 8009a18:	681f      	ldr	r7, [r3, #0]
 8009a1a:	9a05      	ldr	r2, [sp, #20]
 8009a1c:	0033      	movs	r3, r6
 8009a1e:	9904      	ldr	r1, [sp, #16]
 8009a20:	9803      	ldr	r0, [sp, #12]
 8009a22:	47b8      	blx	r7
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 8009a24:	2800      	cmp	r0, #0
 8009a26:	d0f4      	beq.n	8009a12 <lv_draw_mask_apply+0x1a>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
 8009a28:	2802      	cmp	r0, #2
 8009a2a:	d100      	bne.n	8009a2e <lv_draw_mask_apply+0x36>
 8009a2c:	2501      	movs	r5, #1
 8009a2e:	3408      	adds	r4, #8
 8009a30:	e7ea      	b.n	8009a08 <lv_draw_mask_apply+0x10>
 8009a32:	46c0      	nop			; (mov r8, r8)
 8009a34:	200071c4 	.word	0x200071c4

08009a38 <lv_draw_mask_remove_id>:
{
 8009a38:	0003      	movs	r3, r0
 8009a3a:	2100      	movs	r1, #0
    void * p = NULL;
 8009a3c:	0008      	movs	r0, r1
    if(id != LV_MASK_ID_INV) {
 8009a3e:	1c5a      	adds	r2, r3, #1
 8009a40:	d005      	beq.n	8009a4e <lv_draw_mask_remove_id+0x16>
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
 8009a42:	4a03      	ldr	r2, [pc, #12]	; (8009a50 <lv_draw_mask_remove_id+0x18>)
 8009a44:	00db      	lsls	r3, r3, #3
 8009a46:	5898      	ldr	r0, [r3, r2]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
 8009a48:	5099      	str	r1, [r3, r2]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
 8009a4a:	18d3      	adds	r3, r2, r3
 8009a4c:	6059      	str	r1, [r3, #4]
}
 8009a4e:	4770      	bx	lr
 8009a50:	200071c4 	.word	0x200071c4

08009a54 <lv_draw_mask_remove_custom>:
{
 8009a54:	2300      	movs	r3, #0
 8009a56:	b570      	push	{r4, r5, r6, lr}
    void * p = NULL;
 8009a58:	0019      	movs	r1, r3
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 8009a5a:	001c      	movs	r4, r3
 8009a5c:	4d06      	ldr	r5, [pc, #24]	; (8009a78 <lv_draw_mask_remove_custom+0x24>)
 8009a5e:	195a      	adds	r2, r3, r5
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 8009a60:	6856      	ldr	r6, [r2, #4]
 8009a62:	4286      	cmp	r6, r0
 8009a64:	d102      	bne.n	8009a6c <lv_draw_mask_remove_custom+0x18>
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 8009a66:	6811      	ldr	r1, [r2, #0]
            LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = NULL;
 8009a68:	6054      	str	r4, [r2, #4]
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 8009a6a:	6014      	str	r4, [r2, #0]
 8009a6c:	3308      	adds	r3, #8
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8009a6e:	2b80      	cmp	r3, #128	; 0x80
 8009a70:	d1f5      	bne.n	8009a5e <lv_draw_mask_remove_custom+0xa>
}
 8009a72:	0008      	movs	r0, r1
 8009a74:	bd70      	pop	{r4, r5, r6, pc}
 8009a76:	46c0      	nop			; (mov r8, r8)
 8009a78:	200071c4 	.word	0x200071c4

08009a7c <lv_draw_mask_get_cnt>:
{
 8009a7c:	2300      	movs	r3, #0
    uint8_t cnt = 0;
 8009a7e:	0018      	movs	r0, r3
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
 8009a80:	4a05      	ldr	r2, [pc, #20]	; (8009a98 <lv_draw_mask_get_cnt+0x1c>)
 8009a82:	00d9      	lsls	r1, r3, #3
 8009a84:	5851      	ldr	r1, [r2, r1]
 8009a86:	2900      	cmp	r1, #0
 8009a88:	d001      	beq.n	8009a8e <lv_draw_mask_get_cnt+0x12>
 8009a8a:	3001      	adds	r0, #1
 8009a8c:	b2c0      	uxtb	r0, r0
 8009a8e:	3301      	adds	r3, #1
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8009a90:	2b10      	cmp	r3, #16
 8009a92:	d1f6      	bne.n	8009a82 <lv_draw_mask_get_cnt+0x6>
}
 8009a94:	4770      	bx	lr
 8009a96:	46c0      	nop			; (mov r8, r8)
 8009a98:	200071c4 	.word	0x200071c4

08009a9c <lv_draw_mask_line_points_init>:
{
 8009a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a9e:	001e      	movs	r6, r3
 8009aa0:	ab08      	add	r3, sp, #32
 8009aa2:	2500      	movs	r5, #0
 8009aa4:	5f5d      	ldrsh	r5, [r3, r5]
 8009aa6:	ab09      	add	r3, sp, #36	; 0x24
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	9100      	str	r1, [sp, #0]
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 8009aac:	212c      	movs	r1, #44	; 0x2c
{
 8009aae:	0017      	movs	r7, r2
 8009ab0:	0004      	movs	r4, r0
 8009ab2:	9301      	str	r3, [sp, #4]
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 8009ab4:	f002 fc0a 	bl	800c2cc <_lv_memset_00>
    if(p1y > p2y) {
 8009ab8:	42af      	cmp	r7, r5
 8009aba:	dc05      	bgt.n	8009ac8 <lv_draw_mask_line_points_init+0x2c>
 8009abc:	002b      	movs	r3, r5
 8009abe:	003d      	movs	r5, r7
 8009ac0:	001f      	movs	r7, r3
 8009ac2:	0033      	movs	r3, r6
 8009ac4:	9e00      	ldr	r6, [sp, #0]
 8009ac6:	9300      	str	r3, [sp, #0]
    param->cfg.side = side;
 8009ac8:	2103      	movs	r1, #3
    param->cfg.p2.x = p2x;
 8009aca:	9b00      	ldr	r3, [sp, #0]
    param->cfg.side = side;
 8009acc:	9a01      	ldr	r2, [sp, #4]
    param->cfg.p2.x = p2x;
 8009ace:	81a3      	strh	r3, [r4, #12]
    param->cfg.side = side;
 8009ad0:	7c23      	ldrb	r3, [r4, #16]
 8009ad2:	400a      	ands	r2, r1
 8009ad4:	438b      	bics	r3, r1
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	7423      	strb	r3, [r4, #16]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 8009ada:	9b00      	ldr	r3, [sp, #0]
    param->cfg.p1.x = p1x;
 8009adc:	8126      	strh	r6, [r4, #8]
    param->origo.x = p1x;
 8009ade:	8266      	strh	r6, [r4, #18]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 8009ae0:	1b9e      	subs	r6, r3, r6
 8009ae2:	17f3      	asrs	r3, r6, #31
 8009ae4:	18f1      	adds	r1, r6, r3
    param->cfg.p1.y = p1y;
 8009ae6:	8165      	strh	r5, [r4, #10]
    param->origo.y = p1y;
 8009ae8:	82a5      	strh	r5, [r4, #20]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 8009aea:	1b7d      	subs	r5, r7, r5
 8009aec:	4059      	eors	r1, r3
 8009aee:	17eb      	asrs	r3, r5, #31
 8009af0:	18ea      	adds	r2, r5, r3
 8009af2:	405a      	eors	r2, r3
    param->cfg.p2.y = p2y;
 8009af4:	81e7      	strh	r7, [r4, #14]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 8009af6:	2301      	movs	r3, #1
 8009af8:	4291      	cmp	r1, r2
 8009afa:	dc00      	bgt.n	8009afe <lv_draw_mask_line_points_init+0x62>
 8009afc:	2300      	movs	r3, #0
 8009afe:	0027      	movs	r7, r4
 8009b00:	2201      	movs	r2, #1
 8009b02:	0019      	movs	r1, r3
 8009b04:	3728      	adds	r7, #40	; 0x28
 8009b06:	783b      	ldrb	r3, [r7, #0]
 8009b08:	4011      	ands	r1, r2
 8009b0a:	4393      	bics	r3, r2
 8009b0c:	430b      	orrs	r3, r1
    param->yx_steep = 0;
 8009b0e:	2100      	movs	r1, #0
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 8009b10:	4828      	ldr	r0, [pc, #160]	; (8009bb4 <lv_draw_mask_line_points_init+0x118>)
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 8009b12:	703b      	strb	r3, [r7, #0]
    param->yx_steep = 0;
 8009b14:	61e1      	str	r1, [r4, #28]
    param->xy_steep = 0;
 8009b16:	61a1      	str	r1, [r4, #24]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 8009b18:	6020      	str	r0, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
 8009b1a:	7121      	strb	r1, [r4, #4]
    if(param->flat) {
 8009b1c:	4213      	tst	r3, r2
 8009b1e:	d023      	beq.n	8009b68 <lv_draw_mask_line_points_init+0xcc>
        if(dx) {
 8009b20:	428e      	cmp	r6, r1
 8009b22:	d007      	beq.n	8009b34 <lv_draw_mask_line_points_init+0x98>
            m = (1 << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
 8009b24:	2080      	movs	r0, #128	; 0x80
 8009b26:	0031      	movs	r1, r6
 8009b28:	0340      	lsls	r0, r0, #13
 8009b2a:	f7f6 fbad 	bl	8000288 <__divsi3>
            param->yx_steep = (m * dy) >> 10;
 8009b2e:	4368      	muls	r0, r5
 8009b30:	1280      	asrs	r0, r0, #10
 8009b32:	61e0      	str	r0, [r4, #28]
        if(dy) {
 8009b34:	2d00      	cmp	r5, #0
 8009b36:	d007      	beq.n	8009b48 <lv_draw_mask_line_points_init+0xac>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8009b38:	2080      	movs	r0, #128	; 0x80
 8009b3a:	0029      	movs	r1, r5
 8009b3c:	0340      	lsls	r0, r0, #13
 8009b3e:	f7f6 fba3 	bl	8000288 <__divsi3>
            param->xy_steep = (m * dx) >> 10;
 8009b42:	4346      	muls	r6, r0
 8009b44:	12b6      	asrs	r6, r6, #10
 8009b46:	61a6      	str	r6, [r4, #24]
        param->steep = param->yx_steep;
 8009b48:	69e3      	ldr	r3, [r4, #28]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 8009b4a:	2203      	movs	r2, #3
        param->steep = param->xy_steep;
 8009b4c:	6223      	str	r3, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 8009b4e:	7c23      	ldrb	r3, [r4, #16]
 8009b50:	4013      	ands	r3, r2
 8009b52:	6a22      	ldr	r2, [r4, #32]
 8009b54:	d11e      	bne.n	8009b94 <lv_draw_mask_line_points_init+0xf8>
 8009b56:	2102      	movs	r1, #2
 8009b58:	783b      	ldrb	r3, [r7, #0]
 8009b5a:	438b      	bics	r3, r1
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 8009b5c:	703b      	strb	r3, [r7, #0]
    param->spx = param->steep >> 2;
 8009b5e:	1093      	asrs	r3, r2, #2
    if(param->steep < 0) param->spx = -param->spx;
 8009b60:	2a00      	cmp	r2, #0
 8009b62:	db25      	blt.n	8009bb0 <lv_draw_mask_line_points_init+0x114>
 8009b64:	6263      	str	r3, [r4, #36]	; 0x24
}
 8009b66:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        if(dy) {
 8009b68:	2d00      	cmp	r5, #0
 8009b6a:	d007      	beq.n	8009b7c <lv_draw_mask_line_points_init+0xe0>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8009b6c:	2080      	movs	r0, #128	; 0x80
 8009b6e:	0029      	movs	r1, r5
 8009b70:	0340      	lsls	r0, r0, #13
 8009b72:	f7f6 fb89 	bl	8000288 <__divsi3>
            param->xy_steep = (m * dx) >> 10;
 8009b76:	4370      	muls	r0, r6
 8009b78:	1280      	asrs	r0, r0, #10
 8009b7a:	61a0      	str	r0, [r4, #24]
        if(dx) {
 8009b7c:	2e00      	cmp	r6, #0
 8009b7e:	d007      	beq.n	8009b90 <lv_draw_mask_line_points_init+0xf4>
            m = (1 << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8009b80:	2080      	movs	r0, #128	; 0x80
 8009b82:	0031      	movs	r1, r6
 8009b84:	0340      	lsls	r0, r0, #13
 8009b86:	f7f6 fb7f 	bl	8000288 <__divsi3>
            param->yx_steep = (m * dy) >> 10;
 8009b8a:	4345      	muls	r5, r0
 8009b8c:	12ad      	asrs	r5, r5, #10
 8009b8e:	61e5      	str	r5, [r4, #28]
        param->steep = param->xy_steep;
 8009b90:	69a3      	ldr	r3, [r4, #24]
 8009b92:	e7da      	b.n	8009b4a <lv_draw_mask_line_points_init+0xae>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d103      	bne.n	8009ba0 <lv_draw_mask_line_points_init+0x104>
 8009b98:	2302      	movs	r3, #2
 8009b9a:	7839      	ldrb	r1, [r7, #0]
 8009b9c:	430b      	orrs	r3, r1
 8009b9e:	e7dd      	b.n	8009b5c <lv_draw_mask_line_points_init+0xc0>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
 8009ba0:	2b02      	cmp	r3, #2
 8009ba2:	d102      	bne.n	8009baa <lv_draw_mask_line_points_init+0x10e>
        if(param->steep > 0) param->inv = 1;
 8009ba4:	2a00      	cmp	r2, #0
 8009ba6:	dcf7      	bgt.n	8009b98 <lv_draw_mask_line_points_init+0xfc>
 8009ba8:	e7d5      	b.n	8009b56 <lv_draw_mask_line_points_init+0xba>
        if(param->steep > 0) param->inv = 0;
 8009baa:	2a00      	cmp	r2, #0
 8009bac:	dcd3      	bgt.n	8009b56 <lv_draw_mask_line_points_init+0xba>
 8009bae:	e7f3      	b.n	8009b98 <lv_draw_mask_line_points_init+0xfc>
    if(param->steep < 0) param->spx = -param->spx;
 8009bb0:	425b      	negs	r3, r3
 8009bb2:	e7d7      	b.n	8009b64 <lv_draw_mask_line_points_init+0xc8>
 8009bb4:	08009145 	.word	0x08009145

08009bb8 <lv_draw_mask_radius_init>:
{
 8009bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bba:	001d      	movs	r5, r3
 8009bbc:	88cb      	ldrh	r3, [r1, #6]
 8009bbe:	0016      	movs	r6, r2
 8009bc0:	884a      	ldrh	r2, [r1, #2]
 8009bc2:	0004      	movs	r4, r0
 8009bc4:	3301      	adds	r3, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009bc6:	8888      	ldrh	r0, [r1, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009bc8:	1a9b      	subs	r3, r3, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009bca:	880a      	ldrh	r2, [r1, #0]
 8009bcc:	3001      	adds	r0, #1
 8009bce:	1a80      	subs	r0, r0, r2
    int32_t short_side = LV_MATH_MIN(w, h);
 8009bd0:	b207      	sxth	r7, r0
 8009bd2:	1c1a      	adds	r2, r3, #0
 8009bd4:	b21b      	sxth	r3, r3
 8009bd6:	42bb      	cmp	r3, r7
 8009bd8:	dd00      	ble.n	8009bdc <lv_draw_mask_radius_init+0x24>
 8009bda:	1c02      	adds	r2, r0, #0
 8009bdc:	b213      	sxth	r3, r2
    if(radius > short_side >> 1) radius = short_side >> 1;
 8009bde:	105b      	asrs	r3, r3, #1
 8009be0:	429e      	cmp	r6, r3
 8009be2:	dd00      	ble.n	8009be6 <lv_draw_mask_radius_init+0x2e>
 8009be4:	b21e      	sxth	r6, r3
    lv_area_copy(&param->cfg.rect, rect);
 8009be6:	0020      	movs	r0, r4
 8009be8:	3008      	adds	r0, #8
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
 8009bea:	f7ff fc86 	bl	80094fa <_lv_memcpy_small.constprop.4>
    param->cfg.outer = inv ? 1 : 0;
 8009bee:	2201      	movs	r2, #1
 8009bf0:	002b      	movs	r3, r5
 8009bf2:	7ca5      	ldrb	r5, [r4, #18]
 8009bf4:	4013      	ands	r3, r2
 8009bf6:	4395      	bics	r5, r2
 8009bf8:	431d      	orrs	r5, r3
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
 8009bfa:	4b06      	ldr	r3, [pc, #24]	; (8009c14 <lv_draw_mask_radius_init+0x5c>)
    param->cfg.radius = radius;
 8009bfc:	8226      	strh	r6, [r4, #16]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
 8009bfe:	6023      	str	r3, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 8009c00:	2302      	movs	r3, #2
 8009c02:	7123      	strb	r3, [r4, #4]
    param->y_prev = INT32_MIN;
 8009c04:	2380      	movs	r3, #128	; 0x80
 8009c06:	061b      	lsls	r3, r3, #24
 8009c08:	6163      	str	r3, [r4, #20]
 8009c0a:	2300      	movs	r3, #0
    param->cfg.outer = inv ? 1 : 0;
 8009c0c:	74a5      	strb	r5, [r4, #18]
    param->y_prev = INT32_MIN;
 8009c0e:	61a3      	str	r3, [r4, #24]
}
 8009c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c12:	46c0      	nop			; (mov r8, r8)
 8009c14:	08009509 	.word	0x08009509

08009c18 <grad_get>:
        _lv_mem_buf_release(mask_buf);
    }
}

LV_ATTRIBUTE_FAST_MEM static inline lv_color_t grad_get(const lv_draw_rect_dsc_t * dsc, lv_coord_t s, lv_coord_t i)
{
 8009c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c1a:	0004      	movs	r4, r0
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
 8009c1c:	2308      	movs	r3, #8
 8009c1e:	5ec6      	ldrsh	r6, [r0, r3]
 8009c20:	0008      	movs	r0, r1
 8009c22:	4370      	muls	r0, r6
 8009c24:	1200      	asrs	r0, r0, #8
    if(i <= min) return dsc->bg_color;
 8009c26:	4282      	cmp	r2, r0
 8009c28:	dc01      	bgt.n	8009c2e <grad_get+0x16>
 8009c2a:	8860      	ldrh	r0, [r4, #2]
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
    d = (s * d) >> 8;
    i -= min;
    lv_opa_t mix = (i * 255) / d;
    return lv_color_mix(dsc->bg_grad_color, dsc->bg_color, mix);
}
 8009c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
 8009c2e:	250a      	movs	r5, #10
 8009c30:	5f63      	ldrsh	r3, [r4, r5]
 8009c32:	001d      	movs	r5, r3
 8009c34:	434d      	muls	r5, r1
 8009c36:	122d      	asrs	r5, r5, #8
    if(i >= max) return dsc->bg_grad_color;
 8009c38:	42aa      	cmp	r2, r5
 8009c3a:	db01      	blt.n	8009c40 <grad_get+0x28>
 8009c3c:	88a0      	ldrh	r0, [r4, #4]
 8009c3e:	e7f5      	b.n	8009c2c <grad_get+0x14>
    lv_opa_t mix = (i * 255) / d;
 8009c40:	25ff      	movs	r5, #255	; 0xff
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
 8009c42:	1b9b      	subs	r3, r3, r6
    d = (s * d) >> 8;
 8009c44:	4359      	muls	r1, r3
    i -= min;
 8009c46:	1a10      	subs	r0, r2, r0
    lv_opa_t mix = (i * 255) / d;
 8009c48:	b200      	sxth	r0, r0
 8009c4a:	4368      	muls	r0, r5
    d = (s * d) >> 8;
 8009c4c:	1209      	asrs	r1, r1, #8
    lv_opa_t mix = (i * 255) / d;
 8009c4e:	f7f6 fb1b 	bl	8000288 <__divsi3>
 8009c52:	0001      	movs	r1, r0
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009c54:	88a6      	ldrh	r6, [r4, #4]
 8009c56:	8867      	ldrh	r7, [r4, #2]
 8009c58:	4029      	ands	r1, r5
 8009c5a:	0576      	lsls	r6, r6, #21
 8009c5c:	057f      	lsls	r7, r7, #21
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009c5e:	1a6a      	subs	r2, r5, r1
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009c60:	0eb6      	lsrs	r6, r6, #26
 8009c62:	0ebf      	lsrs	r7, r7, #26
 8009c64:	4357      	muls	r7, r2
 8009c66:	434e      	muls	r6, r1
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009c68:	7963      	ldrb	r3, [r4, #5]
 8009c6a:	78e0      	ldrb	r0, [r4, #3]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009c6c:	19f6      	adds	r6, r6, r7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009c6e:	7927      	ldrb	r7, [r4, #4]
 8009c70:	78a4      	ldrb	r4, [r4, #2]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009c72:	08db      	lsrs	r3, r3, #3
 8009c74:	08c0      	lsrs	r0, r0, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009c76:	06ff      	lsls	r7, r7, #27
 8009c78:	06e4      	lsls	r4, r4, #27
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009c7a:	4350      	muls	r0, r2
 8009c7c:	434b      	muls	r3, r1
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009c7e:	0eff      	lsrs	r7, r7, #27
 8009c80:	0ee4      	lsrs	r4, r4, #27
 8009c82:	4379      	muls	r1, r7
 8009c84:	4362      	muls	r2, r4
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009c86:	181b      	adds	r3, r3, r0
 8009c88:	4809      	ldr	r0, [pc, #36]	; (8009cb0 <grad_get+0x98>)
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009c8a:	3680      	adds	r6, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009c8c:	188a      	adds	r2, r1, r2
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009c8e:	4346      	muls	r6, r0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009c90:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009c92:	3280      	adds	r2, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009c94:	4343      	muls	r3, r0
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009c96:	4350      	muls	r0, r2
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009c98:	00f6      	lsls	r6, r6, #3
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009c9a:	3de0      	subs	r5, #224	; 0xe0
 8009c9c:	0ddb      	lsrs	r3, r3, #23
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009c9e:	0dc0      	lsrs	r0, r0, #23
 8009ca0:	0eb6      	lsrs	r6, r6, #26
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009ca2:	402b      	ands	r3, r5
 8009ca4:	0176      	lsls	r6, r6, #5
 8009ca6:	4028      	ands	r0, r5
 8009ca8:	02db      	lsls	r3, r3, #11
 8009caa:	4330      	orrs	r0, r6
 8009cac:	4318      	orrs	r0, r3
 8009cae:	e7bd      	b.n	8009c2c <grad_get+0x14>
 8009cb0:	00008081 	.word	0x00008081

08009cb4 <lv_draw_rect_dsc_init>:
{
 8009cb4:	b510      	push	{r4, lr}
 8009cb6:	0004      	movs	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 8009cb8:	2154      	movs	r1, #84	; 0x54
 8009cba:	f002 fb07 	bl	800c2cc <_lv_memset_00>
    dsc->bg_color = LV_COLOR_WHITE;
 8009cbe:	4b0f      	ldr	r3, [pc, #60]	; (8009cfc <lv_draw_rect_dsc_init+0x48>)
    dsc->bg_grad_color = LV_COLOR_BLACK;
 8009cc0:	2200      	movs	r2, #0
    dsc->bg_color = LV_COLOR_WHITE;
 8009cc2:	881b      	ldrh	r3, [r3, #0]
    dsc->bg_grad_color = LV_COLOR_BLACK;
 8009cc4:	80a2      	strh	r2, [r4, #4]
    dsc->bg_color = LV_COLOR_WHITE;
 8009cc6:	8063      	strh	r3, [r4, #2]
    dsc->value_color = LV_COLOR_BLACK;
 8009cc8:	0023      	movs	r3, r4
 8009cca:	3308      	adds	r3, #8
    dsc->border_color = LV_COLOR_BLACK;
 8009ccc:	81e2      	strh	r2, [r4, #14]
    dsc->value_color = LV_COLOR_BLACK;
 8009cce:	87da      	strh	r2, [r3, #62]	; 0x3e
    dsc->shadow_color = LV_COLOR_BLACK;
 8009cd0:	8422      	strh	r2, [r4, #32]
    dsc->pattern_recolor = LV_COLOR_BLACK;
 8009cd2:	86a2      	strh	r2, [r4, #52]	; 0x34
 8009cd4:	0022      	movs	r2, r4
    dsc->bg_grad_color_stop = 0xFF;
 8009cd6:	23ff      	movs	r3, #255	; 0xff
    dsc->value_opa = LV_OPA_COVER;
 8009cd8:	0021      	movs	r1, r4
    dsc->pattern_recolor = LV_COLOR_BLACK;
 8009cda:	3236      	adds	r2, #54	; 0x36
    dsc->bg_grad_color_stop = 0xFF;
 8009cdc:	8163      	strh	r3, [r4, #10]
    dsc->bg_opa = LV_OPA_COVER;
 8009cde:	7323      	strb	r3, [r4, #12]
    dsc->outline_opa = LV_OPA_COVER;
 8009ce0:	77a3      	strb	r3, [r4, #30]
    dsc->border_opa = LV_OPA_COVER;
 8009ce2:	7523      	strb	r3, [r4, #20]
    dsc->pattern_recolor = LV_COLOR_BLACK;
 8009ce4:	7013      	strb	r3, [r2, #0]
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
 8009ce6:	4a06      	ldr	r2, [pc, #24]	; (8009d00 <lv_draw_rect_dsc_init+0x4c>)
    dsc->value_opa = LV_OPA_COVER;
 8009ce8:	3144      	adds	r1, #68	; 0x44
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
 8009cea:	6322      	str	r2, [r4, #48]	; 0x30
    dsc->value_opa = LV_OPA_COVER;
 8009cec:	700b      	strb	r3, [r1, #0]
    dsc->value_font = LV_THEME_DEFAULT_FONT_NORMAL;
 8009cee:	6422      	str	r2, [r4, #64]	; 0x40
    dsc->shadow_opa = LV_OPA_COVER;
 8009cf0:	0022      	movs	r2, r4
 8009cf2:	322a      	adds	r2, #42	; 0x2a
 8009cf4:	7013      	strb	r3, [r2, #0]
    dsc->border_side = LV_BORDER_SIDE_FULL;
 8009cf6:	3bf0      	subs	r3, #240	; 0xf0
 8009cf8:	8263      	strh	r3, [r4, #18]
}
 8009cfa:	bd10      	pop	{r4, pc}
 8009cfc:	0800e084 	.word	0x0800e084
 8009d00:	20000028 	.word	0x20000028

08009d04 <lv_draw_rect>:
{
 8009d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009d06:	88c3      	ldrh	r3, [r0, #6]
 8009d08:	0016      	movs	r6, r2
 8009d0a:	8842      	ldrh	r2, [r0, #2]
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	1a9b      	subs	r3, r3, r2
 8009d10:	b0ad      	sub	sp, #180	; 0xb4
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 8009d12:	b21b      	sxth	r3, r3
{
 8009d14:	0007      	movs	r7, r0
 8009d16:	9104      	str	r1, [sp, #16]
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	dc00      	bgt.n	8009d1e <lv_draw_rect+0x1a>
 8009d1c:	e1fe      	b.n	800a11c <lv_draw_rect+0x418>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009d1e:	8883      	ldrh	r3, [r0, #4]
 8009d20:	8802      	ldrh	r2, [r0, #0]
 8009d22:	3301      	adds	r3, #1
 8009d24:	1a9b      	subs	r3, r3, r2
 8009d26:	b21b      	sxth	r3, r3
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	dc00      	bgt.n	8009d2e <lv_draw_rect+0x2a>
 8009d2c:	e1f6      	b.n	800a11c <lv_draw_rect+0x418>
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 8009d2e:	7b33      	ldrb	r3, [r6, #12]
 8009d30:	9305      	str	r3, [sp, #20]
 8009d32:	2b02      	cmp	r3, #2
 8009d34:	d800      	bhi.n	8009d38 <lv_draw_rect+0x34>
 8009d36:	e09e      	b.n	8009e76 <lv_draw_rect+0x172>
 8009d38:	2300      	movs	r3, #0
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
 8009d3a:	aa18      	add	r2, sp, #96	; 0x60
 8009d3c:	5cf9      	ldrb	r1, [r7, r3]
 8009d3e:	5499      	strb	r1, [r3, r2]
 8009d40:	3301      	adds	r3, #1
    while(len) {
 8009d42:	2b08      	cmp	r3, #8
 8009d44:	d1fa      	bne.n	8009d3c <lv_draw_rect+0x38>
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
 8009d46:	2110      	movs	r1, #16
 8009d48:	5e73      	ldrsh	r3, [r6, r1]
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	dd1b      	ble.n	8009d86 <lv_draw_rect+0x82>
 8009d4e:	7d33      	ldrb	r3, [r6, #20]
 8009d50:	2bfc      	cmp	r3, #252	; 0xfc
 8009d52:	d918      	bls.n	8009d86 <lv_draw_rect+0x82>
 8009d54:	2100      	movs	r1, #0
 8009d56:	5e73      	ldrsh	r3, [r6, r1]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d014      	beq.n	8009d86 <lv_draw_rect+0x82>
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 8009d5c:	2001      	movs	r0, #1
 8009d5e:	8a73      	ldrh	r3, [r6, #18]
 8009d60:	8814      	ldrh	r4, [r2, #0]
 8009d62:	1099      	asrs	r1, r3, #2
 8009d64:	4001      	ands	r1, r0
 8009d66:	1909      	adds	r1, r1, r4
 8009d68:	8011      	strh	r1, [r2, #0]
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 8009d6a:	8854      	ldrh	r4, [r2, #2]
 8009d6c:	1059      	asrs	r1, r3, #1
 8009d6e:	4001      	ands	r1, r0
 8009d70:	1909      	adds	r1, r1, r4
 8009d72:	8051      	strh	r1, [r2, #2]
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 8009d74:	10dc      	asrs	r4, r3, #3
 8009d76:	8891      	ldrh	r1, [r2, #4]
 8009d78:	4004      	ands	r4, r0
 8009d7a:	1b09      	subs	r1, r1, r4
 8009d7c:	8091      	strh	r1, [r2, #4]
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 8009d7e:	88d1      	ldrh	r1, [r2, #6]
 8009d80:	4003      	ands	r3, r0
 8009d82:	1acb      	subs	r3, r1, r3
 8009d84:	80d3      	strh	r3, [r2, #6]
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8009d86:	9b05      	ldr	r3, [sp, #20]
 8009d88:	2bfd      	cmp	r3, #253	; 0xfd
 8009d8a:	d901      	bls.n	8009d90 <lv_draw_rect+0x8c>
 8009d8c:	23ff      	movs	r3, #255	; 0xff
 8009d8e:	9305      	str	r3, [sp, #20]
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 8009d90:	f7fc f80e 	bl	8005db0 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8009d94:	f001 fb66 	bl	800b464 <lv_disp_get_buf>
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
 8009d98:	ac1a      	add	r4, sp, #104	; 0x68
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8009d9a:	9009      	str	r0, [sp, #36]	; 0x24
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
 8009d9c:	9a04      	ldr	r2, [sp, #16]
 8009d9e:	a918      	add	r1, sp, #96	; 0x60
 8009da0:	0020      	movs	r0, r4
 8009da2:	f001 fc52 	bl	800b64a <_lv_area_intersect>
    if(is_common == false) return;
 8009da6:	2800      	cmp	r0, #0
 8009da8:	d065      	beq.n	8009e76 <lv_draw_rect+0x172>
    draw_area.x1 -= disp_area->x1;
 8009daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    draw_area.y1 -= disp_area->y1;
 8009dac:	8860      	ldrh	r0, [r4, #2]
    draw_area.x1 -= disp_area->x1;
 8009dae:	8a1d      	ldrh	r5, [r3, #16]
 8009db0:	8823      	ldrh	r3, [r4, #0]
 8009db2:	1b5b      	subs	r3, r3, r5
 8009db4:	b29a      	uxth	r2, r3
    draw_area.y1 -= disp_area->y1;
 8009db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    draw_area.x1 -= disp_area->x1;
 8009db8:	8022      	strh	r2, [r4, #0]
    draw_area.y1 -= disp_area->y1;
 8009dba:	8a59      	ldrh	r1, [r3, #18]
    draw_area.x2 -= disp_area->x1;
 8009dbc:	88a3      	ldrh	r3, [r4, #4]
    draw_area.y1 -= disp_area->y1;
 8009dbe:	1a40      	subs	r0, r0, r1
    draw_area.x2 -= disp_area->x1;
 8009dc0:	1b5b      	subs	r3, r3, r5
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	80a3      	strh	r3, [r4, #4]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	1a9b      	subs	r3, r3, r2
    draw_area.y1 -= disp_area->y1;
 8009dca:	8060      	strh	r0, [r4, #2]
    draw_area.y2 -= disp_area->y1;
 8009dcc:	88e0      	ldrh	r0, [r4, #6]
 8009dce:	b21b      	sxth	r3, r3
 8009dd0:	1a41      	subs	r1, r0, r1
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 8009dd2:	0018      	movs	r0, r3
 8009dd4:	930d      	str	r3, [sp, #52]	; 0x34
    draw_area.y2 -= disp_area->y1;
 8009dd6:	80e1      	strh	r1, [r4, #6]
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 8009dd8:	f002 f9f0 	bl	800c1bc <_lv_mem_buf_get>
 8009ddc:	9008      	str	r0, [sp, #32]
    lv_grad_dir_t grad_dir = dsc->bg_grad_dir;
 8009dde:	79b3      	ldrb	r3, [r6, #6]
 8009de0:	9306      	str	r3, [sp, #24]
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
 8009de2:	8872      	ldrh	r2, [r6, #2]
 8009de4:	88b3      	ldrh	r3, [r6, #4]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d101      	bne.n	8009dee <lv_draw_rect+0xea>
 8009dea:	2300      	movs	r3, #0
 8009dec:	9306      	str	r3, [sp, #24]
    uint16_t other_mask_cnt = lv_draw_mask_get_cnt();
 8009dee:	f7ff fe45 	bl	8009a7c <lv_draw_mask_get_cnt>
 8009df2:	b283      	uxth	r3, r0
 8009df4:	9310      	str	r3, [sp, #64]	; 0x40
    if(other_mask_cnt) simple_mode = false;
 8009df6:	2300      	movs	r3, #0
 8009df8:	930e      	str	r3, [sp, #56]	; 0x38
 8009dfa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d105      	bne.n	8009e0c <lv_draw_rect+0x108>
    else if(grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
 8009e00:	9b06      	ldr	r3, [sp, #24]
 8009e02:	3b02      	subs	r3, #2
 8009e04:	1e5a      	subs	r2, r3, #1
 8009e06:	4193      	sbcs	r3, r2
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	930e      	str	r3, [sp, #56]	; 0x38
    int32_t coords_w = lv_area_get_width(&coords_bg);
 8009e0c:	a918      	add	r1, sp, #96	; 0x60
 8009e0e:	888c      	ldrh	r4, [r1, #4]
 8009e10:	880b      	ldrh	r3, [r1, #0]
 8009e12:	3401      	adds	r4, #1
 8009e14:	1ae4      	subs	r4, r4, r3
    int32_t rout = dsc->radius;
 8009e16:	2300      	movs	r3, #0
 8009e18:	5ef2      	ldrsh	r2, [r6, r3]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009e1a:	88cb      	ldrh	r3, [r1, #6]
 8009e1c:	8848      	ldrh	r0, [r1, #2]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	1a1b      	subs	r3, r3, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009e22:	b224      	sxth	r4, r4
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
 8009e24:	b21b      	sxth	r3, r3
 8009e26:	42a3      	cmp	r3, r4
 8009e28:	dd00      	ble.n	8009e2c <lv_draw_rect+0x128>
 8009e2a:	0023      	movs	r3, r4
    if(rout > short_side >> 1) rout = short_side >> 1;
 8009e2c:	105b      	asrs	r3, r3, #1
 8009e2e:	9307      	str	r3, [sp, #28]
 8009e30:	4293      	cmp	r3, r2
 8009e32:	dd00      	ble.n	8009e36 <lv_draw_rect+0x132>
 8009e34:	9207      	str	r2, [sp, #28]
    if(simple_mode && rout == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 8009e36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d100      	bne.n	8009e3e <lv_draw_rect+0x13a>
 8009e3c:	e170      	b.n	800a120 <lv_draw_rect+0x41c>
 8009e3e:	9b07      	ldr	r3, [sp, #28]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d000      	beq.n	8009e46 <lv_draw_rect+0x142>
 8009e44:	e16c      	b.n	800a120 <lv_draw_rect+0x41c>
 8009e46:	9b06      	ldr	r3, [sp, #24]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d000      	beq.n	8009e4e <lv_draw_rect+0x14a>
 8009e4c:	e208      	b.n	800a260 <lv_draw_rect+0x55c>
        _lv_blend_fill(clip, &coords_bg,
 8009e4e:	7b73      	ldrb	r3, [r6, #13]
 8009e50:	9804      	ldr	r0, [sp, #16]
 8009e52:	9302      	str	r3, [sp, #8]
 8009e54:	9b05      	ldr	r3, [sp, #20]
 8009e56:	9301      	str	r3, [sp, #4]
 8009e58:	2301      	movs	r3, #1
 8009e5a:	9300      	str	r3, [sp, #0]
 8009e5c:	8872      	ldrh	r2, [r6, #2]
 8009e5e:	9b06      	ldr	r3, [sp, #24]
 8009e60:	f7fc fe8e 	bl	8006b80 <_lv_blend_fill>
    int16_t mask_rout_id = LV_MASK_ID_INV;
 8009e64:	2301      	movs	r3, #1
 8009e66:	425b      	negs	r3, r3
 8009e68:	9312      	str	r3, [sp, #72]	; 0x48
    lv_draw_mask_remove_id(mask_rout_id);
 8009e6a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009e6c:	f7ff fde4 	bl	8009a38 <lv_draw_mask_remove_id>
    _lv_mem_buf_release(mask_buf);
 8009e70:	9808      	ldr	r0, [sp, #32]
 8009e72:	f002 f8ab 	bl	800bfcc <_lv_mem_buf_release>
    if(dsc->border_opa <= LV_OPA_MIN) return;
 8009e76:	7d33      	ldrb	r3, [r6, #20]
 8009e78:	9305      	str	r3, [sp, #20]
 8009e7a:	2b02      	cmp	r3, #2
 8009e7c:	d800      	bhi.n	8009e80 <lv_draw_rect+0x17c>
 8009e7e:	e14d      	b.n	800a11c <lv_draw_rect+0x418>
    if(dsc->border_width == 0) return;
 8009e80:	2210      	movs	r2, #16
 8009e82:	5eb3      	ldrsh	r3, [r6, r2]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d100      	bne.n	8009e8a <lv_draw_rect+0x186>
 8009e88:	e148      	b.n	800a11c <lv_draw_rect+0x418>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 8009e8a:	2112      	movs	r1, #18
 8009e8c:	5e72      	ldrsh	r2, [r6, r1]
 8009e8e:	4694      	mov	ip, r2
 8009e90:	2a00      	cmp	r2, #0
 8009e92:	d100      	bne.n	8009e96 <lv_draw_rect+0x192>
 8009e94:	e142      	b.n	800a11c <lv_draw_rect+0x418>
    if(dsc->border_post) return;
 8009e96:	7db2      	ldrb	r2, [r6, #22]
 8009e98:	07d2      	lsls	r2, r2, #31
 8009e9a:	d500      	bpl.n	8009e9e <lv_draw_rect+0x19a>
 8009e9c:	e13e      	b.n	800a11c <lv_draw_rect+0x418>
    int32_t rout = dsc->radius;
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	5e72      	ldrsh	r2, [r6, r1]
 8009ea2:	88bc      	ldrh	r4, [r7, #4]
 8009ea4:	9207      	str	r2, [sp, #28]
 8009ea6:	883a      	ldrh	r2, [r7, #0]
 8009ea8:	3401      	adds	r4, #1
 8009eaa:	1aa4      	subs	r4, r4, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009eac:	88fa      	ldrh	r2, [r7, #6]
 8009eae:	8879      	ldrh	r1, [r7, #2]
 8009eb0:	3201      	adds	r2, #1
 8009eb2:	1a52      	subs	r2, r2, r1
    int32_t coords_h = lv_area_get_height(coords);
 8009eb4:	b212      	sxth	r2, r2
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
 8009eb6:	b224      	sxth	r4, r4
 8009eb8:	4294      	cmp	r4, r2
 8009eba:	dd00      	ble.n	8009ebe <lv_draw_rect+0x1ba>
 8009ebc:	0014      	movs	r4, r2
 8009ebe:	9a07      	ldr	r2, [sp, #28]
    if(rout > short_side >> 1) rout = short_side >> 1;
 8009ec0:	1064      	asrs	r4, r4, #1
 8009ec2:	4294      	cmp	r4, r2
 8009ec4:	dd00      	ble.n	8009ec8 <lv_draw_rect+0x1c4>
 8009ec6:	0014      	movs	r4, r2
 8009ec8:	2200      	movs	r2, #0
        *d8 = *s8;
 8009eca:	a916      	add	r1, sp, #88	; 0x58
 8009ecc:	5cb8      	ldrb	r0, [r7, r2]
 8009ece:	5450      	strb	r0, [r2, r1]
 8009ed0:	3201      	adds	r2, #1
    while(len) {
 8009ed2:	2a08      	cmp	r2, #8
 8009ed4:	d1fa      	bne.n	8009ecc <lv_draw_rect+0x1c8>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 8009ed6:	4662      	mov	r2, ip
 8009ed8:	880d      	ldrh	r5, [r1, #0]
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	b291      	uxth	r1, r2
 8009ede:	001a      	movs	r2, r3
 8009ee0:	0748      	lsls	r0, r1, #29
 8009ee2:	d402      	bmi.n	8009eea <lv_draw_rect+0x1e6>
 8009ee4:	191a      	adds	r2, r3, r4
 8009ee6:	4252      	negs	r2, r2
 8009ee8:	b292      	uxth	r2, r2
 8009eea:	a816      	add	r0, sp, #88	; 0x58
 8009eec:	18aa      	adds	r2, r5, r2
 8009eee:	8002      	strh	r2, [r0, #0]
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 8009ef0:	8882      	ldrh	r2, [r0, #4]
 8009ef2:	9206      	str	r2, [sp, #24]
 8009ef4:	001a      	movs	r2, r3
 8009ef6:	070d      	lsls	r5, r1, #28
 8009ef8:	d402      	bmi.n	8009f00 <lv_draw_rect+0x1fc>
 8009efa:	191a      	adds	r2, r3, r4
 8009efc:	4252      	negs	r2, r2
 8009efe:	b292      	uxth	r2, r2
 8009f00:	9d06      	ldr	r5, [sp, #24]
 8009f02:	1aaa      	subs	r2, r5, r2
 8009f04:	8082      	strh	r2, [r0, #4]
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 8009f06:	8840      	ldrh	r0, [r0, #2]
 8009f08:	001a      	movs	r2, r3
 8009f0a:	078d      	lsls	r5, r1, #30
 8009f0c:	d402      	bmi.n	8009f14 <lv_draw_rect+0x210>
 8009f0e:	191a      	adds	r2, r3, r4
 8009f10:	4252      	negs	r2, r2
 8009f12:	b292      	uxth	r2, r2
 8009f14:	ad16      	add	r5, sp, #88	; 0x58
 8009f16:	1882      	adds	r2, r0, r2
 8009f18:	806a      	strh	r2, [r5, #2]
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 8009f1a:	88ea      	ldrh	r2, [r5, #6]
 8009f1c:	07c9      	lsls	r1, r1, #31
 8009f1e:	d402      	bmi.n	8009f26 <lv_draw_rect+0x222>
 8009f20:	191b      	adds	r3, r3, r4
 8009f22:	425b      	negs	r3, r3
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	1ad3      	subs	r3, r2, r3
 8009f28:	80eb      	strh	r3, [r5, #6]
    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
 8009f2a:	4663      	mov	r3, ip
 8009f2c:	2b0f      	cmp	r3, #15
 8009f2e:	d001      	beq.n	8009f34 <lv_draw_rect+0x230>
 8009f30:	f000 fbb1 	bl	800a696 <lv_draw_rect+0x992>
 8009f34:	466a      	mov	r2, sp
        draw_full_border(&area_inner, coords, clip, dsc->radius, false, dsc->border_color, dsc->border_opa,
 8009f36:	7d73      	ldrb	r3, [r6, #21]
 8009f38:	9309      	str	r3, [sp, #36]	; 0x24
 8009f3a:	89f3      	ldrh	r3, [r6, #14]
 8009f3c:	8593      	strh	r3, [r2, #44]	; 0x2c
 8009f3e:	9310      	str	r3, [sp, #64]	; 0x40
#endif

static void draw_full_border(const lv_area_t * area_inner, const lv_area_t * area_outer, const lv_area_t * clip,
                             lv_coord_t radius, bool radius_is_in, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 8009f40:	f7ff fd9c 	bl	8009a7c <lv_draw_mask_get_cnt>
 8009f44:	900f      	str	r0, [sp, #60]	; 0x3c
    bool simple_mode = true;
    if(other_mask_cnt) simple_mode = false;

    int32_t inner_w = lv_area_get_width(area_inner);
    int32_t inner_h = lv_area_get_height(area_inner);
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
 8009f46:	2304      	movs	r3, #4
 8009f48:	5efc      	ldrsh	r4, [r7, r3]
    int32_t inner_w = lv_area_get_width(area_inner);
 8009f4a:	2304      	movs	r3, #4
 8009f4c:	5eee      	ldrsh	r6, [r5, r3]

    int32_t coords_out_w = lv_area_get_width(area_outer);
 8009f4e:	2200      	movs	r2, #0
 8009f50:	5ebb      	ldrsh	r3, [r7, r2]
 8009f52:	9308      	str	r3, [sp, #32]
    int32_t coords_out_h = lv_area_get_height(area_outer);
 8009f54:	2202      	movs	r2, #2
 8009f56:	5ebb      	ldrsh	r3, [r7, r2]
 8009f58:	930a      	str	r3, [sp, #40]	; 0x28
 8009f5a:	2306      	movs	r3, #6
 8009f5c:	5efd      	ldrsh	r5, [r7, r3]
        rin = rout - border_width;
        if(rin < 0) rin = 0;

    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 8009f5e:	f7fb ff27 	bl	8005db0 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8009f62:	f001 fa7f 	bl	800b464 <lv_disp_get_buf>

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
 8009f66:	9a04      	ldr	r2, [sp, #16]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8009f68:	9006      	str	r0, [sp, #24]
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
 8009f6a:	0039      	movs	r1, r7
 8009f6c:	a818      	add	r0, sp, #96	; 0x60
 8009f6e:	f001 fb6c 	bl	800b64a <_lv_area_intersect>
    if(is_common == false) return;
 8009f72:	2800      	cmp	r0, #0
 8009f74:	d100      	bne.n	8009f78 <lv_draw_rect+0x274>
 8009f76:	e0d1      	b.n	800a11c <lv_draw_rect+0x418>
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
 8009f78:	b2a4      	uxth	r4, r4
 8009f7a:	1ba6      	subs	r6, r4, r6
 8009f7c:	b2b3      	uxth	r3, r6
 8009f7e:	930e      	str	r3, [sp, #56]	; 0x38
 8009f80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009f82:	9b08      	ldr	r3, [sp, #32]
 8009f84:	3401      	adds	r4, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009f86:	3501      	adds	r5, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009f88:	1ae3      	subs	r3, r4, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009f8a:	1aad      	subs	r5, r5, r2
    int32_t coords_out_h = lv_area_get_height(area_outer);
 8009f8c:	b22d      	sxth	r5, r5
        int32_t short_side = LV_MATH_MIN(coords_out_w, coords_out_h);
 8009f8e:	b21b      	sxth	r3, r3
 8009f90:	42ab      	cmp	r3, r5
 8009f92:	dd00      	ble.n	8009f96 <lv_draw_rect+0x292>
 8009f94:	002b      	movs	r3, r5
 8009f96:	9a07      	ldr	r2, [sp, #28]
        if(rout > short_side >> 1) rout = short_side >> 1;
 8009f98:	105b      	asrs	r3, r3, #1
 8009f9a:	9308      	str	r3, [sp, #32]
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	dd00      	ble.n	8009fa2 <lv_draw_rect+0x29e>
 8009fa0:	9208      	str	r2, [sp, #32]
        rin = rout - border_width;
 8009fa2:	466b      	mov	r3, sp
 8009fa4:	2238      	movs	r2, #56	; 0x38
 8009fa6:	5e9b      	ldrsh	r3, [r3, r2]

    const lv_area_t * disp_area = &vdb->area;

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
 8009fa8:	aa18      	add	r2, sp, #96	; 0x60
        rin = rout - border_width;
 8009faa:	930c      	str	r3, [sp, #48]	; 0x30
    draw_area.x1 -= disp_area->x1;
 8009fac:	9b06      	ldr	r3, [sp, #24]
 8009fae:	8a18      	ldrh	r0, [r3, #16]
 8009fb0:	8813      	ldrh	r3, [r2, #0]
 8009fb2:	1a1b      	subs	r3, r3, r0
 8009fb4:	b299      	uxth	r1, r3
    draw_area.y1 -= disp_area->y1;
 8009fb6:	9b06      	ldr	r3, [sp, #24]
    draw_area.x1 -= disp_area->x1;
 8009fb8:	8011      	strh	r1, [r2, #0]
    draw_area.y1 -= disp_area->y1;
 8009fba:	8a5c      	ldrh	r4, [r3, #18]
 8009fbc:	8853      	ldrh	r3, [r2, #2]
 8009fbe:	1b1b      	subs	r3, r3, r4
 8009fc0:	8053      	strh	r3, [r2, #2]
    draw_area.x2 -= disp_area->x1;
 8009fc2:	8893      	ldrh	r3, [r2, #4]
 8009fc4:	1a1b      	subs	r3, r3, r0
 8009fc6:	b29b      	uxth	r3, r3
    draw_area.y2 -= disp_area->y1;
 8009fc8:	88d0      	ldrh	r0, [r2, #6]
    draw_area.x2 -= disp_area->x1;
 8009fca:	8093      	strh	r3, [r2, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009fcc:	3301      	adds	r3, #1
 8009fce:	1a5b      	subs	r3, r3, r1
    draw_area.y2 -= disp_area->y1;
 8009fd0:	1b00      	subs	r0, r0, r4
 8009fd2:	b21b      	sxth	r3, r3
 8009fd4:	80d0      	strh	r0, [r2, #6]
 8009fd6:	930a      	str	r3, [sp, #40]	; 0x28
        rin = rout - border_width;
 8009fd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fda:	9b08      	ldr	r3, [sp, #32]

    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Create inner the mask*/
    lv_draw_mask_radius_param_t mask_rin_param;
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
 8009fdc:	a916      	add	r1, sp, #88	; 0x58
        rin = rout - border_width;
 8009fde:	1a9a      	subs	r2, r3, r2
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
 8009fe0:	43d3      	mvns	r3, r2
 8009fe2:	17db      	asrs	r3, r3, #31
 8009fe4:	401a      	ands	r2, r3
 8009fe6:	b212      	sxth	r2, r2
 8009fe8:	2301      	movs	r3, #1
 8009fea:	a81e      	add	r0, sp, #120	; 0x78
 8009fec:	f7ff fde4 	bl	8009bb8 <lv_draw_mask_radius_init>
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	a81e      	add	r0, sp, #120	; 0x78
 8009ff4:	f7ff fcea 	bl	80099cc <lv_draw_mask_add>

    lv_draw_mask_radius_param_t mask_rout_param;
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
 8009ff8:	466b      	mov	r3, sp
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 8009ffa:	9012      	str	r0, [sp, #72]	; 0x48
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
 8009ffc:	2220      	movs	r2, #32
 8009ffe:	5e9a      	ldrsh	r2, [r3, r2]
 800a000:	0039      	movs	r1, r7
 800a002:	2300      	movs	r3, #0
 800a004:	a825      	add	r0, sp, #148	; 0x94
 800a006:	f7ff fdd7 	bl	8009bb8 <lv_draw_mask_radius_init>
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800a00a:	2100      	movs	r1, #0
 800a00c:	a825      	add	r0, sp, #148	; 0x94
 800a00e:	f7ff fcdd 	bl	80099cc <lv_draw_mask_add>
 800a012:	9013      	str	r0, [sp, #76]	; 0x4c

    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800a014:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a016:	f002 f8d1 	bl	800c1bc <_lv_mem_buf_get>

    int32_t corner_size = LV_MATH_MAX(rout, border_width - 1);
 800a01a:	9b08      	ldr	r3, [sp, #32]
 800a01c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800a01e:	9007      	str	r0, [sp, #28]
    int32_t corner_size = LV_MATH_MAX(rout, border_width - 1);
 800a020:	930d      	str	r3, [sp, #52]	; 0x34
 800a022:	4293      	cmp	r3, r2
 800a024:	da02      	bge.n	800a02c <lv_draw_rect+0x328>
 800a026:	0013      	movs	r3, r2
 800a028:	3b01      	subs	r3, #1
 800a02a:	930d      	str	r3, [sp, #52]	; 0x34
 800a02c:	2304      	movs	r3, #4
 800a02e:	5efa      	ldrsh	r2, [r7, r3]
 800a030:	2300      	movs	r3, #0
 800a032:	5efd      	ldrsh	r5, [r7, r3]
 800a034:	9b06      	ldr	r3, [sp, #24]
    int32_t h;
    lv_draw_mask_res_t mask_res;
    lv_area_t fill_area;

    /*Apply some optimization if there is no other mask*/
    if(simple_mode) {
 800a036:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a038:	2612      	movs	r6, #18
 800a03a:	5f9e      	ldrsh	r6, [r3, r6]
 800a03c:	ab18      	add	r3, sp, #96	; 0x60
 800a03e:	2402      	movs	r4, #2
 800a040:	5f1c      	ldrsh	r4, [r3, r4]
 800a042:	4694      	mov	ip, r2
 800a044:	1932      	adds	r2, r6, r4
 800a046:	b212      	sxth	r2, r2
 800a048:	ab1a      	add	r3, sp, #104	; 0x68
 800a04a:	2900      	cmp	r1, #0
 800a04c:	d000      	beq.n	800a050 <lv_draw_rect+0x34c>
 800a04e:	e2f2      	b.n	800a636 <lv_draw_rect+0x932>
        /*Draw the upper corner area*/
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
 800a050:	2002      	movs	r0, #2
 800a052:	5e39      	ldrsh	r1, [r7, r0]

        fill_area.x1 = area_outer->x1;
 800a054:	801d      	strh	r5, [r3, #0]
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
 800a056:	1b89      	subs	r1, r1, r6
 800a058:	9e0d      	ldr	r6, [sp, #52]	; 0x34
        fill_area.x2 = area_outer->x2;
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800a05a:	805a      	strh	r2, [r3, #2]
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
 800a05c:	1989      	adds	r1, r1, r6
 800a05e:	910f      	str	r1, [sp, #60]	; 0x3c
        fill_area.x2 = area_outer->x2;
 800a060:	4661      	mov	r1, ip
        fill_area.y2 = fill_area.y1;
 800a062:	80da      	strh	r2, [r3, #6]
        fill_area.x2 = area_outer->x2;
 800a064:	8099      	strh	r1, [r3, #4]
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
 800a066:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a068:	42a3      	cmp	r3, r4
 800a06a:	db00      	blt.n	800a06e <lv_draw_rect+0x36a>
 800a06c:	e201      	b.n	800a472 <lv_draw_rect+0x76e>
            fill_area.y1++;
            fill_area.y2++;
        }

        /*Draw the lower corner area */
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
 800a06e:	9b06      	ldr	r3, [sp, #24]
 800a070:	2206      	movs	r2, #6
 800a072:	5ebc      	ldrsh	r4, [r7, r2]
 800a074:	2212      	movs	r2, #18
 800a076:	5e9b      	ldrsh	r3, [r3, r2]
 800a078:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a07a:	1ae4      	subs	r4, r4, r3
 800a07c:	1aa4      	subs	r4, r4, r2
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
 800a07e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a080:	42a2      	cmp	r2, r4
 800a082:	db01      	blt.n	800a088 <lv_draw_rect+0x384>
 800a084:	0014      	movs	r4, r2
 800a086:	3401      	adds	r4, #1
        fill_area.y1 = disp_area->y1 + lower_corner_end;
 800a088:	191b      	adds	r3, r3, r4
 800a08a:	b21b      	sxth	r3, r3
 800a08c:	aa1a      	add	r2, sp, #104	; 0x68
 800a08e:	8053      	strh	r3, [r2, #2]
        fill_area.y2 = fill_area.y1;
 800a090:	80d3      	strh	r3, [r2, #6]
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
 800a092:	ad18      	add	r5, sp, #96	; 0x60
 800a094:	2206      	movs	r2, #6
 800a096:	5eab      	ldrsh	r3, [r5, r2]
 800a098:	429c      	cmp	r4, r3
 800a09a:	dc00      	bgt.n	800a09e <lv_draw_rect+0x39a>
 800a09c:	e25a      	b.n	800a554 <lv_draw_rect+0x850>
            fill_area.y1++;
            fill_area.y2++;
        }

        /*Draw the left vertical part*/
        fill_area.y1 = area_outer->y1 + corner_size + 1;
 800a09e:	466b      	mov	r3, sp
 800a0a0:	887a      	ldrh	r2, [r7, #2]
 800a0a2:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 800a0a4:	3201      	adds	r2, #1
 800a0a6:	ac1a      	add	r4, sp, #104	; 0x68
 800a0a8:	188a      	adds	r2, r1, r2
 800a0aa:	8062      	strh	r2, [r4, #2]
        fill_area.y2 = area_outer->y2 - corner_size - 1;
 800a0ac:	88fb      	ldrh	r3, [r7, #6]

        fill_area.x1 = area_outer->x1;
        fill_area.x2 = area_outer->x1 + border_width - 1;
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800a0ae:	2501      	movs	r5, #1
        fill_area.y2 = area_outer->y2 - corner_size - 1;
 800a0b0:	3b01      	subs	r3, #1
 800a0b2:	1a5b      	subs	r3, r3, r1
 800a0b4:	80e3      	strh	r3, [r4, #6]
        fill_area.x1 = area_outer->x1;
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	5ebb      	ldrsh	r3, [r7, r2]
        fill_area.x2 = area_outer->x1 + border_width - 1;
 800a0ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
        fill_area.x1 = area_outer->x1;
 800a0bc:	8023      	strh	r3, [r4, #0]
        fill_area.x2 = area_outer->x1 + border_width - 1;
 800a0be:	3b01      	subs	r3, #1
 800a0c0:	18d3      	adds	r3, r2, r3
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800a0c2:	2140      	movs	r1, #64	; 0x40
 800a0c4:	466a      	mov	r2, sp
        fill_area.x2 = area_outer->x1 + border_width - 1;
 800a0c6:	80a3      	strh	r3, [r4, #4]
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800a0c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ca:	9500      	str	r5, [sp, #0]
 800a0cc:	9302      	str	r3, [sp, #8]
 800a0ce:	9b05      	ldr	r3, [sp, #20]
 800a0d0:	1852      	adds	r2, r2, r1
 800a0d2:	9301      	str	r3, [sp, #4]
 800a0d4:	8812      	ldrh	r2, [r2, #0]
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	0021      	movs	r1, r4
 800a0da:	9804      	ldr	r0, [sp, #16]
 800a0dc:	f7fc fd50 	bl	8006b80 <_lv_blend_fill>

        /*Draw the right vertical border*/
        fill_area.x1 = area_outer->x2 - border_width + 1;
 800a0e0:	2204      	movs	r2, #4
 800a0e2:	5ebb      	ldrsh	r3, [r7, r2]
 800a0e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0e6:	195e      	adds	r6, r3, r5
 800a0e8:	1ab6      	subs	r6, r6, r2
        fill_area.x2 = area_outer->x2;

        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800a0ea:	2140      	movs	r1, #64	; 0x40
 800a0ec:	466a      	mov	r2, sp
        fill_area.x2 = area_outer->x2;
 800a0ee:	80a3      	strh	r3, [r4, #4]
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800a0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
        fill_area.x1 = area_outer->x2 - border_width + 1;
 800a0f2:	8026      	strh	r6, [r4, #0]
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800a0f4:	9302      	str	r3, [sp, #8]
 800a0f6:	9b05      	ldr	r3, [sp, #20]
 800a0f8:	1852      	adds	r2, r2, r1
 800a0fa:	9301      	str	r3, [sp, #4]
 800a0fc:	9500      	str	r5, [sp, #0]
 800a0fe:	2300      	movs	r3, #0
 800a100:	8812      	ldrh	r2, [r2, #0]
 800a102:	0021      	movs	r1, r4
 800a104:	9804      	ldr	r0, [sp, #16]
 800a106:	f7fc fd3b 	bl	8006b80 <_lv_blend_fill>
            fill_area.y1++;
            fill_area.y2++;

        }
    }
    lv_draw_mask_remove_id(mask_rin_id);
 800a10a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a10c:	f7ff fc94 	bl	8009a38 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_rout_id);
 800a110:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800a112:	f7ff fc91 	bl	8009a38 <lv_draw_mask_remove_id>
    _lv_mem_buf_release(mask_buf);
 800a116:	9807      	ldr	r0, [sp, #28]
        _lv_mem_buf_release(mask_buf);
 800a118:	f001 ff58 	bl	800bfcc <_lv_mem_buf_release>
}
 800a11c:	b02d      	add	sp, #180	; 0xb4
 800a11e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(rout > 0) {
 800a120:	9b07      	ldr	r3, [sp, #28]
 800a122:	2b00      	cmp	r3, #0
 800a124:	dc00      	bgt.n	800a128 <lv_draw_rect+0x424>
 800a126:	e09b      	b.n	800a260 <lv_draw_rect+0x55c>
            lv_draw_mask_radius_init(&mask_rout_param, &coords_bg, rout, false);
 800a128:	466b      	mov	r3, sp
 800a12a:	a918      	add	r1, sp, #96	; 0x60
 800a12c:	221c      	movs	r2, #28
 800a12e:	5e9a      	ldrsh	r2, [r3, r2]
 800a130:	a825      	add	r0, sp, #148	; 0x94
 800a132:	2300      	movs	r3, #0
 800a134:	f7ff fd40 	bl	8009bb8 <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800a138:	2100      	movs	r1, #0
 800a13a:	a825      	add	r0, sp, #148	; 0x94
 800a13c:	f7ff fc46 	bl	80099cc <lv_draw_mask_add>
 800a140:	9012      	str	r0, [sp, #72]	; 0x48
        lv_color_t grad_color = dsc->bg_color;
 800a142:	466a      	mov	r2, sp
 800a144:	8873      	ldrh	r3, [r6, #2]
 800a146:	8613      	strh	r3, [r2, #48]	; 0x30
        lv_color_t * grad_map = NULL;
 800a148:	2300      	movs	r3, #0
 800a14a:	930f      	str	r3, [sp, #60]	; 0x3c
        if(grad_dir == LV_GRAD_DIR_HOR) {
 800a14c:	9b06      	ldr	r3, [sp, #24]
 800a14e:	2b02      	cmp	r3, #2
 800a150:	d107      	bne.n	800a162 <lv_draw_rect+0x45e>
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
 800a152:	0060      	lsls	r0, r4, #1
 800a154:	f002 f832 	bl	800c1bc <_lv_mem_buf_get>
            for(i = 0; i < coords_w; i++) {
 800a158:	2500      	movs	r5, #0
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
 800a15a:	900f      	str	r0, [sp, #60]	; 0x3c
            for(i = 0; i < coords_w; i++) {
 800a15c:	42ac      	cmp	r4, r5
 800a15e:	dd00      	ble.n	800a162 <lv_draw_rect+0x45e>
 800a160:	e082      	b.n	800a268 <lv_draw_rect+0x564>
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
 800a162:	ab18      	add	r3, sp, #96	; 0x60
 800a164:	2200      	movs	r2, #0
 800a166:	5e98      	ldrsh	r0, [r3, r2]
 800a168:	2104      	movs	r1, #4
 800a16a:	5e59      	ldrsh	r1, [r3, r1]
 800a16c:	9a07      	ldr	r2, [sp, #28]
 800a16e:	1c4b      	adds	r3, r1, #1
 800a170:	1a1b      	subs	r3, r3, r0
 800a172:	0052      	lsls	r2, r2, #1
 800a174:	b21b      	sxth	r3, r3
 800a176:	1a9b      	subs	r3, r3, r2
        fill_area.x1 = coords_bg.x1;
 800a178:	aa1c      	add	r2, sp, #112	; 0x70
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
 800a17a:	9313      	str	r3, [sp, #76]	; 0x4c
        fill_area.x1 = coords_bg.x1;
 800a17c:	8010      	strh	r0, [r2, #0]
        fill_area.x2 = coords_bg.x2;
 800a17e:	8091      	strh	r1, [r2, #4]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800a180:	ab1a      	add	r3, sp, #104	; 0x68
 800a182:	2102      	movs	r1, #2
 800a184:	5e59      	ldrsh	r1, [r3, r1]
 800a186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a188:	8a5b      	ldrh	r3, [r3, #18]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800a18a:	910b      	str	r1, [sp, #44]	; 0x2c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800a18c:	185b      	adds	r3, r3, r1
 800a18e:	b21b      	sxth	r3, r3
 800a190:	8053      	strh	r3, [r2, #2]
        fill_area.y2 = fill_area.y1;
 800a192:	80d3      	strh	r3, [r2, #6]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800a194:	ac1a      	add	r4, sp, #104	; 0x68
 800a196:	2206      	movs	r2, #6
 800a198:	5ea3      	ldrsh	r3, [r4, r2]
 800a19a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a19c:	429a      	cmp	r2, r3
 800a19e:	dd6d      	ble.n	800a27c <lv_draw_rect+0x578>
        if(grad_dir == LV_GRAD_DIR_NONE && other_mask_cnt == 0 && split) {
 800a1a0:	9b06      	ldr	r3, [sp, #24]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d154      	bne.n	800a250 <lv_draw_rect+0x54c>
 800a1a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d151      	bne.n	800a250 <lv_draw_rect+0x54c>
 800a1ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a1ae:	2b32      	cmp	r3, #50	; 0x32
 800a1b0:	dd4e      	ble.n	800a250 <lv_draw_rect+0x54c>
            fill_area.x1 = coords_bg.x1 + rout;
 800a1b2:	466b      	mov	r3, sp
 800a1b4:	8b9d      	ldrh	r5, [r3, #28]
 800a1b6:	ab10      	add	r3, sp, #64	; 0x40
 800a1b8:	8c1b      	ldrh	r3, [r3, #32]
 800a1ba:	ac1c      	add	r4, sp, #112	; 0x70
 800a1bc:	18eb      	adds	r3, r5, r3
 800a1be:	8023      	strh	r3, [r4, #0]
            fill_area.x2 = coords_bg.x2 - rout;
 800a1c0:	ab10      	add	r3, sp, #64	; 0x40
 800a1c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
            _lv_blend_fill(clip, &fill_area,
 800a1c4:	0021      	movs	r1, r4
            fill_area.x2 = coords_bg.x2 - rout;
 800a1c6:	1b5b      	subs	r3, r3, r5
 800a1c8:	80a3      	strh	r3, [r4, #4]
            fill_area.y1 = coords_bg.y1;
 800a1ca:	ab10      	add	r3, sp, #64	; 0x40
 800a1cc:	2222      	movs	r2, #34	; 0x22
 800a1ce:	5e9b      	ldrsh	r3, [r3, r2]
            _lv_blend_fill(clip, &fill_area,
 800a1d0:	9804      	ldr	r0, [sp, #16]
            fill_area.y1 = coords_bg.y1;
 800a1d2:	8063      	strh	r3, [r4, #2]
            fill_area.y2 = coords_bg.y1 + rout;
 800a1d4:	18eb      	adds	r3, r5, r3
 800a1d6:	80e3      	strh	r3, [r4, #6]
            _lv_blend_fill(clip, &fill_area,
 800a1d8:	7b73      	ldrb	r3, [r6, #13]
 800a1da:	9302      	str	r3, [sp, #8]
 800a1dc:	9b05      	ldr	r3, [sp, #20]
 800a1de:	9301      	str	r3, [sp, #4]
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	9300      	str	r3, [sp, #0]
 800a1e4:	8872      	ldrh	r2, [r6, #2]
 800a1e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a1e8:	f7fc fcca 	bl	8006b80 <_lv_blend_fill>
            fill_area.y1 = coords_bg.y2 - rout;
 800a1ec:	ab10      	add	r3, sp, #64	; 0x40
 800a1ee:	2126      	movs	r1, #38	; 0x26
 800a1f0:	5e59      	ldrsh	r1, [r3, r1]
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
 800a1f2:	2006      	movs	r0, #6
 800a1f4:	5e23      	ldrsh	r3, [r4, r0]
            fill_area.y1 = coords_bg.y2 - rout;
 800a1f6:	1b4a      	subs	r2, r1, r5
 800a1f8:	b212      	sxth	r2, r2
 800a1fa:	8062      	strh	r2, [r4, #2]
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	dc01      	bgt.n	800a204 <lv_draw_rect+0x500>
 800a200:	3301      	adds	r3, #1
 800a202:	8063      	strh	r3, [r4, #2]
            fill_area.y2 = coords_bg.y2;
 800a204:	80e1      	strh	r1, [r4, #6]
            _lv_blend_fill(clip, &fill_area,
 800a206:	7b73      	ldrb	r3, [r6, #13]
 800a208:	0021      	movs	r1, r4
 800a20a:	9302      	str	r3, [sp, #8]
 800a20c:	9b05      	ldr	r3, [sp, #20]
 800a20e:	9804      	ldr	r0, [sp, #16]
 800a210:	9301      	str	r3, [sp, #4]
 800a212:	2301      	movs	r3, #1
 800a214:	9300      	str	r3, [sp, #0]
 800a216:	8872      	ldrh	r2, [r6, #2]
 800a218:	2300      	movs	r3, #0
 800a21a:	f7fc fcb1 	bl	8006b80 <_lv_blend_fill>
            fill_area.x1 = coords_bg.x1;
 800a21e:	aa18      	add	r2, sp, #96	; 0x60
 800a220:	8813      	ldrh	r3, [r2, #0]
            _lv_blend_fill(clip, &fill_area,
 800a222:	0021      	movs	r1, r4
            fill_area.x1 = coords_bg.x1;
 800a224:	8023      	strh	r3, [r4, #0]
            fill_area.x2 = coords_bg.x2;
 800a226:	8893      	ldrh	r3, [r2, #4]
            _lv_blend_fill(clip, &fill_area,
 800a228:	9804      	ldr	r0, [sp, #16]
            fill_area.x2 = coords_bg.x2;
 800a22a:	80a3      	strh	r3, [r4, #4]
            fill_area.y1 = coords_bg.y1 + rout + 1;
 800a22c:	8853      	ldrh	r3, [r2, #2]
 800a22e:	3301      	adds	r3, #1
 800a230:	18eb      	adds	r3, r5, r3
 800a232:	8063      	strh	r3, [r4, #2]
            fill_area.y2 = coords_bg.y2 - rout - 1;
 800a234:	88d3      	ldrh	r3, [r2, #6]
            _lv_blend_fill(clip, &fill_area,
 800a236:	9a05      	ldr	r2, [sp, #20]
            fill_area.y2 = coords_bg.y2 - rout - 1;
 800a238:	3b01      	subs	r3, #1
 800a23a:	1b5d      	subs	r5, r3, r5
 800a23c:	80e5      	strh	r5, [r4, #6]
            _lv_blend_fill(clip, &fill_area,
 800a23e:	7b73      	ldrb	r3, [r6, #13]
 800a240:	9201      	str	r2, [sp, #4]
 800a242:	9302      	str	r3, [sp, #8]
 800a244:	2301      	movs	r3, #1
 800a246:	9300      	str	r3, [sp, #0]
 800a248:	8872      	ldrh	r2, [r6, #2]
 800a24a:	2300      	movs	r3, #0
 800a24c:	f7fc fc98 	bl	8006b80 <_lv_blend_fill>
        if(grad_map) _lv_mem_buf_release(grad_map);
 800a250:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a252:	2b00      	cmp	r3, #0
 800a254:	d100      	bne.n	800a258 <lv_draw_rect+0x554>
 800a256:	e608      	b.n	8009e6a <lv_draw_rect+0x166>
 800a258:	0018      	movs	r0, r3
 800a25a:	f001 feb7 	bl	800bfcc <_lv_mem_buf_release>
 800a25e:	e604      	b.n	8009e6a <lv_draw_rect+0x166>
    int16_t mask_rout_id = LV_MASK_ID_INV;
 800a260:	2301      	movs	r3, #1
 800a262:	425b      	negs	r3, r3
 800a264:	9312      	str	r3, [sp, #72]	; 0x48
 800a266:	e76c      	b.n	800a142 <lv_draw_rect+0x43e>
                grad_map[i] = grad_get(dsc, coords_w, i);
 800a268:	b22a      	sxth	r2, r5
 800a26a:	0021      	movs	r1, r4
 800a26c:	0030      	movs	r0, r6
 800a26e:	f7ff fcd3 	bl	8009c18 <grad_get>
 800a272:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a274:	006b      	lsls	r3, r5, #1
 800a276:	5298      	strh	r0, [r3, r2]
            for(i = 0; i < coords_w; i++) {
 800a278:	3501      	adds	r5, #1
 800a27a:	e76f      	b.n	800a15c <lv_draw_rect+0x458>
            int32_t y = h + vdb->area.y1;
 800a27c:	9b09      	ldr	r3, [sp, #36]	; 0x24
            if(y > coords_bg.y1 + rout + 1 &&
 800a27e:	aa18      	add	r2, sp, #96	; 0x60
            int32_t y = h + vdb->area.y1;
 800a280:	2512      	movs	r5, #18
 800a282:	5f5d      	ldrsh	r5, [r3, r5]
 800a284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a286:	18ed      	adds	r5, r5, r3
            if(y > coords_bg.y1 + rout + 1 &&
 800a288:	2102      	movs	r1, #2
 800a28a:	5e53      	ldrsh	r3, [r2, r1]
 800a28c:	9907      	ldr	r1, [sp, #28]
 800a28e:	185b      	adds	r3, r3, r1
 800a290:	3301      	adds	r3, #1
 800a292:	429d      	cmp	r5, r3
 800a294:	dc00      	bgt.n	800a298 <lv_draw_rect+0x594>
 800a296:	e0a5      	b.n	800a3e4 <lv_draw_rect+0x6e0>
               y < coords_bg.y2 - rout - 1) {
 800a298:	2306      	movs	r3, #6
 800a29a:	5ed3      	ldrsh	r3, [r2, r3]
 800a29c:	1a5b      	subs	r3, r3, r1
 800a29e:	3b01      	subs	r3, #1
            if(y > coords_bg.y1 + rout + 1 &&
 800a2a0:	429d      	cmp	r5, r3
 800a2a2:	db00      	blt.n	800a2a6 <lv_draw_rect+0x5a2>
 800a2a4:	e09e      	b.n	800a3e4 <lv_draw_rect+0x6e0>
                if(simple_mode == false) {
 800a2a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d000      	beq.n	800a2ae <lv_draw_rect+0x5aa>
 800a2ac:	e2e5      	b.n	800a87a <lv_draw_rect+0xb76>
                    _lv_memset(mask_buf, opa, draw_area_w);
 800a2ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2b0:	9905      	ldr	r1, [sp, #20]
 800a2b2:	9808      	ldr	r0, [sp, #32]
 800a2b4:	f001 ffde 	bl	800c274 <_lv_memset>
                    mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800a2b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ba:	8a5a      	ldrh	r2, [r3, #18]
 800a2bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2be:	18d2      	adds	r2, r2, r3
 800a2c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2c2:	b212      	sxth	r2, r2
 800a2c4:	8a19      	ldrh	r1, [r3, #16]
 800a2c6:	8823      	ldrh	r3, [r4, #0]
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800a2c8:	18c9      	adds	r1, r1, r3
 800a2ca:	b209      	sxth	r1, r1
 800a2cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2ce:	9808      	ldr	r0, [sp, #32]
 800a2d0:	f7ff fb92 	bl	80099f8 <lv_draw_mask_apply>
                opa2 = LV_OPA_COVER;
 800a2d4:	23ff      	movs	r3, #255	; 0xff
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800a2d6:	0004      	movs	r4, r0
                opa2 = LV_OPA_COVER;
 800a2d8:	930a      	str	r3, [sp, #40]	; 0x28
            if(mask_res == LV_DRAW_MASK_RES_CHANGED) {
 800a2da:	2802      	cmp	r0, #2
 800a2dc:	d001      	beq.n	800a2e2 <lv_draw_rect+0x5de>
            opa2 = opa;
 800a2de:	9b05      	ldr	r3, [sp, #20]
 800a2e0:	930a      	str	r3, [sp, #40]	; 0x28
            if(grad_dir == LV_GRAD_DIR_VER) {
 800a2e2:	9b06      	ldr	r3, [sp, #24]
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d000      	beq.n	800a2ea <lv_draw_rect+0x5e6>
 800a2e8:	e08f      	b.n	800a40a <lv_draw_rect+0x706>
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
 800a2ea:	a918      	add	r1, sp, #96	; 0x60
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800a2ec:	884b      	ldrh	r3, [r1, #2]
 800a2ee:	88c9      	ldrh	r1, [r1, #6]
 800a2f0:	1aea      	subs	r2, r5, r3
 800a2f2:	3101      	adds	r1, #1
 800a2f4:	1ac9      	subs	r1, r1, r3
 800a2f6:	b212      	sxth	r2, r2
 800a2f8:	b209      	sxth	r1, r1
 800a2fa:	0030      	movs	r0, r6
 800a2fc:	f7ff fc8c 	bl	8009c18 <grad_get>
 800a300:	466b      	mov	r3, sp
 800a302:	8618      	strh	r0, [r3, #48]	; 0x30
            if(simple_mode && split &&
 800a304:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a306:	2b00      	cmp	r3, #0
 800a308:	d100      	bne.n	800a30c <lv_draw_rect+0x608>
 800a30a:	e0a8      	b.n	800a45e <lv_draw_rect+0x75a>
 800a30c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a30e:	2b32      	cmp	r3, #50	; 0x32
 800a310:	dc00      	bgt.n	800a314 <lv_draw_rect+0x610>
 800a312:	e088      	b.n	800a426 <lv_draw_rect+0x722>
               (y < coords_bg.y1 + rout + 1 ||
 800a314:	ab10      	add	r3, sp, #64	; 0x40
 800a316:	2222      	movs	r2, #34	; 0x22
 800a318:	5e9b      	ldrsh	r3, [r3, r2]
 800a31a:	9a07      	ldr	r2, [sp, #28]
 800a31c:	189b      	adds	r3, r3, r2
            if(simple_mode && split &&
 800a31e:	429d      	cmp	r5, r3
 800a320:	dd07      	ble.n	800a332 <lv_draw_rect+0x62e>
                y > coords_bg.y2 - rout - 1)) {
 800a322:	ab10      	add	r3, sp, #64	; 0x40
 800a324:	2226      	movs	r2, #38	; 0x26
 800a326:	5e9b      	ldrsh	r3, [r3, r2]
 800a328:	9a07      	ldr	r2, [sp, #28]
 800a32a:	1a9b      	subs	r3, r3, r2
               (y < coords_bg.y1 + rout + 1 ||
 800a32c:	429d      	cmp	r5, r3
 800a32e:	da00      	bge.n	800a332 <lv_draw_rect+0x62e>
 800a330:	e079      	b.n	800a426 <lv_draw_rect+0x722>
                fill_area2.x1 = coords_bg.x1;
 800a332:	ab10      	add	r3, sp, #64	; 0x40
 800a334:	2220      	movs	r2, #32
 800a336:	5e9b      	ldrsh	r3, [r3, r2]
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 800a338:	466a      	mov	r2, sp
                fill_area2.x1 = coords_bg.x1;
 800a33a:	ad1e      	add	r5, sp, #120	; 0x78
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 800a33c:	8b92      	ldrh	r2, [r2, #28]
                fill_area2.x1 = coords_bg.x1;
 800a33e:	802b      	strh	r3, [r5, #0]
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 800a340:	3b01      	subs	r3, #1
 800a342:	18d3      	adds	r3, r2, r3
 800a344:	80ab      	strh	r3, [r5, #4]
 800a346:	9211      	str	r2, [sp, #68]	; 0x44
                fill_area2.y1 = fill_area.y1;
 800a348:	ab1c      	add	r3, sp, #112	; 0x70
 800a34a:	885a      	ldrh	r2, [r3, #2]
                _lv_blend_fill(clip, &fill_area2,
 800a34c:	0029      	movs	r1, r5
                fill_area2.y1 = fill_area.y1;
 800a34e:	806a      	strh	r2, [r5, #2]
                _lv_blend_fill(clip, &fill_area2,
 800a350:	466a      	mov	r2, sp
                fill_area2.y2 = fill_area.y2;
 800a352:	88db      	ldrh	r3, [r3, #6]
                _lv_blend_fill(clip, &fill_area2,
 800a354:	9804      	ldr	r0, [sp, #16]
                fill_area2.y2 = fill_area.y2;
 800a356:	80eb      	strh	r3, [r5, #6]
                _lv_blend_fill(clip, &fill_area2,
 800a358:	7b73      	ldrb	r3, [r6, #13]
 800a35a:	9400      	str	r4, [sp, #0]
 800a35c:	9302      	str	r3, [sp, #8]
 800a35e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a360:	9301      	str	r3, [sp, #4]
 800a362:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800a364:	9b08      	ldr	r3, [sp, #32]
 800a366:	f7fc fc0b 	bl	8006b80 <_lv_blend_fill>
                if(grad_dir == LV_GRAD_DIR_VER) {
 800a36a:	9b06      	ldr	r3, [sp, #24]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d115      	bne.n	800a39c <lv_draw_rect+0x698>
                    fill_area2.x1 = coords_bg.x1 + rout;
 800a370:	ab10      	add	r3, sp, #64	; 0x40
 800a372:	8c1b      	ldrh	r3, [r3, #32]
 800a374:	9a11      	ldr	r2, [sp, #68]	; 0x44
                    _lv_blend_fill(clip, &fill_area2,
 800a376:	0029      	movs	r1, r5
                    fill_area2.x1 = coords_bg.x1 + rout;
 800a378:	18d3      	adds	r3, r2, r3
 800a37a:	802b      	strh	r3, [r5, #0]
                    fill_area2.x2 = coords_bg.x2 - rout;
 800a37c:	ab10      	add	r3, sp, #64	; 0x40
 800a37e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
                    _lv_blend_fill(clip, &fill_area2,
 800a380:	9804      	ldr	r0, [sp, #16]
                    fill_area2.x2 = coords_bg.x2 - rout;
 800a382:	1a9b      	subs	r3, r3, r2
                    _lv_blend_fill(clip, &fill_area2,
 800a384:	466a      	mov	r2, sp
                    fill_area2.x2 = coords_bg.x2 - rout;
 800a386:	80ab      	strh	r3, [r5, #4]
                    _lv_blend_fill(clip, &fill_area2,
 800a388:	7b73      	ldrb	r3, [r6, #13]
 800a38a:	9302      	str	r3, [sp, #8]
 800a38c:	9b05      	ldr	r3, [sp, #20]
 800a38e:	9301      	str	r3, [sp, #4]
 800a390:	9b06      	ldr	r3, [sp, #24]
 800a392:	9300      	str	r3, [sp, #0]
 800a394:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800a396:	2300      	movs	r3, #0
 800a398:	f7fc fbf2 	bl	8006b80 <_lv_blend_fill>
                fill_area2.x1 = coords_bg.x2 - rout + 1;
 800a39c:	ab18      	add	r3, sp, #96	; 0x60
 800a39e:	2204      	movs	r2, #4
 800a3a0:	5e9b      	ldrsh	r3, [r3, r2]
 800a3a2:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a3a4:	1c5a      	adds	r2, r3, #1
 800a3a6:	1a12      	subs	r2, r2, r0
 800a3a8:	a91e      	add	r1, sp, #120	; 0x78
 800a3aa:	800a      	strh	r2, [r1, #0]
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800a3ac:	9a07      	ldr	r2, [sp, #28]
                fill_area2.x2 = coords_bg.x2;
 800a3ae:	808b      	strh	r3, [r1, #4]
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800a3b0:	1a9a      	subs	r2, r3, r2
 800a3b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3b4:	3201      	adds	r2, #1
 800a3b6:	2010      	movs	r0, #16
 800a3b8:	5e1b      	ldrsh	r3, [r3, r0]
 800a3ba:	a81a      	add	r0, sp, #104	; 0x68
 800a3bc:	2500      	movs	r5, #0
 800a3be:	5f40      	ldrsh	r0, [r0, r5]
 800a3c0:	181b      	adds	r3, r3, r0
 800a3c2:	1ad3      	subs	r3, r2, r3
                _lv_blend_fill(clip, &fill_area2,
 800a3c4:	43da      	mvns	r2, r3
 800a3c6:	17d2      	asrs	r2, r2, #31
 800a3c8:	4013      	ands	r3, r2
 800a3ca:	9a08      	ldr	r2, [sp, #32]
 800a3cc:	18d3      	adds	r3, r2, r3
 800a3ce:	7b72      	ldrb	r2, [r6, #13]
 800a3d0:	9400      	str	r4, [sp, #0]
 800a3d2:	9202      	str	r2, [sp, #8]
 800a3d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3d6:	9201      	str	r2, [sp, #4]
 800a3d8:	466a      	mov	r2, sp
 800a3da:	8e12      	ldrh	r2, [r2, #48]	; 0x30
                    _lv_blend_fill(clip, &fill_area,
 800a3dc:	9804      	ldr	r0, [sp, #16]
 800a3de:	f7fc fbcf 	bl	8006b80 <_lv_blend_fill>
 800a3e2:	e02e      	b.n	800a442 <lv_draw_rect+0x73e>
                _lv_memset(mask_buf, opa, draw_area_w);
 800a3e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a3e6:	9905      	ldr	r1, [sp, #20]
 800a3e8:	9808      	ldr	r0, [sp, #32]
 800a3ea:	f001 ff43 	bl	800c274 <_lv_memset>
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800a3ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3f0:	8a5a      	ldrh	r2, [r3, #18]
 800a3f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3f4:	18d2      	adds	r2, r2, r3
 800a3f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3f8:	b212      	sxth	r2, r2
 800a3fa:	8a19      	ldrh	r1, [r3, #16]
 800a3fc:	ab1a      	add	r3, sp, #104	; 0x68
 800a3fe:	881b      	ldrh	r3, [r3, #0]
 800a400:	e762      	b.n	800a2c8 <lv_draw_rect+0x5c4>
            opa2 = opa;
 800a402:	9b05      	ldr	r3, [sp, #20]
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 800a404:	2401      	movs	r4, #1
            opa2 = opa;
 800a406:	930a      	str	r3, [sp, #40]	; 0x28
 800a408:	e76f      	b.n	800a2ea <lv_draw_rect+0x5e6>
            if(simple_mode && split &&
 800a40a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d000      	beq.n	800a412 <lv_draw_rect+0x70e>
 800a410:	e77c      	b.n	800a30c <lv_draw_rect+0x608>
                if(grad_dir == LV_GRAD_DIR_HOR) {
 800a412:	9b06      	ldr	r3, [sp, #24]
 800a414:	2b02      	cmp	r3, #2
 800a416:	d009      	beq.n	800a42c <lv_draw_rect+0x728>
                else if(other_mask_cnt != 0 || !split) {
 800a418:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d11f      	bne.n	800a45e <lv_draw_rect+0x75a>
 800a41e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a420:	2b32      	cmp	r3, #50	; 0x32
 800a422:	dc0e      	bgt.n	800a442 <lv_draw_rect+0x73e>
 800a424:	e01b      	b.n	800a45e <lv_draw_rect+0x75a>
                if(grad_dir == LV_GRAD_DIR_HOR) {
 800a426:	9b06      	ldr	r3, [sp, #24]
 800a428:	2b02      	cmp	r3, #2
 800a42a:	d115      	bne.n	800a458 <lv_draw_rect+0x754>
                    _lv_blend_map(clip, &fill_area, grad_map, mask_buf, mask_res, opa2, dsc->bg_blend_mode);
 800a42c:	7b73      	ldrb	r3, [r6, #13]
 800a42e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a430:	9302      	str	r3, [sp, #8]
 800a432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a434:	9400      	str	r4, [sp, #0]
 800a436:	9301      	str	r3, [sp, #4]
 800a438:	a91c      	add	r1, sp, #112	; 0x70
 800a43a:	9b08      	ldr	r3, [sp, #32]
 800a43c:	9804      	ldr	r0, [sp, #16]
 800a43e:	f7fc fde5 	bl	800700c <_lv_blend_map>
            fill_area.y1++;
 800a442:	ab1c      	add	r3, sp, #112	; 0x70
 800a444:	885a      	ldrh	r2, [r3, #2]
 800a446:	3201      	adds	r2, #1
 800a448:	805a      	strh	r2, [r3, #2]
            fill_area.y2++;
 800a44a:	88da      	ldrh	r2, [r3, #6]
 800a44c:	3201      	adds	r2, #1
 800a44e:	80da      	strh	r2, [r3, #6]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800a450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a452:	3301      	adds	r3, #1
 800a454:	930b      	str	r3, [sp, #44]	; 0x2c
 800a456:	e69d      	b.n	800a194 <lv_draw_rect+0x490>
                else if(grad_dir == LV_GRAD_DIR_VER) {
 800a458:	9b06      	ldr	r3, [sp, #24]
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d1dc      	bne.n	800a418 <lv_draw_rect+0x714>
                    _lv_blend_fill(clip, &fill_area,
 800a45e:	466a      	mov	r2, sp
 800a460:	7b73      	ldrb	r3, [r6, #13]
 800a462:	9400      	str	r4, [sp, #0]
 800a464:	9302      	str	r3, [sp, #8]
 800a466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a468:	a91c      	add	r1, sp, #112	; 0x70
 800a46a:	9301      	str	r3, [sp, #4]
 800a46c:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800a46e:	9b08      	ldr	r3, [sp, #32]
 800a470:	e7b4      	b.n	800a3dc <lv_draw_rect+0x6d8>
            _lv_memset_ff(mask_buf, draw_area_w);
 800a472:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a474:	9807      	ldr	r0, [sp, #28]
 800a476:	f001 ff53 	bl	800c320 <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800a47a:	9b06      	ldr	r3, [sp, #24]
 800a47c:	9807      	ldr	r0, [sp, #28]
 800a47e:	8a5a      	ldrh	r2, [r3, #18]
 800a480:	8a19      	ldrh	r1, [r3, #16]
 800a482:	ab18      	add	r3, sp, #96	; 0x60
 800a484:	881b      	ldrh	r3, [r3, #0]
 800a486:	1912      	adds	r2, r2, r4
 800a488:	18c9      	adds	r1, r1, r3
 800a48a:	b212      	sxth	r2, r2
 800a48c:	b209      	sxth	r1, r1
 800a48e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a490:	f7ff fab2 	bl	80099f8 <lv_draw_mask_apply>
            fill_area2.y1 = fill_area.y1;
 800a494:	ab1a      	add	r3, sp, #104	; 0x68
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800a496:	9011      	str	r0, [sp, #68]	; 0x44
            fill_area2.y1 = fill_area.y1;
 800a498:	885a      	ldrh	r2, [r3, #2]
 800a49a:	ad1c      	add	r5, sp, #112	; 0x70
 800a49c:	806a      	strh	r2, [r5, #2]
            fill_area2.y2 = fill_area.y2;
 800a49e:	88db      	ldrh	r3, [r3, #6]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800a4a0:	0029      	movs	r1, r5
            fill_area2.y2 = fill_area.y2;
 800a4a2:	80eb      	strh	r3, [r5, #6]
            fill_area2.x1 = area_outer->x1;
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	5ebb      	ldrsh	r3, [r7, r2]
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800a4a8:	466a      	mov	r2, sp
 800a4aa:	8c16      	ldrh	r6, [r2, #32]
            fill_area2.x1 = area_outer->x1;
 800a4ac:	802b      	strh	r3, [r5, #0]
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800a4ae:	3b01      	subs	r3, #1
 800a4b0:	18f3      	adds	r3, r6, r3
 800a4b2:	80ab      	strh	r3, [r5, #4]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800a4b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4b6:	9000      	str	r0, [sp, #0]
 800a4b8:	9302      	str	r3, [sp, #8]
 800a4ba:	9b05      	ldr	r3, [sp, #20]
 800a4bc:	9804      	ldr	r0, [sp, #16]
 800a4be:	9301      	str	r3, [sp, #4]
 800a4c0:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800a4c2:	9b07      	ldr	r3, [sp, #28]
 800a4c4:	f7fc fb5c 	bl	8006b80 <_lv_blend_fill>
            if(fill_area2.y2 < area_outer->y1 + border_width) {
 800a4c8:	2306      	movs	r3, #6
 800a4ca:	5eea      	ldrsh	r2, [r5, r3]
 800a4cc:	2102      	movs	r1, #2
 800a4ce:	5e7b      	ldrsh	r3, [r7, r1]
 800a4d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a4d2:	185b      	adds	r3, r3, r1
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	da12      	bge.n	800a4fe <lv_draw_rect+0x7fa>
                fill_area2.x1 = area_outer->x1 + rout;
 800a4d8:	883b      	ldrh	r3, [r7, #0]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800a4da:	466a      	mov	r2, sp
                fill_area2.x1 = area_outer->x1 + rout;
 800a4dc:	18f3      	adds	r3, r6, r3
 800a4de:	802b      	strh	r3, [r5, #0]
                fill_area2.x2 = area_outer->x2 - rout;
 800a4e0:	88bb      	ldrh	r3, [r7, #4]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800a4e2:	0029      	movs	r1, r5
                fill_area2.x2 = area_outer->x2 - rout;
 800a4e4:	1b9b      	subs	r3, r3, r6
 800a4e6:	80ab      	strh	r3, [r5, #4]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800a4e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4ea:	9804      	ldr	r0, [sp, #16]
 800a4ec:	9302      	str	r3, [sp, #8]
 800a4ee:	9b05      	ldr	r3, [sp, #20]
 800a4f0:	9301      	str	r3, [sp, #4]
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	9300      	str	r3, [sp, #0]
 800a4f6:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	f7fc fb41 	bl	8006b80 <_lv_blend_fill>
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800a4fe:	2204      	movs	r2, #4
 800a500:	5ebb      	ldrsh	r3, [r7, r2]
 800a502:	a91c      	add	r1, sp, #112	; 0x70
 800a504:	1c5a      	adds	r2, r3, #1
 800a506:	1b96      	subs	r6, r2, r6
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800a508:	9a08      	ldr	r2, [sp, #32]
            fill_area2.x2 = area_outer->x2;
 800a50a:	808b      	strh	r3, [r1, #4]
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800a50c:	1a9a      	subs	r2, r3, r2
 800a50e:	9b06      	ldr	r3, [sp, #24]
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800a510:	800e      	strh	r6, [r1, #0]
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800a512:	2010      	movs	r0, #16
 800a514:	5e1b      	ldrsh	r3, [r3, r0]
 800a516:	a818      	add	r0, sp, #96	; 0x60
 800a518:	2500      	movs	r5, #0
 800a51a:	5f40      	ldrsh	r0, [r0, r5]
 800a51c:	3201      	adds	r2, #1
 800a51e:	181b      	adds	r3, r3, r0
 800a520:	1ad3      	subs	r3, r2, r3
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800a522:	43da      	mvns	r2, r3
 800a524:	17d2      	asrs	r2, r2, #31
 800a526:	4013      	ands	r3, r2
 800a528:	9a07      	ldr	r2, [sp, #28]
 800a52a:	9804      	ldr	r0, [sp, #16]
 800a52c:	18d3      	adds	r3, r2, r3
 800a52e:	9a09      	ldr	r2, [sp, #36]	; 0x24
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
 800a530:	3401      	adds	r4, #1
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800a532:	9202      	str	r2, [sp, #8]
 800a534:	9a05      	ldr	r2, [sp, #20]
 800a536:	9201      	str	r2, [sp, #4]
 800a538:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a53a:	9200      	str	r2, [sp, #0]
 800a53c:	466a      	mov	r2, sp
 800a53e:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800a540:	f7fc fb1e 	bl	8006b80 <_lv_blend_fill>
            fill_area.y1++;
 800a544:	ab1a      	add	r3, sp, #104	; 0x68
 800a546:	885a      	ldrh	r2, [r3, #2]
 800a548:	3201      	adds	r2, #1
 800a54a:	805a      	strh	r2, [r3, #2]
            fill_area.y2++;
 800a54c:	88da      	ldrh	r2, [r3, #6]
 800a54e:	3201      	adds	r2, #1
 800a550:	80da      	strh	r2, [r3, #6]
 800a552:	e588      	b.n	800a066 <lv_draw_rect+0x362>
            _lv_memset_ff(mask_buf, draw_area_w);
 800a554:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a556:	9807      	ldr	r0, [sp, #28]
 800a558:	f001 fee2 	bl	800c320 <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800a55c:	9b06      	ldr	r3, [sp, #24]
 800a55e:	9807      	ldr	r0, [sp, #28]
 800a560:	8a5a      	ldrh	r2, [r3, #18]
 800a562:	8a19      	ldrh	r1, [r3, #16]
 800a564:	882b      	ldrh	r3, [r5, #0]
 800a566:	1912      	adds	r2, r2, r4
 800a568:	18c9      	adds	r1, r1, r3
 800a56a:	b212      	sxth	r2, r2
 800a56c:	b209      	sxth	r1, r1
 800a56e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a570:	f7ff fa42 	bl	80099f8 <lv_draw_mask_apply>
            fill_area2.x1 = area_outer->x1;
 800a574:	2200      	movs	r2, #0
 800a576:	5ebb      	ldrsh	r3, [r7, r2]
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800a578:	466a      	mov	r2, sp
            fill_area2.x1 = area_outer->x1;
 800a57a:	ad1c      	add	r5, sp, #112	; 0x70
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800a57c:	8c16      	ldrh	r6, [r2, #32]
            fill_area2.x1 = area_outer->x1;
 800a57e:	802b      	strh	r3, [r5, #0]
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800a580:	3b01      	subs	r3, #1
 800a582:	18f3      	adds	r3, r6, r3
 800a584:	80ab      	strh	r3, [r5, #4]
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800a586:	900f      	str	r0, [sp, #60]	; 0x3c
            fill_area2.y1 = fill_area.y1;
 800a588:	ab1a      	add	r3, sp, #104	; 0x68
 800a58a:	885a      	ldrh	r2, [r3, #2]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800a58c:	0029      	movs	r1, r5
            fill_area2.y1 = fill_area.y1;
 800a58e:	806a      	strh	r2, [r5, #2]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800a590:	466a      	mov	r2, sp
            fill_area2.y2 = fill_area.y2;
 800a592:	88db      	ldrh	r3, [r3, #6]
 800a594:	80eb      	strh	r3, [r5, #6]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800a596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a598:	9000      	str	r0, [sp, #0]
 800a59a:	9302      	str	r3, [sp, #8]
 800a59c:	9b05      	ldr	r3, [sp, #20]
 800a59e:	9804      	ldr	r0, [sp, #16]
 800a5a0:	9301      	str	r3, [sp, #4]
 800a5a2:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800a5a4:	9b07      	ldr	r3, [sp, #28]
 800a5a6:	f7fc faeb 	bl	8006b80 <_lv_blend_fill>
            if(fill_area2.y2 > area_outer->y2 - border_width) {
 800a5aa:	2306      	movs	r3, #6
 800a5ac:	5eea      	ldrsh	r2, [r5, r3]
 800a5ae:	2106      	movs	r1, #6
 800a5b0:	5e7b      	ldrsh	r3, [r7, r1]
 800a5b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a5b4:	1a5b      	subs	r3, r3, r1
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	dd12      	ble.n	800a5e0 <lv_draw_rect+0x8dc>
                fill_area2.x1 = area_outer->x1 + rout;
 800a5ba:	883b      	ldrh	r3, [r7, #0]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800a5bc:	466a      	mov	r2, sp
                fill_area2.x1 = area_outer->x1 + rout;
 800a5be:	18f3      	adds	r3, r6, r3
 800a5c0:	802b      	strh	r3, [r5, #0]
                fill_area2.x2 = area_outer->x2 - rout;
 800a5c2:	88bb      	ldrh	r3, [r7, #4]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800a5c4:	0029      	movs	r1, r5
                fill_area2.x2 = area_outer->x2 - rout;
 800a5c6:	1b9b      	subs	r3, r3, r6
 800a5c8:	80ab      	strh	r3, [r5, #4]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800a5ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5cc:	9804      	ldr	r0, [sp, #16]
 800a5ce:	9302      	str	r3, [sp, #8]
 800a5d0:	9b05      	ldr	r3, [sp, #20]
 800a5d2:	9301      	str	r3, [sp, #4]
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800a5da:	2300      	movs	r3, #0
 800a5dc:	f7fc fad0 	bl	8006b80 <_lv_blend_fill>
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800a5e0:	2204      	movs	r2, #4
 800a5e2:	5ebb      	ldrsh	r3, [r7, r2]
 800a5e4:	a91c      	add	r1, sp, #112	; 0x70
 800a5e6:	1c5a      	adds	r2, r3, #1
 800a5e8:	1b96      	subs	r6, r2, r6
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800a5ea:	9a08      	ldr	r2, [sp, #32]
            fill_area2.x2 = area_outer->x2;
 800a5ec:	808b      	strh	r3, [r1, #4]
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800a5ee:	1a9a      	subs	r2, r3, r2
 800a5f0:	9b06      	ldr	r3, [sp, #24]
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800a5f2:	800e      	strh	r6, [r1, #0]
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800a5f4:	2010      	movs	r0, #16
 800a5f6:	5e1b      	ldrsh	r3, [r3, r0]
 800a5f8:	a818      	add	r0, sp, #96	; 0x60
 800a5fa:	2500      	movs	r5, #0
 800a5fc:	5f40      	ldrsh	r0, [r0, r5]
 800a5fe:	3201      	adds	r2, #1
 800a600:	181b      	adds	r3, r3, r0
 800a602:	1ad3      	subs	r3, r2, r3
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800a604:	43da      	mvns	r2, r3
 800a606:	17d2      	asrs	r2, r2, #31
 800a608:	4013      	ands	r3, r2
 800a60a:	9a07      	ldr	r2, [sp, #28]
 800a60c:	9804      	ldr	r0, [sp, #16]
 800a60e:	18d3      	adds	r3, r2, r3
 800a610:	9a09      	ldr	r2, [sp, #36]	; 0x24
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
 800a612:	3401      	adds	r4, #1
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800a614:	9202      	str	r2, [sp, #8]
 800a616:	9a05      	ldr	r2, [sp, #20]
 800a618:	9201      	str	r2, [sp, #4]
 800a61a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a61c:	9200      	str	r2, [sp, #0]
 800a61e:	466a      	mov	r2, sp
 800a620:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800a622:	f7fc faad 	bl	8006b80 <_lv_blend_fill>
            fill_area.y1++;
 800a626:	ab1a      	add	r3, sp, #104	; 0x68
 800a628:	885a      	ldrh	r2, [r3, #2]
 800a62a:	3201      	adds	r2, #1
 800a62c:	805a      	strh	r2, [r3, #2]
            fill_area.y2++;
 800a62e:	88da      	ldrh	r2, [r3, #6]
 800a630:	3201      	adds	r2, #1
 800a632:	80da      	strh	r2, [r3, #6]
 800a634:	e52d      	b.n	800a092 <lv_draw_rect+0x38e>
        fill_area.x2 = area_outer->x2;
 800a636:	4661      	mov	r1, ip
        fill_area.x1 = area_outer->x1;
 800a638:	801d      	strh	r5, [r3, #0]
        fill_area.x2 = area_outer->x2;
 800a63a:	8099      	strh	r1, [r3, #4]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800a63c:	805a      	strh	r2, [r3, #2]
        fill_area.y2 = fill_area.y1;
 800a63e:	80da      	strh	r2, [r3, #6]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800a640:	ad18      	add	r5, sp, #96	; 0x60
 800a642:	2206      	movs	r2, #6
 800a644:	5eab      	ldrsh	r3, [r5, r2]
 800a646:	429c      	cmp	r4, r3
 800a648:	dd00      	ble.n	800a64c <lv_draw_rect+0x948>
 800a64a:	e55e      	b.n	800a10a <lv_draw_rect+0x406>
            _lv_memset_ff(mask_buf, draw_area_w);
 800a64c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a64e:	9807      	ldr	r0, [sp, #28]
 800a650:	f001 fe66 	bl	800c320 <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800a654:	9b06      	ldr	r3, [sp, #24]
 800a656:	9807      	ldr	r0, [sp, #28]
 800a658:	8a5a      	ldrh	r2, [r3, #18]
 800a65a:	8a19      	ldrh	r1, [r3, #16]
 800a65c:	882b      	ldrh	r3, [r5, #0]
 800a65e:	1912      	adds	r2, r2, r4
 800a660:	18c9      	adds	r1, r1, r3
 800a662:	b212      	sxth	r2, r2
 800a664:	b209      	sxth	r1, r1
 800a666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a668:	f7ff f9c6 	bl	80099f8 <lv_draw_mask_apply>
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
 800a66c:	466a      	mov	r2, sp
 800a66e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a670:	ad1a      	add	r5, sp, #104	; 0x68
 800a672:	9302      	str	r3, [sp, #8]
 800a674:	9b05      	ldr	r3, [sp, #20]
 800a676:	9000      	str	r0, [sp, #0]
 800a678:	9301      	str	r3, [sp, #4]
 800a67a:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800a67c:	9b07      	ldr	r3, [sp, #28]
 800a67e:	0029      	movs	r1, r5
 800a680:	9804      	ldr	r0, [sp, #16]
 800a682:	f7fc fa7d 	bl	8006b80 <_lv_blend_fill>
            fill_area.y1++;
 800a686:	886b      	ldrh	r3, [r5, #2]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800a688:	3401      	adds	r4, #1
            fill_area.y1++;
 800a68a:	3301      	adds	r3, #1
 800a68c:	806b      	strh	r3, [r5, #2]
            fill_area.y2++;
 800a68e:	88eb      	ldrh	r3, [r5, #6]
 800a690:	3301      	adds	r3, #1
 800a692:	80eb      	strh	r3, [r5, #6]
 800a694:	e7d4      	b.n	800a640 <lv_draw_rect+0x93c>
        if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800a696:	9b05      	ldr	r3, [sp, #20]
 800a698:	2bfd      	cmp	r3, #253	; 0xfd
 800a69a:	d901      	bls.n	800a6a0 <lv_draw_rect+0x99c>
 800a69c:	23ff      	movs	r3, #255	; 0xff
 800a69e:	9305      	str	r3, [sp, #20]
        lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 800a6a0:	f7fb fb86 	bl	8005db0 <_lv_refr_get_disp_refreshing>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800a6a4:	f000 fede 	bl	800b464 <lv_disp_get_buf>
        is_common = _lv_area_intersect(&draw_area, coords, clip);
 800a6a8:	ad1a      	add	r5, sp, #104	; 0x68
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800a6aa:	9006      	str	r0, [sp, #24]
        is_common = _lv_area_intersect(&draw_area, coords, clip);
 800a6ac:	9a04      	ldr	r2, [sp, #16]
 800a6ae:	0039      	movs	r1, r7
 800a6b0:	0028      	movs	r0, r5
 800a6b2:	f000 ffca 	bl	800b64a <_lv_area_intersect>
        if(is_common == false) return;
 800a6b6:	2800      	cmp	r0, #0
 800a6b8:	d100      	bne.n	800a6bc <lv_draw_rect+0x9b8>
 800a6ba:	e52f      	b.n	800a11c <lv_draw_rect+0x418>
        draw_area.x1 -= disp_area->x1;
 800a6bc:	9b06      	ldr	r3, [sp, #24]
        draw_area.y1 -= disp_area->y1;
 800a6be:	8868      	ldrh	r0, [r5, #2]
        draw_area.x1 -= disp_area->x1;
 800a6c0:	8a1b      	ldrh	r3, [r3, #16]
 800a6c2:	469c      	mov	ip, r3
 800a6c4:	4662      	mov	r2, ip
 800a6c6:	882b      	ldrh	r3, [r5, #0]
 800a6c8:	1a9b      	subs	r3, r3, r2
 800a6ca:	b29a      	uxth	r2, r3
        draw_area.y1 -= disp_area->y1;
 800a6cc:	9b06      	ldr	r3, [sp, #24]
        draw_area.x1 -= disp_area->x1;
 800a6ce:	802a      	strh	r2, [r5, #0]
        draw_area.y1 -= disp_area->y1;
 800a6d0:	8a59      	ldrh	r1, [r3, #18]
        draw_area.x2 -= disp_area->x1;
 800a6d2:	88ab      	ldrh	r3, [r5, #4]
        draw_area.y1 -= disp_area->y1;
 800a6d4:	1a40      	subs	r0, r0, r1
 800a6d6:	8068      	strh	r0, [r5, #2]
        draw_area.x2 -= disp_area->x1;
 800a6d8:	4660      	mov	r0, ip
 800a6da:	1a1b      	subs	r3, r3, r0
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	80ab      	strh	r3, [r5, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a6e0:	3301      	adds	r3, #1
        draw_area.y2 -= disp_area->y1;
 800a6e2:	88e8      	ldrh	r0, [r5, #6]
 800a6e4:	1a9b      	subs	r3, r3, r2
 800a6e6:	b21b      	sxth	r3, r3
 800a6e8:	1a41      	subs	r1, r0, r1
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800a6ea:	0018      	movs	r0, r3
        draw_area.y2 -= disp_area->y1;
 800a6ec:	80e9      	strh	r1, [r5, #6]
 800a6ee:	9307      	str	r3, [sp, #28]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800a6f0:	f001 fd64 	bl	800c1bc <_lv_mem_buf_get>
 800a6f4:	0005      	movs	r5, r0
        if(rout > 0) {
 800a6f6:	2c00      	cmp	r4, #0
 800a6f8:	dd64      	ble.n	800a7c4 <lv_draw_rect+0xac0>
            lv_draw_mask_radius_init(&mask_rout_param, coords, rout, false);
 800a6fa:	b222      	sxth	r2, r4
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	0039      	movs	r1, r7
 800a700:	a81e      	add	r0, sp, #120	; 0x78
 800a702:	f7ff fa59 	bl	8009bb8 <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800a706:	2100      	movs	r1, #0
 800a708:	a81e      	add	r0, sp, #120	; 0x78
 800a70a:	f7ff f95f 	bl	80099cc <lv_draw_mask_add>
 800a70e:	900a      	str	r0, [sp, #40]	; 0x28
        lv_draw_mask_radius_init(&mask_rin_param, &area_inner, rout - dsc->border_width, true);
 800a710:	8a32      	ldrh	r2, [r6, #16]
 800a712:	2301      	movs	r3, #1
 800a714:	1aa2      	subs	r2, r4, r2
 800a716:	b212      	sxth	r2, r2
 800a718:	a916      	add	r1, sp, #88	; 0x58
 800a71a:	a825      	add	r0, sp, #148	; 0x94
 800a71c:	f7ff fa4c 	bl	8009bb8 <lv_draw_mask_radius_init>
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800a720:	2100      	movs	r1, #0
 800a722:	a825      	add	r0, sp, #148	; 0x94
 800a724:	f7ff f952 	bl	80099cc <lv_draw_mask_add>
 800a728:	900d      	str	r0, [sp, #52]	; 0x34
        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
 800a72a:	2210      	movs	r2, #16
 800a72c:	5eb3      	ldrsh	r3, [r6, r2]
 800a72e:	42a3      	cmp	r3, r4
 800a730:	dd00      	ble.n	800a734 <lv_draw_rect+0xa30>
 800a732:	1e5c      	subs	r4, r3, #1
        lv_color_t color = dsc->border_color;
 800a734:	466a      	mov	r2, sp
 800a736:	89f3      	ldrh	r3, [r6, #14]
        fill_area.x1 = coords->x1;
 800a738:	a91c      	add	r1, sp, #112	; 0x70
        lv_color_t color = dsc->border_color;
 800a73a:	8613      	strh	r3, [r2, #48]	; 0x30
        lv_blend_mode_t blend_mode = dsc->border_blend_mode;
 800a73c:	7d73      	ldrb	r3, [r6, #21]
 800a73e:	930b      	str	r3, [sp, #44]	; 0x2c
        fill_area.x1 = coords->x1;
 800a740:	2300      	movs	r3, #0
 800a742:	5ef8      	ldrsh	r0, [r7, r3]
 800a744:	8008      	strh	r0, [r1, #0]
        fill_area.x2 = coords->x2;
 800a746:	2204      	movs	r2, #4
 800a748:	5ebb      	ldrsh	r3, [r7, r2]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800a74a:	aa1a      	add	r2, sp, #104	; 0x68
        fill_area.x2 = coords->x2;
 800a74c:	9309      	str	r3, [sp, #36]	; 0x24
 800a74e:	808b      	strh	r3, [r1, #4]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800a750:	2302      	movs	r3, #2
 800a752:	5ed2      	ldrsh	r2, [r2, r3]
 800a754:	4694      	mov	ip, r2
 800a756:	9a06      	ldr	r2, [sp, #24]
 800a758:	8a52      	ldrh	r2, [r2, #18]
 800a75a:	4462      	add	r2, ip
 800a75c:	b212      	sxth	r2, r2
 800a75e:	804a      	strh	r2, [r1, #2]
        fill_area.y2 = fill_area.y1;
 800a760:	80ca      	strh	r2, [r1, #6]
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
 800a762:	2312      	movs	r3, #18
 800a764:	5ef2      	ldrsh	r2, [r6, r3]
 800a766:	2a04      	cmp	r2, #4
 800a768:	d130      	bne.n	800a7cc <lv_draw_rect+0xac8>
        uint32_t buf_ofs = 0;
 800a76a:	2300      	movs	r3, #0
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
 800a76c:	1900      	adds	r0, r0, r4
 800a76e:	8088      	strh	r0, [r1, #4]
            buf_ofs = fill_area.x1 - coords->x1;
 800a770:	9308      	str	r3, [sp, #32]
        volatile bool top_only = false;
 800a772:	2316      	movs	r3, #22
 800a774:	a910      	add	r1, sp, #64	; 0x40
 800a776:	185b      	adds	r3, r3, r1
        volatile bool bottom_only = false;
 800a778:	2117      	movs	r1, #23
        volatile bool top_only = false;
 800a77a:	2000      	movs	r0, #0
        volatile bool bottom_only = false;
 800a77c:	ae10      	add	r6, sp, #64	; 0x40
 800a77e:	1989      	adds	r1, r1, r6
        volatile bool top_only = false;
 800a780:	7018      	strb	r0, [r3, #0]
        volatile bool bottom_only = false;
 800a782:	7008      	strb	r0, [r1, #0]
 800a784:	3001      	adds	r0, #1
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
 800a786:	2a02      	cmp	r2, #2
 800a788:	d12a      	bne.n	800a7e0 <lv_draw_rect+0xadc>
 800a78a:	7018      	strb	r0, [r3, #0]
        volatile bool normal = !top_only && !bottom_only ? true : false;
 800a78c:	781a      	ldrb	r2, [r3, #0]
 800a78e:	2300      	movs	r3, #0
 800a790:	429a      	cmp	r2, r3
 800a792:	d105      	bne.n	800a7a0 <lv_draw_rect+0xa9c>
 800a794:	aa10      	add	r2, sp, #64	; 0x40
 800a796:	3317      	adds	r3, #23
 800a798:	189b      	adds	r3, r3, r2
 800a79a:	781a      	ldrb	r2, [r3, #0]
 800a79c:	2301      	movs	r3, #1
 800a79e:	4053      	eors	r3, r2
 800a7a0:	2201      	movs	r2, #1
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800a7a2:	4666      	mov	r6, ip
        volatile bool normal = !top_only && !bottom_only ? true : false;
 800a7a4:	4013      	ands	r3, r2
 800a7a6:	aa18      	add	r2, sp, #96	; 0x60
 800a7a8:	7013      	strb	r3, [r2, #0]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800a7aa:	ab1a      	add	r3, sp, #104	; 0x68
 800a7ac:	2206      	movs	r2, #6
 800a7ae:	5e9b      	ldrsh	r3, [r3, r2]
 800a7b0:	429e      	cmp	r6, r3
 800a7b2:	dd1e      	ble.n	800a7f2 <lv_draw_rect+0xaee>
        lv_draw_mask_remove_id(mask_rin_id);
 800a7b4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a7b6:	f7ff f93f 	bl	8009a38 <lv_draw_mask_remove_id>
        lv_draw_mask_remove_id(mask_rout_id);
 800a7ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a7bc:	f7ff f93c 	bl	8009a38 <lv_draw_mask_remove_id>
        _lv_mem_buf_release(mask_buf);
 800a7c0:	0028      	movs	r0, r5
 800a7c2:	e4a9      	b.n	800a118 <lv_draw_rect+0x414>
        int16_t mask_rout_id = LV_MASK_ID_INV;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	425b      	negs	r3, r3
 800a7c8:	930a      	str	r3, [sp, #40]	; 0x28
 800a7ca:	e7a1      	b.n	800a710 <lv_draw_rect+0xa0c>
        uint32_t buf_ofs = 0;
 800a7cc:	2600      	movs	r6, #0
 800a7ce:	9608      	str	r6, [sp, #32]
        else if(dsc->border_side == LV_BORDER_SIDE_RIGHT) {
 800a7d0:	2a08      	cmp	r2, #8
 800a7d2:	d1ce      	bne.n	800a772 <lv_draw_rect+0xa6e>
            fill_area.x1 = coords->x2 - corner_size;
 800a7d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7d6:	1b1b      	subs	r3, r3, r4
 800a7d8:	b21b      	sxth	r3, r3
 800a7da:	800b      	strh	r3, [r1, #0]
            buf_ofs = fill_area.x1 - coords->x1;
 800a7dc:	1a1b      	subs	r3, r3, r0
 800a7de:	e7c7      	b.n	800a770 <lv_draw_rect+0xa6c>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
 800a7e0:	2a01      	cmp	r2, #1
 800a7e2:	d101      	bne.n	800a7e8 <lv_draw_rect+0xae4>
 800a7e4:	700a      	strb	r2, [r1, #0]
 800a7e6:	e7d1      	b.n	800a78c <lv_draw_rect+0xa88>
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
 800a7e8:	2a03      	cmp	r2, #3
 800a7ea:	d1cf      	bne.n	800a78c <lv_draw_rect+0xa88>
            top_only = true;
 800a7ec:	7018      	strb	r0, [r3, #0]
            bottom_only = true;
 800a7ee:	7008      	strb	r0, [r1, #0]
 800a7f0:	e7cc      	b.n	800a78c <lv_draw_rect+0xa88>
            if(normal ||
 800a7f2:	ab18      	add	r3, sp, #96	; 0x60
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d118      	bne.n	800a82c <lv_draw_rect+0xb28>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 800a7fa:	aa10      	add	r2, sp, #64	; 0x40
 800a7fc:	3316      	adds	r3, #22
 800a7fe:	189b      	adds	r3, r3, r2
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	aa1c      	add	r2, sp, #112	; 0x70
 800a804:	2102      	movs	r1, #2
 800a806:	5e52      	ldrsh	r2, [r2, r1]
            if(normal ||
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d004      	beq.n	800a816 <lv_draw_rect+0xb12>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 800a80c:	2102      	movs	r1, #2
 800a80e:	5e7b      	ldrsh	r3, [r7, r1]
 800a810:	191b      	adds	r3, r3, r4
 800a812:	429a      	cmp	r2, r3
 800a814:	dd0a      	ble.n	800a82c <lv_draw_rect+0xb28>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
 800a816:	2317      	movs	r3, #23
 800a818:	a910      	add	r1, sp, #64	; 0x40
 800a81a:	185b      	adds	r3, r3, r1
 800a81c:	781b      	ldrb	r3, [r3, #0]
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d022      	beq.n	800a868 <lv_draw_rect+0xb64>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
 800a822:	2106      	movs	r1, #6
 800a824:	5e7b      	ldrsh	r3, [r7, r1]
 800a826:	1b1b      	subs	r3, r3, r4
 800a828:	429a      	cmp	r2, r3
 800a82a:	db1d      	blt.n	800a868 <lv_draw_rect+0xb64>
                _lv_memset_ff(mask_buf, draw_area_w);
 800a82c:	9907      	ldr	r1, [sp, #28]
 800a82e:	0028      	movs	r0, r5
 800a830:	f001 fd76 	bl	800c320 <_lv_memset_ff>
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800a834:	9b06      	ldr	r3, [sp, #24]
 800a836:	0028      	movs	r0, r5
 800a838:	8a5a      	ldrh	r2, [r3, #18]
 800a83a:	8a19      	ldrh	r1, [r3, #16]
 800a83c:	ab1a      	add	r3, sp, #104	; 0x68
 800a83e:	881b      	ldrh	r3, [r3, #0]
 800a840:	1992      	adds	r2, r2, r6
 800a842:	18c9      	adds	r1, r1, r3
 800a844:	b212      	sxth	r2, r2
 800a846:	b209      	sxth	r1, r1
 800a848:	9b07      	ldr	r3, [sp, #28]
 800a84a:	f7ff f8d5 	bl	80099f8 <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fill_area, color, mask_buf + buf_ofs, mask_res, opa, blend_mode);
 800a84e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a850:	9b08      	ldr	r3, [sp, #32]
 800a852:	9202      	str	r2, [sp, #8]
 800a854:	9a05      	ldr	r2, [sp, #20]
 800a856:	9000      	str	r0, [sp, #0]
 800a858:	9201      	str	r2, [sp, #4]
 800a85a:	466a      	mov	r2, sp
 800a85c:	18eb      	adds	r3, r5, r3
 800a85e:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800a860:	a91c      	add	r1, sp, #112	; 0x70
 800a862:	9804      	ldr	r0, [sp, #16]
 800a864:	f7fc f98c 	bl	8006b80 <_lv_blend_fill>
            fill_area.y1++;
 800a868:	ab1c      	add	r3, sp, #112	; 0x70
 800a86a:	885a      	ldrh	r2, [r3, #2]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800a86c:	3601      	adds	r6, #1
            fill_area.y1++;
 800a86e:	3201      	adds	r2, #1
 800a870:	805a      	strh	r2, [r3, #2]
            fill_area.y2++;
 800a872:	88da      	ldrh	r2, [r3, #6]
 800a874:	3201      	adds	r2, #1
 800a876:	80da      	strh	r2, [r3, #6]
 800a878:	e797      	b.n	800a7aa <lv_draw_rect+0xaa6>
            if(grad_dir == LV_GRAD_DIR_VER) {
 800a87a:	9b06      	ldr	r3, [sp, #24]
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d100      	bne.n	800a882 <lv_draw_rect+0xb7e>
 800a880:	e5bf      	b.n	800a402 <lv_draw_rect+0x6fe>
            opa2 = opa;
 800a882:	9b05      	ldr	r3, [sp, #20]
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 800a884:	2401      	movs	r4, #1
            opa2 = opa;
 800a886:	930a      	str	r3, [sp, #40]	; 0x28
 800a888:	e540      	b.n	800a30c <lv_draw_rect+0x608>

0800a88a <_lv_img_buf_get_transformed_area>:
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
#else
    LV_UNUSED(angle);
    LV_UNUSED(zoom);
    LV_UNUSED(pivot);
    res->x1 = 0;
 800a88a:	2300      	movs	r3, #0
    res->y1 = 0;
    res->x2 = w - 1;
 800a88c:	3901      	subs	r1, #1
    res->y2 = h - 1;
 800a88e:	3a01      	subs	r2, #1
    res->x1 = 0;
 800a890:	8003      	strh	r3, [r0, #0]
    res->y1 = 0;
 800a892:	8043      	strh	r3, [r0, #2]
    res->x2 = w - 1;
 800a894:	8081      	strh	r1, [r0, #4]
    res->y2 = h - 1;
 800a896:	80c2      	strh	r2, [r0, #6]
#endif
}
 800a898:	4770      	bx	lr

0800a89a <lv_img_cache_match>:
 *   STATIC FUNCTIONS
 **********************/

#if LV_IMG_CACHE_DEF_SIZE
static bool lv_img_cache_match(const void * src1, const void * src2)
{
 800a89a:	b570      	push	{r4, r5, r6, lr}
 800a89c:	0004      	movs	r4, r0
 800a89e:	000d      	movs	r5, r1
    lv_img_src_t src_type = lv_img_src_get_type(src1);
 800a8a0:	f7fd f98a 	bl	8007bb8 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE)
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	d104      	bne.n	800a8b2 <lv_img_cache_match+0x18>
        return src1 == src2;
 800a8a8:	1b64      	subs	r4, r4, r5
 800a8aa:	4260      	negs	r0, r4
 800a8ac:	4160      	adcs	r0, r4
    if(src_type != LV_IMG_SRC_FILE)
        return false;
    if(lv_img_src_get_type(src2) != LV_IMG_SRC_FILE)
        return false;
    return strcmp(src1, src2) == 0;
 800a8ae:	b2c0      	uxtb	r0, r0
 800a8b0:	e002      	b.n	800a8b8 <lv_img_cache_match+0x1e>
    if(src_type != LV_IMG_SRC_FILE)
 800a8b2:	2801      	cmp	r0, #1
 800a8b4:	d001      	beq.n	800a8ba <lv_img_cache_match+0x20>
        return false;
 800a8b6:	2000      	movs	r0, #0
}
 800a8b8:	bd70      	pop	{r4, r5, r6, pc}
    if(lv_img_src_get_type(src2) != LV_IMG_SRC_FILE)
 800a8ba:	0028      	movs	r0, r5
 800a8bc:	f7fd f97c 	bl	8007bb8 <lv_img_src_get_type>
 800a8c0:	2801      	cmp	r0, #1
 800a8c2:	d1f8      	bne.n	800a8b6 <lv_img_cache_match+0x1c>
    return strcmp(src1, src2) == 0;
 800a8c4:	0020      	movs	r0, r4
 800a8c6:	0029      	movs	r1, r5
 800a8c8:	f7f5 fc1a 	bl	8000100 <strcmp>
 800a8cc:	4244      	negs	r4, r0
 800a8ce:	4160      	adcs	r0, r4
 800a8d0:	e7ed      	b.n	800a8ae <lv_img_cache_match+0x14>
	...

0800a8d4 <_lv_img_cache_open>:
{
 800a8d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8d6:	466b      	mov	r3, sp
 800a8d8:	80d9      	strh	r1, [r3, #6]
    if(entry_cnt == 0) {
 800a8da:	4b39      	ldr	r3, [pc, #228]	; (800a9c0 <_lv_img_cache_open+0xec>)
{
 800a8dc:	0007      	movs	r7, r0
    if(entry_cnt == 0) {
 800a8de:	8819      	ldrh	r1, [r3, #0]
        return NULL;
 800a8e0:	1e0c      	subs	r4, r1, #0
    if(entry_cnt == 0) {
 800a8e2:	d04b      	beq.n	800a97c <_lv_img_cache_open+0xa8>
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 800a8e4:	4b37      	ldr	r3, [pc, #220]	; (800a9c4 <_lv_img_cache_open+0xf0>)
 800a8e6:	2224      	movs	r2, #36	; 0x24
 800a8e8:	681e      	ldr	r6, [r3, #0]
 800a8ea:	434a      	muls	r2, r1
 800a8ec:	0033      	movs	r3, r6
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
 800a8ee:	4836      	ldr	r0, [pc, #216]	; (800a9c8 <_lv_img_cache_open+0xf4>)
 800a8f0:	3320      	adds	r3, #32
 800a8f2:	189a      	adds	r2, r3, r2
    for(i = 0; i < entry_cnt; i++) {
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d124      	bne.n	800a942 <_lv_img_cache_open+0x6e>
    for(i = 0; i < entry_cnt; i++) {
 800a8f8:	2500      	movs	r5, #0
 800a8fa:	4b31      	ldr	r3, [pc, #196]	; (800a9c0 <_lv_img_cache_open+0xec>)
 800a8fc:	8819      	ldrh	r1, [r3, #0]
 800a8fe:	42a9      	cmp	r1, r5
 800a900:	d826      	bhi.n	800a950 <_lv_img_cache_open+0x7c>
 800a902:	0032      	movs	r2, r6
    cached_src = &cache[0];
 800a904:	0034      	movs	r4, r6
    for(i = 1; i < entry_cnt; i++) {
 800a906:	2301      	movs	r3, #1
 800a908:	3224      	adds	r2, #36	; 0x24
 800a90a:	4299      	cmp	r1, r3
 800a90c:	d83d      	bhi.n	800a98a <_lv_img_cache_open+0xb6>
    if(cached_src->dec_dsc.src) {
 800a90e:	6863      	ldr	r3, [r4, #4]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d002      	beq.n	800a91a <_lv_img_cache_open+0x46>
        lv_img_decoder_close(&cached_src->dec_dsc);
 800a914:	0020      	movs	r0, r4
 800a916:	f000 f99c 	bl	800ac52 <lv_img_decoder_close>
    uint32_t t_start  = lv_tick_get();
 800a91a:	f000 fe49 	bl	800b5b0 <lv_tick_get>
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
 800a91e:	466b      	mov	r3, sp
    uint32_t t_start  = lv_tick_get();
 800a920:	0005      	movs	r5, r0
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
 800a922:	88da      	ldrh	r2, [r3, #6]
 800a924:	0039      	movs	r1, r7
 800a926:	0020      	movs	r0, r4
 800a928:	f000 f930 	bl	800ab8c <lv_img_decoder_open>
 800a92c:	1e06      	subs	r6, r0, #0
    if(open_res == LV_RES_INV) {
 800a92e:	d137      	bne.n	800a9a0 <_lv_img_cache_open+0xcc>
        _lv_memset_00(cached_src, sizeof(lv_img_cache_entry_t));
 800a930:	0020      	movs	r0, r4
 800a932:	2124      	movs	r1, #36	; 0x24
 800a934:	f001 fcca 	bl	800c2cc <_lv_memset_00>
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
 800a938:	2380      	movs	r3, #128	; 0x80
 800a93a:	061b      	lsls	r3, r3, #24
 800a93c:	6223      	str	r3, [r4, #32]
        return NULL;
 800a93e:	0034      	movs	r4, r6
 800a940:	e01c      	b.n	800a97c <_lv_img_cache_open+0xa8>
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
 800a942:	6819      	ldr	r1, [r3, #0]
 800a944:	4281      	cmp	r1, r0
 800a946:	db01      	blt.n	800a94c <_lv_img_cache_open+0x78>
            cache[i].life -= LV_IMG_CACHE_AGING;
 800a948:	3901      	subs	r1, #1
 800a94a:	6019      	str	r1, [r3, #0]
 800a94c:	3324      	adds	r3, #36	; 0x24
 800a94e:	e7d1      	b.n	800a8f4 <_lv_img_cache_open+0x20>
        if(color.full == cache[i].dec_dsc.color.full &&
 800a950:	2424      	movs	r4, #36	; 0x24
 800a952:	466b      	mov	r3, sp
 800a954:	436c      	muls	r4, r5
 800a956:	1934      	adds	r4, r6, r4
 800a958:	88db      	ldrh	r3, [r3, #6]
 800a95a:	8922      	ldrh	r2, [r4, #8]
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d111      	bne.n	800a984 <_lv_img_cache_open+0xb0>
           lv_img_cache_match(src, cache[i].dec_dsc.src)) {
 800a960:	6861      	ldr	r1, [r4, #4]
 800a962:	0038      	movs	r0, r7
 800a964:	f7ff ff99 	bl	800a89a <lv_img_cache_match>
        if(color.full == cache[i].dec_dsc.color.full &&
 800a968:	2800      	cmp	r0, #0
 800a96a:	d00b      	beq.n	800a984 <_lv_img_cache_open+0xb0>
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
 800a96c:	6962      	ldr	r2, [r4, #20]
 800a96e:	6a23      	ldr	r3, [r4, #32]
 800a970:	189b      	adds	r3, r3, r2
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
 800a972:	22fa      	movs	r2, #250	; 0xfa
 800a974:	0092      	lsls	r2, r2, #2
 800a976:	4293      	cmp	r3, r2
 800a978:	dc02      	bgt.n	800a980 <_lv_img_cache_open+0xac>
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
 800a97a:	6223      	str	r3, [r4, #32]
}
 800a97c:	0020      	movs	r0, r4
 800a97e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
 800a980:	6222      	str	r2, [r4, #32]
 800a982:	e7fb      	b.n	800a97c <_lv_img_cache_open+0xa8>
    for(i = 0; i < entry_cnt; i++) {
 800a984:	3501      	adds	r5, #1
 800a986:	b2ad      	uxth	r5, r5
 800a988:	e7b7      	b.n	800a8fa <_lv_img_cache_open+0x26>
        if(cache[i].life < cached_src->life) {
 800a98a:	6a15      	ldr	r5, [r2, #32]
 800a98c:	6a26      	ldr	r6, [r4, #32]
 800a98e:	0010      	movs	r0, r2
 800a990:	42b5      	cmp	r5, r6
 800a992:	db00      	blt.n	800a996 <_lv_img_cache_open+0xc2>
 800a994:	0020      	movs	r0, r4
    for(i = 1; i < entry_cnt; i++) {
 800a996:	3301      	adds	r3, #1
 800a998:	b29b      	uxth	r3, r3
 800a99a:	3224      	adds	r2, #36	; 0x24
 800a99c:	0004      	movs	r4, r0
 800a99e:	e7b4      	b.n	800a90a <_lv_img_cache_open+0x36>
    cached_src->life = 0;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	6223      	str	r3, [r4, #32]
    if(cached_src->dec_dsc.time_to_open == 0) {
 800a9a4:	6963      	ldr	r3, [r4, #20]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d103      	bne.n	800a9b2 <_lv_img_cache_open+0xde>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 800a9aa:	0028      	movs	r0, r5
 800a9ac:	f000 fe0e 	bl	800b5cc <lv_tick_elaps>
 800a9b0:	6160      	str	r0, [r4, #20]
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 800a9b2:	6963      	ldr	r3, [r4, #20]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d1e1      	bne.n	800a97c <_lv_img_cache_open+0xa8>
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	6163      	str	r3, [r4, #20]
 800a9bc:	e7de      	b.n	800a97c <_lv_img_cache_open+0xa8>
 800a9be:	46c0      	nop			; (mov r8, r8)
 800a9c0:	20005e36 	.word	0x20005e36
 800a9c4:	200071b0 	.word	0x200071b0
 800a9c8:	80000002 	.word	0x80000002

0800a9cc <lv_img_cache_invalidate_src>:
{
 800a9cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9ce:	0006      	movs	r6, r0
    for(i = 0; i < entry_cnt; i++) {
 800a9d0:	2400      	movs	r4, #0
 800a9d2:	2724      	movs	r7, #36	; 0x24
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 800a9d4:	4b11      	ldr	r3, [pc, #68]	; (800aa1c <lv_img_cache_invalidate_src+0x50>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	9301      	str	r3, [sp, #4]
    for(i = 0; i < entry_cnt; i++) {
 800a9da:	4b11      	ldr	r3, [pc, #68]	; (800aa20 <lv_img_cache_invalidate_src+0x54>)
 800a9dc:	881b      	ldrh	r3, [r3, #0]
 800a9de:	42a3      	cmp	r3, r4
 800a9e0:	d800      	bhi.n	800a9e4 <lv_img_cache_invalidate_src+0x18>
}
 800a9e2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a9e4:	003d      	movs	r5, r7
 800a9e6:	4365      	muls	r5, r4
 800a9e8:	9b01      	ldr	r3, [sp, #4]
 800a9ea:	195d      	adds	r5, r3, r5
        if(src == NULL || lv_img_cache_match(src, cache[i].dec_dsc.src)) {
 800a9ec:	2e00      	cmp	r6, #0
 800a9ee:	d107      	bne.n	800aa00 <lv_img_cache_invalidate_src+0x34>
            if(cache[i].dec_dsc.src != NULL) {
 800a9f0:	686b      	ldr	r3, [r5, #4]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d10d      	bne.n	800aa12 <lv_img_cache_invalidate_src+0x46>
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
 800a9f6:	0039      	movs	r1, r7
 800a9f8:	0028      	movs	r0, r5
 800a9fa:	f001 fc67 	bl	800c2cc <_lv_memset_00>
 800a9fe:	e005      	b.n	800aa0c <lv_img_cache_invalidate_src+0x40>
        if(src == NULL || lv_img_cache_match(src, cache[i].dec_dsc.src)) {
 800aa00:	6869      	ldr	r1, [r5, #4]
 800aa02:	0030      	movs	r0, r6
 800aa04:	f7ff ff49 	bl	800a89a <lv_img_cache_match>
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	d1f1      	bne.n	800a9f0 <lv_img_cache_invalidate_src+0x24>
    for(i = 0; i < entry_cnt; i++) {
 800aa0c:	3401      	adds	r4, #1
 800aa0e:	b2a4      	uxth	r4, r4
 800aa10:	e7e3      	b.n	800a9da <lv_img_cache_invalidate_src+0xe>
                lv_img_decoder_close(&cache[i].dec_dsc);
 800aa12:	0028      	movs	r0, r5
 800aa14:	f000 f91d 	bl	800ac52 <lv_img_decoder_close>
 800aa18:	e7ed      	b.n	800a9f6 <lv_img_cache_invalidate_src+0x2a>
 800aa1a:	46c0      	nop			; (mov r8, r8)
 800aa1c:	200071b0 	.word	0x200071b0
 800aa20:	20005e36 	.word	0x20005e36

0800aa24 <lv_img_cache_set_size>:
{
 800aa24:	b570      	push	{r4, r5, r6, lr}
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 800aa26:	4d0d      	ldr	r5, [pc, #52]	; (800aa5c <lv_img_cache_set_size+0x38>)
{
 800aa28:	0006      	movs	r6, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 800aa2a:	682b      	ldr	r3, [r5, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d005      	beq.n	800aa3c <lv_img_cache_set_size+0x18>
        lv_img_cache_invalidate_src(NULL);
 800aa30:	2000      	movs	r0, #0
 800aa32:	f7ff ffcb 	bl	800a9cc <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
 800aa36:	6828      	ldr	r0, [r5, #0]
 800aa38:	f001 fa8e 	bl	800bf58 <lv_mem_free>
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
 800aa3c:	2424      	movs	r4, #36	; 0x24
 800aa3e:	4374      	muls	r4, r6
 800aa40:	0020      	movs	r0, r4
 800aa42:	f001 fa35 	bl	800beb0 <lv_mem_alloc>
 800aa46:	4b06      	ldr	r3, [pc, #24]	; (800aa60 <lv_img_cache_set_size+0x3c>)
 800aa48:	6028      	str	r0, [r5, #0]
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
 800aa4a:	2800      	cmp	r0, #0
 800aa4c:	d101      	bne.n	800aa52 <lv_img_cache_set_size+0x2e>
        entry_cnt = 0;
 800aa4e:	8018      	strh	r0, [r3, #0]
}
 800aa50:	bd70      	pop	{r4, r5, r6, pc}
    _lv_memset_00(LV_GC_ROOT(_lv_img_cache_array), entry_cnt * sizeof(lv_img_cache_entry_t));
 800aa52:	0021      	movs	r1, r4
    entry_cnt = new_entry_cnt;
 800aa54:	801e      	strh	r6, [r3, #0]
    _lv_memset_00(LV_GC_ROOT(_lv_img_cache_array), entry_cnt * sizeof(lv_img_cache_entry_t));
 800aa56:	f001 fc39 	bl	800c2cc <_lv_memset_00>
 800aa5a:	e7f9      	b.n	800aa50 <lv_img_cache_set_size+0x2c>
 800aa5c:	200071b0 	.word	0x200071b0
 800aa60:	20005e36 	.word	0x20005e36

0800aa64 <lv_img_decoder_built_in_read_line>:
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
        return LV_RES_INV;
    }

    return res;
}
 800aa64:	2000      	movs	r0, #0
 800aa66:	4770      	bx	lr

0800aa68 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 800aa68:	b570      	push	{r4, r5, r6, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800aa6a:	69cc      	ldr	r4, [r1, #28]
{
 800aa6c:	000d      	movs	r5, r1
    if(user_data) {
 800aa6e:	2c00      	cmp	r4, #0
 800aa70:	d00e      	beq.n	800aa90 <lv_img_decoder_built_in_close+0x28>
#if LV_USE_FILESYSTEM
        if(dsc->src_type == LV_IMG_SRC_FILE)
            lv_fs_close(&user_data->f);
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
 800aa72:	6820      	ldr	r0, [r4, #0]
 800aa74:	2800      	cmp	r0, #0
 800aa76:	d001      	beq.n	800aa7c <lv_img_decoder_built_in_close+0x14>
 800aa78:	f001 fa6e 	bl	800bf58 <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 800aa7c:	6860      	ldr	r0, [r4, #4]
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	d001      	beq.n	800aa86 <lv_img_decoder_built_in_close+0x1e>
 800aa82:	f001 fa69 	bl	800bf58 <lv_mem_free>

        lv_mem_free(user_data);
 800aa86:	0020      	movs	r0, r4
 800aa88:	f001 fa66 	bl	800bf58 <lv_mem_free>
        dsc->user_data = NULL;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	61eb      	str	r3, [r5, #28]
    }
}
 800aa90:	bd70      	pop	{r4, r5, r6, pc}

0800aa92 <lv_img_decoder_built_in_open>:
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800aa92:	7a8a      	ldrb	r2, [r1, #10]
{
 800aa94:	b510      	push	{r4, lr}
        return LV_RES_INV;
 800aa96:	2300      	movs	r3, #0
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800aa98:	2a01      	cmp	r2, #1
 800aa9a:	d011      	beq.n	800aac0 <lv_img_decoder_built_in_open+0x2e>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d103      	bne.n	800aaa8 <lv_img_decoder_built_in_open+0x16>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
 800aaa0:	684b      	ldr	r3, [r1, #4]
 800aaa2:	689c      	ldr	r4, [r3, #8]
        return LV_RES_INV;
 800aaa4:	1e23      	subs	r3, r4, #0
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
 800aaa6:	d00b      	beq.n	800aac0 <lv_img_decoder_built_in_open+0x2e>
    lv_img_cf_t cf = dsc->header.cf;
 800aaa8:	7b0b      	ldrb	r3, [r1, #12]
 800aaaa:	06db      	lsls	r3, r3, #27
 800aaac:	0edb      	lsrs	r3, r3, #27
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800aaae:	3b04      	subs	r3, #4
 800aab0:	2b02      	cmp	r3, #2
 800aab2:	d807      	bhi.n	800aac4 <lv_img_decoder_built_in_open+0x32>
            return LV_RES_OK;
 800aab4:	2301      	movs	r3, #1
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800aab6:	2a00      	cmp	r2, #0
 800aab8:	d102      	bne.n	800aac0 <lv_img_decoder_built_in_open+0x2e>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 800aaba:	684a      	ldr	r2, [r1, #4]
 800aabc:	6892      	ldr	r2, [r2, #8]
 800aabe:	610a      	str	r2, [r1, #16]
}
 800aac0:	0018      	movs	r0, r3
 800aac2:	bd10      	pop	{r4, pc}
        lv_img_decoder_built_in_close(decoder, dsc);
 800aac4:	f7ff ffd0 	bl	800aa68 <lv_img_decoder_built_in_close>
        return LV_RES_INV;
 800aac8:	2300      	movs	r3, #0
 800aaca:	e7f9      	b.n	800aac0 <lv_img_decoder_built_in_open+0x2e>

0800aacc <lv_img_decoder_built_in_info>:
{
 800aacc:	b570      	push	{r4, r5, r6, lr}
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800aace:	0008      	movs	r0, r1
{
 800aad0:	000d      	movs	r5, r1
 800aad2:	0014      	movs	r4, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800aad4:	f7fd f870 	bl	8007bb8 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 800aad8:	2800      	cmp	r0, #0
 800aada:	d11e      	bne.n	800ab1a <lv_img_decoder_built_in_info+0x4e>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 800aadc:	782a      	ldrb	r2, [r5, #0]
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800aade:	0003      	movs	r3, r0
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 800aae0:	06d2      	lsls	r2, r2, #27
 800aae2:	0ed2      	lsrs	r2, r2, #27
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800aae4:	1f11      	subs	r1, r2, #4
 800aae6:	290a      	cmp	r1, #10
 800aae8:	d815      	bhi.n	800ab16 <lv_img_decoder_built_in_info+0x4a>
        header->w  = ((lv_img_dsc_t *)src)->header.w;
 800aaea:	6820      	ldr	r0, [r4, #0]
 800aaec:	4914      	ldr	r1, [pc, #80]	; (800ab40 <lv_img_decoder_built_in_info+0x74>)
 800aaee:	682b      	ldr	r3, [r5, #0]
 800aaf0:	4001      	ands	r1, r0
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800aaf2:	201f      	movs	r0, #31
        header->w  = ((lv_img_dsc_t *)src)->header.w;
 800aaf4:	02db      	lsls	r3, r3, #11
 800aaf6:	0d5b      	lsrs	r3, r3, #21
 800aaf8:	029b      	lsls	r3, r3, #10
 800aafa:	430b      	orrs	r3, r1
 800aafc:	6023      	str	r3, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800aafe:	886b      	ldrh	r3, [r5, #2]
 800ab00:	095b      	lsrs	r3, r3, #5
 800ab02:	0159      	lsls	r1, r3, #5
 800ab04:	8863      	ldrh	r3, [r4, #2]
 800ab06:	4003      	ands	r3, r0
 800ab08:	430b      	orrs	r3, r1
 800ab0a:	8063      	strh	r3, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 800ab0c:	7823      	ldrb	r3, [r4, #0]
 800ab0e:	4383      	bics	r3, r0
 800ab10:	431a      	orrs	r2, r3
 800ab12:	7022      	strb	r2, [r4, #0]
    return LV_RES_OK;
 800ab14:	2301      	movs	r3, #1
}
 800ab16:	0018      	movs	r0, r3
 800ab18:	bd70      	pop	{r4, r5, r6, pc}
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800ab1a:	2300      	movs	r3, #0
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 800ab1c:	2802      	cmp	r0, #2
 800ab1e:	d1fa      	bne.n	800ab16 <lv_img_decoder_built_in_info+0x4a>
        header->w = 1;
 800ab20:	6823      	ldr	r3, [r4, #0]
 800ab22:	4a07      	ldr	r2, [pc, #28]	; (800ab40 <lv_img_decoder_built_in_info+0x74>)
 800ab24:	401a      	ands	r2, r3
 800ab26:	2380      	movs	r3, #128	; 0x80
 800ab28:	00db      	lsls	r3, r3, #3
 800ab2a:	4313      	orrs	r3, r2
        header->h = 1;
 800ab2c:	2220      	movs	r2, #32
        header->w = 1;
 800ab2e:	6023      	str	r3, [r4, #0]
        header->h = 1;
 800ab30:	8062      	strh	r2, [r4, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 800ab32:	32c0      	adds	r2, #192	; 0xc0
 800ab34:	4013      	ands	r3, r2
 800ab36:	3ad5      	subs	r2, #213	; 0xd5
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	7023      	strb	r3, [r4, #0]
 800ab3c:	e7ea      	b.n	800ab14 <lv_img_decoder_built_in_info+0x48>
 800ab3e:	46c0      	nop			; (mov r8, r8)
 800ab40:	ffe003ff 	.word	0xffe003ff

0800ab44 <lv_img_decoder_get_info>:
{
 800ab44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab46:	000e      	movs	r6, r1
 800ab48:	9001      	str	r0, [sp, #4]
   _lv_memset_00(header, sizeof(lv_img_header_t));
 800ab4a:	2104      	movs	r1, #4
 800ab4c:	0030      	movs	r0, r6
 800ab4e:	f001 fbbd 	bl	800c2cc <_lv_memset_00>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 800ab52:	4f0d      	ldr	r7, [pc, #52]	; (800ab88 <lv_img_decoder_get_info+0x44>)
    lv_res_t res = LV_RES_INV;
 800ab54:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 800ab56:	0038      	movs	r0, r7
 800ab58:	f001 f85d 	bl	800bc16 <_lv_ll_get_head>
 800ab5c:	0004      	movs	r4, r0
 800ab5e:	2c00      	cmp	r4, #0
 800ab60:	d101      	bne.n	800ab66 <lv_img_decoder_get_info+0x22>
}
 800ab62:	0028      	movs	r0, r5
 800ab64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if(d->info_cb) {
 800ab66:	6823      	ldr	r3, [r4, #0]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d006      	beq.n	800ab7a <lv_img_decoder_get_info+0x36>
            res = d->info_cb(d, src, header);
 800ab6c:	0032      	movs	r2, r6
 800ab6e:	9901      	ldr	r1, [sp, #4]
 800ab70:	0020      	movs	r0, r4
 800ab72:	4798      	blx	r3
 800ab74:	0005      	movs	r5, r0
            if(res == LV_RES_OK) break;
 800ab76:	2801      	cmp	r0, #1
 800ab78:	d0f3      	beq.n	800ab62 <lv_img_decoder_get_info+0x1e>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 800ab7a:	0021      	movs	r1, r4
 800ab7c:	0038      	movs	r0, r7
 800ab7e:	f001 f852 	bl	800bc26 <_lv_ll_get_next>
 800ab82:	0004      	movs	r4, r0
 800ab84:	e7eb      	b.n	800ab5e <lv_img_decoder_get_info+0x1a>
 800ab86:	46c0      	nop			; (mov r8, r8)
 800ab88:	200070fc 	.word	0x200070fc

0800ab8c <lv_img_decoder_open>:
{
 800ab8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab8e:	0004      	movs	r4, r0
 800ab90:	000f      	movs	r7, r1
 800ab92:	1c15      	adds	r5, r2, #0
    _lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
 800ab94:	2120      	movs	r1, #32
 800ab96:	f001 fb99 	bl	800c2cc <_lv_memset_00>
    dsc->color    = color;
 800ab9a:	8125      	strh	r5, [r4, #8]
    dsc->src_type = lv_img_src_get_type(src);
 800ab9c:	0038      	movs	r0, r7
 800ab9e:	f7fd f80b 	bl	8007bb8 <lv_img_src_get_type>
 800aba2:	72a0      	strb	r0, [r4, #10]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800aba4:	2801      	cmp	r0, #1
 800aba6:	d11b      	bne.n	800abe0 <lv_img_decoder_open+0x54>
        size_t fnlen = strlen(src);
 800aba8:	0038      	movs	r0, r7
 800abaa:	f7f5 fab3 	bl	8000114 <strlen>
        dsc->src = lv_mem_alloc(fnlen + 1);
 800abae:	3001      	adds	r0, #1
 800abb0:	f001 f97e 	bl	800beb0 <lv_mem_alloc>
            return LV_RES_INV;
 800abb4:	2600      	movs	r6, #0
        dsc->src = lv_mem_alloc(fnlen + 1);
 800abb6:	6060      	str	r0, [r4, #4]
        if(dsc->src == NULL) {
 800abb8:	42b0      	cmp	r0, r6
 800abba:	d00f      	beq.n	800abdc <lv_img_decoder_open+0x50>
        strcpy((char *)dsc->src, src);
 800abbc:	0039      	movs	r1, r7
 800abbe:	f003 fa4b 	bl	800e058 <strcpy>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 800abc2:	481b      	ldr	r0, [pc, #108]	; (800ac30 <lv_img_decoder_open+0xa4>)
 800abc4:	f001 f827 	bl	800bc16 <_lv_ll_get_head>
    lv_res_t res = LV_RES_INV;
 800abc8:	2600      	movs	r6, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 800abca:	0005      	movs	r5, r0
 800abcc:	2d00      	cmp	r5, #0
 800abce:	d109      	bne.n	800abe4 <lv_img_decoder_open+0x58>
    if(dsc->src_type == LV_IMG_SRC_FILE)
 800abd0:	7aa3      	ldrb	r3, [r4, #10]
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d102      	bne.n	800abdc <lv_img_decoder_open+0x50>
        lv_mem_free(dsc->src);
 800abd6:	6860      	ldr	r0, [r4, #4]
 800abd8:	f001 f9be 	bl	800bf58 <lv_mem_free>
}
 800abdc:	0030      	movs	r0, r6
 800abde:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        dsc->src = src;
 800abe0:	6067      	str	r7, [r4, #4]
 800abe2:	e7ee      	b.n	800abc2 <lv_img_decoder_open+0x36>
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
 800abe4:	682b      	ldr	r3, [r5, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d01c      	beq.n	800ac24 <lv_img_decoder_open+0x98>
 800abea:	686a      	ldr	r2, [r5, #4]
 800abec:	2a00      	cmp	r2, #0
 800abee:	d019      	beq.n	800ac24 <lv_img_decoder_open+0x98>
        res = d->info_cb(d, src, &dsc->header);
 800abf0:	0022      	movs	r2, r4
 800abf2:	0039      	movs	r1, r7
 800abf4:	320c      	adds	r2, #12
 800abf6:	0028      	movs	r0, r5
 800abf8:	9201      	str	r2, [sp, #4]
 800abfa:	4798      	blx	r3
 800abfc:	0006      	movs	r6, r0
        if(res != LV_RES_OK) continue;
 800abfe:	2801      	cmp	r0, #1
 800ac00:	d110      	bne.n	800ac24 <lv_img_decoder_open+0x98>
        dsc->decoder = d;
 800ac02:	6025      	str	r5, [r4, #0]
        res = d->open_cb(d, dsc);
 800ac04:	0021      	movs	r1, r4
 800ac06:	0028      	movs	r0, r5
 800ac08:	686b      	ldr	r3, [r5, #4]
 800ac0a:	4798      	blx	r3
 800ac0c:	0006      	movs	r6, r0
        if(res == LV_RES_OK) return res;
 800ac0e:	2801      	cmp	r0, #1
 800ac10:	d0e4      	beq.n	800abdc <lv_img_decoder_open+0x50>
        _lv_memset_00(&dsc->header, sizeof(lv_img_header_t));
 800ac12:	2104      	movs	r1, #4
 800ac14:	9801      	ldr	r0, [sp, #4]
 800ac16:	f001 fb59 	bl	800c2cc <_lv_memset_00>
        dsc->error_msg = NULL;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	61a3      	str	r3, [r4, #24]
        dsc->img_data  = NULL;
 800ac1e:	6123      	str	r3, [r4, #16]
        dsc->user_data = NULL;
 800ac20:	61e3      	str	r3, [r4, #28]
        dsc->time_to_open = 0;
 800ac22:	6163      	str	r3, [r4, #20]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 800ac24:	0029      	movs	r1, r5
 800ac26:	4802      	ldr	r0, [pc, #8]	; (800ac30 <lv_img_decoder_open+0xa4>)
 800ac28:	f000 fffd 	bl	800bc26 <_lv_ll_get_next>
 800ac2c:	0005      	movs	r5, r0
 800ac2e:	e7cd      	b.n	800abcc <lv_img_decoder_open+0x40>
 800ac30:	200070fc 	.word	0x200070fc

0800ac34 <lv_img_decoder_read_line>:
{
 800ac34:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 800ac36:	6805      	ldr	r5, [r0, #0]
{
 800ac38:	0006      	movs	r6, r0
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 800ac3a:	68ac      	ldr	r4, [r5, #8]
    lv_res_t res = LV_RES_INV;
 800ac3c:	1e20      	subs	r0, r4, #0
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 800ac3e:	d007      	beq.n	800ac50 <lv_img_decoder_read_line+0x1c>
 800ac40:	9806      	ldr	r0, [sp, #24]
 800ac42:	9300      	str	r3, [sp, #0]
 800ac44:	9001      	str	r0, [sp, #4]
 800ac46:	0013      	movs	r3, r2
 800ac48:	0028      	movs	r0, r5
 800ac4a:	000a      	movs	r2, r1
 800ac4c:	0031      	movs	r1, r6
 800ac4e:	47a0      	blx	r4
}
 800ac50:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

0800ac52 <lv_img_decoder_close>:
{
 800ac52:	b510      	push	{r4, lr}
 800ac54:	0004      	movs	r4, r0
    if(dsc->decoder) {
 800ac56:	6800      	ldr	r0, [r0, #0]
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	d00c      	beq.n	800ac76 <lv_img_decoder_close+0x24>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 800ac5c:	68c3      	ldr	r3, [r0, #12]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d001      	beq.n	800ac66 <lv_img_decoder_close+0x14>
 800ac62:	0021      	movs	r1, r4
 800ac64:	4798      	blx	r3
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800ac66:	7aa3      	ldrb	r3, [r4, #10]
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d104      	bne.n	800ac76 <lv_img_decoder_close+0x24>
            lv_mem_free(dsc->src);
 800ac6c:	6860      	ldr	r0, [r4, #4]
 800ac6e:	f001 f973 	bl	800bf58 <lv_mem_free>
            dsc->src = NULL;
 800ac72:	2300      	movs	r3, #0
 800ac74:	6063      	str	r3, [r4, #4]
}
 800ac76:	bd10      	pop	{r4, pc}

0800ac78 <lv_img_decoder_create>:
{
 800ac78:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
 800ac7a:	4805      	ldr	r0, [pc, #20]	; (800ac90 <lv_img_decoder_create+0x18>)
 800ac7c:	f000 ff8b 	bl	800bb96 <_lv_ll_ins_head>
 800ac80:	1e04      	subs	r4, r0, #0
    if(decoder == NULL) return NULL;
 800ac82:	d002      	beq.n	800ac8a <lv_img_decoder_create+0x12>
    _lv_memset_00(decoder, sizeof(lv_img_decoder_t));
 800ac84:	2110      	movs	r1, #16
 800ac86:	f001 fb21 	bl	800c2cc <_lv_memset_00>
}
 800ac8a:	0020      	movs	r0, r4
 800ac8c:	bd10      	pop	{r4, pc}
 800ac8e:	46c0      	nop			; (mov r8, r8)
 800ac90:	200070fc 	.word	0x200070fc

0800ac94 <_lv_img_decoder_init>:
{
 800ac94:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
 800ac96:	2110      	movs	r1, #16
 800ac98:	4807      	ldr	r0, [pc, #28]	; (800acb8 <_lv_img_decoder_init+0x24>)
 800ac9a:	f000 ff74 	bl	800bb86 <_lv_ll_init>
    decoder = lv_img_decoder_create();
 800ac9e:	f7ff ffeb 	bl	800ac78 <lv_img_decoder_create>
    if(decoder == NULL) {
 800aca2:	2800      	cmp	r0, #0
 800aca4:	d007      	beq.n	800acb6 <_lv_img_decoder_init+0x22>
    decoder->info_cb = info_cb;
 800aca6:	4b05      	ldr	r3, [pc, #20]	; (800acbc <_lv_img_decoder_init+0x28>)
 800aca8:	6003      	str	r3, [r0, #0]
    decoder->open_cb = open_cb;
 800acaa:	4b05      	ldr	r3, [pc, #20]	; (800acc0 <_lv_img_decoder_init+0x2c>)
 800acac:	6043      	str	r3, [r0, #4]
    decoder->read_line_cb = read_line_cb;
 800acae:	4b05      	ldr	r3, [pc, #20]	; (800acc4 <_lv_img_decoder_init+0x30>)
 800acb0:	6083      	str	r3, [r0, #8]
    decoder->close_cb = close_cb;
 800acb2:	4b05      	ldr	r3, [pc, #20]	; (800acc8 <_lv_img_decoder_init+0x34>)
 800acb4:	60c3      	str	r3, [r0, #12]
}
 800acb6:	bd10      	pop	{r4, pc}
 800acb8:	200070fc 	.word	0x200070fc
 800acbc:	0800aacd 	.word	0x0800aacd
 800acc0:	0800aa93 	.word	0x0800aa93
 800acc4:	0800aa65 	.word	0x0800aa65
 800acc8:	0800aa69 	.word	0x0800aa69

0800accc <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter an UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
 800accc:	b510      	push	{r4, lr}
    return font_p->get_glyph_bitmap(font_p, letter);
 800acce:	6843      	ldr	r3, [r0, #4]
 800acd0:	4798      	blx	r3
}
 800acd2:	bd10      	pop	{r4, pc}

0800acd4 <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
 800acd4:	b510      	push	{r4, lr}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 800acd6:	6804      	ldr	r4, [r0, #0]
 800acd8:	47a0      	blx	r4
}
 800acda:	bd10      	pop	{r4, pc}

0800acdc <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 800acdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 800acde:	ac01      	add	r4, sp, #4
{
 800ace0:	0013      	movs	r3, r2
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 800ace2:	000a      	movs	r2, r1
 800ace4:	0021      	movs	r1, r4
 800ace6:	f7ff fff5 	bl	800acd4 <lv_font_get_glyph_dsc>
    if(ret) return g.adv_w;
    else return 0;
 800acea:	2300      	movs	r3, #0
    if(ret) return g.adv_w;
 800acec:	4298      	cmp	r0, r3
 800acee:	d000      	beq.n	800acf2 <lv_font_get_glyph_width+0x16>
 800acf0:	8823      	ldrh	r3, [r4, #0]
}
 800acf2:	0018      	movs	r0, r3
 800acf4:	b004      	add	sp, #16
 800acf6:	bd10      	pop	{r4, pc}

0800acf8 <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 800acf8:	7803      	ldrb	r3, [r0, #0]
 800acfa:	780a      	ldrb	r2, [r1, #0]
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d001      	beq.n	800ad04 <kern_pair_8_compare+0xc>
 800ad00:	1a98      	subs	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];

}
 800ad02:	4770      	bx	lr
    else return (int32_t) ref8_p[1] - element8_p[1];
 800ad04:	7840      	ldrb	r0, [r0, #1]
 800ad06:	784b      	ldrb	r3, [r1, #1]
 800ad08:	1ac0      	subs	r0, r0, r3
 800ad0a:	e7fa      	b.n	800ad02 <kern_pair_8_compare+0xa>

0800ad0c <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 800ad0c:	8803      	ldrh	r3, [r0, #0]
 800ad0e:	880a      	ldrh	r2, [r1, #0]
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d001      	beq.n	800ad18 <kern_pair_16_compare+0xc>
 800ad14:	1a98      	subs	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
}
 800ad16:	4770      	bx	lr
    else return (int32_t) ref16_p[1] - element16_p[1];
 800ad18:	8840      	ldrh	r0, [r0, #2]
 800ad1a:	884b      	ldrh	r3, [r1, #2]
 800ad1c:	1ac0      	subs	r0, r0, r3
 800ad1e:	e7fa      	b.n	800ad16 <kern_pair_16_compare+0xa>

0800ad20 <get_bits>:
 * @param bit_pos index of the first bit to read.
 * @param len number of bits to read (must be <= 8).
 * @return the read bits
 */
static inline uint8_t get_bits(const uint8_t * in, uint32_t bit_pos, uint8_t len)
{
 800ad20:	b570      	push	{r4, r5, r6, lr}
 800ad22:	0005      	movs	r5, r0
    uint8_t bit_mask;
    switch(len) {
 800ad24:	1e50      	subs	r0, r2, #1
 800ad26:	2807      	cmp	r0, #7
 800ad28:	d820      	bhi.n	800ad6c <get_bits+0x4c>
 800ad2a:	f7f5 fa05 	bl	8000138 <__gnu_thumb1_case_uqi>
 800ad2e:	2404      	.short	0x2404
 800ad30:	1f1f1b19 	.word	0x1f1f1b19
 800ad34:	1d1f      	.short	0x1d1f
        case 1:
            bit_mask = 0x1;
 800ad36:	0013      	movs	r3, r2
        default:
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    }

    uint32_t byte_pos = bit_pos >> 3;
    bit_pos = bit_pos & 0x7;
 800ad38:	2007      	movs	r0, #7
    uint32_t byte_pos = bit_pos >> 3;
 800ad3a:	08ce      	lsrs	r6, r1, #3
    bit_pos = bit_pos & 0x7;
 800ad3c:	4001      	ands	r1, r0
 800ad3e:	b25c      	sxtb	r4, r3

    if(bit_pos + len >= 8) {
 800ad40:	1853      	adds	r3, r2, r1
 800ad42:	5da8      	ldrb	r0, [r5, r6]
 800ad44:	2b07      	cmp	r3, #7
 800ad46:	d918      	bls.n	800ad7a <get_bits+0x5a>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 800ad48:	19ad      	adds	r5, r5, r6
 800ad4a:	786b      	ldrb	r3, [r5, #1]
 800ad4c:	0200      	lsls	r0, r0, #8
 800ad4e:	181b      	adds	r3, r3, r0
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 800ad50:	2010      	movs	r0, #16
 800ad52:	1a41      	subs	r1, r0, r1
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	1a8a      	subs	r2, r1, r2
 800ad58:	4113      	asrs	r3, r2
 800ad5a:	4023      	ands	r3, r4
 800ad5c:	b2d8      	uxtb	r0, r3
    }
    else {
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    }
}
 800ad5e:	bd70      	pop	{r4, r5, r6, pc}
            bit_mask = 0x7;
 800ad60:	2307      	movs	r3, #7
            break;
 800ad62:	e7e9      	b.n	800ad38 <get_bits+0x18>
            bit_mask = 0xF;
 800ad64:	230f      	movs	r3, #15
            break;
 800ad66:	e7e7      	b.n	800ad38 <get_bits+0x18>
            bit_mask = 0xFF;
 800ad68:	23ff      	movs	r3, #255	; 0xff
            break;
 800ad6a:	e7e5      	b.n	800ad38 <get_bits+0x18>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	4093      	lsls	r3, r2
 800ad70:	3b01      	subs	r3, #1
 800ad72:	b2db      	uxtb	r3, r3
 800ad74:	e7e0      	b.n	800ad38 <get_bits+0x18>
            bit_mask = 0x3;
 800ad76:	2303      	movs	r3, #3
 800ad78:	e7de      	b.n	800ad38 <get_bits+0x18>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
 800ad7a:	2308      	movs	r3, #8
 800ad7c:	1a59      	subs	r1, r3, r1
 800ad7e:	1a8a      	subs	r2, r1, r2
 800ad80:	4110      	asrs	r0, r2
 800ad82:	4020      	ands	r0, r4
 800ad84:	b2c0      	uxtb	r0, r0
 800ad86:	e7ea      	b.n	800ad5e <get_bits+0x3e>

0800ad88 <bits_write>:
 * @param val value to write
 * @param len length of bits to write from `val`. (Counted from the LSB).
 * @note `len == 3` will be converted to `len = 4` and `val` will be upscaled too
 */
static inline void bits_write(uint8_t * out, uint32_t bit_pos, uint8_t val, uint8_t len)
{
 800ad88:	b530      	push	{r4, r5, lr}
 800ad8a:	0005      	movs	r5, r0
    if(len == 3) {
 800ad8c:	2b03      	cmp	r3, #3
 800ad8e:	d10b      	bne.n	800ada8 <bits_write+0x20>
        len = 4;
        switch(val) {
 800ad90:	1e50      	subs	r0, r2, #1
        len = 4;
 800ad92:	3301      	adds	r3, #1
        switch(val) {
 800ad94:	2806      	cmp	r0, #6
 800ad96:	d807      	bhi.n	800ada8 <bits_write+0x20>
 800ad98:	f7f5 f9ce 	bl	8000138 <__gnu_thumb1_case_uqi>
 800ad9c:	211e1b04 	.word	0x211e1b04
 800ada0:	2724      	.short	0x2724
 800ada2:	2a          	.byte	0x2a
 800ada3:	00          	.byte	0x00
        len = 4;
 800ada4:	2304      	movs	r3, #4
            case 0:
                val = 0;
                break;
            case 1:
                val = 2;
 800ada6:	2202      	movs	r2, #2
                break;
        }
    }

    uint16_t byte_pos = bit_pos >> 3;
    bit_pos = bit_pos & 0x7;
 800ada8:	2007      	movs	r0, #7
 800adaa:	2408      	movs	r4, #8
 800adac:	4008      	ands	r0, r1
    uint16_t byte_pos = bit_pos >> 3;
 800adae:	08c9      	lsrs	r1, r1, #3
 800adb0:	1a24      	subs	r4, r4, r0
    bit_pos = 8 - bit_pos - len;

    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 800adb2:	b288      	uxth	r0, r1
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
 800adb4:	2101      	movs	r1, #1
 800adb6:	4099      	lsls	r1, r3
    bit_pos = 8 - bit_pos - len;
 800adb8:	1ae4      	subs	r4, r4, r3
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
 800adba:	000b      	movs	r3, r1
 800adbc:	3b01      	subs	r3, #1
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 800adbe:	b2db      	uxtb	r3, r3
 800adc0:	43db      	mvns	r3, r3
 800adc2:	40a3      	lsls	r3, r4
    out[byte_pos] |= (val << bit_pos);
 800adc4:	40a2      	lsls	r2, r4
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 800adc6:	1828      	adds	r0, r5, r0
 800adc8:	7801      	ldrb	r1, [r0, #0]
 800adca:	400b      	ands	r3, r1
    out[byte_pos] |= (val << bit_pos);
 800adcc:	431a      	orrs	r2, r3
 800adce:	7002      	strb	r2, [r0, #0]
}
 800add0:	bd30      	pop	{r4, r5, pc}
        len = 4;
 800add2:	2304      	movs	r3, #4
                val = 4;
 800add4:	001a      	movs	r2, r3
                break;
 800add6:	e7e7      	b.n	800ada8 <bits_write+0x20>
        len = 4;
 800add8:	2304      	movs	r3, #4
                val = 6;
 800adda:	2206      	movs	r2, #6
                break;
 800addc:	e7e4      	b.n	800ada8 <bits_write+0x20>
        len = 4;
 800adde:	0013      	movs	r3, r2
                val = 9;
 800ade0:	2209      	movs	r2, #9
                break;
 800ade2:	e7e1      	b.n	800ada8 <bits_write+0x20>
        len = 4;
 800ade4:	2304      	movs	r3, #4
                val = 11;
 800ade6:	220b      	movs	r2, #11
                break;
 800ade8:	e7de      	b.n	800ada8 <bits_write+0x20>
        len = 4;
 800adea:	2304      	movs	r3, #4
                val = 13;
 800adec:	220d      	movs	r2, #13
                break;
 800adee:	e7db      	b.n	800ada8 <bits_write+0x20>
        len = 4;
 800adf0:	2304      	movs	r3, #4
                val = 15;
 800adf2:	220f      	movs	r2, #15
                break;
 800adf4:	e7d8      	b.n	800ada8 <bits_write+0x20>
	...

0800adf8 <decompress_line>:
{
 800adf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    }
    else if(rle_state == RLE_STATE_COUNTER) {
        ret = rle_prev_v;
        rle_cnt--;
        if(rle_cnt == 0) {
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 800adfa:	4b46      	ldr	r3, [pc, #280]	; (800af14 <decompress_line+0x11c>)
{
 800adfc:	b085      	sub	sp, #20
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	9002      	str	r0, [sp, #8]
 800ae02:	9301      	str	r3, [sp, #4]
 800ae04:	4b44      	ldr	r3, [pc, #272]	; (800af18 <decompress_line+0x120>)
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	9300      	str	r3, [sp, #0]
 800ae0a:	1843      	adds	r3, r0, r1
 800ae0c:	9303      	str	r3, [sp, #12]
    for(i = 0; i < w; i++) {
 800ae0e:	9b03      	ldr	r3, [sp, #12]
 800ae10:	9a02      	ldr	r2, [sp, #8]
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d101      	bne.n	800ae1a <decompress_line+0x22>
}
 800ae16:	b005      	add	sp, #20
 800ae18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(rle_state == RLE_STATE_SINGLE) {
 800ae1a:	4b40      	ldr	r3, [pc, #256]	; (800af1c <decompress_line+0x124>)
 800ae1c:	781d      	ldrb	r5, [r3, #0]
 800ae1e:	2d00      	cmp	r5, #0
 800ae20:	d11c      	bne.n	800ae5c <decompress_line+0x64>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
 800ae22:	4f3f      	ldr	r7, [pc, #252]	; (800af20 <decompress_line+0x128>)
 800ae24:	9a00      	ldr	r2, [sp, #0]
 800ae26:	683e      	ldr	r6, [r7, #0]
 800ae28:	9801      	ldr	r0, [sp, #4]
 800ae2a:	0031      	movs	r1, r6
 800ae2c:	f7ff ff78 	bl	800ad20 <get_bits>
 800ae30:	0004      	movs	r4, r0
        if(rle_rdp != 0 && rle_prev_v == ret) {
 800ae32:	2e00      	cmp	r6, #0
 800ae34:	d008      	beq.n	800ae48 <decompress_line+0x50>
 800ae36:	4b3b      	ldr	r3, [pc, #236]	; (800af24 <decompress_line+0x12c>)
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	4283      	cmp	r3, r0
 800ae3c:	d104      	bne.n	800ae48 <decompress_line+0x50>
            rle_cnt = 0;
 800ae3e:	4b3a      	ldr	r3, [pc, #232]	; (800af28 <decompress_line+0x130>)
            rle_state = RLE_STATE_REPEATE;
 800ae40:	4a36      	ldr	r2, [pc, #216]	; (800af1c <decompress_line+0x124>)
            rle_cnt = 0;
 800ae42:	701d      	strb	r5, [r3, #0]
            rle_state = RLE_STATE_REPEATE;
 800ae44:	2301      	movs	r3, #1
 800ae46:	7013      	strb	r3, [r2, #0]
        rle_prev_v = ret;
 800ae48:	4b36      	ldr	r3, [pc, #216]	; (800af24 <decompress_line+0x12c>)
 800ae4a:	7018      	strb	r0, [r3, #0]
        rle_rdp += rle_bpp;
 800ae4c:	9b00      	ldr	r3, [sp, #0]
 800ae4e:	18f6      	adds	r6, r6, r3
 800ae50:	603e      	str	r6, [r7, #0]
        out[i] = rle_next();
 800ae52:	9b02      	ldr	r3, [sp, #8]
 800ae54:	701c      	strb	r4, [r3, #0]
 800ae56:	3301      	adds	r3, #1
 800ae58:	9302      	str	r3, [sp, #8]
 800ae5a:	e7d8      	b.n	800ae0e <decompress_line+0x16>
    else if(rle_state == RLE_STATE_REPEATE) {
 800ae5c:	2d01      	cmp	r5, #1
 800ae5e:	d13f      	bne.n	800aee0 <decompress_line+0xe8>
        v = get_bits(rle_in, rle_rdp, 1);
 800ae60:	4e2f      	ldr	r6, [pc, #188]	; (800af20 <decompress_line+0x128>)
 800ae62:	002a      	movs	r2, r5
 800ae64:	6837      	ldr	r7, [r6, #0]
 800ae66:	9801      	ldr	r0, [sp, #4]
 800ae68:	0039      	movs	r1, r7
 800ae6a:	f7ff ff59 	bl	800ad20 <get_bits>
        rle_cnt++;
 800ae6e:	4b2e      	ldr	r3, [pc, #184]	; (800af28 <decompress_line+0x130>)
 800ae70:	4a2d      	ldr	r2, [pc, #180]	; (800af28 <decompress_line+0x130>)
 800ae72:	781b      	ldrb	r3, [r3, #0]
        rle_rdp += 1;
 800ae74:	1c7d      	adds	r5, r7, #1
        rle_cnt++;
 800ae76:	3301      	adds	r3, #1
 800ae78:	b2db      	uxtb	r3, r3
 800ae7a:	7013      	strb	r3, [r2, #0]
        rle_rdp += 1;
 800ae7c:	6035      	str	r5, [r6, #0]
        if(v == 1) {
 800ae7e:	2801      	cmp	r0, #1
 800ae80:	d120      	bne.n	800aec4 <decompress_line+0xcc>
            ret = rle_prev_v;
 800ae82:	4a28      	ldr	r2, [pc, #160]	; (800af24 <decompress_line+0x12c>)
 800ae84:	7814      	ldrb	r4, [r2, #0]
            if(rle_cnt == 11) {
 800ae86:	2b0b      	cmp	r3, #11
 800ae88:	d1e3      	bne.n	800ae52 <decompress_line+0x5a>
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
 800ae8a:	0029      	movs	r1, r5
 800ae8c:	2206      	movs	r2, #6
 800ae8e:	9801      	ldr	r0, [sp, #4]
 800ae90:	f7ff ff46 	bl	800ad20 <get_bits>
 800ae94:	4b24      	ldr	r3, [pc, #144]	; (800af28 <decompress_line+0x130>)
                rle_rdp += 6;
 800ae96:	3707      	adds	r7, #7
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
 800ae98:	1e05      	subs	r5, r0, #0
 800ae9a:	7018      	strb	r0, [r3, #0]
                rle_rdp += 6;
 800ae9c:	6037      	str	r7, [r6, #0]
                if(rle_cnt != 0) {
 800ae9e:	d003      	beq.n	800aea8 <decompress_line+0xb0>
                    rle_state = RLE_STATE_COUNTER;
 800aea0:	2202      	movs	r2, #2
 800aea2:	4b1e      	ldr	r3, [pc, #120]	; (800af1c <decompress_line+0x124>)
            rle_state = RLE_STATE_SINGLE;
 800aea4:	701a      	strb	r2, [r3, #0]
 800aea6:	e7d4      	b.n	800ae52 <decompress_line+0x5a>
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
 800aea8:	0039      	movs	r1, r7
 800aeaa:	9a00      	ldr	r2, [sp, #0]
 800aeac:	9801      	ldr	r0, [sp, #4]
 800aeae:	f7ff ff37 	bl	800ad20 <get_bits>
 800aeb2:	0004      	movs	r4, r0
                    rle_prev_v = ret;
 800aeb4:	4b1b      	ldr	r3, [pc, #108]	; (800af24 <decompress_line+0x12c>)
 800aeb6:	7018      	strb	r0, [r3, #0]
                    rle_rdp += rle_bpp;
 800aeb8:	9b00      	ldr	r3, [sp, #0]
 800aeba:	18ff      	adds	r7, r7, r3
 800aebc:	6037      	str	r7, [r6, #0]
            rle_prev_v = ret;
            rle_rdp += rle_bpp;
            rle_state = RLE_STATE_SINGLE;
 800aebe:	4b17      	ldr	r3, [pc, #92]	; (800af1c <decompress_line+0x124>)
 800aec0:	701d      	strb	r5, [r3, #0]
 800aec2:	e7c6      	b.n	800ae52 <decompress_line+0x5a>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 800aec4:	9a00      	ldr	r2, [sp, #0]
 800aec6:	0029      	movs	r1, r5
 800aec8:	9801      	ldr	r0, [sp, #4]
 800aeca:	f7ff ff29 	bl	800ad20 <get_bits>
            rle_prev_v = ret;
 800aece:	4b15      	ldr	r3, [pc, #84]	; (800af24 <decompress_line+0x12c>)
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 800aed0:	0004      	movs	r4, r0
            rle_prev_v = ret;
 800aed2:	7018      	strb	r0, [r3, #0]
            rle_rdp += rle_bpp;
 800aed4:	9b00      	ldr	r3, [sp, #0]
            rle_state = RLE_STATE_SINGLE;
 800aed6:	2200      	movs	r2, #0
            rle_rdp += rle_bpp;
 800aed8:	18ed      	adds	r5, r5, r3
 800aeda:	6035      	str	r5, [r6, #0]
            rle_state = RLE_STATE_SINGLE;
 800aedc:	4b0f      	ldr	r3, [pc, #60]	; (800af1c <decompress_line+0x124>)
 800aede:	e7e1      	b.n	800aea4 <decompress_line+0xac>
    uint8_t ret = 0;
 800aee0:	2400      	movs	r4, #0
    else if(rle_state == RLE_STATE_COUNTER) {
 800aee2:	2d02      	cmp	r5, #2
 800aee4:	d1b5      	bne.n	800ae52 <decompress_line+0x5a>
        ret = rle_prev_v;
 800aee6:	4b0f      	ldr	r3, [pc, #60]	; (800af24 <decompress_line+0x12c>)
 800aee8:	781c      	ldrb	r4, [r3, #0]
        rle_cnt--;
 800aeea:	4b0f      	ldr	r3, [pc, #60]	; (800af28 <decompress_line+0x130>)
 800aeec:	781d      	ldrb	r5, [r3, #0]
 800aeee:	3d01      	subs	r5, #1
 800aef0:	b2ed      	uxtb	r5, r5
 800aef2:	701d      	strb	r5, [r3, #0]
        if(rle_cnt == 0) {
 800aef4:	2d00      	cmp	r5, #0
 800aef6:	d1ac      	bne.n	800ae52 <decompress_line+0x5a>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 800aef8:	4f09      	ldr	r7, [pc, #36]	; (800af20 <decompress_line+0x128>)
 800aefa:	9a00      	ldr	r2, [sp, #0]
 800aefc:	683e      	ldr	r6, [r7, #0]
 800aefe:	9801      	ldr	r0, [sp, #4]
 800af00:	0031      	movs	r1, r6
 800af02:	f7ff ff0d 	bl	800ad20 <get_bits>
            rle_prev_v = ret;
 800af06:	4b07      	ldr	r3, [pc, #28]	; (800af24 <decompress_line+0x12c>)
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 800af08:	0004      	movs	r4, r0
            rle_prev_v = ret;
 800af0a:	7018      	strb	r0, [r3, #0]
            rle_rdp += rle_bpp;
 800af0c:	9b00      	ldr	r3, [sp, #0]
 800af0e:	18f6      	adds	r6, r6, r3
 800af10:	603e      	str	r6, [r7, #0]
 800af12:	e7d4      	b.n	800aebe <decompress_line+0xc6>
 800af14:	20005e3c 	.word	0x20005e3c
 800af18:	20005e38 	.word	0x20005e38
 800af1c:	20005e48 	.word	0x20005e48
 800af20:	20005e44 	.word	0x20005e44
 800af24:	20005e40 	.word	0x20005e40
 800af28:	20005e39 	.word	0x20005e39

0800af2c <unicode_list_compare>:
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
 800af2c:	8800      	ldrh	r0, [r0, #0]
 800af2e:	880b      	ldrh	r3, [r1, #0]
 800af30:	1ac0      	subs	r0, r0, r3
}
 800af32:	4770      	bx	lr

0800af34 <get_glyph_dsc_id.isra.0.part.1>:
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 800af34:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800af36:	6805      	ldr	r5, [r0, #0]
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 800af38:	b085      	sub	sp, #20
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800af3a:	696b      	ldr	r3, [r5, #20]
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 800af3c:	000e      	movs	r6, r1
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800af3e:	428b      	cmp	r3, r1
 800af40:	d009      	beq.n	800af56 <get_glyph_dsc_id.isra.0.part.1+0x22>
    for(i = 0; i < fdsc->cmap_num; i++) {
 800af42:	2000      	movs	r0, #0
 800af44:	8a6a      	ldrh	r2, [r5, #18]
 800af46:	05d2      	lsls	r2, r2, #23
 800af48:	0dd2      	lsrs	r2, r2, #23
 800af4a:	b283      	uxth	r3, r0
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d806      	bhi.n	800af5e <get_glyph_dsc_id.isra.0.part.1+0x2a>
    fdsc->last_letter = letter;
 800af50:	616e      	str	r6, [r5, #20]
    fdsc->last_glyph_id = 0;
 800af52:	2400      	movs	r4, #0
 800af54:	e013      	b.n	800af7e <get_glyph_dsc_id.isra.0.part.1+0x4a>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800af56:	69ac      	ldr	r4, [r5, #24]
}
 800af58:	0020      	movs	r0, r4
 800af5a:	b005      	add	sp, #20
 800af5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af5e:	2714      	movs	r7, #20
 800af60:	4347      	muls	r7, r0
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800af62:	68ab      	ldr	r3, [r5, #8]
 800af64:	3001      	adds	r0, #1
 800af66:	19d9      	adds	r1, r3, r7
 800af68:	680b      	ldr	r3, [r1, #0]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 800af6a:	888c      	ldrh	r4, [r1, #4]
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800af6c:	1af3      	subs	r3, r6, r3
        if(rcp > fdsc->cmaps[i].range_length) continue;
 800af6e:	42a3      	cmp	r3, r4
 800af70:	d8eb      	bhi.n	800af4a <get_glyph_dsc_id.isra.0.part.1+0x16>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 800af72:	7c8a      	ldrb	r2, [r1, #18]
 800af74:	2a02      	cmp	r2, #2
 800af76:	d104      	bne.n	800af82 <get_glyph_dsc_id.isra.0.part.1+0x4e>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 800af78:	88cc      	ldrh	r4, [r1, #6]
 800af7a:	18e4      	adds	r4, r4, r3
        fdsc->last_letter = letter;
 800af7c:	616e      	str	r6, [r5, #20]
    fdsc->last_glyph_id = 0;
 800af7e:	61ac      	str	r4, [r5, #24]
 800af80:	e7ea      	b.n	800af58 <get_glyph_dsc_id.isra.0.part.1+0x24>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 800af82:	2a00      	cmp	r2, #0
 800af84:	d104      	bne.n	800af90 <get_glyph_dsc_id.isra.0.part.1+0x5c>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 800af86:	68ca      	ldr	r2, [r1, #12]
 800af88:	88c8      	ldrh	r0, [r1, #6]
 800af8a:	5cd4      	ldrb	r4, [r2, r3]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800af8c:	1824      	adds	r4, r4, r0
 800af8e:	e7f5      	b.n	800af7c <get_glyph_dsc_id.isra.0.part.1+0x48>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 800af90:	2a03      	cmp	r2, #3
 800af92:	d112      	bne.n	800afba <get_glyph_dsc_id.isra.0.part.1+0x86>
            uint16_t key = rcp;
 800af94:	200e      	movs	r0, #14
 800af96:	4468      	add	r0, sp
 800af98:	8003      	strh	r3, [r0, #0]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 800af9a:	4b13      	ldr	r3, [pc, #76]	; (800afe8 <get_glyph_dsc_id.isra.0.part.1+0xb4>)
 800af9c:	8a0a      	ldrh	r2, [r1, #16]
 800af9e:	9300      	str	r3, [sp, #0]
 800afa0:	6889      	ldr	r1, [r1, #8]
 800afa2:	2302      	movs	r3, #2
 800afa4:	f001 fd98 	bl	800cad8 <_lv_utils_bsearch>
        uint32_t glyph_id = 0;
 800afa8:	1e04      	subs	r4, r0, #0
            if(p) {
 800afaa:	d0e7      	beq.n	800af7c <get_glyph_dsc_id.isra.0.part.1+0x48>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 800afac:	68ab      	ldr	r3, [r5, #8]
 800afae:	19df      	adds	r7, r3, r7
 800afb0:	68bb      	ldr	r3, [r7, #8]
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 800afb2:	88fc      	ldrh	r4, [r7, #6]
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 800afb4:	1ac0      	subs	r0, r0, r3
 800afb6:	1040      	asrs	r0, r0, #1
 800afb8:	e7e8      	b.n	800af8c <get_glyph_dsc_id.isra.0.part.1+0x58>
        uint32_t glyph_id = 0;
 800afba:	2400      	movs	r4, #0
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 800afbc:	2a01      	cmp	r2, #1
 800afbe:	d1dd      	bne.n	800af7c <get_glyph_dsc_id.isra.0.part.1+0x48>
            uint16_t key = rcp;
 800afc0:	200e      	movs	r0, #14
 800afc2:	4468      	add	r0, sp
 800afc4:	8003      	strh	r3, [r0, #0]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 800afc6:	4b08      	ldr	r3, [pc, #32]	; (800afe8 <get_glyph_dsc_id.isra.0.part.1+0xb4>)
 800afc8:	8a0a      	ldrh	r2, [r1, #16]
 800afca:	9300      	str	r3, [sp, #0]
 800afcc:	6889      	ldr	r1, [r1, #8]
 800afce:	2302      	movs	r3, #2
 800afd0:	f001 fd82 	bl	800cad8 <_lv_utils_bsearch>
            if(p) {
 800afd4:	42a0      	cmp	r0, r4
 800afd6:	d0d1      	beq.n	800af7c <get_glyph_dsc_id.isra.0.part.1+0x48>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 800afd8:	68ab      	ldr	r3, [r5, #8]
 800afda:	19df      	adds	r7, r3, r7
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	1ac0      	subs	r0, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	5a1c      	ldrh	r4, [r3, r0]
 800afe4:	88f8      	ldrh	r0, [r7, #6]
 800afe6:	e7d1      	b.n	800af8c <get_glyph_dsc_id.isra.0.part.1+0x58>
 800afe8:	0800af2d 	.word	0x0800af2d

0800afec <lv_font_get_bitmap_fmt_txt>:
{
 800afec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afee:	b08d      	sub	sp, #52	; 0x34
    if(unicode_letter == '\t') unicode_letter = ' ';
 800aff0:	2909      	cmp	r1, #9
 800aff2:	d004      	beq.n	800affe <lv_font_get_bitmap_fmt_txt+0x12>
    if(letter == '\0') return 0;
 800aff4:	2900      	cmp	r1, #0
 800aff6:	d103      	bne.n	800b000 <lv_font_get_bitmap_fmt_txt+0x14>
    if(!gid) return NULL;
 800aff8:	2000      	movs	r0, #0
}
 800affa:	b00d      	add	sp, #52	; 0x34
 800affc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(unicode_letter == '\t') unicode_letter = ' ';
 800affe:	2120      	movs	r1, #32
 800b000:	6905      	ldr	r5, [r0, #16]
 800b002:	3010      	adds	r0, #16
 800b004:	f7ff ff96 	bl	800af34 <get_glyph_dsc_id.isra.0.part.1>
    if(!gid) return NULL;
 800b008:	2800      	cmp	r0, #0
 800b00a:	d0f5      	beq.n	800aff8 <lv_font_get_bitmap_fmt_txt+0xc>
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 800b00c:	686b      	ldr	r3, [r5, #4]
 800b00e:	00c0      	lsls	r0, r0, #3
 800b010:	181c      	adds	r4, r3, r0
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 800b012:	7ce8      	ldrb	r0, [r5, #19]
 800b014:	233f      	movs	r3, #63	; 0x3f
 800b016:	0002      	movs	r2, r0
 800b018:	439a      	bics	r2, r3
 800b01a:	d105      	bne.n	800b028 <lv_font_get_bitmap_fmt_txt+0x3c>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 800b01c:	6820      	ldr	r0, [r4, #0]
 800b01e:	0300      	lsls	r0, r0, #12
 800b020:	0b03      	lsrs	r3, r0, #12
 800b022:	6828      	ldr	r0, [r5, #0]
 800b024:	18c0      	adds	r0, r0, r3
 800b026:	e7e8      	b.n	800affa <lv_font_get_bitmap_fmt_txt+0xe>
        uint32_t gsize = gdsc->box_w * gdsc->box_h;
 800b028:	7923      	ldrb	r3, [r4, #4]
 800b02a:	7967      	ldrb	r7, [r4, #5]
 800b02c:	435f      	muls	r7, r3
        if(gsize == 0) return NULL;
 800b02e:	2f00      	cmp	r7, #0
 800b030:	d0e2      	beq.n	800aff8 <lv_font_get_bitmap_fmt_txt+0xc>
        switch(fdsc->bpp) {
 800b032:	06c0      	lsls	r0, r0, #27
 800b034:	0f00      	lsrs	r0, r0, #28
 800b036:	3801      	subs	r0, #1
 800b038:	2803      	cmp	r0, #3
 800b03a:	d805      	bhi.n	800b048 <lv_font_get_bitmap_fmt_txt+0x5c>
 800b03c:	f7f5 f87c 	bl	8000138 <__gnu_thumb1_case_uqi>
 800b040:	66666302 	.word	0x66666302
                buf_size = (gsize + 7) >> 3;
 800b044:	3707      	adds	r7, #7
 800b046:	08ff      	lsrs	r7, r7, #3
        if(_lv_mem_get_size(LV_GC_ROOT(_lv_font_decompr_buf)) < buf_size) {
 800b048:	4e52      	ldr	r6, [pc, #328]	; (800b194 <lv_font_get_bitmap_fmt_txt+0x1a8>)
 800b04a:	6830      	ldr	r0, [r6, #0]
 800b04c:	f000 ffb2 	bl	800bfb4 <_lv_mem_get_size>
 800b050:	42b8      	cmp	r0, r7
 800b052:	d206      	bcs.n	800b062 <lv_font_get_bitmap_fmt_txt+0x76>
            uint8_t * tmp = lv_mem_realloc(LV_GC_ROOT(_lv_font_decompr_buf), buf_size);
 800b054:	0039      	movs	r1, r7
 800b056:	6830      	ldr	r0, [r6, #0]
 800b058:	f001 f87e 	bl	800c158 <lv_mem_realloc>
            if(tmp == NULL) return NULL;
 800b05c:	2800      	cmp	r0, #0
 800b05e:	d0cb      	beq.n	800aff8 <lv_font_get_bitmap_fmt_txt+0xc>
            LV_GC_ROOT(_lv_font_decompr_buf) = tmp;
 800b060:	6030      	str	r0, [r6, #0]
        bool prefilter = fdsc->bitmap_format == LV_FONT_FMT_TXT_COMPRESSED ? true : false;
 800b062:	7ceb      	ldrb	r3, [r5, #19]
 800b064:	223f      	movs	r2, #63	; 0x3f
 800b066:	0019      	movs	r1, r3
 800b068:	4391      	bics	r1, r2
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 800b06a:	6822      	ldr	r2, [r4, #0]
        bool prefilter = fdsc->bitmap_format == LV_FONT_FMT_TXT_COMPRESSED ? true : false;
 800b06c:	910a      	str	r1, [sp, #40]	; 0x28
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 800b06e:	0312      	lsls	r2, r2, #12
 800b070:	6829      	ldr	r1, [r5, #0]
 800b072:	0b12      	lsrs	r2, r2, #12
 800b074:	188a      	adds	r2, r1, r2
 800b076:	6831      	ldr	r1, [r6, #0]
                   (uint8_t)fdsc->bpp, prefilter);
 800b078:	06db      	lsls	r3, r3, #27
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 800b07a:	9104      	str	r1, [sp, #16]
 800b07c:	7925      	ldrb	r5, [r4, #4]
                   (uint8_t)fdsc->bpp, prefilter);
 800b07e:	0f1b      	lsrs	r3, r3, #28
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 800b080:	b229      	sxth	r1, r5
 800b082:	9105      	str	r1, [sp, #20]
 800b084:	7961      	ldrb	r1, [r4, #5]
    if(bpp == 3) wr_size = 4;
 800b086:	2704      	movs	r7, #4
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 800b088:	910b      	str	r1, [sp, #44]	; 0x2c
 800b08a:	b2d9      	uxtb	r1, r3
 800b08c:	9106      	str	r1, [sp, #24]
    if(bpp == 3) wr_size = 4;
 800b08e:	2903      	cmp	r1, #3
 800b090:	d000      	beq.n	800b094 <lv_font_get_bitmap_fmt_txt+0xa8>
 800b092:	b2df      	uxtb	r7, r3
    rle_state = RLE_STATE_SINGLE;
 800b094:	2600      	movs	r6, #0
    rle_in = in;
 800b096:	4940      	ldr	r1, [pc, #256]	; (800b198 <lv_font_get_bitmap_fmt_txt+0x1ac>)
    uint8_t * line_buf1 = _lv_mem_buf_get(w);
 800b098:	0028      	movs	r0, r5
    rle_in = in;
 800b09a:	600a      	str	r2, [r1, #0]
    rle_bpp = bpp;
 800b09c:	4a3f      	ldr	r2, [pc, #252]	; (800b19c <lv_font_get_bitmap_fmt_txt+0x1b0>)
 800b09e:	7013      	strb	r3, [r2, #0]
    rle_state = RLE_STATE_SINGLE;
 800b0a0:	4b3f      	ldr	r3, [pc, #252]	; (800b1a0 <lv_font_get_bitmap_fmt_txt+0x1b4>)
 800b0a2:	701e      	strb	r6, [r3, #0]
    rle_rdp = 0;
 800b0a4:	4b3f      	ldr	r3, [pc, #252]	; (800b1a4 <lv_font_get_bitmap_fmt_txt+0x1b8>)
 800b0a6:	601e      	str	r6, [r3, #0]
    rle_prev_v = 0;
 800b0a8:	4b3f      	ldr	r3, [pc, #252]	; (800b1a8 <lv_font_get_bitmap_fmt_txt+0x1bc>)
 800b0aa:	701e      	strb	r6, [r3, #0]
    rle_cnt = 0;
 800b0ac:	4b3f      	ldr	r3, [pc, #252]	; (800b1ac <lv_font_get_bitmap_fmt_txt+0x1c0>)
 800b0ae:	701e      	strb	r6, [r3, #0]
    uint8_t * line_buf1 = _lv_mem_buf_get(w);
 800b0b0:	f001 f884 	bl	800c1bc <_lv_mem_buf_get>
    if(prefilter) {
 800b0b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    uint8_t * line_buf1 = _lv_mem_buf_get(w);
 800b0b6:	0004      	movs	r4, r0
    uint8_t * line_buf2 = NULL;
 800b0b8:	9603      	str	r6, [sp, #12]
    if(prefilter) {
 800b0ba:	2b40      	cmp	r3, #64	; 0x40
 800b0bc:	d103      	bne.n	800b0c6 <lv_font_get_bitmap_fmt_txt+0xda>
        line_buf2 = _lv_mem_buf_get(w);
 800b0be:	0028      	movs	r0, r5
 800b0c0:	f001 f87c 	bl	800c1bc <_lv_mem_buf_get>
 800b0c4:	9003      	str	r0, [sp, #12]
    decompress_line(line_buf1, w);
 800b0c6:	003e      	movs	r6, r7
 800b0c8:	9905      	ldr	r1, [sp, #20]
 800b0ca:	0020      	movs	r0, r4
 800b0cc:	f7ff fe94 	bl	800adf8 <decompress_line>
 800b0d0:	1963      	adds	r3, r4, r5
 800b0d2:	9301      	str	r3, [sp, #4]
 800b0d4:	9402      	str	r4, [sp, #8]
    for(x = 0; x < w; x++) {
 800b0d6:	9b02      	ldr	r3, [sp, #8]
 800b0d8:	9a01      	ldr	r2, [sp, #4]
 800b0da:	1bf1      	subs	r1, r6, r7
 800b0dc:	19f6      	adds	r6, r6, r7
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d117      	bne.n	800b112 <lv_font_get_bitmap_fmt_txt+0x126>
    for(y = 1; y < h; y++) {
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	437d      	muls	r5, r7
 800b0e6:	9508      	str	r5, [sp, #32]
    for(x = 0; x < w; x++) {
 800b0e8:	9501      	str	r5, [sp, #4]
 800b0ea:	9309      	str	r3, [sp, #36]	; 0x24
    for(y = 1; y < h; y++) {
 800b0ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	dc18      	bgt.n	800b126 <lv_font_get_bitmap_fmt_txt+0x13a>
    _lv_mem_buf_release(line_buf1);
 800b0f4:	0020      	movs	r0, r4
 800b0f6:	f000 ff69 	bl	800bfcc <_lv_mem_buf_release>
    _lv_mem_buf_release(line_buf2);
 800b0fa:	9803      	ldr	r0, [sp, #12]
 800b0fc:	f000 ff66 	bl	800bfcc <_lv_mem_buf_release>
        return LV_GC_ROOT(_lv_font_decompr_buf);
 800b100:	4b24      	ldr	r3, [pc, #144]	; (800b194 <lv_font_get_bitmap_fmt_txt+0x1a8>)
 800b102:	6818      	ldr	r0, [r3, #0]
 800b104:	e779      	b.n	800affa <lv_font_get_bitmap_fmt_txt+0xe>
                buf_size = (gsize + 3) >> 2;
 800b106:	3703      	adds	r7, #3
 800b108:	08bf      	lsrs	r7, r7, #2
                break;
 800b10a:	e79d      	b.n	800b048 <lv_font_get_bitmap_fmt_txt+0x5c>
                buf_size = (gsize + 1) >> 1;
 800b10c:	3701      	adds	r7, #1
 800b10e:	087f      	lsrs	r7, r7, #1
                break;
 800b110:	e79a      	b.n	800b048 <lv_font_get_bitmap_fmt_txt+0x5c>
        bits_write(out, wrp, line_buf1[x], bpp);
 800b112:	9b02      	ldr	r3, [sp, #8]
 800b114:	9804      	ldr	r0, [sp, #16]
 800b116:	781a      	ldrb	r2, [r3, #0]
 800b118:	9b06      	ldr	r3, [sp, #24]
 800b11a:	f7ff fe35 	bl	800ad88 <bits_write>
 800b11e:	9b02      	ldr	r3, [sp, #8]
 800b120:	3301      	adds	r3, #1
 800b122:	9302      	str	r3, [sp, #8]
 800b124:	e7d7      	b.n	800b0d6 <lv_font_get_bitmap_fmt_txt+0xea>
        if(prefilter) {
 800b126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            decompress_line(line_buf2, w);
 800b128:	9905      	ldr	r1, [sp, #20]
        if(prefilter) {
 800b12a:	2b40      	cmp	r3, #64	; 0x40
 800b12c:	d121      	bne.n	800b172 <lv_font_get_bitmap_fmt_txt+0x186>
            decompress_line(line_buf2, w);
 800b12e:	0025      	movs	r5, r4
 800b130:	9803      	ldr	r0, [sp, #12]
 800b132:	f7ff fe61 	bl	800adf8 <decompress_line>
 800b136:	9b01      	ldr	r3, [sp, #4]
 800b138:	9e03      	ldr	r6, [sp, #12]
 800b13a:	9307      	str	r3, [sp, #28]
            for(x = 0; x < w; x++) {
 800b13c:	9b02      	ldr	r3, [sp, #8]
 800b13e:	429d      	cmp	r5, r3
 800b140:	d108      	bne.n	800b154 <lv_font_get_bitmap_fmt_txt+0x168>
 800b142:	9a08      	ldr	r2, [sp, #32]
 800b144:	9b01      	ldr	r3, [sp, #4]
 800b146:	4694      	mov	ip, r2
 800b148:	4463      	add	r3, ip
 800b14a:	9301      	str	r3, [sp, #4]
 800b14c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b14e:	3301      	adds	r3, #1
 800b150:	b21b      	sxth	r3, r3
 800b152:	e7ca      	b.n	800b0ea <lv_font_get_bitmap_fmt_txt+0xfe>
                line_buf1[x] = line_buf2[x] ^ line_buf1[x];
 800b154:	782b      	ldrb	r3, [r5, #0]
 800b156:	7832      	ldrb	r2, [r6, #0]
                bits_write(out, wrp, line_buf1[x], bpp);
 800b158:	9907      	ldr	r1, [sp, #28]
                line_buf1[x] = line_buf2[x] ^ line_buf1[x];
 800b15a:	405a      	eors	r2, r3
 800b15c:	702a      	strb	r2, [r5, #0]
                bits_write(out, wrp, line_buf1[x], bpp);
 800b15e:	9b06      	ldr	r3, [sp, #24]
 800b160:	9804      	ldr	r0, [sp, #16]
 800b162:	f7ff fe11 	bl	800ad88 <bits_write>
                wrp += wr_size;
 800b166:	9b07      	ldr	r3, [sp, #28]
 800b168:	3601      	adds	r6, #1
 800b16a:	19db      	adds	r3, r3, r7
 800b16c:	9307      	str	r3, [sp, #28]
 800b16e:	3501      	adds	r5, #1
 800b170:	e7e4      	b.n	800b13c <lv_font_get_bitmap_fmt_txt+0x150>
            decompress_line(line_buf1, w);
 800b172:	0025      	movs	r5, r4
 800b174:	0020      	movs	r0, r4
 800b176:	f7ff fe3f 	bl	800adf8 <decompress_line>
 800b17a:	9e01      	ldr	r6, [sp, #4]
            for(x = 0; x < w; x++) {
 800b17c:	9b02      	ldr	r3, [sp, #8]
 800b17e:	429d      	cmp	r5, r3
 800b180:	d0df      	beq.n	800b142 <lv_font_get_bitmap_fmt_txt+0x156>
                bits_write(out, wrp, line_buf1[x], bpp);
 800b182:	782a      	ldrb	r2, [r5, #0]
 800b184:	0031      	movs	r1, r6
 800b186:	9b06      	ldr	r3, [sp, #24]
 800b188:	9804      	ldr	r0, [sp, #16]
 800b18a:	f7ff fdfd 	bl	800ad88 <bits_write>
                wrp += wr_size;
 800b18e:	19f6      	adds	r6, r6, r7
 800b190:	3501      	adds	r5, #1
 800b192:	e7f3      	b.n	800b17c <lv_font_get_bitmap_fmt_txt+0x190>
 800b194:	200070e0 	.word	0x200070e0
 800b198:	20005e3c 	.word	0x20005e3c
 800b19c:	20005e38 	.word	0x20005e38
 800b1a0:	20005e48 	.word	0x20005e48
 800b1a4:	20005e44 	.word	0x20005e44
 800b1a8:	20005e40 	.word	0x20005e40
 800b1ac:	20005e39 	.word	0x20005e39

0800b1b0 <lv_font_get_glyph_dsc_fmt_txt>:
{
 800b1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1b2:	b089      	sub	sp, #36	; 0x24
 800b1b4:	0005      	movs	r5, r0
 800b1b6:	000f      	movs	r7, r1
 800b1b8:	9305      	str	r3, [sp, #20]
    if(unicode_letter == '\t') {
 800b1ba:	2a09      	cmp	r2, #9
 800b1bc:	d004      	beq.n	800b1c8 <lv_font_get_glyph_dsc_fmt_txt+0x18>
    if(letter == '\0') return 0;
 800b1be:	2a00      	cmp	r2, #0
 800b1c0:	d13b      	bne.n	800b23a <lv_font_get_glyph_dsc_fmt_txt+0x8a>
    if(!gid) return false;
 800b1c2:	2300      	movs	r3, #0
    return true;
 800b1c4:	9303      	str	r3, [sp, #12]
 800b1c6:	e035      	b.n	800b234 <lv_font_get_glyph_dsc_fmt_txt+0x84>
        is_tab = true;
 800b1c8:	2301      	movs	r3, #1
        unicode_letter = ' ';
 800b1ca:	2220      	movs	r2, #32
        is_tab = true;
 800b1cc:	9303      	str	r3, [sp, #12]
 800b1ce:	002e      	movs	r6, r5
 800b1d0:	3610      	adds	r6, #16
 800b1d2:	0011      	movs	r1, r2
 800b1d4:	0030      	movs	r0, r6
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800b1d6:	692c      	ldr	r4, [r5, #16]
 800b1d8:	f7ff feac 	bl	800af34 <get_glyph_dsc_id.isra.0.part.1>
 800b1dc:	9004      	str	r0, [sp, #16]
    if(!gid) return false;
 800b1de:	2800      	cmp	r0, #0
 800b1e0:	d0ef      	beq.n	800b1c2 <lv_font_get_glyph_dsc_fmt_txt+0x12>
    if(fdsc->kern_dsc) {
 800b1e2:	68e3      	ldr	r3, [r4, #12]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d12b      	bne.n	800b240 <lv_font_get_glyph_dsc_fmt_txt+0x90>
    int8_t kvalue = 0;
 800b1e8:	2300      	movs	r3, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 800b1ea:	9a04      	ldr	r2, [sp, #16]
 800b1ec:	00d1      	lsls	r1, r2, #3
 800b1ee:	6862      	ldr	r2, [r4, #4]
 800b1f0:	1851      	adds	r1, r2, r1
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 800b1f2:	8a22      	ldrh	r2, [r4, #16]
    uint32_t adv_w = gdsc->adv_w;
 800b1f4:	8848      	ldrh	r0, [r1, #2]
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 800b1f6:	435a      	muls	r2, r3
    if(is_tab) adv_w *= 2;
 800b1f8:	9b03      	ldr	r3, [sp, #12]
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 800b1fa:	1112      	asrs	r2, r2, #4
    uint32_t adv_w = gdsc->adv_w;
 800b1fc:	0900      	lsrs	r0, r0, #4
    if(is_tab) adv_w *= 2;
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d000      	beq.n	800b204 <lv_font_get_glyph_dsc_fmt_txt+0x54>
 800b202:	0040      	lsls	r0, r0, #1
    adv_w  = (adv_w + (1 << 3)) >> 4;
 800b204:	0013      	movs	r3, r2
 800b206:	3308      	adds	r3, #8
 800b208:	181b      	adds	r3, r3, r0
 800b20a:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
 800b20c:	803b      	strh	r3, [r7, #0]
    dsc_out->box_h = gdsc->box_h;
 800b20e:	794b      	ldrb	r3, [r1, #5]
 800b210:	80bb      	strh	r3, [r7, #4]
    dsc_out->ofs_x = gdsc->ofs_x;
 800b212:	2306      	movs	r3, #6
    dsc_out->box_w = gdsc->box_w;
 800b214:	790a      	ldrb	r2, [r1, #4]
 800b216:	807a      	strh	r2, [r7, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
 800b218:	56cb      	ldrsb	r3, [r1, r3]
 800b21a:	80fb      	strh	r3, [r7, #6]
    dsc_out->ofs_y = gdsc->ofs_y;
 800b21c:	2307      	movs	r3, #7
 800b21e:	56cb      	ldrsb	r3, [r1, r3]
 800b220:	813b      	strh	r3, [r7, #8]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 800b222:	7ce3      	ldrb	r3, [r4, #19]
 800b224:	06db      	lsls	r3, r3, #27
 800b226:	0f1b      	lsrs	r3, r3, #28
 800b228:	72bb      	strb	r3, [r7, #10]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 800b22a:	9b03      	ldr	r3, [sp, #12]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d05e      	beq.n	800b2ee <lv_font_get_glyph_dsc_fmt_txt+0x13e>
 800b230:	0052      	lsls	r2, r2, #1
 800b232:	807a      	strh	r2, [r7, #2]
}
 800b234:	9803      	ldr	r0, [sp, #12]
 800b236:	b009      	add	sp, #36	; 0x24
 800b238:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bool is_tab = false;
 800b23a:	2300      	movs	r3, #0
 800b23c:	9303      	str	r3, [sp, #12]
 800b23e:	e7c6      	b.n	800b1ce <lv_font_get_glyph_dsc_fmt_txt+0x1e>
    if(letter == '\0') return 0;
 800b240:	9b05      	ldr	r3, [sp, #20]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d0d0      	beq.n	800b1e8 <lv_font_get_glyph_dsc_fmt_txt+0x38>
 800b246:	0019      	movs	r1, r3
 800b248:	0030      	movs	r0, r6
 800b24a:	f7ff fe73 	bl	800af34 <get_glyph_dsc_id.isra.0.part.1>
        if(gid_next) {
 800b24e:	2800      	cmp	r0, #0
 800b250:	d0ca      	beq.n	800b1e8 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            kvalue = get_kern_value(font, gid, gid_next);
 800b252:	692b      	ldr	r3, [r5, #16]
 800b254:	68dd      	ldr	r5, [r3, #12]
    if(fdsc->kern_classes == 0) {
 800b256:	7cdb      	ldrb	r3, [r3, #19]
 800b258:	069b      	lsls	r3, r3, #26
 800b25a:	d433      	bmi.n	800b2c4 <lv_font_get_glyph_dsc_fmt_txt+0x114>
        if(kdsc->glyph_ids_size == 0) {
 800b25c:	223f      	movs	r2, #63	; 0x3f
 800b25e:	7aeb      	ldrb	r3, [r5, #11]
 800b260:	4393      	bics	r3, r2
 800b262:	d118      	bne.n	800b296 <lv_font_get_glyph_dsc_fmt_txt+0xe6>
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 800b264:	ab07      	add	r3, sp, #28
 800b266:	469c      	mov	ip, r3
 800b268:	9b04      	ldr	r3, [sp, #16]
 800b26a:	0200      	lsls	r0, r0, #8
 800b26c:	18c0      	adds	r0, r0, r3
 800b26e:	4663      	mov	r3, ip
            const uint16_t * g_ids = kdsc->glyph_ids;
 800b270:	682e      	ldr	r6, [r5, #0]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 800b272:	8018      	strh	r0, [r3, #0]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 800b274:	68ab      	ldr	r3, [r5, #8]
 800b276:	0031      	movs	r1, r6
 800b278:	009a      	lsls	r2, r3, #2
 800b27a:	4b1e      	ldr	r3, [pc, #120]	; (800b2f4 <lv_font_get_glyph_dsc_fmt_txt+0x144>)
 800b27c:	0892      	lsrs	r2, r2, #2
 800b27e:	9300      	str	r3, [sp, #0]
 800b280:	4660      	mov	r0, ip
 800b282:	2302      	movs	r3, #2
 800b284:	f001 fc28 	bl	800cad8 <_lv_utils_bsearch>
    int8_t value = 0;
 800b288:	1e03      	subs	r3, r0, #0
            if(kid_p) {
 800b28a:	d0ae      	beq.n	800b1ea <lv_font_get_glyph_dsc_fmt_txt+0x3a>
                lv_uintptr_t ofs = kid_p - g_ids;
 800b28c:	1b80      	subs	r0, r0, r6
 800b28e:	1040      	asrs	r0, r0, #1
                value = kdsc->values[ofs];
 800b290:	686b      	ldr	r3, [r5, #4]
 800b292:	561b      	ldrsb	r3, [r3, r0]
 800b294:	e7a9      	b.n	800b1ea <lv_font_get_glyph_dsc_fmt_txt+0x3a>
        else if(kdsc->glyph_ids_size == 1) {
 800b296:	2b40      	cmp	r3, #64	; 0x40
 800b298:	d1a6      	bne.n	800b1e8 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 800b29a:	9b04      	ldr	r3, [sp, #16]
 800b29c:	0400      	lsls	r0, r0, #16
 800b29e:	18c0      	adds	r0, r0, r3
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 800b2a0:	68ab      	ldr	r3, [r5, #8]
            const uint32_t * g_ids = kdsc->glyph_ids;
 800b2a2:	682e      	ldr	r6, [r5, #0]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 800b2a4:	009a      	lsls	r2, r3, #2
 800b2a6:	4b14      	ldr	r3, [pc, #80]	; (800b2f8 <lv_font_get_glyph_dsc_fmt_txt+0x148>)
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 800b2a8:	9007      	str	r0, [sp, #28]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 800b2aa:	9300      	str	r3, [sp, #0]
 800b2ac:	0892      	lsrs	r2, r2, #2
 800b2ae:	2304      	movs	r3, #4
 800b2b0:	0031      	movs	r1, r6
 800b2b2:	a807      	add	r0, sp, #28
 800b2b4:	f001 fc10 	bl	800cad8 <_lv_utils_bsearch>
    int8_t value = 0;
 800b2b8:	1e03      	subs	r3, r0, #0
            if(kid_p) {
 800b2ba:	d100      	bne.n	800b2be <lv_font_get_glyph_dsc_fmt_txt+0x10e>
 800b2bc:	e795      	b.n	800b1ea <lv_font_get_glyph_dsc_fmt_txt+0x3a>
                lv_uintptr_t ofs = kid_p - g_ids;
 800b2be:	1b80      	subs	r0, r0, r6
 800b2c0:	1080      	asrs	r0, r0, #2
 800b2c2:	e7e5      	b.n	800b290 <lv_font_get_glyph_dsc_fmt_txt+0xe0>
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 800b2c4:	686b      	ldr	r3, [r5, #4]
 800b2c6:	9a04      	ldr	r2, [sp, #16]
 800b2c8:	5c9a      	ldrb	r2, [r3, r2]
        if(left_class > 0 && right_class > 0) {
 800b2ca:	2a00      	cmp	r2, #0
 800b2cc:	d100      	bne.n	800b2d0 <lv_font_get_glyph_dsc_fmt_txt+0x120>
 800b2ce:	e78b      	b.n	800b1e8 <lv_font_get_glyph_dsc_fmt_txt+0x38>
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 800b2d0:	68ab      	ldr	r3, [r5, #8]
 800b2d2:	5c19      	ldrb	r1, [r3, r0]
        if(left_class > 0 && right_class > 0) {
 800b2d4:	2900      	cmp	r1, #0
 800b2d6:	d100      	bne.n	800b2da <lv_font_get_glyph_dsc_fmt_txt+0x12a>
 800b2d8:	e786      	b.n	800b1e8 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
 800b2da:	7b6b      	ldrb	r3, [r5, #13]
 800b2dc:	3a01      	subs	r2, #1
 800b2de:	435a      	muls	r2, r3
 800b2e0:	682b      	ldr	r3, [r5, #0]
 800b2e2:	185b      	adds	r3, r3, r1
 800b2e4:	189b      	adds	r3, r3, r2
 800b2e6:	3b01      	subs	r3, #1
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	b25b      	sxtb	r3, r3
 800b2ec:	e77d      	b.n	800b1ea <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    return true;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	e768      	b.n	800b1c4 <lv_font_get_glyph_dsc_fmt_txt+0x14>
 800b2f2:	46c0      	nop			; (mov r8, r8)
 800b2f4:	0800acf9 	.word	0x0800acf9
 800b2f8:	0800ad0d 	.word	0x0800ad0d

0800b2fc <_lv_font_clean_up_fmt_txt>:
{
 800b2fc:	b510      	push	{r4, lr}
    if(LV_GC_ROOT(_lv_font_decompr_buf)) {
 800b2fe:	4c04      	ldr	r4, [pc, #16]	; (800b310 <_lv_font_clean_up_fmt_txt+0x14>)
 800b300:	6820      	ldr	r0, [r4, #0]
 800b302:	2800      	cmp	r0, #0
 800b304:	d003      	beq.n	800b30e <_lv_font_clean_up_fmt_txt+0x12>
        lv_mem_free(LV_GC_ROOT(_lv_font_decompr_buf));
 800b306:	f000 fe27 	bl	800bf58 <lv_mem_free>
        LV_GC_ROOT(_lv_font_decompr_buf) = NULL;
 800b30a:	2300      	movs	r3, #0
 800b30c:	6023      	str	r3, [r4, #0]
}
 800b30e:	bd10      	pop	{r4, pc}
 800b310:	200070e0 	.word	0x200070e0

0800b314 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 800b314:	b510      	push	{r4, lr}
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
 800b316:	212c      	movs	r1, #44	; 0x2c
{
 800b318:	0004      	movs	r4, r0
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
 800b31a:	f000 ffd7 	bl	800c2cc <_lv_memset_00>

    driver->flush_cb         = NULL;
    driver->hor_res          = LV_HOR_RES_MAX;
 800b31e:	23a0      	movs	r3, #160	; 0xa0
    driver->ver_res          = LV_VER_RES_MAX;
    driver->buffer           = NULL;
    driver->rotated          = LV_DISP_ROT_NONE;
    driver->sw_rotate        = 0;
 800b320:	21f1      	movs	r1, #241	; 0xf1
    driver->hor_res          = LV_HOR_RES_MAX;
 800b322:	8023      	strh	r3, [r4, #0]
    driver->ver_res          = LV_VER_RES_MAX;
 800b324:	3b20      	subs	r3, #32
 800b326:	8063      	strh	r3, [r4, #2]
    driver->rotated          = LV_DISP_ROT_NONE;
 800b328:	7a23      	ldrb	r3, [r4, #8]
    driver->flush_cb         = NULL;
 800b32a:	2200      	movs	r2, #0
    driver->sw_rotate        = 0;
 800b32c:	400b      	ands	r3, r1
 800b32e:	7223      	strb	r3, [r4, #8]
    driver->color_chroma_key = LV_COLOR_TRANSP;
 800b330:	23fc      	movs	r3, #252	; 0xfc
 800b332:	00db      	lsls	r3, r3, #3
 800b334:	8523      	strh	r3, [r4, #40]	; 0x28
    driver->dpi = LV_DPI;
 800b336:	4907      	ldr	r1, [pc, #28]	; (800b354 <lv_disp_drv_init+0x40>)
 800b338:	8923      	ldrh	r3, [r4, #8]
    driver->flush_cb         = NULL;
 800b33a:	60e2      	str	r2, [r4, #12]
    driver->dpi = LV_DPI;
 800b33c:	4019      	ands	r1, r3
 800b33e:	2382      	movs	r3, #130	; 0x82
 800b340:	011b      	lsls	r3, r3, #4
 800b342:	430b      	orrs	r3, r1

#if LV_ANTIALIAS
    driver->antialiasing = true;
 800b344:	2101      	movs	r1, #1
    driver->dpi = LV_DPI;
 800b346:	8123      	strh	r3, [r4, #8]
    driver->antialiasing = true;
 800b348:	430b      	orrs	r3, r1
    driver->buffer           = NULL;
 800b34a:	6062      	str	r2, [r4, #4]
    driver->antialiasing = true;
 800b34c:	7223      	strb	r3, [r4, #8]

#if LV_USE_USER_DATA
    driver->user_data = NULL;
#endif

    driver->set_px_cb = NULL;
 800b34e:	6162      	str	r2, [r4, #20]
}
 800b350:	bd10      	pop	{r4, pc}
 800b352:	46c0      	nop			; (mov r8, r8)
 800b354:	ffffc00f 	.word	0xffffc00f

0800b358 <lv_disp_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 800b358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b35a:	0004      	movs	r4, r0
 800b35c:	000d      	movs	r5, r1
 800b35e:	0017      	movs	r7, r2
 800b360:	001e      	movs	r6, r3
    _lv_memset_00(disp_buf, sizeof(lv_disp_buf_t));
 800b362:	2124      	movs	r1, #36	; 0x24
 800b364:	f000 ffb2 	bl	800c2cc <_lv_memset_00>

    disp_buf->buf1    = buf1;
 800b368:	6025      	str	r5, [r4, #0]
    disp_buf->buf2    = buf2;
 800b36a:	6067      	str	r7, [r4, #4]
    disp_buf->buf_act = disp_buf->buf1;
 800b36c:	60a5      	str	r5, [r4, #8]
    disp_buf->size    = size_in_px_cnt;
 800b36e:	60e6      	str	r6, [r4, #12]
}
 800b370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b374 <lv_disp_get_default>:
 * Get the default display
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
 800b374:	4b01      	ldr	r3, [pc, #4]	; (800b37c <lv_disp_get_default+0x8>)
 800b376:	6818      	ldr	r0, [r3, #0]
}
 800b378:	4770      	bx	lr
 800b37a:	46c0      	nop			; (mov r8, r8)
 800b37c:	20005e4c 	.word	0x20005e4c

0800b380 <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
 800b380:	1e03      	subs	r3, r0, #0
    if(disp == NULL) disp = lv_disp_get_default();
 800b382:	d104      	bne.n	800b38e <lv_disp_get_hor_res+0xe>
    return disp_def;
 800b384:	4b08      	ldr	r3, [pc, #32]	; (800b3a8 <lv_disp_get_hor_res+0x28>)

    if(disp == NULL)
        return LV_HOR_RES_MAX;
 800b386:	20a0      	movs	r0, #160	; 0xa0
    return disp_def;
 800b388:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL)
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d008      	beq.n	800b3a0 <lv_disp_get_hor_res+0x20>
    else {
        switch(disp->driver.rotated) {
 800b38e:	7a1a      	ldrb	r2, [r3, #8]
 800b390:	0752      	lsls	r2, r2, #29
 800b392:	0f92      	lsrs	r2, r2, #30
 800b394:	2a01      	cmp	r2, #1
 800b396:	d001      	beq.n	800b39c <lv_disp_get_hor_res+0x1c>
 800b398:	2a03      	cmp	r2, #3
 800b39a:	d102      	bne.n	800b3a2 <lv_disp_get_hor_res+0x22>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver.ver_res;
 800b39c:	2002      	movs	r0, #2
 800b39e:	5e18      	ldrsh	r0, [r3, r0]
            default:
                return disp->driver.hor_res;
        }
    }
}
 800b3a0:	4770      	bx	lr
                return disp->driver.hor_res;
 800b3a2:	2000      	movs	r0, #0
 800b3a4:	5e18      	ldrsh	r0, [r3, r0]
 800b3a6:	e7fb      	b.n	800b3a0 <lv_disp_get_hor_res+0x20>
 800b3a8:	20005e4c 	.word	0x20005e4c

0800b3ac <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
 800b3ac:	1e03      	subs	r3, r0, #0
    if(disp == NULL) disp = lv_disp_get_default();
 800b3ae:	d104      	bne.n	800b3ba <lv_disp_get_ver_res+0xe>
    return disp_def;
 800b3b0:	4b08      	ldr	r3, [pc, #32]	; (800b3d4 <lv_disp_get_ver_res+0x28>)

    if(disp == NULL)
        return LV_VER_RES_MAX;
 800b3b2:	2080      	movs	r0, #128	; 0x80
    return disp_def;
 800b3b4:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL)
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d008      	beq.n	800b3cc <lv_disp_get_ver_res+0x20>
    else {
        switch(disp->driver.rotated) {
 800b3ba:	7a1a      	ldrb	r2, [r3, #8]
 800b3bc:	0752      	lsls	r2, r2, #29
 800b3be:	0f92      	lsrs	r2, r2, #30
 800b3c0:	2a01      	cmp	r2, #1
 800b3c2:	d001      	beq.n	800b3c8 <lv_disp_get_ver_res+0x1c>
 800b3c4:	2a03      	cmp	r2, #3
 800b3c6:	d102      	bne.n	800b3ce <lv_disp_get_ver_res+0x22>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver.hor_res;
 800b3c8:	2000      	movs	r0, #0
 800b3ca:	5e18      	ldrsh	r0, [r3, r0]
            default:
                return disp->driver.ver_res;
        }
    }
}
 800b3cc:	4770      	bx	lr
                return disp->driver.ver_res;
 800b3ce:	2002      	movs	r0, #2
 800b3d0:	5e18      	ldrsh	r0, [r3, r0]
 800b3d2:	e7fb      	b.n	800b3cc <lv_disp_get_ver_res+0x20>
 800b3d4:	20005e4c 	.word	0x20005e4c

0800b3d8 <lv_disp_get_dpi>:
 * Get the DPI of the display
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(lv_disp_t * disp)
{
 800b3d8:	1e03      	subs	r3, r0, #0
    if(disp == NULL) disp = lv_disp_get_default();
 800b3da:	d104      	bne.n	800b3e6 <lv_disp_get_dpi+0xe>
    return disp_def;
 800b3dc:	4b04      	ldr	r3, [pc, #16]	; (800b3f0 <lv_disp_get_dpi+0x18>)
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
 800b3de:	2082      	movs	r0, #130	; 0x82
    return disp_def;
 800b3e0:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d002      	beq.n	800b3ec <lv_disp_get_dpi+0x14>
    return disp->driver.dpi;
 800b3e6:	8918      	ldrh	r0, [r3, #8]
 800b3e8:	0480      	lsls	r0, r0, #18
 800b3ea:	0d80      	lsrs	r0, r0, #22
}
 800b3ec:	4770      	bx	lr
 800b3ee:	46c0      	nop			; (mov r8, r8)
 800b3f0:	20005e4c 	.word	0x20005e4c

0800b3f4 <lv_disp_get_size_category>:
 * Get the size category of the display based on it's hor. res. and dpi.
 * @param disp pointer to a display (NULL to use the default display)
 * @return LV_DISP_SIZE_SMALL/MEDIUM/LARGE/EXTRA_LARGE
 */
lv_disp_size_t lv_disp_get_size_category(lv_disp_t * disp)
{
 800b3f4:	b570      	push	{r4, r5, r6, lr}
 800b3f6:	1e04      	subs	r4, r0, #0
    if(disp == NULL) disp = lv_disp_get_default();
 800b3f8:	d104      	bne.n	800b404 <lv_disp_get_size_category+0x10>
    return disp_def;
 800b3fa:	4b0f      	ldr	r3, [pc, #60]	; (800b438 <lv_disp_get_size_category+0x44>)

    uint32_t w;
    if(disp == NULL) w = LV_HOR_RES_MAX;
 800b3fc:	25a0      	movs	r5, #160	; 0xa0
    return disp_def;
 800b3fe:	681c      	ldr	r4, [r3, #0]
    if(disp == NULL) w = LV_HOR_RES_MAX;
 800b400:	2c00      	cmp	r4, #0
 800b402:	d003      	beq.n	800b40c <lv_disp_get_size_category+0x18>
    else w = lv_disp_get_hor_res(disp);
 800b404:	0020      	movs	r0, r4
 800b406:	f7ff ffbb 	bl	800b380 <lv_disp_get_hor_res>
 800b40a:	0005      	movs	r5, r0

    uint32_t dpi = lv_disp_get_dpi(disp);
 800b40c:	0020      	movs	r0, r4
 800b40e:	f7ff ffe3 	bl	800b3d8 <lv_disp_get_dpi>
 800b412:	0001      	movs	r1, r0

    w = w * 10 / dpi;
 800b414:	200a      	movs	r0, #10
 800b416:	4368      	muls	r0, r5
 800b418:	f7f4 feac 	bl	8000174 <__udivsi3>
 800b41c:	0002      	movs	r2, r0

    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
 800b41e:	2000      	movs	r0, #0
 800b420:	2a1d      	cmp	r2, #29
 800b422:	d907      	bls.n	800b434 <lv_disp_get_size_category+0x40>
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
 800b424:	3001      	adds	r0, #1
 800b426:	2a31      	cmp	r2, #49	; 0x31
 800b428:	d904      	bls.n	800b434 <lv_disp_get_size_category+0x40>
    if(w < LV_DISP_LARGE_LIMIT) return LV_DISP_SIZE_LARGE;
    else return LV_DISP_SIZE_EXTRA_LARGE;
 800b42a:	3044      	adds	r0, #68	; 0x44
 800b42c:	4290      	cmp	r0, r2
 800b42e:	4180      	sbcs	r0, r0
 800b430:	4240      	negs	r0, r0
 800b432:	3002      	adds	r0, #2
}
 800b434:	bd70      	pop	{r4, r5, r6, pc}
 800b436:	46c0      	nop			; (mov r8, r8)
 800b438:	20005e4c 	.word	0x20005e4c

0800b43c <lv_disp_flush_ready>:
    if(disp_drv->screen_transp) {
        _lv_memset_00(disp_drv->buffer->buf_act, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->buffer->flushing = 0;
 800b43c:	2200      	movs	r2, #0
 800b43e:	6843      	ldr	r3, [r0, #4]
 800b440:	619a      	str	r2, [r3, #24]
    disp_drv->buffer->flushing_last = 0;
 800b442:	61da      	str	r2, [r3, #28]
}
 800b444:	4770      	bx	lr
	...

0800b448 <lv_disp_get_next>:
 * Get the next display.
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
 800b448:	0001      	movs	r1, r0
 800b44a:	b510      	push	{r4, lr}
 800b44c:	4804      	ldr	r0, [pc, #16]	; (800b460 <lv_disp_get_next+0x18>)
    if(disp == NULL)
 800b44e:	2900      	cmp	r1, #0
 800b450:	d102      	bne.n	800b458 <lv_disp_get_next+0x10>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
 800b452:	f000 fbe0 	bl	800bc16 <_lv_ll_get_head>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
}
 800b456:	bd10      	pop	{r4, pc}
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
 800b458:	f000 fbe5 	bl	800bc26 <_lv_ll_get_next>
 800b45c:	e7fb      	b.n	800b456 <lv_disp_get_next+0xe>
 800b45e:	46c0      	nop			; (mov r8, r8)
 800b460:	200070f0 	.word	0x200070f0

0800b464 <lv_disp_get_buf>:
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
 800b464:	6840      	ldr	r0, [r0, #4]
}
 800b466:	4770      	bx	lr

0800b468 <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
 800b468:	6843      	ldr	r3, [r0, #4]
        return true;
    else
        return false;
 800b46a:	6818      	ldr	r0, [r3, #0]
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
 800b46c:	2800      	cmp	r0, #0
 800b46e:	d003      	beq.n	800b478 <lv_disp_is_double_buf+0x10>
 800b470:	6858      	ldr	r0, [r3, #4]
 800b472:	1e43      	subs	r3, r0, #1
 800b474:	4198      	sbcs	r0, r3
 800b476:	b2c0      	uxtb	r0, r0
}
 800b478:	4770      	bx	lr

0800b47a <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
 800b47a:	b510      	push	{r4, lr}
 800b47c:	0004      	movs	r4, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 800b47e:	f7ff fff3 	bl	800b468 <lv_disp_is_double_buf>
 800b482:	2800      	cmp	r0, #0
 800b484:	d00a      	beq.n	800b49c <lv_disp_is_true_double_buf+0x22>
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
 800b486:	2200      	movs	r2, #0
 800b488:	5ea3      	ldrsh	r3, [r4, r2]
 800b48a:	2202      	movs	r2, #2
 800b48c:	5ea0      	ldrsh	r0, [r4, r2]
 800b48e:	4358      	muls	r0, r3
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 800b490:	6863      	ldr	r3, [r4, #4]
 800b492:	68db      	ldr	r3, [r3, #12]
 800b494:	1ac0      	subs	r0, r0, r3
 800b496:	4243      	negs	r3, r0
 800b498:	4158      	adcs	r0, r3
 800b49a:	b2c0      	uxtb	r0, r0
        return true;
    }
    else {
        return false;
    }
}
 800b49c:	bd10      	pop	{r4, pc}
	...

0800b4a0 <lv_disp_drv_register>:
{
 800b4a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4a2:	0005      	movs	r5, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 800b4a4:	4831      	ldr	r0, [pc, #196]	; (800b56c <lv_disp_drv_register+0xcc>)
 800b4a6:	f000 fb76 	bl	800bb96 <_lv_ll_ins_head>
 800b4aa:	1e04      	subs	r4, r0, #0
    if(!disp) {
 800b4ac:	d102      	bne.n	800b4b4 <lv_disp_drv_register+0x14>
        return NULL;
 800b4ae:	2400      	movs	r4, #0
}
 800b4b0:	0020      	movs	r0, r4
 800b4b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    _lv_memset_00(disp, sizeof(lv_disp_t));
 800b4b4:	21be      	movs	r1, #190	; 0xbe
 800b4b6:	0049      	lsls	r1, r1, #1
 800b4b8:	f000 ff08 	bl	800c2cc <_lv_memset_00>
    _lv_memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
 800b4bc:	222c      	movs	r2, #44	; 0x2c
 800b4be:	0029      	movs	r1, r5
 800b4c0:	0020      	movs	r0, r4
 800b4c2:	f000 fdc3 	bl	800c04c <_lv_memcpy>
    _lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
 800b4c6:	0020      	movs	r0, r4
 800b4c8:	214c      	movs	r1, #76	; 0x4c
 800b4ca:	3030      	adds	r0, #48	; 0x30
    disp->last_activity_time = 0;
 800b4cc:	0027      	movs	r7, r4
    _lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
 800b4ce:	f000 fb5a 	bl	800bb86 <_lv_ll_init>
    disp->last_activity_time = 0;
 800b4d2:	2300      	movs	r3, #0
    if(disp_def == NULL) disp_def = disp;
 800b4d4:	4e26      	ldr	r6, [pc, #152]	; (800b570 <lv_disp_drv_register+0xd0>)
    disp->last_activity_time = 0;
 800b4d6:	37fc      	adds	r7, #252	; 0xfc
 800b4d8:	67fb      	str	r3, [r7, #124]	; 0x7c
    if(disp_def == NULL) disp_def = disp;
 800b4da:	6833      	ldr	r3, [r6, #0]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d100      	bne.n	800b4e2 <lv_disp_drv_register+0x42>
 800b4e0:	6034      	str	r4, [r6, #0]
    lv_disp_t * disp_def_tmp = disp_def;
 800b4e2:	6833      	ldr	r3, [r6, #0]
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
 800b4e4:	2203      	movs	r2, #3
    lv_disp_t * disp_def_tmp = disp_def;
 800b4e6:	9301      	str	r3, [sp, #4]
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
 800b4e8:	211e      	movs	r1, #30
 800b4ea:	0023      	movs	r3, r4
 800b4ec:	4821      	ldr	r0, [pc, #132]	; (800b574 <lv_disp_drv_register+0xd4>)
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 800b4ee:	6034      	str	r4, [r6, #0]
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
 800b4f0:	f000 ff50 	bl	800c394 <lv_task_create>
 800b4f4:	62e0      	str	r0, [r4, #44]	; 0x2c
    if(disp->refr_task == NULL) return NULL;
 800b4f6:	2800      	cmp	r0, #0
 800b4f8:	d0d9      	beq.n	800b4ae <lv_disp_drv_register+0xe>
    disp->inv_p = 0;
 800b4fa:	22bb      	movs	r2, #187	; 0xbb
 800b4fc:	0052      	lsls	r2, r2, #1
 800b4fe:	5aa3      	ldrh	r3, [r4, r2]
    disp->last_activity_time = 0;
 800b500:	2500      	movs	r5, #0
    disp->inv_p = 0;
 800b502:	0a9b      	lsrs	r3, r3, #10
 800b504:	029b      	lsls	r3, r3, #10
 800b506:	52a3      	strh	r3, [r4, r2]
    disp->bg_color = LV_COLOR_WHITE;
 800b508:	4b1b      	ldr	r3, [pc, #108]	; (800b578 <lv_disp_drv_register+0xd8>)
    disp->last_activity_time = 0;
 800b50a:	67fd      	str	r5, [r7, #124]	; 0x7c
    disp->bg_color = LV_COLOR_WHITE;
 800b50c:	881a      	ldrh	r2, [r3, #0]
 800b50e:	0023      	movs	r3, r4
 800b510:	334e      	adds	r3, #78	; 0x4e
 800b512:	801a      	strh	r2, [r3, #0]
    disp->bg_opa = LV_OPA_COVER;
 800b514:	22ff      	movs	r2, #255	; 0xff
    disp->bg_img = NULL;
 800b516:	6525      	str	r5, [r4, #80]	; 0x50
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800b518:	0029      	movs	r1, r5
    disp->bg_opa = LV_OPA_COVER;
 800b51a:	719a      	strb	r2, [r3, #6]
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800b51c:	0028      	movs	r0, r5
    disp->prev_scr  = NULL;
 800b51e:	6425      	str	r5, [r4, #64]	; 0x40
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800b520:	f7f8 fbc0 	bl	8003ca4 <lv_obj_create>
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800b524:	0029      	movs	r1, r5
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800b526:	63e0      	str	r0, [r4, #60]	; 0x3c
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800b528:	0028      	movs	r0, r5
 800b52a:	f7f8 fbbb 	bl	8003ca4 <lv_obj_create>
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
 800b52e:	0029      	movs	r1, r5
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800b530:	6460      	str	r0, [r4, #68]	; 0x44
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
 800b532:	0028      	movs	r0, r5
 800b534:	f7f8 fbb6 	bl	8003ca4 <lv_obj_create>
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
 800b538:	0029      	movs	r1, r5
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
 800b53a:	64a0      	str	r0, [r4, #72]	; 0x48
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
 800b53c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800b53e:	f7f9 f9fd 	bl	800493c <lv_obj_reset_style_list>
    lv_obj_reset_style_list(disp->sys_layer, LV_OBJ_PART_MAIN);
 800b542:	0029      	movs	r1, r5
 800b544:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b546:	f7f9 f9f9 	bl	800493c <lv_obj_reset_style_list>
    lv_obj_set_click(disp->top_layer, false);
 800b54a:	0029      	movs	r1, r5
 800b54c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800b54e:	f7f8 f8b7 	bl	80036c0 <lv_obj_set_click>
    lv_obj_set_click(disp->sys_layer, false);
 800b552:	0029      	movs	r1, r5
 800b554:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b556:	f7f8 f8b3 	bl	80036c0 <lv_obj_set_click>
    lv_obj_invalidate(disp->act_scr);
 800b55a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b55c:	f7f8 f9b5 	bl	80038ca <lv_obj_invalidate>
    disp_def = disp_def_tmp; /*Revert the default display*/
 800b560:	9b01      	ldr	r3, [sp, #4]
    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
 800b562:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    disp_def = disp_def_tmp; /*Revert the default display*/
 800b564:	6033      	str	r3, [r6, #0]
    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
 800b566:	f001 f875 	bl	800c654 <lv_task_ready>
 800b56a:	e7a1      	b.n	800b4b0 <lv_disp_drv_register+0x10>
 800b56c:	200070f0 	.word	0x200070f0
 800b570:	20005e4c 	.word	0x20005e4c
 800b574:	08005dbd 	.word	0x08005dbd
 800b578:	0800e086 	.word	0x0800e086

0800b57c <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
 800b57c:	0001      	movs	r1, r0
 800b57e:	b510      	push	{r4, lr}
 800b580:	4804      	ldr	r0, [pc, #16]	; (800b594 <lv_indev_get_next+0x18>)
    if(indev == NULL)
 800b582:	2900      	cmp	r1, #0
 800b584:	d102      	bne.n	800b58c <lv_indev_get_next+0x10>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 800b586:	f000 fb46 	bl	800bc16 <_lv_ll_get_head>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
}
 800b58a:	bd10      	pop	{r4, pc}
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 800b58c:	f000 fb4b 	bl	800bc26 <_lv_ll_get_next>
 800b590:	e7fb      	b.n	800b58a <lv_indev_get_next+0xe>
 800b592:	46c0      	nop			; (mov r8, r8)
 800b594:	200070e4 	.word	0x200070e4

0800b598 <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
 800b598:	2200      	movs	r2, #0
 800b59a:	4b03      	ldr	r3, [pc, #12]	; (800b5a8 <lv_tick_inc+0x10>)
 800b59c:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 800b59e:	4b03      	ldr	r3, [pc, #12]	; (800b5ac <lv_tick_inc+0x14>)
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	1810      	adds	r0, r2, r0
 800b5a4:	6018      	str	r0, [r3, #0]
}
 800b5a6:	4770      	bx	lr
 800b5a8:	20005e54 	.word	0x20005e54
 800b5ac:	20005e50 	.word	0x20005e50

0800b5b0 <lv_tick_get>:
     * This loop detects if `lv_tick_inc` was called while reading `sys_time`.
     * If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     * until `tick_irq_flag` remains `1`. */
    uint32_t result;
    do {
        tick_irq_flag = 1;
 800b5b0:	2101      	movs	r1, #1
        result        = sys_time;
 800b5b2:	4b04      	ldr	r3, [pc, #16]	; (800b5c4 <lv_tick_get+0x14>)
 800b5b4:	6818      	ldr	r0, [r3, #0]
        tick_irq_flag = 1;
 800b5b6:	4b04      	ldr	r3, [pc, #16]	; (800b5c8 <lv_tick_get+0x18>)
 800b5b8:	7019      	strb	r1, [r3, #0]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle */
 800b5ba:	781a      	ldrb	r2, [r3, #0]
 800b5bc:	2a00      	cmp	r2, #0
 800b5be:	d0fb      	beq.n	800b5b8 <lv_tick_get+0x8>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 800b5c0:	4770      	bx	lr
 800b5c2:	46c0      	nop			; (mov r8, r8)
 800b5c4:	20005e50 	.word	0x20005e50
 800b5c8:	20005e54 	.word	0x20005e54

0800b5cc <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 800b5cc:	b510      	push	{r4, lr}
 800b5ce:	0004      	movs	r4, r0
    uint32_t act_time = lv_tick_get();
 800b5d0:	f7ff ffee 	bl	800b5b0 <lv_tick_get>
    else {
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
 800b5d4:	1b00      	subs	r0, r0, r4
}
 800b5d6:	bd10      	pop	{r4, pc}

0800b5d8 <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
 800b5d8:	b570      	push	{r4, r5, r6, lr}
 800b5da:	000d      	movs	r5, r1
    lv_coord_t r = (area->x2 - area->x1) / 2;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	5ec6      	ldrsh	r6, [r0, r3]
 800b5e0:	2304      	movs	r3, #4
 800b5e2:	5ec2      	ldrsh	r2, [r0, r3]
    lv_coord_t cx = area->x1 + r;
    lv_coord_t cy = area->y1 + r;

    /*Simplify the code by moving everything to (0, 0) */
    lv_coord_t px = p->x - cx;
    lv_coord_t py = p->y - cy;
 800b5e4:	8840      	ldrh	r0, [r0, #2]
    lv_coord_t r = (area->x2 - area->x1) / 2;
 800b5e6:	1b92      	subs	r2, r2, r6
 800b5e8:	0fd1      	lsrs	r1, r2, #31
 800b5ea:	1889      	adds	r1, r1, r2
    lv_coord_t py = p->y - cy;
 800b5ec:	886a      	ldrh	r2, [r5, #2]
    lv_coord_t px = p->x - cx;
 800b5ee:	882b      	ldrh	r3, [r5, #0]
    lv_coord_t py = p->y - cy;
 800b5f0:	1a12      	subs	r2, r2, r0

    uint32_t r_sqrd = r * r;
    uint32_t dist = (px * px) + (py * py);

    if(dist <= r_sqrd)
 800b5f2:	2000      	movs	r0, #0
    lv_coord_t r = (area->x2 - area->x1) / 2;
 800b5f4:	1049      	asrs	r1, r1, #1
    lv_coord_t cx = area->x1 + r;
 800b5f6:	b28c      	uxth	r4, r1
    lv_coord_t px = p->x - cx;
 800b5f8:	1b9b      	subs	r3, r3, r6
 800b5fa:	1b1b      	subs	r3, r3, r4
    lv_coord_t py = p->y - cy;
 800b5fc:	1b12      	subs	r2, r2, r4
    uint32_t dist = (px * px) + (py * py);
 800b5fe:	b21b      	sxth	r3, r3
 800b600:	b212      	sxth	r2, r2
 800b602:	435b      	muls	r3, r3
 800b604:	4352      	muls	r2, r2
    uint32_t r_sqrd = r * r;
 800b606:	4349      	muls	r1, r1
    uint32_t dist = (px * px) + (py * py);
 800b608:	189a      	adds	r2, r3, r2
    if(dist <= r_sqrd)
 800b60a:	4291      	cmp	r1, r2
 800b60c:	4140      	adcs	r0, r0
        return true;
    else
        return false;
}
 800b60e:	b2c0      	uxtb	r0, r0
 800b610:	bd70      	pop	{r4, r5, r6, pc}

0800b612 <lv_area_set>:
{
 800b612:	b530      	push	{r4, r5, lr}
 800b614:	ac03      	add	r4, sp, #12
 800b616:	2500      	movs	r5, #0
 800b618:	5f64      	ldrsh	r4, [r4, r5]
    area_p->x1 = x1;
 800b61a:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
 800b61c:	8042      	strh	r2, [r0, #2]
    area_p->x2 = x2;
 800b61e:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
 800b620:	80c4      	strh	r4, [r0, #6]
}
 800b622:	bd30      	pop	{r4, r5, pc}

0800b624 <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
 800b624:	1e4b      	subs	r3, r1, #1
 800b626:	8841      	ldrh	r1, [r0, #2]
 800b628:	18c9      	adds	r1, r1, r3
 800b62a:	80c1      	strh	r1, [r0, #6]
}
 800b62c:	4770      	bx	lr

0800b62e <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 800b62e:	2304      	movs	r3, #4
 800b630:	5ec2      	ldrsh	r2, [r0, r3]
 800b632:	2100      	movs	r1, #0
 800b634:	5e43      	ldrsh	r3, [r0, r1]
 800b636:	1ad2      	subs	r2, r2, r3
 800b638:	2106      	movs	r1, #6
 800b63a:	5e43      	ldrsh	r3, [r0, r1]
 800b63c:	2102      	movs	r1, #2
 800b63e:	5e40      	ldrsh	r0, [r0, r1]
 800b640:	3201      	adds	r2, #1
 800b642:	1a18      	subs	r0, r3, r0
 800b644:	3001      	adds	r0, #1
 800b646:	4350      	muls	r0, r2
}
 800b648:	4770      	bx	lr

0800b64a <_lv_area_intersect>:
{
 800b64a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800b64c:	8813      	ldrh	r3, [r2, #0]
 800b64e:	880d      	ldrh	r5, [r1, #0]
 800b650:	1c1c      	adds	r4, r3, #0
 800b652:	b22e      	sxth	r6, r5
 800b654:	b21b      	sxth	r3, r3
 800b656:	42b3      	cmp	r3, r6
 800b658:	da00      	bge.n	800b65c <_lv_area_intersect+0x12>
 800b65a:	1c2c      	adds	r4, r5, #0
 800b65c:	8004      	strh	r4, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800b65e:	8853      	ldrh	r3, [r2, #2]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800b660:	b225      	sxth	r5, r4
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800b662:	884c      	ldrh	r4, [r1, #2]
 800b664:	1c1e      	adds	r6, r3, #0
 800b666:	b227      	sxth	r7, r4
 800b668:	b21b      	sxth	r3, r3
 800b66a:	42bb      	cmp	r3, r7
 800b66c:	da00      	bge.n	800b670 <_lv_area_intersect+0x26>
 800b66e:	1c26      	adds	r6, r4, #0
 800b670:	8046      	strh	r6, [r0, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800b672:	8893      	ldrh	r3, [r2, #4]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800b674:	b234      	sxth	r4, r6
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800b676:	888e      	ldrh	r6, [r1, #4]
 800b678:	1c1f      	adds	r7, r3, #0
 800b67a:	b21b      	sxth	r3, r3
 800b67c:	9301      	str	r3, [sp, #4]
 800b67e:	b233      	sxth	r3, r6
 800b680:	469c      	mov	ip, r3
 800b682:	9b01      	ldr	r3, [sp, #4]
 800b684:	4563      	cmp	r3, ip
 800b686:	dd00      	ble.n	800b68a <_lv_area_intersect+0x40>
 800b688:	1c37      	adds	r7, r6, #0
 800b68a:	8087      	strh	r7, [r0, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800b68c:	88d3      	ldrh	r3, [r2, #6]
 800b68e:	88c9      	ldrh	r1, [r1, #6]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800b690:	b23e      	sxth	r6, r7
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800b692:	1c1a      	adds	r2, r3, #0
 800b694:	b20f      	sxth	r7, r1
 800b696:	b21b      	sxth	r3, r3
 800b698:	42bb      	cmp	r3, r7
 800b69a:	dd00      	ble.n	800b69e <_lv_area_intersect+0x54>
 800b69c:	1c0a      	adds	r2, r1, #0
 800b69e:	80c2      	strh	r2, [r0, #6]
 800b6a0:	b213      	sxth	r3, r2
        union_ok = false;
 800b6a2:	2000      	movs	r0, #0
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 800b6a4:	42b5      	cmp	r5, r6
 800b6a6:	dc04      	bgt.n	800b6b2 <_lv_area_intersect+0x68>
 800b6a8:	0fe0      	lsrs	r0, r4, #31
 800b6aa:	17da      	asrs	r2, r3, #31
 800b6ac:	42a3      	cmp	r3, r4
 800b6ae:	4150      	adcs	r0, r2
 800b6b0:	b2c0      	uxtb	r0, r0
}
 800b6b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800b6b4 <_lv_area_join>:
{
 800b6b4:	b570      	push	{r4, r5, r6, lr}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 800b6b6:	8813      	ldrh	r3, [r2, #0]
 800b6b8:	880d      	ldrh	r5, [r1, #0]
 800b6ba:	1c1c      	adds	r4, r3, #0
 800b6bc:	b22e      	sxth	r6, r5
 800b6be:	b21b      	sxth	r3, r3
 800b6c0:	42b3      	cmp	r3, r6
 800b6c2:	dd00      	ble.n	800b6c6 <_lv_area_join+0x12>
 800b6c4:	1c2c      	adds	r4, r5, #0
 800b6c6:	8004      	strh	r4, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 800b6c8:	8853      	ldrh	r3, [r2, #2]
 800b6ca:	884d      	ldrh	r5, [r1, #2]
 800b6cc:	1c1c      	adds	r4, r3, #0
 800b6ce:	b22e      	sxth	r6, r5
 800b6d0:	b21b      	sxth	r3, r3
 800b6d2:	42b3      	cmp	r3, r6
 800b6d4:	dd00      	ble.n	800b6d8 <_lv_area_join+0x24>
 800b6d6:	1c2c      	adds	r4, r5, #0
 800b6d8:	8044      	strh	r4, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 800b6da:	8893      	ldrh	r3, [r2, #4]
 800b6dc:	888d      	ldrh	r5, [r1, #4]
 800b6de:	1c1c      	adds	r4, r3, #0
 800b6e0:	b22e      	sxth	r6, r5
 800b6e2:	b21b      	sxth	r3, r3
 800b6e4:	42b3      	cmp	r3, r6
 800b6e6:	da00      	bge.n	800b6ea <_lv_area_join+0x36>
 800b6e8:	1c2c      	adds	r4, r5, #0
 800b6ea:	8084      	strh	r4, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 800b6ec:	88d3      	ldrh	r3, [r2, #6]
 800b6ee:	88c9      	ldrh	r1, [r1, #6]
 800b6f0:	1c1a      	adds	r2, r3, #0
 800b6f2:	b20c      	sxth	r4, r1
 800b6f4:	b21b      	sxth	r3, r3
 800b6f6:	42a3      	cmp	r3, r4
 800b6f8:	da00      	bge.n	800b6fc <_lv_area_join+0x48>
 800b6fa:	1c0a      	adds	r2, r1, #0
 800b6fc:	80c2      	strh	r2, [r0, #6]
}
 800b6fe:	bd70      	pop	{r4, r5, r6, pc}

0800b700 <_lv_area_is_point_on>:
{
 800b700:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b702:	0004      	movs	r4, r0
 800b704:	000e      	movs	r6, r1
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 800b706:	2300      	movs	r3, #0
 800b708:	5ec9      	ldrsh	r1, [r1, r3]
 800b70a:	2000      	movs	r0, #0
 800b70c:	5e23      	ldrsh	r3, [r4, r0]
{
 800b70e:	b089      	sub	sp, #36	; 0x24
        return false;
 800b710:	2000      	movs	r0, #0
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 800b712:	4299      	cmp	r1, r3
 800b714:	db13      	blt.n	800b73e <_lv_area_is_point_on+0x3e>
 800b716:	2704      	movs	r7, #4
 800b718:	5fe5      	ldrsh	r5, [r4, r7]
 800b71a:	9501      	str	r5, [sp, #4]
 800b71c:	42a9      	cmp	r1, r5
 800b71e:	dc0e      	bgt.n	800b73e <_lv_area_is_point_on+0x3e>
 800b720:	2502      	movs	r5, #2
 800b722:	5f71      	ldrsh	r1, [r6, r5]
 800b724:	2702      	movs	r7, #2
 800b726:	5fe5      	ldrsh	r5, [r4, r7]
 800b728:	9500      	str	r5, [sp, #0]
 800b72a:	42a9      	cmp	r1, r5
 800b72c:	db07      	blt.n	800b73e <_lv_area_is_point_on+0x3e>
 800b72e:	2506      	movs	r5, #6
 800b730:	5f64      	ldrsh	r4, [r4, r5]
 800b732:	9402      	str	r4, [sp, #8]
 800b734:	42a1      	cmp	r1, r4
 800b736:	dc02      	bgt.n	800b73e <_lv_area_is_point_on+0x3e>
    if(radius <= 0) {
 800b738:	4282      	cmp	r2, r0
 800b73a:	dc02      	bgt.n	800b742 <_lv_area_is_point_on+0x42>
        return true;
 800b73c:	2001      	movs	r0, #1
}
 800b73e:	b009      	add	sp, #36	; 0x24
 800b740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800b742:	4669      	mov	r1, sp
 800b744:	8889      	ldrh	r1, [r1, #4]
 800b746:	b29d      	uxth	r5, r3
 800b748:	9105      	str	r1, [sp, #20]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800b74a:	4669      	mov	r1, sp
 800b74c:	8808      	ldrh	r0, [r1, #0]
 800b74e:	890f      	ldrh	r7, [r1, #8]
    corner_area.x1 = a_p->x1;
 800b750:	a906      	add	r1, sp, #24
 800b752:	800b      	strh	r3, [r1, #0]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800b754:	9b05      	ldr	r3, [sp, #20]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800b756:	1c7c      	adds	r4, r7, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800b758:	1c59      	adds	r1, r3, #1
 800b75a:	1b49      	subs	r1, r1, r5
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 800b75c:	b209      	sxth	r1, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800b75e:	1a24      	subs	r4, r4, r0
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 800b760:	b224      	sxth	r4, r4
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 800b762:	0fcb      	lsrs	r3, r1, #31
 800b764:	1859      	adds	r1, r3, r1
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 800b766:	0fe3      	lsrs	r3, r4, #31
 800b768:	191b      	adds	r3, r3, r4
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 800b76a:	1049      	asrs	r1, r1, #1
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 800b76c:	105b      	asrs	r3, r3, #1
    lv_coord_t max_radius = LV_MATH_MIN(w, h);
 800b76e:	1c0c      	adds	r4, r1, #0
 800b770:	4299      	cmp	r1, r3
 800b772:	dd00      	ble.n	800b776 <_lv_area_is_point_on+0x76>
 800b774:	1c1c      	adds	r4, r3, #0
    corner_area.x2 = a_p->x1 + radius;
 800b776:	b223      	sxth	r3, r4
 800b778:	4293      	cmp	r3, r2
 800b77a:	dd00      	ble.n	800b77e <_lv_area_is_point_on+0x7e>
 800b77c:	1c14      	adds	r4, r2, #0
 800b77e:	b2a4      	uxth	r4, r4
    corner_area.y1 = a_p->y1;
 800b780:	9a00      	ldr	r2, [sp, #0]
    corner_area.x2 = a_p->x1 + radius;
 800b782:	1965      	adds	r5, r4, r5
 800b784:	ab06      	add	r3, sp, #24
    corner_area.y2 = a_p->y1 + radius;
 800b786:	1820      	adds	r0, r4, r0
    corner_area.x2 = a_p->x1 + radius;
 800b788:	b2ad      	uxth	r5, r5
    corner_area.y1 = a_p->y1;
 800b78a:	805a      	strh	r2, [r3, #2]
    corner_area.x2 = a_p->x1 + radius;
 800b78c:	809d      	strh	r5, [r3, #4]
    corner_area.y2 = a_p->y1 + radius;
 800b78e:	b283      	uxth	r3, r0
 800b790:	9303      	str	r3, [sp, #12]
 800b792:	466b      	mov	r3, sp
 800b794:	220c      	movs	r2, #12
 800b796:	5e9b      	ldrsh	r3, [r3, r2]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800b798:	0031      	movs	r1, r6
    corner_area.y2 = a_p->y1 + radius;
 800b79a:	9304      	str	r3, [sp, #16]
 800b79c:	9a04      	ldr	r2, [sp, #16]
 800b79e:	ab06      	add	r3, sp, #24
 800b7a0:	80da      	strh	r2, [r3, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800b7a2:	0018      	movs	r0, r3
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	f7ff ffab 	bl	800b700 <_lv_area_is_point_on>
 800b7aa:	1e02      	subs	r2, r0, #0
 800b7ac:	d007      	beq.n	800b7be <_lv_area_is_point_on+0xbe>
        corner_area.x2 += radius;
 800b7ae:	1965      	adds	r5, r4, r5
 800b7b0:	ab06      	add	r3, sp, #24
 800b7b2:	809d      	strh	r5, [r3, #4]
        corner_area.y2 += radius;
 800b7b4:	9b03      	ldr	r3, [sp, #12]
 800b7b6:	18e4      	adds	r4, r4, r3
 800b7b8:	ab06      	add	r3, sp, #24
 800b7ba:	80dc      	strh	r4, [r3, #6]
 800b7bc:	e010      	b.n	800b7e0 <_lv_area_is_point_on+0xe0>
    corner_area.y2 = a_p->y2;
 800b7be:	9902      	ldr	r1, [sp, #8]
    corner_area.y1 = a_p->y2 - radius;
 800b7c0:	ab06      	add	r3, sp, #24
 800b7c2:	1b3f      	subs	r7, r7, r4
    corner_area.y2 = a_p->y2;
 800b7c4:	80d9      	strh	r1, [r3, #6]
    corner_area.y1 = a_p->y2 - radius;
 800b7c6:	b2bf      	uxth	r7, r7
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800b7c8:	0031      	movs	r1, r6
 800b7ca:	0018      	movs	r0, r3
    corner_area.y1 = a_p->y2 - radius;
 800b7cc:	805f      	strh	r7, [r3, #2]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800b7ce:	f7ff ff97 	bl	800b700 <_lv_area_is_point_on>
 800b7d2:	1e02      	subs	r2, r0, #0
 800b7d4:	d009      	beq.n	800b7ea <_lv_area_is_point_on+0xea>
        corner_area.x2 += radius;
 800b7d6:	1965      	adds	r5, r4, r5
 800b7d8:	ab06      	add	r3, sp, #24
 800b7da:	809d      	strh	r5, [r3, #4]
        corner_area.y1 -= radius;
 800b7dc:	1b3c      	subs	r4, r7, r4
 800b7de:	805c      	strh	r4, [r3, #2]
        return lv_point_within_circle(&corner_area, p_p);
 800b7e0:	0031      	movs	r1, r6
 800b7e2:	0018      	movs	r0, r3
 800b7e4:	f7ff fef8 	bl	800b5d8 <lv_point_within_circle>
 800b7e8:	e7a9      	b.n	800b73e <_lv_area_is_point_on+0x3e>
    corner_area.x1 = a_p->x2 - radius;
 800b7ea:	9b05      	ldr	r3, [sp, #20]
    corner_area.x2 = a_p->x2;
 800b7ec:	9901      	ldr	r1, [sp, #4]
    corner_area.x1 = a_p->x2 - radius;
 800b7ee:	1b1d      	subs	r5, r3, r4
 800b7f0:	ab06      	add	r3, sp, #24
    corner_area.x2 = a_p->x2;
 800b7f2:	8099      	strh	r1, [r3, #4]
    corner_area.x1 = a_p->x2 - radius;
 800b7f4:	b2ad      	uxth	r5, r5
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800b7f6:	0031      	movs	r1, r6
 800b7f8:	0018      	movs	r0, r3
    corner_area.x1 = a_p->x2 - radius;
 800b7fa:	801d      	strh	r5, [r3, #0]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800b7fc:	f7ff ff80 	bl	800b700 <_lv_area_is_point_on>
 800b800:	1e02      	subs	r2, r0, #0
 800b802:	d003      	beq.n	800b80c <_lv_area_is_point_on+0x10c>
        corner_area.x1 -= radius;
 800b804:	1b2d      	subs	r5, r5, r4
 800b806:	ab06      	add	r3, sp, #24
 800b808:	801d      	strh	r5, [r3, #0]
 800b80a:	e7e7      	b.n	800b7dc <_lv_area_is_point_on+0xdc>
    corner_area.y1 = a_p->y1;
 800b80c:	9900      	ldr	r1, [sp, #0]
 800b80e:	ab06      	add	r3, sp, #24
 800b810:	8059      	strh	r1, [r3, #2]
    corner_area.y2 = a_p->y1 + radius;
 800b812:	9904      	ldr	r1, [sp, #16]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800b814:	0018      	movs	r0, r3
    corner_area.y2 = a_p->y1 + radius;
 800b816:	80d9      	strh	r1, [r3, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800b818:	0031      	movs	r1, r6
 800b81a:	f7ff ff71 	bl	800b700 <_lv_area_is_point_on>
 800b81e:	2800      	cmp	r0, #0
 800b820:	d100      	bne.n	800b824 <_lv_area_is_point_on+0x124>
 800b822:	e78b      	b.n	800b73c <_lv_area_is_point_on+0x3c>
        corner_area.x1 -= radius;
 800b824:	1b2d      	subs	r5, r5, r4
 800b826:	ab06      	add	r3, sp, #24
 800b828:	801d      	strh	r5, [r3, #0]
 800b82a:	e7c3      	b.n	800b7b4 <_lv_area_is_point_on+0xb4>

0800b82c <_lv_area_is_on>:
{
 800b82c:	b530      	push	{r4, r5, lr}
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 800b82e:	2304      	movs	r3, #4
 800b830:	5eca      	ldrsh	r2, [r1, r3]
 800b832:	2300      	movs	r3, #0
 800b834:	5ec4      	ldrsh	r4, [r0, r3]
        return false;
 800b836:	2300      	movs	r3, #0
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 800b838:	4294      	cmp	r4, r2
 800b83a:	dc14      	bgt.n	800b866 <_lv_area_is_on+0x3a>
 800b83c:	2204      	movs	r2, #4
 800b83e:	5e84      	ldrsh	r4, [r0, r2]
 800b840:	2500      	movs	r5, #0
 800b842:	5f4a      	ldrsh	r2, [r1, r5]
 800b844:	4294      	cmp	r4, r2
 800b846:	db0e      	blt.n	800b866 <_lv_area_is_on+0x3a>
 800b848:	2202      	movs	r2, #2
 800b84a:	5e84      	ldrsh	r4, [r0, r2]
 800b84c:	2506      	movs	r5, #6
 800b84e:	5f4a      	ldrsh	r2, [r1, r5]
 800b850:	4294      	cmp	r4, r2
 800b852:	dc08      	bgt.n	800b866 <_lv_area_is_on+0x3a>
 800b854:	2306      	movs	r3, #6
 800b856:	5ec4      	ldrsh	r4, [r0, r3]
 800b858:	2302      	movs	r3, #2
 800b85a:	5eca      	ldrsh	r2, [r1, r3]
 800b85c:	17e3      	asrs	r3, r4, #31
 800b85e:	0fd0      	lsrs	r0, r2, #31
 800b860:	4294      	cmp	r4, r2
 800b862:	4143      	adcs	r3, r0
 800b864:	b2db      	uxtb	r3, r3
}
 800b866:	0018      	movs	r0, r3
 800b868:	bd30      	pop	{r4, r5, pc}

0800b86a <_lv_area_is_in>:
{
 800b86a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b86c:	0016      	movs	r6, r2
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 800b86e:	2300      	movs	r3, #0
 800b870:	5ec7      	ldrsh	r7, [r0, r3]
 800b872:	2200      	movs	r2, #0
 800b874:	5e8b      	ldrsh	r3, [r1, r2]
{
 800b876:	b085      	sub	sp, #20
 800b878:	000d      	movs	r5, r1
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 800b87a:	42bb      	cmp	r3, r7
 800b87c:	dd02      	ble.n	800b884 <_lv_area_is_in+0x1a>
    if(!is_in) return false;
 800b87e:	2000      	movs	r0, #0
}
 800b880:	b005      	add	sp, #20
 800b882:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 800b884:	2202      	movs	r2, #2
 800b886:	5e83      	ldrsh	r3, [r0, r2]
 800b888:	2102      	movs	r1, #2
 800b88a:	5e6a      	ldrsh	r2, [r5, r1]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	dcf6      	bgt.n	800b87e <_lv_area_is_in+0x14>
 800b890:	2104      	movs	r1, #4
 800b892:	5e42      	ldrsh	r2, [r0, r1]
 800b894:	9200      	str	r2, [sp, #0]
 800b896:	2104      	movs	r1, #4
 800b898:	5e6a      	ldrsh	r2, [r5, r1]
 800b89a:	9900      	ldr	r1, [sp, #0]
 800b89c:	428a      	cmp	r2, r1
 800b89e:	dbee      	blt.n	800b87e <_lv_area_is_in+0x14>
       ain_p->y2 <= aholder_p->y2) {
 800b8a0:	2106      	movs	r1, #6
 800b8a2:	5e42      	ldrsh	r2, [r0, r1]
 800b8a4:	9201      	str	r2, [sp, #4]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 800b8a6:	2106      	movs	r1, #6
 800b8a8:	5e6a      	ldrsh	r2, [r5, r1]
 800b8aa:	9901      	ldr	r1, [sp, #4]
 800b8ac:	428a      	cmp	r2, r1
 800b8ae:	dbe6      	blt.n	800b87e <_lv_area_is_in+0x14>
    if(radius == 0) return true;
 800b8b0:	2001      	movs	r0, #1
 800b8b2:	2e00      	cmp	r6, #0
 800b8b4:	d0e4      	beq.n	800b880 <_lv_area_is_in+0x16>
    p.x = ain_p->x1;
 800b8b6:	ac03      	add	r4, sp, #12
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800b8b8:	0032      	movs	r2, r6
 800b8ba:	0021      	movs	r1, r4
 800b8bc:	0028      	movs	r0, r5
    p.x = ain_p->x1;
 800b8be:	8027      	strh	r7, [r4, #0]
    p.y = ain_p->y1;
 800b8c0:	8063      	strh	r3, [r4, #2]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800b8c2:	f7ff ff1d 	bl	800b700 <_lv_area_is_point_on>
 800b8c6:	2800      	cmp	r0, #0
 800b8c8:	d0d9      	beq.n	800b87e <_lv_area_is_in+0x14>
    p.x = ain_p->x2;
 800b8ca:	9b00      	ldr	r3, [sp, #0]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800b8cc:	0032      	movs	r2, r6
 800b8ce:	0021      	movs	r1, r4
 800b8d0:	0028      	movs	r0, r5
    p.x = ain_p->x2;
 800b8d2:	8023      	strh	r3, [r4, #0]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800b8d4:	f7ff ff14 	bl	800b700 <_lv_area_is_point_on>
 800b8d8:	2800      	cmp	r0, #0
 800b8da:	d0d0      	beq.n	800b87e <_lv_area_is_in+0x14>
    p.y = ain_p->y2;
 800b8dc:	9b01      	ldr	r3, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800b8de:	0032      	movs	r2, r6
 800b8e0:	0021      	movs	r1, r4
 800b8e2:	0028      	movs	r0, r5
    p.x = ain_p->x1;
 800b8e4:	8027      	strh	r7, [r4, #0]
    p.y = ain_p->y2;
 800b8e6:	8063      	strh	r3, [r4, #2]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800b8e8:	f7ff ff0a 	bl	800b700 <_lv_area_is_point_on>
 800b8ec:	2800      	cmp	r0, #0
 800b8ee:	d0c6      	beq.n	800b87e <_lv_area_is_in+0x14>
    p.x = ain_p->x2;
 800b8f0:	9b00      	ldr	r3, [sp, #0]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800b8f2:	0032      	movs	r2, r6
 800b8f4:	0021      	movs	r1, r4
 800b8f6:	0028      	movs	r0, r5
    p.x = ain_p->x2;
 800b8f8:	8023      	strh	r3, [r4, #0]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800b8fa:	f7ff ff01 	bl	800b700 <_lv_area_is_point_on>
 800b8fe:	e7bf      	b.n	800b880 <_lv_area_is_in+0x16>

0800b900 <_lv_area_align>:
{
 800b900:	b570      	push	{r4, r5, r6, lr}
 800b902:	0004      	movs	r4, r0
 800b904:	8805      	ldrh	r5, [r0, #0]
    switch(align) {
 800b906:	2a14      	cmp	r2, #20
 800b908:	d83d      	bhi.n	800b986 <_lv_area_align+0x86>
 800b90a:	0010      	movs	r0, r2
 800b90c:	f7f4 fc28 	bl	8000160 <__gnu_thumb1_case_uhi>
 800b910:	00380015 	.word	0x00380015
 800b914:	00560043 	.word	0x00560043
 800b918:	0065005d 	.word	0x0065005d
 800b91c:	007d0076 	.word	0x007d0076
 800b920:	0086007f 	.word	0x0086007f
 800b924:	009e008d 	.word	0x009e008d
 800b928:	00ac00a5 	.word	0x00ac00a5
 800b92c:	00c400bd 	.word	0x00c400bd
 800b930:	00ce00c9 	.word	0x00ce00c9
 800b934:	00d600d3 	.word	0x00d600d3
 800b938:	00d9      	.short	0x00d9
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800b93a:	88a2      	ldrh	r2, [r4, #4]
 800b93c:	880e      	ldrh	r6, [r1, #0]
 800b93e:	3201      	adds	r2, #1
 800b940:	1b52      	subs	r2, r2, r5
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 800b942:	b212      	sxth	r2, r2
 800b944:	0fd0      	lsrs	r0, r2, #31
 800b946:	1880      	adds	r0, r0, r2
 800b948:	888a      	ldrh	r2, [r1, #4]
 800b94a:	1040      	asrs	r0, r0, #1
 800b94c:	3201      	adds	r2, #1
 800b94e:	1b92      	subs	r2, r2, r6
 800b950:	b212      	sxth	r2, r2
 800b952:	0fd6      	lsrs	r6, r2, #31
 800b954:	18b2      	adds	r2, r6, r2
 800b956:	1052      	asrs	r2, r2, #1
 800b958:	1a82      	subs	r2, r0, r2
            res->x = lv_area_get_width(base);
 800b95a:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800b95c:	88e2      	ldrh	r2, [r4, #6]
 800b95e:	8860      	ldrh	r0, [r4, #2]
 800b960:	3201      	adds	r2, #1
 800b962:	1a12      	subs	r2, r2, r0
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 800b964:	b212      	sxth	r2, r2
 800b966:	0fd0      	lsrs	r0, r2, #31
 800b968:	1880      	adds	r0, r0, r2
 800b96a:	88ca      	ldrh	r2, [r1, #6]
 800b96c:	8849      	ldrh	r1, [r1, #2]
 800b96e:	3201      	adds	r2, #1
 800b970:	1a52      	subs	r2, r2, r1
 800b972:	b212      	sxth	r2, r2
 800b974:	0fd1      	lsrs	r1, r2, #31
 800b976:	188a      	adds	r2, r1, r2
 800b978:	1040      	asrs	r0, r0, #1
 800b97a:	1052      	asrs	r2, r2, #1
 800b97c:	1a82      	subs	r2, r0, r2
 800b97e:	e001      	b.n	800b984 <_lv_area_align+0x84>
            res->x = 0;
 800b980:	2200      	movs	r2, #0
 800b982:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 800b984:	805a      	strh	r2, [r3, #2]
    res->x += base->x1;
 800b986:	881a      	ldrh	r2, [r3, #0]
 800b988:	18ad      	adds	r5, r5, r2
 800b98a:	801d      	strh	r5, [r3, #0]
    res->y += base->y1;
 800b98c:	885a      	ldrh	r2, [r3, #2]
 800b98e:	8861      	ldrh	r1, [r4, #2]
 800b990:	1852      	adds	r2, r2, r1
 800b992:	805a      	strh	r2, [r3, #2]
}
 800b994:	bd70      	pop	{r4, r5, r6, pc}
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800b996:	88a2      	ldrh	r2, [r4, #4]
 800b998:	3201      	adds	r2, #1
 800b99a:	1b52      	subs	r2, r2, r5
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 800b99c:	b212      	sxth	r2, r2
 800b99e:	0fd0      	lsrs	r0, r2, #31
 800b9a0:	1880      	adds	r0, r0, r2
 800b9a2:	888a      	ldrh	r2, [r1, #4]
 800b9a4:	8809      	ldrh	r1, [r1, #0]
 800b9a6:	3201      	adds	r2, #1
 800b9a8:	1a52      	subs	r2, r2, r1
 800b9aa:	b212      	sxth	r2, r2
 800b9ac:	0fd1      	lsrs	r1, r2, #31
 800b9ae:	188a      	adds	r2, r1, r2
 800b9b0:	1040      	asrs	r0, r0, #1
 800b9b2:	1052      	asrs	r2, r2, #1
 800b9b4:	1a82      	subs	r2, r0, r2
            res->x = lv_area_get_width(base);
 800b9b6:	801a      	strh	r2, [r3, #0]
            res->y = 0;
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	e7e3      	b.n	800b984 <_lv_area_align+0x84>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 800b9bc:	880a      	ldrh	r2, [r1, #0]
 800b9be:	8889      	ldrh	r1, [r1, #4]
 800b9c0:	1a52      	subs	r2, r2, r1
 800b9c2:	88a1      	ldrh	r1, [r4, #4]
 800b9c4:	1852      	adds	r2, r2, r1
 800b9c6:	1b52      	subs	r2, r2, r5
 800b9c8:	e7f5      	b.n	800b9b6 <_lv_area_align+0xb6>
            res->x = 0;
 800b9ca:	2200      	movs	r2, #0
            res->x = lv_area_get_width(base);
 800b9cc:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 800b9ce:	884a      	ldrh	r2, [r1, #2]
 800b9d0:	88c9      	ldrh	r1, [r1, #6]
 800b9d2:	1a52      	subs	r2, r2, r1
 800b9d4:	88e1      	ldrh	r1, [r4, #6]
 800b9d6:	1852      	adds	r2, r2, r1
 800b9d8:	e043      	b.n	800ba62 <_lv_area_align+0x162>
 800b9da:	88a2      	ldrh	r2, [r4, #4]
 800b9dc:	880e      	ldrh	r6, [r1, #0]
 800b9de:	3201      	adds	r2, #1
 800b9e0:	1b52      	subs	r2, r2, r5
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 800b9e2:	b212      	sxth	r2, r2
 800b9e4:	0fd0      	lsrs	r0, r2, #31
 800b9e6:	1880      	adds	r0, r0, r2
 800b9e8:	888a      	ldrh	r2, [r1, #4]
 800b9ea:	1040      	asrs	r0, r0, #1
 800b9ec:	3201      	adds	r2, #1
 800b9ee:	1b92      	subs	r2, r2, r6
 800b9f0:	b212      	sxth	r2, r2
 800b9f2:	0fd6      	lsrs	r6, r2, #31
 800b9f4:	18b2      	adds	r2, r6, r2
 800b9f6:	1052      	asrs	r2, r2, #1
 800b9f8:	1a82      	subs	r2, r0, r2
 800b9fa:	e7e7      	b.n	800b9cc <_lv_area_align+0xcc>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 800b9fc:	8888      	ldrh	r0, [r1, #4]
 800b9fe:	880a      	ldrh	r2, [r1, #0]
 800ba00:	1a12      	subs	r2, r2, r0
 800ba02:	88a0      	ldrh	r0, [r4, #4]
 800ba04:	1812      	adds	r2, r2, r0
 800ba06:	1b52      	subs	r2, r2, r5
 800ba08:	e7e0      	b.n	800b9cc <_lv_area_align+0xcc>
            res->x = 0;
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	e7a5      	b.n	800b95a <_lv_area_align+0x5a>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 800ba0e:	8888      	ldrh	r0, [r1, #4]
 800ba10:	880a      	ldrh	r2, [r1, #0]
 800ba12:	1a12      	subs	r2, r2, r0
 800ba14:	88a0      	ldrh	r0, [r4, #4]
 800ba16:	1812      	adds	r2, r2, r0
 800ba18:	1b52      	subs	r2, r2, r5
 800ba1a:	e79e      	b.n	800b95a <_lv_area_align+0x5a>
            res->x = 0;
 800ba1c:	2200      	movs	r2, #0
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 800ba1e:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ba20:	88ca      	ldrh	r2, [r1, #6]
 800ba22:	8849      	ldrh	r1, [r1, #2]
 800ba24:	1a52      	subs	r2, r2, r1
            res->y = -lv_area_get_height(to_align);
 800ba26:	43d2      	mvns	r2, r2
 800ba28:	e7ac      	b.n	800b984 <_lv_area_align+0x84>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ba2a:	88a2      	ldrh	r2, [r4, #4]
 800ba2c:	880e      	ldrh	r6, [r1, #0]
 800ba2e:	3201      	adds	r2, #1
 800ba30:	1b52      	subs	r2, r2, r5
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 800ba32:	b212      	sxth	r2, r2
 800ba34:	0fd0      	lsrs	r0, r2, #31
 800ba36:	1880      	adds	r0, r0, r2
 800ba38:	888a      	ldrh	r2, [r1, #4]
 800ba3a:	1040      	asrs	r0, r0, #1
 800ba3c:	3201      	adds	r2, #1
 800ba3e:	1b92      	subs	r2, r2, r6
 800ba40:	b212      	sxth	r2, r2
 800ba42:	0fd6      	lsrs	r6, r2, #31
 800ba44:	18b2      	adds	r2, r6, r2
 800ba46:	1052      	asrs	r2, r2, #1
 800ba48:	1a82      	subs	r2, r0, r2
 800ba4a:	e7e8      	b.n	800ba1e <_lv_area_align+0x11e>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 800ba4c:	8888      	ldrh	r0, [r1, #4]
 800ba4e:	880a      	ldrh	r2, [r1, #0]
 800ba50:	1a12      	subs	r2, r2, r0
 800ba52:	88a0      	ldrh	r0, [r4, #4]
 800ba54:	1812      	adds	r2, r2, r0
 800ba56:	1b52      	subs	r2, r2, r5
 800ba58:	e7e1      	b.n	800ba1e <_lv_area_align+0x11e>
            res->x = 0;
 800ba5a:	2200      	movs	r2, #0
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 800ba5c:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ba5e:	88e2      	ldrh	r2, [r4, #6]
 800ba60:	3201      	adds	r2, #1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 800ba62:	8861      	ldrh	r1, [r4, #2]
 800ba64:	1a52      	subs	r2, r2, r1
 800ba66:	e78d      	b.n	800b984 <_lv_area_align+0x84>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ba68:	88a2      	ldrh	r2, [r4, #4]
 800ba6a:	3201      	adds	r2, #1
 800ba6c:	1b52      	subs	r2, r2, r5
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 800ba6e:	b212      	sxth	r2, r2
 800ba70:	0fd0      	lsrs	r0, r2, #31
 800ba72:	1880      	adds	r0, r0, r2
 800ba74:	888a      	ldrh	r2, [r1, #4]
 800ba76:	8809      	ldrh	r1, [r1, #0]
 800ba78:	3201      	adds	r2, #1
 800ba7a:	1a52      	subs	r2, r2, r1
 800ba7c:	b212      	sxth	r2, r2
 800ba7e:	0fd1      	lsrs	r1, r2, #31
 800ba80:	188a      	adds	r2, r1, r2
 800ba82:	1040      	asrs	r0, r0, #1
 800ba84:	1052      	asrs	r2, r2, #1
 800ba86:	1a82      	subs	r2, r0, r2
 800ba88:	e7e8      	b.n	800ba5c <_lv_area_align+0x15c>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 800ba8a:	880a      	ldrh	r2, [r1, #0]
 800ba8c:	8889      	ldrh	r1, [r1, #4]
 800ba8e:	1a52      	subs	r2, r2, r1
 800ba90:	88a1      	ldrh	r1, [r4, #4]
 800ba92:	1852      	adds	r2, r2, r1
 800ba94:	1b52      	subs	r2, r2, r5
 800ba96:	e7e1      	b.n	800ba5c <_lv_area_align+0x15c>
 800ba98:	888a      	ldrh	r2, [r1, #4]
 800ba9a:	8809      	ldrh	r1, [r1, #0]
 800ba9c:	1a52      	subs	r2, r2, r1
            res->x = -lv_area_get_width(to_align);
 800ba9e:	43d2      	mvns	r2, r2
 800baa0:	e789      	b.n	800b9b6 <_lv_area_align+0xb6>
 800baa2:	888a      	ldrh	r2, [r1, #4]
 800baa4:	8808      	ldrh	r0, [r1, #0]
 800baa6:	1a12      	subs	r2, r2, r0
            res->x = -lv_area_get_width(to_align);
 800baa8:	43d2      	mvns	r2, r2
 800baaa:	e756      	b.n	800b95a <_lv_area_align+0x5a>
 800baac:	888a      	ldrh	r2, [r1, #4]
 800baae:	8808      	ldrh	r0, [r1, #0]
 800bab0:	1a12      	subs	r2, r2, r0
            res->x = -lv_area_get_width(to_align);
 800bab2:	43d2      	mvns	r2, r2
 800bab4:	e78a      	b.n	800b9cc <_lv_area_align+0xcc>
 800bab6:	88a2      	ldrh	r2, [r4, #4]
 800bab8:	3201      	adds	r2, #1
 800baba:	e784      	b.n	800b9c6 <_lv_area_align+0xc6>
 800babc:	88a2      	ldrh	r2, [r4, #4]
 800babe:	3201      	adds	r2, #1
 800bac0:	e7aa      	b.n	800ba18 <_lv_area_align+0x118>
 800bac2:	88a2      	ldrh	r2, [r4, #4]
 800bac4:	3201      	adds	r2, #1
 800bac6:	e79e      	b.n	800ba06 <_lv_area_align+0x106>

0800bac8 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 800bac8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800baca:	26ff      	movs	r6, #255	; 0xff
 800bacc:	271f      	movs	r7, #31
 800bace:	0403      	lsls	r3, r0, #16
 800bad0:	040c      	lsls	r4, r1, #16
 800bad2:	1ab6      	subs	r6, r6, r2
 800bad4:	0edb      	lsrs	r3, r3, #27
 800bad6:	0ee4      	lsrs	r4, r4, #27
 800bad8:	4374      	muls	r4, r6
 800bada:	4353      	muls	r3, r2
 800badc:	4d11      	ldr	r5, [pc, #68]	; (800bb24 <lv_color_mix+0x5c>)
 800bade:	191b      	adds	r3, r3, r4
 800bae0:	3380      	adds	r3, #128	; 0x80
 800bae2:	436b      	muls	r3, r5
 800bae4:	0ddb      	lsrs	r3, r3, #23
 800bae6:	403b      	ands	r3, r7
 800bae8:	9301      	str	r3, [sp, #4]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800baea:	054b      	lsls	r3, r1, #21
 800baec:	0e9b      	lsrs	r3, r3, #26
 800baee:	4373      	muls	r3, r6
 800baf0:	469c      	mov	ip, r3
 800baf2:	0544      	lsls	r4, r0, #21
 800baf4:	0ea4      	lsrs	r4, r4, #26
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800baf6:	06c0      	lsls	r0, r0, #27
 800baf8:	06c9      	lsls	r1, r1, #27
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800bafa:	4354      	muls	r4, r2
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800bafc:	0ec0      	lsrs	r0, r0, #27
 800bafe:	0ec9      	lsrs	r1, r1, #27
 800bb00:	4371      	muls	r1, r6
 800bb02:	4350      	muls	r0, r2
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800bb04:	4464      	add	r4, ip
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800bb06:	1840      	adds	r0, r0, r1
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800bb08:	3480      	adds	r4, #128	; 0x80
 800bb0a:	436c      	muls	r4, r5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800bb0c:	3080      	adds	r0, #128	; 0x80
 800bb0e:	4368      	muls	r0, r5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800bb10:	00e4      	lsls	r4, r4, #3
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 800bb12:	9b01      	ldr	r3, [sp, #4]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800bb14:	0dc0      	lsrs	r0, r0, #23
    return ret;
 800bb16:	0ea4      	lsrs	r4, r4, #26
 800bb18:	4038      	ands	r0, r7
 800bb1a:	0164      	lsls	r4, r4, #5
 800bb1c:	02db      	lsls	r3, r3, #11
 800bb1e:	4320      	orrs	r0, r4
 800bb20:	4318      	orrs	r0, r3
}
 800bb22:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bb24:	00008081 	.word	0x00008081

0800bb28 <lv_color_fill>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
 800bb28:	b510      	push	{r4, lr}
 800bb2a:	b28c      	uxth	r4, r1
#if LV_COLOR_DEPTH == 16
    uintptr_t buf_int = (uintptr_t) buf;
    if(buf_int & 0x3) {
 800bb2c:	0783      	lsls	r3, r0, #30
 800bb2e:	d002      	beq.n	800bb36 <lv_color_fill+0xe>
        *buf = color;
 800bb30:	8001      	strh	r1, [r0, #0]
        buf++;
        px_num--;
 800bb32:	3a01      	subs	r2, #1
        buf++;
 800bb34:	3002      	adds	r0, #2
    }

    uint32_t c32 = color.full + (color.full << 16);
 800bb36:	0423      	lsls	r3, r4, #16
 800bb38:	191b      	adds	r3, r3, r4
    uint32_t * buf32 = (uint32_t *)buf;

    while(px_num > 16) {
 800bb3a:	2a10      	cmp	r2, #16
 800bb3c:	d802      	bhi.n	800bb44 <lv_color_fill+0x1c>
        px_num -= 16;
    }

    buf = (lv_color_t *)buf32;

    while(px_num) {
 800bb3e:	2a00      	cmp	r2, #0
 800bb40:	d10b      	bne.n	800bb5a <lv_color_fill+0x32>
        *buf = color;
        buf++;
        px_num --;
    }
#endif
}
 800bb42:	bd10      	pop	{r4, pc}
        *buf32 = c32;
 800bb44:	6003      	str	r3, [r0, #0]
        *buf32 = c32;
 800bb46:	6043      	str	r3, [r0, #4]
        *buf32 = c32;
 800bb48:	6083      	str	r3, [r0, #8]
        *buf32 = c32;
 800bb4a:	60c3      	str	r3, [r0, #12]
        *buf32 = c32;
 800bb4c:	6103      	str	r3, [r0, #16]
        *buf32 = c32;
 800bb4e:	6143      	str	r3, [r0, #20]
        *buf32 = c32;
 800bb50:	6183      	str	r3, [r0, #24]
        *buf32 = c32;
 800bb52:	61c3      	str	r3, [r0, #28]
        px_num -= 16;
 800bb54:	3a10      	subs	r2, #16
 800bb56:	3020      	adds	r0, #32
 800bb58:	e7ef      	b.n	800bb3a <lv_color_fill+0x12>
        *buf = color;
 800bb5a:	8004      	strh	r4, [r0, #0]
        px_num --;
 800bb5c:	3a01      	subs	r2, #1
        buf++;
 800bb5e:	3002      	adds	r0, #2
 800bb60:	e7ed      	b.n	800bb3e <lv_color_fill+0x16>

0800bb62 <lv_color_darken>:
{
    return lv_color_mix(LV_COLOR_WHITE, c, lvl);
}

lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl)
{
 800bb62:	b510      	push	{r4, lr}
 800bb64:	000a      	movs	r2, r1
    return lv_color_mix(LV_COLOR_BLACK, c, lvl);
 800bb66:	1c01      	adds	r1, r0, #0
 800bb68:	2000      	movs	r0, #0
 800bb6a:	f7ff ffad 	bl	800bac8 <lv_color_mix>
}
 800bb6e:	bd10      	pop	{r4, pc}

0800bb70 <node_set_prev.isra.0>:
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 800bb70:	2900      	cmp	r1, #0
 800bb72:	d001      	beq.n	800bb78 <node_set_prev.isra.0+0x8>
    act8 += LL_PREV_P_OFFSET(ll_p);

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;

    *act_node_p = *prev_node_p;
 800bb74:	6803      	ldr	r3, [r0, #0]
 800bb76:	50ca      	str	r2, [r1, r3]
}
 800bb78:	4770      	bx	lr

0800bb7a <node_set_next.isra.1>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 800bb7a:	2900      	cmp	r1, #0
 800bb7c:	d002      	beq.n	800bb84 <node_set_next.isra.1+0xa>

    act8 += LL_NEXT_P_OFFSET(ll_p);
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;

    *act_node_p = *next_node_p;
 800bb7e:	6803      	ldr	r3, [r0, #0]
 800bb80:	18c9      	adds	r1, r1, r3
 800bb82:	604a      	str	r2, [r1, #4]
}
 800bb84:	4770      	bx	lr

0800bb86 <_lv_ll_init>:
    ll_p->head = NULL;
 800bb86:	2300      	movs	r3, #0
    node_size = (node_size + 3) & (~0x3);
 800bb88:	3103      	adds	r1, #3
    ll_p->head = NULL;
 800bb8a:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
 800bb8c:	6083      	str	r3, [r0, #8]
    node_size = (node_size + 3) & (~0x3);
 800bb8e:	3303      	adds	r3, #3
 800bb90:	4399      	bics	r1, r3
    ll_p->n_size = node_size;
 800bb92:	6001      	str	r1, [r0, #0]
}
 800bb94:	4770      	bx	lr

0800bb96 <_lv_ll_ins_head>:
{
 800bb96:	b570      	push	{r4, r5, r6, lr}
 800bb98:	0004      	movs	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800bb9a:	6800      	ldr	r0, [r0, #0]
 800bb9c:	3008      	adds	r0, #8
 800bb9e:	f000 f987 	bl	800beb0 <lv_mem_alloc>
 800bba2:	1e05      	subs	r5, r0, #0
    if(n_new != NULL) {
 800bba4:	d015      	beq.n	800bbd2 <_lv_ll_ins_head+0x3c>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 800bba6:	0001      	movs	r1, r0
 800bba8:	2200      	movs	r2, #0
 800bbaa:	0020      	movs	r0, r4
 800bbac:	f7ff ffe0 	bl	800bb70 <node_set_prev.isra.0>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 800bbb0:	0029      	movs	r1, r5
 800bbb2:	6862      	ldr	r2, [r4, #4]
 800bbb4:	0020      	movs	r0, r4
 800bbb6:	f7ff ffe0 	bl	800bb7a <node_set_next.isra.1>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 800bbba:	6861      	ldr	r1, [r4, #4]
 800bbbc:	2900      	cmp	r1, #0
 800bbbe:	d003      	beq.n	800bbc8 <_lv_ll_ins_head+0x32>
            node_set_prev(ll_p, ll_p->head, n_new);
 800bbc0:	002a      	movs	r2, r5
 800bbc2:	0020      	movs	r0, r4
 800bbc4:	f7ff ffd4 	bl	800bb70 <node_set_prev.isra.0>
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 800bbc8:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 800bbca:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d100      	bne.n	800bbd2 <_lv_ll_ins_head+0x3c>
            ll_p->tail = n_new;
 800bbd0:	60a5      	str	r5, [r4, #8]
}
 800bbd2:	0028      	movs	r0, r5
 800bbd4:	bd70      	pop	{r4, r5, r6, pc}

0800bbd6 <_lv_ll_ins_tail>:
{
 800bbd6:	b570      	push	{r4, r5, r6, lr}
 800bbd8:	0004      	movs	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800bbda:	6800      	ldr	r0, [r0, #0]
 800bbdc:	3008      	adds	r0, #8
 800bbde:	f000 f967 	bl	800beb0 <lv_mem_alloc>
 800bbe2:	1e05      	subs	r5, r0, #0
    if(n_new != NULL) {
 800bbe4:	d015      	beq.n	800bc12 <_lv_ll_ins_tail+0x3c>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 800bbe6:	0001      	movs	r1, r0
 800bbe8:	2200      	movs	r2, #0
 800bbea:	0020      	movs	r0, r4
 800bbec:	f7ff ffc5 	bl	800bb7a <node_set_next.isra.1>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
 800bbf0:	0029      	movs	r1, r5
 800bbf2:	68a2      	ldr	r2, [r4, #8]
 800bbf4:	0020      	movs	r0, r4
 800bbf6:	f7ff ffbb 	bl	800bb70 <node_set_prev.isra.0>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 800bbfa:	68a1      	ldr	r1, [r4, #8]
 800bbfc:	2900      	cmp	r1, #0
 800bbfe:	d003      	beq.n	800bc08 <_lv_ll_ins_tail+0x32>
            node_set_next(ll_p, ll_p->tail, n_new);
 800bc00:	002a      	movs	r2, r5
 800bc02:	0020      	movs	r0, r4
 800bc04:	f7ff ffb9 	bl	800bb7a <node_set_next.isra.1>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 800bc08:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 800bc0a:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d100      	bne.n	800bc12 <_lv_ll_ins_tail+0x3c>
            ll_p->head = n_new;
 800bc10:	6065      	str	r5, [r4, #4]
}
 800bc12:	0028      	movs	r0, r5
 800bc14:	bd70      	pop	{r4, r5, r6, pc}

0800bc16 <_lv_ll_get_head>:
    if(ll_p != NULL) {
 800bc16:	2800      	cmp	r0, #0
 800bc18:	d000      	beq.n	800bc1c <_lv_ll_get_head+0x6>
        head = ll_p->head;
 800bc1a:	6840      	ldr	r0, [r0, #4]
}
 800bc1c:	4770      	bx	lr

0800bc1e <_lv_ll_get_tail>:
    if(ll_p != NULL) {
 800bc1e:	2800      	cmp	r0, #0
 800bc20:	d000      	beq.n	800bc24 <_lv_ll_get_tail+0x6>
        tail = ll_p->tail;
 800bc22:	6880      	ldr	r0, [r0, #8]
}
 800bc24:	4770      	bx	lr

0800bc26 <_lv_ll_get_next>:
    if(ll_p == NULL) return NULL;
 800bc26:	2800      	cmp	r0, #0
 800bc28:	d002      	beq.n	800bc30 <_lv_ll_get_next+0xa>
    return *((lv_ll_node_t **)n_act_d);
 800bc2a:	6803      	ldr	r3, [r0, #0]
 800bc2c:	18c9      	adds	r1, r1, r3
 800bc2e:	6848      	ldr	r0, [r1, #4]
}
 800bc30:	4770      	bx	lr

0800bc32 <_lv_ll_get_prev>:
    if(ll_p == NULL) return NULL;
 800bc32:	2800      	cmp	r0, #0
 800bc34:	d001      	beq.n	800bc3a <_lv_ll_get_prev+0x8>
    return *((lv_ll_node_t **)n_act_d);
 800bc36:	6803      	ldr	r3, [r0, #0]
 800bc38:	58c8      	ldr	r0, [r1, r3]
}
 800bc3a:	4770      	bx	lr

0800bc3c <_lv_ll_ins_prev>:
{
 800bc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc3e:	0004      	movs	r4, r0
 800bc40:	000e      	movs	r6, r1
    if(NULL == ll_p || NULL == n_act) return NULL;
 800bc42:	1e05      	subs	r5, r0, #0
 800bc44:	d007      	beq.n	800bc56 <_lv_ll_ins_prev+0x1a>
 800bc46:	1e0d      	subs	r5, r1, #0
 800bc48:	d005      	beq.n	800bc56 <_lv_ll_ins_prev+0x1a>
    if(_lv_ll_get_head(ll_p) == n_act) {
 800bc4a:	6843      	ldr	r3, [r0, #4]
 800bc4c:	4299      	cmp	r1, r3
 800bc4e:	d104      	bne.n	800bc5a <_lv_ll_ins_prev+0x1e>
        n_new = _lv_ll_ins_head(ll_p);
 800bc50:	f7ff ffa1 	bl	800bb96 <_lv_ll_ins_head>
 800bc54:	0005      	movs	r5, r0
}
 800bc56:	0028      	movs	r0, r5
 800bc58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800bc5a:	6800      	ldr	r0, [r0, #0]
 800bc5c:	3008      	adds	r0, #8
 800bc5e:	f000 f927 	bl	800beb0 <lv_mem_alloc>
 800bc62:	1e05      	subs	r5, r0, #0
        if(n_new == NULL) return NULL;
 800bc64:	d0f7      	beq.n	800bc56 <_lv_ll_ins_prev+0x1a>
        n_prev = _lv_ll_get_prev(ll_p, n_act);
 800bc66:	0031      	movs	r1, r6
 800bc68:	0020      	movs	r0, r4
 800bc6a:	f7ff ffe2 	bl	800bc32 <_lv_ll_get_prev>
 800bc6e:	0007      	movs	r7, r0
        node_set_next(ll_p, n_prev, n_new);
 800bc70:	002a      	movs	r2, r5
 800bc72:	0001      	movs	r1, r0
 800bc74:	0020      	movs	r0, r4
 800bc76:	f7ff ff80 	bl	800bb7a <node_set_next.isra.1>
        node_set_prev(ll_p, n_new, n_prev);
 800bc7a:	003a      	movs	r2, r7
 800bc7c:	0029      	movs	r1, r5
 800bc7e:	0020      	movs	r0, r4
 800bc80:	f7ff ff76 	bl	800bb70 <node_set_prev.isra.0>
        node_set_prev(ll_p, n_act, n_new);
 800bc84:	002a      	movs	r2, r5
 800bc86:	0031      	movs	r1, r6
 800bc88:	0020      	movs	r0, r4
 800bc8a:	f7ff ff71 	bl	800bb70 <node_set_prev.isra.0>
        node_set_next(ll_p, n_new, n_act);
 800bc8e:	0032      	movs	r2, r6
 800bc90:	0029      	movs	r1, r5
 800bc92:	0020      	movs	r0, r4
 800bc94:	f7ff ff71 	bl	800bb7a <node_set_next.isra.1>
 800bc98:	e7dd      	b.n	800bc56 <_lv_ll_ins_prev+0x1a>

0800bc9a <_lv_ll_remove>:
{
 800bc9a:	b570      	push	{r4, r5, r6, lr}
 800bc9c:	0004      	movs	r4, r0
 800bc9e:	000d      	movs	r5, r1
    if(ll_p != NULL) {
 800bca0:	2800      	cmp	r0, #0
 800bca2:	d01c      	beq.n	800bcde <_lv_ll_remove+0x44>
    if(_lv_ll_get_head(ll_p) == node_p) {
 800bca4:	6843      	ldr	r3, [r0, #4]
 800bca6:	4299      	cmp	r1, r3
 800bca8:	d109      	bne.n	800bcbe <_lv_ll_remove+0x24>
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 800bcaa:	0029      	movs	r1, r5
 800bcac:	0020      	movs	r0, r4
 800bcae:	f7ff ffba 	bl	800bc26 <_lv_ll_get_next>
            node_set_prev(ll_p, ll_p->head, NULL);
 800bcb2:	2200      	movs	r2, #0
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 800bcb4:	1e01      	subs	r1, r0, #0
 800bcb6:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
 800bcb8:	d124      	bne.n	800bd04 <_lv_ll_remove+0x6a>
            ll_p->tail = NULL;
 800bcba:	60a0      	str	r0, [r4, #8]
}
 800bcbc:	bd70      	pop	{r4, r5, r6, pc}
 800bcbe:	f7ff ffb8 	bl	800bc32 <_lv_ll_get_prev>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 800bcc2:	68a3      	ldr	r3, [r4, #8]
 800bcc4:	0001      	movs	r1, r0
 800bcc6:	429d      	cmp	r5, r3
 800bcc8:	d10b      	bne.n	800bce2 <_lv_ll_remove+0x48>
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
 800bcca:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
 800bccc:	2800      	cmp	r0, #0
 800bcce:	d101      	bne.n	800bcd4 <_lv_ll_remove+0x3a>
            ll_p->head = NULL;
 800bcd0:	6060      	str	r0, [r4, #4]
 800bcd2:	e7f3      	b.n	800bcbc <_lv_ll_remove+0x22>
            node_set_next(ll_p, ll_p->tail, NULL);
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	0020      	movs	r0, r4
 800bcd8:	f7ff ff4f 	bl	800bb7a <node_set_next.isra.1>
 800bcdc:	e7ee      	b.n	800bcbc <_lv_ll_remove+0x22>
    if(_lv_ll_get_head(ll_p) == node_p) {
 800bcde:	2900      	cmp	r1, #0
 800bce0:	d0e3      	beq.n	800bcaa <_lv_ll_remove+0x10>
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
 800bce2:	0029      	movs	r1, r5
 800bce4:	0020      	movs	r0, r4
 800bce6:	f7ff ffa4 	bl	800bc32 <_lv_ll_get_prev>
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
 800bcea:	0029      	movs	r1, r5
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
 800bcec:	0006      	movs	r6, r0
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
 800bcee:	0020      	movs	r0, r4
 800bcf0:	f7ff ff99 	bl	800bc26 <_lv_ll_get_next>
 800bcf4:	0005      	movs	r5, r0
        node_set_next(ll_p, n_prev, n_next);
 800bcf6:	0002      	movs	r2, r0
 800bcf8:	0031      	movs	r1, r6
 800bcfa:	0020      	movs	r0, r4
 800bcfc:	f7ff ff3d 	bl	800bb7a <node_set_next.isra.1>
        node_set_prev(ll_p, n_next, n_prev);
 800bd00:	0032      	movs	r2, r6
 800bd02:	0029      	movs	r1, r5
 800bd04:	0020      	movs	r0, r4
 800bd06:	f7ff ff33 	bl	800bb70 <node_set_prev.isra.0>
}
 800bd0a:	e7d7      	b.n	800bcbc <_lv_ll_remove+0x22>

0800bd0c <_lv_ll_chg_list>:
{
 800bd0c:	b570      	push	{r4, r5, r6, lr}
 800bd0e:	000c      	movs	r4, r1
    _lv_ll_remove(ll_ori_p, node);
 800bd10:	0011      	movs	r1, r2
{
 800bd12:	001e      	movs	r6, r3
 800bd14:	0015      	movs	r5, r2
    _lv_ll_remove(ll_ori_p, node);
 800bd16:	f7ff ffc0 	bl	800bc9a <_lv_ll_remove>
    if(head) {
 800bd1a:	2e00      	cmp	r6, #0
 800bd1c:	d016      	beq.n	800bd4c <_lv_ll_chg_list+0x40>
        node_set_prev(ll_new_p, node, NULL);
 800bd1e:	2200      	movs	r2, #0
 800bd20:	0029      	movs	r1, r5
 800bd22:	0020      	movs	r0, r4
 800bd24:	f7ff ff24 	bl	800bb70 <node_set_prev.isra.0>
        node_set_next(ll_new_p, node, ll_new_p->head);
 800bd28:	0029      	movs	r1, r5
 800bd2a:	6862      	ldr	r2, [r4, #4]
 800bd2c:	0020      	movs	r0, r4
 800bd2e:	f7ff ff24 	bl	800bb7a <node_set_next.isra.1>
        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
 800bd32:	6861      	ldr	r1, [r4, #4]
 800bd34:	2900      	cmp	r1, #0
 800bd36:	d003      	beq.n	800bd40 <_lv_ll_chg_list+0x34>
            node_set_prev(ll_new_p, ll_new_p->head, node);
 800bd38:	002a      	movs	r2, r5
 800bd3a:	0020      	movs	r0, r4
 800bd3c:	f7ff ff18 	bl	800bb70 <node_set_prev.isra.0>
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 800bd40:	68a3      	ldr	r3, [r4, #8]
        ll_new_p->head = node;       /*Set the new head in the dsc.*/
 800bd42:	6065      	str	r5, [r4, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d100      	bne.n	800bd4a <_lv_ll_chg_list+0x3e>
            ll_new_p->tail = node;
 800bd48:	60a5      	str	r5, [r4, #8]
}
 800bd4a:	bd70      	pop	{r4, r5, r6, pc}
        node_set_prev(ll_new_p, node, ll_new_p->tail);
 800bd4c:	68a2      	ldr	r2, [r4, #8]
 800bd4e:	0029      	movs	r1, r5
 800bd50:	0020      	movs	r0, r4
 800bd52:	f7ff ff0d 	bl	800bb70 <node_set_prev.isra.0>
        node_set_next(ll_new_p, node, NULL);
 800bd56:	0029      	movs	r1, r5
 800bd58:	0032      	movs	r2, r6
 800bd5a:	0020      	movs	r0, r4
 800bd5c:	f7ff ff0d 	bl	800bb7a <node_set_next.isra.1>
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
 800bd60:	68a1      	ldr	r1, [r4, #8]
 800bd62:	2900      	cmp	r1, #0
 800bd64:	d003      	beq.n	800bd6e <_lv_ll_chg_list+0x62>
            node_set_next(ll_new_p, ll_new_p->tail, node);
 800bd66:	002a      	movs	r2, r5
 800bd68:	0020      	movs	r0, r4
 800bd6a:	f7ff ff06 	bl	800bb7a <node_set_next.isra.1>
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 800bd6e:	6863      	ldr	r3, [r4, #4]
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
 800bd70:	60a5      	str	r5, [r4, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d1e9      	bne.n	800bd4a <_lv_ll_chg_list+0x3e>
            ll_new_p->head = node;
 800bd76:	6065      	str	r5, [r4, #4]
}
 800bd78:	e7e7      	b.n	800bd4a <_lv_ll_chg_list+0x3e>

0800bd7a <_lv_ll_move_before>:
{
 800bd7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd7c:	0004      	movs	r4, r0
 800bd7e:	000d      	movs	r5, r1
 800bd80:	0016      	movs	r6, r2
    if(n_act == n_after) return; /*Can't move before itself*/
 800bd82:	4291      	cmp	r1, r2
 800bd84:	d007      	beq.n	800bd96 <_lv_ll_move_before+0x1c>
    if(n_after != NULL)
 800bd86:	2a00      	cmp	r2, #0
 800bd88:	d006      	beq.n	800bd98 <_lv_ll_move_before+0x1e>
        n_before = _lv_ll_get_prev(ll_p, n_after);
 800bd8a:	0011      	movs	r1, r2
 800bd8c:	f7ff ff51 	bl	800bc32 <_lv_ll_get_prev>
 800bd90:	0007      	movs	r7, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
 800bd92:	4285      	cmp	r5, r0
 800bd94:	d122      	bne.n	800bddc <_lv_ll_move_before+0x62>
}
 800bd96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ll_p != NULL) {
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	d000      	beq.n	800bd9e <_lv_ll_move_before+0x24>
        tail = ll_p->tail;
 800bd9c:	6886      	ldr	r6, [r0, #8]
    if(n_act == n_before) return; /*Already before `n_after`*/
 800bd9e:	42ae      	cmp	r6, r5
 800bda0:	d0f9      	beq.n	800bd96 <_lv_ll_move_before+0x1c>
    _lv_ll_remove(ll_p, n_act);
 800bda2:	0029      	movs	r1, r5
 800bda4:	0020      	movs	r0, r4
 800bda6:	f7ff ff78 	bl	800bc9a <_lv_ll_remove>
    node_set_next(ll_p, n_before, n_act);
 800bdaa:	002a      	movs	r2, r5
 800bdac:	0031      	movs	r1, r6
 800bdae:	0020      	movs	r0, r4
 800bdb0:	f7ff fee3 	bl	800bb7a <node_set_next.isra.1>
    node_set_prev(ll_p, n_act, n_before);
 800bdb4:	0032      	movs	r2, r6
 800bdb6:	0029      	movs	r1, r5
 800bdb8:	0020      	movs	r0, r4
 800bdba:	f7ff fed9 	bl	800bb70 <node_set_prev.isra.0>
    node_set_prev(ll_p, n_after, n_act);
 800bdbe:	002a      	movs	r2, r5
 800bdc0:	2100      	movs	r1, #0
 800bdc2:	0020      	movs	r0, r4
 800bdc4:	f7ff fed4 	bl	800bb70 <node_set_prev.isra.0>
    node_set_next(ll_p, n_act, n_after);
 800bdc8:	2200      	movs	r2, #0
 800bdca:	0029      	movs	r1, r5
 800bdcc:	0020      	movs	r0, r4
 800bdce:	f7ff fed4 	bl	800bb7a <node_set_next.isra.1>
    if(n_after == NULL) ll_p->tail = n_act;
 800bdd2:	60a5      	str	r5, [r4, #8]
    if(n_before == NULL) ll_p->head = n_act;
 800bdd4:	2e00      	cmp	r6, #0
 800bdd6:	d1de      	bne.n	800bd96 <_lv_ll_move_before+0x1c>
 800bdd8:	6065      	str	r5, [r4, #4]
 800bdda:	e7dc      	b.n	800bd96 <_lv_ll_move_before+0x1c>
    _lv_ll_remove(ll_p, n_act);
 800bddc:	0029      	movs	r1, r5
 800bdde:	0020      	movs	r0, r4
 800bde0:	f7ff ff5b 	bl	800bc9a <_lv_ll_remove>
    node_set_next(ll_p, n_before, n_act);
 800bde4:	002a      	movs	r2, r5
 800bde6:	0039      	movs	r1, r7
 800bde8:	0020      	movs	r0, r4
 800bdea:	f7ff fec6 	bl	800bb7a <node_set_next.isra.1>
    node_set_prev(ll_p, n_act, n_before);
 800bdee:	003a      	movs	r2, r7
 800bdf0:	0029      	movs	r1, r5
 800bdf2:	0020      	movs	r0, r4
 800bdf4:	f7ff febc 	bl	800bb70 <node_set_prev.isra.0>
    node_set_prev(ll_p, n_after, n_act);
 800bdf8:	0031      	movs	r1, r6
 800bdfa:	002a      	movs	r2, r5
 800bdfc:	0020      	movs	r0, r4
 800bdfe:	f7ff feb7 	bl	800bb70 <node_set_prev.isra.0>
    node_set_next(ll_p, n_act, n_after);
 800be02:	0032      	movs	r2, r6
 800be04:	0029      	movs	r1, r5
 800be06:	0020      	movs	r0, r4
 800be08:	f7ff feb7 	bl	800bb7a <node_set_next.isra.1>
 800be0c:	003e      	movs	r6, r7
 800be0e:	e7e1      	b.n	800bdd4 <_lv_ll_move_before+0x5a>

0800be10 <_lv_sqrt>:
 */
LV_ATTRIBUTE_FAST_MEM void _lv_sqrt(uint32_t x, lv_sqrt_res_t * q, uint32_t mask)
{
    x = x << 8; /*To get 4 bit precision. (sqrt(256) = 16 = 4 bit)*/

    uint32_t root = 0;
 800be10:	2300      	movs	r3, #0
{
 800be12:	b530      	push	{r4, r5, lr}
    x = x << 8; /*To get 4 bit precision. (sqrt(256) = 16 = 4 bit)*/
 800be14:	0200      	lsls	r0, r0, #8
    uint32_t trial;
    // http://ww1.microchip.com/...en/AppNotes/91040a.pdf
    do {
        trial = root + mask;
 800be16:	18d4      	adds	r4, r2, r3
        if(trial * trial <= x) root = trial;
 800be18:	0025      	movs	r5, r4
 800be1a:	4365      	muls	r5, r4
 800be1c:	4285      	cmp	r5, r0
 800be1e:	d800      	bhi.n	800be22 <_lv_sqrt+0x12>
 800be20:	0023      	movs	r3, r4
        mask = mask >> 1;
 800be22:	0852      	lsrs	r2, r2, #1
    } while(mask);
 800be24:	d1f7      	bne.n	800be16 <_lv_sqrt+0x6>

    q->i = root >> 4;
 800be26:	091a      	lsrs	r2, r3, #4
 800be28:	800a      	strh	r2, [r1, #0]
    q->f = (root & 0xf) << 4;
 800be2a:	22ff      	movs	r2, #255	; 0xff
 800be2c:	011b      	lsls	r3, r3, #4
 800be2e:	4013      	ands	r3, r2
 800be30:	804b      	strh	r3, [r1, #2]
}
 800be32:	bd30      	pop	{r4, r5, pc}

0800be34 <ent_get_next>:
 * Give the next entry after 'act_e'
 * @param act_e pointer to an entry
 * @return pointer to an entry after 'act_e'
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
 800be34:	4b08      	ldr	r3, [pc, #32]	; (800be58 <ent_get_next+0x24>)
 800be36:	681b      	ldr	r3, [r3, #0]
    lv_mem_ent_t * next_e = NULL;

    if(act_e == NULL) { /*NULL means: get the first entry*/
 800be38:	2800      	cmp	r0, #0
 800be3a:	d00b      	beq.n	800be54 <ent_get_next+0x20>
        next_e = (lv_mem_ent_t *)work_mem;
    }
    else {   /*Get the next entry */
        uint8_t * data = &act_e->first_data;
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 800be3c:	6801      	ldr	r1, [r0, #0]
        uint8_t * data = &act_e->first_data;
 800be3e:	1d02      	adds	r2, r0, #4
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 800be40:	0849      	lsrs	r1, r1, #1
 800be42:	1852      	adds	r2, r2, r1

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 800be44:	2180      	movs	r1, #128	; 0x80
 800be46:	0149      	lsls	r1, r1, #5
 800be48:	1859      	adds	r1, r3, r1
 800be4a:	1d10      	adds	r0, r2, #4
 800be4c:	2300      	movs	r3, #0
 800be4e:	4288      	cmp	r0, r1
 800be50:	d200      	bcs.n	800be54 <ent_get_next+0x20>
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 800be52:	0013      	movs	r3, r2
    }

    return next_e;
}
 800be54:	0018      	movs	r0, r3
 800be56:	4770      	bx	lr
 800be58:	20005e7c 	.word	0x20005e7c

0800be5c <ent_trunc>:
 * @param size new size in bytes
 */
static void ent_trunc(lv_mem_ent_t * e, size_t size)
{
    /*Round the size up to ALIGN_MASK*/
    size = (size + ALIGN_MASK) & (~ALIGN_MASK);
 800be5c:	2303      	movs	r3, #3
 800be5e:	3103      	adds	r1, #3
 800be60:	4399      	bics	r1, r3

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 800be62:	6803      	ldr	r3, [r0, #0]
 800be64:	1d0a      	adds	r2, r1, #4
{
 800be66:	b530      	push	{r4, r5, lr}
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 800be68:	085b      	lsrs	r3, r3, #1
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d013      	beq.n	800be96 <ent_trunc+0x3a>
        size = e->header.s.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
 800be6e:	428b      	cmp	r3, r1
 800be70:	d011      	beq.n	800be96 <ent_trunc+0x3a>
        uint8_t * e_data             = &e->first_data;
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.s.used   = 0;
 800be72:	2401      	movs	r4, #1
        after_new_e->header.s.d_size = (uint32_t)e->header.s.d_size - size - sizeof(lv_mem_header_t);
 800be74:	3b04      	subs	r3, #4
 800be76:	1a5b      	subs	r3, r3, r1
 800be78:	40a3      	lsls	r3, r4
        uint8_t * e_data             = &e->first_data;
 800be7a:	1d02      	adds	r2, r0, #4
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
 800be7c:	1852      	adds	r2, r2, r1

        /* Set the new size for the original entry */
        e->header.s.d_size = (uint32_t)size;
 800be7e:	40a1      	lsls	r1, r4
        after_new_e->header.s.used   = 0;
 800be80:	7815      	ldrb	r5, [r2, #0]
 800be82:	43a5      	bics	r5, r4
 800be84:	7015      	strb	r5, [r2, #0]
        after_new_e->header.s.d_size = (uint32_t)e->header.s.d_size - size - sizeof(lv_mem_header_t);
 800be86:	6815      	ldr	r5, [r2, #0]
 800be88:	4025      	ands	r5, r4
 800be8a:	432b      	orrs	r3, r5
 800be8c:	6013      	str	r3, [r2, #0]
        e->header.s.d_size = (uint32_t)size;
 800be8e:	6803      	ldr	r3, [r0, #0]
 800be90:	401c      	ands	r4, r3
 800be92:	4321      	orrs	r1, r4
 800be94:	6001      	str	r1, [r0, #0]
    }
}
 800be96:	bd30      	pop	{r4, r5, pc}

0800be98 <_lv_mem_init>:
    work_mem = (uint8_t *)work_mem_int;
 800be98:	4b02      	ldr	r3, [pc, #8]	; (800bea4 <_lv_mem_init+0xc>)
 800be9a:	4a03      	ldr	r2, [pc, #12]	; (800bea8 <_lv_mem_init+0x10>)
 800be9c:	6013      	str	r3, [r2, #0]
    full->header.s.used = 0;
 800be9e:	4a03      	ldr	r2, [pc, #12]	; (800beac <_lv_mem_init+0x14>)
 800bea0:	601a      	str	r2, [r3, #0]
}
 800bea2:	4770      	bx	lr
 800bea4:	20005e80 	.word	0x20005e80
 800bea8:	20005e7c 	.word	0x20005e7c
 800beac:	00001ff8 	.word	0x00001ff8

0800beb0 <lv_mem_alloc>:
{
 800beb0:	b570      	push	{r4, r5, r6, lr}
        return &zero_mem;
 800beb2:	4c14      	ldr	r4, [pc, #80]	; (800bf04 <lv_mem_alloc+0x54>)
    if(size == 0) {
 800beb4:	2800      	cmp	r0, #0
 800beb6:	d023      	beq.n	800bf00 <lv_mem_alloc+0x50>
    size = (size + ALIGN_MASK) & (~ALIGN_MASK);
 800beb8:	2303      	movs	r3, #3
 800beba:	3003      	adds	r0, #3
 800bebc:	4398      	bics	r0, r3
 800bebe:	0005      	movs	r5, r0
    lv_mem_ent_t * e = NULL;
 800bec0:	2400      	movs	r4, #0
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
 800bec2:	2601      	movs	r6, #1
        e = ent_get_next(e);
 800bec4:	0020      	movs	r0, r4
 800bec6:	f7ff ffb5 	bl	800be34 <ent_get_next>
 800beca:	1e04      	subs	r4, r0, #0
        if(e != NULL) {
 800becc:	d018      	beq.n	800bf00 <lv_mem_alloc+0x50>
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
 800bece:	7803      	ldrb	r3, [r0, #0]
 800bed0:	4233      	tst	r3, r6
 800bed2:	d1f7      	bne.n	800bec4 <lv_mem_alloc+0x14>
 800bed4:	6803      	ldr	r3, [r0, #0]
 800bed6:	085b      	lsrs	r3, r3, #1
 800bed8:	429d      	cmp	r5, r3
 800beda:	d8f3      	bhi.n	800bec4 <lv_mem_alloc+0x14>
        ent_trunc(e, size);
 800bedc:	0029      	movs	r1, r5
 800bede:	f7ff ffbd 	bl	800be5c <ent_trunc>
        e->header.s.used = 1;
 800bee2:	7823      	ldrb	r3, [r4, #0]
 800bee4:	431e      	orrs	r6, r3
        if((uintptr_t) alloc > (uintptr_t) work_mem) {
 800bee6:	4b08      	ldr	r3, [pc, #32]	; (800bf08 <lv_mem_alloc+0x58>)
        e->header.s.used = 1;
 800bee8:	7026      	strb	r6, [r4, #0]
        if((uintptr_t) alloc > (uintptr_t) work_mem) {
 800beea:	6818      	ldr	r0, [r3, #0]
        alloc = &e->first_data;
 800beec:	3404      	adds	r4, #4
        if((uintptr_t) alloc > (uintptr_t) work_mem) {
 800beee:	4284      	cmp	r4, r0
 800bef0:	d906      	bls.n	800bf00 <lv_mem_alloc+0x50>
            if((((uintptr_t) alloc - (uintptr_t) work_mem) + size) > mem_max_size) {
 800bef2:	4b06      	ldr	r3, [pc, #24]	; (800bf0c <lv_mem_alloc+0x5c>)
 800bef4:	1a2d      	subs	r5, r5, r0
 800bef6:	681a      	ldr	r2, [r3, #0]
 800bef8:	192d      	adds	r5, r5, r4
 800befa:	4295      	cmp	r5, r2
 800befc:	d900      	bls.n	800bf00 <lv_mem_alloc+0x50>
                mem_max_size = ((uintptr_t) alloc - (uintptr_t) work_mem) + size;
 800befe:	601d      	str	r5, [r3, #0]
}
 800bf00:	0020      	movs	r0, r4
 800bf02:	bd70      	pop	{r4, r5, r6, pc}
 800bf04:	20006e80 	.word	0x20006e80
 800bf08:	20005e7c 	.word	0x20005e7c
 800bf0c:	20005e78 	.word	0x20005e78

0800bf10 <lv_mem_defrag>:
{
 800bf10:	b570      	push	{r4, r5, r6, lr}
            if(e_free->header.s.used != 0) {
 800bf12:	2501      	movs	r5, #1
        next_e = (lv_mem_ent_t *)work_mem;
 800bf14:	4b0f      	ldr	r3, [pc, #60]	; (800bf54 <lv_mem_defrag+0x44>)
 800bf16:	681c      	ldr	r4, [r3, #0]
        while(e_free != NULL) {
 800bf18:	2c00      	cmp	r4, #0
 800bf1a:	d100      	bne.n	800bf1e <lv_mem_defrag+0xe>
}
 800bf1c:	bd70      	pop	{r4, r5, r6, pc}
 800bf1e:	0020      	movs	r0, r4
 800bf20:	f7ff ff88 	bl	800be34 <ent_get_next>
            if(e_free->header.s.used != 0) {
 800bf24:	7823      	ldrb	r3, [r4, #0]
 800bf26:	422b      	tst	r3, r5
 800bf28:	d010      	beq.n	800bf4c <lv_mem_defrag+0x3c>
{
 800bf2a:	0004      	movs	r4, r0
 800bf2c:	e7f4      	b.n	800bf18 <lv_mem_defrag+0x8>
            if(e_next->header.s.used == 0) {
 800bf2e:	7803      	ldrb	r3, [r0, #0]
 800bf30:	422b      	tst	r3, r5
 800bf32:	d1fa      	bne.n	800bf2a <lv_mem_defrag+0x1a>
                e_free->header.s.d_size += e_next->header.s.d_size + sizeof(e_next->header);
 800bf34:	6822      	ldr	r2, [r4, #0]
 800bf36:	6801      	ldr	r1, [r0, #0]
 800bf38:	0853      	lsrs	r3, r2, #1
 800bf3a:	3304      	adds	r3, #4
 800bf3c:	0849      	lsrs	r1, r1, #1
 800bf3e:	185b      	adds	r3, r3, r1
 800bf40:	005b      	lsls	r3, r3, #1
 800bf42:	402a      	ands	r2, r5
 800bf44:	4313      	orrs	r3, r2
 800bf46:	6023      	str	r3, [r4, #0]
            e_next = ent_get_next(e_next);
 800bf48:	f7ff ff74 	bl	800be34 <ent_get_next>
        while(e_next != NULL) {
 800bf4c:	2800      	cmp	r0, #0
 800bf4e:	d1ee      	bne.n	800bf2e <lv_mem_defrag+0x1e>
 800bf50:	e7e4      	b.n	800bf1c <lv_mem_defrag+0xc>
 800bf52:	46c0      	nop			; (mov r8, r8)
 800bf54:	20005e7c 	.word	0x20005e7c

0800bf58 <lv_mem_free>:
    if(data == &zero_mem) return;
 800bf58:	4b14      	ldr	r3, [pc, #80]	; (800bfac <lv_mem_free+0x54>)
{
 800bf5a:	b570      	push	{r4, r5, r6, lr}
    if(data == &zero_mem) return;
 800bf5c:	4298      	cmp	r0, r3
 800bf5e:	d024      	beq.n	800bfaa <lv_mem_free+0x52>
    if(data == NULL) return;
 800bf60:	2800      	cmp	r0, #0
 800bf62:	d022      	beq.n	800bfaa <lv_mem_free+0x52>
    e->header.s.used = 0;
 800bf64:	2501      	movs	r5, #1
 800bf66:	1f04      	subs	r4, r0, #4
 800bf68:	7823      	ldrb	r3, [r4, #0]
    full_defrag_cnt++;
 800bf6a:	4a11      	ldr	r2, [pc, #68]	; (800bfb0 <lv_mem_free+0x58>)
    e->header.s.used = 0;
 800bf6c:	43ab      	bics	r3, r5
 800bf6e:	7023      	strb	r3, [r4, #0]
    full_defrag_cnt++;
 800bf70:	8813      	ldrh	r3, [r2, #0]
        e_next = ent_get_next(e);
 800bf72:	0020      	movs	r0, r4
    full_defrag_cnt++;
 800bf74:	195b      	adds	r3, r3, r5
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	8013      	strh	r3, [r2, #0]
    if(full_defrag_cnt < LV_MEM_FULL_DEFRAG_CNT) {
 800bf7a:	2b0f      	cmp	r3, #15
 800bf7c:	d911      	bls.n	800bfa2 <lv_mem_free+0x4a>
        full_defrag_cnt = 0;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	8013      	strh	r3, [r2, #0]
        lv_mem_defrag();
 800bf82:	f7ff ffc5 	bl	800bf10 <lv_mem_defrag>
 800bf86:	e010      	b.n	800bfaa <lv_mem_free+0x52>
            if(e_next->header.s.used == 0) {
 800bf88:	7803      	ldrb	r3, [r0, #0]
 800bf8a:	422b      	tst	r3, r5
 800bf8c:	d10d      	bne.n	800bfaa <lv_mem_free+0x52>
                e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
 800bf8e:	6822      	ldr	r2, [r4, #0]
 800bf90:	6801      	ldr	r1, [r0, #0]
 800bf92:	0853      	lsrs	r3, r2, #1
 800bf94:	3304      	adds	r3, #4
 800bf96:	0849      	lsrs	r1, r1, #1
 800bf98:	185b      	adds	r3, r3, r1
 800bf9a:	005b      	lsls	r3, r3, #1
 800bf9c:	402a      	ands	r2, r5
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	6023      	str	r3, [r4, #0]
            e_next = ent_get_next(e_next);
 800bfa2:	f7ff ff47 	bl	800be34 <ent_get_next>
        while(e_next != NULL) {
 800bfa6:	2800      	cmp	r0, #0
 800bfa8:	d1ee      	bne.n	800bf88 <lv_mem_free+0x30>
}
 800bfaa:	bd70      	pop	{r4, r5, r6, pc}
 800bfac:	20006e80 	.word	0x20006e80
 800bfb0:	20005e56 	.word	0x20005e56

0800bfb4 <_lv_mem_get_size>:
{
 800bfb4:	1e03      	subs	r3, r0, #0
    if(data == NULL) return 0;
 800bfb6:	d006      	beq.n	800bfc6 <_lv_mem_get_size+0x12>
    if(data == &zero_mem) return 0;
 800bfb8:	4a03      	ldr	r2, [pc, #12]	; (800bfc8 <_lv_mem_get_size+0x14>)
    if(data == NULL) return 0;
 800bfba:	2000      	movs	r0, #0
    if(data == &zero_mem) return 0;
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d002      	beq.n	800bfc6 <_lv_mem_get_size+0x12>
    return e->header.s.d_size;
 800bfc0:	3b04      	subs	r3, #4
 800bfc2:	6818      	ldr	r0, [r3, #0]
 800bfc4:	0840      	lsrs	r0, r0, #1
}
 800bfc6:	4770      	bx	lr
 800bfc8:	20006e80 	.word	0x20006e80

0800bfcc <_lv_mem_buf_release>:
        if(mem_buf_small[i].p == p) {
 800bfcc:	4b0d      	ldr	r3, [pc, #52]	; (800c004 <_lv_mem_buf_release+0x38>)
 800bfce:	681a      	ldr	r2, [r3, #0]
 800bfd0:	4290      	cmp	r0, r2
 800bfd2:	d00b      	beq.n	800bfec <_lv_mem_buf_release+0x20>
 800bfd4:	6899      	ldr	r1, [r3, #8]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	4288      	cmp	r0, r1
 800bfda:	d109      	bne.n	800bff0 <_lv_mem_buf_release+0x24>
 800bfdc:	3201      	adds	r2, #1
            mem_buf_small[i].used = 0;
 800bfde:	00d2      	lsls	r2, r2, #3
 800bfe0:	189b      	adds	r3, r3, r2
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
 800bfe2:	2101      	movs	r1, #1
 800bfe4:	799a      	ldrb	r2, [r3, #6]
 800bfe6:	438a      	bics	r2, r1
 800bfe8:	719a      	strb	r2, [r3, #6]
}
 800bfea:	4770      	bx	lr
        if(mem_buf_small[i].p == p) {
 800bfec:	2200      	movs	r2, #0
 800bfee:	e7f6      	b.n	800bfde <_lv_mem_buf_release+0x12>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
 800bff0:	4905      	ldr	r1, [pc, #20]	; (800c008 <_lv_mem_buf_release+0x3c>)
 800bff2:	00d3      	lsls	r3, r2, #3
 800bff4:	185b      	adds	r3, r3, r1
 800bff6:	6819      	ldr	r1, [r3, #0]
 800bff8:	4281      	cmp	r1, r0
 800bffa:	d0f2      	beq.n	800bfe2 <_lv_mem_buf_release+0x16>
 800bffc:	3201      	adds	r2, #1
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 800bffe:	2a10      	cmp	r2, #16
 800c000:	d1f6      	bne.n	800bff0 <_lv_mem_buf_release+0x24>
 800c002:	e7f2      	b.n	800bfea <_lv_mem_buf_release+0x1e>
 800c004:	2000003c 	.word	0x2000003c
 800c008:	20007108 	.word	0x20007108

0800c00c <_lv_mem_buf_free_all>:
{
 800c00c:	b570      	push	{r4, r5, r6, lr}
        mem_buf_small[i].used = 0;
 800c00e:	2501      	movs	r5, #1
 800c010:	2600      	movs	r6, #0
 800c012:	4b0c      	ldr	r3, [pc, #48]	; (800c044 <_lv_mem_buf_free_all+0x38>)
 800c014:	799a      	ldrb	r2, [r3, #6]
 800c016:	43aa      	bics	r2, r5
 800c018:	719a      	strb	r2, [r3, #6]
 800c01a:	7b9a      	ldrb	r2, [r3, #14]
 800c01c:	43aa      	bics	r2, r5
 800c01e:	739a      	strb	r2, [r3, #14]
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
 800c020:	4b09      	ldr	r3, [pc, #36]	; (800c048 <_lv_mem_buf_free_all+0x3c>)
 800c022:	00f4      	lsls	r4, r6, #3
 800c024:	18e4      	adds	r4, r4, r3
 800c026:	6820      	ldr	r0, [r4, #0]
 800c028:	2800      	cmp	r0, #0
 800c02a:	d007      	beq.n	800c03c <_lv_mem_buf_free_all+0x30>
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
 800c02c:	f7ff ff94 	bl	800bf58 <lv_mem_free>
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
 800c030:	2200      	movs	r2, #0
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
 800c032:	79a3      	ldrb	r3, [r4, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
 800c034:	6022      	str	r2, [r4, #0]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
 800c036:	43ab      	bics	r3, r5
 800c038:	71a3      	strb	r3, [r4, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = 0;
 800c03a:	80a2      	strh	r2, [r4, #4]
 800c03c:	3601      	adds	r6, #1
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 800c03e:	2e10      	cmp	r6, #16
 800c040:	d1ee      	bne.n	800c020 <_lv_mem_buf_free_all+0x14>
}
 800c042:	bd70      	pop	{r4, r5, r6, pc}
 800c044:	2000003c 	.word	0x2000003c
 800c048:	20007108 	.word	0x20007108

0800c04c <_lv_memcpy>:
{
 800c04c:	b530      	push	{r4, r5, lr}
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 800c04e:	2503      	movs	r5, #3
 800c050:	0004      	movs	r4, r0
    uint8_t * d8 = dst;
 800c052:	0003      	movs	r3, r0
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 800c054:	402c      	ands	r4, r5
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 800c056:	400d      	ands	r5, r1
    if(s_align != d_align) {
 800c058:	42ac      	cmp	r4, r5
 800c05a:	d15b      	bne.n	800c114 <_lv_memcpy+0xc8>
    if(d_align) {
 800c05c:	2c00      	cmp	r4, #0
 800c05e:	d00b      	beq.n	800c078 <_lv_memcpy+0x2c>
        d_align = ALIGN_MASK + 1 - d_align;
 800c060:	1b03      	subs	r3, r0, r4
    uint8_t * d8 = dst;
 800c062:	0004      	movs	r4, r0
 800c064:	3304      	adds	r3, #4
        while(d_align && len) {
 800c066:	2a00      	cmp	r2, #0
 800c068:	d059      	beq.n	800c11e <_lv_memcpy+0xd2>
            COPY8;
 800c06a:	780d      	ldrb	r5, [r1, #0]
            len--;
 800c06c:	3a01      	subs	r2, #1
            COPY8;
 800c06e:	7025      	strb	r5, [r4, #0]
 800c070:	3401      	adds	r4, #1
 800c072:	3101      	adds	r1, #1
        while(d_align && len) {
 800c074:	429c      	cmp	r4, r3
 800c076:	d1f6      	bne.n	800c066 <_lv_memcpy+0x1a>
    while(len > 32) {
 800c078:	2a20      	cmp	r2, #32
 800c07a:	d855      	bhi.n	800c128 <_lv_memcpy+0xdc>
    while(len > 4) {
 800c07c:	2a04      	cmp	r2, #4
 800c07e:	d867      	bhi.n	800c150 <_lv_memcpy+0x104>
 800c080:	2400      	movs	r4, #0
    while(len) {
 800c082:	42a2      	cmp	r2, r4
 800c084:	d04b      	beq.n	800c11e <_lv_memcpy+0xd2>
        COPY8
 800c086:	5d0d      	ldrb	r5, [r1, r4]
 800c088:	551d      	strb	r5, [r3, r4]
 800c08a:	3401      	adds	r4, #1
 800c08c:	e7f9      	b.n	800c082 <_lv_memcpy+0x36>
            REPEAT8(COPY8);
 800c08e:	780c      	ldrb	r4, [r1, #0]
            len -= 32;
 800c090:	3a20      	subs	r2, #32
            REPEAT8(COPY8);
 800c092:	701c      	strb	r4, [r3, #0]
 800c094:	784c      	ldrb	r4, [r1, #1]
 800c096:	705c      	strb	r4, [r3, #1]
 800c098:	788c      	ldrb	r4, [r1, #2]
 800c09a:	709c      	strb	r4, [r3, #2]
 800c09c:	78cc      	ldrb	r4, [r1, #3]
 800c09e:	70dc      	strb	r4, [r3, #3]
 800c0a0:	790c      	ldrb	r4, [r1, #4]
 800c0a2:	711c      	strb	r4, [r3, #4]
 800c0a4:	794c      	ldrb	r4, [r1, #5]
 800c0a6:	715c      	strb	r4, [r3, #5]
 800c0a8:	798c      	ldrb	r4, [r1, #6]
 800c0aa:	719c      	strb	r4, [r3, #6]
 800c0ac:	79cc      	ldrb	r4, [r1, #7]
 800c0ae:	71dc      	strb	r4, [r3, #7]
            REPEAT8(COPY8);
 800c0b0:	7a0c      	ldrb	r4, [r1, #8]
 800c0b2:	721c      	strb	r4, [r3, #8]
 800c0b4:	7a4c      	ldrb	r4, [r1, #9]
 800c0b6:	725c      	strb	r4, [r3, #9]
 800c0b8:	7a8c      	ldrb	r4, [r1, #10]
 800c0ba:	729c      	strb	r4, [r3, #10]
 800c0bc:	7acc      	ldrb	r4, [r1, #11]
 800c0be:	72dc      	strb	r4, [r3, #11]
 800c0c0:	7b0c      	ldrb	r4, [r1, #12]
 800c0c2:	731c      	strb	r4, [r3, #12]
 800c0c4:	7b4c      	ldrb	r4, [r1, #13]
 800c0c6:	735c      	strb	r4, [r3, #13]
 800c0c8:	7b8c      	ldrb	r4, [r1, #14]
 800c0ca:	739c      	strb	r4, [r3, #14]
 800c0cc:	7bcc      	ldrb	r4, [r1, #15]
 800c0ce:	73dc      	strb	r4, [r3, #15]
            REPEAT8(COPY8);
 800c0d0:	7c0c      	ldrb	r4, [r1, #16]
 800c0d2:	741c      	strb	r4, [r3, #16]
 800c0d4:	7c4c      	ldrb	r4, [r1, #17]
 800c0d6:	745c      	strb	r4, [r3, #17]
 800c0d8:	7c8c      	ldrb	r4, [r1, #18]
 800c0da:	749c      	strb	r4, [r3, #18]
 800c0dc:	7ccc      	ldrb	r4, [r1, #19]
 800c0de:	74dc      	strb	r4, [r3, #19]
 800c0e0:	7d0c      	ldrb	r4, [r1, #20]
 800c0e2:	751c      	strb	r4, [r3, #20]
 800c0e4:	7d4c      	ldrb	r4, [r1, #21]
 800c0e6:	755c      	strb	r4, [r3, #21]
 800c0e8:	7d8c      	ldrb	r4, [r1, #22]
 800c0ea:	759c      	strb	r4, [r3, #22]
 800c0ec:	7dcc      	ldrb	r4, [r1, #23]
 800c0ee:	75dc      	strb	r4, [r3, #23]
            REPEAT8(COPY8);
 800c0f0:	7e0c      	ldrb	r4, [r1, #24]
 800c0f2:	761c      	strb	r4, [r3, #24]
 800c0f4:	7e4c      	ldrb	r4, [r1, #25]
 800c0f6:	765c      	strb	r4, [r3, #25]
 800c0f8:	7e8c      	ldrb	r4, [r1, #26]
 800c0fa:	769c      	strb	r4, [r3, #26]
 800c0fc:	7ecc      	ldrb	r4, [r1, #27]
 800c0fe:	76dc      	strb	r4, [r3, #27]
 800c100:	7f0c      	ldrb	r4, [r1, #28]
 800c102:	771c      	strb	r4, [r3, #28]
 800c104:	7f4c      	ldrb	r4, [r1, #29]
 800c106:	775c      	strb	r4, [r3, #29]
 800c108:	7f8c      	ldrb	r4, [r1, #30]
 800c10a:	779c      	strb	r4, [r3, #30]
 800c10c:	7fcc      	ldrb	r4, [r1, #31]
 800c10e:	3120      	adds	r1, #32
 800c110:	77dc      	strb	r4, [r3, #31]
 800c112:	3320      	adds	r3, #32
        while(len > 32) {
 800c114:	2a20      	cmp	r2, #32
 800c116:	d8ba      	bhi.n	800c08e <_lv_memcpy+0x42>
 800c118:	2400      	movs	r4, #0
        while(len) {
 800c11a:	42a2      	cmp	r2, r4
 800c11c:	d100      	bne.n	800c120 <_lv_memcpy+0xd4>
}
 800c11e:	bd30      	pop	{r4, r5, pc}
            COPY8
 800c120:	5d0d      	ldrb	r5, [r1, r4]
 800c122:	551d      	strb	r5, [r3, r4]
 800c124:	3401      	adds	r4, #1
 800c126:	e7f8      	b.n	800c11a <_lv_memcpy+0xce>
        REPEAT8(COPY32)
 800c128:	680c      	ldr	r4, [r1, #0]
        len -= 32;
 800c12a:	3a20      	subs	r2, #32
        REPEAT8(COPY32)
 800c12c:	601c      	str	r4, [r3, #0]
 800c12e:	684c      	ldr	r4, [r1, #4]
 800c130:	605c      	str	r4, [r3, #4]
 800c132:	688c      	ldr	r4, [r1, #8]
 800c134:	609c      	str	r4, [r3, #8]
 800c136:	68cc      	ldr	r4, [r1, #12]
 800c138:	60dc      	str	r4, [r3, #12]
 800c13a:	690c      	ldr	r4, [r1, #16]
 800c13c:	611c      	str	r4, [r3, #16]
 800c13e:	694c      	ldr	r4, [r1, #20]
 800c140:	615c      	str	r4, [r3, #20]
 800c142:	698c      	ldr	r4, [r1, #24]
 800c144:	619c      	str	r4, [r3, #24]
 800c146:	69cc      	ldr	r4, [r1, #28]
 800c148:	3120      	adds	r1, #32
 800c14a:	61dc      	str	r4, [r3, #28]
 800c14c:	3320      	adds	r3, #32
 800c14e:	e793      	b.n	800c078 <_lv_memcpy+0x2c>
        COPY32;
 800c150:	c910      	ldmia	r1!, {r4}
        len -= 4;
 800c152:	3a04      	subs	r2, #4
        COPY32;
 800c154:	c310      	stmia	r3!, {r4}
 800c156:	e791      	b.n	800c07c <_lv_memcpy+0x30>

0800c158 <lv_mem_realloc>:
{
 800c158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    new_size = (new_size + ALIGN_MASK) & (~ALIGN_MASK);
 800c15a:	2303      	movs	r3, #3
 800c15c:	1ccc      	adds	r4, r1, #3
{
 800c15e:	0005      	movs	r5, r0
    new_size = (new_size + ALIGN_MASK) & (~ALIGN_MASK);
 800c160:	439c      	bics	r4, r3
    if(data_p != NULL) {
 800c162:	2800      	cmp	r0, #0
 800c164:	d004      	beq.n	800c170 <lv_mem_realloc+0x18>
        if(e->header.s.used == 0) {
 800c166:	1f03      	subs	r3, r0, #4
 800c168:	781b      	ldrb	r3, [r3, #0]
            data_p = NULL;
 800c16a:	07db      	lsls	r3, r3, #31
 800c16c:	17db      	asrs	r3, r3, #31
 800c16e:	401d      	ands	r5, r3
    uint32_t old_size = _lv_mem_get_size(data_p);
 800c170:	0028      	movs	r0, r5
 800c172:	f7ff ff1f 	bl	800bfb4 <_lv_mem_get_size>
 800c176:	002e      	movs	r6, r5
 800c178:	0007      	movs	r7, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 800c17a:	4284      	cmp	r4, r0
 800c17c:	d004      	beq.n	800c188 <lv_mem_realloc+0x30>
    if(new_size < old_size) {
 800c17e:	d205      	bcs.n	800c18c <lv_mem_realloc+0x34>
        lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data_p - sizeof(lv_mem_header_t));
 800c180:	1f28      	subs	r0, r5, #4
        ent_trunc(e, new_size);
 800c182:	0021      	movs	r1, r4
 800c184:	f7ff fe6a 	bl	800be5c <ent_trunc>
}
 800c188:	0030      	movs	r0, r6
 800c18a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    new_p = lv_mem_alloc(new_size);
 800c18c:	0020      	movs	r0, r4
 800c18e:	f7ff fe8f 	bl	800beb0 <lv_mem_alloc>
 800c192:	1e06      	subs	r6, r0, #0
    if(new_p == NULL) {
 800c194:	d0f8      	beq.n	800c188 <lv_mem_realloc+0x30>
    if(data_p != NULL) {
 800c196:	2d00      	cmp	r5, #0
 800c198:	d0f6      	beq.n	800c188 <lv_mem_realloc+0x30>
        if(old_size != 0 && new_size != 0) {
 800c19a:	2f00      	cmp	r7, #0
 800c19c:	d009      	beq.n	800c1b2 <lv_mem_realloc+0x5a>
 800c19e:	2c00      	cmp	r4, #0
 800c1a0:	d007      	beq.n	800c1b2 <lv_mem_realloc+0x5a>
            _lv_memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
 800c1a2:	0022      	movs	r2, r4
 800c1a4:	42bc      	cmp	r4, r7
 800c1a6:	d900      	bls.n	800c1aa <lv_mem_realloc+0x52>
 800c1a8:	003a      	movs	r2, r7
 800c1aa:	0029      	movs	r1, r5
 800c1ac:	0030      	movs	r0, r6
 800c1ae:	f7ff ff4d 	bl	800c04c <_lv_memcpy>
        lv_mem_free(data_p);
 800c1b2:	0028      	movs	r0, r5
 800c1b4:	f7ff fed0 	bl	800bf58 <lv_mem_free>
 800c1b8:	e7e6      	b.n	800c188 <lv_mem_realloc+0x30>
	...

0800c1bc <_lv_mem_buf_get>:
{
 800c1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1be:	1e04      	subs	r4, r0, #0
    if(size == 0) return NULL;
 800c1c0:	d011      	beq.n	800c1e6 <_lv_mem_buf_get+0x2a>
    if(size <= MEM_BUF_SMALL_SIZE) {
 800c1c2:	2810      	cmp	r0, #16
 800c1c4:	d810      	bhi.n	800c1e8 <_lv_mem_buf_get+0x2c>
            if(mem_buf_small[i].used == 0) {
 800c1c6:	4a29      	ldr	r2, [pc, #164]	; (800c26c <_lv_mem_buf_get+0xb0>)
 800c1c8:	7993      	ldrb	r3, [r2, #6]
 800c1ca:	07db      	lsls	r3, r3, #31
 800c1cc:	0fdb      	lsrs	r3, r3, #31
 800c1ce:	d003      	beq.n	800c1d8 <_lv_mem_buf_get+0x1c>
 800c1d0:	7b93      	ldrb	r3, [r2, #14]
 800c1d2:	07db      	lsls	r3, r3, #31
 800c1d4:	d408      	bmi.n	800c1e8 <_lv_mem_buf_get+0x2c>
 800c1d6:	2301      	movs	r3, #1
                mem_buf_small[i].used = 1;
 800c1d8:	2101      	movs	r1, #1
 800c1da:	00db      	lsls	r3, r3, #3
 800c1dc:	18d0      	adds	r0, r2, r3
 800c1de:	7984      	ldrb	r4, [r0, #6]
 800c1e0:	4321      	orrs	r1, r4
 800c1e2:	7181      	strb	r1, [r0, #6]
                return mem_buf_small[i].p;
 800c1e4:	58d0      	ldr	r0, [r2, r3]
}
 800c1e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(mem_buf_small[i].used == 0) {
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	2200      	movs	r2, #0
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
 800c1ec:	4d20      	ldr	r5, [pc, #128]	; (800c270 <_lv_mem_buf_get+0xb4>)
            if(mem_buf_small[i].used == 0) {
 800c1ee:	425b      	negs	r3, r3
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
 800c1f0:	00d6      	lsls	r6, r2, #3
 800c1f2:	19a8      	adds	r0, r5, r6
 800c1f4:	7981      	ldrb	r1, [r0, #6]
 800c1f6:	1c0f      	adds	r7, r1, #0
 800c1f8:	07c9      	lsls	r1, r1, #31
 800c1fa:	d411      	bmi.n	800c220 <_lv_mem_buf_get+0x64>
 800c1fc:	8881      	ldrh	r1, [r0, #4]
 800c1fe:	42a1      	cmp	r1, r4
 800c200:	d30e      	bcc.n	800c220 <_lv_mem_buf_get+0x64>
            if(LV_GC_ROOT(_lv_mem_buf[i]).size == size) {
 800c202:	d104      	bne.n	800c20e <_lv_mem_buf_get+0x52>
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
 800c204:	2301      	movs	r3, #1
 800c206:	433b      	orrs	r3, r7
 800c208:	7183      	strb	r3, [r0, #6]
                return LV_GC_ROOT(_lv_mem_buf[i]).p;
 800c20a:	5970      	ldr	r0, [r6, r5]
 800c20c:	e7eb      	b.n	800c1e6 <_lv_mem_buf_get+0x2a>
            else if(i_guess < 0) {
 800c20e:	1c58      	adds	r0, r3, #1
 800c210:	d101      	bne.n	800c216 <_lv_mem_buf_get+0x5a>
                i_guess = i;
 800c212:	b253      	sxtb	r3, r2
 800c214:	e004      	b.n	800c220 <_lv_mem_buf_get+0x64>
            else if(LV_GC_ROOT(_lv_mem_buf[i]).size < LV_GC_ROOT(_lv_mem_buf[i_guess]).size) {
 800c216:	00d8      	lsls	r0, r3, #3
 800c218:	1828      	adds	r0, r5, r0
 800c21a:	8880      	ldrh	r0, [r0, #4]
 800c21c:	4288      	cmp	r0, r1
 800c21e:	d8f8      	bhi.n	800c212 <_lv_mem_buf_get+0x56>
 800c220:	3201      	adds	r2, #1
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 800c222:	2a10      	cmp	r2, #16
 800c224:	d1e4      	bne.n	800c1f0 <_lv_mem_buf_get+0x34>
    if(i_guess >= 0) {
 800c226:	1c5a      	adds	r2, r3, #1
 800c228:	d007      	beq.n	800c23a <_lv_mem_buf_get+0x7e>
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
 800c22a:	2201      	movs	r2, #1
 800c22c:	00db      	lsls	r3, r3, #3
 800c22e:	18e9      	adds	r1, r5, r3
 800c230:	7988      	ldrb	r0, [r1, #6]
 800c232:	4302      	orrs	r2, r0
 800c234:	718a      	strb	r2, [r1, #6]
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
 800c236:	58e8      	ldr	r0, [r5, r3]
 800c238:	e7d5      	b.n	800c1e6 <_lv_mem_buf_get+0x2a>
 800c23a:	2300      	movs	r3, #0
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0) {
 800c23c:	00df      	lsls	r7, r3, #3
 800c23e:	19ee      	adds	r6, r5, r7
 800c240:	79b2      	ldrb	r2, [r6, #6]
 800c242:	07d2      	lsls	r2, r2, #31
 800c244:	d40c      	bmi.n	800c260 <_lv_mem_buf_get+0xa4>
            void * buf = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
 800c246:	0021      	movs	r1, r4
 800c248:	59e8      	ldr	r0, [r5, r7]
 800c24a:	f7ff ff85 	bl	800c158 <lv_mem_realloc>
            if(buf == NULL) {
 800c24e:	2800      	cmp	r0, #0
 800c250:	d0c9      	beq.n	800c1e6 <_lv_mem_buf_get+0x2a>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
 800c252:	2301      	movs	r3, #1
 800c254:	79b2      	ldrb	r2, [r6, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = size;
 800c256:	80b4      	strh	r4, [r6, #4]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
 800c258:	4313      	orrs	r3, r2
 800c25a:	71b3      	strb	r3, [r6, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).p    = buf;
 800c25c:	51e8      	str	r0, [r5, r7]
            return LV_GC_ROOT(_lv_mem_buf[i]).p;
 800c25e:	e7c2      	b.n	800c1e6 <_lv_mem_buf_get+0x2a>
 800c260:	3301      	adds	r3, #1
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 800c262:	2b10      	cmp	r3, #16
 800c264:	d1ea      	bne.n	800c23c <_lv_mem_buf_get+0x80>
    if(size == 0) return NULL;
 800c266:	2000      	movs	r0, #0
 800c268:	e7bd      	b.n	800c1e6 <_lv_mem_buf_get+0x2a>
 800c26a:	46c0      	nop			; (mov r8, r8)
 800c26c:	2000003c 	.word	0x2000003c
 800c270:	20007108 	.word	0x20007108

0800c274 <_lv_memset>:
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 800c274:	2303      	movs	r3, #3
{
 800c276:	b510      	push	{r4, lr}
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 800c278:	4003      	ands	r3, r0
    if(d_align) {
 800c27a:	d008      	beq.n	800c28e <_lv_memset+0x1a>
        d_align = ALIGN_MASK + 1 - d_align;
 800c27c:	1ac3      	subs	r3, r0, r3
 800c27e:	3304      	adds	r3, #4
        while(d_align && len) {
 800c280:	2a00      	cmp	r2, #0
 800c282:	d004      	beq.n	800c28e <_lv_memset+0x1a>
            SET8(v);
 800c284:	7001      	strb	r1, [r0, #0]
 800c286:	3001      	adds	r0, #1
            len--;
 800c288:	3a01      	subs	r2, #1
        while(d_align && len) {
 800c28a:	4283      	cmp	r3, r0
 800c28c:	d1f8      	bne.n	800c280 <_lv_memset+0xc>
    uint32_t v32 = v + (v << 8) + (v << 16) + (v << 24);
 800c28e:	020b      	lsls	r3, r1, #8
 800c290:	040c      	lsls	r4, r1, #16
 800c292:	185b      	adds	r3, r3, r1
 800c294:	191b      	adds	r3, r3, r4
 800c296:	060c      	lsls	r4, r1, #24
 800c298:	191b      	adds	r3, r3, r4
    while(len > 32) {
 800c29a:	2a20      	cmp	r2, #32
 800c29c:	d805      	bhi.n	800c2aa <_lv_memset+0x36>
    while(len > 4) {
 800c29e:	2a04      	cmp	r2, #4
 800c2a0:	d80e      	bhi.n	800c2c0 <_lv_memset+0x4c>
 800c2a2:	1882      	adds	r2, r0, r2
    while(len) {
 800c2a4:	4290      	cmp	r0, r2
 800c2a6:	d10e      	bne.n	800c2c6 <_lv_memset+0x52>
}
 800c2a8:	bd10      	pop	{r4, pc}
        REPEAT8(SET32(v32));
 800c2aa:	6003      	str	r3, [r0, #0]
 800c2ac:	6043      	str	r3, [r0, #4]
 800c2ae:	6083      	str	r3, [r0, #8]
 800c2b0:	60c3      	str	r3, [r0, #12]
 800c2b2:	6103      	str	r3, [r0, #16]
 800c2b4:	6143      	str	r3, [r0, #20]
 800c2b6:	6183      	str	r3, [r0, #24]
 800c2b8:	61c3      	str	r3, [r0, #28]
        len -= 32;
 800c2ba:	3a20      	subs	r2, #32
 800c2bc:	3020      	adds	r0, #32
 800c2be:	e7ec      	b.n	800c29a <_lv_memset+0x26>
        SET32(v32);
 800c2c0:	c008      	stmia	r0!, {r3}
        len -= 4;
 800c2c2:	3a04      	subs	r2, #4
 800c2c4:	e7eb      	b.n	800c29e <_lv_memset+0x2a>
        SET8(v);
 800c2c6:	7001      	strb	r1, [r0, #0]
 800c2c8:	3001      	adds	r0, #1
 800c2ca:	e7eb      	b.n	800c2a4 <_lv_memset+0x30>

0800c2cc <_lv_memset_00>:
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 800c2cc:	2303      	movs	r3, #3
 800c2ce:	4003      	ands	r3, r0
    if(d_align) {
 800c2d0:	d108      	bne.n	800c2e4 <_lv_memset_00+0x18>
        REPEAT8(SET32(0));
 800c2d2:	2300      	movs	r3, #0
    while(len > 32) {
 800c2d4:	2920      	cmp	r1, #32
 800c2d6:	d813      	bhi.n	800c300 <_lv_memset_00+0x34>
        SET32(0);
 800c2d8:	2300      	movs	r3, #0
    while(len > 4) {
 800c2da:	2904      	cmp	r1, #4
 800c2dc:	d907      	bls.n	800c2ee <_lv_memset_00+0x22>
        SET32(0);
 800c2de:	c008      	stmia	r0!, {r3}
        len -= 4;
 800c2e0:	3904      	subs	r1, #4
 800c2e2:	e7fa      	b.n	800c2da <_lv_memset_00+0xe>
            SET8(0);
 800c2e4:	2200      	movs	r2, #0
        d_align = ALIGN_MASK + 1 - d_align;
 800c2e6:	1ac3      	subs	r3, r0, r3
 800c2e8:	3304      	adds	r3, #4
        while(d_align && len) {
 800c2ea:	2900      	cmp	r1, #0
 800c2ec:	d102      	bne.n	800c2f4 <_lv_memset_00+0x28>
 800c2ee:	1841      	adds	r1, r0, r1
        SET8(0);
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	e012      	b.n	800c31a <_lv_memset_00+0x4e>
            SET8(0);
 800c2f4:	7002      	strb	r2, [r0, #0]
 800c2f6:	3001      	adds	r0, #1
            len--;
 800c2f8:	3901      	subs	r1, #1
        while(d_align && len) {
 800c2fa:	4298      	cmp	r0, r3
 800c2fc:	d1f5      	bne.n	800c2ea <_lv_memset_00+0x1e>
 800c2fe:	e7e8      	b.n	800c2d2 <_lv_memset_00+0x6>
        REPEAT8(SET32(0));
 800c300:	6003      	str	r3, [r0, #0]
 800c302:	6043      	str	r3, [r0, #4]
 800c304:	6083      	str	r3, [r0, #8]
 800c306:	60c3      	str	r3, [r0, #12]
 800c308:	6103      	str	r3, [r0, #16]
 800c30a:	6143      	str	r3, [r0, #20]
 800c30c:	6183      	str	r3, [r0, #24]
 800c30e:	61c3      	str	r3, [r0, #28]
        len -= 32;
 800c310:	3920      	subs	r1, #32
 800c312:	3020      	adds	r0, #32
 800c314:	e7de      	b.n	800c2d4 <_lv_memset_00+0x8>
        SET8(0);
 800c316:	7003      	strb	r3, [r0, #0]
 800c318:	3001      	adds	r0, #1
    while(len) {
 800c31a:	4288      	cmp	r0, r1
 800c31c:	d1fb      	bne.n	800c316 <_lv_memset_00+0x4a>
}
 800c31e:	4770      	bx	lr

0800c320 <_lv_memset_ff>:
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 800c320:	2303      	movs	r3, #3
 800c322:	4003      	ands	r3, r0
    if(d_align) {
 800c324:	d10a      	bne.n	800c33c <_lv_memset_ff+0x1c>
        REPEAT8(SET32(0xFFFFFFFF));
 800c326:	2301      	movs	r3, #1
 800c328:	425b      	negs	r3, r3
    while(len > 32) {
 800c32a:	2920      	cmp	r1, #32
 800c32c:	d814      	bhi.n	800c358 <_lv_memset_ff+0x38>
        SET32(0xFFFFFFFF);
 800c32e:	2301      	movs	r3, #1
 800c330:	425b      	negs	r3, r3
    while(len > 4) {
 800c332:	2904      	cmp	r1, #4
 800c334:	d907      	bls.n	800c346 <_lv_memset_ff+0x26>
        SET32(0xFFFFFFFF);
 800c336:	c008      	stmia	r0!, {r3}
        len -= 4;
 800c338:	3904      	subs	r1, #4
 800c33a:	e7fa      	b.n	800c332 <_lv_memset_ff+0x12>
            SET8(0xFF);
 800c33c:	22ff      	movs	r2, #255	; 0xff
        d_align = ALIGN_MASK + 1 - d_align;
 800c33e:	1ac3      	subs	r3, r0, r3
 800c340:	3304      	adds	r3, #4
        while(d_align && len) {
 800c342:	2900      	cmp	r1, #0
 800c344:	d102      	bne.n	800c34c <_lv_memset_ff+0x2c>
 800c346:	1841      	adds	r1, r0, r1
        SET8(0xFF);
 800c348:	23ff      	movs	r3, #255	; 0xff
 800c34a:	e012      	b.n	800c372 <_lv_memset_ff+0x52>
            SET8(0xFF);
 800c34c:	7002      	strb	r2, [r0, #0]
 800c34e:	3001      	adds	r0, #1
            len--;
 800c350:	3901      	subs	r1, #1
        while(d_align && len) {
 800c352:	4298      	cmp	r0, r3
 800c354:	d1f5      	bne.n	800c342 <_lv_memset_ff+0x22>
 800c356:	e7e6      	b.n	800c326 <_lv_memset_ff+0x6>
        REPEAT8(SET32(0xFFFFFFFF));
 800c358:	6003      	str	r3, [r0, #0]
 800c35a:	6043      	str	r3, [r0, #4]
 800c35c:	6083      	str	r3, [r0, #8]
 800c35e:	60c3      	str	r3, [r0, #12]
 800c360:	6103      	str	r3, [r0, #16]
 800c362:	6143      	str	r3, [r0, #20]
 800c364:	6183      	str	r3, [r0, #24]
 800c366:	61c3      	str	r3, [r0, #28]
        len -= 32;
 800c368:	3920      	subs	r1, #32
 800c36a:	3020      	adds	r0, #32
 800c36c:	e7dd      	b.n	800c32a <_lv_memset_ff+0xa>
        SET8(0xFF);
 800c36e:	7003      	strb	r3, [r0, #0]
 800c370:	3001      	adds	r0, #1
    while(len) {
 800c372:	4288      	cmp	r0, r1
 800c374:	d1fb      	bne.n	800c36e <_lv_memset_ff+0x4e>
}
 800c376:	4770      	bx	lr

0800c378 <_lv_task_core_init>:

/**
 * Init the lv_task module
 */
void _lv_task_core_init(void)
{
 800c378:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
 800c37a:	2118      	movs	r1, #24
 800c37c:	4803      	ldr	r0, [pc, #12]	; (800c38c <_lv_task_core_init+0x14>)
 800c37e:	f7ff fc02 	bl	800bb86 <_lv_ll_init>
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
 800c382:	2201      	movs	r2, #1
 800c384:	4b02      	ldr	r3, [pc, #8]	; (800c390 <_lv_task_core_init+0x18>)
 800c386:	701a      	strb	r2, [r3, #0]
}
 800c388:	bd10      	pop	{r4, pc}
 800c38a:	46c0      	nop			; (mov r8, r8)
 800c38c:	200070d4 	.word	0x200070d4
 800c390:	20006e94 	.word	0x20006e94

0800c394 <lv_task_create>:
{
 800c394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800c396:	4c1d      	ldr	r4, [pc, #116]	; (800c40c <lv_task_create+0x78>)
{
 800c398:	9000      	str	r0, [sp, #0]
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800c39a:	0020      	movs	r0, r4
{
 800c39c:	000f      	movs	r7, r1
 800c39e:	0015      	movs	r5, r2
 800c3a0:	9301      	str	r3, [sp, #4]
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800c3a2:	f7ff fc38 	bl	800bc16 <_lv_ll_get_head>
 800c3a6:	1e01      	subs	r1, r0, #0
    if(NULL == tmp) {
 800c3a8:	d107      	bne.n	800c3ba <lv_task_create+0x26>
        new_task = _lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
 800c3aa:	0020      	movs	r0, r4
 800c3ac:	f7ff fbf3 	bl	800bb96 <_lv_ll_ins_head>
 800c3b0:	1e04      	subs	r4, r0, #0
        if(new_task == NULL) return NULL;
 800c3b2:	d113      	bne.n	800c3dc <lv_task_create+0x48>
 800c3b4:	2400      	movs	r4, #0
}
 800c3b6:	0020      	movs	r0, r4
 800c3b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            if(tmp->prio <= prio) {
 800c3ba:	7d0b      	ldrb	r3, [r1, #20]
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 800c3bc:	0020      	movs	r0, r4
            if(tmp->prio <= prio) {
 800c3be:	075b      	lsls	r3, r3, #29
 800c3c0:	0f5b      	lsrs	r3, r3, #29
 800c3c2:	42ab      	cmp	r3, r5
 800c3c4:	dc02      	bgt.n	800c3cc <lv_task_create+0x38>
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 800c3c6:	f7ff fc39 	bl	800bc3c <_lv_ll_ins_prev>
 800c3ca:	e7f1      	b.n	800c3b0 <lv_task_create+0x1c>
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 800c3cc:	f7ff fc2b 	bl	800bc26 <_lv_ll_get_next>
 800c3d0:	1e01      	subs	r1, r0, #0
        } while(tmp != NULL);
 800c3d2:	d1f2      	bne.n	800c3ba <lv_task_create+0x26>
            new_task = _lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
 800c3d4:	0020      	movs	r0, r4
 800c3d6:	f7ff fbfe 	bl	800bbd6 <_lv_ll_ins_tail>
 800c3da:	e7e9      	b.n	800c3b0 <lv_task_create+0x1c>
    task_list_changed = true;
 800c3dc:	2601      	movs	r6, #1
 800c3de:	4b0c      	ldr	r3, [pc, #48]	; (800c410 <lv_task_create+0x7c>)
    new_task->prio    = prio;
 800c3e0:	002a      	movs	r2, r5
    task_list_changed = true;
 800c3e2:	701e      	strb	r6, [r3, #0]
    new_task->task_cb = task_xcb;
 800c3e4:	9b00      	ldr	r3, [sp, #0]
    new_task->prio    = prio;
 800c3e6:	7d05      	ldrb	r5, [r0, #20]
    new_task->task_cb = task_xcb;
 800c3e8:	6083      	str	r3, [r0, #8]
    new_task->prio    = prio;
 800c3ea:	2307      	movs	r3, #7
 800c3ec:	401a      	ands	r2, r3
 800c3ee:	439d      	bics	r5, r3
 800c3f0:	4315      	orrs	r5, r2
    new_task->repeat_count = -1;
 800c3f2:	3b08      	subs	r3, #8
 800c3f4:	6103      	str	r3, [r0, #16]
    new_task->period  = period;
 800c3f6:	6007      	str	r7, [r0, #0]
    new_task->prio    = prio;
 800c3f8:	7505      	strb	r5, [r0, #20]
    new_task->last_run = lv_tick_get();
 800c3fa:	f7ff f8d9 	bl	800b5b0 <lv_tick_get>
    new_task->user_data = user_data;
 800c3fe:	9b01      	ldr	r3, [sp, #4]
    new_task->last_run = lv_tick_get();
 800c400:	6060      	str	r0, [r4, #4]
    new_task->user_data = user_data;
 800c402:	60e3      	str	r3, [r4, #12]
    task_created = true;
 800c404:	4b03      	ldr	r3, [pc, #12]	; (800c414 <lv_task_create+0x80>)
 800c406:	701e      	strb	r6, [r3, #0]
    return new_task;
 800c408:	e7d5      	b.n	800c3b6 <lv_task_create+0x22>
 800c40a:	46c0      	nop			; (mov r8, r8)
 800c40c:	200070d4 	.word	0x200070d4
 800c410:	20006e97 	.word	0x20006e97
 800c414:	20006e95 	.word	0x20006e95

0800c418 <lv_task_del>:
{
 800c418:	b570      	push	{r4, r5, r6, lr}
 800c41a:	0004      	movs	r4, r0
    task_list_changed = true;
 800c41c:	2501      	movs	r5, #1
    _lv_ll_remove(&LV_GC_ROOT(_lv_task_ll), task);
 800c41e:	0001      	movs	r1, r0
 800c420:	4807      	ldr	r0, [pc, #28]	; (800c440 <lv_task_del+0x28>)
 800c422:	f7ff fc3a 	bl	800bc9a <_lv_ll_remove>
    task_list_changed = true;
 800c426:	4b07      	ldr	r3, [pc, #28]	; (800c444 <lv_task_del+0x2c>)
    lv_mem_free(task);
 800c428:	0020      	movs	r0, r4
    task_list_changed = true;
 800c42a:	701d      	strb	r5, [r3, #0]
    lv_mem_free(task);
 800c42c:	f7ff fd94 	bl	800bf58 <lv_mem_free>
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
 800c430:	4b05      	ldr	r3, [pc, #20]	; (800c448 <lv_task_del+0x30>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	42a3      	cmp	r3, r4
 800c436:	d101      	bne.n	800c43c <lv_task_del+0x24>
 800c438:	4b04      	ldr	r3, [pc, #16]	; (800c44c <lv_task_del+0x34>)
 800c43a:	701d      	strb	r5, [r3, #0]
}
 800c43c:	bd70      	pop	{r4, r5, r6, pc}
 800c43e:	46c0      	nop			; (mov r8, r8)
 800c440:	200070d4 	.word	0x200070d4
 800c444:	20006e97 	.word	0x20006e97
 800c448:	200071a4 	.word	0x200071a4
 800c44c:	20006e96 	.word	0x20006e96

0800c450 <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
 800c450:	b510      	push	{r4, lr}
 800c452:	0004      	movs	r4, r0
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_task_time_remaining(lv_task_t * task)
{
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
 800c454:	6840      	ldr	r0, [r0, #4]
 800c456:	f7ff f8b9 	bl	800b5cc <lv_tick_elaps>
    if(elp >= task->period)
 800c45a:	6822      	ldr	r2, [r4, #0]
    bool exec = false;
 800c45c:	2300      	movs	r3, #0
    if(elp >= task->period)
 800c45e:	4290      	cmp	r0, r2
 800c460:	d30c      	bcc.n	800c47c <lv_task_exec+0x2c>
        task->last_run = lv_tick_get();
 800c462:	f7ff f8a5 	bl	800b5b0 <lv_tick_get>
        if(task->task_cb) task->task_cb(task);
 800c466:	68a3      	ldr	r3, [r4, #8]
        task->last_run = lv_tick_get();
 800c468:	6060      	str	r0, [r4, #4]
        if(task->task_cb) task->task_cb(task);
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d001      	beq.n	800c472 <lv_task_exec+0x22>
 800c46e:	0020      	movs	r0, r4
 800c470:	4798      	blx	r3
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
 800c472:	4b09      	ldr	r3, [pc, #36]	; (800c498 <lv_task_exec+0x48>)
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d002      	beq.n	800c480 <lv_task_exec+0x30>
                lv_task_del(task);
 800c47a:	2301      	movs	r3, #1
}
 800c47c:	0018      	movs	r0, r3
 800c47e:	bd10      	pop	{r4, pc}
            if(task->repeat_count > 0) {
 800c480:	6923      	ldr	r3, [r4, #16]
 800c482:	2b00      	cmp	r3, #0
 800c484:	dd01      	ble.n	800c48a <lv_task_exec+0x3a>
                task->repeat_count--;
 800c486:	3b01      	subs	r3, #1
 800c488:	6123      	str	r3, [r4, #16]
            if(task->repeat_count == 0) {
 800c48a:	6923      	ldr	r3, [r4, #16]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d1f4      	bne.n	800c47a <lv_task_exec+0x2a>
                lv_task_del(task);
 800c490:	0020      	movs	r0, r4
 800c492:	f7ff ffc1 	bl	800c418 <lv_task_del>
 800c496:	e7f0      	b.n	800c47a <lv_task_exec+0x2a>
 800c498:	20006e96 	.word	0x20006e96

0800c49c <lv_task_handler>:
    if(already_running) return 1;
 800c49c:	4b4c      	ldr	r3, [pc, #304]	; (800c5d0 <lv_task_handler+0x134>)
{
 800c49e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(already_running) return 1;
 800c4a0:	781c      	ldrb	r4, [r3, #0]
 800c4a2:	2501      	movs	r5, #1
 800c4a4:	2c00      	cmp	r4, #0
 800c4a6:	d106      	bne.n	800c4b6 <lv_task_handler+0x1a>
    already_running = true;
 800c4a8:	701d      	strb	r5, [r3, #0]
    if(lv_task_run == false) {
 800c4aa:	4b4a      	ldr	r3, [pc, #296]	; (800c5d4 <lv_task_handler+0x138>)
 800c4ac:	781b      	ldrb	r3, [r3, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d103      	bne.n	800c4ba <lv_task_handler+0x1e>
    already_running = false; /*Release the mutex*/
 800c4b2:	4a47      	ldr	r2, [pc, #284]	; (800c5d0 <lv_task_handler+0x134>)
 800c4b4:	7013      	strb	r3, [r2, #0]
}
 800c4b6:	0028      	movs	r0, r5
 800c4b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    uint32_t handler_start = lv_tick_get();
 800c4ba:	f7ff f879 	bl	800b5b0 <lv_tick_get>
 800c4be:	9001      	str	r0, [sp, #4]
        task_deleted             = false;
 800c4c0:	2300      	movs	r3, #0
        task_created             = false;
 800c4c2:	4a45      	ldr	r2, [pc, #276]	; (800c5d8 <lv_task_handler+0x13c>)
        task_deleted             = false;
 800c4c4:	4e45      	ldr	r6, [pc, #276]	; (800c5dc <lv_task_handler+0x140>)
        task_created             = false;
 800c4c6:	7013      	strb	r3, [r2, #0]
        task_list_changed        = false;
 800c4c8:	4a45      	ldr	r2, [pc, #276]	; (800c5e0 <lv_task_handler+0x144>)
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800c4ca:	4846      	ldr	r0, [pc, #280]	; (800c5e4 <lv_task_handler+0x148>)
        task_deleted             = false;
 800c4cc:	7033      	strb	r3, [r6, #0]
        task_list_changed        = false;
 800c4ce:	7013      	strb	r3, [r2, #0]
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800c4d0:	f7ff fba1 	bl	800bc16 <_lv_ll_get_head>
 800c4d4:	4b44      	ldr	r3, [pc, #272]	; (800c5e8 <lv_task_handler+0x14c>)
 800c4d6:	6018      	str	r0, [r3, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
 800c4d8:	4d43      	ldr	r5, [pc, #268]	; (800c5e8 <lv_task_handler+0x14c>)
 800c4da:	6829      	ldr	r1, [r5, #0]
 800c4dc:	2900      	cmp	r1, #0
 800c4de:	d10a      	bne.n	800c4f6 <lv_task_handler+0x5a>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800c4e0:	4e40      	ldr	r6, [pc, #256]	; (800c5e4 <lv_task_handler+0x148>)
    uint32_t time_till_next = LV_NO_TASK_READY;
 800c4e2:	2501      	movs	r5, #1
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800c4e4:	0030      	movs	r0, r6
 800c4e6:	f7ff fb96 	bl	800bc16 <_lv_ll_get_head>
    uint32_t time_till_next = LV_NO_TASK_READY;
 800c4ea:	426d      	negs	r5, r5
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800c4ec:	0004      	movs	r4, r0
    while(next && next->prio != LV_TASK_PRIO_OFF) {
 800c4ee:	2707      	movs	r7, #7
 800c4f0:	e045      	b.n	800c57e <lv_task_handler+0xe2>
                task_interrupter = NULL;
 800c4f2:	001c      	movs	r4, r3
 800c4f4:	e7e4      	b.n	800c4c0 <lv_task_handler+0x24>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 800c4f6:	483b      	ldr	r0, [pc, #236]	; (800c5e4 <lv_task_handler+0x148>)
 800c4f8:	f7ff fb95 	bl	800bc26 <_lv_ll_get_next>
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_OFF) {
 800c4fc:	2207      	movs	r2, #7
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 800c4fe:	0007      	movs	r7, r0
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_OFF) {
 800c500:	6828      	ldr	r0, [r5, #0]
 800c502:	7d03      	ldrb	r3, [r0, #20]
 800c504:	401a      	ands	r2, r3
 800c506:	d0eb      	beq.n	800c4e0 <lv_task_handler+0x44>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
 800c508:	42a0      	cmp	r0, r4
 800c50a:	d102      	bne.n	800c512 <lv_task_handler+0x76>
                LV_GC_ROOT(_lv_task_act) = next;
 800c50c:	602f      	str	r7, [r5, #0]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
 800c50e:	2400      	movs	r4, #0
                continue; /*Load the next task*/
 800c510:	e7e2      	b.n	800c4d8 <lv_task_handler+0x3c>
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_HIGHEST) {
 800c512:	2a05      	cmp	r2, #5
 800c514:	d10f      	bne.n	800c536 <lv_task_handler+0x9a>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
 800c516:	f7ff ff9b 	bl	800c450 <lv_task_exec>
            if(task_created || task_deleted) {
 800c51a:	4b2f      	ldr	r3, [pc, #188]	; (800c5d8 <lv_task_handler+0x13c>)
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d1de      	bne.n	800c4e0 <lv_task_handler+0x44>
 800c522:	7833      	ldrb	r3, [r6, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d1db      	bne.n	800c4e0 <lv_task_handler+0x44>
            if(task_list_changed) {
 800c528:	4a2d      	ldr	r2, [pc, #180]	; (800c5e0 <lv_task_handler+0x144>)
 800c52a:	7812      	ldrb	r2, [r2, #0]
 800c52c:	2a00      	cmp	r2, #0
 800c52e:	d1e0      	bne.n	800c4f2 <lv_task_handler+0x56>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
 800c530:	4b2d      	ldr	r3, [pc, #180]	; (800c5e8 <lv_task_handler+0x14c>)
 800c532:	601f      	str	r7, [r3, #0]
 800c534:	e7d0      	b.n	800c4d8 <lv_task_handler+0x3c>
            else if(task_interrupter) {
 800c536:	2c00      	cmp	r4, #0
 800c538:	d004      	beq.n	800c544 <lv_task_handler+0xa8>
                if(LV_GC_ROOT(_lv_task_act)->prio > task_interrupter->prio) {
 800c53a:	7d22      	ldrb	r2, [r4, #20]
 800c53c:	075b      	lsls	r3, r3, #29
 800c53e:	0752      	lsls	r2, r2, #29
 800c540:	429a      	cmp	r2, r3
 800c542:	d2ea      	bcs.n	800c51a <lv_task_handler+0x7e>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 800c544:	f7ff ff84 	bl	800c450 <lv_task_exec>
 800c548:	2800      	cmp	r0, #0
 800c54a:	d0e6      	beq.n	800c51a <lv_task_handler+0x7e>
                    if(!task_created && !task_deleted) {
 800c54c:	4b22      	ldr	r3, [pc, #136]	; (800c5d8 <lv_task_handler+0x13c>)
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d1c5      	bne.n	800c4e0 <lv_task_handler+0x44>
 800c554:	7833      	ldrb	r3, [r6, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d1e3      	bne.n	800c522 <lv_task_handler+0x86>
                        task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
 800c55a:	682c      	ldr	r4, [r5, #0]
 800c55c:	e7b0      	b.n	800c4c0 <lv_task_handler+0x24>
    uint32_t elp = lv_tick_elaps(task->last_run);
 800c55e:	6860      	ldr	r0, [r4, #4]
 800c560:	f7ff f834 	bl	800b5cc <lv_tick_elaps>
    if(elp >= task->period)
 800c564:	6822      	ldr	r2, [r4, #0]
        return 0;
 800c566:	2300      	movs	r3, #0
    if(elp >= task->period)
 800c568:	4290      	cmp	r0, r2
 800c56a:	d200      	bcs.n	800c56e <lv_task_handler+0xd2>
    return task->period - elp;
 800c56c:	1a13      	subs	r3, r2, r0
 800c56e:	429d      	cmp	r5, r3
 800c570:	d900      	bls.n	800c574 <lv_task_handler+0xd8>
 800c572:	001d      	movs	r5, r3
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
 800c574:	0021      	movs	r1, r4
 800c576:	0030      	movs	r0, r6
 800c578:	f7ff fb55 	bl	800bc26 <_lv_ll_get_next>
 800c57c:	0004      	movs	r4, r0
    while(next && next->prio != LV_TASK_PRIO_OFF) {
 800c57e:	2c00      	cmp	r4, #0
 800c580:	d002      	beq.n	800c588 <lv_task_handler+0xec>
 800c582:	7d23      	ldrb	r3, [r4, #20]
 800c584:	423b      	tst	r3, r7
 800c586:	d1ea      	bne.n	800c55e <lv_task_handler+0xc2>
    busy_time += lv_tick_elaps(handler_start);
 800c588:	9801      	ldr	r0, [sp, #4]
 800c58a:	f7ff f81f 	bl	800b5cc <lv_tick_elaps>
 800c58e:	4c17      	ldr	r4, [pc, #92]	; (800c5ec <lv_task_handler+0x150>)
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 800c590:	4f17      	ldr	r7, [pc, #92]	; (800c5f0 <lv_task_handler+0x154>)
    busy_time += lv_tick_elaps(handler_start);
 800c592:	6823      	ldr	r3, [r4, #0]
 800c594:	1818      	adds	r0, r3, r0
 800c596:	6020      	str	r0, [r4, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 800c598:	6838      	ldr	r0, [r7, #0]
 800c59a:	f7ff f817 	bl	800b5cc <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 800c59e:	23f4      	movs	r3, #244	; 0xf4
 800c5a0:	33ff      	adds	r3, #255	; 0xff
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 800c5a2:	0001      	movs	r1, r0
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 800c5a4:	4298      	cmp	r0, r3
 800c5a6:	d911      	bls.n	800c5cc <lv_task_handler+0x130>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
 800c5a8:	2664      	movs	r6, #100	; 0x64
 800c5aa:	6820      	ldr	r0, [r4, #0]
 800c5ac:	4370      	muls	r0, r6
 800c5ae:	f7f3 fde1 	bl	8000174 <__udivsi3>
 800c5b2:	b2c0      	uxtb	r0, r0
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	42b0      	cmp	r0, r6
 800c5b8:	d801      	bhi.n	800c5be <lv_task_handler+0x122>
 800c5ba:	1a36      	subs	r6, r6, r0
 800c5bc:	b2f3      	uxtb	r3, r6
 800c5be:	4a0d      	ldr	r2, [pc, #52]	; (800c5f4 <lv_task_handler+0x158>)
 800c5c0:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	6023      	str	r3, [r4, #0]
        idle_period_start = lv_tick_get();
 800c5c6:	f7fe fff3 	bl	800b5b0 <lv_tick_get>
 800c5ca:	6038      	str	r0, [r7, #0]
    already_running = false; /*Release the mutex*/
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	e770      	b.n	800c4b2 <lv_task_handler+0x16>
 800c5d0:	20006e84 	.word	0x20006e84
 800c5d4:	20006e94 	.word	0x20006e94
 800c5d8:	20006e95 	.word	0x20006e95
 800c5dc:	20006e96 	.word	0x20006e96
 800c5e0:	20006e97 	.word	0x20006e97
 800c5e4:	200070d4 	.word	0x200070d4
 800c5e8:	200071a4 	.word	0x200071a4
 800c5ec:	20006e88 	.word	0x20006e88
 800c5f0:	20006e90 	.word	0x20006e90
 800c5f4:	20006e8c 	.word	0x20006e8c

0800c5f8 <lv_task_set_prio>:
    if(task->prio == prio) return;
 800c5f8:	7d03      	ldrb	r3, [r0, #20]
{
 800c5fa:	b570      	push	{r4, r5, r6, lr}
    if(task->prio == prio) return;
 800c5fc:	075b      	lsls	r3, r3, #29
{
 800c5fe:	0004      	movs	r4, r0
 800c600:	000d      	movs	r5, r1
    if(task->prio == prio) return;
 800c602:	0f5b      	lsrs	r3, r3, #29
 800c604:	428b      	cmp	r3, r1
 800c606:	d01a      	beq.n	800c63e <lv_task_set_prio+0x46>
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
 800c608:	4e10      	ldr	r6, [pc, #64]	; (800c64c <lv_task_set_prio+0x54>)
 800c60a:	0030      	movs	r0, r6
 800c60c:	f7ff fb03 	bl	800bc16 <_lv_ll_get_head>
 800c610:	1e02      	subs	r2, r0, #0
 800c612:	d006      	beq.n	800c622 <lv_task_set_prio+0x2a>
        if(i->prio <= prio) {
 800c614:	7d13      	ldrb	r3, [r2, #20]
 800c616:	075b      	lsls	r3, r3, #29
 800c618:	0f5b      	lsrs	r3, r3, #29
 800c61a:	429d      	cmp	r5, r3
 800c61c:	db10      	blt.n	800c640 <lv_task_set_prio+0x48>
            if(i != task) _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
 800c61e:	42a2      	cmp	r2, r4
 800c620:	d003      	beq.n	800c62a <lv_task_set_prio+0x32>
        _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
 800c622:	0021      	movs	r1, r4
 800c624:	0030      	movs	r0, r6
 800c626:	f7ff fba8 	bl	800bd7a <_lv_ll_move_before>
    task_list_changed = true;
 800c62a:	2201      	movs	r2, #1
 800c62c:	4b08      	ldr	r3, [pc, #32]	; (800c650 <lv_task_set_prio+0x58>)
 800c62e:	701a      	strb	r2, [r3, #0]
    task->prio = prio;
 800c630:	2307      	movs	r3, #7
 800c632:	002a      	movs	r2, r5
 800c634:	7d25      	ldrb	r5, [r4, #20]
 800c636:	401a      	ands	r2, r3
 800c638:	439d      	bics	r5, r3
 800c63a:	4315      	orrs	r5, r2
 800c63c:	7525      	strb	r5, [r4, #20]
}
 800c63e:	bd70      	pop	{r4, r5, r6, pc}
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
 800c640:	0011      	movs	r1, r2
 800c642:	0030      	movs	r0, r6
 800c644:	f7ff faef 	bl	800bc26 <_lv_ll_get_next>
 800c648:	e7e2      	b.n	800c610 <lv_task_set_prio+0x18>
 800c64a:	46c0      	nop			; (mov r8, r8)
 800c64c:	200070d4 	.word	0x200070d4
 800c650:	20006e97 	.word	0x20006e97

0800c654 <lv_task_ready>:
{
 800c654:	b510      	push	{r4, lr}
 800c656:	0004      	movs	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
 800c658:	f7fe ffaa 	bl	800b5b0 <lv_tick_get>
 800c65c:	6823      	ldr	r3, [r4, #0]
 800c65e:	43db      	mvns	r3, r3
 800c660:	1818      	adds	r0, r3, r0
 800c662:	6060      	str	r0, [r4, #4]
}
 800c664:	bd10      	pop	{r4, pc}

0800c666 <lv_txt_utf8_next>:
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 800c666:	2300      	movs	r3, #0
{
 800c668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t i_tmp = 0;
 800c66a:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
 800c66c:	4299      	cmp	r1, r3
 800c66e:	d100      	bne.n	800c672 <lv_txt_utf8_next+0xc>
 800c670:	a901      	add	r1, sp, #4

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
 800c672:	680a      	ldr	r2, [r1, #0]
 800c674:	5c84      	ldrb	r4, [r0, r2]
 800c676:	1c53      	adds	r3, r2, #1
 800c678:	b265      	sxtb	r5, r4
 800c67a:	2d00      	cmp	r5, #0
 800c67c:	db02      	blt.n	800c684 <lv_txt_utf8_next+0x1e>
        result = txt[*i];
 800c67e:	0020      	movs	r0, r4
        (*i)++;
 800c680:	600b      	str	r3, [r1, #0]
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
 800c682:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if((txt[*i] & 0xE0) == 0xC0) {
 800c684:	251f      	movs	r5, #31
 800c686:	0026      	movs	r6, r4
 800c688:	43ae      	bics	r6, r5
 800c68a:	0035      	movs	r5, r6
 800c68c:	2ec0      	cmp	r6, #192	; 0xc0
 800c68e:	d111      	bne.n	800c6b4 <lv_txt_utf8_next+0x4e>
            (*i)++;
 800c690:	600b      	str	r3, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800c692:	5cc3      	ldrb	r3, [r0, r3]
 800c694:	3d81      	subs	r5, #129	; 0x81
 800c696:	0018      	movs	r0, r3
 800c698:	43a8      	bics	r0, r5
 800c69a:	2880      	cmp	r0, #128	; 0x80
 800c69c:	d001      	beq.n	800c6a2 <lv_txt_utf8_next+0x3c>
    uint32_t result = 0;
 800c69e:	2000      	movs	r0, #0
 800c6a0:	e7ef      	b.n	800c682 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 800c6a2:	01a0      	lsls	r0, r4, #6
 800c6a4:	24f8      	movs	r4, #248	; 0xf8
 800c6a6:	00e4      	lsls	r4, r4, #3
 800c6a8:	4004      	ands	r4, r0
            result += (txt[*i] & 0x3F);
 800c6aa:	402b      	ands	r3, r5
 800c6ac:	1918      	adds	r0, r3, r4
            (*i)++;
 800c6ae:	3202      	adds	r2, #2
            (*i)++;
 800c6b0:	600a      	str	r2, [r1, #0]
 800c6b2:	e7e6      	b.n	800c682 <lv_txt_utf8_next+0x1c>
        else if((txt[*i] & 0xF0) == 0xE0) {
 800c6b4:	250f      	movs	r5, #15
 800c6b6:	0026      	movs	r6, r4
 800c6b8:	43ae      	bics	r6, r5
 800c6ba:	2ee0      	cmp	r6, #224	; 0xe0
 800c6bc:	d119      	bne.n	800c6f2 <lv_txt_utf8_next+0x8c>
            (*i)++;
 800c6be:	600b      	str	r3, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800c6c0:	5cc3      	ldrb	r3, [r0, r3]
 800c6c2:	263f      	movs	r6, #63	; 0x3f
 800c6c4:	001d      	movs	r5, r3
 800c6c6:	43b5      	bics	r5, r6
 800c6c8:	2d80      	cmp	r5, #128	; 0x80
 800c6ca:	d1e8      	bne.n	800c69e <lv_txt_utf8_next+0x38>
            (*i)++;
 800c6cc:	1c95      	adds	r5, r2, #2
 800c6ce:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800c6d0:	5d45      	ldrb	r5, [r0, r5]
 800c6d2:	0028      	movs	r0, r5
 800c6d4:	43b0      	bics	r0, r6
 800c6d6:	2880      	cmp	r0, #128	; 0x80
 800c6d8:	d1e1      	bne.n	800c69e <lv_txt_utf8_next+0x38>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 800c6da:	0720      	lsls	r0, r4, #28
            result += (txt[*i] & 0x3F);
 800c6dc:	002c      	movs	r4, r5
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 800c6de:	0c00      	lsrs	r0, r0, #16
            result += (txt[*i] & 0x3F);
 800c6e0:	4034      	ands	r4, r6
 800c6e2:	1904      	adds	r4, r0, r4
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 800c6e4:	0198      	lsls	r0, r3, #6
 800c6e6:	23fc      	movs	r3, #252	; 0xfc
 800c6e8:	011b      	lsls	r3, r3, #4
 800c6ea:	4018      	ands	r0, r3
            result += (txt[*i] & 0x3F);
 800c6ec:	1900      	adds	r0, r0, r4
            (*i)++;
 800c6ee:	3203      	adds	r2, #3
 800c6f0:	e7de      	b.n	800c6b0 <lv_txt_utf8_next+0x4a>
        else if((txt[*i] & 0xF8) == 0xF0) {
 800c6f2:	2507      	movs	r5, #7
 800c6f4:	0026      	movs	r6, r4
            (*i)++;
 800c6f6:	600b      	str	r3, [r1, #0]
        else if((txt[*i] & 0xF8) == 0xF0) {
 800c6f8:	43ae      	bics	r6, r5
 800c6fa:	2ef0      	cmp	r6, #240	; 0xf0
 800c6fc:	d1cf      	bne.n	800c69e <lv_txt_utf8_next+0x38>
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800c6fe:	5cc7      	ldrb	r7, [r0, r3]
 800c700:	263f      	movs	r6, #63	; 0x3f
 800c702:	003b      	movs	r3, r7
 800c704:	43b3      	bics	r3, r6
 800c706:	2b80      	cmp	r3, #128	; 0x80
 800c708:	d1c9      	bne.n	800c69e <lv_txt_utf8_next+0x38>
            (*i)++;
 800c70a:	1c93      	adds	r3, r2, #2
 800c70c:	600b      	str	r3, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800c70e:	5cc3      	ldrb	r3, [r0, r3]
 800c710:	001d      	movs	r5, r3
 800c712:	43b5      	bics	r5, r6
 800c714:	2d80      	cmp	r5, #128	; 0x80
 800c716:	d1c2      	bne.n	800c69e <lv_txt_utf8_next+0x38>
            (*i)++;
 800c718:	1cd5      	adds	r5, r2, #3
 800c71a:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800c71c:	5d45      	ldrb	r5, [r0, r5]
 800c71e:	0028      	movs	r0, r5
 800c720:	43b0      	bics	r0, r6
 800c722:	2880      	cmp	r0, #128	; 0x80
 800c724:	d1bb      	bne.n	800c69e <lv_txt_utf8_next+0x38>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 800c726:	20e0      	movs	r0, #224	; 0xe0
 800c728:	04a4      	lsls	r4, r4, #18
 800c72a:	0340      	lsls	r0, r0, #13
 800c72c:	4004      	ands	r4, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 800c72e:	20fc      	movs	r0, #252	; 0xfc
 800c730:	033f      	lsls	r7, r7, #12
 800c732:	0280      	lsls	r0, r0, #10
 800c734:	4038      	ands	r0, r7
 800c736:	4304      	orrs	r4, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 800c738:	20fc      	movs	r0, #252	; 0xfc
 800c73a:	019b      	lsls	r3, r3, #6
 800c73c:	0100      	lsls	r0, r0, #4
 800c73e:	4018      	ands	r0, r3
            result += txt[*i] & 0x3F;
 800c740:	4035      	ands	r5, r6
 800c742:	1940      	adds	r0, r0, r5
 800c744:	1900      	adds	r0, r0, r4
            (*i)++;
 800c746:	3204      	adds	r2, #4
 800c748:	e7b2      	b.n	800c6b0 <lv_txt_utf8_next+0x4a>
	...

0800c74c <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 800c74c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t i        = 0;
 800c74e:	2400      	movs	r4, #0
{
 800c750:	0006      	movs	r6, r0
 800c752:	000d      	movs	r5, r1
    uint32_t i        = 0;
 800c754:	9401      	str	r4, [sp, #4]
    uint32_t char_cnt = 0;

    while(i < byte_id) {
 800c756:	9b01      	ldr	r3, [sp, #4]
 800c758:	42ab      	cmp	r3, r5
 800c75a:	d301      	bcc.n	800c760 <lv_txt_utf8_get_char_id+0x14>
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
        char_cnt++;
    }

    return char_cnt;
}
 800c75c:	0020      	movs	r0, r4
 800c75e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 800c760:	4b03      	ldr	r3, [pc, #12]	; (800c770 <lv_txt_utf8_get_char_id+0x24>)
 800c762:	a901      	add	r1, sp, #4
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	0030      	movs	r0, r6
 800c768:	4798      	blx	r3
        char_cnt++;
 800c76a:	3401      	adds	r4, #1
 800c76c:	e7f3      	b.n	800c756 <lv_txt_utf8_get_char_id+0xa>
 800c76e:	46c0      	nop			; (mov r8, r8)
 800c770:	20000050 	.word	0x20000050

0800c774 <_lv_txt_is_cmd>:
{
 800c774:	0002      	movs	r2, r0
    bool ret = false;
 800c776:	2000      	movs	r0, #0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800c778:	2923      	cmp	r1, #35	; 0x23
 800c77a:	d104      	bne.n	800c786 <_lv_txt_is_cmd+0x12>
 800c77c:	7813      	ldrb	r3, [r2, #0]
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 800c77e:	4283      	cmp	r3, r0
 800c780:	d10a      	bne.n	800c798 <_lv_txt_is_cmd+0x24>
            *state = LV_TXT_CMD_STATE_PAR;
 800c782:	3001      	adds	r0, #1
            *state = LV_TXT_CMD_STATE_WAIT;
 800c784:	7010      	strb	r0, [r2, #0]
    if(*state == LV_TXT_CMD_STATE_PAR) {
 800c786:	7813      	ldrb	r3, [r2, #0]
 800c788:	2b01      	cmp	r3, #1
 800c78a:	d104      	bne.n	800c796 <_lv_txt_is_cmd+0x22>
        ret = true;
 800c78c:	0018      	movs	r0, r3
        if(c == ' ') {
 800c78e:	2920      	cmp	r1, #32
 800c790:	d101      	bne.n	800c796 <_lv_txt_is_cmd+0x22>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 800c792:	3301      	adds	r3, #1
 800c794:	7013      	strb	r3, [r2, #0]
}
 800c796:	4770      	bx	lr
        else if(*state == LV_TXT_CMD_STATE_PAR) {
 800c798:	2b01      	cmp	r3, #1
 800c79a:	d0f3      	beq.n	800c784 <_lv_txt_is_cmd+0x10>
        else if(*state == LV_TXT_CMD_STATE_IN) {
 800c79c:	2b02      	cmp	r3, #2
 800c79e:	d1f2      	bne.n	800c786 <_lv_txt_is_cmd+0x12>
            *state = LV_TXT_CMD_STATE_WAIT;
 800c7a0:	7010      	strb	r0, [r2, #0]
            ret    = true;
 800c7a2:	2001      	movs	r0, #1
 800c7a4:	e7ef      	b.n	800c786 <_lv_txt_is_cmd+0x12>
	...

0800c7a8 <_lv_txt_get_width>:
{
 800c7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7aa:	b087      	sub	sp, #28
 800c7ac:	9302      	str	r3, [sp, #8]
 800c7ae:	ab0c      	add	r3, sp, #48	; 0x30
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	0005      	movs	r5, r0
 800c7b4:	9101      	str	r1, [sp, #4]
 800c7b6:	0016      	movs	r6, r2
 800c7b8:	9303      	str	r3, [sp, #12]
    if(txt == NULL) return 0;
 800c7ba:	1e04      	subs	r4, r0, #0
 800c7bc:	d00a      	beq.n	800c7d4 <_lv_txt_get_width+0x2c>
 800c7be:	1e14      	subs	r4, r2, #0
    if(font == NULL) return 0;
 800c7c0:	d008      	beq.n	800c7d4 <_lv_txt_get_width+0x2c>
    if(txt == NULL) return 0;
 800c7c2:	2400      	movs	r4, #0
    if(txt[0] == '\0') return 0;
 800c7c4:	7803      	ldrb	r3, [r0, #0]
 800c7c6:	42a3      	cmp	r3, r4
 800c7c8:	d004      	beq.n	800c7d4 <_lv_txt_get_width+0x2c>
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 800c7ca:	ab04      	add	r3, sp, #16
    uint32_t i                   = 0;
 800c7cc:	9405      	str	r4, [sp, #20]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 800c7ce:	70dc      	strb	r4, [r3, #3]
    if(length != 0) {
 800c7d0:	42a1      	cmp	r1, r4
 800c7d2:	d11a      	bne.n	800c80a <_lv_txt_get_width+0x62>
}
 800c7d4:	0020      	movs	r0, r4
 800c7d6:	b007      	add	sp, #28
 800c7d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
 800c7da:	4f17      	ldr	r7, [pc, #92]	; (800c838 <_lv_txt_get_width+0x90>)
 800c7dc:	a905      	add	r1, sp, #20
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	0028      	movs	r0, r5
 800c7e2:	4798      	blx	r3
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
 800c7e4:	9b05      	ldr	r3, [sp, #20]
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
 800c7e6:	9000      	str	r0, [sp, #0]
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
 800c7e8:	2100      	movs	r1, #0
 800c7ea:	18e8      	adds	r0, r5, r3
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	4798      	blx	r3
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800c7f0:	2201      	movs	r2, #1
 800c7f2:	9b03      	ldr	r3, [sp, #12]
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
 800c7f4:	0007      	movs	r7, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800c7f6:	4213      	tst	r3, r2
 800c7f8:	d111      	bne.n	800c81e <_lv_txt_get_width+0x76>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 800c7fa:	003a      	movs	r2, r7
 800c7fc:	9900      	ldr	r1, [sp, #0]
 800c7fe:	0030      	movs	r0, r6
 800c800:	f7fe fa6c 	bl	800acdc <lv_font_get_glyph_width>
            if(char_width > 0) {
 800c804:	b203      	sxth	r3, r0
 800c806:	2b00      	cmp	r3, #0
 800c808:	dc11      	bgt.n	800c82e <_lv_txt_get_width+0x86>
        while(i < length) {
 800c80a:	9b01      	ldr	r3, [sp, #4]
 800c80c:	9a05      	ldr	r2, [sp, #20]
 800c80e:	4293      	cmp	r3, r2
 800c810:	d8e3      	bhi.n	800c7da <_lv_txt_get_width+0x32>
        if(width > 0) {
 800c812:	2c00      	cmp	r4, #0
 800c814:	ddde      	ble.n	800c7d4 <_lv_txt_get_width+0x2c>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 800c816:	9b02      	ldr	r3, [sp, #8]
 800c818:	1ae4      	subs	r4, r4, r3
 800c81a:	b224      	sxth	r4, r4
 800c81c:	e7da      	b.n	800c7d4 <_lv_txt_get_width+0x2c>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
 800c81e:	ab04      	add	r3, sp, #16
 800c820:	9900      	ldr	r1, [sp, #0]
 800c822:	1cd8      	adds	r0, r3, #3
 800c824:	f7ff ffa6 	bl	800c774 <_lv_txt_is_cmd>
 800c828:	2800      	cmp	r0, #0
 800c82a:	d0e6      	beq.n	800c7fa <_lv_txt_get_width+0x52>
 800c82c:	e7ed      	b.n	800c80a <_lv_txt_get_width+0x62>
                width += letter_space;
 800c82e:	9b02      	ldr	r3, [sp, #8]
 800c830:	18e4      	adds	r4, r4, r3
 800c832:	1904      	adds	r4, r0, r4
 800c834:	b224      	sxth	r4, r4
 800c836:	e7e8      	b.n	800c80a <_lv_txt_get_width+0x62>
 800c838:	20000050 	.word	0x20000050

0800c83c <_lv_txt_get_next_line>:
{
 800c83c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c83e:	b093      	sub	sp, #76	; 0x4c
 800c840:	9303      	str	r3, [sp, #12]
 800c842:	ab18      	add	r3, sp, #96	; 0x60
 800c844:	781b      	ldrb	r3, [r3, #0]
 800c846:	1e06      	subs	r6, r0, #0
 800c848:	9107      	str	r1, [sp, #28]
 800c84a:	920c      	str	r2, [sp, #48]	; 0x30
 800c84c:	9308      	str	r3, [sp, #32]
    if(txt == NULL) return 0;
 800c84e:	d011      	beq.n	800c874 <_lv_txt_get_next_line+0x38>
 800c850:	1e08      	subs	r0, r1, #0
    if(font == NULL) return 0;
 800c852:	d00f      	beq.n	800c874 <_lv_txt_get_next_line+0x38>
    if((flag & LV_TXT_FLAG_EXPAND) || (flag & LV_TXT_FLAG_FIT)) {
 800c854:	2312      	movs	r3, #18
 800c856:	9a08      	ldr	r2, [sp, #32]
 800c858:	421a      	tst	r2, r3
 800c85a:	d00d      	beq.n	800c878 <_lv_txt_get_next_line+0x3c>
 800c85c:	0033      	movs	r3, r6
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 800c85e:	781a      	ldrb	r2, [r3, #0]
 800c860:	1b98      	subs	r0, r3, r6
 800c862:	2a0a      	cmp	r2, #10
 800c864:	d100      	bne.n	800c868 <_lv_txt_get_next_line+0x2c>
 800c866:	e0c4      	b.n	800c9f2 <_lv_txt_get_next_line+0x1b6>
 800c868:	2a0d      	cmp	r2, #13
 800c86a:	d100      	bne.n	800c86e <_lv_txt_get_next_line+0x32>
 800c86c:	e0c1      	b.n	800c9f2 <_lv_txt_get_next_line+0x1b6>
 800c86e:	3301      	adds	r3, #1
 800c870:	2a00      	cmp	r2, #0
 800c872:	d1f4      	bne.n	800c85e <_lv_txt_get_next_line+0x22>
}
 800c874:	b013      	add	sp, #76	; 0x4c
 800c876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c878:	2302      	movs	r3, #2
 800c87a:	9a08      	ldr	r2, [sp, #32]
 800c87c:	401a      	ands	r2, r3
 800c87e:	9209      	str	r2, [sp, #36]	; 0x24
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 800c880:	d001      	beq.n	800c886 <_lv_txt_get_next_line+0x4a>
 800c882:	4b5d      	ldr	r3, [pc, #372]	; (800c9f8 <_lv_txt_get_next_line+0x1bc>)
 800c884:	9303      	str	r3, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 800c886:	2300      	movs	r3, #0
 800c888:	aa0e      	add	r2, sp, #56	; 0x38
 800c88a:	70d3      	strb	r3, [r2, #3]
    uint32_t i = 0;                                        /* Iterating index into txt */
 800c88c:	930f      	str	r3, [sp, #60]	; 0x3c
    while(txt[i] != '\0' && max_width > 0) {
 800c88e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c890:	930a      	str	r3, [sp, #40]	; 0x28
 800c892:	18f3      	adds	r3, r6, r3
 800c894:	9304      	str	r3, [sp, #16]
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d100      	bne.n	800c89e <_lv_txt_get_next_line+0x62>
 800c89c:	e08f      	b.n	800c9be <_lv_txt_get_next_line+0x182>
 800c89e:	9b03      	ldr	r3, [sp, #12]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	dc00      	bgt.n	800c8a6 <_lv_txt_get_next_line+0x6a>
 800c8a4:	e08b      	b.n	800c9be <_lv_txt_get_next_line+0x182>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 800c8a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d121      	bne.n	800c8f0 <_lv_txt_get_next_line+0xb4>
 800c8ac:	9b03      	ldr	r3, [sp, #12]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
 800c8ae:	2500      	movs	r5, #0
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 800c8b0:	930b      	str	r3, [sp, #44]	; 0x2c
    letter = _lv_txt_encoded_next(txt, &i_next);
 800c8b2:	4b52      	ldr	r3, [pc, #328]	; (800c9fc <_lv_txt_get_next_line+0x1c0>)
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
 800c8b4:	9510      	str	r5, [sp, #64]	; 0x40
    letter = _lv_txt_encoded_next(txt, &i_next);
 800c8b6:	681b      	ldr	r3, [r3, #0]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
 800c8b8:	9511      	str	r5, [sp, #68]	; 0x44
    letter = _lv_txt_encoded_next(txt, &i_next);
 800c8ba:	a910      	add	r1, sp, #64	; 0x40
 800c8bc:	9804      	ldr	r0, [sp, #16]
 800c8be:	4798      	blx	r3
    i_next_next = i_next;
 800c8c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    letter = _lv_txt_encoded_next(txt, &i_next);
 800c8c2:	0007      	movs	r7, r0
    i_next_next = i_next;
 800c8c4:	9311      	str	r3, [sp, #68]	; 0x44
    uint32_t break_index = NO_BREAK_FOUND; /* only used for "long" words */
 800c8c6:	2301      	movs	r3, #1
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
 800c8c8:	002c      	movs	r4, r5
    uint32_t break_index = NO_BREAK_FOUND; /* only used for "long" words */
 800c8ca:	425b      	negs	r3, r3
 800c8cc:	9301      	str	r3, [sp, #4]
    uint32_t word_len = 0;   /* Number of characters in the transversed word */
 800c8ce:	9506      	str	r5, [sp, #24]
    lv_coord_t cur_w = 0;  /* Pixel Width of transversed string */
 800c8d0:	9502      	str	r5, [sp, #8]
    uint32_t letter_next = 0; /* Letter at i_next */
 800c8d2:	9505      	str	r5, [sp, #20]
    while(txt[i] != '\0') {
 800c8d4:	9b04      	ldr	r3, [sp, #16]
 800c8d6:	5d1b      	ldrb	r3, [r3, r4]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d10b      	bne.n	800c8f4 <_lv_txt_get_next_line+0xb8>
    if(break_index == NO_BREAK_FOUND) {
 800c8dc:	9b01      	ldr	r3, [sp, #4]
 800c8de:	3301      	adds	r3, #1
 800c8e0:	d056      	beq.n	800c990 <_lv_txt_get_next_line+0x154>
    if(force) return break_index;
 800c8e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8e4:	9c01      	ldr	r4, [sp, #4]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d05b      	beq.n	800c9a2 <_lv_txt_get_next_line+0x166>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /* Return no word */
 800c8ea:	2500      	movs	r5, #0
    return 0;
 800c8ec:	002c      	movs	r4, r5
 800c8ee:	e058      	b.n	800c9a2 <_lv_txt_get_next_line+0x166>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 800c8f0:	4b41      	ldr	r3, [pc, #260]	; (800c9f8 <_lv_txt_get_next_line+0x1bc>)
 800c8f2:	e7dc      	b.n	800c8ae <_lv_txt_get_next_line+0x72>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 800c8f4:	4b41      	ldr	r3, [pc, #260]	; (800c9fc <_lv_txt_get_next_line+0x1c0>)
 800c8f6:	a911      	add	r1, sp, #68	; 0x44
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	9804      	ldr	r0, [sp, #16]
 800c8fc:	4798      	blx	r3
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800c8fe:	2201      	movs	r2, #1
        word_len++;
 800c900:	9b06      	ldr	r3, [sp, #24]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 800c902:	9005      	str	r0, [sp, #20]
        word_len++;
 800c904:	3301      	adds	r3, #1
 800c906:	930d      	str	r3, [sp, #52]	; 0x34
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800c908:	9b08      	ldr	r3, [sp, #32]
 800c90a:	4213      	tst	r3, r2
 800c90c:	d00d      	beq.n	800c92a <_lv_txt_get_next_line+0xee>
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
 800c90e:	ab0e      	add	r3, sp, #56	; 0x38
 800c910:	0039      	movs	r1, r7
 800c912:	1cd8      	adds	r0, r3, #3
 800c914:	f7ff ff2e 	bl	800c774 <_lv_txt_is_cmd>
 800c918:	2800      	cmp	r0, #0
 800c91a:	d006      	beq.n	800c92a <_lv_txt_get_next_line+0xee>
        i_next = i_next_next;
 800c91c:	9b11      	ldr	r3, [sp, #68]	; 0x44
        i = i_next;
 800c91e:	9c10      	ldr	r4, [sp, #64]	; 0x40
        i_next = i_next_next;
 800c920:	9310      	str	r3, [sp, #64]	; 0x40
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 800c922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c924:	9f05      	ldr	r7, [sp, #20]
 800c926:	9306      	str	r3, [sp, #24]
 800c928:	e7d4      	b.n	800c8d4 <_lv_txt_get_next_line+0x98>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800c92a:	9a05      	ldr	r2, [sp, #20]
 800c92c:	0039      	movs	r1, r7
 800c92e:	9807      	ldr	r0, [sp, #28]
 800c930:	f7fe f9d4 	bl	800acdc <lv_font_get_glyph_width>
        cur_w += letter_w;
 800c934:	9b02      	ldr	r3, [sp, #8]
 800c936:	18c3      	adds	r3, r0, r3
        if(letter_w > 0) {
 800c938:	b200      	sxth	r0, r0
        cur_w += letter_w;
 800c93a:	b29b      	uxth	r3, r3
        if(letter_w > 0) {
 800c93c:	2800      	cmp	r0, #0
 800c93e:	dd02      	ble.n	800c946 <_lv_txt_get_next_line+0x10a>
            cur_w += letter_space;
 800c940:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c942:	189b      	adds	r3, r3, r2
 800c944:	b29b      	uxth	r3, r3
 800c946:	b21b      	sxth	r3, r3
 800c948:	9302      	str	r3, [sp, #8]
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 800c94a:	9b01      	ldr	r3, [sp, #4]
 800c94c:	3301      	adds	r3, #1
 800c94e:	d106      	bne.n	800c95e <_lv_txt_get_next_line+0x122>
 800c950:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c952:	9b02      	ldr	r3, [sp, #8]
 800c954:	1a9b      	subs	r3, r3, r2
 800c956:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c958:	4293      	cmp	r3, r2
 800c95a:	dd00      	ble.n	800c95e <_lv_txt_get_next_line+0x122>
 800c95c:	9401      	str	r4, [sp, #4]
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
 800c95e:	2f0a      	cmp	r7, #10
 800c960:	d010      	beq.n	800c984 <_lv_txt_get_next_line+0x148>
 800c962:	2f0d      	cmp	r7, #13
 800c964:	d00e      	beq.n	800c984 <_lv_txt_get_next_line+0x148>
{
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 800c966:	2300      	movs	r3, #0
 800c968:	4925      	ldr	r1, [pc, #148]	; (800ca00 <_lv_txt_get_next_line+0x1c4>)
 800c96a:	5cca      	ldrb	r2, [r1, r3]
 800c96c:	2a00      	cmp	r2, #0
 800c96e:	d104      	bne.n	800c97a <_lv_txt_get_next_line+0x13e>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
 800c970:	9b01      	ldr	r3, [sp, #4]
 800c972:	3301      	adds	r3, #1
 800c974:	d1d2      	bne.n	800c91c <_lv_txt_get_next_line+0xe0>
 800c976:	9d02      	ldr	r5, [sp, #8]
 800c978:	e7d0      	b.n	800c91c <_lv_txt_get_next_line+0xe0>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 800c97a:	4297      	cmp	r7, r2
 800c97c:	d002      	beq.n	800c984 <_lv_txt_get_next_line+0x148>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 800c97e:	3301      	adds	r3, #1
 800c980:	b2db      	uxtb	r3, r3
 800c982:	e7f2      	b.n	800c96a <_lv_txt_get_next_line+0x12e>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
 800c984:	2c00      	cmp	r4, #0
 800c986:	d1a9      	bne.n	800c8dc <_lv_txt_get_next_line+0xa0>
 800c988:	9b01      	ldr	r3, [sp, #4]
 800c98a:	3301      	adds	r3, #1
 800c98c:	d1a9      	bne.n	800c8e2 <_lv_txt_get_next_line+0xa6>
 800c98e:	9d02      	ldr	r5, [sp, #8]
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 800c990:	9b06      	ldr	r3, [sp, #24]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d004      	beq.n	800c9a0 <_lv_txt_get_next_line+0x164>
 800c996:	2f0d      	cmp	r7, #13
 800c998:	d103      	bne.n	800c9a2 <_lv_txt_get_next_line+0x166>
 800c99a:	9b05      	ldr	r3, [sp, #20]
 800c99c:	2b0a      	cmp	r3, #10
 800c99e:	d100      	bne.n	800c9a2 <_lv_txt_get_next_line+0x166>
 800c9a0:	9c10      	ldr	r4, [sp, #64]	; 0x40
        max_width -= word_w;
 800c9a2:	9b03      	ldr	r3, [sp, #12]
 800c9a4:	1b5d      	subs	r5, r3, r5
 800c9a6:	b22b      	sxth	r3, r5
 800c9a8:	9303      	str	r3, [sp, #12]
 800c9aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        if(advance == 0) {
 800c9ac:	2c00      	cmp	r4, #0
 800c9ae:	d110      	bne.n	800c9d2 <_lv_txt_get_next_line+0x196>
            if(i == 0) _lv_txt_encoded_next(txt, &i); // prevent inf loops
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d10c      	bne.n	800c9ce <_lv_txt_get_next_line+0x192>
 800c9b4:	4b11      	ldr	r3, [pc, #68]	; (800c9fc <_lv_txt_get_next_line+0x1c0>)
 800c9b6:	a90f      	add	r1, sp, #60	; 0x3c
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	0030      	movs	r0, r6
 800c9bc:	4798      	blx	r3
    if(i == 0) {
 800c9be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d104      	bne.n	800c9ce <_lv_txt_get_next_line+0x192>
        _lv_txt_encoded_next(txt, &i);
 800c9c4:	4b0d      	ldr	r3, [pc, #52]	; (800c9fc <_lv_txt_get_next_line+0x1c0>)
 800c9c6:	a90f      	add	r1, sp, #60	; 0x3c
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	0030      	movs	r0, r6
 800c9cc:	4798      	blx	r3
    return i;
 800c9ce:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c9d0:	e750      	b.n	800c874 <_lv_txt_get_next_line+0x38>
        i += advance;
 800c9d2:	18e4      	adds	r4, r4, r3
        if(txt[0] == '\n' || txt[0] == '\r') break;
 800c9d4:	7833      	ldrb	r3, [r6, #0]
        i += advance;
 800c9d6:	940f      	str	r4, [sp, #60]	; 0x3c
        if(txt[0] == '\n' || txt[0] == '\r') break;
 800c9d8:	2b0a      	cmp	r3, #10
 800c9da:	d0f0      	beq.n	800c9be <_lv_txt_get_next_line+0x182>
 800c9dc:	2b0d      	cmp	r3, #13
 800c9de:	d0ee      	beq.n	800c9be <_lv_txt_get_next_line+0x182>
        if(txt[i] == '\n' || txt[i] == '\r') {
 800c9e0:	5d33      	ldrb	r3, [r6, r4]
 800c9e2:	2b0a      	cmp	r3, #10
 800c9e4:	d002      	beq.n	800c9ec <_lv_txt_get_next_line+0x1b0>
 800c9e6:	2b0d      	cmp	r3, #13
 800c9e8:	d000      	beq.n	800c9ec <_lv_txt_get_next_line+0x1b0>
 800c9ea:	e750      	b.n	800c88e <_lv_txt_get_next_line+0x52>
            i++;  /* Include the following newline in the current line */
 800c9ec:	3401      	adds	r4, #1
 800c9ee:	940f      	str	r4, [sp, #60]	; 0x3c
 800c9f0:	e7e5      	b.n	800c9be <_lv_txt_get_next_line+0x182>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
 800c9f2:	3001      	adds	r0, #1
 800c9f4:	e73e      	b.n	800c874 <_lv_txt_get_next_line+0x38>
 800c9f6:	46c0      	nop			; (mov r8, r8)
 800c9f8:	00007c18 	.word	0x00007c18
 800c9fc:	20000050 	.word	0x20000050
 800ca00:	0801185c 	.word	0x0801185c

0800ca04 <_lv_txt_get_size>:
{
 800ca04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca06:	b08b      	sub	sp, #44	; 0x2c
 800ca08:	9308      	str	r3, [sp, #32]
 800ca0a:	ab10      	add	r3, sp, #64	; 0x40
 800ca0c:	0016      	movs	r6, r2
 800ca0e:	2200      	movs	r2, #0
 800ca10:	5e9b      	ldrsh	r3, [r3, r2]
 800ca12:	0004      	movs	r4, r0
 800ca14:	9303      	str	r3, [sp, #12]
 800ca16:	ab11      	add	r3, sp, #68	; 0x44
 800ca18:	2200      	movs	r2, #0
 800ca1a:	5e9b      	ldrsh	r3, [r3, r2]
 800ca1c:	9107      	str	r1, [sp, #28]
 800ca1e:	9309      	str	r3, [sp, #36]	; 0x24
 800ca20:	ab12      	add	r3, sp, #72	; 0x48
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	9304      	str	r3, [sp, #16]
    size_res->x = 0;
 800ca26:	2300      	movs	r3, #0
 800ca28:	8003      	strh	r3, [r0, #0]
    size_res->y = 0;
 800ca2a:	8043      	strh	r3, [r0, #2]
    if(text == NULL) return;
 800ca2c:	2900      	cmp	r1, #0
 800ca2e:	d027      	beq.n	800ca80 <_lv_txt_get_size+0x7c>
    if(font == NULL) return;
 800ca30:	2e00      	cmp	r6, #0
 800ca32:	d025      	beq.n	800ca80 <_lv_txt_get_size+0x7c>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 800ca34:	9b04      	ldr	r3, [sp, #16]
 800ca36:	079b      	lsls	r3, r3, #30
 800ca38:	d501      	bpl.n	800ca3e <_lv_txt_get_size+0x3a>
 800ca3a:	4b25      	ldr	r3, [pc, #148]	; (800cad0 <_lv_txt_get_size+0xcc>)
 800ca3c:	9309      	str	r3, [sp, #36]	; 0x24
    uint16_t letter_height = lv_font_get_line_height(font);
 800ca3e:	2208      	movs	r2, #8
 800ca40:	5eb3      	ldrsh	r3, [r6, r2]
    uint32_t line_start     = 0;
 800ca42:	2700      	movs	r7, #0
    uint16_t letter_height = lv_font_get_line_height(font);
 800ca44:	9306      	str	r3, [sp, #24]
 800ca46:	466b      	mov	r3, sp
 800ca48:	8b1b      	ldrh	r3, [r3, #24]
 800ca4a:	9305      	str	r3, [sp, #20]
    while(text[line_start] != '\0') {
 800ca4c:	9b07      	ldr	r3, [sp, #28]
 800ca4e:	19dd      	adds	r5, r3, r7
 800ca50:	782b      	ldrb	r3, [r5, #0]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d116      	bne.n	800ca84 <_lv_txt_get_size+0x80>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 800ca56:	2f00      	cmp	r7, #0
 800ca58:	d00c      	beq.n	800ca74 <_lv_txt_get_size+0x70>
 800ca5a:	3d01      	subs	r5, #1
 800ca5c:	782b      	ldrb	r3, [r5, #0]
 800ca5e:	2b0a      	cmp	r3, #10
 800ca60:	d001      	beq.n	800ca66 <_lv_txt_get_size+0x62>
 800ca62:	2b0d      	cmp	r3, #13
 800ca64:	d106      	bne.n	800ca74 <_lv_txt_get_size+0x70>
        size_res->y += letter_height + line_space;
 800ca66:	9a03      	ldr	r2, [sp, #12]
 800ca68:	9b05      	ldr	r3, [sp, #20]
 800ca6a:	4694      	mov	ip, r2
 800ca6c:	8862      	ldrh	r2, [r4, #2]
 800ca6e:	4463      	add	r3, ip
 800ca70:	18d3      	adds	r3, r2, r3
 800ca72:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
 800ca74:	2202      	movs	r2, #2
 800ca76:	5ea3      	ldrsh	r3, [r4, r2]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d126      	bne.n	800caca <_lv_txt_get_size+0xc6>
        size_res->y = letter_height;
 800ca7c:	9b06      	ldr	r3, [sp, #24]
        size_res->y -= line_space;
 800ca7e:	8063      	strh	r3, [r4, #2]
}
 800ca80:	b00b      	add	sp, #44	; 0x2c
 800ca82:	bdf0      	pop	{r4, r5, r6, r7, pc}
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 800ca84:	9b04      	ldr	r3, [sp, #16]
 800ca86:	9a08      	ldr	r2, [sp, #32]
 800ca88:	9300      	str	r3, [sp, #0]
 800ca8a:	0031      	movs	r1, r6
 800ca8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca8e:	0028      	movs	r0, r5
 800ca90:	f7ff fed4 	bl	800c83c <_lv_txt_get_next_line>
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 800ca94:	2302      	movs	r3, #2
 800ca96:	5ee2      	ldrsh	r2, [r4, r3]
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 800ca98:	0001      	movs	r1, r0
 800ca9a:	183f      	adds	r7, r7, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 800ca9c:	9b05      	ldr	r3, [sp, #20]
 800ca9e:	9803      	ldr	r0, [sp, #12]
 800caa0:	181b      	adds	r3, r3, r0
 800caa2:	189b      	adds	r3, r3, r2
 800caa4:	4a0b      	ldr	r2, [pc, #44]	; (800cad4 <_lv_txt_get_size+0xd0>)
 800caa6:	4293      	cmp	r3, r2
 800caa8:	d8ea      	bhi.n	800ca80 <_lv_txt_get_size+0x7c>
            size_res->y += line_space;
 800caaa:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = _lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
 800caac:	9b04      	ldr	r3, [sp, #16]
 800caae:	0032      	movs	r2, r6
 800cab0:	9300      	str	r3, [sp, #0]
 800cab2:	0028      	movs	r0, r5
 800cab4:	9b08      	ldr	r3, [sp, #32]
 800cab6:	f7ff fe77 	bl	800c7a8 <_lv_txt_get_width>
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
 800caba:	8823      	ldrh	r3, [r4, #0]
 800cabc:	1c1a      	adds	r2, r3, #0
 800cabe:	b21b      	sxth	r3, r3
 800cac0:	4283      	cmp	r3, r0
 800cac2:	da00      	bge.n	800cac6 <_lv_txt_get_size+0xc2>
 800cac4:	1c02      	adds	r2, r0, #0
 800cac6:	8022      	strh	r2, [r4, #0]
 800cac8:	e7c0      	b.n	800ca4c <_lv_txt_get_size+0x48>
        size_res->y -= line_space;
 800caca:	9a03      	ldr	r2, [sp, #12]
 800cacc:	1a9b      	subs	r3, r3, r2
 800cace:	e7d6      	b.n	800ca7e <_lv_txt_get_size+0x7a>
 800cad0:	00007c18 	.word	0x00007c18
 800cad4:	00007fff 	.word	0x00007fff

0800cad8 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
 800cad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cada:	000f      	movs	r7, r1
 800cadc:	0015      	movs	r5, r2
 800cade:	9001      	str	r0, [sp, #4]
 800cae0:	9300      	str	r3, [sp, #0]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 800cae2:	2d00      	cmp	r5, #0
 800cae4:	d101      	bne.n	800caea <_lv_utils_bsearch+0x12>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
 800cae6:	002c      	movs	r4, r5
 800cae8:	e012      	b.n	800cb10 <_lv_utils_bsearch+0x38>
        middle += (n / 2) * size;
 800caea:	9c00      	ldr	r4, [sp, #0]
 800caec:	086e      	lsrs	r6, r5, #1
 800caee:	4374      	muls	r4, r6
 800caf0:	193c      	adds	r4, r7, r4
        if((c = (*cmp)(key, middle)) > 0) {
 800caf2:	0021      	movs	r1, r4
 800caf4:	9801      	ldr	r0, [sp, #4]
 800caf6:	9b08      	ldr	r3, [sp, #32]
 800caf8:	4798      	blx	r3
 800cafa:	2800      	cmp	r0, #0
 800cafc:	dd06      	ble.n	800cb0c <_lv_utils_bsearch+0x34>
 800cafe:	2301      	movs	r3, #1
 800cb00:	43ab      	bics	r3, r5
            n    = (n / 2) - ((n & 1) == 0);
 800cb02:	1af6      	subs	r6, r6, r3
            base = (middle += size);
 800cb04:	9b00      	ldr	r3, [sp, #0]
 800cb06:	18e7      	adds	r7, r4, r3
{
 800cb08:	0035      	movs	r5, r6
 800cb0a:	e7ea      	b.n	800cae2 <_lv_utils_bsearch+0xa>
        else if(c < 0) {
 800cb0c:	2800      	cmp	r0, #0
 800cb0e:	d1fb      	bne.n	800cb08 <_lv_utils_bsearch+0x30>
}
 800cb10:	0020      	movs	r0, r4
 800cb12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800cb14 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
 800cb14:	b570      	push	{r4, r5, r6, lr}
 800cb16:	0006      	movs	r6, r0
    if(th->base) {
 800cb18:	6880      	ldr	r0, [r0, #8]
{
 800cb1a:	000c      	movs	r4, r1
 800cb1c:	0015      	movs	r5, r2
    if(th->base) {
 800cb1e:	2800      	cmp	r0, #0
 800cb20:	d001      	beq.n	800cb26 <apply_theme+0x12>
        apply_theme(th->base, obj, name);
 800cb22:	f7ff fff7 	bl	800cb14 <apply_theme>
    }

    /*apply_xcb is deprecated, use apply_cb instead*/
    if(th->apply_xcb) {
 800cb26:	6873      	ldr	r3, [r6, #4]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d003      	beq.n	800cb34 <apply_theme+0x20>
        th->apply_xcb(obj, name);
 800cb2c:	0029      	movs	r1, r5
 800cb2e:	0020      	movs	r0, r4
 800cb30:	4798      	blx	r3
    }
    else if(th->apply_cb) {
        th->apply_cb(act_theme, obj, name);
    }
}
 800cb32:	bd70      	pop	{r4, r5, r6, pc}
    else if(th->apply_cb) {
 800cb34:	6833      	ldr	r3, [r6, #0]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d0fb      	beq.n	800cb32 <apply_theme+0x1e>
        th->apply_cb(act_theme, obj, name);
 800cb3a:	4803      	ldr	r0, [pc, #12]	; (800cb48 <apply_theme+0x34>)
 800cb3c:	002a      	movs	r2, r5
 800cb3e:	0021      	movs	r1, r4
 800cb40:	6800      	ldr	r0, [r0, #0]
 800cb42:	4798      	blx	r3
}
 800cb44:	e7f5      	b.n	800cb32 <apply_theme+0x1e>
 800cb46:	46c0      	nop			; (mov r8, r8)
 800cb48:	20006e98 	.word	0x20006e98

0800cb4c <lv_theme_set_act>:
    act_theme = th;
 800cb4c:	4b01      	ldr	r3, [pc, #4]	; (800cb54 <lv_theme_set_act+0x8>)
 800cb4e:	6018      	str	r0, [r3, #0]
}
 800cb50:	4770      	bx	lr
 800cb52:	46c0      	nop			; (mov r8, r8)
 800cb54:	20006e98 	.word	0x20006e98

0800cb58 <lv_theme_apply>:
{
 800cb58:	b570      	push	{r4, r5, r6, lr}
 800cb5a:	0004      	movs	r4, r0

static void clear_styles(lv_obj_t * obj, lv_theme_style_t name)
{
    switch(name) {
 800cb5c:	1e48      	subs	r0, r1, #1
{
 800cb5e:	000d      	movs	r5, r1
    switch(name) {
 800cb60:	280a      	cmp	r0, #10
 800cb62:	d80f      	bhi.n	800cb84 <lv_theme_apply+0x2c>
            break;
#endif

#if LV_USE_BTNMATRIX
        case LV_THEME_BTNMATRIX:
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BG);
 800cb64:	2100      	movs	r1, #0
    switch(name) {
 800cb66:	f7f3 fae7 	bl	8000138 <__gnu_thumb1_case_uqi>
 800cb6a:	0a0a      	.short	0x0a0a
 800cb6c:	060a0606 	.word	0x060a0606
 800cb70:	0a0a060a 	.word	0x0a0a060a
 800cb74:	0a          	.byte	0x0a
 800cb75:	00          	.byte	0x00
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BG);
 800cb76:	0020      	movs	r0, r4
 800cb78:	f7f7 fa3b 	bl	8003ff2 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BTN);
 800cb7c:	2101      	movs	r1, #1
 800cb7e:	0020      	movs	r0, r4
 800cb80:	f7f7 fa37 	bl	8003ff2 <lv_obj_clean_style_list>
    apply_theme(act_theme, obj, name);
 800cb84:	4b03      	ldr	r3, [pc, #12]	; (800cb94 <lv_theme_apply+0x3c>)
 800cb86:	002a      	movs	r2, r5
 800cb88:	0021      	movs	r1, r4
 800cb8a:	6818      	ldr	r0, [r3, #0]
 800cb8c:	f7ff ffc2 	bl	800cb14 <apply_theme>
}
 800cb90:	bd70      	pop	{r4, r5, r6, pc}
 800cb92:	46c0      	nop			; (mov r8, r8)
 800cb94:	20006e98 	.word	0x20006e98

0800cb98 <lv_theme_get_font_normal>:
    return act_theme->font_normal;
 800cb98:	4b01      	ldr	r3, [pc, #4]	; (800cba0 <lv_theme_get_font_normal+0x8>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	6958      	ldr	r0, [r3, #20]
}
 800cb9e:	4770      	bx	lr
 800cba0:	20006e98 	.word	0x20006e98

0800cba4 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 800cba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800cba6:	26ff      	movs	r6, #255	; 0xff
 800cba8:	271f      	movs	r7, #31
 800cbaa:	0403      	lsls	r3, r0, #16
 800cbac:	040c      	lsls	r4, r1, #16
 800cbae:	1ab6      	subs	r6, r6, r2
 800cbb0:	0edb      	lsrs	r3, r3, #27
 800cbb2:	0ee4      	lsrs	r4, r4, #27
 800cbb4:	4374      	muls	r4, r6
 800cbb6:	4353      	muls	r3, r2
 800cbb8:	4d11      	ldr	r5, [pc, #68]	; (800cc00 <lv_color_mix+0x5c>)
 800cbba:	191b      	adds	r3, r3, r4
 800cbbc:	3380      	adds	r3, #128	; 0x80
 800cbbe:	436b      	muls	r3, r5
 800cbc0:	0ddb      	lsrs	r3, r3, #23
 800cbc2:	403b      	ands	r3, r7
 800cbc4:	9301      	str	r3, [sp, #4]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800cbc6:	054b      	lsls	r3, r1, #21
 800cbc8:	0e9b      	lsrs	r3, r3, #26
 800cbca:	4373      	muls	r3, r6
 800cbcc:	469c      	mov	ip, r3
 800cbce:	0544      	lsls	r4, r0, #21
 800cbd0:	0ea4      	lsrs	r4, r4, #26
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800cbd2:	06c0      	lsls	r0, r0, #27
 800cbd4:	06c9      	lsls	r1, r1, #27
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800cbd6:	4354      	muls	r4, r2
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800cbd8:	0ec0      	lsrs	r0, r0, #27
 800cbda:	0ec9      	lsrs	r1, r1, #27
 800cbdc:	4371      	muls	r1, r6
 800cbde:	4350      	muls	r0, r2
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800cbe0:	4464      	add	r4, ip
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800cbe2:	1840      	adds	r0, r0, r1
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800cbe4:	3480      	adds	r4, #128	; 0x80
 800cbe6:	436c      	muls	r4, r5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800cbe8:	3080      	adds	r0, #128	; 0x80
 800cbea:	4368      	muls	r0, r5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800cbec:	00e4      	lsls	r4, r4, #3
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 800cbee:	9b01      	ldr	r3, [sp, #4]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800cbf0:	0dc0      	lsrs	r0, r0, #23
    return ret;
 800cbf2:	0ea4      	lsrs	r4, r4, #26
 800cbf4:	4038      	ands	r0, r7
 800cbf6:	0164      	lsls	r4, r4, #5
 800cbf8:	02db      	lsls	r3, r3, #11
 800cbfa:	4320      	orrs	r0, r4
 800cbfc:	4318      	orrs	r0, r3
}
 800cbfe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cc00:	00008081 	.word	0x00008081

0800cc04 <lv_color_hex3>:
    return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xFF));
}

static inline lv_color_t lv_color_hex3(uint32_t c)
{
    return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((c & 0xF0) >> 4)),
 800cc04:	b2c2      	uxtb	r2, r0
{
 800cc06:	b530      	push	{r4, r5, lr}
                         (uint8_t)((c & 0xF) | ((c & 0xF) << 4)));
 800cc08:	0011      	movs	r1, r2
 800cc0a:	240f      	movs	r4, #15
    return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((c & 0xF0) >> 4)),
 800cc0c:	0903      	lsrs	r3, r0, #4
                         (uint8_t)((c & 0xF) | ((c & 0xF) << 4)));
 800cc0e:	0115      	lsls	r5, r2, #4
    return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((c & 0xF0) >> 4)),
 800cc10:	b2db      	uxtb	r3, r3
                         (uint8_t)((c & 0xF) | ((c & 0xF) << 4)));
 800cc12:	4021      	ands	r1, r4
    return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((c & 0xF0) >> 4)),
 800cc14:	4329      	orrs	r1, r5
 800cc16:	001d      	movs	r5, r3
 800cc18:	43a2      	bics	r2, r4
 800cc1a:	4025      	ands	r5, r4
 800cc1c:	43a3      	bics	r3, r4
 800cc1e:	0a00      	lsrs	r0, r0, #8
    return LV_COLOR_MAKE(r, g, b);
 800cc20:	432a      	orrs	r2, r5
    return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((c & 0xF0) >> 4)),
 800cc22:	4318      	orrs	r0, r3
 800cc24:	0609      	lsls	r1, r1, #24
 800cc26:	0892      	lsrs	r2, r2, #2
    return LV_COLOR_MAKE(r, g, b);
 800cc28:	b2c0      	uxtb	r0, r0
 800cc2a:	0ec9      	lsrs	r1, r1, #27
 800cc2c:	0152      	lsls	r2, r2, #5
 800cc2e:	08c0      	lsrs	r0, r0, #3
 800cc30:	430a      	orrs	r2, r1
 800cc32:	02c0      	lsls	r0, r0, #11
 800cc34:	4310      	orrs	r0, r2
}
 800cc36:	bd30      	pop	{r4, r5, pc}

0800cc38 <theme_apply>:
{
    LV_UNUSED(th);

    lv_style_list_t * list;

    switch(name) {
 800cc38:	1e50      	subs	r0, r2, #1
{
 800cc3a:	b570      	push	{r4, r5, r6, lr}
 800cc3c:	000c      	movs	r4, r1
    switch(name) {
 800cc3e:	280a      	cmp	r0, #10
 800cc40:	d878      	bhi.n	800cd34 <theme_apply+0xfc>
 800cc42:	f7f3 fa79 	bl	8000138 <__gnu_thumb1_case_uqi>
 800cc46:	0f06      	.short	0x0f06
 800cc48:	1f173b4b 	.word	0x1f173b4b
 800cc4c:	77777d0f 	.word	0x77777d0f
 800cc50:	73          	.byte	0x73
 800cc51:	00          	.byte	0x00
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
 800cc52:	2100      	movs	r1, #0
 800cc54:	0020      	movs	r0, r4
 800cc56:	f7f7 f9b9 	bl	8003fcc <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->scr);
 800cc5a:	4b41      	ldr	r3, [pc, #260]	; (800cd60 <theme_apply+0x128>)
 800cc5c:	6819      	ldr	r1, [r3, #0]
        case LV_THEME_CPICKER:
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_MAIN);
            _lv_style_list_add_style(list, &styles->cpicker_bg);

            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_KNOB);
            _lv_style_list_add_style(list, &styles->cpicker_indic);
 800cc5e:	f7f9 fbb5 	bl	80063cc <_lv_style_list_add_style>
            break;
 800cc62:	e067      	b.n	800cd34 <theme_apply+0xfc>
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
 800cc64:	2100      	movs	r1, #0
 800cc66:	0020      	movs	r0, r4
 800cc68:	f7f7 f9b0 	bl	8003fcc <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 800cc6c:	4b3c      	ldr	r3, [pc, #240]	; (800cd60 <theme_apply+0x128>)
 800cc6e:	6819      	ldr	r1, [r3, #0]
 800cc70:	3104      	adds	r1, #4
 800cc72:	e7f4      	b.n	800cc5e <theme_apply+0x26>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
 800cc74:	2100      	movs	r1, #0
 800cc76:	0020      	movs	r0, r4
 800cc78:	f7f7 f9a8 	bl	8003fcc <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->btn);
 800cc7c:	4b38      	ldr	r3, [pc, #224]	; (800cd60 <theme_apply+0x128>)
 800cc7e:	6819      	ldr	r1, [r3, #0]
 800cc80:	3110      	adds	r1, #16
 800cc82:	e7ec      	b.n	800cc5e <theme_apply+0x26>
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BG);
 800cc84:	2100      	movs	r1, #0
 800cc86:	0020      	movs	r0, r4
 800cc88:	f7f7 f9a0 	bl	8003fcc <lv_obj_get_style_list>
 800cc8c:	0006      	movs	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 800cc8e:	4d34      	ldr	r5, [pc, #208]	; (800cd60 <theme_apply+0x128>)
 800cc90:	682b      	ldr	r3, [r5, #0]
 800cc92:	1d19      	adds	r1, r3, #4
 800cc94:	f7f9 fb9a 	bl	80063cc <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->pad_small);
 800cc98:	6829      	ldr	r1, [r5, #0]
 800cc9a:	0030      	movs	r0, r6
 800cc9c:	3118      	adds	r1, #24
 800cc9e:	f7f9 fb95 	bl	80063cc <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BTN);
 800cca2:	2101      	movs	r1, #1
 800cca4:	0020      	movs	r0, r4
 800cca6:	f7f7 f991 	bl	8003fcc <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 800ccaa:	682b      	ldr	r3, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BTN);
 800ccac:	0006      	movs	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 800ccae:	1d19      	adds	r1, r3, #4
 800ccb0:	f7f9 fb8c 	bl	80063cc <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->bg_click);
 800ccb4:	6829      	ldr	r1, [r5, #0]
 800ccb6:	3108      	adds	r1, #8
            _lv_style_list_add_style(list, &styles->arc_knob);
 800ccb8:	0030      	movs	r0, r6
 800ccba:	e7d0      	b.n	800cc5e <theme_apply+0x26>
            list = lv_obj_get_style_list(obj, LV_BAR_PART_BG);
 800ccbc:	2100      	movs	r1, #0
 800ccbe:	0020      	movs	r0, r4
 800ccc0:	f7f7 f984 	bl	8003fcc <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bar_bg);
 800ccc4:	4d26      	ldr	r5, [pc, #152]	; (800cd60 <theme_apply+0x128>)
 800ccc6:	6829      	ldr	r1, [r5, #0]
 800ccc8:	3128      	adds	r1, #40	; 0x28
 800ccca:	f7f9 fb7f 	bl	80063cc <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_BAR_PART_INDIC);
 800ccce:	2101      	movs	r1, #1
 800ccd0:	0020      	movs	r0, r4
 800ccd2:	f7f7 f97b 	bl	8003fcc <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bar_indic);
 800ccd6:	6829      	ldr	r1, [r5, #0]
 800ccd8:	312c      	adds	r1, #44	; 0x2c
 800ccda:	e7c0      	b.n	800cc5e <theme_apply+0x26>
            list = lv_obj_get_style_list(obj, LV_ARC_PART_BG);
 800ccdc:	2100      	movs	r1, #0
 800ccde:	0020      	movs	r0, r4
 800cce0:	f7f7 f974 	bl	8003fcc <lv_obj_get_style_list>
 800cce4:	0006      	movs	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 800cce6:	4d1e      	ldr	r5, [pc, #120]	; (800cd60 <theme_apply+0x128>)
 800cce8:	682b      	ldr	r3, [r5, #0]
 800ccea:	1d19      	adds	r1, r3, #4
 800ccec:	f7f9 fb6e 	bl	80063cc <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->arc_bg);
 800ccf0:	6829      	ldr	r1, [r5, #0]
 800ccf2:	0030      	movs	r0, r6
 800ccf4:	3120      	adds	r1, #32
 800ccf6:	f7f9 fb69 	bl	80063cc <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_ARC_PART_INDIC);
 800ccfa:	2101      	movs	r1, #1
 800ccfc:	0020      	movs	r0, r4
 800ccfe:	f7f7 f965 	bl	8003fcc <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->arc_indic);
 800cd02:	6829      	ldr	r1, [r5, #0]
 800cd04:	311c      	adds	r1, #28
 800cd06:	f7f9 fb61 	bl	80063cc <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_ARC_PART_KNOB);
 800cd0a:	2102      	movs	r1, #2
 800cd0c:	0020      	movs	r0, r4
 800cd0e:	f7f7 f95d 	bl	8003fcc <lv_obj_get_style_list>
 800cd12:	0006      	movs	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 800cd14:	682b      	ldr	r3, [r5, #0]
 800cd16:	1d19      	adds	r1, r3, #4
 800cd18:	f7f9 fb58 	bl	80063cc <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->bg_click);
 800cd1c:	6829      	ldr	r1, [r5, #0]
 800cd1e:	0030      	movs	r0, r6
 800cd20:	3108      	adds	r1, #8
 800cd22:	f7f9 fb53 	bl	80063cc <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->arc_knob);
 800cd26:	6829      	ldr	r1, [r5, #0]
 800cd28:	3124      	adds	r1, #36	; 0x24
 800cd2a:	e7c5      	b.n	800ccb8 <theme_apply+0x80>
            list = lv_obj_get_style_list(obj, LV_OBJMASK_PART_MAIN);
 800cd2c:	2100      	movs	r1, #0
 800cd2e:	0020      	movs	r0, r4
 800cd30:	f7f7 f94c 	bl	8003fcc <lv_obj_get_style_list>
#endif
        default:
            break;
    }

    lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 800cd34:	22ff      	movs	r2, #255	; 0xff
 800cd36:	0020      	movs	r0, r4
 800cd38:	0011      	movs	r1, r2
 800cd3a:	f7f7 fd6d 	bl	8004818 <lv_obj_refresh_style>
}
 800cd3e:	bd70      	pop	{r4, r5, r6, pc}
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_MAIN);
 800cd40:	2100      	movs	r1, #0
 800cd42:	0020      	movs	r0, r4
 800cd44:	f7f7 f942 	bl	8003fcc <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->cpicker_bg);
 800cd48:	4d05      	ldr	r5, [pc, #20]	; (800cd60 <theme_apply+0x128>)
 800cd4a:	6829      	ldr	r1, [r5, #0]
 800cd4c:	3130      	adds	r1, #48	; 0x30
 800cd4e:	f7f9 fb3d 	bl	80063cc <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_KNOB);
 800cd52:	2101      	movs	r1, #1
 800cd54:	0020      	movs	r0, r4
 800cd56:	f7f7 f939 	bl	8003fcc <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->cpicker_indic);
 800cd5a:	6829      	ldr	r1, [r5, #0]
 800cd5c:	3134      	adds	r1, #52	; 0x34
 800cd5e:	e77e      	b.n	800cc5e <theme_apply+0x26>
 800cd60:	20006e9c 	.word	0x20006e9c

0800cd64 <lv_color_hex>:
    return LV_COLOR_MAKE(r, g, b);
 800cd64:	0402      	lsls	r2, r0, #16
 800cd66:	0603      	lsls	r3, r0, #24
 800cd68:	0e92      	lsrs	r2, r2, #26
 800cd6a:	0200      	lsls	r0, r0, #8
 800cd6c:	0152      	lsls	r2, r2, #5
 800cd6e:	0edb      	lsrs	r3, r3, #27
 800cd70:	0ec0      	lsrs	r0, r0, #27
 800cd72:	4313      	orrs	r3, r2
 800cd74:	02c0      	lsls	r0, r0, #11
 800cd76:	4318      	orrs	r0, r3
}
 800cd78:	4770      	bx	lr
	...

0800cd7c <lv_theme_material_init>:
{
 800cd7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(styles == NULL) {
 800cd7e:	4ce8      	ldr	r4, [pc, #928]	; (800d120 <lv_theme_material_init+0x3a4>)
{
 800cd80:	9301      	str	r3, [sp, #4]
    if(styles == NULL) {
 800cd82:	6823      	ldr	r3, [r4, #0]
{
 800cd84:	1c07      	adds	r7, r0, #0
 800cd86:	1c0e      	adds	r6, r1, #0
 800cd88:	9200      	str	r2, [sp, #0]
    if(styles == NULL) {
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d10d      	bne.n	800cdaa <lv_theme_material_init+0x2e>
        styles = lv_mem_alloc(sizeof(theme_styles_t));
 800cd8e:	2038      	movs	r0, #56	; 0x38
 800cd90:	f7ff f88e 	bl	800beb0 <lv_mem_alloc>
 800cd94:	6020      	str	r0, [r4, #0]
        if(styles == NULL) return NULL;
 800cd96:	1e05      	subs	r5, r0, #0
 800cd98:	d101      	bne.n	800cd9e <lv_theme_material_init+0x22>
 800cd9a:	f001 f804 	bl	800dda6 <lv_theme_material_init+0x102a>
        _lv_memset_00(styles, sizeof(theme_styles_t));
 800cd9e:	2138      	movs	r1, #56	; 0x38
 800cda0:	f7ff fa94 	bl	800c2cc <_lv_memset_00>
        LV_GC_ROOT(_lv_theme_material_styles) = styles;
 800cda4:	4bdf      	ldr	r3, [pc, #892]	; (800d124 <lv_theme_material_init+0x3a8>)
 800cda6:	6822      	ldr	r2, [r4, #0]
 800cda8:	601a      	str	r2, [r3, #0]
    theme.color_primary = color_primary;
 800cdaa:	4ddf      	ldr	r5, [pc, #892]	; (800d128 <lv_theme_material_init+0x3ac>)
    theme.font_small = font_small;
 800cdac:	9b01      	ldr	r3, [sp, #4]
    lv_style_reset(&styles->scr);
 800cdae:	6820      	ldr	r0, [r4, #0]
    theme.font_small = font_small;
 800cdb0:	612b      	str	r3, [r5, #16]
    theme.font_normal = font_normal;
 800cdb2:	9b08      	ldr	r3, [sp, #32]
    theme.color_secondary = color_secondary;
 800cdb4:	81ee      	strh	r6, [r5, #14]
    theme.font_normal = font_normal;
 800cdb6:	616b      	str	r3, [r5, #20]
    theme.font_subtitle = font_subtitle;
 800cdb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    theme.color_primary = color_primary;
 800cdba:	81af      	strh	r7, [r5, #12]
    theme.font_subtitle = font_subtitle;
 800cdbc:	61ab      	str	r3, [r5, #24]
    theme.font_title = font_title;
 800cdbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdc0:	61eb      	str	r3, [r5, #28]
    theme.flags = flags;
 800cdc2:	9b00      	ldr	r3, [sp, #0]
 800cdc4:	622b      	str	r3, [r5, #32]
    lv_style_reset(&styles->scr);
 800cdc6:	f7f9 fb4f 	bl	8006468 <lv_style_reset>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 800cdca:	22ff      	movs	r2, #255	; 0xff
 800cdcc:	212c      	movs	r1, #44	; 0x2c
 800cdce:	6820      	ldr	r0, [r4, #0]
 800cdd0:	f7f9 fc08 	bl	80065e4 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR);
 800cdd4:	6a2b      	ldr	r3, [r5, #32]
 800cdd6:	6826      	ldr	r6, [r4, #0]
 800cdd8:	079b      	lsls	r3, r3, #30
 800cdda:	d401      	bmi.n	800cde0 <lv_theme_material_init+0x64>
 800cddc:	f000 ffe5 	bl	800ddaa <lv_theme_material_init+0x102e>
 800cde0:	48d2      	ldr	r0, [pc, #840]	; (800d12c <lv_theme_material_init+0x3b0>)
 800cde2:	f7ff ffbf 	bl	800cd64 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 800cde6:	2129      	movs	r1, #41	; 0x29
 800cde8:	1c02      	adds	r2, r0, #0
 800cdea:	0030      	movs	r0, r6
 800cdec:	f7f9 fbb5 	bl	800655a <_lv_style_set_color>
    lv_style_set_text_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 800cdf0:	6a2b      	ldr	r3, [r5, #32]
 800cdf2:	6826      	ldr	r6, [r4, #0]
 800cdf4:	079b      	lsls	r3, r3, #30
 800cdf6:	d401      	bmi.n	800cdfc <lv_theme_material_init+0x80>
 800cdf8:	f000 ffda 	bl	800ddb0 <lv_theme_material_init+0x1034>
 800cdfc:	48cc      	ldr	r0, [pc, #816]	; (800d130 <lv_theme_material_init+0x3b4>)
 800cdfe:	f7ff ffb1 	bl	800cd64 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
 800ce02:	49cc      	ldr	r1, [pc, #816]	; (800d134 <lv_theme_material_init+0x3b8>)
 800ce04:	1c02      	adds	r2, r0, #0
 800ce06:	0030      	movs	r0, r6
 800ce08:	f7f9 fba7 	bl	800655a <_lv_style_set_color>
    lv_style_set_value_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 800ce0c:	6a2b      	ldr	r3, [r5, #32]
 800ce0e:	6826      	ldr	r6, [r4, #0]
 800ce10:	079b      	lsls	r3, r3, #30
 800ce12:	d401      	bmi.n	800ce18 <lv_theme_material_init+0x9c>
 800ce14:	f000 ffcf 	bl	800ddb6 <lv_theme_material_init+0x103a>
 800ce18:	48c5      	ldr	r0, [pc, #788]	; (800d130 <lv_theme_material_init+0x3b4>)
 800ce1a:	f7ff ffa3 	bl	800cd64 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color)
 800ce1e:	2179      	movs	r1, #121	; 0x79
 800ce20:	1c02      	adds	r2, r0, #0
 800ce22:	0030      	movs	r0, r6
 800ce24:	f7f9 fb99 	bl	800655a <_lv_style_set_color>
    lv_style_set_text_sel_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 800ce28:	6a2b      	ldr	r3, [r5, #32]
 800ce2a:	6826      	ldr	r6, [r4, #0]
 800ce2c:	079b      	lsls	r3, r3, #30
 800ce2e:	d401      	bmi.n	800ce34 <lv_theme_material_init+0xb8>
 800ce30:	f000 ffe0 	bl	800ddf4 <lv_theme_material_init+0x1078>
 800ce34:	48be      	ldr	r0, [pc, #760]	; (800d130 <lv_theme_material_init+0x3b4>)
 800ce36:	f7ff ff95 	bl	800cd64 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color)
 800ce3a:	49bf      	ldr	r1, [pc, #764]	; (800d138 <lv_theme_material_init+0x3bc>)
 800ce3c:	1c02      	adds	r2, r0, #0
 800ce3e:	0030      	movs	r0, r6
 800ce40:	f7f9 fb8b 	bl	800655a <_lv_style_set_color>
 800ce44:	89aa      	ldrh	r2, [r5, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color)
 800ce46:	49bd      	ldr	r1, [pc, #756]	; (800d13c <lv_theme_material_init+0x3c0>)
 800ce48:	6820      	ldr	r0, [r4, #0]
 800ce4a:	f7f9 fb86 	bl	800655a <_lv_style_set_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr)
 800ce4e:	696a      	ldr	r2, [r5, #20]
 800ce50:	217e      	movs	r1, #126	; 0x7e
 800ce52:	6820      	ldr	r0, [r4, #0]
 800ce54:	f7f9 fc0b 	bl	800666e <_lv_style_set_ptr>
    lv_style_reset(&styles->bg);
 800ce58:	6823      	ldr	r3, [r4, #0]
 800ce5a:	1d18      	adds	r0, r3, #4
 800ce5c:	f7f9 fb04 	bl	8006468 <lv_style_reset>
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
 800ce60:	6823      	ldr	r3, [r4, #0]
 800ce62:	2000      	movs	r0, #0
 800ce64:	1d1e      	adds	r6, r3, #4
 800ce66:	f7fe fab7 	bl	800b3d8 <lv_disp_get_dpi>
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	281d      	cmp	r0, #29
 800ce6e:	dd07      	ble.n	800ce80 <lv_theme_material_init+0x104>
 800ce70:	2000      	movs	r0, #0
 800ce72:	f7fe fab1 	bl	800b3d8 <lv_disp_get_dpi>
 800ce76:	2114      	movs	r1, #20
 800ce78:	300a      	adds	r0, #10
 800ce7a:	f7f3 fa05 	bl	8000288 <__divsi3>
 800ce7e:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 800ce80:	0030      	movs	r0, r6
 800ce82:	2101      	movs	r1, #1
 800ce84:	f7f9 fb24 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_bg_opa(&styles->bg, LV_STATE_DEFAULT, LV_OPA_COVER);
 800ce88:	6823      	ldr	r3, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 800ce8a:	22ff      	movs	r2, #255	; 0xff
 800ce8c:	1d18      	adds	r0, r3, #4
 800ce8e:	212c      	movs	r1, #44	; 0x2c
 800ce90:	f7f9 fba8 	bl	80065e4 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG);
 800ce94:	6823      	ldr	r3, [r4, #0]
 800ce96:	1d1e      	adds	r6, r3, #4
 800ce98:	6a2b      	ldr	r3, [r5, #32]
 800ce9a:	079b      	lsls	r3, r3, #30
 800ce9c:	d401      	bmi.n	800cea2 <lv_theme_material_init+0x126>
 800ce9e:	f000 ffac 	bl	800ddfa <lv_theme_material_init+0x107e>
 800cea2:	48a7      	ldr	r0, [pc, #668]	; (800d140 <lv_theme_material_init+0x3c4>)
 800cea4:	f7ff ff5e 	bl	800cd64 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 800cea8:	2129      	movs	r1, #41	; 0x29
 800ceaa:	1c02      	adds	r2, r0, #0
 800ceac:	0030      	movs	r0, r6
 800ceae:	f7f9 fb54 	bl	800655a <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
 800ceb2:	6823      	ldr	r3, [r4, #0]
 800ceb4:	1d1e      	adds	r6, r3, #4
 800ceb6:	6a2b      	ldr	r3, [r5, #32]
 800ceb8:	079b      	lsls	r3, r3, #30
 800ceba:	d401      	bmi.n	800cec0 <lv_theme_material_init+0x144>
 800cebc:	f000 ffa0 	bl	800de00 <lv_theme_material_init+0x1084>
 800cec0:	48a0      	ldr	r0, [pc, #640]	; (800d144 <lv_theme_material_init+0x3c8>)
 800cec2:	f7ff ff4f 	bl	800cd64 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color)
 800cec6:	2139      	movs	r1, #57	; 0x39
 800cec8:	1c02      	adds	r2, r0, #0
 800ceca:	0030      	movs	r0, r6
 800cecc:	f7f9 fb45 	bl	800655a <_lv_style_set_color>
    if((theme.flags & LV_THEME_MATERIAL_FLAG_NO_FOCUS) == 0)lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED,
 800ced0:	6a2b      	ldr	r3, [r5, #32]
 800ced2:	069b      	lsls	r3, r3, #26
 800ced4:	d405      	bmi.n	800cee2 <lv_theme_material_init+0x166>
 800ced6:	6823      	ldr	r3, [r4, #0]
 800ced8:	89aa      	ldrh	r2, [r5, #12]
 800ceda:	1d18      	adds	r0, r3, #4
 800cedc:	499a      	ldr	r1, [pc, #616]	; (800d148 <lv_theme_material_init+0x3cc>)
 800cede:	f7f9 fb3c 	bl	800655a <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg, LV_STATE_EDITED, theme.color_secondary);
 800cee2:	6823      	ldr	r3, [r4, #0]
 800cee4:	89ea      	ldrh	r2, [r5, #14]
 800cee6:	1d18      	adds	r0, r3, #4
 800cee8:	4998      	ldr	r1, [pc, #608]	; (800d14c <lv_theme_material_init+0x3d0>)
 800ceea:	f7f9 fb36 	bl	800655a <_lv_style_set_color>
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
 800ceee:	6823      	ldr	r3, [r4, #0]
 800cef0:	2000      	movs	r0, #0
 800cef2:	1d1e      	adds	r6, r3, #4
 800cef4:	f7fe fa70 	bl	800b3d8 <lv_disp_get_dpi>
 800cef8:	2201      	movs	r2, #1
 800cefa:	2877      	cmp	r0, #119	; 0x77
 800cefc:	dd07      	ble.n	800cf0e <lv_theme_material_init+0x192>
 800cefe:	2000      	movs	r0, #0
 800cf00:	f7fe fa6a 	bl	800b3d8 <lv_disp_get_dpi>
 800cf04:	2150      	movs	r1, #80	; 0x50
 800cf06:	3028      	adds	r0, #40	; 0x28
 800cf08:	f7f3 f9be 	bl	8000288 <__divsi3>
 800cf0c:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int)
 800cf0e:	0030      	movs	r0, r6
 800cf10:	2130      	movs	r1, #48	; 0x30
 800cf12:	f7f9 fadd 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_border_post(&styles->bg, LV_STATE_DEFAULT, true);
 800cf16:	6823      	ldr	r3, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int)
 800cf18:	2201      	movs	r2, #1
 800cf1a:	1d18      	adds	r0, r3, #4
 800cf1c:	2133      	movs	r1, #51	; 0x33
 800cf1e:	f7f9 fad7 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_text_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 800cf22:	6823      	ldr	r3, [r4, #0]
 800cf24:	1d1e      	adds	r6, r3, #4
 800cf26:	6a2b      	ldr	r3, [r5, #32]
 800cf28:	079b      	lsls	r3, r3, #30
 800cf2a:	d401      	bmi.n	800cf30 <lv_theme_material_init+0x1b4>
 800cf2c:	f000 ff6b 	bl	800de06 <lv_theme_material_init+0x108a>
 800cf30:	487f      	ldr	r0, [pc, #508]	; (800d130 <lv_theme_material_init+0x3b4>)
 800cf32:	f7ff ff17 	bl	800cd64 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
 800cf36:	497f      	ldr	r1, [pc, #508]	; (800d134 <lv_theme_material_init+0x3b8>)
 800cf38:	1c02      	adds	r2, r0, #0
 800cf3a:	0030      	movs	r0, r6
 800cf3c:	f7f9 fb0d 	bl	800655a <_lv_style_set_color>
    lv_style_set_value_font(&styles->bg, LV_STATE_DEFAULT, theme.font_normal);
 800cf40:	6823      	ldr	r3, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr)
 800cf42:	696a      	ldr	r2, [r5, #20]
 800cf44:	1d18      	adds	r0, r3, #4
 800cf46:	217e      	movs	r1, #126	; 0x7e
 800cf48:	f7f9 fb91 	bl	800666e <_lv_style_set_ptr>
    lv_style_set_value_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 800cf4c:	6823      	ldr	r3, [r4, #0]
 800cf4e:	1d1e      	adds	r6, r3, #4
 800cf50:	6a2b      	ldr	r3, [r5, #32]
 800cf52:	079b      	lsls	r3, r3, #30
 800cf54:	d401      	bmi.n	800cf5a <lv_theme_material_init+0x1de>
 800cf56:	f000 ff59 	bl	800de0c <lv_theme_material_init+0x1090>
 800cf5a:	4875      	ldr	r0, [pc, #468]	; (800d130 <lv_theme_material_init+0x3b4>)
 800cf5c:	f7ff ff02 	bl	800cd64 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color)
 800cf60:	2179      	movs	r1, #121	; 0x79
 800cf62:	1c02      	adds	r2, r0, #0
 800cf64:	0030      	movs	r0, r6
 800cf66:	f7f9 faf8 	bl	800655a <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 800cf6a:	6823      	ldr	r3, [r4, #0]
 800cf6c:	1d1e      	adds	r6, r3, #4
 800cf6e:	6a2b      	ldr	r3, [r5, #32]
 800cf70:	079b      	lsls	r3, r3, #30
 800cf72:	d401      	bmi.n	800cf78 <lv_theme_material_init+0x1fc>
 800cf74:	f000 ff4d 	bl	800de12 <lv_theme_material_init+0x1096>
 800cf78:	486d      	ldr	r0, [pc, #436]	; (800d130 <lv_theme_material_init+0x3b4>)
 800cf7a:	f7ff fef3 	bl	800cd64 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color)
 800cf7e:	4974      	ldr	r1, [pc, #464]	; (800d150 <lv_theme_material_init+0x3d4>)
 800cf80:	1c02      	adds	r2, r0, #0
 800cf82:	0030      	movs	r0, r6
 800cf84:	f7f9 fae9 	bl	800655a <_lv_style_set_color>
    lv_style_set_line_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 800cf88:	6823      	ldr	r3, [r4, #0]
 800cf8a:	1d1e      	adds	r6, r3, #4
 800cf8c:	6a2b      	ldr	r3, [r5, #32]
 800cf8e:	079b      	lsls	r3, r3, #30
 800cf90:	d401      	bmi.n	800cf96 <lv_theme_material_init+0x21a>
 800cf92:	f000 ff41 	bl	800de18 <lv_theme_material_init+0x109c>
 800cf96:	4866      	ldr	r0, [pc, #408]	; (800d130 <lv_theme_material_init+0x3b4>)
 800cf98:	f7ff fee4 	bl	800cd64 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color)
 800cf9c:	2199      	movs	r1, #153	; 0x99
 800cf9e:	1c02      	adds	r2, r0, #0
 800cfa0:	0030      	movs	r0, r6
 800cfa2:	f7f9 fada 	bl	800655a <_lv_style_set_color>
    lv_style_set_line_width(&styles->bg, LV_STATE_DEFAULT, 1);
 800cfa6:	6823      	ldr	r3, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int)
 800cfa8:	2201      	movs	r2, #1
 800cfaa:	1d18      	adds	r0, r3, #4
 800cfac:	2190      	movs	r1, #144	; 0x90
 800cfae:	f7f9 fa8f 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 800cfb2:	6823      	ldr	r3, [r4, #0]
 800cfb4:	2000      	movs	r0, #0
 800cfb6:	1d1f      	adds	r7, r3, #4
 800cfb8:	f7fe fa1c 	bl	800b3f4 <lv_disp_get_size_category>
 800cfbc:	2801      	cmp	r0, #1
 800cfbe:	d901      	bls.n	800cfc4 <lv_theme_material_init+0x248>
 800cfc0:	f000 ff2d 	bl	800de1e <lv_theme_material_init+0x10a2>
 800cfc4:	2000      	movs	r0, #0
 800cfc6:	f7fe fa07 	bl	800b3d8 <lv_disp_get_dpi>
 800cfca:	260f      	movs	r6, #15
 800cfcc:	4370      	muls	r0, r6
 800cfce:	28ef      	cmp	r0, #239	; 0xef
 800cfd0:	dd01      	ble.n	800cfd6 <lv_theme_material_init+0x25a>
 800cfd2:	f000 ff2a 	bl	800de2a <lv_theme_material_init+0x10ae>
 800cfd6:	2601      	movs	r6, #1
 800cfd8:	2000      	movs	r0, #0
 800cfda:	f7fe f9fd 	bl	800b3d8 <lv_disp_get_dpi>
 800cfde:	2201      	movs	r2, #1
 800cfe0:	2877      	cmp	r0, #119	; 0x77
 800cfe2:	dd07      	ble.n	800cff4 <lv_theme_material_init+0x278>
 800cfe4:	2000      	movs	r0, #0
 800cfe6:	f7fe f9f7 	bl	800b3d8 <lv_disp_get_dpi>
 800cfea:	2150      	movs	r1, #80	; 0x50
 800cfec:	3028      	adds	r0, #40	; 0x28
 800cfee:	f7f3 f94b 	bl	8000288 <__divsi3>
 800cff2:	b282      	uxth	r2, r0
 800cff4:	18b2      	adds	r2, r6, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 800cff6:	0038      	movs	r0, r7
 800cff8:	b212      	sxth	r2, r2
 800cffa:	2112      	movs	r1, #18
 800cffc:	f7f9 fa68 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 800d000:	6823      	ldr	r3, [r4, #0]
 800d002:	2000      	movs	r0, #0
 800d004:	1d1f      	adds	r7, r3, #4
 800d006:	f7fe f9f5 	bl	800b3f4 <lv_disp_get_size_category>
 800d00a:	2801      	cmp	r0, #1
 800d00c:	d901      	bls.n	800d012 <lv_theme_material_init+0x296>
 800d00e:	f000 ff17 	bl	800de40 <lv_theme_material_init+0x10c4>
 800d012:	2000      	movs	r0, #0
 800d014:	f7fe f9e0 	bl	800b3d8 <lv_disp_get_dpi>
 800d018:	260f      	movs	r6, #15
 800d01a:	4370      	muls	r0, r6
 800d01c:	28ef      	cmp	r0, #239	; 0xef
 800d01e:	dd01      	ble.n	800d024 <lv_theme_material_init+0x2a8>
 800d020:	f000 ff14 	bl	800de4c <lv_theme_material_init+0x10d0>
 800d024:	2601      	movs	r6, #1
 800d026:	2000      	movs	r0, #0
 800d028:	f7fe f9d6 	bl	800b3d8 <lv_disp_get_dpi>
 800d02c:	2201      	movs	r2, #1
 800d02e:	2877      	cmp	r0, #119	; 0x77
 800d030:	dd07      	ble.n	800d042 <lv_theme_material_init+0x2c6>
 800d032:	2000      	movs	r0, #0
 800d034:	f7fe f9d0 	bl	800b3d8 <lv_disp_get_dpi>
 800d038:	2150      	movs	r1, #80	; 0x50
 800d03a:	3028      	adds	r0, #40	; 0x28
 800d03c:	f7f3 f924 	bl	8000288 <__divsi3>
 800d040:	b282      	uxth	r2, r0
 800d042:	18b2      	adds	r2, r6, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 800d044:	0038      	movs	r0, r7
 800d046:	b212      	sxth	r2, r2
 800d048:	2113      	movs	r1, #19
 800d04a:	f7f9 fa41 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 800d04e:	6823      	ldr	r3, [r4, #0]
 800d050:	2000      	movs	r0, #0
 800d052:	1d1f      	adds	r7, r3, #4
 800d054:	f7fe f9ce 	bl	800b3f4 <lv_disp_get_size_category>
 800d058:	2801      	cmp	r0, #1
 800d05a:	d901      	bls.n	800d060 <lv_theme_material_init+0x2e4>
 800d05c:	f000 ff01 	bl	800de62 <lv_theme_material_init+0x10e6>
 800d060:	2000      	movs	r0, #0
 800d062:	f7fe f9b9 	bl	800b3d8 <lv_disp_get_dpi>
 800d066:	260f      	movs	r6, #15
 800d068:	4370      	muls	r0, r6
 800d06a:	28ef      	cmp	r0, #239	; 0xef
 800d06c:	dd01      	ble.n	800d072 <lv_theme_material_init+0x2f6>
 800d06e:	f000 fefe 	bl	800de6e <lv_theme_material_init+0x10f2>
 800d072:	2601      	movs	r6, #1
 800d074:	2000      	movs	r0, #0
 800d076:	f7fe f9af 	bl	800b3d8 <lv_disp_get_dpi>
 800d07a:	2201      	movs	r2, #1
 800d07c:	2877      	cmp	r0, #119	; 0x77
 800d07e:	dd07      	ble.n	800d090 <lv_theme_material_init+0x314>
 800d080:	2000      	movs	r0, #0
 800d082:	f7fe f9a9 	bl	800b3d8 <lv_disp_get_dpi>
 800d086:	2150      	movs	r1, #80	; 0x50
 800d088:	3028      	adds	r0, #40	; 0x28
 800d08a:	f7f3 f8fd 	bl	8000288 <__divsi3>
 800d08e:	b282      	uxth	r2, r0
 800d090:	18b2      	adds	r2, r6, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 800d092:	0038      	movs	r0, r7
 800d094:	b212      	sxth	r2, r2
 800d096:	2110      	movs	r1, #16
 800d098:	f7f9 fa1a 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 800d09c:	6823      	ldr	r3, [r4, #0]
 800d09e:	2000      	movs	r0, #0
 800d0a0:	1d1f      	adds	r7, r3, #4
 800d0a2:	f7fe f9a7 	bl	800b3f4 <lv_disp_get_size_category>
 800d0a6:	2801      	cmp	r0, #1
 800d0a8:	d901      	bls.n	800d0ae <lv_theme_material_init+0x332>
 800d0aa:	f000 feeb 	bl	800de84 <lv_theme_material_init+0x1108>
 800d0ae:	2000      	movs	r0, #0
 800d0b0:	f7fe f992 	bl	800b3d8 <lv_disp_get_dpi>
 800d0b4:	260f      	movs	r6, #15
 800d0b6:	4370      	muls	r0, r6
 800d0b8:	28ef      	cmp	r0, #239	; 0xef
 800d0ba:	dd01      	ble.n	800d0c0 <lv_theme_material_init+0x344>
 800d0bc:	f000 fee8 	bl	800de90 <lv_theme_material_init+0x1114>
 800d0c0:	2601      	movs	r6, #1
 800d0c2:	2000      	movs	r0, #0
 800d0c4:	f7fe f988 	bl	800b3d8 <lv_disp_get_dpi>
 800d0c8:	2201      	movs	r2, #1
 800d0ca:	2877      	cmp	r0, #119	; 0x77
 800d0cc:	dd07      	ble.n	800d0de <lv_theme_material_init+0x362>
 800d0ce:	2000      	movs	r0, #0
 800d0d0:	f7fe f982 	bl	800b3d8 <lv_disp_get_dpi>
 800d0d4:	2150      	movs	r1, #80	; 0x50
 800d0d6:	3028      	adds	r0, #40	; 0x28
 800d0d8:	f7f3 f8d6 	bl	8000288 <__divsi3>
 800d0dc:	b282      	uxth	r2, r0
 800d0de:	18b2      	adds	r2, r6, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 800d0e0:	0038      	movs	r0, r7
 800d0e2:	b212      	sxth	r2, r2
 800d0e4:	2111      	movs	r1, #17
 800d0e6:	f7f9 f9f3 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
 800d0ea:	6823      	ldr	r3, [r4, #0]
 800d0ec:	2000      	movs	r0, #0
 800d0ee:	1d1e      	adds	r6, r3, #4
 800d0f0:	f7fe f980 	bl	800b3f4 <lv_disp_get_size_category>
 800d0f4:	2801      	cmp	r0, #1
 800d0f6:	d901      	bls.n	800d0fc <lv_theme_material_init+0x380>
 800d0f8:	f000 fed5 	bl	800dea6 <lv_theme_material_init+0x112a>
 800d0fc:	2000      	movs	r0, #0
 800d0fe:	f7fe f96b 	bl	800b3d8 <lv_disp_get_dpi>
 800d102:	270f      	movs	r7, #15
 800d104:	4378      	muls	r0, r7
 800d106:	2201      	movs	r2, #1
 800d108:	28ef      	cmp	r0, #239	; 0xef
 800d10a:	dd23      	ble.n	800d154 <lv_theme_material_init+0x3d8>
 800d10c:	2000      	movs	r0, #0
 800d10e:	f7fe f963 	bl	800b3d8 <lv_disp_get_dpi>
 800d112:	4378      	muls	r0, r7
 800d114:	21a0      	movs	r1, #160	; 0xa0
 800d116:	3050      	adds	r0, #80	; 0x50
 800d118:	f7f3 f8b6 	bl	8000288 <__divsi3>
 800d11c:	b202      	sxth	r2, r0
 800d11e:	e019      	b.n	800d154 <lv_theme_material_init+0x3d8>
 800d120:	20006e9c 	.word	0x20006e9c
 800d124:	200071a0 	.word	0x200071a0
 800d128:	20006ea0 	.word	0x20006ea0
 800d12c:	00eaeff3 	.word	0x00eaeff3
 800d130:	003b3e42 	.word	0x003b3e42
 800d134:	00008089 	.word	0x00008089
 800d138:	0000808a 	.word	0x0000808a
 800d13c:	0000808b 	.word	0x0000808b
 800d140:	00ffffff 	.word	0x00ffffff
 800d144:	00d6dde3 	.word	0x00d6dde3
 800d148:	00000239 	.word	0x00000239
 800d14c:	00000439 	.word	0x00000439
 800d150:	000080a9 	.word	0x000080a9
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 800d154:	0030      	movs	r0, r6
 800d156:	2114      	movs	r1, #20
 800d158:	f7f9 f9ba 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_transition_time(&styles->bg, LV_STATE_DEFAULT, TRANSITION_TIME);
 800d15c:	6823      	ldr	r3, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int)
 800d15e:	2200      	movs	r2, #0
 800d160:	1d18      	adds	r0, r3, #4
 800d162:	21b0      	movs	r1, #176	; 0xb0
 800d164:	f7f9 f9b4 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_transition_prop_6(&styles->bg, LV_STATE_DEFAULT, LV_STYLE_BORDER_COLOR);
 800d168:	6823      	ldr	r3, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int)
 800d16a:	2239      	movs	r2, #57	; 0x39
 800d16c:	1d18      	adds	r0, r3, #4
 800d16e:	21b7      	movs	r1, #183	; 0xb7
 800d170:	f7f9 f9ae 	bl	80064d0 <_lv_style_set_int>
    lv_style_reset(&styles->bg_sec);
 800d174:	6820      	ldr	r0, [r4, #0]
 800d176:	300c      	adds	r0, #12
 800d178:	f7f9 f976 	bl	8006468 <lv_style_reset>
    lv_style_copy(&styles->bg_sec, &styles->bg);
 800d17c:	6820      	ldr	r0, [r4, #0]
 800d17e:	1d01      	adds	r1, r0, #4
 800d180:	300c      	adds	r0, #12
 800d182:	f7f9 f993 	bl	80064ac <lv_style_copy>
    lv_style_set_bg_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC);
 800d186:	6826      	ldr	r6, [r4, #0]
 800d188:	6a2b      	ldr	r3, [r5, #32]
 800d18a:	360c      	adds	r6, #12
 800d18c:	079b      	lsls	r3, r3, #30
 800d18e:	d401      	bmi.n	800d194 <lv_theme_material_init+0x418>
 800d190:	f000 fe8f 	bl	800deb2 <lv_theme_material_init+0x1136>
 800d194:	48f9      	ldr	r0, [pc, #996]	; (800d57c <lv_theme_material_init+0x800>)
 800d196:	f7ff fde5 	bl	800cd64 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 800d19a:	2129      	movs	r1, #41	; 0x29
 800d19c:	1c02      	adds	r2, r0, #0
 800d19e:	0030      	movs	r0, r6
 800d1a0:	f7f9 f9db 	bl	800655a <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_BORDER);
 800d1a4:	6826      	ldr	r6, [r4, #0]
 800d1a6:	6a2b      	ldr	r3, [r5, #32]
 800d1a8:	360c      	adds	r6, #12
 800d1aa:	079b      	lsls	r3, r3, #30
 800d1ac:	d401      	bmi.n	800d1b2 <lv_theme_material_init+0x436>
 800d1ae:	f000 fe83 	bl	800deb8 <lv_theme_material_init+0x113c>
 800d1b2:	48f3      	ldr	r0, [pc, #972]	; (800d580 <lv_theme_material_init+0x804>)
 800d1b4:	f7ff fdd6 	bl	800cd64 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color)
 800d1b8:	2139      	movs	r1, #57	; 0x39
 800d1ba:	1c02      	adds	r2, r0, #0
 800d1bc:	0030      	movs	r0, r6
 800d1be:	f7f9 f9cc 	bl	800655a <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 800d1c2:	6826      	ldr	r6, [r4, #0]
 800d1c4:	6a2b      	ldr	r3, [r5, #32]
 800d1c6:	360c      	adds	r6, #12
 800d1c8:	079b      	lsls	r3, r3, #30
 800d1ca:	d401      	bmi.n	800d1d0 <lv_theme_material_init+0x454>
 800d1cc:	f000 fe77 	bl	800debe <lv_theme_material_init+0x1142>
 800d1d0:	48ec      	ldr	r0, [pc, #944]	; (800d584 <lv_theme_material_init+0x808>)
 800d1d2:	f7ff fdc7 	bl	800cd64 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
 800d1d6:	49ec      	ldr	r1, [pc, #944]	; (800d588 <lv_theme_material_init+0x80c>)
 800d1d8:	1c02      	adds	r2, r0, #0
 800d1da:	0030      	movs	r0, r6
 800d1dc:	f7f9 f9bd 	bl	800655a <_lv_style_set_color>
    lv_style_set_value_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 800d1e0:	6826      	ldr	r6, [r4, #0]
 800d1e2:	6a2b      	ldr	r3, [r5, #32]
 800d1e4:	360c      	adds	r6, #12
 800d1e6:	079b      	lsls	r3, r3, #30
 800d1e8:	d401      	bmi.n	800d1ee <lv_theme_material_init+0x472>
 800d1ea:	f000 fe6b 	bl	800dec4 <lv_theme_material_init+0x1148>
 800d1ee:	48e5      	ldr	r0, [pc, #916]	; (800d584 <lv_theme_material_init+0x808>)
 800d1f0:	f7ff fdb8 	bl	800cd64 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color)
 800d1f4:	2179      	movs	r1, #121	; 0x79
 800d1f6:	1c02      	adds	r2, r0, #0
 800d1f8:	0030      	movs	r0, r6
 800d1fa:	f7f9 f9ae 	bl	800655a <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 800d1fe:	6826      	ldr	r6, [r4, #0]
 800d200:	6a2b      	ldr	r3, [r5, #32]
 800d202:	360c      	adds	r6, #12
 800d204:	079b      	lsls	r3, r3, #30
 800d206:	d401      	bmi.n	800d20c <lv_theme_material_init+0x490>
 800d208:	f000 fe5f 	bl	800deca <lv_theme_material_init+0x114e>
 800d20c:	48dd      	ldr	r0, [pc, #884]	; (800d584 <lv_theme_material_init+0x808>)
 800d20e:	f7ff fda9 	bl	800cd64 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color)
 800d212:	49de      	ldr	r1, [pc, #888]	; (800d58c <lv_theme_material_init+0x810>)
 800d214:	1c02      	adds	r2, r0, #0
 800d216:	0030      	movs	r0, r6
 800d218:	f7f9 f99f 	bl	800655a <_lv_style_set_color>
    lv_style_set_line_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 800d21c:	6826      	ldr	r6, [r4, #0]
 800d21e:	6a2b      	ldr	r3, [r5, #32]
 800d220:	360c      	adds	r6, #12
 800d222:	079b      	lsls	r3, r3, #30
 800d224:	d401      	bmi.n	800d22a <lv_theme_material_init+0x4ae>
 800d226:	f000 fe53 	bl	800ded0 <lv_theme_material_init+0x1154>
 800d22a:	48d6      	ldr	r0, [pc, #856]	; (800d584 <lv_theme_material_init+0x808>)
 800d22c:	f7ff fd9a 	bl	800cd64 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color)
 800d230:	2199      	movs	r1, #153	; 0x99
 800d232:	1c02      	adds	r2, r0, #0
 800d234:	0030      	movs	r0, r6
 800d236:	f7f9 f990 	bl	800655a <_lv_style_set_color>
    lv_style_reset(&styles->bg_click);
 800d23a:	6820      	ldr	r0, [r4, #0]
 800d23c:	3008      	adds	r0, #8
 800d23e:	f7f9 f913 	bl	8006468 <lv_style_reset>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_PR);
 800d242:	6826      	ldr	r6, [r4, #0]
 800d244:	6a2b      	ldr	r3, [r5, #32]
 800d246:	3608      	adds	r6, #8
 800d248:	079b      	lsls	r3, r3, #30
 800d24a:	d401      	bmi.n	800d250 <lv_theme_material_init+0x4d4>
 800d24c:	f000 fe43 	bl	800ded6 <lv_theme_material_init+0x115a>
 800d250:	48cf      	ldr	r0, [pc, #828]	; (800d590 <lv_theme_material_init+0x814>)
 800d252:	f7ff fd87 	bl	800cd64 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 800d256:	49cf      	ldr	r1, [pc, #828]	; (800d594 <lv_theme_material_init+0x818>)
 800d258:	1c02      	adds	r2, r0, #0
 800d25a:	0030      	movs	r0, r6
 800d25c:	f7f9 f97d 	bl	800655a <_lv_style_set_color>
 800d260:	212a      	movs	r1, #42	; 0x2a
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_CHK);
 800d262:	6820      	ldr	r0, [r4, #0]
 800d264:	89aa      	ldrh	r2, [r5, #12]
 800d266:	3008      	adds	r0, #8
 800d268:	31ff      	adds	r1, #255	; 0xff
 800d26a:	f7f9 f976 	bl	800655a <_lv_style_set_color>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_PR_CHK);
 800d26e:	2133      	movs	r1, #51	; 0x33
 800d270:	89a8      	ldrh	r0, [r5, #12]
 800d272:	6826      	ldr	r6, [r4, #0]
 800d274:	f7fe fc75 	bl	800bb62 <lv_color_darken>
 800d278:	3608      	adds	r6, #8
 800d27a:	1c02      	adds	r2, r0, #0
 800d27c:	49c6      	ldr	r1, [pc, #792]	; (800d598 <lv_theme_material_init+0x81c>)
 800d27e:	0030      	movs	r0, r6
 800d280:	f7f9 f96b 	bl	800655a <_lv_style_set_color>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_DIS);
 800d284:	6824      	ldr	r4, [r4, #0]
 800d286:	6a2b      	ldr	r3, [r5, #32]
 800d288:	3408      	adds	r4, #8
 800d28a:	079b      	lsls	r3, r3, #30
 800d28c:	d401      	bmi.n	800d292 <lv_theme_material_init+0x516>
 800d28e:	f000 fe25 	bl	800dedc <lv_theme_material_init+0x1160>
 800d292:	48c2      	ldr	r0, [pc, #776]	; (800d59c <lv_theme_material_init+0x820>)
 800d294:	f7ff fd66 	bl	800cd64 <lv_color_hex>
 800d298:	49c1      	ldr	r1, [pc, #772]	; (800d5a0 <lv_theme_material_init+0x824>)
 800d29a:	1c02      	adds	r2, r0, #0
 800d29c:	0020      	movs	r0, r4
 800d29e:	f7f9 f95c 	bl	800655a <_lv_style_set_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int)
 800d2a2:	2198      	movs	r1, #152	; 0x98
    lv_style_set_border_width(&styles->bg_click, LV_STATE_CHECKED, 0);
 800d2a4:	4cbf      	ldr	r4, [pc, #764]	; (800d5a4 <lv_theme_material_init+0x828>)
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	6820      	ldr	r0, [r4, #0]
 800d2aa:	0049      	lsls	r1, r1, #1
 800d2ac:	3008      	adds	r0, #8
 800d2ae:	f7f9 f90f 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_FOCUSED | LV_STATE_PRESSED, lv_color_darken(theme.color_primary,
 800d2b2:	2133      	movs	r1, #51	; 0x33
 800d2b4:	89a8      	ldrh	r0, [r5, #12]
 800d2b6:	6826      	ldr	r6, [r4, #0]
 800d2b8:	f7fe fc53 	bl	800bb62 <lv_color_darken>
 800d2bc:	3608      	adds	r6, #8
 800d2be:	1c02      	adds	r2, r0, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color)
 800d2c0:	49b9      	ldr	r1, [pc, #740]	; (800d5a8 <lv_theme_material_init+0x82c>)
 800d2c2:	0030      	movs	r0, r6
 800d2c4:	f7f9 f949 	bl	800655a <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_BORDER_PR);
 800d2c8:	6826      	ldr	r6, [r4, #0]
 800d2ca:	6a2b      	ldr	r3, [r5, #32]
 800d2cc:	3608      	adds	r6, #8
 800d2ce:	079b      	lsls	r3, r3, #30
 800d2d0:	d401      	bmi.n	800d2d6 <lv_theme_material_init+0x55a>
 800d2d2:	f000 fe06 	bl	800dee2 <lv_theme_material_init+0x1166>
 800d2d6:	48b5      	ldr	r0, [pc, #724]	; (800d5ac <lv_theme_material_init+0x830>)
 800d2d8:	f7ff fc94 	bl	800cc04 <lv_color_hex3>
 800d2dc:	1c02      	adds	r2, r0, #0
 800d2de:	49b4      	ldr	r1, [pc, #720]	; (800d5b0 <lv_theme_material_init+0x834>)
 800d2e0:	0030      	movs	r0, r6
 800d2e2:	f7f9 f93a 	bl	800655a <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_BORDER_CHK);
 800d2e6:	4db3      	ldr	r5, [pc, #716]	; (800d5b4 <lv_theme_material_init+0x838>)
 800d2e8:	6826      	ldr	r6, [r4, #0]
 800d2ea:	6a2b      	ldr	r3, [r5, #32]
 800d2ec:	3608      	adds	r6, #8
 800d2ee:	079b      	lsls	r3, r3, #30
 800d2f0:	d401      	bmi.n	800d2f6 <lv_theme_material_init+0x57a>
 800d2f2:	f000 fdfb 	bl	800deec <lv_theme_material_init+0x1170>
 800d2f6:	48b0      	ldr	r0, [pc, #704]	; (800d5b8 <lv_theme_material_init+0x83c>)
 800d2f8:	f7ff fd34 	bl	800cd64 <lv_color_hex>
 800d2fc:	213a      	movs	r1, #58	; 0x3a
 800d2fe:	1c02      	adds	r2, r0, #0
 800d300:	31ff      	adds	r1, #255	; 0xff
 800d302:	0030      	movs	r0, r6
 800d304:	f7f9 f929 	bl	800655a <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_BORDER_CHK_PR);
 800d308:	6826      	ldr	r6, [r4, #0]
 800d30a:	6a2b      	ldr	r3, [r5, #32]
 800d30c:	3608      	adds	r6, #8
 800d30e:	079b      	lsls	r3, r3, #30
 800d310:	d401      	bmi.n	800d316 <lv_theme_material_init+0x59a>
 800d312:	f000 fdee 	bl	800def2 <lv_theme_material_init+0x1176>
 800d316:	48a8      	ldr	r0, [pc, #672]	; (800d5b8 <lv_theme_material_init+0x83c>)
 800d318:	f7ff fd24 	bl	800cd64 <lv_color_hex>
 800d31c:	49a7      	ldr	r1, [pc, #668]	; (800d5bc <lv_theme_material_init+0x840>)
 800d31e:	1c02      	adds	r2, r0, #0
 800d320:	0030      	movs	r0, r6
 800d322:	f7f9 f91a 	bl	800655a <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_BORDER_DIS);
 800d326:	6826      	ldr	r6, [r4, #0]
 800d328:	6a2b      	ldr	r3, [r5, #32]
 800d32a:	3608      	adds	r6, #8
 800d32c:	079b      	lsls	r3, r3, #30
 800d32e:	d401      	bmi.n	800d334 <lv_theme_material_init+0x5b8>
 800d330:	f000 fde2 	bl	800def8 <lv_theme_material_init+0x117c>
 800d334:	48a2      	ldr	r0, [pc, #648]	; (800d5c0 <lv_theme_material_init+0x844>)
 800d336:	f7ff fd15 	bl	800cd64 <lv_color_hex>
 800d33a:	49a2      	ldr	r1, [pc, #648]	; (800d5c4 <lv_theme_material_init+0x848>)
 800d33c:	1c02      	adds	r2, r0, #0
 800d33e:	0030      	movs	r0, r6
 800d340:	f7f9 f90b 	bl	800655a <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
 800d344:	6826      	ldr	r6, [r4, #0]
 800d346:	6a2b      	ldr	r3, [r5, #32]
 800d348:	3608      	adds	r6, #8
 800d34a:	079b      	lsls	r3, r3, #30
 800d34c:	d401      	bmi.n	800d352 <lv_theme_material_init+0x5d6>
 800d34e:	f000 fdd6 	bl	800defe <lv_theme_material_init+0x1182>
 800d352:	4899      	ldr	r0, [pc, #612]	; (800d5b8 <lv_theme_material_init+0x83c>)
 800d354:	f7ff fd06 	bl	800cd64 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
 800d358:	499b      	ldr	r1, [pc, #620]	; (800d5c8 <lv_theme_material_init+0x84c>)
 800d35a:	1c02      	adds	r2, r0, #0
 800d35c:	0030      	movs	r0, r6
 800d35e:	f7f9 f8fc 	bl	800655a <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
 800d362:	488e      	ldr	r0, [pc, #568]	; (800d59c <lv_theme_material_init+0x820>)
 800d364:	f7ff fcfe 	bl	800cd64 <lv_color_hex>
 800d368:	6826      	ldr	r6, [r4, #0]
 800d36a:	1c02      	adds	r2, r0, #0
 800d36c:	3608      	adds	r6, #8
 800d36e:	4997      	ldr	r1, [pc, #604]	; (800d5cc <lv_theme_material_init+0x850>)
 800d370:	0030      	movs	r0, r6
 800d372:	f7f9 f8f2 	bl	800655a <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
 800d376:	4889      	ldr	r0, [pc, #548]	; (800d59c <lv_theme_material_init+0x820>)
 800d378:	f7ff fcf4 	bl	800cd64 <lv_color_hex>
 800d37c:	6826      	ldr	r6, [r4, #0]
 800d37e:	1c02      	adds	r2, r0, #0
 800d380:	3608      	adds	r6, #8
 800d382:	0030      	movs	r0, r6
 800d384:	4992      	ldr	r1, [pc, #584]	; (800d5d0 <lv_theme_material_init+0x854>)
 800d386:	f7f9 f8e8 	bl	800655a <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
 800d38a:	6826      	ldr	r6, [r4, #0]
 800d38c:	6a2b      	ldr	r3, [r5, #32]
 800d38e:	3608      	adds	r6, #8
 800d390:	079b      	lsls	r3, r3, #30
 800d392:	d401      	bmi.n	800d398 <lv_theme_material_init+0x61c>
 800d394:	f000 fdb6 	bl	800df04 <lv_theme_material_init+0x1188>
 800d398:	488e      	ldr	r0, [pc, #568]	; (800d5d4 <lv_theme_material_init+0x858>)
 800d39a:	f7ff fc33 	bl	800cc04 <lv_color_hex3>
 800d39e:	498e      	ldr	r1, [pc, #568]	; (800d5d8 <lv_theme_material_init+0x85c>)
 800d3a0:	1c02      	adds	r2, r0, #0
 800d3a2:	0030      	movs	r0, r6
 800d3a4:	f7f9 f8d9 	bl	800655a <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
 800d3a8:	6826      	ldr	r6, [r4, #0]
 800d3aa:	6a2b      	ldr	r3, [r5, #32]
 800d3ac:	3608      	adds	r6, #8
 800d3ae:	079b      	lsls	r3, r3, #30
 800d3b0:	d401      	bmi.n	800d3b6 <lv_theme_material_init+0x63a>
 800d3b2:	f000 fdaa 	bl	800df0a <lv_theme_material_init+0x118e>
 800d3b6:	4880      	ldr	r0, [pc, #512]	; (800d5b8 <lv_theme_material_init+0x83c>)
 800d3b8:	f7ff fcd4 	bl	800cd64 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color)
 800d3bc:	4987      	ldr	r1, [pc, #540]	; (800d5dc <lv_theme_material_init+0x860>)
 800d3be:	1c02      	adds	r2, r0, #0
 800d3c0:	0030      	movs	r0, r6
 800d3c2:	f7f9 f8ca 	bl	800655a <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
 800d3c6:	4875      	ldr	r0, [pc, #468]	; (800d59c <lv_theme_material_init+0x820>)
 800d3c8:	f7ff fccc 	bl	800cd64 <lv_color_hex>
 800d3cc:	6826      	ldr	r6, [r4, #0]
 800d3ce:	1c02      	adds	r2, r0, #0
 800d3d0:	3608      	adds	r6, #8
 800d3d2:	4983      	ldr	r1, [pc, #524]	; (800d5e0 <lv_theme_material_init+0x864>)
 800d3d4:	0030      	movs	r0, r6
 800d3d6:	f7f9 f8c0 	bl	800655a <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
 800d3da:	4870      	ldr	r0, [pc, #448]	; (800d59c <lv_theme_material_init+0x820>)
 800d3dc:	f7ff fcc2 	bl	800cd64 <lv_color_hex>
 800d3e0:	6826      	ldr	r6, [r4, #0]
 800d3e2:	1c02      	adds	r2, r0, #0
 800d3e4:	3608      	adds	r6, #8
 800d3e6:	0030      	movs	r0, r6
 800d3e8:	497e      	ldr	r1, [pc, #504]	; (800d5e4 <lv_theme_material_init+0x868>)
 800d3ea:	f7f9 f8b6 	bl	800655a <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
 800d3ee:	6826      	ldr	r6, [r4, #0]
 800d3f0:	6a2b      	ldr	r3, [r5, #32]
 800d3f2:	3608      	adds	r6, #8
 800d3f4:	079b      	lsls	r3, r3, #30
 800d3f6:	d401      	bmi.n	800d3fc <lv_theme_material_init+0x680>
 800d3f8:	f000 fd8a 	bl	800df10 <lv_theme_material_init+0x1194>
 800d3fc:	4875      	ldr	r0, [pc, #468]	; (800d5d4 <lv_theme_material_init+0x858>)
 800d3fe:	f7ff fc01 	bl	800cc04 <lv_color_hex3>
 800d402:	4979      	ldr	r1, [pc, #484]	; (800d5e8 <lv_theme_material_init+0x86c>)
 800d404:	1c02      	adds	r2, r0, #0
 800d406:	0030      	movs	r0, r6
 800d408:	f7f9 f8a7 	bl	800655a <_lv_style_set_color>
    lv_style_set_transition_prop_5(&styles->bg_click, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
 800d40c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int)
 800d40e:	2229      	movs	r2, #41	; 0x29
 800d410:	21b6      	movs	r1, #182	; 0xb6
 800d412:	3008      	adds	r0, #8
 800d414:	f7f9 f85c 	bl	80064d0 <_lv_style_set_int>
    lv_style_reset(&styles->btn);
 800d418:	6820      	ldr	r0, [r4, #0]
 800d41a:	3010      	adds	r0, #16
 800d41c:	f7f9 f824 	bl	8006468 <lv_style_reset>
    lv_style_set_radius(&styles->btn, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 800d420:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 800d422:	4a72      	ldr	r2, [pc, #456]	; (800d5ec <lv_theme_material_init+0x870>)
 800d424:	3010      	adds	r0, #16
 800d426:	2101      	movs	r1, #1
 800d428:	f7f9 f852 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_bg_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_COVER);
 800d42c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 800d42e:	22ff      	movs	r2, #255	; 0xff
 800d430:	3010      	adds	r0, #16
 800d432:	212c      	movs	r1, #44	; 0x2c
 800d434:	f7f9 f8d6 	bl	80065e4 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN);
 800d438:	6826      	ldr	r6, [r4, #0]
 800d43a:	6a2b      	ldr	r3, [r5, #32]
 800d43c:	3610      	adds	r6, #16
 800d43e:	079b      	lsls	r3, r3, #30
 800d440:	d401      	bmi.n	800d446 <lv_theme_material_init+0x6ca>
 800d442:	f000 fd68 	bl	800df16 <lv_theme_material_init+0x119a>
 800d446:	4855      	ldr	r0, [pc, #340]	; (800d59c <lv_theme_material_init+0x820>)
 800d448:	f7ff fc8c 	bl	800cd64 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 800d44c:	2129      	movs	r1, #41	; 0x29
 800d44e:	1c02      	adds	r2, r0, #0
 800d450:	0030      	movs	r0, r6
 800d452:	f7f9 f882 	bl	800655a <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_PR);
 800d456:	6826      	ldr	r6, [r4, #0]
 800d458:	6a2b      	ldr	r3, [r5, #32]
 800d45a:	3610      	adds	r6, #16
 800d45c:	89af      	ldrh	r7, [r5, #12]
 800d45e:	079b      	lsls	r3, r3, #30
 800d460:	d401      	bmi.n	800d466 <lv_theme_material_init+0x6ea>
 800d462:	f000 fd5b 	bl	800df1c <lv_theme_material_init+0x11a0>
 800d466:	484d      	ldr	r0, [pc, #308]	; (800d59c <lv_theme_material_init+0x820>)
 800d468:	f7ff fc7c 	bl	800cd64 <lv_color_hex>
 800d46c:	2233      	movs	r2, #51	; 0x33
 800d46e:	1c01      	adds	r1, r0, #0
 800d470:	1c38      	adds	r0, r7, #0
 800d472:	f7ff fb97 	bl	800cba4 <lv_color_mix>
 800d476:	4947      	ldr	r1, [pc, #284]	; (800d594 <lv_theme_material_init+0x818>)
 800d478:	1c02      	adds	r2, r0, #0
 800d47a:	0030      	movs	r0, r6
 800d47c:	f7f9 f86d 	bl	800655a <_lv_style_set_color>
 800d480:	212a      	movs	r1, #42	; 0x2a
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED, COLOR_BTN_CHK);
 800d482:	6820      	ldr	r0, [r4, #0]
 800d484:	89aa      	ldrh	r2, [r5, #12]
 800d486:	3010      	adds	r0, #16
 800d488:	31ff      	adds	r1, #255	; 0xff
 800d48a:	f7f9 f866 	bl	800655a <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BTN_CHK_PR);
 800d48e:	214c      	movs	r1, #76	; 0x4c
 800d490:	89a8      	ldrh	r0, [r5, #12]
 800d492:	6826      	ldr	r6, [r4, #0]
 800d494:	f7fe fb65 	bl	800bb62 <lv_color_darken>
 800d498:	3610      	adds	r6, #16
 800d49a:	1c02      	adds	r2, r0, #0
 800d49c:	493e      	ldr	r1, [pc, #248]	; (800d598 <lv_theme_material_init+0x81c>)
 800d49e:	0030      	movs	r0, r6
 800d4a0:	f7f9 f85b 	bl	800655a <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN);
 800d4a4:	6826      	ldr	r6, [r4, #0]
 800d4a6:	6a2b      	ldr	r3, [r5, #32]
 800d4a8:	3610      	adds	r6, #16
 800d4aa:	079b      	lsls	r3, r3, #30
 800d4ac:	d401      	bmi.n	800d4b2 <lv_theme_material_init+0x736>
 800d4ae:	f000 fd3c 	bl	800df2a <lv_theme_material_init+0x11ae>
 800d4b2:	483a      	ldr	r0, [pc, #232]	; (800d59c <lv_theme_material_init+0x820>)
 800d4b4:	f7ff fc56 	bl	800cd64 <lv_color_hex>
 800d4b8:	4939      	ldr	r1, [pc, #228]	; (800d5a0 <lv_theme_material_init+0x824>)
 800d4ba:	1c02      	adds	r2, r0, #0
 800d4bc:	0030      	movs	r0, r6
 800d4be:	f7f9 f84c 	bl	800655a <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED | LV_STATE_CHECKED, COLOR_BTN_DIS);
 800d4c2:	6826      	ldr	r6, [r4, #0]
 800d4c4:	6a2b      	ldr	r3, [r5, #32]
 800d4c6:	3610      	adds	r6, #16
 800d4c8:	079b      	lsls	r3, r3, #30
 800d4ca:	d401      	bmi.n	800d4d0 <lv_theme_material_init+0x754>
 800d4cc:	f000 fd30 	bl	800df30 <lv_theme_material_init+0x11b4>
 800d4d0:	4836      	ldr	r0, [pc, #216]	; (800d5ac <lv_theme_material_init+0x830>)
 800d4d2:	f7ff fb97 	bl	800cc04 <lv_color_hex3>
 800d4d6:	4946      	ldr	r1, [pc, #280]	; (800d5f0 <lv_theme_material_init+0x874>)
 800d4d8:	1c02      	adds	r2, r0, #0
 800d4da:	0030      	movs	r0, r6
 800d4dc:	f7f9 f83d 	bl	800655a <_lv_style_set_color>
    lv_style_set_border_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN_BORDER);
 800d4e0:	6820      	ldr	r0, [r4, #0]
 800d4e2:	89aa      	ldrh	r2, [r5, #12]
 800d4e4:	3010      	adds	r0, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color)
 800d4e6:	2139      	movs	r1, #57	; 0x39
 800d4e8:	f7f9 f837 	bl	800655a <_lv_style_set_color>
    lv_style_set_border_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_BORDER_PR);
 800d4ec:	6820      	ldr	r0, [r4, #0]
 800d4ee:	89aa      	ldrh	r2, [r5, #12]
 800d4f0:	3010      	adds	r0, #16
 800d4f2:	492f      	ldr	r1, [pc, #188]	; (800d5b0 <lv_theme_material_init+0x834>)
 800d4f4:	f7f9 f831 	bl	800655a <_lv_style_set_color>
    lv_style_set_border_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN_BORDER_INA);
 800d4f8:	6826      	ldr	r6, [r4, #0]
 800d4fa:	6a2b      	ldr	r3, [r5, #32]
 800d4fc:	3610      	adds	r6, #16
 800d4fe:	079b      	lsls	r3, r3, #30
 800d500:	d401      	bmi.n	800d506 <lv_theme_material_init+0x78a>
 800d502:	f000 fd18 	bl	800df36 <lv_theme_material_init+0x11ba>
 800d506:	483b      	ldr	r0, [pc, #236]	; (800d5f4 <lv_theme_material_init+0x878>)
 800d508:	f7ff fb7c 	bl	800cc04 <lv_color_hex3>
 800d50c:	1c02      	adds	r2, r0, #0
 800d50e:	492d      	ldr	r1, [pc, #180]	; (800d5c4 <lv_theme_material_init+0x848>)
 800d510:	0030      	movs	r0, r6
 800d512:	f7f9 f822 	bl	800655a <_lv_style_set_color>
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
 800d516:	2000      	movs	r0, #0
 800d518:	6826      	ldr	r6, [r4, #0]
 800d51a:	f7fd ff5d 	bl	800b3d8 <lv_disp_get_dpi>
 800d51e:	3610      	adds	r6, #16
 800d520:	2201      	movs	r2, #1
 800d522:	2877      	cmp	r0, #119	; 0x77
 800d524:	dd07      	ble.n	800d536 <lv_theme_material_init+0x7ba>
 800d526:	2000      	movs	r0, #0
 800d528:	f7fd ff56 	bl	800b3d8 <lv_disp_get_dpi>
 800d52c:	2150      	movs	r1, #80	; 0x50
 800d52e:	3028      	adds	r0, #40	; 0x28
 800d530:	f7f2 feaa 	bl	8000288 <__divsi3>
 800d534:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int)
 800d536:	0030      	movs	r0, r6
 800d538:	2130      	movs	r1, #48	; 0x30
 800d53a:	f7f8 ffc9 	bl	80064d0 <_lv_style_set_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa)
 800d53e:	219e      	movs	r1, #158	; 0x9e
    lv_style_set_border_opa(&styles->btn, LV_STATE_CHECKED, LV_OPA_TRANSP);
 800d540:	6820      	ldr	r0, [r4, #0]
 800d542:	2200      	movs	r2, #0
 800d544:	3010      	adds	r0, #16
 800d546:	0049      	lsls	r1, r1, #1
 800d548:	f7f9 f84c 	bl	80065e4 <_lv_style_set_opa>
    lv_style_set_text_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 800d54c:	6826      	ldr	r6, [r4, #0]
 800d54e:	6a2b      	ldr	r3, [r5, #32]
 800d550:	3610      	adds	r6, #16
 800d552:	079b      	lsls	r3, r3, #30
 800d554:	d401      	bmi.n	800d55a <lv_theme_material_init+0x7de>
 800d556:	f000 fcf3 	bl	800df40 <lv_theme_material_init+0x11c4>
 800d55a:	480a      	ldr	r0, [pc, #40]	; (800d584 <lv_theme_material_init+0x808>)
 800d55c:	f7ff fc02 	bl	800cd64 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
 800d560:	4909      	ldr	r1, [pc, #36]	; (800d588 <lv_theme_material_init+0x80c>)
 800d562:	1c02      	adds	r2, r0, #0
 800d564:	0030      	movs	r0, r6
 800d566:	f7f8 fff8 	bl	800655a <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 800d56a:	6826      	ldr	r6, [r4, #0]
 800d56c:	6a2b      	ldr	r3, [r5, #32]
 800d56e:	3610      	adds	r6, #16
 800d570:	079b      	lsls	r3, r3, #30
 800d572:	d401      	bmi.n	800d578 <lv_theme_material_init+0x7fc>
 800d574:	f000 fce7 	bl	800df46 <lv_theme_material_init+0x11ca>
 800d578:	e03e      	b.n	800d5f8 <lv_theme_material_init+0x87c>
 800d57a:	46c0      	nop			; (mov r8, r8)
 800d57c:	00d4d7d9 	.word	0x00d4d7d9
 800d580:	00dfe7ed 	.word	0x00dfe7ed
 800d584:	0031404f 	.word	0x0031404f
 800d588:	00008089 	.word	0x00008089
 800d58c:	000080a9 	.word	0x000080a9
 800d590:	00eeeeee 	.word	0x00eeeeee
 800d594:	00001029 	.word	0x00001029
 800d598:	00001129 	.word	0x00001129
 800d59c:	00ffffff 	.word	0x00ffffff
 800d5a0:	00002029 	.word	0x00002029
 800d5a4:	20006e9c 	.word	0x20006e9c
 800d5a8:	00001239 	.word	0x00001239
 800d5ac:	00000ccc 	.word	0x00000ccc
 800d5b0:	00001039 	.word	0x00001039
 800d5b4:	20006ea0 	.word	0x20006ea0
 800d5b8:	003b3e42 	.word	0x003b3e42
 800d5bc:	00001139 	.word	0x00001139
 800d5c0:	00d6dde3 	.word	0x00d6dde3
 800d5c4:	00002039 	.word	0x00002039
 800d5c8:	00009089 	.word	0x00009089
 800d5cc:	00008189 	.word	0x00008189
 800d5d0:	00009189 	.word	0x00009189
 800d5d4:	00000aaa 	.word	0x00000aaa
 800d5d8:	0000a089 	.word	0x0000a089
 800d5dc:	000090a9 	.word	0x000090a9
 800d5e0:	000081a9 	.word	0x000081a9
 800d5e4:	000091a9 	.word	0x000091a9
 800d5e8:	0000a0a9 	.word	0x0000a0a9
 800d5ec:	00007fff 	.word	0x00007fff
 800d5f0:	00002129 	.word	0x00002129
 800d5f4:	00000888 	.word	0x00000888
 800d5f8:	48f2      	ldr	r0, [pc, #968]	; (800d9c4 <lv_theme_material_init+0xc48>)
 800d5fa:	f7ff fbb3 	bl	800cd64 <lv_color_hex>
 800d5fe:	49f2      	ldr	r1, [pc, #968]	; (800d9c8 <lv_theme_material_init+0xc4c>)
 800d600:	1c02      	adds	r2, r0, #0
 800d602:	0030      	movs	r0, r6
 800d604:	f7f8 ffa9 	bl	800655a <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
 800d608:	48f0      	ldr	r0, [pc, #960]	; (800d9cc <lv_theme_material_init+0xc50>)
 800d60a:	f7ff fbab 	bl	800cd64 <lv_color_hex>
 800d60e:	6826      	ldr	r6, [r4, #0]
 800d610:	1c02      	adds	r2, r0, #0
 800d612:	3610      	adds	r6, #16
 800d614:	49ee      	ldr	r1, [pc, #952]	; (800d9d0 <lv_theme_material_init+0xc54>)
 800d616:	0030      	movs	r0, r6
 800d618:	f7f8 ff9f 	bl	800655a <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
 800d61c:	48eb      	ldr	r0, [pc, #940]	; (800d9cc <lv_theme_material_init+0xc50>)
 800d61e:	f7ff fba1 	bl	800cd64 <lv_color_hex>
 800d622:	6826      	ldr	r6, [r4, #0]
 800d624:	1c02      	adds	r2, r0, #0
 800d626:	3610      	adds	r6, #16
 800d628:	49ea      	ldr	r1, [pc, #936]	; (800d9d4 <lv_theme_material_init+0xc58>)
 800d62a:	0030      	movs	r0, r6
 800d62c:	f7f8 ff95 	bl	800655a <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
 800d630:	48e9      	ldr	r0, [pc, #932]	; (800d9d8 <lv_theme_material_init+0xc5c>)
 800d632:	f7ff fb97 	bl	800cd64 <lv_color_hex>
 800d636:	6826      	ldr	r6, [r4, #0]
 800d638:	1c02      	adds	r2, r0, #0
 800d63a:	3610      	adds	r6, #16
 800d63c:	0030      	movs	r0, r6
 800d63e:	49e7      	ldr	r1, [pc, #924]	; (800d9dc <lv_theme_material_init+0xc60>)
 800d640:	f7f8 ff8b 	bl	800655a <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 800d644:	6826      	ldr	r6, [r4, #0]
 800d646:	6a2b      	ldr	r3, [r5, #32]
 800d648:	3610      	adds	r6, #16
 800d64a:	079b      	lsls	r3, r3, #30
 800d64c:	d401      	bmi.n	800d652 <lv_theme_material_init+0x8d6>
 800d64e:	f000 fc7d 	bl	800df4c <lv_theme_material_init+0x11d0>
 800d652:	48dc      	ldr	r0, [pc, #880]	; (800d9c4 <lv_theme_material_init+0xc48>)
 800d654:	f7ff fb86 	bl	800cd64 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color)
 800d658:	49e1      	ldr	r1, [pc, #900]	; (800d9e0 <lv_theme_material_init+0xc64>)
 800d65a:	1c02      	adds	r2, r0, #0
 800d65c:	0030      	movs	r0, r6
 800d65e:	f7f8 ff7c 	bl	800655a <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 800d662:	6826      	ldr	r6, [r4, #0]
 800d664:	6a2b      	ldr	r3, [r5, #32]
 800d666:	3610      	adds	r6, #16
 800d668:	079b      	lsls	r3, r3, #30
 800d66a:	d401      	bmi.n	800d670 <lv_theme_material_init+0x8f4>
 800d66c:	f000 fc71 	bl	800df52 <lv_theme_material_init+0x11d6>
 800d670:	48d4      	ldr	r0, [pc, #848]	; (800d9c4 <lv_theme_material_init+0xc48>)
 800d672:	f7ff fb77 	bl	800cd64 <lv_color_hex>
 800d676:	49db      	ldr	r1, [pc, #876]	; (800d9e4 <lv_theme_material_init+0xc68>)
 800d678:	1c02      	adds	r2, r0, #0
 800d67a:	0030      	movs	r0, r6
 800d67c:	f7f8 ff6d 	bl	800655a <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, lv_color_hex(0xffffff));
 800d680:	48d2      	ldr	r0, [pc, #840]	; (800d9cc <lv_theme_material_init+0xc50>)
 800d682:	f7ff fb6f 	bl	800cd64 <lv_color_hex>
 800d686:	6826      	ldr	r6, [r4, #0]
 800d688:	1c02      	adds	r2, r0, #0
 800d68a:	3610      	adds	r6, #16
 800d68c:	49d5      	ldr	r1, [pc, #852]	; (800d9e4 <lv_theme_material_init+0xc68>)
 800d68e:	0030      	movs	r0, r6
 800d690:	f7f8 ff63 	bl	800655a <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
 800d694:	48cd      	ldr	r0, [pc, #820]	; (800d9cc <lv_theme_material_init+0xc50>)
 800d696:	f7ff fb65 	bl	800cd64 <lv_color_hex>
 800d69a:	6826      	ldr	r6, [r4, #0]
 800d69c:	1c02      	adds	r2, r0, #0
 800d69e:	3610      	adds	r6, #16
 800d6a0:	49d1      	ldr	r1, [pc, #836]	; (800d9e8 <lv_theme_material_init+0xc6c>)
 800d6a2:	0030      	movs	r0, r6
 800d6a4:	f7f8 ff59 	bl	800655a <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
 800d6a8:	48cb      	ldr	r0, [pc, #812]	; (800d9d8 <lv_theme_material_init+0xc5c>)
 800d6aa:	f7ff fb5b 	bl	800cd64 <lv_color_hex>
 800d6ae:	6826      	ldr	r6, [r4, #0]
 800d6b0:	1c02      	adds	r2, r0, #0
 800d6b2:	3610      	adds	r6, #16
 800d6b4:	0030      	movs	r0, r6
 800d6b6:	49cd      	ldr	r1, [pc, #820]	; (800d9ec <lv_theme_material_init+0xc70>)
 800d6b8:	f7f8 ff4f 	bl	800655a <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 800d6bc:	6826      	ldr	r6, [r4, #0]
 800d6be:	6a2b      	ldr	r3, [r5, #32]
 800d6c0:	3610      	adds	r6, #16
 800d6c2:	079b      	lsls	r3, r3, #30
 800d6c4:	d401      	bmi.n	800d6ca <lv_theme_material_init+0x94e>
 800d6c6:	f000 fc47 	bl	800df58 <lv_theme_material_init+0x11dc>
 800d6ca:	48be      	ldr	r0, [pc, #760]	; (800d9c4 <lv_theme_material_init+0xc48>)
 800d6cc:	f7ff fb4a 	bl	800cd64 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color)
 800d6d0:	2179      	movs	r1, #121	; 0x79
 800d6d2:	1c02      	adds	r2, r0, #0
 800d6d4:	0030      	movs	r0, r6
 800d6d6:	f7f8 ff40 	bl	800655a <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 800d6da:	6826      	ldr	r6, [r4, #0]
 800d6dc:	6a2b      	ldr	r3, [r5, #32]
 800d6de:	3610      	adds	r6, #16
 800d6e0:	079b      	lsls	r3, r3, #30
 800d6e2:	d401      	bmi.n	800d6e8 <lv_theme_material_init+0x96c>
 800d6e4:	f000 fc3b 	bl	800df5e <lv_theme_material_init+0x11e2>
 800d6e8:	48b6      	ldr	r0, [pc, #728]	; (800d9c4 <lv_theme_material_init+0xc48>)
 800d6ea:	f7ff fb3b 	bl	800cd64 <lv_color_hex>
 800d6ee:	49c0      	ldr	r1, [pc, #768]	; (800d9f0 <lv_theme_material_init+0xc74>)
 800d6f0:	1c02      	adds	r2, r0, #0
 800d6f2:	0030      	movs	r0, r6
 800d6f4:	f7f8 ff31 	bl	800655a <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
 800d6f8:	48b4      	ldr	r0, [pc, #720]	; (800d9cc <lv_theme_material_init+0xc50>)
 800d6fa:	f7ff fb33 	bl	800cd64 <lv_color_hex>
 800d6fe:	217a      	movs	r1, #122	; 0x7a
 800d700:	6826      	ldr	r6, [r4, #0]
 800d702:	1c02      	adds	r2, r0, #0
 800d704:	3610      	adds	r6, #16
 800d706:	31ff      	adds	r1, #255	; 0xff
 800d708:	0030      	movs	r0, r6
 800d70a:	f7f8 ff26 	bl	800655a <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
 800d70e:	48af      	ldr	r0, [pc, #700]	; (800d9cc <lv_theme_material_init+0xc50>)
 800d710:	f7ff fb28 	bl	800cd64 <lv_color_hex>
 800d714:	6826      	ldr	r6, [r4, #0]
 800d716:	1c02      	adds	r2, r0, #0
 800d718:	3610      	adds	r6, #16
 800d71a:	49b6      	ldr	r1, [pc, #728]	; (800d9f4 <lv_theme_material_init+0xc78>)
 800d71c:	0030      	movs	r0, r6
 800d71e:	f7f8 ff1c 	bl	800655a <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
 800d722:	48ad      	ldr	r0, [pc, #692]	; (800d9d8 <lv_theme_material_init+0xc5c>)
 800d724:	f7ff fb1e 	bl	800cd64 <lv_color_hex>
 800d728:	6826      	ldr	r6, [r4, #0]
 800d72a:	1c02      	adds	r2, r0, #0
 800d72c:	3610      	adds	r6, #16
 800d72e:	0030      	movs	r0, r6
 800d730:	49b1      	ldr	r1, [pc, #708]	; (800d9f8 <lv_theme_material_init+0xc7c>)
 800d732:	f7f8 ff12 	bl	800655a <_lv_style_set_color>
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
 800d736:	2000      	movs	r0, #0
 800d738:	6827      	ldr	r7, [r4, #0]
 800d73a:	2628      	movs	r6, #40	; 0x28
 800d73c:	f7fd fe4c 	bl	800b3d8 <lv_disp_get_dpi>
 800d740:	4370      	muls	r0, r6
 800d742:	3710      	adds	r7, #16
 800d744:	2201      	movs	r2, #1
 800d746:	28ef      	cmp	r0, #239	; 0xef
 800d748:	dd08      	ble.n	800d75c <lv_theme_material_init+0x9e0>
 800d74a:	2000      	movs	r0, #0
 800d74c:	f7fd fe44 	bl	800b3d8 <lv_disp_get_dpi>
 800d750:	4370      	muls	r0, r6
 800d752:	21a0      	movs	r1, #160	; 0xa0
 800d754:	3050      	adds	r0, #80	; 0x50
 800d756:	f7f2 fd97 	bl	8000288 <__divsi3>
 800d75a:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 800d75c:	0038      	movs	r0, r7
 800d75e:	2112      	movs	r1, #18
 800d760:	f7f8 feb6 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
 800d764:	2000      	movs	r0, #0
 800d766:	6827      	ldr	r7, [r4, #0]
 800d768:	2628      	movs	r6, #40	; 0x28
 800d76a:	f7fd fe35 	bl	800b3d8 <lv_disp_get_dpi>
 800d76e:	4370      	muls	r0, r6
 800d770:	3710      	adds	r7, #16
 800d772:	2201      	movs	r2, #1
 800d774:	28ef      	cmp	r0, #239	; 0xef
 800d776:	dd08      	ble.n	800d78a <lv_theme_material_init+0xa0e>
 800d778:	2000      	movs	r0, #0
 800d77a:	f7fd fe2d 	bl	800b3d8 <lv_disp_get_dpi>
 800d77e:	4370      	muls	r0, r6
 800d780:	21a0      	movs	r1, #160	; 0xa0
 800d782:	3050      	adds	r0, #80	; 0x50
 800d784:	f7f2 fd80 	bl	8000288 <__divsi3>
 800d788:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 800d78a:	0038      	movs	r0, r7
 800d78c:	2113      	movs	r1, #19
 800d78e:	f7f8 fe9f 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
 800d792:	2000      	movs	r0, #0
 800d794:	6827      	ldr	r7, [r4, #0]
 800d796:	260f      	movs	r6, #15
 800d798:	f7fd fe1e 	bl	800b3d8 <lv_disp_get_dpi>
 800d79c:	4370      	muls	r0, r6
 800d79e:	3710      	adds	r7, #16
 800d7a0:	2201      	movs	r2, #1
 800d7a2:	28ef      	cmp	r0, #239	; 0xef
 800d7a4:	dd08      	ble.n	800d7b8 <lv_theme_material_init+0xa3c>
 800d7a6:	2000      	movs	r0, #0
 800d7a8:	f7fd fe16 	bl	800b3d8 <lv_disp_get_dpi>
 800d7ac:	4370      	muls	r0, r6
 800d7ae:	21a0      	movs	r1, #160	; 0xa0
 800d7b0:	3050      	adds	r0, #80	; 0x50
 800d7b2:	f7f2 fd69 	bl	8000288 <__divsi3>
 800d7b6:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 800d7b8:	0038      	movs	r0, r7
 800d7ba:	2110      	movs	r1, #16
 800d7bc:	f7f8 fe88 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
 800d7c0:	2000      	movs	r0, #0
 800d7c2:	6827      	ldr	r7, [r4, #0]
 800d7c4:	260f      	movs	r6, #15
 800d7c6:	f7fd fe07 	bl	800b3d8 <lv_disp_get_dpi>
 800d7ca:	4370      	muls	r0, r6
 800d7cc:	3710      	adds	r7, #16
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	28ef      	cmp	r0, #239	; 0xef
 800d7d2:	dd08      	ble.n	800d7e6 <lv_theme_material_init+0xa6a>
 800d7d4:	2000      	movs	r0, #0
 800d7d6:	f7fd fdff 	bl	800b3d8 <lv_disp_get_dpi>
 800d7da:	4370      	muls	r0, r6
 800d7dc:	21a0      	movs	r1, #160	; 0xa0
 800d7de:	3050      	adds	r0, #80	; 0x50
 800d7e0:	f7f2 fd52 	bl	8000288 <__divsi3>
 800d7e4:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 800d7e6:	0038      	movs	r0, r7
 800d7e8:	2111      	movs	r1, #17
 800d7ea:	f7f8 fe71 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
 800d7ee:	2000      	movs	r0, #0
 800d7f0:	6827      	ldr	r7, [r4, #0]
 800d7f2:	2614      	movs	r6, #20
 800d7f4:	f7fd fdf0 	bl	800b3d8 <lv_disp_get_dpi>
 800d7f8:	4370      	muls	r0, r6
 800d7fa:	3710      	adds	r7, #16
 800d7fc:	2201      	movs	r2, #1
 800d7fe:	28ef      	cmp	r0, #239	; 0xef
 800d800:	dd08      	ble.n	800d814 <lv_theme_material_init+0xa98>
 800d802:	2000      	movs	r0, #0
 800d804:	f7fd fde8 	bl	800b3d8 <lv_disp_get_dpi>
 800d808:	4370      	muls	r0, r6
 800d80a:	21a0      	movs	r1, #160	; 0xa0
 800d80c:	3050      	adds	r0, #80	; 0x50
 800d80e:	f7f2 fd3b 	bl	8000288 <__divsi3>
 800d812:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 800d814:	0038      	movs	r0, r7
 800d816:	2114      	movs	r1, #20
 800d818:	f7f8 fe5a 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, OUTLINE_WIDTH);
 800d81c:	2620      	movs	r6, #32
 800d81e:	2200      	movs	r2, #0
 800d820:	6827      	ldr	r7, [r4, #0]
 800d822:	6a2b      	ldr	r3, [r5, #32]
 800d824:	3710      	adds	r7, #16
 800d826:	401e      	ands	r6, r3
 800d828:	4296      	cmp	r6, r2
 800d82a:	d10d      	bne.n	800d848 <lv_theme_material_init+0xacc>
 800d82c:	0010      	movs	r0, r2
 800d82e:	f7fd fdd3 	bl	800b3d8 <lv_disp_get_dpi>
 800d832:	2201      	movs	r2, #1
 800d834:	2877      	cmp	r0, #119	; 0x77
 800d836:	dd07      	ble.n	800d848 <lv_theme_material_init+0xacc>
 800d838:	0030      	movs	r0, r6
 800d83a:	f7fd fdcd 	bl	800b3d8 <lv_disp_get_dpi>
 800d83e:	2150      	movs	r1, #80	; 0x50
 800d840:	3028      	adds	r0, #40	; 0x28
 800d842:	f7f2 fd21 	bl	8000288 <__divsi3>
 800d846:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int)
 800d848:	2140      	movs	r1, #64	; 0x40
 800d84a:	0038      	movs	r0, r7
 800d84c:	f7f8 fe40 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_outline_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_0);
 800d850:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa)
 800d852:	2200      	movs	r2, #0
 800d854:	3010      	adds	r0, #16
 800d856:	214c      	movs	r1, #76	; 0x4c
 800d858:	f7f8 fec4 	bl	80065e4 <_lv_style_set_opa>
 800d85c:	2193      	movs	r1, #147	; 0x93
    lv_style_set_outline_opa(&styles->btn, LV_STATE_FOCUSED, LV_OPA_50);
 800d85e:	6820      	ldr	r0, [r4, #0]
 800d860:	227f      	movs	r2, #127	; 0x7f
 800d862:	3010      	adds	r0, #16
 800d864:	0089      	lsls	r1, r1, #2
 800d866:	f7f8 febd 	bl	80065e4 <_lv_style_set_opa>
    lv_style_set_outline_color(&styles->btn, LV_STATE_DEFAULT, theme.color_primary);
 800d86a:	6820      	ldr	r0, [r4, #0]
 800d86c:	89aa      	ldrh	r2, [r5, #12]
 800d86e:	3010      	adds	r0, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color)
 800d870:	2149      	movs	r1, #73	; 0x49
 800d872:	f7f8 fe72 	bl	800655a <_lv_style_set_color>
    lv_style_set_outline_color(&styles->btn, LV_STATE_EDITED, theme.color_secondary);
 800d876:	6820      	ldr	r0, [r4, #0]
 800d878:	89ea      	ldrh	r2, [r5, #14]
 800d87a:	3010      	adds	r0, #16
 800d87c:	495f      	ldr	r1, [pc, #380]	; (800d9fc <lv_theme_material_init+0xc80>)
 800d87e:	f7f8 fe6c 	bl	800655a <_lv_style_set_color>
    lv_style_set_transition_time(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
 800d882:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int)
 800d884:	2200      	movs	r2, #0
 800d886:	3010      	adds	r0, #16
 800d888:	21b0      	movs	r1, #176	; 0xb0
 800d88a:	f7f8 fe21 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_transition_prop_4(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BORDER_OPA);
 800d88e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int)
 800d890:	223c      	movs	r2, #60	; 0x3c
 800d892:	3010      	adds	r0, #16
 800d894:	21b5      	movs	r1, #181	; 0xb5
 800d896:	f7f8 fe1b 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_transition_prop_5(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
 800d89a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int)
 800d89c:	2229      	movs	r2, #41	; 0x29
 800d89e:	3010      	adds	r0, #16
 800d8a0:	21b6      	movs	r1, #182	; 0xb6
 800d8a2:	f7f8 fe15 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_transition_prop_6(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
 800d8a6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int)
 800d8a8:	224c      	movs	r2, #76	; 0x4c
 800d8aa:	3010      	adds	r0, #16
 800d8ac:	21b7      	movs	r1, #183	; 0xb7
 800d8ae:	f7f8 fe0f 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_transition_delay(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
 800d8b2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int)
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	3010      	adds	r0, #16
 800d8b8:	21b1      	movs	r1, #177	; 0xb1
 800d8ba:	f7f8 fe09 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_transition_delay(&styles->btn, LV_STATE_PRESSED, 0);
 800d8be:	6820      	ldr	r0, [r4, #0]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	3010      	adds	r0, #16
 800d8c4:	494e      	ldr	r1, [pc, #312]	; (800da00 <lv_theme_material_init+0xc84>)
 800d8c6:	f7f8 fe03 	bl	80064d0 <_lv_style_set_int>
    lv_style_reset(&styles->pad_inner);
 800d8ca:	6820      	ldr	r0, [r4, #0]
 800d8cc:	3014      	adds	r0, #20
 800d8ce:	f7f8 fdcb 	bl	8006468 <lv_style_reset>
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 800d8d2:	6826      	ldr	r6, [r4, #0]
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 800d8d4:	2000      	movs	r0, #0
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 800d8d6:	3614      	adds	r6, #20
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 800d8d8:	f7fd fd8c 	bl	800b3f4 <lv_disp_get_size_category>
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 800d8dc:	2801      	cmp	r0, #1
 800d8de:	d900      	bls.n	800d8e2 <lv_theme_material_init+0xb66>
 800d8e0:	e340      	b.n	800df64 <lv_theme_material_init+0x11e8>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 800d8e2:	2000      	movs	r0, #0
 800d8e4:	f7fd fd78 	bl	800b3d8 <lv_disp_get_dpi>
 800d8e8:	2714      	movs	r7, #20
 800d8ea:	4378      	muls	r0, r7
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 800d8ec:	2201      	movs	r2, #1
 800d8ee:	28ef      	cmp	r0, #239	; 0xef
 800d8f0:	dd08      	ble.n	800d904 <lv_theme_material_init+0xb88>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 800d8f2:	2000      	movs	r0, #0
 800d8f4:	f7fd fd70 	bl	800b3d8 <lv_disp_get_dpi>
 800d8f8:	4378      	muls	r0, r7
 800d8fa:	21a0      	movs	r1, #160	; 0xa0
 800d8fc:	3050      	adds	r0, #80	; 0x50
 800d8fe:	f7f2 fcc3 	bl	8000288 <__divsi3>
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 800d902:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 800d904:	2114      	movs	r1, #20
 800d906:	0030      	movs	r0, r6
 800d908:	f7f8 fde2 	bl	80064d0 <_lv_style_set_int>
    lv_style_reset(&styles->pad_small);
 800d90c:	6820      	ldr	r0, [r4, #0]
 800d90e:	3018      	adds	r0, #24
 800d910:	f7f8 fdaa 	bl	8006468 <lv_style_reset>
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(10) : LV_DPX(20);
 800d914:	2000      	movs	r0, #0
 800d916:	f7fd fd6d 	bl	800b3f4 <lv_disp_get_size_category>
 800d91a:	2801      	cmp	r0, #1
 800d91c:	d900      	bls.n	800d920 <lv_theme_material_init+0xba4>
 800d91e:	e326      	b.n	800df6e <lv_theme_material_init+0x11f2>
 800d920:	2000      	movs	r0, #0
 800d922:	f7fd fd59 	bl	800b3d8 <lv_disp_get_dpi>
 800d926:	260a      	movs	r6, #10
 800d928:	4370      	muls	r0, r6
 800d92a:	28ef      	cmp	r0, #239	; 0xef
 800d92c:	dd00      	ble.n	800d930 <lv_theme_material_init+0xbb4>
 800d92e:	e323      	b.n	800df78 <lv_theme_material_init+0x11fc>
 800d930:	2601      	movs	r6, #1
    lv_style_set_pad_left(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
 800d932:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 800d934:	0032      	movs	r2, r6
 800d936:	3018      	adds	r0, #24
 800d938:	2112      	movs	r1, #18
 800d93a:	f7f8 fdc9 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
 800d93e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 800d940:	0032      	movs	r2, r6
 800d942:	3018      	adds	r0, #24
 800d944:	2113      	movs	r1, #19
 800d946:	f7f8 fdc3 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
 800d94a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 800d94c:	0032      	movs	r2, r6
 800d94e:	3018      	adds	r0, #24
 800d950:	2110      	movs	r1, #16
 800d952:	f7f8 fdbd 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
 800d956:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 800d958:	0032      	movs	r2, r6
 800d95a:	3018      	adds	r0, #24
 800d95c:	2111      	movs	r1, #17
 800d95e:	f7f8 fdb7 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
 800d962:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 800d964:	0032      	movs	r2, r6
 800d966:	2114      	movs	r1, #20
 800d968:	3018      	adds	r0, #24
 800d96a:	f7f8 fdb1 	bl	80064d0 <_lv_style_set_int>
    lv_style_reset(&styles->bar_bg);
 800d96e:	6820      	ldr	r0, [r4, #0]
 800d970:	3028      	adds	r0, #40	; 0x28
 800d972:	f7f8 fd79 	bl	8006468 <lv_style_reset>
    lv_style_set_radius(&styles->bar_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 800d976:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 800d978:	4a22      	ldr	r2, [pc, #136]	; (800da04 <lv_theme_material_init+0xc88>)
 800d97a:	3028      	adds	r0, #40	; 0x28
 800d97c:	2101      	movs	r1, #1
 800d97e:	f7f8 fda7 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_bg_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
 800d982:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 800d984:	22ff      	movs	r2, #255	; 0xff
 800d986:	3028      	adds	r0, #40	; 0x28
 800d988:	212c      	movs	r1, #44	; 0x2c
 800d98a:	f7f8 fe2b 	bl	80065e4 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->bar_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
 800d98e:	6826      	ldr	r6, [r4, #0]
 800d990:	6a2b      	ldr	r3, [r5, #32]
 800d992:	3628      	adds	r6, #40	; 0x28
 800d994:	079b      	lsls	r3, r3, #30
 800d996:	d400      	bmi.n	800d99a <lv_theme_material_init+0xc1e>
 800d998:	e2f8      	b.n	800df8c <lv_theme_material_init+0x1210>
 800d99a:	481b      	ldr	r0, [pc, #108]	; (800da08 <lv_theme_material_init+0xc8c>)
 800d99c:	f7ff f9e2 	bl	800cd64 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 800d9a0:	2129      	movs	r1, #41	; 0x29
 800d9a2:	1c02      	adds	r2, r0, #0
 800d9a4:	0030      	movs	r0, r6
 800d9a6:	f7f8 fdd8 	bl	800655a <_lv_style_set_color>
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
 800d9aa:	6826      	ldr	r6, [r4, #0]
 800d9ac:	6a2b      	ldr	r3, [r5, #32]
 800d9ae:	3628      	adds	r6, #40	; 0x28
 800d9b0:	4f16      	ldr	r7, [pc, #88]	; (800da0c <lv_theme_material_init+0xc90>)
 800d9b2:	079b      	lsls	r3, r3, #30
 800d9b4:	d400      	bmi.n	800d9b8 <lv_theme_material_init+0xc3c>
 800d9b6:	e2eb      	b.n	800df90 <lv_theme_material_init+0x1214>
 800d9b8:	4802      	ldr	r0, [pc, #8]	; (800d9c4 <lv_theme_material_init+0xc48>)
 800d9ba:	f7ff f9d3 	bl	800cd64 <lv_color_hex>
 800d9be:	1c02      	adds	r2, r0, #0
 800d9c0:	e026      	b.n	800da10 <lv_theme_material_init+0xc94>
 800d9c2:	46c0      	nop			; (mov r8, r8)
 800d9c4:	0031404f 	.word	0x0031404f
 800d9c8:	00009089 	.word	0x00009089
 800d9cc:	00ffffff 	.word	0x00ffffff
 800d9d0:	00008189 	.word	0x00008189
 800d9d4:	00009189 	.word	0x00009189
 800d9d8:	00888888 	.word	0x00888888
 800d9dc:	0000a089 	.word	0x0000a089
 800d9e0:	000080a9 	.word	0x000080a9
 800d9e4:	000090a9 	.word	0x000090a9
 800d9e8:	000091a9 	.word	0x000091a9
 800d9ec:	0000a0a9 	.word	0x0000a0a9
 800d9f0:	00001079 	.word	0x00001079
 800d9f4:	00001179 	.word	0x00001179
 800d9f8:	00002079 	.word	0x00002079
 800d9fc:	00000449 	.word	0x00000449
 800da00:	000010b1 	.word	0x000010b1
 800da04:	00007fff 	.word	0x00007fff
 800da08:	00d4d7d9 	.word	0x00d4d7d9
 800da0c:	0800e088 	.word	0x0800e088
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color)
 800da10:	0030      	movs	r0, r6
 800da12:	2179      	movs	r1, #121	; 0x79
 800da14:	f7f8 fda1 	bl	800655a <_lv_style_set_color>
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_DEFAULT, theme.color_primary);
 800da18:	6820      	ldr	r0, [r4, #0]
 800da1a:	89aa      	ldrh	r2, [r5, #12]
 800da1c:	3028      	adds	r0, #40	; 0x28
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color)
 800da1e:	2149      	movs	r1, #73	; 0x49
 800da20:	f7f8 fd9b 	bl	800655a <_lv_style_set_color>
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_EDITED, theme.color_secondary);
 800da24:	6820      	ldr	r0, [r4, #0]
 800da26:	89ea      	ldrh	r2, [r5, #14]
 800da28:	3028      	adds	r0, #40	; 0x28
 800da2a:	49e4      	ldr	r1, [pc, #912]	; (800ddbc <lv_theme_material_init+0x1040>)
 800da2c:	f7f8 fd95 	bl	800655a <_lv_style_set_color>
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
 800da30:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa)
 800da32:	2200      	movs	r2, #0
 800da34:	3028      	adds	r0, #40	; 0x28
 800da36:	214c      	movs	r1, #76	; 0x4c
 800da38:	f7f8 fdd4 	bl	80065e4 <_lv_style_set_opa>
 800da3c:	2193      	movs	r1, #147	; 0x93
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_FOCUSED, LV_OPA_50);
 800da3e:	6820      	ldr	r0, [r4, #0]
 800da40:	227f      	movs	r2, #127	; 0x7f
 800da42:	3028      	adds	r0, #40	; 0x28
 800da44:	0089      	lsls	r1, r1, #2
 800da46:	f7f8 fdcd 	bl	80065e4 <_lv_style_set_opa>
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
 800da4a:	6826      	ldr	r6, [r4, #0]
 800da4c:	2200      	movs	r2, #0
 800da4e:	2420      	movs	r4, #32
 800da50:	6a2b      	ldr	r3, [r5, #32]
 800da52:	3628      	adds	r6, #40	; 0x28
 800da54:	401c      	ands	r4, r3
 800da56:	4294      	cmp	r4, r2
 800da58:	d10d      	bne.n	800da76 <lv_theme_material_init+0xcfa>
 800da5a:	0010      	movs	r0, r2
 800da5c:	f7fd fcbc 	bl	800b3d8 <lv_disp_get_dpi>
 800da60:	2201      	movs	r2, #1
 800da62:	2877      	cmp	r0, #119	; 0x77
 800da64:	dd07      	ble.n	800da76 <lv_theme_material_init+0xcfa>
 800da66:	0020      	movs	r0, r4
 800da68:	f7fd fcb6 	bl	800b3d8 <lv_disp_get_dpi>
 800da6c:	2150      	movs	r1, #80	; 0x50
 800da6e:	3028      	adds	r0, #40	; 0x28
 800da70:	f7f2 fc0a 	bl	8000288 <__divsi3>
 800da74:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int)
 800da76:	0030      	movs	r0, r6
 800da78:	2140      	movs	r1, #64	; 0x40
 800da7a:	f7f8 fd29 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_transition_time(&styles->bar_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
 800da7e:	4cd0      	ldr	r4, [pc, #832]	; (800ddc0 <lv_theme_material_init+0x1044>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int)
 800da80:	2200      	movs	r2, #0
 800da82:	6820      	ldr	r0, [r4, #0]
 800da84:	21b0      	movs	r1, #176	; 0xb0
 800da86:	3028      	adds	r0, #40	; 0x28
 800da88:	f7f8 fd22 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_transition_prop_6(&styles->bar_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
 800da8c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int)
 800da8e:	224c      	movs	r2, #76	; 0x4c
 800da90:	21b7      	movs	r1, #183	; 0xb7
 800da92:	3028      	adds	r0, #40	; 0x28
 800da94:	f7f8 fd1c 	bl	80064d0 <_lv_style_set_int>
    lv_style_reset(&styles->bar_indic);
 800da98:	6820      	ldr	r0, [r4, #0]
 800da9a:	302c      	adds	r0, #44	; 0x2c
 800da9c:	f7f8 fce4 	bl	8006468 <lv_style_reset>
    lv_style_set_bg_opa(&styles->bar_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
 800daa0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 800daa2:	22ff      	movs	r2, #255	; 0xff
 800daa4:	302c      	adds	r0, #44	; 0x2c
 800daa6:	212c      	movs	r1, #44	; 0x2c
 800daa8:	f7f8 fd9c 	bl	80065e4 <_lv_style_set_opa>
    lv_style_set_radius(&styles->bar_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 800daac:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 800daae:	4ac5      	ldr	r2, [pc, #788]	; (800ddc4 <lv_theme_material_init+0x1048>)
 800dab0:	302c      	adds	r0, #44	; 0x2c
 800dab2:	2101      	movs	r1, #1
 800dab4:	f7f8 fd0c 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DEFAULT, theme.color_primary);
 800dab8:	6820      	ldr	r0, [r4, #0]
 800daba:	89aa      	ldrh	r2, [r5, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 800dabc:	2129      	movs	r1, #41	; 0x29
 800dabe:	302c      	adds	r0, #44	; 0x2c
 800dac0:	f7f8 fd4b 	bl	800655a <_lv_style_set_color>
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DISABLED, lv_color_hex3(0x888));
 800dac4:	48c0      	ldr	r0, [pc, #768]	; (800ddc8 <lv_theme_material_init+0x104c>)
 800dac6:	f7ff f89d 	bl	800cc04 <lv_color_hex3>
 800daca:	6826      	ldr	r6, [r4, #0]
 800dacc:	1c02      	adds	r2, r0, #0
 800dace:	362c      	adds	r6, #44	; 0x2c
 800dad0:	0030      	movs	r0, r6
 800dad2:	49be      	ldr	r1, [pc, #760]	; (800ddcc <lv_theme_material_init+0x1050>)
 800dad4:	f7f8 fd41 	bl	800655a <_lv_style_set_color>
    lv_style_set_value_color(&styles->bar_indic, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x41404f) : LV_COLOR_WHITE);
 800dad8:	6826      	ldr	r6, [r4, #0]
 800dada:	6a2b      	ldr	r3, [r5, #32]
 800dadc:	362c      	adds	r6, #44	; 0x2c
 800dade:	079b      	lsls	r3, r3, #30
 800dae0:	d400      	bmi.n	800dae4 <lv_theme_material_init+0xd68>
 800dae2:	e257      	b.n	800df94 <lv_theme_material_init+0x1218>
 800dae4:	48ba      	ldr	r0, [pc, #744]	; (800ddd0 <lv_theme_material_init+0x1054>)
 800dae6:	f7ff f93d 	bl	800cd64 <lv_color_hex>
 800daea:	1c02      	adds	r2, r0, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color)
 800daec:	2179      	movs	r1, #121	; 0x79
 800daee:	0030      	movs	r0, r6
 800daf0:	f7f8 fd33 	bl	800655a <_lv_style_set_color>
    lv_style_reset(&styles->arc_indic);
 800daf4:	6820      	ldr	r0, [r4, #0]
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
 800daf6:	2619      	movs	r6, #25
    lv_style_reset(&styles->arc_indic);
 800daf8:	301c      	adds	r0, #28
 800dafa:	f7f8 fcb5 	bl	8006468 <lv_style_reset>
    lv_style_set_line_color(&styles->arc_indic, LV_STATE_DEFAULT, theme.color_primary);
 800dafe:	6820      	ldr	r0, [r4, #0]
 800db00:	4db4      	ldr	r5, [pc, #720]	; (800ddd4 <lv_theme_material_init+0x1058>)
 800db02:	301c      	adds	r0, #28
 800db04:	89aa      	ldrh	r2, [r5, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color)
 800db06:	2199      	movs	r1, #153	; 0x99
 800db08:	f7f8 fd27 	bl	800655a <_lv_style_set_color>
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
 800db0c:	6823      	ldr	r3, [r4, #0]
 800db0e:	2000      	movs	r0, #0
 800db10:	331c      	adds	r3, #28
 800db12:	9300      	str	r3, [sp, #0]
 800db14:	f7fd fc60 	bl	800b3d8 <lv_disp_get_dpi>
 800db18:	4370      	muls	r0, r6
 800db1a:	2201      	movs	r2, #1
 800db1c:	28ef      	cmp	r0, #239	; 0xef
 800db1e:	dd08      	ble.n	800db32 <lv_theme_material_init+0xdb6>
 800db20:	2000      	movs	r0, #0
 800db22:	f7fd fc59 	bl	800b3d8 <lv_disp_get_dpi>
 800db26:	4370      	muls	r0, r6
 800db28:	21a0      	movs	r1, #160	; 0xa0
 800db2a:	3050      	adds	r0, #80	; 0x50
 800db2c:	f7f2 fbac 	bl	8000288 <__divsi3>
 800db30:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int)
 800db32:	2190      	movs	r1, #144	; 0x90
 800db34:	9800      	ldr	r0, [sp, #0]
 800db36:	f7f8 fccb 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_line_rounded(&styles->arc_indic, LV_STATE_DEFAULT, true);
 800db3a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int)
 800db3c:	2201      	movs	r2, #1
 800db3e:	301c      	adds	r0, #28
 800db40:	2194      	movs	r1, #148	; 0x94
 800db42:	f7f8 fcc5 	bl	80064d0 <_lv_style_set_int>
    lv_style_reset(&styles->arc_bg);
 800db46:	6820      	ldr	r0, [r4, #0]
 800db48:	3020      	adds	r0, #32
 800db4a:	f7f8 fc8d 	bl	8006468 <lv_style_reset>
    lv_style_set_line_color(&styles->arc_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
 800db4e:	6826      	ldr	r6, [r4, #0]
 800db50:	6a2b      	ldr	r3, [r5, #32]
 800db52:	3620      	adds	r6, #32
 800db54:	079b      	lsls	r3, r3, #30
 800db56:	d400      	bmi.n	800db5a <lv_theme_material_init+0xdde>
 800db58:	e21e      	b.n	800df98 <lv_theme_material_init+0x121c>
 800db5a:	489f      	ldr	r0, [pc, #636]	; (800ddd8 <lv_theme_material_init+0x105c>)
 800db5c:	f7ff f902 	bl	800cd64 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color)
 800db60:	2199      	movs	r1, #153	; 0x99
 800db62:	1c02      	adds	r2, r0, #0
 800db64:	0030      	movs	r0, r6
 800db66:	f7f8 fcf8 	bl	800655a <_lv_style_set_color>
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
 800db6a:	6823      	ldr	r3, [r4, #0]
 800db6c:	2000      	movs	r0, #0
 800db6e:	3320      	adds	r3, #32
 800db70:	9300      	str	r3, [sp, #0]
 800db72:	2619      	movs	r6, #25
 800db74:	f7fd fc30 	bl	800b3d8 <lv_disp_get_dpi>
 800db78:	4370      	muls	r0, r6
 800db7a:	2201      	movs	r2, #1
 800db7c:	28ef      	cmp	r0, #239	; 0xef
 800db7e:	dd08      	ble.n	800db92 <lv_theme_material_init+0xe16>
 800db80:	2000      	movs	r0, #0
 800db82:	f7fd fc29 	bl	800b3d8 <lv_disp_get_dpi>
 800db86:	4370      	muls	r0, r6
 800db88:	21a0      	movs	r1, #160	; 0xa0
 800db8a:	3050      	adds	r0, #80	; 0x50
 800db8c:	f7f2 fb7c 	bl	8000288 <__divsi3>
 800db90:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int)
 800db92:	2190      	movs	r1, #144	; 0x90
 800db94:	9800      	ldr	r0, [sp, #0]
 800db96:	f7f8 fc9b 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_line_rounded(&styles->arc_bg, LV_STATE_DEFAULT, true);
 800db9a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int)
 800db9c:	2201      	movs	r2, #1
 800db9e:	2194      	movs	r1, #148	; 0x94
 800dba0:	3020      	adds	r0, #32
 800dba2:	f7f8 fc95 	bl	80064d0 <_lv_style_set_int>
    lv_style_reset(&styles->arc_knob);
 800dba6:	6820      	ldr	r0, [r4, #0]
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
 800dba8:	261e      	movs	r6, #30
    lv_style_reset(&styles->arc_knob);
 800dbaa:	3024      	adds	r0, #36	; 0x24
 800dbac:	f7f8 fc5c 	bl	8006468 <lv_style_reset>
    lv_style_set_radius(&styles->arc_knob, LV_STATE_DEFAULT,   LV_RADIUS_CIRCLE);
 800dbb0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 800dbb2:	4a84      	ldr	r2, [pc, #528]	; (800ddc4 <lv_theme_material_init+0x1048>)
 800dbb4:	3024      	adds	r0, #36	; 0x24
 800dbb6:	2101      	movs	r1, #1
 800dbb8:	f7f8 fc8a 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->arc_knob, LV_STATE_DEFAULT,  LV_DPX(0));
 800dbbc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	3024      	adds	r0, #36	; 0x24
 800dbc2:	2110      	movs	r1, #16
 800dbc4:	f7f8 fc84 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->arc_knob, LV_STATE_DEFAULT,  LV_DPX(0));
 800dbc8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 800dbca:	2200      	movs	r2, #0
 800dbcc:	3024      	adds	r0, #36	; 0x24
 800dbce:	2111      	movs	r1, #17
 800dbd0:	f7f8 fc7e 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->arc_knob, LV_STATE_DEFAULT,    LV_DPX(0));
 800dbd4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	3024      	adds	r0, #36	; 0x24
 800dbda:	2112      	movs	r1, #18
 800dbdc:	f7f8 fc78 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->arc_knob, LV_STATE_DEFAULT,   LV_DPX(0));
 800dbe0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	2113      	movs	r1, #19
 800dbe6:	3024      	adds	r0, #36	; 0x24
 800dbe8:	f7f8 fc72 	bl	80064d0 <_lv_style_set_int>
    lv_style_reset(&styles->cpicker_bg);
 800dbec:	6820      	ldr	r0, [r4, #0]
 800dbee:	3030      	adds	r0, #48	; 0x30
 800dbf0:	f7f8 fc3a 	bl	8006468 <lv_style_reset>
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
 800dbf4:	6823      	ldr	r3, [r4, #0]
 800dbf6:	2000      	movs	r0, #0
 800dbf8:	3330      	adds	r3, #48	; 0x30
 800dbfa:	9300      	str	r3, [sp, #0]
 800dbfc:	f7fd fbec 	bl	800b3d8 <lv_disp_get_dpi>
 800dc00:	4370      	muls	r0, r6
 800dc02:	2201      	movs	r2, #1
 800dc04:	28ef      	cmp	r0, #239	; 0xef
 800dc06:	dd08      	ble.n	800dc1a <lv_theme_material_init+0xe9e>
 800dc08:	2000      	movs	r0, #0
 800dc0a:	f7fd fbe5 	bl	800b3d8 <lv_disp_get_dpi>
 800dc0e:	4370      	muls	r0, r6
 800dc10:	21a0      	movs	r1, #160	; 0xa0
 800dc12:	3050      	adds	r0, #80	; 0x50
 800dc14:	f7f2 fb38 	bl	8000288 <__divsi3>
 800dc18:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const lv_anim_path_t *, _ptr)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int)
 800dc1a:	21c0      	movs	r1, #192	; 0xc0
 800dc1c:	9800      	ldr	r0, [sp, #0]
 800dc1e:	f7f8 fc57 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_bg_opa(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
 800dc22:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 800dc24:	22ff      	movs	r2, #255	; 0xff
 800dc26:	3030      	adds	r0, #48	; 0x30
 800dc28:	212c      	movs	r1, #44	; 0x2c
 800dc2a:	f7f8 fcdb 	bl	80065e4 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->cpicker_bg, LV_STATE_DEFAULT, COLOR_SCR);
 800dc2e:	6826      	ldr	r6, [r4, #0]
 800dc30:	6a2b      	ldr	r3, [r5, #32]
 800dc32:	3630      	adds	r6, #48	; 0x30
 800dc34:	079b      	lsls	r3, r3, #30
 800dc36:	d400      	bmi.n	800dc3a <lv_theme_material_init+0xebe>
 800dc38:	e1b0      	b.n	800df9c <lv_theme_material_init+0x1220>
 800dc3a:	4868      	ldr	r0, [pc, #416]	; (800dddc <lv_theme_material_init+0x1060>)
 800dc3c:	f7ff f892 	bl	800cd64 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 800dc40:	2129      	movs	r1, #41	; 0x29
 800dc42:	1c02      	adds	r2, r0, #0
 800dc44:	0030      	movs	r0, r6
 800dc46:	f7f8 fc88 	bl	800655a <_lv_style_set_color>
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
 800dc4a:	6823      	ldr	r3, [r4, #0]
 800dc4c:	2000      	movs	r0, #0
 800dc4e:	3330      	adds	r3, #48	; 0x30
 800dc50:	9300      	str	r3, [sp, #0]
 800dc52:	2614      	movs	r6, #20
 800dc54:	f7fd fbc0 	bl	800b3d8 <lv_disp_get_dpi>
 800dc58:	4370      	muls	r0, r6
 800dc5a:	2201      	movs	r2, #1
 800dc5c:	28ef      	cmp	r0, #239	; 0xef
 800dc5e:	dd08      	ble.n	800dc72 <lv_theme_material_init+0xef6>
 800dc60:	2000      	movs	r0, #0
 800dc62:	f7fd fbb9 	bl	800b3d8 <lv_disp_get_dpi>
 800dc66:	4370      	muls	r0, r6
 800dc68:	21a0      	movs	r1, #160	; 0xa0
 800dc6a:	3050      	adds	r0, #80	; 0x50
 800dc6c:	f7f2 fb0c 	bl	8000288 <__divsi3>
 800dc70:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 800dc72:	2114      	movs	r1, #20
 800dc74:	9800      	ldr	r0, [sp, #0]
 800dc76:	f7f8 fc2b 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_radius(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 800dc7a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 800dc7c:	4a51      	ldr	r2, [pc, #324]	; (800ddc4 <lv_theme_material_init+0x1048>)
 800dc7e:	2101      	movs	r1, #1
 800dc80:	3030      	adds	r0, #48	; 0x30
 800dc82:	f7f8 fc25 	bl	80064d0 <_lv_style_set_int>
    lv_style_reset(&styles->cpicker_indic);
 800dc86:	6820      	ldr	r0, [r4, #0]
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 800dc88:	260d      	movs	r6, #13
    lv_style_reset(&styles->cpicker_indic);
 800dc8a:	3034      	adds	r0, #52	; 0x34
 800dc8c:	f7f8 fbec 	bl	8006468 <lv_style_reset>
    lv_style_set_radius(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 800dc90:	6820      	ldr	r0, [r4, #0]
 800dc92:	4a4c      	ldr	r2, [pc, #304]	; (800ddc4 <lv_theme_material_init+0x1048>)
 800dc94:	3034      	adds	r0, #52	; 0x34
 800dc96:	2101      	movs	r1, #1
 800dc98:	f7f8 fc1a 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_bg_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_WHITE);
 800dc9c:	6820      	ldr	r0, [r4, #0]
 800dc9e:	883a      	ldrh	r2, [r7, #0]
 800dca0:	3034      	adds	r0, #52	; 0x34
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 800dca2:	2129      	movs	r1, #41	; 0x29
 800dca4:	f7f8 fc59 	bl	800655a <_lv_style_set_color>
    lv_style_set_bg_opa(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
 800dca8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 800dcaa:	22ff      	movs	r2, #255	; 0xff
 800dcac:	3034      	adds	r0, #52	; 0x34
 800dcae:	212c      	movs	r1, #44	; 0x2c
 800dcb0:	f7f8 fc98 	bl	80065e4 <_lv_style_set_opa>
    lv_style_set_border_width(&styles->cpicker_indic, LV_STATE_DEFAULT, 2);
 800dcb4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int)
 800dcb6:	2202      	movs	r2, #2
 800dcb8:	3034      	adds	r0, #52	; 0x34
 800dcba:	2130      	movs	r1, #48	; 0x30
 800dcbc:	f7f8 fc08 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_GRAY);
 800dcc0:	6820      	ldr	r0, [r4, #0]
 800dcc2:	887a      	ldrh	r2, [r7, #2]
 800dcc4:	3034      	adds	r0, #52	; 0x34
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color)
 800dcc6:	2139      	movs	r1, #57	; 0x39
 800dcc8:	f7f8 fc47 	bl	800655a <_lv_style_set_color>
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_FOCUSED, theme.color_primary);
 800dccc:	6820      	ldr	r0, [r4, #0]
 800dcce:	89aa      	ldrh	r2, [r5, #12]
 800dcd0:	3034      	adds	r0, #52	; 0x34
 800dcd2:	4943      	ldr	r1, [pc, #268]	; (800dde0 <lv_theme_material_init+0x1064>)
 800dcd4:	f7f8 fc41 	bl	800655a <_lv_style_set_color>
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_EDITED, theme.color_secondary);
 800dcd8:	6820      	ldr	r0, [r4, #0]
 800dcda:	89ea      	ldrh	r2, [r5, #14]
 800dcdc:	3034      	adds	r0, #52	; 0x34
 800dcde:	4941      	ldr	r1, [pc, #260]	; (800dde4 <lv_theme_material_init+0x1068>)
 800dce0:	f7f8 fc3b 	bl	800655a <_lv_style_set_color>
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 800dce4:	2000      	movs	r0, #0
 800dce6:	6827      	ldr	r7, [r4, #0]
 800dce8:	f7fd fb76 	bl	800b3d8 <lv_disp_get_dpi>
 800dcec:	4370      	muls	r0, r6
 800dcee:	3734      	adds	r7, #52	; 0x34
 800dcf0:	2201      	movs	r2, #1
 800dcf2:	28ef      	cmp	r0, #239	; 0xef
 800dcf4:	dd08      	ble.n	800dd08 <lv_theme_material_init+0xf8c>
 800dcf6:	2000      	movs	r0, #0
 800dcf8:	f7fd fb6e 	bl	800b3d8 <lv_disp_get_dpi>
 800dcfc:	4370      	muls	r0, r6
 800dcfe:	21a0      	movs	r1, #160	; 0xa0
 800dd00:	3050      	adds	r0, #80	; 0x50
 800dd02:	f7f2 fac1 	bl	8000288 <__divsi3>
 800dd06:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 800dd08:	0038      	movs	r0, r7
 800dd0a:	2112      	movs	r1, #18
 800dd0c:	f7f8 fbe0 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 800dd10:	2000      	movs	r0, #0
 800dd12:	6827      	ldr	r7, [r4, #0]
 800dd14:	260d      	movs	r6, #13
 800dd16:	f7fd fb5f 	bl	800b3d8 <lv_disp_get_dpi>
 800dd1a:	4370      	muls	r0, r6
 800dd1c:	3734      	adds	r7, #52	; 0x34
 800dd1e:	2201      	movs	r2, #1
 800dd20:	28ef      	cmp	r0, #239	; 0xef
 800dd22:	dd08      	ble.n	800dd36 <lv_theme_material_init+0xfba>
 800dd24:	2000      	movs	r0, #0
 800dd26:	f7fd fb57 	bl	800b3d8 <lv_disp_get_dpi>
 800dd2a:	4370      	muls	r0, r6
 800dd2c:	21a0      	movs	r1, #160	; 0xa0
 800dd2e:	3050      	adds	r0, #80	; 0x50
 800dd30:	f7f2 faaa 	bl	8000288 <__divsi3>
 800dd34:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 800dd36:	0038      	movs	r0, r7
 800dd38:	2113      	movs	r1, #19
 800dd3a:	f7f8 fbc9 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 800dd3e:	2000      	movs	r0, #0
 800dd40:	6827      	ldr	r7, [r4, #0]
 800dd42:	260d      	movs	r6, #13
 800dd44:	f7fd fb48 	bl	800b3d8 <lv_disp_get_dpi>
 800dd48:	4370      	muls	r0, r6
 800dd4a:	3734      	adds	r7, #52	; 0x34
 800dd4c:	2201      	movs	r2, #1
 800dd4e:	28ef      	cmp	r0, #239	; 0xef
 800dd50:	dd08      	ble.n	800dd64 <lv_theme_material_init+0xfe8>
 800dd52:	2000      	movs	r0, #0
 800dd54:	f7fd fb40 	bl	800b3d8 <lv_disp_get_dpi>
 800dd58:	4370      	muls	r0, r6
 800dd5a:	21a0      	movs	r1, #160	; 0xa0
 800dd5c:	3050      	adds	r0, #80	; 0x50
 800dd5e:	f7f2 fa93 	bl	8000288 <__divsi3>
 800dd62:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 800dd64:	2110      	movs	r1, #16
 800dd66:	0038      	movs	r0, r7
 800dd68:	f7f8 fbb2 	bl	80064d0 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 800dd6c:	2000      	movs	r0, #0
 800dd6e:	6826      	ldr	r6, [r4, #0]
 800dd70:	f7fd fb32 	bl	800b3d8 <lv_disp_get_dpi>
 800dd74:	240d      	movs	r4, #13
 800dd76:	4360      	muls	r0, r4
 800dd78:	3634      	adds	r6, #52	; 0x34
 800dd7a:	2201      	movs	r2, #1
 800dd7c:	28ef      	cmp	r0, #239	; 0xef
 800dd7e:	dd08      	ble.n	800dd92 <lv_theme_material_init+0x1016>
 800dd80:	2000      	movs	r0, #0
 800dd82:	f7fd fb29 	bl	800b3d8 <lv_disp_get_dpi>
 800dd86:	4360      	muls	r0, r4
 800dd88:	21a0      	movs	r1, #160	; 0xa0
 800dd8a:	3050      	adds	r0, #80	; 0x50
 800dd8c:	f7f2 fa7c 	bl	8000288 <__divsi3>
 800dd90:	b202      	sxth	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 800dd92:	0030      	movs	r0, r6
 800dd94:	2111      	movs	r1, #17
 800dd96:	f7f8 fb9b 	bl	80064d0 <_lv_style_set_int>
    theme.apply_xcb = NULL;
 800dd9a:	2000      	movs	r0, #0
    theme.apply_cb = theme_apply;
 800dd9c:	4b12      	ldr	r3, [pc, #72]	; (800dde8 <lv_theme_material_init+0x106c>)
    theme.apply_xcb = NULL;
 800dd9e:	6068      	str	r0, [r5, #4]
    theme.apply_cb = theme_apply;
 800dda0:	602b      	str	r3, [r5, #0]
    lv_obj_report_style_mod(NULL);
 800dda2:	f7f6 fe20 	bl	80049e6 <lv_obj_report_style_mod>
}
 800dda6:	0028      	movs	r0, r5
 800dda8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    lv_style_set_bg_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR);
 800ddaa:	4810      	ldr	r0, [pc, #64]	; (800ddec <lv_theme_material_init+0x1070>)
 800ddac:	f7ff f819 	bl	800cde2 <lv_theme_material_init+0x66>
    lv_style_set_text_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 800ddb0:	480f      	ldr	r0, [pc, #60]	; (800ddf0 <lv_theme_material_init+0x1074>)
 800ddb2:	f7ff f824 	bl	800cdfe <lv_theme_material_init+0x82>
    lv_style_set_value_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 800ddb6:	480e      	ldr	r0, [pc, #56]	; (800ddf0 <lv_theme_material_init+0x1074>)
 800ddb8:	f7ff f82f 	bl	800ce1a <lv_theme_material_init+0x9e>
 800ddbc:	00000449 	.word	0x00000449
 800ddc0:	20006e9c 	.word	0x20006e9c
 800ddc4:	00007fff 	.word	0x00007fff
 800ddc8:	00000888 	.word	0x00000888
 800ddcc:	00002029 	.word	0x00002029
 800ddd0:	0041404f 	.word	0x0041404f
 800ddd4:	20006ea0 	.word	0x20006ea0
 800ddd8:	00d4d7d9 	.word	0x00d4d7d9
 800dddc:	00eaeff3 	.word	0x00eaeff3
 800dde0:	00000239 	.word	0x00000239
 800dde4:	00000439 	.word	0x00000439
 800dde8:	0800cc39 	.word	0x0800cc39
 800ddec:	00444b5a 	.word	0x00444b5a
 800ddf0:	00e7e9ec 	.word	0x00e7e9ec
    lv_style_set_text_sel_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 800ddf4:	486a      	ldr	r0, [pc, #424]	; (800dfa0 <lv_theme_material_init+0x1224>)
 800ddf6:	f7ff f81e 	bl	800ce36 <lv_theme_material_init+0xba>
    lv_style_set_bg_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG);
 800ddfa:	486a      	ldr	r0, [pc, #424]	; (800dfa4 <lv_theme_material_init+0x1228>)
 800ddfc:	f7ff f852 	bl	800cea4 <lv_theme_material_init+0x128>
    lv_style_set_border_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
 800de00:	4869      	ldr	r0, [pc, #420]	; (800dfa8 <lv_theme_material_init+0x122c>)
 800de02:	f7ff f85e 	bl	800cec2 <lv_theme_material_init+0x146>
    lv_style_set_text_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 800de06:	4869      	ldr	r0, [pc, #420]	; (800dfac <lv_theme_material_init+0x1230>)
 800de08:	f7ff f893 	bl	800cf32 <lv_theme_material_init+0x1b6>
    lv_style_set_value_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 800de0c:	4867      	ldr	r0, [pc, #412]	; (800dfac <lv_theme_material_init+0x1230>)
 800de0e:	f7ff f8a5 	bl	800cf5c <lv_theme_material_init+0x1e0>
    lv_style_set_image_recolor(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 800de12:	4866      	ldr	r0, [pc, #408]	; (800dfac <lv_theme_material_init+0x1230>)
 800de14:	f7ff f8b1 	bl	800cf7a <lv_theme_material_init+0x1fe>
    lv_style_set_line_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 800de18:	4864      	ldr	r0, [pc, #400]	; (800dfac <lv_theme_material_init+0x1230>)
 800de1a:	f7ff f8bd 	bl	800cf98 <lv_theme_material_init+0x21c>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 800de1e:	2000      	movs	r0, #0
 800de20:	f7fd fada 	bl	800b3d8 <lv_disp_get_dpi>
 800de24:	261e      	movs	r6, #30
 800de26:	f7ff f8d1 	bl	800cfcc <lv_theme_material_init+0x250>
 800de2a:	2000      	movs	r0, #0
 800de2c:	f7fd fad4 	bl	800b3d8 <lv_disp_get_dpi>
 800de30:	4370      	muls	r0, r6
 800de32:	21a0      	movs	r1, #160	; 0xa0
 800de34:	3050      	adds	r0, #80	; 0x50
 800de36:	f7f2 fa27 	bl	8000288 <__divsi3>
 800de3a:	b286      	uxth	r6, r0
 800de3c:	f7ff f8cc 	bl	800cfd8 <lv_theme_material_init+0x25c>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 800de40:	2000      	movs	r0, #0
 800de42:	f7fd fac9 	bl	800b3d8 <lv_disp_get_dpi>
 800de46:	261e      	movs	r6, #30
 800de48:	f7ff f8e7 	bl	800d01a <lv_theme_material_init+0x29e>
 800de4c:	2000      	movs	r0, #0
 800de4e:	f7fd fac3 	bl	800b3d8 <lv_disp_get_dpi>
 800de52:	4370      	muls	r0, r6
 800de54:	21a0      	movs	r1, #160	; 0xa0
 800de56:	3050      	adds	r0, #80	; 0x50
 800de58:	f7f2 fa16 	bl	8000288 <__divsi3>
 800de5c:	b286      	uxth	r6, r0
 800de5e:	f7ff f8e2 	bl	800d026 <lv_theme_material_init+0x2aa>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 800de62:	2000      	movs	r0, #0
 800de64:	f7fd fab8 	bl	800b3d8 <lv_disp_get_dpi>
 800de68:	261e      	movs	r6, #30
 800de6a:	f7ff f8fd 	bl	800d068 <lv_theme_material_init+0x2ec>
 800de6e:	2000      	movs	r0, #0
 800de70:	f7fd fab2 	bl	800b3d8 <lv_disp_get_dpi>
 800de74:	4370      	muls	r0, r6
 800de76:	21a0      	movs	r1, #160	; 0xa0
 800de78:	3050      	adds	r0, #80	; 0x50
 800de7a:	f7f2 fa05 	bl	8000288 <__divsi3>
 800de7e:	b286      	uxth	r6, r0
 800de80:	f7ff f8f8 	bl	800d074 <lv_theme_material_init+0x2f8>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 800de84:	2000      	movs	r0, #0
 800de86:	f7fd faa7 	bl	800b3d8 <lv_disp_get_dpi>
 800de8a:	261e      	movs	r6, #30
 800de8c:	f7ff f913 	bl	800d0b6 <lv_theme_material_init+0x33a>
 800de90:	2000      	movs	r0, #0
 800de92:	f7fd faa1 	bl	800b3d8 <lv_disp_get_dpi>
 800de96:	4370      	muls	r0, r6
 800de98:	21a0      	movs	r1, #160	; 0xa0
 800de9a:	3050      	adds	r0, #80	; 0x50
 800de9c:	f7f2 f9f4 	bl	8000288 <__divsi3>
 800dea0:	b286      	uxth	r6, r0
 800dea2:	f7ff f90e 	bl	800d0c2 <lv_theme_material_init+0x346>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
 800dea6:	2000      	movs	r0, #0
 800dea8:	f7fd fa96 	bl	800b3d8 <lv_disp_get_dpi>
 800deac:	271e      	movs	r7, #30
 800deae:	f7ff f929 	bl	800d104 <lv_theme_material_init+0x388>
    lv_style_set_bg_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC);
 800deb2:	483f      	ldr	r0, [pc, #252]	; (800dfb0 <lv_theme_material_init+0x1234>)
 800deb4:	f7ff f96f 	bl	800d196 <lv_theme_material_init+0x41a>
    lv_style_set_border_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_BORDER);
 800deb8:	483e      	ldr	r0, [pc, #248]	; (800dfb4 <lv_theme_material_init+0x1238>)
 800deba:	f7ff f97b 	bl	800d1b4 <lv_theme_material_init+0x438>
    lv_style_set_text_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 800debe:	483e      	ldr	r0, [pc, #248]	; (800dfb8 <lv_theme_material_init+0x123c>)
 800dec0:	f7ff f987 	bl	800d1d2 <lv_theme_material_init+0x456>
    lv_style_set_value_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 800dec4:	483c      	ldr	r0, [pc, #240]	; (800dfb8 <lv_theme_material_init+0x123c>)
 800dec6:	f7ff f993 	bl	800d1f0 <lv_theme_material_init+0x474>
    lv_style_set_image_recolor(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 800deca:	483b      	ldr	r0, [pc, #236]	; (800dfb8 <lv_theme_material_init+0x123c>)
 800decc:	f7ff f99f 	bl	800d20e <lv_theme_material_init+0x492>
    lv_style_set_line_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 800ded0:	4839      	ldr	r0, [pc, #228]	; (800dfb8 <lv_theme_material_init+0x123c>)
 800ded2:	f7ff f9ab 	bl	800d22c <lv_theme_material_init+0x4b0>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_PR);
 800ded6:	4839      	ldr	r0, [pc, #228]	; (800dfbc <lv_theme_material_init+0x1240>)
 800ded8:	f7ff f9bb 	bl	800d252 <lv_theme_material_init+0x4d6>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_DIS);
 800dedc:	4831      	ldr	r0, [pc, #196]	; (800dfa4 <lv_theme_material_init+0x1228>)
 800dede:	f7ff f9d9 	bl	800d294 <lv_theme_material_init+0x518>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_BORDER_PR);
 800dee2:	4837      	ldr	r0, [pc, #220]	; (800dfc0 <lv_theme_material_init+0x1244>)
 800dee4:	f7fe ff3e 	bl	800cd64 <lv_color_hex>
 800dee8:	f7ff f9f8 	bl	800d2dc <lv_theme_material_init+0x560>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_BORDER_CHK);
 800deec:	4834      	ldr	r0, [pc, #208]	; (800dfc0 <lv_theme_material_init+0x1244>)
 800deee:	f7ff fa03 	bl	800d2f8 <lv_theme_material_init+0x57c>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_BORDER_CHK_PR);
 800def2:	4833      	ldr	r0, [pc, #204]	; (800dfc0 <lv_theme_material_init+0x1244>)
 800def4:	f7ff fa10 	bl	800d318 <lv_theme_material_init+0x59c>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_BORDER_DIS);
 800def8:	4831      	ldr	r0, [pc, #196]	; (800dfc0 <lv_theme_material_init+0x1244>)
 800defa:	f7ff fa1c 	bl	800d336 <lv_theme_material_init+0x5ba>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
 800defe:	482b      	ldr	r0, [pc, #172]	; (800dfac <lv_theme_material_init+0x1230>)
 800df00:	f7ff fa28 	bl	800d354 <lv_theme_material_init+0x5d8>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
 800df04:	482f      	ldr	r0, [pc, #188]	; (800dfc4 <lv_theme_material_init+0x1248>)
 800df06:	f7ff fa48 	bl	800d39a <lv_theme_material_init+0x61e>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
 800df0a:	4828      	ldr	r0, [pc, #160]	; (800dfac <lv_theme_material_init+0x1230>)
 800df0c:	f7ff fa54 	bl	800d3b8 <lv_theme_material_init+0x63c>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
 800df10:	482c      	ldr	r0, [pc, #176]	; (800dfc4 <lv_theme_material_init+0x1248>)
 800df12:	f7ff fa74 	bl	800d3fe <lv_theme_material_init+0x682>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN);
 800df16:	4823      	ldr	r0, [pc, #140]	; (800dfa4 <lv_theme_material_init+0x1228>)
 800df18:	f7ff fa96 	bl	800d448 <lv_theme_material_init+0x6cc>
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_PR);
 800df1c:	4821      	ldr	r0, [pc, #132]	; (800dfa4 <lv_theme_material_init+0x1228>)
 800df1e:	f7fe ff21 	bl	800cd64 <lv_color_hex>
 800df22:	224c      	movs	r2, #76	; 0x4c
 800df24:	1c01      	adds	r1, r0, #0
 800df26:	f7ff faa3 	bl	800d470 <lv_theme_material_init+0x6f4>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN);
 800df2a:	481e      	ldr	r0, [pc, #120]	; (800dfa4 <lv_theme_material_init+0x1228>)
 800df2c:	f7ff fac2 	bl	800d4b4 <lv_theme_material_init+0x738>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED | LV_STATE_CHECKED, COLOR_BTN_DIS);
 800df30:	4825      	ldr	r0, [pc, #148]	; (800dfc8 <lv_theme_material_init+0x124c>)
 800df32:	f7ff face 	bl	800d4d2 <lv_theme_material_init+0x756>
    lv_style_set_border_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN_BORDER_INA);
 800df36:	481f      	ldr	r0, [pc, #124]	; (800dfb4 <lv_theme_material_init+0x1238>)
 800df38:	f7fe ff14 	bl	800cd64 <lv_color_hex>
 800df3c:	f7ff fae6 	bl	800d50c <lv_theme_material_init+0x790>
    lv_style_set_text_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 800df40:	481a      	ldr	r0, [pc, #104]	; (800dfac <lv_theme_material_init+0x1230>)
 800df42:	f7ff fb0b 	bl	800d55c <lv_theme_material_init+0x7e0>
    lv_style_set_text_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 800df46:	4819      	ldr	r0, [pc, #100]	; (800dfac <lv_theme_material_init+0x1230>)
 800df48:	f7ff fb57 	bl	800d5fa <lv_theme_material_init+0x87e>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 800df4c:	4817      	ldr	r0, [pc, #92]	; (800dfac <lv_theme_material_init+0x1230>)
 800df4e:	f7ff fb81 	bl	800d654 <lv_theme_material_init+0x8d8>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 800df52:	4816      	ldr	r0, [pc, #88]	; (800dfac <lv_theme_material_init+0x1230>)
 800df54:	f7ff fb8d 	bl	800d672 <lv_theme_material_init+0x8f6>
    lv_style_set_value_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 800df58:	4814      	ldr	r0, [pc, #80]	; (800dfac <lv_theme_material_init+0x1230>)
 800df5a:	f7ff fbb7 	bl	800d6cc <lv_theme_material_init+0x950>
    lv_style_set_value_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 800df5e:	4813      	ldr	r0, [pc, #76]	; (800dfac <lv_theme_material_init+0x1230>)
 800df60:	f7ff fbc3 	bl	800d6ea <lv_theme_material_init+0x96e>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 800df64:	2000      	movs	r0, #0
 800df66:	f7fd fa37 	bl	800b3d8 <lv_disp_get_dpi>
 800df6a:	2728      	movs	r7, #40	; 0x28
 800df6c:	e4bd      	b.n	800d8ea <lv_theme_material_init+0xb6e>
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(10) : LV_DPX(20);
 800df6e:	2000      	movs	r0, #0
 800df70:	f7fd fa32 	bl	800b3d8 <lv_disp_get_dpi>
 800df74:	2614      	movs	r6, #20
 800df76:	e4d7      	b.n	800d928 <lv_theme_material_init+0xbac>
 800df78:	2000      	movs	r0, #0
 800df7a:	f7fd fa2d 	bl	800b3d8 <lv_disp_get_dpi>
 800df7e:	4370      	muls	r0, r6
 800df80:	21a0      	movs	r1, #160	; 0xa0
 800df82:	3050      	adds	r0, #80	; 0x50
 800df84:	f7f2 f980 	bl	8000288 <__divsi3>
 800df88:	b206      	sxth	r6, r0
 800df8a:	e4d2      	b.n	800d932 <lv_theme_material_init+0xbb6>
    lv_style_set_bg_color(&styles->bar_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
 800df8c:	4808      	ldr	r0, [pc, #32]	; (800dfb0 <lv_theme_material_init+0x1234>)
 800df8e:	e505      	b.n	800d99c <lv_theme_material_init+0xc20>
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
 800df90:	883a      	ldrh	r2, [r7, #0]
 800df92:	e53d      	b.n	800da10 <lv_theme_material_init+0xc94>
    lv_style_set_value_color(&styles->bar_indic, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x41404f) : LV_COLOR_WHITE);
 800df94:	883a      	ldrh	r2, [r7, #0]
 800df96:	e5a9      	b.n	800daec <lv_theme_material_init+0xd70>
    lv_style_set_line_color(&styles->arc_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
 800df98:	4805      	ldr	r0, [pc, #20]	; (800dfb0 <lv_theme_material_init+0x1234>)
 800df9a:	e5df      	b.n	800db5c <lv_theme_material_init+0xde0>
    lv_style_set_bg_color(&styles->cpicker_bg, LV_STATE_DEFAULT, COLOR_SCR);
 800df9c:	480b      	ldr	r0, [pc, #44]	; (800dfcc <lv_theme_material_init+0x1250>)
 800df9e:	e64d      	b.n	800dc3c <lv_theme_material_init+0xec0>
 800dfa0:	00e7e9ec 	.word	0x00e7e9ec
 800dfa4:	00586273 	.word	0x00586273
 800dfa8:	00808a97 	.word	0x00808a97
 800dfac:	00ffffff 	.word	0x00ffffff
 800dfb0:	0045494d 	.word	0x0045494d
 800dfb4:	00404040 	.word	0x00404040
 800dfb8:	00a5a8ad 	.word	0x00a5a8ad
 800dfbc:	00494f57 	.word	0x00494f57
 800dfc0:	005f656e 	.word	0x005f656e
 800dfc4:	00000999 	.word	0x00000999
 800dfc8:	00000888 	.word	0x00000888
 800dfcc:	00444b5a 	.word	0x00444b5a

0800dfd0 <__libc_init_array>:
 800dfd0:	b570      	push	{r4, r5, r6, lr}
 800dfd2:	2600      	movs	r6, #0
 800dfd4:	4d0c      	ldr	r5, [pc, #48]	; (800e008 <__libc_init_array+0x38>)
 800dfd6:	4c0d      	ldr	r4, [pc, #52]	; (800e00c <__libc_init_array+0x3c>)
 800dfd8:	1b64      	subs	r4, r4, r5
 800dfda:	10a4      	asrs	r4, r4, #2
 800dfdc:	42a6      	cmp	r6, r4
 800dfde:	d109      	bne.n	800dff4 <__libc_init_array+0x24>
 800dfe0:	2600      	movs	r6, #0
 800dfe2:	f000 f841 	bl	800e068 <_init>
 800dfe6:	4d0a      	ldr	r5, [pc, #40]	; (800e010 <__libc_init_array+0x40>)
 800dfe8:	4c0a      	ldr	r4, [pc, #40]	; (800e014 <__libc_init_array+0x44>)
 800dfea:	1b64      	subs	r4, r4, r5
 800dfec:	10a4      	asrs	r4, r4, #2
 800dfee:	42a6      	cmp	r6, r4
 800dff0:	d105      	bne.n	800dffe <__libc_init_array+0x2e>
 800dff2:	bd70      	pop	{r4, r5, r6, pc}
 800dff4:	00b3      	lsls	r3, r6, #2
 800dff6:	58eb      	ldr	r3, [r5, r3]
 800dff8:	4798      	blx	r3
 800dffa:	3601      	adds	r6, #1
 800dffc:	e7ee      	b.n	800dfdc <__libc_init_array+0xc>
 800dffe:	00b3      	lsls	r3, r6, #2
 800e000:	58eb      	ldr	r3, [r5, r3]
 800e002:	4798      	blx	r3
 800e004:	3601      	adds	r6, #1
 800e006:	e7f2      	b.n	800dfee <__libc_init_array+0x1e>
 800e008:	08011864 	.word	0x08011864
 800e00c:	08011864 	.word	0x08011864
 800e010:	08011864 	.word	0x08011864
 800e014:	08011868 	.word	0x08011868

0800e018 <memcmp>:
 800e018:	b530      	push	{r4, r5, lr}
 800e01a:	2400      	movs	r4, #0
 800e01c:	42a2      	cmp	r2, r4
 800e01e:	d101      	bne.n	800e024 <memcmp+0xc>
 800e020:	2000      	movs	r0, #0
 800e022:	e005      	b.n	800e030 <memcmp+0x18>
 800e024:	5d03      	ldrb	r3, [r0, r4]
 800e026:	1c65      	adds	r5, r4, #1
 800e028:	5d0c      	ldrb	r4, [r1, r4]
 800e02a:	42a3      	cmp	r3, r4
 800e02c:	d001      	beq.n	800e032 <memcmp+0x1a>
 800e02e:	1b18      	subs	r0, r3, r4
 800e030:	bd30      	pop	{r4, r5, pc}
 800e032:	002c      	movs	r4, r5
 800e034:	e7f2      	b.n	800e01c <memcmp+0x4>

0800e036 <memcpy>:
 800e036:	2300      	movs	r3, #0
 800e038:	b510      	push	{r4, lr}
 800e03a:	429a      	cmp	r2, r3
 800e03c:	d100      	bne.n	800e040 <memcpy+0xa>
 800e03e:	bd10      	pop	{r4, pc}
 800e040:	5ccc      	ldrb	r4, [r1, r3]
 800e042:	54c4      	strb	r4, [r0, r3]
 800e044:	3301      	adds	r3, #1
 800e046:	e7f8      	b.n	800e03a <memcpy+0x4>

0800e048 <memset>:
 800e048:	0003      	movs	r3, r0
 800e04a:	1812      	adds	r2, r2, r0
 800e04c:	4293      	cmp	r3, r2
 800e04e:	d100      	bne.n	800e052 <memset+0xa>
 800e050:	4770      	bx	lr
 800e052:	7019      	strb	r1, [r3, #0]
 800e054:	3301      	adds	r3, #1
 800e056:	e7f9      	b.n	800e04c <memset+0x4>

0800e058 <strcpy>:
 800e058:	0003      	movs	r3, r0
 800e05a:	780a      	ldrb	r2, [r1, #0]
 800e05c:	3101      	adds	r1, #1
 800e05e:	701a      	strb	r2, [r3, #0]
 800e060:	3301      	adds	r3, #1
 800e062:	2a00      	cmp	r2, #0
 800e064:	d1f9      	bne.n	800e05a <strcpy+0x2>
 800e066:	4770      	bx	lr

0800e068 <_init>:
 800e068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e06a:	46c0      	nop			; (mov r8, r8)
 800e06c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e06e:	bc08      	pop	{r3}
 800e070:	469e      	mov	lr, r3
 800e072:	4770      	bx	lr

0800e074 <_fini>:
 800e074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e076:	46c0      	nop			; (mov r8, r8)
 800e078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e07a:	bc08      	pop	{r3}
 800e07c:	469e      	mov	lr, r3
 800e07e:	4770      	bx	lr
